{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ARG AS400 IBMi Documentation","text":""},{"location":"#modules","title":"Modules","text":""},{"location":"#accounts-payable","title":"Accounts Payable","text":""},{"location":"#accounts-receivable","title":"Accounts Receivable","text":""},{"location":"#order-entry","title":"Order Entry","text":""},{"location":"#billing","title":"Billing","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/","title":"AP100 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, <code>AP100.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400 or iSeries) for Accounts Payable (A/P) voucher entry and editing. Below is an explanation of the process steps, followed by a list of external programs called and tables (files) used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates the A/P voucher entry and edit process, handling validation, file management, and user interaction for regular A/P transactions, freight invoices from the LMS system, or other entry methods. Here\u2019s a breakdown of the steps:</p> <ol> <li>Initial Validation and Inventory Check:</li> <li>The program checks if an inventory process (<code>INTSZZ</code>) is in progress by evaluating <code>DATAF1-?9?INTSZZ</code>.</li> <li>If true, it displays messages indicating that the inventory process is ongoing, instructs the user to try again later, pauses for user input (press 0 to cancel), and branches to the <code>END</code> tag, halting execution.</li> <li> <p>This prevents A/P voucher posting during specific inventory processes to avoid data conflicts.</p> </li> <li> <p>Wire Transfer (WT) Handling:</p> </li> <li>The program checks if the transaction involves a wire transfer (<code>?3?/WT</code>).</li> <li>If true, it sets <code>P20</code> to <code>'APWT?WS?'</code> and adds a local data field at offset 198 with <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>If false, it sets <code>P20</code> to <code>'APTR?WS?'</code> and clears the data field at offset 198.</li> <li> <p>This distinguishes wire transfer transactions from regular A/P transactions.</p> </li> <li> <p>LMS Freight Invoice vs. Regular A/P Check:</p> </li> <li>The program determines whether the process is for freight invoices imported from the LMS system or regular A/P transactions.</li> <li>Rule: If an A/P transaction file (<code>?9??20?</code>) exists, LMS processing is not allowed.</li> <li>If the A/P transaction file does not exist, the program displays a selection screen (<code>AP100S</code>) for the user to choose between LMS automatic processing or regular A/P entry.</li> <li> <p>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists, the program deletes the A/P transaction file (<code>APTX?WS?</code>) using <code>GSDELETE</code>.</p> </li> <li> <p>User Selection for Entry Method:</p> </li> <li>The program loads the <code>AP100S</code> screen to allow the user to select the entry method:<ul> <li>ARGLMS: Triggers the <code>AP125</code> program for LMS processing (with parameter <code>N</code>) and branches to <code>END</code>.</li> <li>PAPER: Triggers the <code>AP125</code> program for paper-based A/P entry (with parameter <code>P</code>) and branches to <code>END</code>.</li> <li>FLEXI: Triggers the <code>AP106</code> program for flexible entry and branches to <code>END</code>.</li> <li>CANCEL: If the user cancels (<code>?L'129,6'?/CANCEL</code>), the program branches to <code>END</code>.</li> </ul> </li> <li> <p>If the A/P transaction file exists (<code>?F'A,?9?APTR?WS?'?/00000000</code>) or <code>DATAF1-?9??20?</code> is true, the program skips to the <code>AROUND</code> tag, bypassing the selection screen.</p> </li> <li> <p>File and Index Creation:</p> </li> <li>If the A/P transaction file (<code>?9??20?</code>) does not exist, the program creates it using <code>BLDFILE</code> with 500 records, 404 bytes each, and specific key fields.</li> <li>It also builds an index for the A/P transaction file (<code>?9?APTX?WS?</code>) with keys at positions 12, 5, 385, and 20.</li> <li>For the inventory transaction holding file (<code>INTZH1</code>), it builds an index if it exists (<code>DATAF1-?9?INTZH1</code>).</li> <li> <p>If the job cost file (<code>JCCOST</code>) exists, it creates a file with 999,000 records, 256 bytes each.</p> </li> <li> <p>File Definitions for AP100:</p> </li> <li>The program defines multiple files for the <code>AP100</code> program, including <code>APTRAN</code>, <code>APTRANX</code>, <code>APTRNX</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPNHC</code>, <code>APCONT</code>, <code>APDATE</code>, <code>APVEND</code>, <code>APVENDX</code>, <code>GLMAST</code>, <code>JCCOST</code>, <code>GSTABL</code>, <code>POFILE</code>, <code>POADDR</code>, <code>APINVH</code>, <code>APHSTHC</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>POPROJ</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>BICONT</code>, <code>GSCTUM</code>, <code>FRCINH</code>, and <code>FRCFBH</code>.</li> <li>These files are opened with shared access (<code>DISP-SHR</code>) and extended as needed (e.g., <code>EXTEND-100</code> for <code>APTRAN</code>).</li> <li> <p>The program then runs <code>AP100</code> for voucher entry.</p> </li> <li> <p>Post-Entry Processing:</p> </li> <li>If the A/P transaction file is empty (<code>?F'A,?9??20?'?/00000000</code>), the program branches to <code>END</code>.</li> <li>It sets local variables at offsets 135 (<code>?WS?</code>) and 221 (<code>?9??20?</code>).</li> <li> <p>It deletes and rebuilds the A/P check transaction file (<code>APCT?WS?</code>) with 500 records, 80 bytes each.</p> </li> <li> <p>Voucher Transaction Edit (AP110):</p> </li> <li>The program loads <code>AP110</code> for editing A/P voucher transactions.</li> <li>It defines files like <code>APTRAN</code>, <code>APCONT</code>, <code>APCHKR</code>, <code>APCHKT</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>GSTABL</code>, <code>APSTAT</code>, <code>APVEND</code>, <code>INFIL1</code>, and <code>INTZH1</code>.</li> <li>It overrides the printer file (<code>APLIST</code>) to output to <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The program runs <code>AP110</code> to edit transactions.</p> </li> <li> <p>Prepaid Check Edit (AP115):</p> </li> <li>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists or the A/P check transaction file (<code>APCT?WS?</code>) is empty, the program skips to <code>NOPPD</code>.</li> <li>Otherwise, it loads <code>AP115</code> for prepaid check editing, defining files like <code>APCHKT</code>, <code>APCHKTX</code>, <code>APCHKR</code>, and <code>APCONT</code>.</li> <li> <p>It overrides the printer file (<code>APLIST</code>) similarly and runs <code>AP115</code>.</p> </li> <li> <p>Purchase Order Edit (Skipped):</p> <ul> <li>The program explicitly skips the purchase order edit section by branching to <code>END</code>.</li> <li>If executed, it would:</li> <li>Sort the A/P transaction file (<code>?9??20?</code>) into <code>?9?APPO?WS?</code> using <code>#GSORT</code> with specific sort criteria (company, P/O number, entry sequence).</li> <li>Load <code>AP120</code> for A/P and purchase order voucher editing, using files like <code>APTRAN</code>, <code>APTRANH</code>, <code>APCONT</code>, and <code>POFILE</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>The program clears all local variables (<code>LOCAL BLANK-*ALL</code>) and ends execution at the <code>END</code> tag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP100S: Displays the selection screen for choosing the entry method (LMS, paper, or flexible). 2. AP100: Handles A/P voucher entry. 3. AP106: Processes flexible A/P entry (triggered by <code>FLEXI</code> selection). 4. AP110: Edits A/P voucher transactions. 5. AP115: Edits prepaid checks. 6. AP120: Handles A/P and purchase order voucher editing (skipped in this execution). 7. AP125: Processes LMS or paper-based A/P entry (triggered by <code>ARGLMS</code> or <code>PAPER</code> selection). 8. #GSORT: Sorts the A/P transaction file for purchase order editing (skipped).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), primarily opened with shared access (<code>DISP-SHR</code>): 1. APTRAN: A/P transaction file (<code>?9??20?</code>). 2. APTRANX: Alternate A/P transaction file (<code>?9??20?</code>). 3. APTRNX: A/P transaction index file (<code>?9?APTX?WS?</code>). 4. APOPEN: A/P open items file (<code>?9?APOPEN</code>). 5. APOPENH: A/P open items history file (<code>?9?APOPNH</code>). 6. APOPNHC: A/P open items history control file (<code>?9?APOPNHC</code>). 7. APCONT: A/P control file (<code>?9?APCONT</code>). 8. APDATE: A/P date file (<code>?9?APDATE</code>). 9. APVEND: A/P vendor file (<code>?9?APVEND</code>). 10. APVENDX: A/P vendor index file (<code>?9?APVENX</code>). 11. GLMAST: General ledger master file (<code>?9?GLMAST</code>). 12. JCCOST: Job cost file (<code>?9?JCCOST</code>). 13. GSTABL: General system table (<code>?9?GSTABL</code>). 14. POFILE: Purchase order file (<code>?9?POFILE</code>). 15. POADDR: Purchase order address file (<code>?9?POADDR</code>). 16. APINVH: A/P invoice history file (<code>?9?APINVH</code>). 17. APHSTHC: A/P history control file (<code>?9?APHSTHC</code>). 18. INFIL1: Inventory file 1 (<code>?9?INFIL1</code>). 19. INTZH1: Inventory transaction holding file (<code>?9?INTZH1</code>). 20. POPROJ: Purchase order project file (<code>?9?POPROJ</code>). 21. SA5FIUD: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUD</code>). 22. SA5FIUM: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUM</code>). 23. SA5MOUD: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUD</code>). 24. SA5MOUM: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUM</code>). 25. BICONT: Business intelligence control file (<code>?9?BICONT</code>). 26. GSCTUM: General system control table (unknown purpose) (<code>?9?GSCTUM</code>). 27. FRCINH: Freight invoice history file (<code>?9?FRCINH</code>). 28. FRCFBH: Freight feedback history file (<code>?9?FRCFBH</code>). 29. APCHKR: A/P check register file (<code>?9?APCHKR</code>). 30. APCHKT: A/P check transaction file (<code>?9?APCT?WS?</code>). 31. APCHKTX: Alternate A/P check transaction file (<code>?9?APCT?WS?</code>). 32. APSTAT: A/P status file (<code>?9?APSTAT</code>). 33. APPO?WS?: Sorted A/P purchase order file (used by <code>#GSORT</code>, temporary).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#summary","title":"Summary","text":"<p>The <code>AP100.ocl36.txt</code> OCL program manages the A/P voucher entry and edit process, ensuring no conflicts with inventory processes, handling wire transfers, and allowing user selection between LMS freight invoices, paper-based, or flexible A/P entry. It creates and indexes necessary files, runs appropriate programs (<code>AP100</code>, <code>AP106</code>, <code>AP110</code>, <code>AP115</code>, <code>AP125</code>, <code>#GSORT</code>), and skips purchase order editing. The program uses a comprehensive set of files to store transaction, vendor, inventory, and financial data, ensuring proper integration with the broader A/P system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/","title":"AP100 RPG","text":"<p>The provided <code>AP100.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by the OCL program <code>AP100.ocl36.txt</code>. It handles the entry and validation of Accounts Payable (A/P) voucher transactions, including header and detail records, with support for various payment types (e.g., wire transfers, ACH, employee expenses) and validations for inventory, purchase orders, and vendor data. Below is an explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#process-steps-of-the-rpg-program-ap100","title":"Process Steps of the RPG Program (AP100)","text":"<p>The RPG program <code>AP100</code> manages the interactive entry and editing of A/P voucher transactions through multiple screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates input, retrieves data from files, and updates transaction records. Here are the key process steps:</p> <ol> <li>Initialization:</li> <li>Clears variables and sets indicators to their initial state (e.g., <code>Z-ADD *ZERO</code>, <code>MOVE *BLANKS</code>, <code>SETOF</code>).</li> <li>Sets the process type (<code>PTYP</code>) to <code>'NORMAL'</code> if blank (modification <code>JK01</code>).</li> <li>Retrieves the current system date and time (<code>TIME</code>), formats it into various date fields (<code>SYTIME</code>, <code>SYDATE</code>, <code>SYDYMD</code>, <code>MONTH</code>, <code>YEAR</code>), and calculates century for date handling (<code>Y2KCEN</code>).</li> <li>Checks for wire transfer (<code>LDAWT = 'WT'</code>) or employee expense (<code>LDAWT = 'EE'</code>) flags, setting indicators <code>22</code> or <code>23</code> accordingly.</li> <li> <p>Initializes keys for file access (e.g., <code>TERMKY</code> for terms, <code>GSCKEY</code> for carrier ID).</p> </li> <li> <p>Screen Processing:</p> </li> <li>The program uses multiple screen formats:<ul> <li>AP100S1: Collects company number (<code>CONO</code>), vendor number (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher number (<code>CNVO</code>), and purchase order number (<code>PONO</code>).</li> <li>AP100S2: Displays and collects header information (e.g., vendor details, invoice amount, invoice number, dates, hold codes).</li> <li>AP100S3: Handles detail line entry (e.g., expense G/L, amount, discount, purchase order, gallons, receipt number).</li> <li>AP100S5: Allows entry of a vendor number (<code>VEND#</code>) for lookup or navigation.</li> </ul> </li> <li> <p>The main loop (<code>DO</code> at line 0446) processes user input based on the screen format triggered (indicators <code>01</code>, <code>02</code>, <code>03</code>, <code>05</code> for <code>S1</code>, <code>S2</code>, <code>S3</code>, <code>S5</code> subroutines).</p> </li> <li> <p>S1 Subroutine (AP100S1 Screen):</p> </li> <li>Validates the company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted (<code>ACDEL = 'D'</code>), displays error message (<code>COM,1</code>) and exits.</li> <li>Checks if vendor (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher (<code>CNVO</code>), or purchase order (<code>PONO</code>) are blank or zero. If so, displays error (<code>COM,31</code>) and exits.</li> <li>Searches for vendor information (<code>VNSRCH</code> subroutine) if vendor is valid. If not found, displays error (<code>COM,32</code>).</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for new entries (<code>ADDNEW</code> mode) or validates existing entry numbers (<code>ENT#</code>) against <code>APTRAN</code>.</li> <li>Checks if job cost (<code>ACJCYN = 'Y'</code>) or purchase order (<code>ACPOYN = 'Y'</code>) processing is active, setting indicators <code>65</code> and <code>67</code>.</li> <li> <p>Updates <code>APCONT</code> with the next entry number and writes the record.</p> </li> <li> <p>S2 Subroutine (AP100S2 Screen):</p> </li> <li>Retrieves or clears header information (vendor name, address, invoice amount, dates, hold codes, etc.).</li> <li>Validates vendor number (<code>VEND</code>) against <code>APVEND</code>. If invalid, deleted (<code>VNDEL = 'D'</code>), or inactive (<code>VNDEL = 'I'</code>), displays errors (<code>COM,2</code> or <code>COM,67</code>).</li> <li>Applies vendor defaults (e.g., hold code <code>VNHOLD</code>, single check <code>VNSNGL</code>, expense G/L <code>VNEXGL</code>, terms <code>VNTERM</code>).</li> <li>For employee vendors (<code>VNPRID \u2260 0</code>), sets hold code to <code>'E'</code> and uses employee expense G/L (<code>ACEEGL</code>).</li> <li>Validates hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and prepay codes (<code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>), setting appropriate hold descriptions (<code>HLDD</code>).</li> <li>Checks invoice number (<code>INV#</code>) for duplicates in <code>APTRANX</code>, <code>APOPEN</code>, <code>APOPNHC</code>, or <code>APHSTHC</code>. If found, requires override codes (<code>COM2,2</code>, <code>COM2,3</code>).</li> <li>Calculates due date (<code>DUDT</code>) and discount due date (<code>DSDT</code>) using terms from <code>GSTABL</code> (subroutines <code>@DTE1</code>, <code>@DTE2</code>, <code>TMDATP</code>).</li> <li>Ensures invoice amount (<code>IAMT</code>) is non-zero and matches detail totals (<code>CLCTOT</code> subroutine).</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), calls <code>AP1011</code> to populate detail lines with calculated freight amounts.</p> </li> <li> <p>S3 Subroutine (AP100S3 Screen):</p> </li> <li>Validates detail line fields (e.g., expense G/L <code>EXGL</code>, amount <code>AMT</code>, discount <code>DISC</code>, purchase order <code>PONO</code>, gallons <code>GALN</code>, receipt <code>RCPT</code>).</li> <li>Ensures expense G/L (<code>EXGL</code>) matches company (<code>LNCO</code>) and is valid in <code>GLMAST</code>. If deleted (<code>GLDEL = 'D'</code>) or inactive (<code>GLDEL = 'I'</code>), displays error (<code>COM,7</code>).</li> <li>Applies vendor default expense G/L (<code>VNEXGL</code>) if blank.</li> <li>Validates discounts: Ensures <code>DISC</code> and <code>DSPC</code> (discount percentage) are not both non-zero (<code>COM,35</code>) and that a discount G/L (<code>ACDSGL</code>) exists (<code>COM,36</code>).</li> <li>For sales orders (<code>SORN \u2260 0</code>), prohibits receipt numbers or gallons (<code>COM,57</code>).</li> <li>Validates gallons/receipt requirements based on <code>VNGRRQ</code> and <code>GLAPCD</code>:<ul> <li>If <code>VNGRRQ = 'Y'</code>, requires gallons (<code>GALN</code>) and receipt (<code>RCPT</code>) (<code>COM,71</code>, <code>COM,72</code>).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits gallons and receipt (<code>COM,73</code>, <code>COM,74</code>).</li> <li>Ensures G/L requires gallons (<code>GLAPCD = 'Y'</code>) if vendor requires them, and vice versa (<code>COM,75</code>, <code>COM,76</code>).</li> </ul> </li> <li>If <code>GLPOCD = 'Y'</code> (PO required for G/L), ensures <code>PONO</code> is entered (<code>COM,78</code>).</li> <li>Validates receipt numbers (<code>RCPT</code>) against <code>INFIL1</code> or <code>INTZH1</code>, checking quantities and prior postings (<code>COM,40</code>, <code>COM,42</code>, <code>COM,43</code>).</li> <li>Ensures receipt code (<code>CLCD</code>) is <code>'O'</code> or <code>'C'</code> (<code>COM,44</code>).</li> <li>Calculates freight amounts (<code>FRAM</code>) for detail lines if total freight (<code>FRTL</code>) is non-zero, ensuring detail amounts sum to invoice total (<code>IAMT</code>).</li> <li> <p>Updates or adds detail records to <code>APTRAN</code>.</p> </li> <li> <p>S5 Subroutine (AP100S5 Screen):</p> </li> <li>Handles vendor lookup by number (<code>VEND#</code>) or name search (<code>ABBR</code>).</li> <li>If <code>VEND#</code> is entered, sets <code>VEND</code> and clears <code>ABBR</code>, then returns to <code>S1</code>.</li> <li> <p>If blank, performs a name search (<code>NRLFWD</code> subroutine) to display vendor options.</p> </li> <li> <p>Roll Forward/Backward Handling:</p> </li> <li>ROLFWD: Navigates to the next detail line in <code>APTRANX</code>, populating fields (<code>DETGET</code>) and validating (<code>S3EDIT</code>).</li> <li> <p>ROLLBK: Navigates to the previous detail line or header, populating fields (<code>DETGET</code> or <code>HDRGET</code>) and validating (<code>S3EDIT</code> or <code>S2EDIT</code>).</p> </li> <li> <p>Date Handling:</p> </li> <li>Subroutines <code>@DTE1</code> and <code>@DTE2</code> convert between Gregorian and Julian dates for due date and discount date calculations.</li> <li> <p>Ensures due dates (<code>DUDT</code>) and discount due dates (<code>DSDT</code>) are valid and not on holidays/weekends (<code>APDATE</code> file, modification <code>MG17</code>).</p> </li> <li> <p>Freight Invoice Validation:</p> </li> <li> <p>Checks <code>FRCFBH</code> and <code>FRCINH</code> for freight invoices:</p> <ul> <li>For <code>NORMAL</code> mode, ensures <code>FRAPST</code> (A/P status) is blank (<code>COM,60</code>).</li> <li>For <code>PAPER</code> mode, ensures <code>FRINTY = 'P'</code> (<code>COM,62</code>).</li> <li>For <code>ARGLMS</code> mode, ensures <code>FRINTY = 'O'</code> or <code>'S'</code> (<code>COM,61</code>).</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>Adds or updates header records in <code>APTRAN</code> (e.g., <code>EADD 70</code>, <code>E 70N95</code>).</li> <li>Adds or updates detail records in <code>APTRAN</code> (e.g., <code>EADD 71</code>, <code>E 71N96</code>).</li> <li>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</li> <li>Updates one-time vendor information in <code>APTRAN</code> if needed.</li> <li>Writes to <code>APOPENH</code> for open invoices.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Displays error messages from the <code>COM</code> and <code>COM2</code> arrays for various validation failures (e.g., invalid vendor, duplicate invoice, missing fields).</li> <li>Sets indicator <code>90</code> to highlight errors and prevent progression until corrected.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>Ends the program when the user presses the end-of-job key (<code>KG</code>), setting the last record indicator (<code>LR</code>) and exiting.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor Validation:</li> <li>Company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li> <p>Vendor number (<code>VEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>) or inactive (<code>VNDEL \u2260 'I'</code>).</p> </li> <li> <p>Invoice Number Uniqueness:</p> </li> <li> <p>Invoice numbers (<code>INV#</code>) must be unique within the batch (<code>APTRANX</code>) and not exist in open (<code>APOPEN</code>, <code>APOPNHC</code>) or paid (<code>APHSTHC</code>) invoices unless overridden (<code>MG10</code>).</p> </li> <li> <p>Hold and Prepay Codes:</p> </li> <li>Hold codes (<code>HOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li> <p>Prepay codes (<code>PAID</code>) must be <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code>, with a corresponding check number (<code>PPCK</code>) if applicable.</p> </li> <li> <p>Gallons and Receipt Validation:</p> </li> <li>If the vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), both <code>GALN</code> and <code>RCPT</code> must be entered.</li> <li>If <code>VNGRRQ = 'N'</code>, gallons and receipts are prohibited.</li> <li>If the G/L account requires gallons (<code>GLAPCD = 'Y'</code>), <code>GALN</code> must be entered and match the sign of the amount (<code>AMT</code>).</li> <li> <p>Receipt numbers (<code>RCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with valid quantities and no prior A/P postings.</p> </li> <li> <p>Purchase Order Requirements:</p> </li> <li> <p>If the G/L account requires a purchase order (<code>GLPOCD = 'Y'</code>), a valid <code>PONO</code> must be entered.</p> </li> <li> <p>Discount Validation:</p> </li> <li>Discount amount (<code>DISC</code>) and percentage (<code>DSPC</code>) cannot both be non-zero.</li> <li>A discount G/L (<code>ACDSGL</code>) must exist if discounts are used.</li> <li> <p>Discount due date (<code>DSDT</code>) must be entered if discounts are applied, or an error is raised (<code>MG20</code>).</p> </li> <li> <p>Freight Invoices:</p> </li> <li>Freight invoices must be processed in the correct mode (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>) based on invoice type (<code>FRINTY</code>) in <code>FRCFBH</code> or <code>FRCINH</code>.</li> <li> <p>Freight amounts (<code>FRTL</code>) are allocated to detail lines, with calculations ensuring detail totals match the invoice total.</p> </li> <li> <p>Sales Order Restrictions:</p> </li> <li> <p>If a sales order number (<code>SORN</code>) is entered, receipt numbers and gallons are not allowed.</p> </li> <li> <p>Date Handling:</p> </li> <li>Due dates and discount due dates are calculated based on vendor terms (<code>VNTERM</code>) from <code>GSTABL</code>.</li> <li> <p>Dates are adjusted to avoid holidays and weekends (<code>APDATE</code>).</p> </li> <li> <p>Amount Validation:</p> <ul> <li>Invoice amount (<code>IAMT</code>) must be non-zero and match the sum of detail line amounts (<code>AMT</code> + <code>FRAM</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes (e.g., <code>UC</code> for update/create, <code>IF</code> for input, <code>ID</code> for indexed):</p> <ol> <li>SCREEN: Workstation file for interactive display (1200 bytes, <code>WORKSTN</code>).</li> <li>APTRAN: A/P transaction file (404 bytes, update/create, key length 10).</li> <li>APTRANX: A/P transaction index file (404 bytes, input, key length 10).</li> <li>APTRNX: A/P transaction index file (404 bytes, input, external key, 27 bytes).</li> <li>APOPEN: A/P open items file (384 bytes, input, key length 16).</li> <li>APOPENH: A/P open items history file (384 bytes, update/create, key length 16).</li> <li>APOPNHC: A/P open items history control file (384 bytes, input, key length 32).</li> <li>APCONT: A/P control file (256 bytes, update/create, key length 2).</li> <li>APVEND: A/P vendor file (579 bytes, input, key length 7).</li> <li>APVENDX: A/P vendor index file (579 bytes, input, external key, 17 bytes).</li> <li>GLMAST: General ledger master file (256 bytes, input, key length 11).</li> <li>GSTABL: General system table (256 bytes, input, key length 12).</li> <li>APINVH: A/P invoice history file (64 bytes, input, key length 32).</li> <li>APHSTHC: A/P history control file (384 bytes, input, key length 32).</li> <li>INFIL1: Inventory file (448 bytes, input, external key, 9 bytes).</li> <li>INTZH1: Inventory transaction holding file (592 bytes, input, external key, 9 bytes).</li> <li>SA5FIUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5FIUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>SA5MOUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5MOUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>FRCINH: Freight invoice history file (206 bytes, input, key length 33).</li> <li>FRCFBH: Freight feedback history file (206 bytes, input, key length 39).</li> <li>APDATE: A/P date file (19 bytes, input, key length 10).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP1011: Called to populate freight detail lines with calculated percentage amounts when a sales order (<code>SORN</code>) and freight total (<code>FRTL</code>) are present. It uses the <code>SALES</code> data structure as a parameter.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#summary","title":"Summary","text":"<p>The <code>AP100</code> RPG program is a critical component of the A/P voucher entry system, handling interactive input through multiple screens (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates company, vendor, invoice, and detail line data, ensuring compliance with business rules such as unique invoice numbers, valid hold/prepay codes, gallons/receipt requirements, and freight invoice processing. The program integrates with numerous files for transaction, vendor, inventory, and financial data, and calls <code>AP1011</code> for freight detail calculations. It enforces strict validations to maintain data integrity and supports various payment types and processing modes (e.g., <code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/","title":"AP100 Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#list-of-use-cases-implemented-by-the-ap100-ap110-and-ap115-programs","title":"List of Use Cases Implemented by the AP100, AP110, and AP115 Programs","text":"<p>The RPG programs <code>AP100</code>, <code>AP110</code>, and <code>AP115</code> form a call stack for processing Accounts Payable (A/P) voucher transactions on IBM midrange systems (e.g., AS/400 or iSeries). Together, they implement a single cohesive use case:</p> <ol> <li>Use Case: Process and Validate A/P Voucher Transactions</li> <li>Description: This use case involves the entry, validation, editing, and reporting of A/P voucher transactions, including header and detail records, for various payment types (e.g., prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). The process ensures data integrity, validates against vendor, company, G/L, and inventory data, and generates reports for errors and totals.</li> <li>Components:<ul> <li>AP100: Handles interactive entry and validation of voucher transactions via screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>), updating transaction files (<code>APTRAN</code>, <code>APCONT</code>) and calling <code>AP1011</code> for freight calculations.</li> <li>AP110: Validates voucher transactions from <code>APTRAN</code>, checks for errors (e.g., duplicate invoices, invalid G/Ls), updates prepaid check records (<code>APCHKT</code>), and produces an edit report (<code>APLIST</code>).</li> <li>AP115: Validates prepaid checks, ensuring non-void checks are not already open and void checks match the full amount, generating an error report (<code>APLIST</code>).</li> </ul> </li> </ol> <p>This single use case encompasses the entire workflow of entering, validating, and reporting A/P voucher transactions, with each program handling a specific aspect of the process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions_1","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#overview","title":"Overview","text":"<p>This function processes and validates Accounts Payable (A/P) voucher transactions, including header and detail records, for various payment types (prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). It ensures data integrity by validating inputs against company, vendor, G/L, and inventory data, calculates due dates and discounts, updates transaction and check files, and generates reports for errors and totals.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): 2-digit identifier for the company.</li> <li>Vendor Number (<code>VEND</code>): 5-digit identifier for the vendor.</li> <li>Entry Number (<code>ENT#</code>): 5-digit transaction identifier (auto-generated or user-provided).</li> <li>Invoice Number (<code>INV#</code>): 20-character vendor invoice number.</li> <li>Invoice Amount (<code>IAMT</code>): 11.2-digit total invoice amount.</li> <li>Invoice Date (<code>INDT</code>): 6-digit vendor invoice date (MMDDYY).</li> <li>Due Date (<code>DUDT</code>): 6-digit due date (MMDDYY, calculated or user-provided).</li> <li>Discount Due Date (<code>DSDT</code>): 6-digit discount due date (MMDDYY, calculated or user-provided).</li> <li>Hold Code (<code>HOLD</code>): 1-character code (<code>H</code>=hold, <code>A</code>=ACH, <code>W</code>=wire transfer, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepay Code (<code>PAID</code>): 1-character code (<code>P</code>=prepaid, <code>A</code>=ACH, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepaid Check Number (<code>PPCK</code>): 6-digit check number for prepaid transactions.</li> <li>Single Check Flag (<code>SNGL</code>): 1-character flag (<code>S</code>=single check).</li> <li>Canceled Voucher (<code>CNVO</code>): 5-digit canceled voucher number.</li> <li>Purchase Order Number (<code>PONO</code>): 30-character purchase order number.</li> <li>Sales Order Number (<code>SORN</code>): 6-digit sales order number.</li> <li>Carrier ID (<code>CAID</code>): 6-character carrier identifier.</li> <li>Process Type (<code>PTYP</code>): 6-character process type (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</li> <li>Freight Total (<code>FRTL</code>): 7.2-digit total freight amount to allocate.</li> <li>Detail Lines:</li> <li>Sequence Number (<code>ENSQ</code>): 3-digit line sequence.</li> <li>Expense G/L (<code>EXGL</code>): 8-digit expense general ledger account.</li> <li>Amount (<code>AMT</code>): 8.2-digit line amount.</li> <li>Discount Amount (<code>DISC</code>): 8.2-digit discount amount.</li> <li>Discount Percentage (<code>DSPC</code>): 3.2-digit discount percentage.</li> <li>Gallons (<code>GALN</code>): 4.2-digit gallons quantity.</li> <li>Receipt Number (<code>RCPT</code>): 7-digit receipt number.</li> <li>Receipt Code (<code>CLCD</code>): 1-character code (<code>O</code>=open, <code>C</code>=closed).</li> <li>Freight Amount (<code>FRAM</code>): 4.2-digit freight amount per line.</li> <li>Product Amount (<code>PRAM</code>): 6.2-digit product amount per line.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>APTRAN</code>: Transaction header and detail records.</li> <li><code>APCHKT</code>: Prepaid check records.</li> <li><code>APCONT</code>: Updated with next entry number.</li> <li><code>APSTAT</code>: Error status (<code>Y</code> for errors, <code>N</code> otherwise).</li> <li>Report (<code>APLIST</code>): Printed report listing transaction details, errors, warnings, and totals (invoices, prepaid amounts, vendor hash).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Validate company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted, return error.</li> <li>Initialize accumulators for invoice counts, amounts, discounts, and prepaid totals.</li> <li> <p>Set process type (<code>PTYP</code>) to <code>NORMAL</code> if blank.</p> </li> <li> <p>Validate Header:</p> </li> <li>Ensure <code>CONO</code> exists in <code>APCONT</code>, not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Validate <code>VEND</code> against <code>APVEND</code>, ensuring not deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and name not blank.</li> <li>Verify <code>INV#</code> is non-blank and unique (check <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>Ensure <code>INDT</code> is non-zero and not older than one year (warning only).</li> <li>Ensure <code>IAMT</code> is non-zero and matches sum of detail amounts (<code>AMT</code> + <code>FRAM</code>).</li> <li>Validate <code>HOLD</code> (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and <code>PAID</code> (<code>P</code>, <code>A</code>, <code>E</code>, <code>U</code>).</li> <li>If <code>PAID</code> is set, ensure <code>PPCK</code> is provided.</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code> using terms (<code>VNTERM</code>) from <code>GSTABL</code> (net days, discount days).</li> <li>Validate <code>ATAPGL</code> and <code>ATBKGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>SORN \u2260 0</code>, prohibit <code>RCPT</code> and <code>GALN</code>.</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), allocate amounts to detail lines (call <code>AP1011</code>).</p> </li> <li> <p>Validate Detail Lines:</p> </li> <li>Validate <code>EXGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>GLPOCD = 'Y'</code>, ensure <code>PONO</code> is non-blank.</li> <li>Validate gallons/receipts:<ul> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, ensure <code>GLAPCD = 'Y'</code>.</li> <li>If <code>RCPT \u2260 0</code>, validate against <code>INFIL1</code> or <code>INTZH1</code> for sufficient quantity (<code>GALN \u2264 IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and no prior A/P postings.</li> <li>Ensure <code>CLCD</code> is <code>'O'</code> or <code>'C'</code>.</li> </ul> </li> <li>Validate discounts:<ul> <li>Ensure <code>DISC</code> and <code>DSPC</code> are not both non-zero.</li> <li>If <code>DISC</code> or <code>DSPC</code> is non-zero, require <code>ACDSGL \u2260 0</code>.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li>If <code>DSDT \u2260 0</code> and <code>DSDT \u2264 system date</code>, issue warning.</li> <li>Calculate <code>DISC = AMT * (DSPC / 100)</code> if <code>DSPC \u2260 0</code>.</li> </ul> </li> <li> <p>Calculate net amount: <code>NETAMT = AMT - DISC</code>.</p> </li> <li> <p>Validate Prepaid Checks:</p> </li> <li>For <code>PAID</code> transactions, update <code>APCHKT</code> with check amount (<code>ACCKAM = AMT - DISC</code>).</li> <li>Ensure non-void checks are not already open (<code>AMCODE \u2260 'O'</code>).</li> <li> <p>Ensure void checks are open (<code>AMCODE = 'O'</code>) and match full amount (<code>L1CKAM = AMCKAM</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Write/update <code>APTRAN</code> with header and detail records.</li> <li>Update <code>APCONT</code> with next entry number (<code>ACNXTE</code>).</li> <li>Write/update <code>APCHKT</code> with prepaid check records.</li> <li> <p>Write <code>APSTAT</code> with error status (<code>Y</code> or <code>N</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Produce <code>APLIST</code> report with:<ul> <li>Headers: Company, date, time, workstation, process type.</li> <li>Details: Entry, vendor, invoice number, description, amounts, G/L, status.</li> <li>Errors/Warnings: List entry numbers with issues (e.g., invalid vendor, duplicate invoice).</li> <li>Totals: Invoice count, amounts, discounts, prepaid totals, vendor hash.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor:</li> <li><code>CONO</code> must exist in <code>APCONT</code>, not deleted.</li> <li> <p><code>VEND</code> must exist in <code>APVEND</code>, not deleted or inactive, with non-blank name.</p> </li> <li> <p>Invoice:</p> </li> <li><code>INV#</code> must be non-blank and unique (unless prepaid, canceled, or wire transfer).</li> <li><code>IAMT</code> must be non-zero and match detail totals.</li> <li> <p><code>INDT</code> must be non-zero; warn if older than one year.</p> </li> <li> <p>Payment Types:</p> </li> <li><code>HOLD</code>: <code>'H'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>.</li> <li><code>PAID</code>: <code>'P'</code>, <code>'A'</code>, <code>'E'</code>, <code>'U'</code>, with <code>PPCK</code> required if set.</li> <li> <p><code>SNGL = 'S'</code> for single check processing.</p> </li> <li> <p>Gallons and Receipts:</p> </li> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, require <code>GLAPCD = 'Y'</code>.</li> <li><code>RCPT</code> must exist in <code>INFIL1</code> or <code>INTZH1</code> with sufficient quantity.</li> <li> <p><code>CLCD</code> must be <code>'O'</code> or <code>'C'</code>.</p> </li> <li> <p>Purchase Orders:</p> </li> <li> <p>If <code>GLPOCD = 'Y'</code>, require <code>PONO</code>.</p> </li> <li> <p>Discounts:</p> </li> <li><code>DISC</code> and <code>DSPC</code> cannot both be non-zero.</li> <li>Require <code>ACDSGL</code> if <code>DISC</code> or <code>DSPC</code> is non-zero.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li> <p>Warn if <code>DSDT \u2264 system date</code>.</p> </li> <li> <p>Prepaid Checks:</p> </li> <li>Non-void checks must not be open.</li> <li>Void checks must be open and match full amount.</li> <li> <p>Update <code>ACCKAM = AMT - DISC</code>.</p> </li> <li> <p>Freight:</p> </li> <li>If <code>FRTL \u2260 0</code>, allocate amounts to detail lines via <code>AP1011</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Due Date (<code>DUDT</code>): Calculated from <code>INDT</code> + <code>TBNETD</code> (net days from <code>GSTABL</code>), adjusted for holidays/weekends.</li> <li>Discount Due Date (<code>DSDT</code>): Calculated from <code>INDT</code> + <code>TBDISD</code> (discount days from <code>GSTABL</code>).</li> <li>Discount Amount (<code>DISC</code>): If <code>DSPC \u2260 0</code>, <code>DISC = AMT * (DSPC / 100)</code>.</li> <li>Net Amount (<code>NETAMT</code>): <code>NETAMT = AMT - DISC</code>.</li> <li>Check Amount (<code>ACCKAM</code>): <code>ACCKAM = AMT - DISC</code> for prepaid checks.</li> <li>Receipt Quantity: <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code> (from <code>INFIL1</code> or <code>INTZH1</code>).</li> <li>Totals:</li> <li><code>L1AMT = \u03a3(AMT)</code>, <code>L1PAMT = \u03a3(PRAM)</code>, <code>L1FAMT = \u03a3(FRAM)</code>, <code>L1DISC = \u03a3(DISC)</code>, <code>L1NET = L1AMT - L1DISC</code> (per entry).</li> <li><code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code> accumulate <code>L1</code> totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Program Called: <code>AP1011</code> (for freight amount allocation to detail lines when <code>FRTL \u2260 0</code>).</li> <li>Files:</li> <li>Input: <code>APCONT</code>, <code>APVEND</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>APTRNX</code>, <code>APOPNHC</code>, <code>APINVH</code>.</li> <li>Update: <code>APTRAN</code>, <code>APCHKT</code>, <code>APSTAT</code>.</li> <li>Output: <code>APLIST</code> (report).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/","title":"AP110 RPG","text":"<p>The <code>AP110.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP110.ocl36.txt</code>). It performs validation and editing of Accounts Payable (A/P) voucher transactions, ensuring data integrity for headers and detail lines. The program generates a printed report (<code>APLIST</code>) listing transaction details, errors, and totals for invoice amounts, discounts, and prepaid checks. It includes modifications for ACH payments, employee expenses, utility auto-payments, FlexiCapture invoice uploads, and validations for gallons, receipts, and purchase orders. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#process-steps-of-the-rpg-program-ap110","title":"Process Steps of the RPG Program (AP110)","text":"<p>The <code>AP110</code> program processes A/P voucher transactions from the <code>APTRAN</code> file, validates them against various files (e.g., <code>APVEND</code>, <code>GLMAST</code>, <code>APCONT</code>), and produces a detailed error report via <code>APLIST</code>. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0092\u20130107):</li> <li>Executes at the total level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves system date and time (<code>TIME</code>) and stores them in <code>TIMDAT</code>, <code>SYSTIM</code>, <code>SYSDAT</code>, and <code>SYSYMD</code> (year-month-day format).</li> <li>Converts system date to 8-digit format (<code>SYSDT8</code>) for comparisons.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> <li>Initializes page number (<code>PAGE</code>) and accumulators (<code>L2CNT</code>, <code>L2VHSH</code>, <code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>) to zero.</li> </ul> </li> <li>Validates company number (<code>ATCONO</code>) against <code>APCONT</code>. If not found (<code>92</code>), sets error indicator.</li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes detail accumulators (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to zero.</li> <li>For wire transfer transactions (<code>WIREDS \u2260 *BLANKS</code>), prints a header (<code>PRTHDR</code>) for each entry.</li> </ul> </li> <li> <p>Main Processing Loop (Lines 0109\u20130125):</p> </li> <li>Processes header records (<code>01</code>, <code>L1</code>) and detail records (<code>02</code>, <code>L1</code>) from <code>APTRAN</code>:<ul> <li>For header records (<code>01</code>), executes the <code>HDR</code> subroutine.</li> <li>For detail records (<code>02</code>, non-deleted <code>N51</code>), executes the <code>DET</code> subroutine.</li> </ul> </li> <li>Accumulates totals at <code>L1</code> (if no delete, <code>N51</code>):<ul> <li>Adds detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to <code>L2</code> totals (<code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>).</li> <li>For prepaid (<code>28</code>), ACH (<code>24</code>), wire transfer (<code>25</code>), or employee expense (<code>32</code>) payments, accumulates amounts into <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, or <code>L2PPE</code>.</li> </ul> </li> <li> <p>Updates <code>APSTAT</code> with error status (<code>'Y'</code> if errors exist, <code>'N'</code> otherwise) using <code>STATKY</code> (company and workstation).</p> </li> <li> <p>HDR Subroutine (Lines 0127\u20130144):</p> </li> <li> <p>Validates header records:</p> <ul> <li>If the header is deleted (<code>ATHDEL = 'D'</code>), sets indicator <code>51</code> and skips to <code>ENDHDR</code>.</li> <li>Increments invoice count (<code>L2CNT</code>) and vendor hash total (<code>L2VHSH</code>).</li> <li>Validates retention percentage (<code>ATRTPC \u2260 0</code>, sets <code>26</code>), hold code (<code>ATHOLD = 'H'</code>, sets <code>77</code>), canceled voucher (<code>ATCNVO \u2260 0</code>, sets <code>27</code>), prepaid code (<code>ATPAID = 'P'</code>, sets <code>28</code>; <code>= 'A'</code>, sets <code>24</code>; <code>= 'E'</code>, sets <code>32</code>; <code>= 'U'</code>, sets <code>33</code>), single check (<code>ATSNGL = 'S'</code>, sets <code>29</code>), and sales order (<code>ATSORN \u2260 0</code>, sets <code>19</code>).</li> <li>Checks hold description (<code>ATHLDD</code>) for blanks (sets <code>77</code> if blank).</li> <li>Calls <code>HEADCK</code> subroutine for additional header validations.</li> </ul> </li> <li> <p>HEADCK Subroutine (Lines MG02):</p> </li> <li> <p>Validates company, vendor, and invoice details:</p> <ul> <li>Chains <code>ATCONO</code> to <code>APCONT</code>. If not found (<code>99</code>), sets error <code>95</code>.</li> <li>Chains vendor key (<code>ATCONO</code>, <code>ATVEND</code>) to <code>APVEND</code>. If not found (<code>99</code>), deleted (<code>VNDEL = 'D'</code>), inactive (<code>VNDEL = 'I'</code>), or vendor name blank (<code>VNVNAM = *BLANKS</code>), sets error <code>95</code>.</li> <li>Retrieves terms code (<code>VNTERM</code>) from <code>GSTABL</code>. If not found (<code>99</code>), clears term description (<code>TRMDSC</code>).</li> <li>Ensures invoice date (<code>ATINDT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Compares invoice date (<code>ATIND8</code>) to system date minus one year (<code>SYSDT8 - 10000</code>). If older, sets warning <code>96</code> (MG09).</li> <li>Ensures invoice amount (<code>ATIAMT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Ensures invoice number (<code>ATINV#</code>) is not blank. If blank, sets error <code>95</code>.</li> <li>For non-prepaid (<code>N28</code>), non-canceled (<code>N27</code>), non-wire-transfer (<code>N25</code>) transactions with non-zero vendor (<code>ATVEND \u2260 0</code>):</li> <li>Checks for duplicate invoices in <code>APTRNX</code> (<code>INVKEY = XXKEY</code>, <code>XXENT \u2260 ATENT#</code>, sets <code>95</code> if found).</li> <li>Checks <code>APINVH</code> for duplicate invoice keys (<code>INVKEY = AIKEY</code>, sets <code>95</code> if found, MGXX).</li> <li>Checks <code>APOPNHC</code> for duplicate invoice (<code>OCCONO = ATCONO</code>, <code>OCVEND = ATVEND</code>, <code>OCINVN = ATINV#</code>, sets <code>95</code> if found).</li> <li>Validates A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>DET Subroutine (Lines 0146\u20130169):</p> </li> <li> <p>Validates detail records:</p> <ul> <li>If the detail is deleted (<code>ATDDEL = 'D'</code>), sets <code>52</code> and skips to <code>ENDDTL</code>.</li> <li>Checks if gallons (<code>ATGALN \u2260 0</code>, sets <code>60</code>) or job number (<code>ATJOB# \u2260 *BLANKS</code>, sets <code>30</code>) are present.</li> <li>Validates discount:</li> <li>If discount percentage (<code>ATDSPC \u2260 0</code>), ensures discount amount (<code>ATDISC</code>) is zero (sets <code>10</code> if both non-zero).</li> <li>If <code>ATDSPC \u2260 0</code>, calculates <code>ATDISC = ATAMT * (ATDSPC / 100)</code>.</li> <li>Calculates net amount (<code>NETAMT = ATAMT - ATDISC</code>).</li> <li>Accumulates detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>).</li> <li>For prepaid transactions (<code>28</code>), calls <code>PPDCHK</code> subroutine.</li> <li>Calls <code>DETLCK</code> subroutine for additional detail validations.</li> </ul> </li> <li> <p>PPDCHK Subroutine (Lines 0171\u20130183):</p> </li> <li> <p>Validates prepaid checks:</p> <ul> <li>Chains check key (<code>CKKY21</code>) to <code>APCHKT</code>. If not found (<code>N90</code>), adds <code>ATAMT</code> to <code>ACCKAM</code>. If found (<code>90</code>), sets <code>ACCKAM = ATAMT</code>.</li> <li>Subtracts discount (<code>ATDISC</code>) from <code>ACCKAM</code>.</li> <li>Writes or updates <code>APCHKT</code> with the prepaid check record (<code>PPDREC</code>).</li> <li>Writes the prepaid check detail to <code>APLIST</code>.</li> </ul> </li> <li> <p>DETLCK Subroutine (Lines MG02\u2013MGXX):</p> </li> <li> <p>Validates detail line fields:</p> <ul> <li>Validates gallons/receipt requirements based on vendor (<code>VNGRRQ</code>) and G/L (<code>GLAPCD</code>):</li> <li>If <code>VNGRRQ = 'Y'</code>, requires <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is zero).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is non-zero).</li> <li>If <code>GLAPCD = 'Y'</code> and <code>ATAMT &gt; 0</code>, requires <code>ATGALN</code> (sets <code>95</code> if zero).</li> <li>If <code>ATGALN &gt; 0</code>, requires <code>GLAPCD = 'Y'</code> (sets <code>95</code> if not).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>, MG08), ensures <code>ATPONO</code> is not blank (sets <code>95</code> if blank).</li> <li>Validates receipt number (<code>ATRCPT \u2260 0</code>):</li> <li>Chains <code>RCTKEY</code> to <code>INFIL1</code> or <code>INTZH1</code>. If not found (<code>47</code> and <code>77</code>), sets error <code>95</code>.</li> <li>Accumulates net quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and A/P quantity (<code>APQTY = IHAPTQ + IHAPTF</code>).</li> <li>If <code>ATGALN &gt; RNQTY</code>, sets error <code>95</code> and <code>46</code>.</li> <li>Ensures receipt code (<code>ATCLCD</code>) is <code>'O'</code> or <code>'C'</code> (sets <code>95</code> if not).</li> <li>Validates discount:</li> <li>If <code>ATDISC \u2260 0</code> or <code>ATDSPC \u2260 0</code>, requires a discount G/L (<code>ACDSGL \u2260 0</code>, sets <code>95</code> if not).</li> <li>If <code>ATDSD8 \u2260 0</code> and <code>ATDSD8 \u2264 SYSDT8</code>, sets warning <code>96</code> (MGXX).</li> <li>If terms have no discount (<code>TBDISC = 0</code>), prohibits <code>ATDSPC</code> or <code>ATDISC</code> (sets <code>95</code> if non-zero).</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), ensures <code>ATDSPC = TBDISC</code> (sets <code>95</code> if not) or requires <code>ATDISC</code> and <code>ATDSPC</code> to be non-zero (sets <code>95</code> if both zero).</li> <li>Validates expense G/L (<code>ATEXGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>Output to APLIST (Lines 0195\u20130340):</p> </li> <li> <p>Generates a formatted report:</p> <ul> <li>Header (L2): Prints company name (<code>ACNAME</code>), page number, date (<code>SYSDAT</code>), time (<code>SYSTIM</code>), and static text (\"ACCOUNTS PAYABLE VOUCHER EDIT\").</li> <li>Detail (01, N51): Prints header details (<code>ATENT#</code>, <code>ATVEND</code>, <code>ATVNAM</code>, <code>ATINV#</code>, <code>ATINDT</code>, <code>TRMDSC</code>, <code>ATAPGL</code>, <code>ATDUDT</code>, <code>ATDSDT</code>, <code>ATBKGL</code>, <code>ATSNGL</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATCNVO</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>).</li> <li>Detail (02, N51, N52): Prints detail line details (<code>ATPONO</code>, <code>ATDDES</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>NETAMT</code>, <code>ATEXGL</code>, <code>ATEXCO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>).</li> <li>Errors/Warnings: Prints error (<code>95</code>) or warning (<code>96</code>) messages with entry number (<code>ATENT#</code>).</li> <li>Totals (L1, N51): Prints entry totals (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1NET</code>) and prepaid details (<code>ATPPCK</code>, <code>ATPCKD</code>).</li> <li>Totals (L2): Prints invoice totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>, <code>L2NET</code>), prepaid totals (<code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>), invoice count (<code>L2CNT</code>), and vendor hash total (<code>L2VHSH</code>).</li> </ul> </li> <li> <p>File Updates:</p> </li> <li>Writes or updates <code>APCHKT</code> with prepaid check records (<code>PPDREC</code>).</li> <li> <p>Writes or updates <code>APSTAT</code> with error status (<code>STATAD</code>, <code>STATUP</code>).</p> </li> <li> <p>Termination:</p> <ul> <li>Processes all records in <code>APTRAN</code>, generates the report, and terminates when no more records are found.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Header Validation:</li> <li>Company number (<code>ATCONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Vendor number (<code>ATVEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and have a non-blank name (<code>VNVNAM \u2260 *BLANKS</code>).</li> <li>Invoice date (<code>ATINDT</code>) must be non-zero and not older than one year prior to the system date (warning only, MG09).</li> <li>Invoice amount (<code>ATIAMT</code>) must be non-zero.</li> <li>Invoice number (<code>ATINV#</code>) must be non-blank and unique (checked against <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>Hold codes (<code>ATHOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Prepaid codes (<code>ATPAID</code>) must be <code>'P'</code> (prepaid), <code>'A'</code> (ACH), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Single check (<code>ATSNGL = 'S'</code>) and retention percentage (<code>ATRTPC \u2260 0</code>) are flagged if present.</li> <li> <p>Canceled voucher (<code>ATCNVO \u2260 0</code>) is flagged if present.</p> </li> <li> <p>Detail Validation:</p> </li> <li>Expense G/L (<code>ATEXGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>), <code>ATPONO</code> must be non-blank.</li> <li>Gallons and receipt validation:<ul> <li>If vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be non-zero.</li> <li>If vendor does not require gallons/receipts (<code>VNGRRQ = 'N'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be zero.</li> <li>If G/L requires gallons (<code>GLAPCD = 'Y'</code>), <code>ATGALN</code> must be non-zero for positive amounts (<code>ATAMT &gt; 0</code>).</li> <li>If <code>ATGALN &gt; 0</code>, G/L must require gallons (<code>GLAPCD = 'Y'</code>).</li> <li>Receipt number (<code>ATRCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with sufficient quantity (<code>ATGALN \u2264 RNQTY</code>) and no prior A/P postings (removed in MG04).</li> <li>Receipt code (<code>ATCLCD</code>) must be <code>'O'</code> (open) or <code>'C'</code> (closed).</li> </ul> </li> <li> <p>Discount validation:</p> <ul> <li>Discount amount (<code>ATDISC</code>) and percentage (<code>ATDSPC</code>) cannot both be non-zero.</li> <li>If <code>ATDISC</code> or <code>ATDSPC</code> is non-zero, a discount G/L (<code>ACDSGL</code>) must exist.</li> <li>If terms have no discount (<code>TBDISC = 0</code>), <code>ATDISC</code> and <code>ATDSPC</code> must be zero.</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), <code>ATDSPC</code> must match <code>TBDISC</code>, or both <code>ATDISC</code> and <code>ATDSPC</code> must be non-zero.</li> <li>If discount due date (<code>ATDSD8</code>) is non-zero and not later than the system date (<code>SYSDT8</code>), a warning (<code>96</code>) is issued.</li> </ul> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>Prepaid check amounts (<code>ACCKAM</code>) are updated in <code>APCHKT</code> by adding or setting <code>ATAMT - ATDISC</code>.</li> <li> <p>Prepaid check details are written to the report.</p> </li> <li> <p>Error and Warning Handling:</p> </li> <li>Errors (<code>95</code>) are flagged for critical validation failures (e.g., invalid company, vendor, G/L, duplicate invoice).</li> <li>Warnings (<code>96</code>) are flagged for non-critical issues (e.g., invoice date older than one year, discount date expired).</li> <li> <p>Errors are written to <code>APSTAT</code> (<code>AXERR = 'Y'</code>) and reported in <code>APLIST</code>.</p> </li> <li> <p>Reporting:</p> </li> <li>The report includes headers, detail lines, entry totals, and grand totals for invoices, prepaid amounts, and vendor hash.</li> <li>Errors and warnings are listed with entry numbers for correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APTRAN:</li> <li>Primary input file (<code>IP</code>), 404 bytes, key length 10, contains voucher header and detail records.</li> <li> <p>Fields: <code>ATHDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATVEND</code>, <code>ATCNVO</code>, <code>ATAPGL</code>, <code>ATIDES</code>, <code>ATINDT</code>, <code>ATDUDT</code>, <code>ATSNGL</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATPAID</code>, <code>ATPPCK</code>, <code>ATVNAM</code>, <code>ATVAD1\u20134</code>, <code>ATBKGL</code>, <code>ATIAMT</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATPCKD</code>, <code>ATIND8</code>, <code>ATDUD8</code>, <code>ATPCK8</code>, <code>ATFRTL</code>, <code>ATPIVN</code>, <code>ATPIIN</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>, <code>ATDSDT</code>, <code>ATDSD8</code>, <code>ATINV#</code>, <code>ATDDEL</code>, <code>ATENSQ</code>, <code>ATCORD</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATUNMS</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATPONO</code>.</p> </li> <li> <p>APTRNX:</p> </li> <li>Input file (<code>IF</code>), 404 bytes, key length 27, external key, used for duplicate invoice checking.</li> <li> <p>Fields: <code>XXCO</code>, <code>XXENT</code>, <code>XXVEND</code>, <code>XXINV</code>.</p> </li> <li> <p>APOPNHC:</p> </li> <li>Input file (<code>IF</code>), 384 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>OCDEL</code>, <code>OCCONO</code>, <code>OCVEND</code>, <code>OCVONO</code>, <code>OCINDS</code>, <code>OCINVN</code>.</p> </li> <li> <p>APVEND:</p> </li> <li>Input file (<code>IF</code>), 579 bytes, key length 7, used for vendor validation.</li> <li> <p>Fields: <code>VNDEL</code>, <code>VNVNAM</code>, <code>VNAD1\u20134</code>, <code>VNGRRQ</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNEXGL</code>, <code>VNTERM</code>, <code>VNCAID</code>, <code>VNPRID</code>, <code>VNACLS</code>, <code>VNACOS</code>, <code>VNARTE</code>, <code>VNABK#</code>.</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 2, used for company validation.</li> <li> <p>Fields: <code>ACDEL</code>, <code>ACNAME</code>, <code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACDSGL</code>, <code>ACNXTE</code>, <code>ACJCYN</code>, <code>ACRTGL</code>, <code>ACPOYN</code>, <code>ACEEGL</code>.</p> </li> <li> <p>APCHKT:</p> </li> <li>Update file (<code>UF</code>), 80 bytes, key length 21, used for prepaid check validation.</li> <li> <p>Fields: <code>ACCKAM</code>, <code>ATPCKD</code>, <code>ATPCK8</code>, <code>ATHOLD</code>.</p> </li> <li> <p>GLMAST:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 11, used for G/L validation.</li> <li> <p>Fields: <code>GLDEL</code>, <code>GLDESC</code>, <code>GLAPCD</code>, <code>GLPOCD</code>.</p> </li> <li> <p>APINVH:</p> </li> <li>Input file (<code>IF</code>), 64 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>AIKEY</code>, <code>AIVONO</code>.</p> </li> <li> <p>APSTAT:</p> </li> <li>Update file (<code>UF</code>), 14 bytes, key length 12, used to store error status.</li> <li> <p>Fields: <code>AXCODE</code>, <code>AXCONO</code>, <code>AXWSTN</code>, <code>AXERR</code>.</p> </li> <li> <p>GSTABL:</p> <ul> <li>Input file (<code>IF</code>), 256 bytes, key length 12, used for terms validation.</li> <li>Fields: <code>TBDEL</code>, <code>TBDESC</code>, <code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>, <code>TBADON</code>, <code>TBDISD</code>.</li> </ul> </li> <li> <p>INFIL1:</p> <ul> <li>Input file (<code>IF</code>), 448 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>INTZH1:</p> <ul> <li>Input file (<code>IF</code>), 592 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>APLIST:</p> <ul> <li>Output printer file (<code>O</code>), 164 bytes, used to generate the voucher edit report.</li> <li>Contains headers, detail lines, error/warning messages, and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP110</code> program does not call any external programs. It operates independently, processing input files, performing validations, and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#summary","title":"Summary","text":"<p>The <code>AP110</code> RPG program validates A/P voucher transactions by processing header and detail records from <code>APTRAN</code>. It enforces strict business rules, including company, vendor, G/L, invoice, gallons/receipt, purchase order, and discount validations. Errors (<code>95</code>) and warnings (<code>96</code>) are flagged and reported in <code>APLIST</code>, with error status updated in <code>APSTAT</code>. The program supports ACH, wire transfer, employee expense, and utility auto-payment transactions, and includes enhancements for FlexiCapture invoice uploads. It accumulates totals for invoices, prepaid amounts, and vendor hash, producing a comprehensive report for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/","title":"AP115 RPG","text":"<p>The <code>AP115.rpg36.txt</code> is an RPG III program designed for the IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP115.ocl36.txt</code>). It performs validation and editing of prepaid checks, ensuring that checks are valid, not already open (unless being voided), and that voided checks match the full check amount. The program generates a printed report (<code>APLIST</code>) listing any errors or discrepancies found during the validation process. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#process-steps-of-the-rpg-program-ap115","title":"Process Steps of the RPG Program (AP115)","text":"<p>The <code>AP115</code> program processes prepaid check transactions by reading records from the <code>APCHKT</code> and <code>APCHKTX</code> files, validating them against <code>APCHKR</code>, and reporting errors via the <code>APLIST</code> printer file. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0042\u20130054):</li> <li>Executes at the detail level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves the current system date and time (<code>TIME</code> instruction) and stores them in <code>TIMDAT</code>, <code>TIME</code>, and <code>DATE</code>.</li> <li>Sets a separator (<code>SEP</code>) to <code>'* '</code> for formatting the printed report.</li> <li>Initializes the page number (<code>PAGE</code>) to 0.</li> </ul> </li> <li>Validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file:<ul> <li>If found (<code>N98</code>), moves the company name (<code>ACNAME</code>) to <code>CONAME</code>.</li> <li>If not found (<code>98</code>), sets <code>CONAME</code> to blanks.</li> </ul> </li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes check amount accumulator (<code>L1CKAM</code>) and void amount (<code>L1VOID</code>) to 0.</li> <li>Clears indicators <code>10</code>, <code>11</code>, <code>12</code> (used for check status), and <code>81</code>, <code>91</code> (used for printing and error handling).</li> </ul> </li> <li> <p>Main Processing (Lines 0055\u20130058):</p> </li> <li>Accumulates the check amount (<code>ATCKAM</code>) into <code>L1CKAM</code> at the detail level (<code>L1</code>), setting indicators <code>10</code> (non-void check) or <code>11</code> (void check) based on the transaction type.</li> <li> <p>Calls the <code>L1TOT</code> subroutine to validate each check record.</p> </li> <li> <p>L1TOT Subroutine (Lines 0061\u20130081):</p> </li> <li>Validates the check record by chaining the check key (<code>ATCKEY</code>) to the <code>APCHKR</code> file:<ul> <li>For non-void checks (<code>10</code> indicator on):</li> <li>If the check exists in <code>APCHKR</code> and is open (<code>AMCODE = 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK IS ALREADY OPEN\").</li> <li>If the check does not exist (<code>91</code> on), proceeds without error.</li> <li>For void checks (<code>11</code> indicator on):</li> <li>If the check does not exist in <code>APCHKR</code> or is not open (<code>AMCODE \u2260 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK MUST BE OPEN TO BE VOIDED\").</li> <li>Calculates the void amount (<code>L1VOID = -L1CKAM</code>) and compares it to the actual check amount (<code>AMCKAM</code>). If they do not match, sets indicator <code>12</code> and calls <code>L1PRT</code> to report an error (\"WHOLE CHECK AMOUNT MUST BE VOIDED\").</li> </ul> </li> <li> <p>Ends the subroutine (<code>ENDL1T</code>).</p> </li> <li> <p>L1PRT Subroutine (Lines 0083\u20130099):</p> </li> <li> <p>Prints error records to the <code>APLIST</code> printer file:</p> <ul> <li>Sets the lower limit (<code>SETLL</code>) for <code>APCHKTX</code> using the check key (<code>ATKY21</code>).</li> <li>Reads <code>APCHKTX</code> records in a loop (<code>AGNL1P</code> tag) until end-of-file (<code>09</code> indicator) or a key mismatch (<code>AXCKEY \u2260 ATCKEY</code>).</li> <li>For each matching record:</li> <li>Sets indicators <code>80</code> (print detail) and <code>81</code> (control printing).</li> <li>Writes the record to <code>APLIST</code> using the <code>EXCPT</code> operation.</li> <li>Resets indicator <code>80</code> after printing.</li> <li>Continues reading until all matching records are processed (<code>ENDL1P</code>).</li> </ul> </li> <li> <p>Output to APLIST (Lines 0102\u20130148):</p> </li> <li> <p>Generates a formatted report with headers and detail lines:</p> <ul> <li>Header (L2):</li> <li>Prints company name (<code>CONAME</code>), page number (<code>PAGE</code>), date (<code>DATE</code>), workstation ID (<code>WSID</code>), wire transfer description (<code>WIREDS</code>), and time (<code>TIME</code>).</li> <li>Includes static text like \"PREPAID CHECK EDIT\" and column headers (\"CO #\", \"PPD CHECK\", \"BANK G/L\", \"ENT#\", \"CHK AMOUNT\", \"ACTUAL CHECK AMOUNT\").</li> <li>Detail Lines (80):</li> <li>Prints company number (<code>AXCONO</code>), prepaid check number (<code>AXPPCK</code>), bank G/L account (<code>AXBKGL</code>), entry number (<code>AXENT#</code>), check amount (<code>AXCKAM</code>), and check date (<code>AXCKDT</code>).</li> <li>Total Lines (81):</li> <li>Prints total check amount (<code>L1CKAM</code>) and actual check amount (<code>AMCKAM</code>).</li> <li>Includes error messages based on indicators:<ul> <li><code>10N91</code>: \"CHECK IS ALREADY OPEN\".</li> <li><code>11 91</code>: \"CHECK MUST BE OPEN TO BE VOIDED\".</li> <li><code>12 11N91</code>: \"WHOLE CHECK AMOUNT MUST BE VOIDED\".</li> </ul> </li> <li>Uses separator (<code>SEP</code>) for formatting between sections.</li> </ul> </li> <li> <p>Termination:</p> </li> <li>The program processes all records in <code>APCHKT</code> and <code>APCHKTX</code>, generating the report and terminating when no more records are found.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Check Validation:</li> <li>Non-void checks (<code>AMCODE \u2260 'V'</code>) must not already exist in <code>APCHKR</code> as open (<code>AMCODE = 'O'</code>). If they are open, an error is reported.</li> <li>Void checks (<code>AMCODE = 'V'</code>) must exist in <code>APCHKR</code> and be open (<code>AMCODE = 'O'</code>). If not, an error is reported.</li> <li> <p>For void checks, the entire check amount (<code>L1CKAM</code>) must match the actual check amount (<code>AMCKAM</code>) in <code>APCHKR</code>. If not, an error is reported.</p> </li> <li> <p>Error Reporting:</p> </li> <li>Errors are printed to the <code>APLIST</code> report for each invalid check, including company number, check number, bank G/L, entry number, check amount, and error message.</li> <li> <p>The report includes totals for check amounts and highlights discrepancies.</p> </li> <li> <p>Company Validation:</p> </li> <li> <p>The company number (<code>ATCONO</code>) must exist in <code>APCONT</code>. If not, the company name is blanked out.</p> </li> <li> <p>Formatting and Output:</p> </li> <li>The report includes headers with company, date, time, and workstation details, followed by detail lines for each check and totals for check amounts.</li> <li>Errors are clearly marked with descriptive messages to guide correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APCHKT:</li> <li>Primary input file (<code>IP</code>), 80 bytes, key length 21, used to read prepaid check transactions.</li> <li> <p>Fields: <code>ATCONO</code> (company), <code>ATBKGL</code> (bank G/L), <code>ATPPCK</code> (prepaid check number), <code>ATCKAM</code> (check amount), <code>ATCKDT</code> (check date).</p> </li> <li> <p>APCHKTX:</p> </li> <li>Indexed input file (<code>ID</code>), 80 bytes, key length 21, used to retrieve additional check details.</li> <li> <p>Fields: <code>AXCONO</code> (company), <code>AXBKGL</code> (bank G/L), <code>AXPPCK</code> (prepaid check number), <code>AXENT#</code> (entry number), <code>AXCKAM</code> (check amount), <code>AXCKDT</code> (check date).</p> </li> <li> <p>APCHKR:</p> </li> <li>Input file (<code>IC</code>), 128 bytes, key length 16, used to validate check status.</li> <li> <p>Fields: <code>AMCODE</code> (check status: 'D', 'O', 'R', 'V'), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IC</code>), 256 bytes, key length 2, used to validate company number and retrieve company name.</li> <li> <p>Fields: <code>ACNAME</code> (company name).</p> </li> <li> <p>APLIST:</p> </li> <li>Output printer file (<code>O</code>), 132 bytes, used to generate the prepaid check edit report.</li> <li>Contains headers, detail lines, totals, and error messages.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP115</code> program does not call any external programs. It operates independently, processing input files and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#summary","title":"Summary","text":"<p>The <code>AP115</code> RPG program validates prepaid checks by checking their status in <code>APCHKR</code> and ensuring compliance with business rules (e.g., non-void checks must not be open, void checks must be open and fully voided). It processes records from <code>APCHKT</code> and <code>APCHKTX</code>, validates against <code>APCONT</code> and <code>APCHKR</code>, and produces a detailed error report via <code>APLIST</code>. The program enforces data integrity for check processing, ensuring that only valid checks are processed and errors are clearly reported for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/","title":"Summary AP100","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#list-of-use-cases-implemented-by-the-ap100-ap110-and-ap115-programs","title":"List of Use Cases Implemented by the AP100, AP110, and AP115 Programs","text":"<p>The RPG programs <code>AP100</code>, <code>AP110</code>, and <code>AP115</code> form a call stack for processing Accounts Payable (A/P) voucher transactions on IBM midrange systems (e.g., AS/400 or iSeries). Together, they implement a single cohesive use case:</p> <ol> <li>Use Case: Process and Validate A/P Voucher Transactions</li> <li>Description: This use case involves the entry, validation, editing, and reporting of A/P voucher transactions, including header and detail records, for various payment types (e.g., prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). The process ensures data integrity, validates against vendor, company, G/L, and inventory data, and generates reports for errors and totals.</li> <li>Components:<ul> <li>AP100: Handles interactive entry and validation of voucher transactions via screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>), updating transaction files (<code>APTRAN</code>, <code>APCONT</code>) and calling <code>AP1011</code> for freight calculations.</li> <li>AP110: Validates voucher transactions from <code>APTRAN</code>, checks for errors (e.g., duplicate invoices, invalid G/Ls), updates prepaid check records (<code>APCHKT</code>), and produces an edit report (<code>APLIST</code>).</li> <li>AP115: Validates prepaid checks, ensuring non-void checks are not already open and void checks match the full amount, generating an error report (<code>APLIST</code>).</li> </ul> </li> </ol> <p>This single use case encompasses the entire workflow of entering, validating, and reporting A/P voucher transactions, with each program handling a specific aspect of the process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#function-requirement-document-process-and-validate-ap-voucher-transactions","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#function-requirement-document-process-and-validate-ap-voucher-transactions_1","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#overview","title":"Overview","text":"<p>This function processes and validates Accounts Payable (A/P) voucher transactions, including header and detail records, for various payment types (prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). It ensures data integrity by validating inputs against company, vendor, G/L, and inventory data, calculates due dates and discounts, updates transaction and check files, and generates reports for errors and totals.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): 2-digit identifier for the company.</li> <li>Vendor Number (<code>VEND</code>): 5-digit identifier for the vendor.</li> <li>Entry Number (<code>ENT#</code>): 5-digit transaction identifier (auto-generated or user-provided).</li> <li>Invoice Number (<code>INV#</code>): 20-character vendor invoice number.</li> <li>Invoice Amount (<code>IAMT</code>): 11.2-digit total invoice amount.</li> <li>Invoice Date (<code>INDT</code>): 6-digit vendor invoice date (MMDDYY).</li> <li>Due Date (<code>DUDT</code>): 6-digit due date (MMDDYY, calculated or user-provided).</li> <li>Discount Due Date (<code>DSDT</code>): 6-digit discount due date (MMDDYY, calculated or user-provided).</li> <li>Hold Code (<code>HOLD</code>): 1-character code (<code>H</code>=hold, <code>A</code>=ACH, <code>W</code>=wire transfer, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepay Code (<code>PAID</code>): 1-character code (<code>P</code>=prepaid, <code>A</code>=ACH, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepaid Check Number (<code>PPCK</code>): 6-digit check number for prepaid transactions.</li> <li>Single Check Flag (<code>SNGL</code>): 1-character flag (<code>S</code>=single check).</li> <li>Canceled Voucher (<code>CNVO</code>): 5-digit canceled voucher number.</li> <li>Purchase Order Number (<code>PONO</code>): 30-character purchase order number.</li> <li>Sales Order Number (<code>SORN</code>): 6-digit sales order number.</li> <li>Carrier ID (<code>CAID</code>): 6-character carrier identifier.</li> <li>Process Type (<code>PTYP</code>): 6-character process type (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</li> <li>Freight Total (<code>FRTL</code>): 7.2-digit total freight amount to allocate.</li> <li>Detail Lines:</li> <li>Sequence Number (<code>ENSQ</code>): 3-digit line sequence.</li> <li>Expense G/L (<code>EXGL</code>): 8-digit expense general ledger account.</li> <li>Amount (<code>AMT</code>): 8.2-digit line amount.</li> <li>Discount Amount (<code>DISC</code>): 8.2-digit discount amount.</li> <li>Discount Percentage (<code>DSPC</code>): 3.2-digit discount percentage.</li> <li>Gallons (<code>GALN</code>): 4.2-digit gallons quantity.</li> <li>Receipt Number (<code>RCPT</code>): 7-digit receipt number.</li> <li>Receipt Code (<code>CLCD</code>): 1-character code (<code>O</code>=open, <code>C</code>=closed).</li> <li>Freight Amount (<code>FRAM</code>): 4.2-digit freight amount per line.</li> <li>Product Amount (<code>PRAM</code>): 6.2-digit product amount per line.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>APTRAN</code>: Transaction header and detail records.</li> <li><code>APCHKT</code>: Prepaid check records.</li> <li><code>APCONT</code>: Updated with next entry number.</li> <li><code>APSTAT</code>: Error status (<code>Y</code> for errors, <code>N</code> otherwise).</li> <li>Report (<code>APLIST</code>): Printed report listing transaction details, errors, warnings, and totals (invoices, prepaid amounts, vendor hash).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Validate company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted, return error.</li> <li>Initialize accumulators for invoice counts, amounts, discounts, and prepaid totals.</li> <li> <p>Set process type (<code>PTYP</code>) to <code>NORMAL</code> if blank.</p> </li> <li> <p>Validate Header:</p> </li> <li>Ensure <code>CONO</code> exists in <code>APCONT</code>, not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Validate <code>VEND</code> against <code>APVEND</code>, ensuring not deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and name not blank.</li> <li>Verify <code>INV#</code> is non-blank and unique (check <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>Ensure <code>INDT</code> is non-zero and not older than one year (warning only).</li> <li>Ensure <code>IAMT</code> is non-zero and matches sum of detail amounts (<code>AMT</code> + <code>FRAM</code>).</li> <li>Validate <code>HOLD</code> (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and <code>PAID</code> (<code>P</code>, <code>A</code>, <code>E</code>, <code>U</code>).</li> <li>If <code>PAID</code> is set, ensure <code>PPCK</code> is provided.</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code> using terms (<code>VNTERM</code>) from <code>GSTABL</code> (net days, discount days).</li> <li>Validate <code>ATAPGL</code> and <code>ATBKGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>SORN \u2260 0</code>, prohibit <code>RCPT</code> and <code>GALN</code>.</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), allocate amounts to detail lines (call <code>AP1011</code>).</p> </li> <li> <p>Validate Detail Lines:</p> </li> <li>Validate <code>EXGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>GLPOCD = 'Y'</code>, ensure <code>PONO</code> is non-blank.</li> <li>Validate gallons/receipts:<ul> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, ensure <code>GLAPCD = 'Y'</code>.</li> <li>If <code>RCPT \u2260 0</code>, validate against <code>INFIL1</code> or <code>INTZH1</code> for sufficient quantity (<code>GALN \u2264 IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and no prior A/P postings.</li> <li>Ensure <code>CLCD</code> is <code>'O'</code> or <code>'C'</code>.</li> </ul> </li> <li>Validate discounts:<ul> <li>Ensure <code>DISC</code> and <code>DSPC</code> are not both non-zero.</li> <li>If <code>DISC</code> or <code>DSPC</code> is non-zero, require <code>ACDSGL \u2260 0</code>.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li>If <code>DSDT \u2260 0</code> and <code>DSDT \u2264 system date</code>, issue warning.</li> <li>Calculate <code>DISC = AMT * (DSPC / 100)</code> if <code>DSPC \u2260 0</code>.</li> </ul> </li> <li> <p>Calculate net amount: <code>NETAMT = AMT - DISC</code>.</p> </li> <li> <p>Validate Prepaid Checks:</p> </li> <li>For <code>PAID</code> transactions, update <code>APCHKT</code> with check amount (<code>ACCKAM = AMT - DISC</code>).</li> <li>Ensure non-void checks are not already open (<code>AMCODE \u2260 'O'</code>).</li> <li> <p>Ensure void checks are open (<code>AMCODE = 'O'</code>) and match full amount (<code>L1CKAM = AMCKAM</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Write/update <code>APTRAN</code> with header and detail records.</li> <li>Update <code>APCONT</code> with next entry number (<code>ACNXTE</code>).</li> <li>Write/update <code>APCHKT</code> with prepaid check records.</li> <li> <p>Write <code>APSTAT</code> with error status (<code>Y</code> or <code>N</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Produce <code>APLIST</code> report with:<ul> <li>Headers: Company, date, time, workstation, process type.</li> <li>Details: Entry, vendor, invoice number, description, amounts, G/L, status.</li> <li>Errors/Warnings: List entry numbers with issues (e.g., invalid vendor, duplicate invoice).</li> <li>Totals: Invoice count, amounts, discounts, prepaid totals, vendor hash.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor:</li> <li><code>CONO</code> must exist in <code>APCONT</code>, not deleted.</li> <li> <p><code>VEND</code> must exist in <code>APVEND</code>, not deleted or inactive, with non-blank name.</p> </li> <li> <p>Invoice:</p> </li> <li><code>INV#</code> must be non-blank and unique (unless prepaid, canceled, or wire transfer).</li> <li><code>IAMT</code> must be non-zero and match detail totals.</li> <li> <p><code>INDT</code> must be non-zero; warn if older than one year.</p> </li> <li> <p>Payment Types:</p> </li> <li><code>HOLD</code>: <code>'H'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>.</li> <li><code>PAID</code>: <code>'P'</code>, <code>'A'</code>, <code>'E'</code>, <code>'U'</code>, with <code>PPCK</code> required if set.</li> <li> <p><code>SNGL = 'S'</code> for single check processing.</p> </li> <li> <p>Gallons and Receipts:</p> </li> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, require <code>GLAPCD = 'Y'</code>.</li> <li><code>RCPT</code> must exist in <code>INFIL1</code> or <code>INTZH1</code> with sufficient quantity.</li> <li> <p><code>CLCD</code> must be <code>'O'</code> or <code>'C'</code>.</p> </li> <li> <p>Purchase Orders:</p> </li> <li> <p>If <code>GLPOCD = 'Y'</code>, require <code>PONO</code>.</p> </li> <li> <p>Discounts:</p> </li> <li><code>DISC</code> and <code>DSPC</code> cannot both be non-zero.</li> <li>Require <code>ACDSGL</code> if <code>DISC</code> or <code>DSPC</code> is non-zero.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li> <p>Warn if <code>DSDT \u2264 system date</code>.</p> </li> <li> <p>Prepaid Checks:</p> </li> <li>Non-void checks must not be open.</li> <li>Void checks must be open and match full amount.</li> <li> <p>Update <code>ACCKAM = AMT - DISC</code>.</p> </li> <li> <p>Freight:</p> </li> <li>If <code>FRTL \u2260 0</code>, allocate amounts to detail lines via <code>AP1011</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#calculations","title":"Calculations","text":"<ul> <li>Due Date (<code>DUDT</code>): Calculated from <code>INDT</code> + <code>TBNETD</code> (net days from <code>GSTABL</code>), adjusted for holidays/weekends.</li> <li>Discount Due Date (<code>DSDT</code>): Calculated from <code>INDT</code> + <code>TBDISD</code> (discount days from <code>GSTABL</code>).</li> <li>Discount Amount (<code>DISC</code>): If <code>DSPC \u2260 0</code>, <code>DISC = AMT * (DSPC / 100)</code>.</li> <li>Net Amount (<code>NETAMT</code>): <code>NETAMT = AMT - DISC</code>.</li> <li>Check Amount (<code>ACCKAM</code>): <code>ACCKAM = AMT - DISC</code> for prepaid checks.</li> <li>Receipt Quantity: <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code> (from <code>INFIL1</code> or <code>INTZH1</code>).</li> <li>Totals:</li> <li><code>L1AMT = \u03a3(AMT)</code>, <code>L1PAMT = \u03a3(PRAM)</code>, <code>L1FAMT = \u03a3(FRAM)</code>, <code>L1DISC = \u03a3(DISC)</code>, <code>L1NET = L1AMT - L1DISC</code> (per entry).</li> <li><code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code> accumulate <code>L1</code> totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Program Called: <code>AP1011</code> (for freight amount allocation to detail lines when <code>FRTL \u2260 0</code>).</li> <li>Files:</li> <li>Input: <code>APCONT</code>, <code>APVEND</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>APTRNX</code>, <code>APOPNHC</code>, <code>APINVH</code>.</li> <li>Update: <code>APTRAN</code>, <code>APCHKT</code>, <code>APSTAT</code>.</li> <li>Output: <code>APLIST</code> (report).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/","title":"AP106 OCL","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#ap106-ocl-program","title":"AP106 OCL Program","text":"<p>This is an Operation Control Language (OCL) file (AP106.ocl36.txt) used on the IBM i (AS/400) system to handle Accounts Payable (A/P) voucher entry uploads for FlexiCapture import files. Below is a detailed explanation of the process steps, external programs called, and tables/files used in this program, based on the provided OCL code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#overview","title":"Overview","text":"<p>The OCL file automates the process of uploading A/P voucher entries from a FlexiCapture import file into the IBM i system. It ensures that the upload process is synchronized with other system operations (e.g., Profound Genie) by introducing pauses and checks. The program processes the uploaded data, saves it to a history table, and prepares it for further processing by other programs (e.g., AP107, AP110). It also interacts with PC-based batch files for file uploads and manages various database files on the IBM i system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initial Checks for A/P Voucher Entry File (APTR?WS?)</li> <li>The program checks if there are records in the A/P voucher entry file (<code>?9?APTR?WS?</code>) using conditional statements (<code>IFF</code>).</li> <li>If records exist, it displays messages indicating:<ul> <li>\"There are records in the A/P voucher entry file.\"</li> <li>\"You must post the batch before you can run the import from FlexiCapture on this workstation.\"</li> </ul> </li> <li> <p>A <code>PAUSE</code> is introduced to ensure the FlexiCapture upload process completes before further processing (to address synchronization issues with Profound Genie).</p> </li> <li> <p>Clear and Rebuild A/P Voucher Entry Files</p> </li> <li>If the A/P voucher entry file exists (<code>DATAF1-?9?APTR?WS?</code>), the program:<ul> <li>Clears the file using <code>CLRPFM ?9?APTR?WS?</code>.</li> <li>Rebuilds the file with <code>BLDFILE ?9?APTR?WS?,I,RECORDS,500,404,,,2,10</code>, specifying 500 records, a record length of 404 bytes, and other parameters.</li> </ul> </li> <li> <p>If the index file exists (<code>DATAF1-?9?APTX?WS?</code>), it builds an index using <code>BLDINDEX ?9?APTX?WS?,2,2,?9?APTR?WS?,+,,,12,5,385,20</code>.</p> </li> <li> <p>Set Program Variable</p> </li> <li> <p>The variable <code>P20</code> is set to <code>'APTR?WS?'</code> to reference the A/P voucher entry file.</p> </li> <li> <p>Start PC Organizer and Run FlexiCapture Upload</p> </li> <li>The program calls <code>STRPCOCLP</code> to start the PC Organizer, which prepares the system for PC-based commands.</li> <li>It executes a PC batch file (<code>STRPCCMD</code>) located at <code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUPD.BAT</code> to upload the journal entry file. This batch file is executed regardless of the <code>?9?/G</code> condition (same command in both <code>IF</code> and <code>ELSE</code> branches).</li> <li> <p>A <code>PAUSE</code> is displayed with the message \"TYPE 0, ENTER TO CONTINUE AFTER UPLOAD PROCESS IS COMPLETE,\" ensuring the user waits for the upload to finish.</p> </li> <li> <p>Run AP107 Program</p> </li> <li>The program loads <code>AP107</code> and opens two files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APFLEXH</code> (the history table for FlexiCapture uploads).</li> </ul> </li> <li> <p>The <code>AP107</code> program processes the uploaded data and saves it to the history table (<code>APFLEXH</code>).</p> </li> <li> <p>Run AP106 Program</p> </li> <li>The program loads itself (<code>AP106</code>) and opens several files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APTRAN</code> (A/P transaction file, labeled <code>?9?APTR?WS?</code>).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APDATE</code> (A/P date file).</li> </ul> </li> <li> <p>The <code>AP106</code> program processes the uploaded data into the A/P transaction file and validates it against control, vendor, and other reference files.</p> </li> <li> <p>Clear and Rebuild A/P Check Temporary File</p> </li> <li>The program deletes the A/P check temporary file (<code>APCT?WS?</code>) using <code>GSDELETE APCT?WS?,,,,,,,,?9?</code>.</li> <li> <p>It rebuilds the file with <code>BLDFILE ?9?APCT?WS?,I,RECORDS,500,80,,,2,21</code>, specifying 500 records and a record length of 80 bytes.</p> </li> <li> <p>Run AP110 Program</p> </li> <li>The program loads <code>AP110</code> and opens multiple files:<ul> <li><code>APTRAN</code> (A/P transaction file).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APCHKR</code> (A/P check register file).</li> <li><code>APCHKT</code> (A/P check temporary file, labeled <code>?9?APCT?WS?</code>).</li> <li><code>APTRNX</code> (A/P transaction index file, labeled <code>?9?APTX?WS?</code>).</li> <li><code>GLMAST</code> (general ledger master file).</li> <li><code>APOPNHC</code> (A/P open history control file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APINVH</code> (A/P invoice history file).</li> <li><code>APSTAT</code> (A/P status file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>INFIL1</code> (information file 1).</li> <li><code>INTZH1</code> (internal history file 1).</li> </ul> </li> <li>It overrides the printer file <code>APLIST</code> to output to either <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The <code>AP110</code> program processes the A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>Clear Uploaded File</p> </li> <li> <p>The program clears the <code>APINVUP</code> file using <code>CLRPFM ?9?APINVUP</code> to prepare for the next upload.</p> </li> <li> <p>End of Program</p> <ul> <li>The program jumps to the <code>END</code> tag, clears local variables (<code>LOCAL BLANK-*ALL</code>), and terminates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>STRPCOCLP</li> <li> <p>This program starts the PC Organizer, enabling the execution of PC-based commands (e.g., batch files) from the IBM i system.</p> </li> <li> <p>AP107</p> </li> <li> <p>Processes the uploaded journal entry file (<code>APINVUP</code>) and saves it to the FlexiCapture history table (<code>APFLEXH</code>).</p> </li> <li> <p>AP106</p> </li> <li> <p>The OCL file itself is loaded as a program to process the uploaded data into the A/P transaction file (<code>APTRAN</code>) and validate it against control, vendor, and other files.</p> </li> <li> <p>AP110</p> </li> <li> <p>Processes A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>APINVUP.BAT</p> </li> <li>A PC batch file (<code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUP.BAT</code>) executed via <code>STRPCCMD</code> to upload the journal entry file from the PC to the IBM i system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files on the IBM i system, identified by their labels and purposes:</p> File Name Label Purpose Used in Program APINVUP ?9?APINVUP Stores the uploaded journal entry file from FlexiCapture. AP107, AP106 APFLEXH ?9?APFLEXH History table for FlexiCapture uploads (saves uploaded file details). AP107 APTRAN ?9?APTR?WS? A/P transaction file (stores voucher entries). AP106, AP110 APCONT ?9?APCONT A/P control file (contains control data for A/P processing). AP106, AP110 APVEND ?9?APVEND A/P vendor file (contains vendor information). AP106, AP110 GSTABL ?9?GSTABL General system table (contains system-wide configuration data). AP106, AP110 APDATE ?9?APDATE A/P date file (stores date-related data for A/P processing). AP106 APCHKR ?9?APCHKR A/P check register file (tracks issued checks). AP110 APCHKT ?9?APCT?WS? A/P check temporary file (temporary storage for check data). AP110 APTRNX ?9?APTX?WS? A/P transaction index file (index for A/P transaction file). AP110 GLMAST ?9?GLMAST General ledger master file (stores G/L account information). AP110 APOPNHC ?9?APOPNHC A/P open history control file (tracks open A/P history). AP110 APINVH ?9?APINVH A/P invoice history file (stores historical invoice data). AP110 APSTAT ?9?APSTAT A/P status file (tracks status of A/P transactions). AP110 INFIL1 ?9?INFIL1 Information file 1 (general-purpose data file). AP110 INTZH1 ?9?INTZH1 Internal history file 1 (internal history data). AP110 <p>Notes on File Labels: - <code>?9?</code> is a library prefix (likely a system or company-specific library). - <code>?WS?</code> is a workstation identifier, making file names unique per workstation. - <code>DISP-SHR</code> indicates shared access, allowing multiple processes to read the file. - <code>EXTEND-100</code> specifies additional record capacity for files like <code>APTRAN</code> and <code>APCHKT</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Synchronization with Profound Genie: The <code>PAUSE</code> statements address a timing issue where Profound Genie processes the FlexiCapture upload before it completes. This ensures proper sequencing.</li> <li>FlexiCapture Integration: The program relies on FlexiCapture to generate the <code>APINVUP</code> file, which is uploaded via a PC batch file (<code>APINVUP.BAT</code>).</li> <li>Variable Substitution: Variables like <code>?9?</code>, <code>?WS?</code>, <code>?USER?</code>, and <code>?20?</code> are dynamically replaced at runtime with system-specific values (e.g., library, workstation ID, user ID).</li> <li>Printer Overrides: The <code>OVRPRTF</code> commands redirect the <code>APLIST</code> report to different output queues (<code>APEDIT</code> or <code>TESTOUTQ</code>) based on the <code>?9?/G</code> condition, likely for testing or production environments.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#summary","title":"Summary","text":"<ul> <li>Process: The OCL file checks for existing A/P records, clears and rebuilds necessary files, uploads a journal entry file from FlexiCapture, processes it through programs <code>AP107</code>, <code>AP106</code>, and <code>AP110</code>, and updates various A/P and G/L files. It includes pauses to ensure synchronization with external processes like Profound Genie.</li> <li>External Programs: <code>STRPCOCLP</code>, <code>AP107</code>, <code>AP106</code>, <code>AP110</code>, and the PC batch file <code>APINVUP.BAT</code>.</li> <li>Files Used: 16 database files, including <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, and others, for storing and processing A/P transactions, vendor data, checks, and G/L information.</li> </ul> <p>Let me know if you need further clarification or details about specific sections!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/","title":"AP106 Summary","text":"<p>Based on the provided OCL (<code>AP106.ocl36.txt</code>) and RPG programs (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>), along with the call stack (<code>STRPCOCLP</code> \u2192 <code>APINVUP.BAT</code> \u2192 <code>AP107</code> \u2192 <code>AP106</code> \u2192 <code>AP110</code>), I will first identify the use cases implemented by the entire process. Then, assuming the primary use case is implemented as a single large function that takes inputs programmatically (rather than through screen interactions), I will provide a Function Requirements Document that concisely outlines the process steps and business rules, using pseudo-code where necessary to clarify logic.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The call stack implements a cohesive process for uploading, archiving, processing, and finalizing Accounts Payable (A/P) voucher entries from a FlexiCapture import file. While multiple tasks are performed across the programs, they collectively support a single overarching use case:</p> <ol> <li>UC1: Process FlexiCapture Import File into A/P Vouchers and Generate Checks</li> <li>Description: Upload a FlexiCapture journal entry file, archive it for audit purposes, convert it into A/P voucher entries (header and detail records), validate and calculate due/discount dates, apply vendor hold statuses, store purchase order numbers, and process transactions to generate checks and update financial files, ensuring synchronization with Profound Genie.</li> <li>Details: <ul> <li><code>STRPCOCLP</code> and <code>APINVUP.BAT</code> handle the file upload.</li> <li><code>AP107</code> archives the import file to <code>APFLEXH</code> with audit metadata.</li> <li><code>AP106</code> processes the import file into <code>APTRAN</code>, handling validations, due date calculations, and vendor hold statuses.</li> <li><code>AP110</code> processes transactions, generates checks, and updates related files.</li> <li>Pauses in the OCL ensure synchronization with Profound Genie.</li> </ul> </li> <li>Source: OCL (<code>AP106.ocl36.txt</code>), RPG (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>).</li> </ol> <p>This single use case encompasses all the functionality, as the programs work together to achieve the end-to-end process of importing and processing A/P vouchers. Subtasks (e.g., duplicate invoice handling, due date validation) are part of this use case rather than standalone use cases, as they are tightly integrated steps within the same workflow.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document","title":"Function Requirements Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document-processflexicaptureapvouchers","title":"Function Requirements Document: ProcessFlexiCaptureAPVouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#1-purpose","title":"1. Purpose","text":"<p>This document defines the requirements for a function, <code>ProcessFlexiCaptureAPVouchers</code>, that programmatically processes a FlexiCapture import file into Accounts Payable (A/P) vouchers on the IBM i (AS/400) system, archives the data, applies validations, and generates checks, replacing screen-based interactions with direct input parameters.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#2-scope","title":"2. Scope","text":"<p>The function handles the end-to-end process of: - Uploading a FlexiCapture journal entry file. - Archiving the file with audit metadata. - Converting import data into A/P voucher header and detail records. - Validating and calculating due/discount dates, handling duplicates, and applying vendor hold statuses. - Processing transactions to generate checks and update financial files. - Ensuring synchronization with external systems (e.g., Profound Genie).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#3-function-signature","title":"3. Function Signature","text":"<pre><code>FUNCTION ProcessFlexiCaptureAPVouchers(\n  input_file: File(APINVUP),\n  workstation_id: String,\n  user_id: String,\n  library: String\n) RETURNS (\n  success: Boolean,\n  error_message: String\n)\n</code></pre>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#inputs","title":"Inputs","text":"<ul> <li><code>input_file</code>: FlexiCapture import file (<code>APINVUP</code>, 1090 bytes) containing invoice data (e.g., invoice number, vendor, amount, PO number).</li> <li><code>workstation_id</code>: Workstation identifier (e.g., <code>?WS?</code>).</li> <li><code>user_id</code>: User identifier (e.g., <code>?USER?</code>).</li> <li><code>library</code>: IBM i library prefix (e.g., <code>?9?</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#outputs","title":"Outputs","text":"<ul> <li><code>success</code>: True if processing completes without errors, False otherwise.</li> <li><code>error_message</code>: Description of any errors encountered (e.g., \"Records exist in APTR?WS?\", \"Invalid vendor\").</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#4-process-steps","title":"4. Process Steps","text":"<ol> <li>Validate Input and Existing Records</li> <li>Check if <code>APTR?WS?</code> (A/P transaction file) contains unposted records.</li> <li> <p>If records exist, return <code>success=False</code>, <code>error_message=\"You must post the batch before running the import\"</code>.</p> </li> <li> <p>Upload and Archive Import File</p> </li> <li>Read <code>input_file</code> and copy each record to <code>APFLEXH</code> (history table, 1129 bytes).</li> <li>Append audit metadata: current date (YYYYMMDD), time (HHMMSS), <code>user_id</code>, <code>workstation_id</code>.</li> <li> <p>Ensure no data loss during archiving.</p> </li> <li> <p>Clear and Rebuild Transaction Files</p> </li> <li>Clear <code>APTR?WS?</code> (404 bytes) and <code>APCT?WS?</code> (80 bytes).</li> <li>Rebuild <code>APTR?WS?</code> (500 records, 404 bytes) and <code>APCT?WS?</code> (500 records, 80 bytes).</li> <li> <p>Build index <code>APTX?WS?</code> for <code>APTR?WS?</code>.</p> </li> <li> <p>Process Import Records into Vouchers</p> </li> <li> <p>For each record in <code>input_file</code>:</p> <ul> <li>Validate Invoice:</li> <li>If <code>AUPATH</code> is blank, skip record.</li> <li>Retrieve vendor data (<code>VNVNAM</code>, <code>VNTERM</code>, <code>VNHOLD</code>) from <code>APVEND</code> using <code>AUVEND</code>.</li> <li>Retrieve control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>) from <code>APCONT</code>.</li> <li>Handle Duplicates:</li> <li>If <code>AUINV#</code>, <code>AUVEND</code>, Shadowsocks5://github.com/GrokAI/xAI-Grok-Playground/blob/main/docs/GrokCreatedByxAI.md#AUVEND<code>,</code>AUBTCH` match previous record, add as detail line to existing voucher.</li> <li>Otherwise, assign new entry number (<code>ACNXTE</code>) from <code>APCONT</code> and increment it.</li> <li>Calculate Dates:</li> <li>Compute due date (<code>DUDT</code>) using <code>VNTERM</code> (net days <code>TBNETD</code> or prox days <code>TBPRXD</code> from <code>GSTABL</code>) or default to invoice date (<code>AUDATE</code>) or 30 days.</li> <li>Compute discount due date (<code>DSDT</code>) using <code>TBDISD</code> from <code>GSTABL</code> or set to zero.</li> <li>Adjust <code>DUDT</code> and <code>DSDT</code> for holidays/weekends using <code>APDATE</code> (<code>ADNED8</code>).</li> <li>Apply Hold Status:</li> <li>Set <code>HLDD</code> based on <code>VNHOLD</code>: <code>A</code> (\" Sexually explicit content: =ACH<code>,</code>U<code>= AUTOPAY,</code>E` = EMPLOYEE EXPENSE.</li> <li>Write header record to <code>APTRAN</code> with fields like <code>ATVEND</code>, <code>AUINV#</code>, <code>ATDUDT</code>, <code>ATDSDT</code>.</li> <li>Write detail record to <code>APTRAN</code> with fields like <code>ATAMT</code>, <code>AUDDSC</code>, <code>AUDGL#</code>, <code>AUPONM</code>.</li> <li>Write to History Table:</li> <li>Copy entire record to <code>APFLEXH</code>, appending audit metadata.</li> <li>Generate Checks:</li> <li>Process <code>APTRAN</code> records to create checks in <code>APCHKT</code>.</li> <li>Update related files (<code>GLMAST</code>, <code>APINVH</code>, etc.).</li> </ul> </li> <li> <p>Finalize Processing</p> </li> <li>Output reports (<code>APLIST</code>) to appropriate queue (<code>QUSRSYS/APEDIT</code> or <code>TESTOUTQ</code>).</li> <li>Clear <code>APINVUP</code> after processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#5-business-rules","title":"5. Business Rules","text":"<ul> <li>Duplicate Prevention: Group records with identical <code>AUINV#</code>, <code>AUVEND</code>, <code>AUBTCH</code> as detail lines for a single voucher.</li> <li>Date Validation:</li> <li>Convert <code>AUDATE</code> to MMDDYY format (<code>INDT</code>).</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code>, adjusting for holidays/weekends using <code>APDATE</code>.</li> <li>Hold Status:</li> <li>Apply <code>VNHOLD</code> values (<code>A</code>, <code>U</code>, <code>E</code>) to set <code>HLDD</code> (ACH, Autopay, Employee Expense).</li> <li>PO Number Storage: Store <code>AUPONM</code> as <code>ATPONO</code> in <code>APTRAN</code>.</li> <li>Audit Metadata: Include <code>DATE8</code>, <code>TIME6</code>, <code>USER</code>, <code>WRKSTN</code> in <code>APFLEXH</code>.</li> <li>Synchronization: Pause after upload to ensure Profound Genie processes only completed uploads.</li> <li>Y2K Compliance: Use century prefix (<code>20</code> or <code>19</code>) based on comparison with <code>Y2KCMP</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#6-non-functional-requirements","title":"6. Non-Functional Requirements","text":"<ul> <li>Performance: Process up to 500 records efficiently.</li> <li>Reliability: Ensure no data loss during upload, archiving, or processing.</li> <li>Security: Restrict access to authorized users via <code>USER</code> and <code>WRKSTN</code>.</li> <li>Auditability: Maintain complete history in <code>APFLEXH</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Valid import file format (1090 bytes).</li> <li>Up-to-date <code>APVEND</code>, <code>APCONT</code>, <code>GSTABL</code>, <code>APDATE</code> data.</li> <li>21st-century dates only.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#8-constraints","title":"8. Constraints","text":"<ul> <li>Fixed file path for <code>APINVUP.BAT</code>.</li> <li>No external file I/O or network calls outside IBM i.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#9-dependencies","title":"9. Dependencies","text":"<ul> <li>FlexiCapture system for input file.</li> <li>Profound Genie for post-processing.</li> <li>IBM i files: <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, <code>APCHKT</code>, <code>APCHKR</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>APSTAT</code>, <code>INFIL1</code>, <code>INTZH1</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#additional-notes","title":"Additional Notes","text":"<ul> <li>Single Use Case: The process is a single, integrated use case, as all programs (<code>AP107</code>, <code>AP106</code>, <code>AP110</code>) and the OCL work together to achieve the end-to-end goal of processing A/P vouchers and generating checks. Subtasks (e.g., duplicate handling, date calculations) are components of this function.</li> <li>Programmatic Inputs: The function assumes direct input of the file and metadata, eliminating screen-based pauses (e.g., \"TYPE 0, ENTER TO CONTINUE\") by using parameters like <code>workstation_id</code> and <code>user_id</code>.</li> <li>Artifact ID: A new UUID (<code>7a2b9f4c-6c1d-4b8a-9f7e-2c3d8e5f9a1b</code>) is used, as this is a new artifact unrelated to the previous one.</li> </ul> <p>Let me know if you need further clarification or adjustments to the document!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/","title":"AP106","text":"<p>The provided RPG program (<code>AP106.rpg36</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#overview","title":"Overview","text":"<p>The <code>AP106</code> RPG program processes data from a FlexiCapture import file (<code>APINVUP</code>) and converts it into A/P voucher entries in the A/P transaction file (<code>APTRAN</code>). It validates vendor information, calculates due dates and discount due dates (adjusting for holidays and weekends), handles duplicate invoices based on batch numbers, and stores purchase order (PO) numbers. The program writes header and detail records to the transaction file and updates control data, ensuring proper integration with the A/P module.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Sets initial values for variables (e.g., zeros for <code>Z5</code>, <code>Z3</code>; blanks for <code>MSG</code>, <code>MSG2</code>).</li> <li>Sets <code>PTYP</code> to <code>'FLEXI'</code> to indicate FlexiCapture import.</li> <li>Initializes indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>90</code>) and retrieves system date/time (<code>TIMDAT</code>, <code>SYDATE</code>, <code>SYTIME</code>).</li> <li>Converts the system date to YYMMDD format (<code>SYDYMD</code>) and extracts month (<code>MONTH</code>) and year (<code>YEAR</code>).</li> <li> <p>Sets indicator <code>09</code> to control the main processing loop.</p> </li> <li> <p>Check for Valid Import File</p> </li> <li> <p>Verifies that the import file path (<code>AUPATH</code>) is not blank. If blank, the program jumps to the <code>END</code> tag and terminates.</p> </li> <li> <p>Retrieve A/P Control Information</p> </li> <li>Chains to the A/P control file (<code>APCONT</code>) using indicator <code>10</code> to retrieve control data.</li> <li> <p>Stores the A/P G/L account (<code>ACAPGL</code>) in <code>APGL</code> and the cash G/L account (<code>ACCAGL</code>) in <code>BKGL</code>.</p> </li> <li> <p>Process Import File Records</p> </li> <li>Reads records from the import file (<code>APINVUP</code>) using the <code>01</code> input specification.</li> <li>For each record, performs the following:<ul> <li>Check for Duplicate Invoices:</li> <li>Compares the current invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) with saved values (<code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>).</li> <li>If they match, treats the record as an additional detail line for the existing voucher and skips to the <code>AROUND</code> tag to process the detail.</li> <li>Get Entry Number:</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code>.</li> <li>If the entry number (<code>ENT#</code>) is zero, chains to <code>APTRAN</code> to check for conflicts, increments <code>ACNXTE</code> and <code>ENT#</code>, and updates <code>APCONT</code> via <code>RELAPC</code> exception output.</li> <li>If <code>ENT#</code> is non-zero, assigns a new entry number, updates <code>ACNXTE</code>, and sets <code>RECSTS</code> to <code>'ADDNEW'</code>.</li> <li>Handles overflow if <code>ENT#</code> reaches 99999.</li> <li>Validate Invoice Date:</li> <li>Converts the invoice date (<code>AUDATE</code>) to MMDDYY format (<code>INDT</code>).</li> <li>Extracts month (<code>MM</code>), day (<code>DD</code>), and year (<code>YY</code>) for further processing.</li> <li>Retrieve Vendor Information:</li> <li>Chains to the vendor file (<code>APVEND</code>) using <code>AUVEND</code> to retrieve vendor details (e.g., name <code>VNVNAM</code>, addresses <code>VNAD1</code>\u2013<code>VNAD4</code>, hold status <code>VNHOLD</code>, terms <code>VNTERM</code>).</li> <li>Stores vendor data in fields like <code>VNAM</code>, <code>VAD1</code>\u2013<code>VAD4</code>.</li> <li>Calculate Due Date:</li> <li>If the due date (<code>DUDT</code>) is zero and the vendor is not a one-time vendor (<code>AUVEND \u2260 0</code>), calls the <code>CLCDUE</code> subroutine to calculate the due date based on vendor terms (<code>VNTERM</code>).</li> <li>Uses the general system table (<code>GSTABL</code>) to retrieve net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) for due date calculation.</li> <li>If no terms are defined, defaults to the invoice date (<code>INDT</code>) or 30 days.</li> <li>Calculate Discount Due Date (MG18):</li> <li>If the discount due date (<code>DSDT</code>) is zero and the vendor is not one-time, calls the <code>CLCDSC</code> subroutine to calculate the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code>.</li> <li>Sets <code>DSDT</code> to zero if no discount days are defined.</li> <li>Validate Due Date for Holidays/Weekends (MG17):</li> <li>Chains to the A/P date file (<code>APDATE</code>) using the calculated due date (<code>DUDT8</code>) to check for holidays or weekends.</li> <li>If a holiday/weekend is found, replaces <code>DUDT</code> with a non-holiday/weekend date (<code>ADNED8</code>).</li> <li>Validate Discount Due Date (MG18):</li> <li>Similarly checks the discount due date (<code>DSD8</code>) against <code>APDATE</code> and updates <code>DSDT</code> if necessary.</li> <li>Handle Vendor Hold Status:</li> <li>Sets the hold description (<code>HLDD</code>) based on the vendor hold status (<code>VNHOLD</code>):<ul> <li><code>'A'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR ACH\".</li> <li><code>'U'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR AUTOPAY\".</li> <li><code>'E'</code>: Sets <code>HLDD</code> to \"EMPLOYEE EXPENSE\" and updates <code>BKGL</code> to the employee expense G/L (<code>ACEEGL</code>).</li> </ul> </li> <li>Write Header Record:</li> <li>Calls the <code>HDRADD</code> subroutine to write a header record to <code>APTRAN</code> using the <code>HEADER</code> exception output.</li> <li>Includes fields like entry number (<code>ACNXTE</code>), vendor number (<code>AUVEND</code>), invoice number (<code>AUINV#</code>), due date (<code>DUDT</code>), and vendor details.</li> <li>Process Detail Record:</li> <li>Populates detail fields (e.g., amount <code>AMT</code>, description <code>DDES</code>, G/L account <code>EXGL</code>, PO number <code>PONO</code>) from the import record.</li> <li>Calculates discount percentage (<code>DSPC</code>) by multiplying <code>AUDSPC</code> by 10 if non-zero.</li> <li>Writes a detail record to <code>APTRAN</code> using the <code>DETAIL</code> exception output.</li> <li>Increments the line number (<code>NXLINE</code>) for the next detail.</li> <li>Save Current Record:</li> <li>Saves the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), batch ID (<code>AUBTCH</code>), and entry number (<code>ENT#</code>) to <code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>, and <code>SVENT#</code> for comparison with the next record.</li> <li>Reset Variables:</li> <li>Clears variables (e.g., <code>ENT#</code>, <code>TOTAL</code>, <code>SNGL</code>, <code>HOLD</code>) for the next record.</li> </ul> </li> <li> <p>If the current invoice and vendor match the saved values, writes additional detail lines without creating a new header.</p> </li> <li> <p>End Processing</p> </li> <li>Loops back to process the next import record until the end of the file.</li> <li>Terminates at the <code>END</code> tag, closing files and ending the program.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#business-rules","title":"Business Rules","text":"<ol> <li>Duplicate Invoice Handling (MG19):</li> <li>If the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) match the previous record, the program treats it as an additional detail line for the same voucher rather than creating a new voucher.</li> <li> <p>This prevents duplicate vouchers for the same invoice within the same batch.</p> </li> <li> <p>Due Date Calculation:</p> </li> <li>For non-one-time vendors (<code>AUVEND \u2260 0</code>), calculates the due date based on the vendor\u2019s payment terms (<code>VNTERM</code>) from <code>GSTABL</code>:<ul> <li>Uses net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) to determine the due date.</li> <li>Defaults to the invoice date (<code>INDT</code>) or 30 days if no terms are defined.</li> </ul> </li> <li> <p>Adjusts the due date to avoid holidays and weekends using the <code>APDATE</code> table (MG17).</p> </li> <li> <p>Discount Due Date Calculation (MG18):</p> </li> <li>Calculates the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code> for non-one-time vendors.</li> <li>Sets the discount due date to zero if no discount days are defined.</li> <li> <p>Adjusts for holidays and weekends using <code>APDATE</code>.</p> </li> <li> <p>Vendor Hold Status:</p> </li> <li> <p>Applies hold descriptions based on the vendor\u2019s hold status (<code>VNHOLD</code>):</p> <ul> <li><code>'A'</code>: On hold for ACH payments.</li> <li><code>'U'</code>: On hold for autopay.</li> <li><code>'E'</code>: Employee expense, with the G/L account updated to <code>ACEEGL</code>.</li> </ul> </li> <li> <p>Invoice Date Validation:</p> </li> <li>Ensures the invoice date (<code>AUDATE</code>) is converted to a valid MMDDYY format (<code>INDT</code>).</li> <li> <p>Handles century calculation for Y2K compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</p> </li> <li> <p>PO Number Storage (MG20):</p> </li> <li> <p>Stores the PO number (<code>AUPONM</code>) from the import file in the A/P transaction file (<code>ATPONO</code>) for both header and detail records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Increments the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for each new voucher.</li> <li> <p>Handles overflow (entry number &gt; 99999) by resetting and updating <code>ACNXTE</code>.</p> </li> <li> <p>Detail Line Description (MG17):</p> </li> <li> <p>Copies the invoice description (<code>AUHDSC</code>) from the header to the detail record (<code>DDES</code>) for new records.</p> </li> <li> <p>Discount Percentage:</p> </li> <li>If a discount percentage (<code>AUDSPC</code>) is provided, multiplies it by 10 to store in <code>DSPC</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APTRAN APTRAN A/P transaction file storing voucher header and detail records. Update (UF) Writing header/detail records, checking entry numbers. APCONT APCONT A/P control file containing G/L accounts and next entry number. Update (UF) Retrieving/updating control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>). APVEND APVEND A/P vendor file containing vendor details (e.g., name, address, terms). Input (IF) Retrieving vendor information. GSTABL GSTABL General system table containing payment terms (e.g., net days, discount days). Input (IF) Retrieving terms for due date calculation. APDATE APDATE A/P date file containing non-holiday/weekend dates for due date validation. Input (IF) Adjusting due/discount dates for holidays/weekends. <p>File Details: - APINVUP: Record length 1090 bytes, contains fields like invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), and PO number (<code>AUPONM</code>). - APTRAN: Record length 404 bytes, stores header (e.g., <code>ATVEND</code>, <code>ATDUDT</code>) and detail (e.g., <code>ATAMT</code>, <code>ATPONO</code>) records. - APCONT: Record length 256 bytes, includes next entry number (<code>ACNXTE</code>) and G/L accounts. - APVEND: Record length 579 bytes, includes vendor name, addresses, and terms. - GSTABL: Record length 256 bytes, includes terms data like net days (<code>TBNETD</code>) and discount days (<code>TBDISD</code>). - APDATE: Record length 19 bytes, maps calculated due dates to non-holiday/weekend dates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called via <code>CALL</code> operations in this RPG program. However, the program relies on subroutines defined within itself for specific tasks:</p> <ol> <li>CLCDUE: Calculates the due date based on vendor terms (<code>VNTERM</code>), using net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>).</li> <li>CLCDSC: Calculates the discount due date based on discount days (<code>TBDISD</code>).</li> <li>HDRADD: Writes the header record to <code>APTRAN</code>.</li> <li>TMDATN: Adds net days to the invoice date to calculate the due date.</li> <li>TMDATS: Adds discount days to the invoice date to calculate the discount due date.</li> <li>TMDATP: Calculates the due date for prox terms (e.g., next month\u2019s specific day).</li> <li>@DTE1: Converts a Gregorian date (MMDDYY) to Julian format for date calculations.</li> <li>@DTE2: Converts a Julian date back to Gregorian format.</li> </ol> <p>These subroutines handle date calculations, record writing, and terms processing internally.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#additional-notes","title":"Additional Notes","text":"<ul> <li>Modifications:</li> <li>MG17 (04/19/22): Added holiday/weekend due date adjustment and invoice description copying.</li> <li>MG18 (06/05/22): Added discount due date calculation and validation.</li> <li>MG19 (08/17/22): Added batch ID comparison for duplicate invoice handling.</li> <li>MG20 (11/05/23): Added PO number storage in <code>APTRAN</code>.</li> <li>Y2K Compliance: The program handles century calculations for dates using <code>Y2KCEN</code> (e.g., 19 for 1900s, 20 for 2000s) and <code>Y2KCMP</code> (e.g., 80 to determine century).</li> <li>Indicators: Uses indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>79</code>, <code>92</code>, <code>99</code>) to control file access, error handling, and record processing.</li> <li>File Access: Uses <code>CHAIN</code> for keyed access to <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, and <code>APTRAN</code>, ensuring efficient retrieval and updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initializes variables, checks the import file, retrieves control data, processes each import record (validating dates, vendors, and terms), writes header and detail records to <code>APTRAN</code>, and updates <code>APCONT</code>.</li> <li>Business Rules: Handles duplicate invoices, calculates/adjusts due and discount dates, applies vendor hold statuses, stores PO numbers, and ensures Y2K-compliant date processing.</li> <li>Files Used: <code>APINVUP</code> (input), <code>APTRAN</code> (transactions), <code>APCONT</code> (control), <code>APVEND</code> (vendors), <code>GSTABL</code> (terms), <code>APDATE</code> (dates).</li> <li>External Programs: None called explicitly; relies on internal subroutines (<code>CLCDUE</code>, <code>CLCDSC</code>, etc.).</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/","title":"AP107","text":"<p>The provided RPG program (<code>AP107.rpg36.txt</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#overview","title":"Overview","text":"<p>The <code>AP107</code> RPG program is a simple utility that reads records from the FlexiCapture import file (<code>APINVUP</code>) and writes them to the FlexiCapture history table (<code>APFLEXH</code>) for record-keeping. It captures metadata such as the date, time, user, and workstation, ensuring an audit trail of uploaded data. This program is called before <code>AP106</code> to archive the import data prior to further processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Upon reading each record from the input file (<code>APINVUP</code>) (indicated by <code>01</code>), the program retrieves the current system date and time using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits, HHMMSSYYYYMMDD format).</li> <li>Extracts the time (<code>SYTIME</code>, HHMMSS) and date (<code>SYDATE</code>, MMDDYY) from <code>TIMDAT</code>.</li> <li>Converts the date to YYMMDD format (<code>SYDYMD</code>) by multiplying <code>SYDATE</code> by 10000.01.</li> <li>Extracts the month (<code>MONTH</code>) from <code>SYDATE</code>.</li> <li>Formats the date as an 8-digit field (<code>DATE8</code>, YYYYMMDD) by combining a century prefix (<code>20</code>) with <code>SYDYMD</code>.</li> <li>Stores the time in a 6-digit field (<code>TIME6</code>, HHMMSS).</li> <li> <p>Retrieves the user ID (<code>USER</code>) and workstation ID (<code>WRKSTN</code>) from the User Data Structure (UDS, fields at positions 400\u2013409 and 410\u2013414).</p> </li> <li> <p>Write to History Table</p> </li> <li>For each record read from <code>APINVUP</code>, the program writes a record to the FlexiCapture history table (<code>APFLEXH</code>) using the <code>DADD</code> exception output (indicated by <code>01</code>).</li> <li> <p>The output record includes:</p> <ul> <li>The entire input record split into six segments (<code>REC1</code>\u2013<code>REC6</code>, covering positions 1\u20131090 of <code>APINVUP</code>).</li> <li>The formatted date (<code>DATE8</code>, positions 1091\u20131098).</li> <li>The formatted time (<code>TIME6</code>, positions 1099\u20131104).</li> <li>The user ID (<code>USER</code>, positions 1105\u20131114).</li> <li>The workstation ID (<code>WRKSTN</code>, positions 1115\u20131129).</li> </ul> </li> <li> <p>Loop and Termination</p> </li> <li>The program continues reading and processing <code>APINVUP</code> records until the end of the file.</li> <li>No explicit termination logic is shown, but the program ends naturally when all input records are processed, closing files automatically.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#business-rules","title":"Business Rules","text":"<ol> <li>Audit Trail Creation:</li> <li>Every record from the FlexiCapture import file (<code>APINVUP</code>) is archived in the history table (<code>APFLEXH</code>) without modification.</li> <li> <p>Metadata (date, time, user, workstation) is appended to each record to track when and by whom the data was uploaded.</p> </li> <li> <p>Data Preservation:</p> </li> <li>The program does not validate or modify the input data; it copies all fields (<code>REC1</code>\u2013<code>REC6</code>) directly to the output file.</li> <li> <p>This ensures a complete and unaltered record of the import data for auditing or recovery purposes.</p> </li> <li> <p>System Metadata:</p> </li> <li>The program uses system-provided date/time (<code>TIMDAT</code>) and user/workstation information from the UDS to populate audit fields.</li> <li>The date is formatted as YYYYMMDD (<code>DATE8</code>) with a hardcoded century prefix (<code>20</code>), assuming all dates are in the 2000s.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APFLEXH APFLEXH FlexiCapture history table storing archived import records with audit metadata. Output (O) Writing history records. <p>File Details: - APINVUP:   - Record length: 1090 bytes.   - Fields include invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), PO number (<code>AUPONM</code>), and others.   - Also mapped to six segments (<code>REC1</code>\u2013<code>REC6</code>) for direct copying (positions 1\u2013256, 257\u2013512, 513\u2013750, 751\u2013810, 811\u20131000, 1001\u20131090). - APFLEXH:   - Record length: 1129 bytes.   - Includes the 1090 bytes from <code>APINVUP</code> (<code>REC1</code>\u2013<code>REC6</code>) plus additional fields:     - <code>DATE8</code> (8 bytes, YYYYMMDD, positions 1091\u20131098).     - <code>TIME6</code> (6 bytes, HHMMSS, positions 1099\u20131104).     - <code>USER</code> (10 bytes, user ID, positions 1105\u20131114).     - <code>WRKSTN</code> (15 bytes, workstation ID, positions 1115\u20131129).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP107</code> program does not explicitly call any external programs or subroutines via <code>CALL</code> operations.</li> <li>All processing is self-contained, relying on basic RPG operations (<code>TIME</code>, <code>MOVEL</code>, <code>MOVE</code>, <code>MULT</code>) and file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#additional-notes","title":"Additional Notes","text":"<ul> <li>Simplicity: The program is straightforward, designed solely to archive <code>APINVUP</code> records in <code>APFLEXH</code> with audit metadata. It lacks complex logic or validation, deferring such tasks to other programs (e.g., <code>AP106</code>).</li> <li>Y2K Assumption: The program assumes all dates are in the 21st century by prefixing <code>20</code> to the year in <code>DATE8</code>. This may cause issues for dates before 2000 or after 2099, though unlikely given the context.</li> <li>UDS Usage: The User Data Structure (UDS) provides user and workstation information, which is standard in IBM i RPG programs for audit purposes.</li> <li>File Access:</li> <li><code>APINVUP</code> is read sequentially as a primary file (<code>IP</code>).</li> <li><code>APFLEXH</code> is an output file (<code>O</code>) with records added (<code>A</code>) via exception output (<code>DADD</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#summary","title":"Summary","text":"<ul> <li>Process Steps: Reads each record from <code>APINVUP</code>, captures system date/time and user/workstation metadata, and writes the record plus metadata to <code>APFLEXH</code>.</li> <li>Business Rules: Archives all import records without modification, appending audit metadata (date, time, user, workstation) for tracking.</li> <li>Files Used: <code>APINVUP</code> (input, import data), <code>APFLEXH</code> (output, history with audit metadata).</li> <li>External Programs: None; all logic is internal.</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/","title":"AP1012 RPG","text":"<p>The <code>AP1012.rpg</code> program is an RPG III program running on an IBM AS/400 (iSeries) system, designed to create detail lines for accounts payable (A/P) voucher entries in the <code>APTRAN</code> file by prorating freight charges based on sales detail or miscellaneous records. It is called from the <code>AP125.rpg</code> program (which is invoked by the <code>AP125.ocl36.txt</code> OCL script) and processes data from sales files (<code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>) to allocate freight amounts. Below, I detail the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#process-steps-of-the-ap1012-program","title":"Process Steps of the AP1012 Program","text":"<p>The program calculates freight amounts for A/P voucher detail lines by prorating the total freight amount (<code>FRTTOT</code>) across sales detail or miscellaneous records, based on gallons or miscellaneous amounts. It handles both detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) and miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records, with adjustments for invoice dates and product codes.</p> <ol> <li>Initialization:</li> <li>Parameters: Receives a <code>SALES</code> data structure with:<ul> <li><code>SACO</code>: Company number (2 digits).</li> <li><code>SAORD</code>: Order number (6 digits).</li> <li><code>SASRN#</code>: Shipping reference number (3 digits).</li> <li><code>SASEQ</code>: Sequence number (3 digits).</li> <li><code>FRTTOT</code>: Total freight to allocate (7.2 digits).</li> <li><code>VEND</code>: Vendor number (5 digits).</li> <li><code>ENTNUM</code>: A/P entry number (5 digits).</li> <li><code>EXGL</code>: Expense G/L (8 digits).</li> <li><code>DSPC</code>: Discount percentage (4.3 digits, per <code>MG03</code>).</li> <li><code>CMPDT8</code>: Comparison date (invoice date minus one year, per <code>JB06</code>).</li> <li><code>S@FIMO</code>: File indicator (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>, per <code>JB06</code>).</li> <li><code>S@DM</code>: Detail/misc indicator (<code>D</code> for detail, <code>M</code> for misc, per <code>JB06</code>).</li> </ul> </li> <li>Initializes fields (<code>ZERO6</code>, <code>ZERO7</code>, <code>ZERO9</code>, <code>ZERO11</code>) to zero.</li> <li> <p>If <code>S@FIMO</code> is blank, calls <code>GETS@</code> to determine the appropriate file (<code>SA5FI</code> or <code>SA5MO</code>) and record type (<code>D</code> or <code>M</code>).</p> </li> <li> <p>Subroutine GETS@ (Determine File and Record Type):</p> </li> <li>If <code>SAORD</code> and <code>SASRN#</code> are non-zero, constructs a key (<code>SAIUKY</code>) using <code>SACO</code>, <code>SAORD</code>, and <code>SASRN#</code>.</li> <li>Checks files in order:<ul> <li><code>SA5FIUD</code>: If a valid record is found with <code>S5SHD8 &gt;= CMPDT8</code>, sets <code>S@FIMO = 'F'</code>, <code>S@DM = 'D'</code>.</li> <li><code>SA5MOUD</code>: If found, sets <code>S@FIMO = 'M'</code>, <code>S@DM = 'D'</code>.</li> <li><code>SA5FIUM</code>: If found, sets <code>S@FIMO = 'F'</code>, <code>S@DM = 'M'</code>.</li> <li><code>SA5MOUM</code>: If found, sets <code>S@FIMO = 'M'</code>, <code>S@DM = 'M'</code>.</li> </ul> </li> <li> <p>Stops when a valid record is found (<code>SA5FND</code>).</p> </li> <li> <p>Calculate Total Gallons (Detail Records):</p> </li> <li>Constructs a key (<code>SAKEY</code>) using <code>SACO</code>, <code>SAORD</code>, and <code>SASRN#</code>.</li> <li>Sets the lower limit for <code>SA5FIUD</code> or <code>SA5MOUD</code> based on <code>S@FIMO</code>.</li> <li>Reads through <code>SA5FIUD</code> (if <code>S@FIMO \u2260 'M'</code>) or <code>SA5MOUD</code> (if <code>S@FIMO = 'M'</code>).</li> <li>For matching records (<code>S5CO# = SACO</code>, <code>S5ORD# = SAORD</code>, <code>S5SRN# = SASRN#</code>, <code>S5SHD8 &gt;= CMPDT8</code>):<ul> <li>Adds <code>S5NGAL</code> (net gallons) to <code>TTLQTY</code>.</li> <li>Increments <code>COUNT1</code> (number of detail lines).</li> </ul> </li> <li> <p>If <code>TTLQTY</code> and <code>COUNT1</code> are zero, skips to miscellaneous record processing (<code>SKIP3</code>).</p> </li> <li> <p>Prorate Freight for Detail Records:</p> </li> <li>Resets <code>SAKEY</code> to \"000\" and re-reads <code>SA5FIUD</code> or <code>SA5MOUD</code>.</li> <li>For each matching record:<ul> <li>Calculates the percentage (<code>PCTHLD = S5NGAL / TTLQTY</code>) if <code>TTLQTY</code> is non-zero.</li> <li>Computes freight amount (<code>AMT,Y = PCTHLD * FRTTOT</code>).</li> <li>Stores in <code>AMTITM</code> and <code>LINAMT</code>.</li> <li>Increments <code>COUNT2</code> (line counter) and array index <code>Y</code>.</li> </ul> </li> <li>For the last record (<code>COUNT2 = COUNT1</code>):<ul> <li>Calculates total computed amount (<code>CLCAMT</code> = sum of <code>AMT</code>).</li> <li>Adjusts <code>AMTITM</code> and <code>LINAMT</code>:</li> <li>If <code>FRTTOT = CLCAMT</code>, no adjustment.</li> <li>If <code>FRTTOT &gt; CLCAMT</code>, adds difference (<code>DIFF1</code>) to <code>AMTITM</code>.</li> <li>If <code>FRTTOT &lt; CLCAMT</code>, subtracts difference (<code>DIFF2</code>) from <code>AMTITM</code>.</li> </ul> </li> <li> <p>Calls <code>GOOD</code> to write the detail line to <code>APTRAN</code>.</p> </li> <li> <p>Subroutine MFRTO (Miscellaneous Freight Total):</p> </li> <li> <p>For invoices with only miscellaneous records (no detail lines, per <code>JB08</code>):</p> <ul> <li>Reads <code>SA5FIUM</code> or <code>SA5MOUM</code> based on <code>S@FIMO</code>.</li> <li>For matching records (<code>SMCO# = SACO</code>, <code>SMORD# = SAORD</code>, <code>SMSRN# = SASRN#</code>, <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, <code>SMSHD8 &gt;= CMPDT8</code>):</li> <li>Adds <code>SMMAMT</code> to <code>TTLMFT</code> (total miscellaneous freight).</li> <li>Increments <code>COUNTM</code> (miscellaneous line count).</li> </ul> </li> <li> <p>Prorate Freight for Miscellaneous Records:</p> </li> <li> <p>If no detail records were found (<code>TTLQTY = 0</code>, <code>COUNT1 = 0</code>):</p> <ul> <li>Reads <code>SA5FIUM</code> or <code>SA5MOUM</code> based on <code>S@FIMO</code>.</li> <li>For matching records (<code>SMCO# = SACO</code>, <code>SMORD# = SAORD</code>, <code>SMSRN# = SASRN#</code>, <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, <code>SMSHD8 &gt;= CMPDT8</code>):</li> <li>Calculates miscellaneous amount (<code>CLCAMT = SMMAMT * SMMQTY</code>).</li> <li>For non-last records (<code>COUNT3 &lt; COUNTM</code>):<ul> <li>Computes percentage (<code>PCTHLD = CLCAMT / TTLMFT</code>).</li> <li>Calculates freight amount (<code>FRTAMT = FRTTOT * PCTHLD</code>).</li> <li>Adds <code>FRTAMT</code> to <code>CLCTOT</code> (running total).</li> </ul> </li> <li>For the last record:<ul> <li>Sets <code>FRTAMT = FRTTOT - CLCTOT</code> to ensure total matches <code>FRTTOT</code>.</li> </ul> </li> <li>Calls <code>GETFRT</code> to write the miscellaneous detail line to <code>APTRAN</code>.</li> </ul> </li> <li> <p>Subroutine GOOD (Write Detail Line for Detail Records):</p> </li> <li>Retrieves freight G/L (<code>FEGL</code>):<ul> <li>If product code (<code>S5PROD</code>) contains an alpha character (per <code>JB02</code>), chains to <code>GSCTUM</code> using <code>S5CO#</code>, <code>S5PROD</code>, <code>S5CNTR</code>, and <code>S5UM</code> to get <code>CUFEGL</code>.</li> <li>Otherwise, chains to <code>GSTABL</code> (table <code>CNTRPF</code>) using <code>S5TANK</code> to get <code>TBFEG4</code>, appending <code>S5PROD</code>.</li> <li>If still zero, chains to <code>BICONT</code> to get default <code>BCFRGL</code>.</li> </ul> </li> <li>Constructs <code>APKEY</code> using <code>S5CO#</code> and <code>COUNT2</code>.</li> <li>Chains to <code>APTRAN</code> to check for an existing record.</li> <li>Sets description (<code>DDES = 'XXXXXXXXX XXXX XXX FRTCHG'</code>).</li> <li> <p>Writes (<code>ADDT</code>) or updates (<code>UPDT</code>) the detail line with <code>LINAMT</code>, <code>FEGL</code>, <code>DSPC</code>, etc.</p> </li> <li> <p>Subroutine GETFRT (Write Detail Line for Miscellaneous Records):</p> </li> <li>Sets freight G/L (<code>FEGL = SMGLNO</code>).</li> <li>Constructs <code>APKEY</code> using <code>SMCO#</code> and <code>COUNT3</code>.</li> <li>Chains to <code>APTRAN</code> to check for an existing record.</li> <li>Sets description (<code>DDES = 'MISC CHARGE'</code>).</li> <li> <p>Writes (<code>ADDTM</code>) or updates (<code>UPDTM</code>) the detail line with <code>FRTAMT</code>, <code>FEGL</code>, <code>DSPC</code>, etc.</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets <code>*INLR = *ON</code> to end the program.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Freight Proration:</li> <li>For detail records (<code>SA5FIUD</code> or <code>SA5MOUD</code>), prorates freight (<code>FRTTOT</code>) based on net gallons (<code>S5NGAL / TTLQTY</code>).</li> <li>For miscellaneous records (<code>SA5FIUM</code> or <code>SA5MOUM</code>), prorates freight based on miscellaneous amount (<code>SMMAMT * SMMQTY / TTLMFT</code>, per <code>JB08</code>).</li> <li> <p>Ensures the sum of prorated amounts equals <code>FRTTOT</code> by adjusting the last record.</p> </li> <li> <p>File Selection:</p> </li> <li>Uses <code>S@FIMO</code> (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>) and <code>S@DM</code> (<code>D</code> for detail, <code>M</code> for misc) to determine the correct file (<code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, <code>SA5MOUM</code>).</li> <li> <p>If <code>S@FIMO</code> is blank, <code>GETS@</code> determines the file by checking for valid records (per <code>JB07</code>).</p> </li> <li> <p>Date Restriction:</p> </li> <li> <p>Only processes records with a ship date (<code>S5SHD8</code> or <code>SMSHD8</code>) within one year of the invoice date (<code>CMPDT8</code>, per <code>JB06</code>).</p> </li> <li> <p>G/L Account Determination:</p> </li> <li>For detail records with alpha product codes, retrieves freight G/L (<code>CUFEGL</code>) from <code>GSCTUM</code> (per <code>JB02</code>).</li> <li>For numeric product codes, uses <code>TBFEG4</code> from <code>GSTABL</code> (table <code>CNTRPF</code>) with <code>S5PROD</code> appended.</li> <li> <p>Defaults to <code>BCFRGL</code> from <code>BICONT</code> if no G/L is found.</p> </li> <li> <p>Miscellaneous Records:</p> </li> <li>Only processes miscellaneous records with <code>SMMSTY = 'F'</code> (freight) and non-zero <code>SMGLNO</code> (per <code>MG05</code>, <code>JB08</code>).</li> <li> <p>Handles invoices with only miscellaneous lines (no detail records, per <code>JB08</code>).</p> </li> <li> <p>Discount Application:</p> </li> <li> <p>Applies discount percentage (<code>DSPC</code>) from the <code>SALES</code> data structure to detail lines (per <code>MG03</code>).</p> </li> <li> <p>Detail Line Creation:</p> </li> <li>Creates <code>APTRAN</code> detail lines with fields like <code>FEGL</code>, <code>LINAMT</code> (or <code>FRTAMT</code>), <code>DSPC</code>, and default values (e.g., <code>CLCD = 'C'</code>, <code>POSQ = '000'</code>).</li> <li>Uses fixed descriptions: <code>XXXXXXXXX XXXX XXX FRTCHG</code> for detail records, <code>MISC CHARGE</code> for miscellaneous records.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Update Files:</li> <li> <p><code>APTRAN</code>: Accounts Payable transaction file (404 bytes, keyed by company and entry number).</p> </li> <li> <p>Input Files:</p> </li> <li><code>SA5FIUD</code>: Sales detail file (1024 bytes, keyed by company, customer, order, ship to, SRN).</li> <li><code>SA5FIUM</code>: Sales miscellaneous file (1024 bytes, keyed by company, customer, order, SRN).</li> <li><code>SA5MOUD</code>: Move detail file (1024 bytes, keyed by company, customer, order, ship to, SRN, per <code>JB06</code>).</li> <li><code>SA5MOUM</code>: Move miscellaneous file (1024 bytes, keyed by company, customer, order, SRN, per <code>JB06</code>).</li> <li><code>GSTABL</code>: General table file (256 bytes, keyed by table type <code>CNTRPF</code> for freight G/L).</li> <li><code>BICONT</code>: Billing control file (256 bytes, keyed by company for default freight G/L).</li> <li><code>GSCTUM</code>: Customer table file (64 bytes, keyed by company, product code, container code, unit of measure, per <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. The program does not call any external programs.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#summary","title":"Summary","text":"<p>The <code>AP1012.rpg</code> program creates A/P voucher detail lines in <code>APTRAN</code> by prorating freight charges (<code>FRTTOT</code>) across sales detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) or miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records. It calculates freight amounts based on gallons for detail records or miscellaneous amounts for misc records, ensuring the total matches <code>FRTTOT</code>. It retrieves freight G/L accounts from <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code>, applies discounts, and restricts records to within one year of the invoice date. The program handles invoices with only miscellaneous lines and writes detail lines with appropriate descriptions.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/","title":"AP125 OCL","text":"<p>The provided OCL (Operation Control Language) script, <code>AP125.ocl36.txt</code>, is part of an IBM AS/400 (iSeries) system and appears to be related to Accounts Payable (A/P) voucher transaction processing. It is called from another OCL script that sets up voucher entry tables. Below, I will explain the process steps of this OCL program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script performs a series of steps to prepare and process Accounts Payable voucher transactions. Here's a breakdown of the steps based on the script:</p> <ol> <li>Invoice Type Selection:</li> <li> <p>The script starts with a comment indicating <code>AP ARGLMS OR PAPER</code> and a parameter <code>?8?</code> for selecting the invoice type (<code>N</code> or <code>P</code>). This suggests the script supports different processing modes for invoices <code>P</code> = PAPER FREIGHT manual entry, <code>N</code> = ARGLMS invoices coming from a different legacy application.</p> </li> <li> <p>File Creation/Verification:</p> </li> <li>The script checks for the existence of specific files using <code>IFF</code> (If) conditions:<ul> <li><code>DATAF1-?9??20?</code>: Verifies if the file <code>?9??20?</code> exists. If it does, it builds a file (<code>BLDFILE</code>) with specific attributes (500 records, 404 bytes per record, etc.).</li> <li><code>DATAF1-?9?APTX?WS?</code>: If this file exists, it builds an index (<code>BLDINDEX</code>) for it with specific key fields and attributes.</li> <li><code>DATAF1-?9?LMS?WS?</code>: If this file exists, it builds another file with similar attributes.</li> </ul> </li> <li> <p>These steps ensure that necessary temporary or work files (<code>?9??20?</code>, <code>?9?APTX?WS?</code>, <code>?9?LMS?WS?</code>) are created or validated before proceeding.</p> </li> <li> <p>Override Database Files (OVRDBF):</p> </li> <li>The script uses multiple <code>OVRDBF</code> commands to override the default file definitions, specifying the library (<code>*LIBL/?9?</code>) and member (<code>*FIRST</code>) for various files. This ensures the program uses the correct files from the specified library. The files overridden include:<ul> <li><code>APCONT</code>, <code>GSTABL</code>, <code>FRCINH</code>, <code>FRCFBH</code>, <code>FRCINH4</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APVENY</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>GSCTUM</code>, <code>APDATE</code>, <code>BICONT</code>, <code>APTRAN</code>.</li> </ul> </li> <li> <p>These overrides are critical to ensure the correct data files are accessed during processing.</p> </li> <li> <p>Call External Program (AP125P):</p> </li> <li>The script calls an external program named <code>AP125P</code> with parameters:<ul> <li><code>'10'</code>: Likely a mode or control parameter.</li> <li><code>'?8?'</code>: The invoice type (<code>N</code> or <code>P</code>).</li> <li><code>'MNT'</code>: Indicates maintenance mode (possibly for voucher entry or editing).</li> <li><code>'?9?'</code>: A library or file prefix (dynamic substitution variable).</li> </ul> </li> <li> <p>This program (<code>AP125P</code>) likely performs the core logic for voucher transaction processing, such as editing or validating transactions.</p> </li> <li> <p>Conditional File Deletion and Creation:</p> </li> <li>The commented-out <code>GSDELETE APCT?WS?</code> suggests a potential step to delete an existing work file (not executed in this script).</li> <li>A commented-out <code>BLDFILE ?9?APCT?WS?</code> indicates a step to create a temporary file with 500 records and 80 bytes per record (not executed).</li> <li> <p>A <code>LOCAL OFFSET-221,DATA-'?9??20?'</code> command suggests setting a local variable or data area with the file name <code>?9??20?</code>.</p> </li> <li> <p>Conditional Exit:</p> </li> <li> <p>The <code>IFF DATAF1-?9??20? GOTO END</code> checks if the file <code>?9??20?</code> exists. If it does not, the script jumps to the <code>END</code> tag, bypassing the subsequent steps.</p> </li> <li> <p>Voucher Transaction Edit (AP110):</p> </li> <li>If the file <code>?9??20?</code> exists, the script proceeds to the <code>LOAD AP110</code> section, which is responsible for A/P voucher transaction editing.</li> <li>File Definitions:<ul> <li>The script defines multiple files with their labels and attributes (e.g., <code>DISP-SHR</code> for shared access, <code>EXTEND-100</code> for extending file size). The files include:</li> <li><code>APTRAN</code> (labeled <code>?9??20?</code>): Likely the main transaction file.</li> <li><code>APCONT</code>, <code>APCHKR</code>, <code>APCHKT</code> (labeled <code>?9?APCT?WS?</code>), <code>APTRNX</code> (labeled <code>?9?APTX?WS?</code>), <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>GSTABL</code>, <code>APSTAT</code>, <code>APVEND</code>, <code>INFIL1</code>, <code>INTZH1</code>.</li> </ul> </li> <li>Printer Overrides:<ul> <li>If the condition <code>?9?/G</code> is true, the script overrides the printer file <code>APLIST</code> to output to <code>QUSRSYS/APEDIT</code>.</li> <li>If <code>?9?/G</code> is false, it overrides <code>APLIST</code> to output to <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Execution:</p> <ul> <li>The <code>RUN</code> command executes the <code>AP110</code> program, which performs the voucher transaction edit, likely validating or processing transactions and generating a report.</li> </ul> </li> <li> <p>End of Script:</p> </li> <li>The <code>TAG END</code> marks the end of the script, where processing terminates if the earlier <code>GOTO END</code> condition is met.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external programs: 1. AP125P:    - Called with parameters: <code>'10'</code>, <code>'?8?'</code>, <code>'MNT'</code>, <code>'?9?'</code>.    - Likely responsible for the main processing of voucher transactions (e.g., data entry, validation, or updates). 2. AP110:    - Loaded in the voucher transaction edit section.    - Handles the editing or validation of A/P voucher transactions and possibly generates a report.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script references the following files (tables) for processing:</p> <ol> <li>From OVRDBF Commands:</li> <li><code>APCONT</code>: Accounts Payable control file.</li> <li><code>GSTABL</code>: General system table.</li> <li><code>FRCINH</code>, <code>FRCFBH</code>, <code>FRCINH4</code>: Likely related to financial or reconciliation data.</li> <li><code>GLMAST</code>: General Ledger master file.</li> <li><code>APVEND</code>: Vendor master file.</li> <li><code>APVENY</code>: Additional vendor file (possibly for secondary vendor data).</li> <li><code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>: Likely related to specific application modules (e.g., financial or manufacturing).</li> <li><code>GSCTUM</code>: General system customer or control file.</li> <li><code>APDATE</code>: Accounts Payable date file.</li> <li><code>BICONT</code>: Possibly a billing or contract control file.</li> <li> <p><code>APTRAN</code>: Accounts Payable transaction file (labeled <code>?9??20?</code>).</p> </li> <li> <p>From AP110 Section:</p> </li> <li><code>APTRAN</code> (labeled <code>?9??20?</code>): Main transaction file.</li> <li><code>APCONT</code> ( labeled <code>?9?APCONT</code>): Control file.</li> <li><code>APCHKR</code>: Check register file.</li> <li><code>APCHKT</code> (labeled <code>?9?APCT?WS?</code>): Temporary check file.</li> <li><code>APTRNX</code> (labeled <code>?9?APTX?WS?</code>): Transaction index file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>): General Ledger master.</li> <li><code>APOPNHC</code>: Open invoice header file.</li> <li><code>APINVH</code>: Invoice header file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>): General system table.</li> <li><code>APSTAT</code>: Accounts Payable status file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>): Vendor master.</li> <li><code>INFIL1</code>, <code>INTZH1</code>: Additional files, possibly for interface or temporary data.</li> <li> <p><code>APLIST</code>: Printer file for output (report).</p> </li> <li> <p>Temporary/Work Files:</p> </li> <li><code>?9??20?</code>: Main transaction work file.</li> <li><code>?9?APTX?WS?</code>: Transaction index work file.</li> <li><code>?9?LMS?WS?</code>: Additional work file.</li> <li><code>?9?APCT?WS?</code>: Temporary check file.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#summary","title":"Summary","text":"<p>The <code>AP125.ocl36.txt</code> OCL script is designed to set up and process Accounts Payable voucher transactions. It performs the following high-level steps: 1. Validates or creates necessary work files. 2. Overrides database files to ensure correct file access. 3. Calls the <code>AP125P</code> program for core voucher processing. 4. If the main transaction file exists, it loads the <code>AP110</code> program to edit or validate transactions and generate reports. 5. Uses printer overrides to direct output to specific queues.</p> <p>External Programs: - <code>AP125P</code> - <code>AP110</code></p> <p>Tables/Files: - Core files: <code>APCONT</code>, <code>GSTABL</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APVENY</code>, <code>APDATE</code>, <code>APTRAN</code>, etc. - Temporary/work files: <code>?9??20?</code>, <code>?9?APTX?WS?</code>, <code>?9?LMS?WS?</code>, <code>?9?APCT?WS?</code>. - Printer file: <code>APLIST</code>.</p> <p>This script is tightly integrated with the AS/400 environment, relying on dynamic file naming (via <code>?9?</code> and <code>?8?</code>) and external RPG programs to handle the business logic. If you need further clarification or details about specific files or programs, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/","title":"AP125 RPGLE","text":"<p>The <code>AP125.rpg</code> program is an RPG III program running on an IBM AS/400 (iSeries) system, designed to create voucher transactions from freight invoice data, likely called from the <code>AP125.ocl36.txt</code> OCL script after the <code>AP125P</code> program has selected invoices for batch processing. It processes freight invoice headers (<code>FRCINH</code> or <code>FRCFBH</code>) to generate accounts payable transactions in the <code>APTRAN</code> file, including header and detail records. Below, I will detail the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#process-steps-of-the-ap125-program","title":"Process Steps of the AP125 Program","text":"<p>The program is structured to process freight invoices, validate data, calculate due dates, and create or update accounts payable transactions. The main process steps are:</p> <ol> <li>Initialization:</li> <li>Parameters: Receives input parameters:<ul> <li><code>CO</code>: Company code (2 digits).</li> <li><code>CAID</code>: Carrier ID (6 characters).</li> <li><code>CAIN</code>: Invoice number (25 characters).</li> <li><code>RCD</code>: Record type (<code>FRCFBHP4</code> for freight billed balance header, otherwise <code>FRCINHP4</code>, per revision <code>JB06</code>).</li> <li><code>RDNO</code>: Reference number (numeric, defined like <code>FRRDNO</code>).</li> </ul> </li> <li>Initializes fields and indicators, setting indicators 81-83, 50-53, 60-69, and 51-62 to off.</li> <li> <p>Sets up key fields for file access (e.g., <code>TERMKY</code> for <code>APTERM</code>, <code>BBCAKY</code> for <code>BBCAID</code>).</p> </li> <li> <p>Subroutine S1 (Main Processing):</p> </li> <li>Validate Company: Chains to <code>APCONT</code> using <code>CO</code> to retrieve company details (e.g., <code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACRTGL</code>, <code>ACNXTE</code>). If not found, sets indicator 50.</li> <li>Retrieve Invoice Data:<ul> <li>Constructs a key (<code>FRCKEY</code> or <code>FRCK39</code>) using <code>CO</code>, <code>CAID</code>, <code>CAIN</code>, and <code>RDNO</code> (for <code>FRCFBH</code>).</li> <li>Chains to <code>FRCINH</code> (if <code>RCD \u2260 'FRCFBHP4'</code>) or <code>FRCFBH</code> (if <code>RCD = 'FRCFBHP4'</code>, per <code>JB06</code>) to retrieve invoice details.</li> <li>If found, populates transaction fields:</li> <li><code>ATINV#</code>: Invoice number (<code>FRCAIN</code>).</li> <li><code>INTY</code>: Invoice type (<code>FRINTY</code>).</li> <li><code>ATINDT</code>/<code>INDT</code>: Invoice date (<code>FRIYMD</code> converted to MMDDYY).</li> <li><code>ATIAMT</code>/<code>IAMT</code>/<code>ATFRTL</code>/<code>FRTL</code>: Invoice amount (<code>FRINAM - FRFBOA</code>, per <code>JB06</code>).</li> <li><code>ATSORN</code>/<code>SORN</code>: Sales order number (<code>FRRDNO</code>).</li> <li><code>ATSSRN</code>/<code>SSRN</code>: Sales sequence number (<code>FRSRN</code>).</li> <li>Sets indicators 51 (<code>INTY = 'P'</code>) or 52 (<code>INTY = 'O'</code>) for invoice description.</li> </ul> </li> <li>Generate Entry Number:<ul> <li>If <code>ENT#</code> is zero, sets <code>RECSTS = 'ADDNEW'</code>, retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code>, increments it, and updates <code>APCONT</code>.</li> <li>Ensures <code>ENT#</code> does not exceed 99999, adjusting <code>ACNXTE</code> accordingly.</li> </ul> </li> <li>Retrieve Vendor Information:<ul> <li>Chains to <code>APVENY</code> using <code>CO</code> and <code>CAID</code> to get the vendor number (<code>VYVEND</code>).</li> <li>Chains to <code>APVEND</code> using <code>CO</code> and <code>VEND</code> to retrieve vendor details (<code>VNVNAM</code>, <code>VNAD1</code>, <code>VNAD2</code>, <code>VNAD3</code>, <code>VNAD4</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNTERM</code>, <code>VNEXGL</code>).</li> <li>Sets hold description (<code>HLDD</code>) based on <code>VNHOLD</code> (per <code>JB02</code> and <code>MG18</code>):</li> <li><code>H</code>: \"VENDOR ON HOLD\" (COM,01).</li> <li><code>A</code>: \"ON HOLD FOR ACH\" (COM,02).</li> <li><code>W</code>: \"ON HOLD FOR WIRE TRANSFER\" (COM,03).</li> <li><code>U</code>: \"ON HOLD FOR UTILITY AUTO-PAYMENT\" (COM,04).</li> </ul> </li> <li> <p>Output: Writes or updates the transaction header in <code>APTRAN</code> via the <code>EXCPT</code> operation.</p> </li> <li> <p>Subroutine S2 (Header Processing and Detail Setup):</p> </li> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (constructed from <code>COENT</code> and \"000\") to check for an existing header.</li> <li>If not found, populates header fields from <code>APCONT</code> (<code>APGL</code>, <code>BKGL</code>, <code>RTGL</code>) and vendor data.</li> <li>Calls <code>S2EDIT</code> to validate header fields.</li> <li>Calls <code>HDRADD</code> to write/update the transaction header.</li> <li>Calls <code>ROLFWD</code> to initiate detail line processing.</li> <li> <p>Sets indicator 81 to trigger further processing.</p> </li> <li> <p>Subroutine S2EDIT (Header Validation):</p> </li> <li>Validate Invoice Date:<ul> <li>Moves <code>INDT</code> to <code>MMDDYY</code> and calls <code>DTEDIT</code> to validate the date.</li> </ul> </li> <li>Calculate Due Date:<ul> <li>If <code>DUDT</code> is zero and <code>VEND</code> is non-zero, calls <code>CLCDUE</code> to calculate the due date based on vendor terms (<code>VNTERM</code>).</li> <li>Otherwise, sets <code>DUDT = INDT</code>.</li> </ul> </li> <li>Validate Due Date:<ul> <li>Converts <code>DUDT</code> to <code>MMDDYY</code> and validates via <code>DTEDIT</code>.</li> <li>Adjusts for century (<code>Y2KCEN</code>) to create <code>INDT8</code> and <code>DUDT8</code> (8-digit dates).</li> <li>Checks <code>APDATE</code> (per <code>MG17</code>) to replace <code>DUDT8</code> with a non-holiday/non-weekend date (<code>ADNED8</code>).</li> </ul> </li> <li> <p>Validate G/L Accounts:</p> <ul> <li>Chains to <code>GLMAST</code> to validate <code>APGL</code>, <code>BKGL</code>, and <code>RTGL</code>, retrieving descriptions (<code>APGLNM</code>, <code>BKGLNM</code>, <code>RTGLNM</code>). Sets indicators 61, 62, or 63 if invalid.</li> </ul> </li> <li> <p>Subroutine CLCDUE (Calculate Due Date):</p> </li> <li>If <code>VNTERM</code> is non-zero, chains to <code>GSTABL</code> (table <code>APTERM</code>) to retrieve terms (<code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>, <code>TBDISD</code>).</li> <li>If valid, retrieves discount percentage (<code>TBDISC</code> to <code>SVDSPC</code>, per <code>MG03</code>).</li> <li> <p>Calls <code>TMDATN</code> (net days) or <code>TMDATP</code> (prox days) to calculate <code>DUDT</code>.</p> </li> <li> <p>Subroutine TMDATN (Net Days Calculation):</p> </li> <li>Converts <code>INDT</code> to Julian format (<code>G$JD</code>) via <code>@DTE1</code>.</li> <li>Adds net days (<code>TBNETD</code>) to <code>G$JD</code>.</li> <li> <p>Converts back to Gregorian format (<code>$MDY</code>) via <code>@DTE2</code> to set <code>DUDT</code>.</p> </li> <li> <p>Subroutine TMDATP (Prox Days Calculation):</p> </li> <li> <p>Adjusts <code>INDT</code> by incrementing the month (and year if December) and sets the day to <code>TBPRXD</code> to calculate <code>DUDT</code>.</p> </li> <li> <p>Subroutine DTEDIT (Date Validation):</p> </li> <li>Validates <code>MMDDYY</code> by breaking it into month, day, and year.</li> <li>Checks:<ul> <li>Month (1-12).</li> <li>Day (1-31, or 1-28/29 for February, accounting for leap years).</li> </ul> </li> <li> <p>Sets indicator 99 if invalid.</p> </li> <li> <p>Subroutine @DTE1 (Gregorian to Julian Conversion):</p> </li> <li>Converts a Gregorian date (<code>$MDY</code>, <code>$CN</code>) to Julian days (<code>G$JD</code>) for dates between March 1, 1900, and February 28, 2100.</li> <li> <p>Calculates the day of the week (<code>G$JW</code>).</p> </li> <li> <p>Subroutine @DTE2 (Julian to Gregorian Conversion):</p> <ul> <li>Converts a Julian date (<code>G$JD</code>) back to Gregorian format (<code>$MDY</code>, <code>$CN</code>).</li> </ul> </li> <li> <p>Subroutine ROLFWD (Detail Line Processing):</p> <ul> <li>If <code>SORN</code> and <code>SSRN</code> are non-zero and <code>RECSTS = 'ADDNEW'</code>, populates a <code>SALES</code> data structure with <code>CO</code>, <code>SORN</code>, <code>SSRN</code>, <code>ENT#</code>, <code>VEND</code>, <code>FRTL</code>, <code>SVDSPC</code>, and <code>CMPDT8</code> (invoice date minus one year, per <code>JB05</code>).</li> <li>Calls <code>AP1012</code> to populate freight detail lines with calculated percentage amounts.</li> <li>Resets <code>RECSTS</code> and sets <code>KEYENT</code> to \"001\" for the first detail line.</li> </ul> </li> <li> <p>Subroutine S3 (Detail Line Processing):</p> <ul> <li>If <code>FRTL</code> and <code>PRAM</code> are non-zero, calculates the freight amount (<code>FRAM = PRAM * FRTL</code>) and adds it to <code>HOLDAM</code> and <code>SVTTL</code>.</li> <li>Adjusts <code>FRAM</code> if <code>IAMT &gt; SVTTL</code> to balance the invoice amount.</li> <li>Combines <code>PRAM</code> and <code>FRAM</code> to set <code>AMT</code>.</li> <li>If <code>AMT</code> is zero, clears the header (<code>HDRCLR</code>) and exits.</li> <li>Calls <code>S3EDIT</code> to validate detail fields.</li> <li>Calls <code>DETADD</code> to write the detail line.</li> <li>Calls <code>DETCLR</code> to clear detail fields.</li> <li>Calls <code>ROLFWD</code> to process additional lines.</li> <li>Updates <code>FRCINH</code> or <code>FRCFBH</code> (setting <code>FRAPST = 'Y'</code>) based on <code>RCD</code>.</li> <li>Writes the updated record via <code>EXCPT</code> (<code>APINST</code> for <code>FRCINH</code>, <code>APINSF</code> for <code>FRCFBH</code>).</li> </ul> </li> <li> <p>Subroutine S3EDIT (Detail Validation):</p> <ul> <li>Sets default expense G/L (<code>EXGL</code>) from <code>VNEXGL</code> if not specified.</li> <li>Chains to <code>GLMAST</code> to validate <code>EXGL</code>, setting indicator 50 if invalid.</li> </ul> </li> <li> <p>Subroutine HDRADD (Add/Update Header):</p> <ul> <li>Chains to <code>APTRAN</code> and writes/updates the header record using <code>EXCPT</code>.</li> </ul> </li> <li> <p>Subroutine DETADD (Add Detail Line):</p> <ul> <li>Writes the detail line to <code>APTRAN</code> using <code>EXCPT</code>.</li> </ul> </li> <li> <p>Subroutine HDRCLR (Clear Header Fields):</p> <ul> <li>Clears header fields (e.g., <code>SVAPGL</code>, <code>SVBKGL</code>, <code>HDEL</code>, <code>ENT#</code>, <code>VNAM</code>, etc.).</li> </ul> </li> <li> <p>Subroutine DETCLR (Clear Detail Fields):</p> <ul> <li>Clears detail fields (e.g., <code>SVLNGL</code>, <code>SVLNCO</code>, <code>DDEL</code>, <code>AMT</code>, <code>DISC</code>, etc.).</li> </ul> </li> <li> <p>Subroutine ROLLBK (Rollback Processing):</p> <ul> <li>Rolls back detail lines by decrementing <code>NXLINE</code> and chaining to <code>APTRAN</code>.</li> <li>If a header is reached, calls <code>S2EDIT</code> to validate and sets indicator 82.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Sets <code>*INLR = *ON</code> to end the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Invoice Processing:</li> <li>Processes invoices from <code>FRCINH</code> or <code>FRCFBH</code> based on <code>RCD</code> (<code>FRCFBHP4</code> for freight billed balance, per <code>JB06</code>).</li> <li> <p>Adjusts invoice amount (<code>ATIAMT = FRINAM - FRFBOA</code>, per <code>JB06</code>) to account for freight balancing order override total.</p> </li> <li> <p>Hold Status:</p> </li> <li>Supports hold codes (<code>VNHOLD</code>): <code>H</code> (hold), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>U</code> (utility auto-payment, per <code>MG18</code>).</li> <li> <p>Assigns corresponding descriptions to <code>HLDD</code> (per <code>JB02</code>, <code>MG18</code>).</p> </li> <li> <p>Due Date Calculation:</p> </li> <li>Calculates due date (<code>DUDT</code>) based on vendor terms (<code>VNTERM</code>) using net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) from <code>GSTABL</code>.</li> <li>Adjusts due date to avoid holidays/weekends using <code>APDATE</code> (<code>ADNED8</code>, per <code>MG17</code>).</li> <li> <p>Defaults to invoice date (<code>INDT</code>) if no terms are specified.</p> </li> <li> <p>Discount Handling:</p> </li> <li> <p>Retrieves discount percentage (<code>TBDISC</code>) from <code>GSTABL</code> and applies it to <code>SVDSPC</code> (per <code>MG03</code>).</p> </li> <li> <p>Date Validation:</p> </li> <li>Validates invoice and due dates for valid months, days, and leap years.</li> <li> <p>Handles century adjustments for Y2K compliance.</p> </li> <li> <p>G/L Account Validation:</p> </li> <li> <p>Validates accounts payable (<code>APGL</code>), bank (<code>BKGL</code>), and retention (<code>RTGL</code>) G/L accounts against <code>GLMAST</code>.</p> </li> <li> <p>Detail Line Calculation:</p> </li> <li>Calculates freight amount (<code>FRAM</code>) as a proportion of <code>PRAM</code> and <code>FRTL</code>.</li> <li> <p>Ensures total line amount (<code>AMT = PRAM + FRAM</code>) aligns with the invoice amount (<code>IAMT</code>).</p> </li> <li> <p>Freight Detail Lines:</p> </li> <li> <p>Calls <code>AP1012</code> to populate detail lines with calculated freight percentages, using sales order (<code>SORN</code>), sequence number (<code>SSRN</code>), and invoice date minus one year (<code>CMPDT8</code>, per <code>JB05</code>).</p> </li> <li> <p>Transaction Creation:</p> </li> <li>Creates header and detail records in <code>APTRAN</code> with vendor, G/L, and freight details.</li> <li>Updates <code>FRCINH</code> or <code>FRCFBH</code> to mark invoices as processed (<code>FRAPST = 'Y'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Update Files:</li> <li><code>APTRAN</code>: Accounts Payable transaction file (header and detail records, 404 bytes, keyed by company and entry number).</li> <li><code>APCONT</code>: Accounts Payable control file (256 bytes, keyed by company).</li> <li><code>FRCINH</code>: Freight Invoice Header (206 bytes, keyed by company, carrier ID, invoice number).</li> <li> <p><code>FRCFBH</code>: Freight Billed Balance Header (206 bytes, keyed by company, carrier ID, invoice number, reference number, per <code>JB06</code>).</p> </li> <li> <p>Input Files:</p> </li> <li><code>APVEND</code>: Vendor master file (579 bytes, keyed by company and vendor number).</li> <li><code>APVENY</code>: Vendor cross-reference file (320 bytes, keyed by company and carrier ID).</li> <li><code>GLMAST</code>: General Ledger master file (256 bytes, keyed by company and G/L account).</li> <li><code>GSTABL</code>: General table file (256 bytes, keyed by table type <code>APTERM</code> for terms).</li> <li><code>APDATE</code>: Due date adjustment file (19 bytes, keyed by company and due date, per <code>MG17</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP1012:</li> <li>Called in <code>ROLFWD</code> to populate freight detail lines with calculated percentage amounts, passing the <code>SALES</code> data structure.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP125.rpg</code> program processes freight invoices from <code>FRCINH</code> or <code>FRCFBH</code> to create accounts payable transactions in <code>APTRAN</code>. It validates company, vendor, and G/L data, calculates due dates (adjusted for holidays/weekends), applies discounts, and generates header and detail records. The program handles freight balancing adjustments, hold statuses, and detail line calculations via <code>AP1012</code>. It ensures data integrity through extensive validation and updates the source invoice records upon completion.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/","title":"AP125P RPGLE","text":"<p>The <code>AP125P.rpgle</code> program is an RPGLE program running on an IBM AS/400 (iSeries) system, designed for \"Freight Invoice Import Selection\" as part of an Accounts Payable (A/P) process. It is called from the <code>AP125.ocl36.txt</code> OCL script and facilitates the selection and management of freight invoices for batch processing. Below, I will explain the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#process-steps-of-the-ap125p-program","title":"Process Steps of the AP125P Program","text":"<p>The program is structured to manage a subfile (SFL) interface for selecting freight invoices, allowing users to add or remove invoices from a batch, validate inputs, and create batches for further processing. The main process steps are:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>a$co</code>: Company code (2 digits).</li> <li><code>p$inty</code>: Invoice type filter (<code>P</code> for paper, <code>N</code> for non-paper).</li> <li><code>p$mode</code>: Run mode (<code>MNT</code> for maintenance, otherwise inquiry).</li> <li><code>p$fgrp</code>: File group (<code>G</code> or <code>Z</code>, determining which library files to use).</li> </ul> </li> <li>Initializes work fields, subfile control fields (e.g., <code>rrn1</code>, <code>pagsz1</code>), and key lists for file access.</li> <li> <p>Sets up message handling and default headers/comments.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Overrides database files based on the <code>p$fgrp</code> parameter (<code>G</code> or <code>Z</code>) using <code>QCMDEXC</code> to execute override commands (e.g., <code>ovrdbf</code> for <code>apcont</code>, <code>frbinh</code>, etc.).</li> <li> <p>Opens input files (<code>apcont</code>, <code>frbinh</code>, <code>frcinh</code>, <code>frcfbh</code>, <code>bbcaid</code>, <code>frcinhj4</code>) and the add/update file (<code>ap125pw</code>).</p> </li> <li> <p>Create or Clear Work File (<code>crtwrkf</code> Subroutine):</p> </li> <li>Calls the external program <code>AP125PC</code> to create or clear the work file <code>ap125pw</code>.</li> <li>Overrides the <code>ap125pw</code> file to <code>qtemp/ap125pw</code> with <code>share(*no)</code>.</li> <li> <p>Opens the <code>ap125pw</code> file for add/update operations.</p> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Clears any existing messages (<code>clrmsg</code>) and writes initial messages (<code>wrtmsg</code>).</li> <li>Initialize Subfile: Sets the subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>) and initializes control fields (e.g., <code>c1co</code> from <code>a$co</code>, <code>c1mode</code> to <code>All</code>).</li> <li>Global Protection: Sets <code>*in70</code> based on <code>p$mode</code> (<code>*off</code> for <code>MNT</code>, <code>*on</code> for inquiry mode, protecting fields in inquiry mode).</li> <li>Position File: Calls <code>sf1rep</code> to position the file and load the subfile.</li> <li> <p>Main Loop:</p> <ul> <li>Displays the subfile control (<code>sflctl1</code>) and command line (<code>sflcmd1</code>).</li> <li>Checks for subfile records to enable display (<code>*in41</code>).</li> <li>Handles user inputs (function keys and Enter):</li> <li>F03 (Exit): Checks for pending selections in <code>ap125pw</code>. If present, displays a confirmation window (<code>f03wdw</code>) via <code>sf1f03</code>. Exits if confirmed.</li> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting (e.g., for <code>c1caid</code> using <code>LBBCAID</code>).</li> <li>F05 (All/Review Toggle): Toggles between <code>All</code> and <code>Review</code> modes, updating <code>c1mode</code> and repositioning the subfile.</li> <li>F06 (Create Batch and Exit): Displays a confirmation window (<code>f06wdw</code>) via <code>sf1crtbat</code> and creates a batch by calling <code>crtbat</code>.</li> <li>F22 (Add All): Adds all displayed invoices to the batch via <code>sf1prcall</code>.</li> <li>F23 (Remove All): Removes all displayed invoices from the batch via <code>sf1prcall</code>.</li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li>Enter: Processes subfile changes (<code>sf1prc</code>).</li> <li>Positioning: Repositions the subfile if <code>c1caid</code>, <code>c1fmdy</code>, or <code>c1tmdy</code> change (<code>sf1rep</code>).</li> <li>F10: Moves the cursor to the control record.</li> </ul> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes options (<code>sf1chg</code>).</li> <li>Handles options:<ul> <li>Option 1 (Add): Adds the invoice to the batch (<code>sf1s01</code>) if in <code>MNT</code> mode.</li> <li>Option 4 (Remove): Removes the invoice from the batch (<code>sf1s04</code>) if in <code>MNT</code> mode.</li> </ul> </li> <li> <p>Updates subfile fields and colors (<code>sf1fmt</code>, <code>sf1col</code>) and writes the updated record.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Validates control fields (<code>sf1cte</code>) and positions the file (<code>frcinhj4</code>) using <code>setll</code>.</li> <li> <p>Loads subfile records (<code>sf1lod</code>) and retains control field values for repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li>Validates:<ul> <li>Company (<code>c1co</code>): Chains to <code>apcont</code> to verify the company code and retrieve the company name (<code>c1conm</code>).</li> <li>Carrier ID (<code>c1caid</code>): Chains to <code>bbcaid</code> to verify the carrier ID and retrieve the carrier name (<code>c1crnm</code>). If blank, sets to <code>*All</code>.</li> <li>From/To Invoice Dates (<code>c1fmdy</code>, <code>c1tmdy</code>): Calls <code>GSDTEDIT</code> to validate dates and convert to <code>c1fdat</code>/<code>c1tdat</code>. Errors trigger messages (<code>ERR0020</code>).</li> </ul> </li> <li> <p>Adds error messages to the message subfile if validation fails.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Reads records from <code>frcinhj4</code> (replacing <code>frcinh4</code>) for the specified company (<code>c1co</code>).</li> <li>Retrieves the order ship date (<code>boshd8</code>) from <code>frbinh</code> (replacing invoice date per revision <code>dc01</code>).</li> <li>Applies filters (<code>sf1fltr</code>) and skips records that don\u2019t match criteria.</li> <li>Formats (<code>sf1fmt</code>) and color-codes (<code>sf1col</code>) subfile lines, then writes them to the subfile.</li> <li> <p>Sets <code>s1nosflrecs</code> if no records are found.</p> </li> <li> <p>Apply Filters (<code>sf1fltr</code> Subroutine):</p> </li> <li>Filters records based on:<ul> <li>Approval status (<code>fralst \u2260 'Y'</code> or <code>frapst \u2260 'N'</code>).</li> <li>Invoice type (<code>frinty</code> must match <code>p$inty</code>).</li> <li>Non-zero invoice amount (<code>s1inam \u2260 0</code>, per revision <code>jb03</code>).</li> <li>Carrier ID (<code>c1caid</code> must match <code>frcaid</code> if specified).</li> </ul> </li> <li> <p>Sets <code>s1fltr</code> to <code>*on</code> to skip records that fail filters.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> <ul> <li>Populates subfile fields (<code>s1caid</code>, <code>s1cain</code>, <code>s1inty</code>, <code>s1rdno</code>, <code>s1srn</code>, <code>s1inam</code>, <code>s1smdy</code>) from <code>frcinhj4</code> or <code>frbinh</code>.</li> <li>Adjusts invoice amount (<code>s1inam = frinam - frfboa</code>, per revision <code>jb02</code>).</li> <li>Checks if the record is already in <code>ap125pw</code> and sets <code>s1flag</code> to <code>'*'</code> if present.</li> </ul> </li> <li> <p>Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Placeholder for color-coding subfile records (currently empty but reserved for visual indicators).</li> </ul> </li> <li> <p>Add Invoice to Batch (<code>sf1s01</code> Subroutine):</p> <ul> <li>Chains to <code>ap125pw</code> to check if the record exists.</li> <li>If not, writes a new record with company, carrier ID, invoice number, record type (<code>s1rcd</code>), and reference number (<code>s1rdno</code>).</li> <li>Updates the total invoice amount (<code>c1inam</code>).</li> </ul> </li> <li> <p>Remove Invoice from Batch (<code>sf1s04</code> Subroutine):</p> <ul> <li>Chains to <code>ap125pw</code> to locate the record.</li> <li>If found, deletes it and subtracts the invoice amount from <code>c1inam</code>.</li> </ul> </li> <li> <p>Process All Records (<code>sf1prcall</code> and <code>sf1prcall2</code> Subroutines):</p> <ul> <li>Displays a window (<code>addwdw</code> for adding, <code>rmvwdw</code> for removing) and processes all displayed records.</li> <li>Iterates through <code>frcinhj4</code>, applies filters, and calls <code>sf1s01</code> (add) or <code>sf1s04</code> (remove) based on <code>w$add</code>.</li> </ul> </li> <li> <p>Create Batch (<code>crtbat</code> Subroutine):</p> <ul> <li>Reads <code>ap125pw</code> records and chains to <code>frcinh</code> or <code>frcfbh</code> based on <code>w1rcd</code>.</li> <li>For approved (<code>fralst = 'Y'</code>, <code>frapst = 'N'</code>) records, calls <code>AP125</code> with parameters (<code>o$co</code>, <code>o$caid</code>, <code>o$cain</code>, <code>o$rcd</code>, <code>o$rdno</code>) to create the batch.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>For the <code>C1CAID</code> field, calls <code>LBBCAID</code> to prompt for a carrier ID, passing <code>c1co</code>, <code>c1caid</code>, and <code>p$fgrp</code>.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li><code>addmsg</code>: Sends error messages (e.g., <code>ERR0010</code>, <code>ERR0020</code>) to the program message queue using <code>QMHSNDPM</code>.</li> <li><code>wrtmsg</code>: Displays the message subfile (<code>msgctl</code>).</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files and sets <code>*inlr = *on</code> to end the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Invoice Filtering:    - Only approved invoices (<code>fralst = 'Y'</code>, <code>frapst = 'N'</code>) are eligible for selection.    - Invoices must match the specified invoice type (<code>p$inty</code>, <code>P</code> or <code>N</code>).    - Invoices with zero amounts are excluded (revision <code>jb03</code>).    - Carrier ID (<code>c1caid</code>) must match if specified, otherwise all carriers are included.</p> <ol> <li>Invoice Amount Adjustment:</li> <li> <p>The displayed invoice amount (<code>s1inam</code>) is calculated as <code>frinam - frfboa</code> (Freight Balancing Order Override Total, revision <code>jb02</code>).</p> </li> <li> <p>Date Usage:</p> </li> <li> <p>Uses the order ship date (<code>boshd8</code> from <code>frbinh</code>) instead of the invoice date (<code>frindt</code>, revision <code>dc01</code>) for filtering and display.</p> </li> <li> <p>Batch Processing:</p> </li> <li>Invoices are added to or removed from <code>ap125pw</code> based on user selections (options 1 or 4, or F22/F23).</li> <li> <p>Batch creation (<code>crtbat</code>) only processes approved invoices with valid status codes.</p> </li> <li> <p>Mode-Based Access:</p> </li> <li>In <code>MNT</code> mode, users can add/remove invoices and create batches.</li> <li> <p>In inquiry mode, fields are protected (<code>*in70 = *on</code>), preventing modifications.</p> </li> <li> <p>Validation:</p> </li> <li>Company code (<code>c1co</code>) must exist in <code>apcont</code>.</li> <li>Carrier ID (<code>c1caid</code>) must exist in <code>bbcaid</code> (revision <code>jk01</code>).</li> <li> <p>Dates (<code>c1fmdy</code>, <code>c1tmdy</code>) must be valid, checked via <code>GSDTEDIT</code>.</p> </li> <li> <p>Subfile Behavior:</p> </li> <li>Supports <code>All</code> (all eligible invoices) and <code>Review</code> (only invoices in <code>ap125pw</code>) modes.</li> <li>Displays a \"No Records Found\" message if no invoices meet the criteria.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Display File:</li> <li> <p><code>ap125pd</code>: Display file with subfile <code>sfl1</code>, used for the user interface.</p> </li> <li> <p>Input Files:</p> </li> <li><code>apcont</code>: Accounts Payable control file (company data).</li> <li><code>frbinh</code>: Freight Out Balancing Customer Invoice Header (for order ship date).</li> <li><code>frcinh</code>: Freight Invoice Header.</li> <li><code>frcfbh</code>: Freight Billed Balance Header (revision <code>jb02</code>).</li> <li><code>bbcaid</code>: Carrier ID table (replacing <code>gstabl</code>, revision <code>jk01</code>).</li> <li> <p><code>frcinhj4</code>: Multi-file logical file combining <code>frcinh</code> and <code>frcfbh</code> (replacing <code>frcinh4</code>, revision <code>jb02</code>).</p> </li> <li> <p>Add/Update File:</p> </li> <li><code>ap125pw</code>: Work file in <code>qtemp</code> for storing selected invoices.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP125PC:</li> <li> <p>Called in <code>crtwrkf</code> to create or clear the <code>ap125pw</code> work file.</p> </li> <li> <p>GSDTEDIT:</p> </li> <li> <p>Called in <code>sf1cte</code> to validate and convert dates (<code>c1fmdy</code>, <code>c1tmdy</code>).</p> </li> <li> <p>AP125:</p> </li> <li> <p>Called in <code>crtbat</code> to create the invoice batch, passing company, carrier ID, invoice number, record type, and reference number.</p> </li> <li> <p>LBBCAID:</p> </li> <li> <p>Called in <code>prompt</code> to provide carrier ID prompting, replacing <code>LGSTABL</code> (revision <code>jk01</code>).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute override commands (<code>ovrdbf</code>) in <code>opntbl</code> and <code>crtwrkf</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send error messages to the program message queue in <code>addmsg</code>.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear the message subfile in <code>clrmsg</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP125P</code> program is a user-interactive RPGLE program for selecting freight invoices for batch processing. It uses a subfile interface to display invoices from <code>frcinhj4</code>, allows users to add/remove invoices to/from <code>ap125pw</code>, and creates batches via <code>AP125</code>. Key features include filtering by approval status, invoice type, and non-zero amounts, using order ship dates, and supporting maintenance/inquiry modes. The program integrates with multiple files and external programs to validate data and manage the batch process.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/","title":"Summary AP1012","text":"<p>Below is a Functional Requirements Document (FRD) for the RPG programs <code>AP1011</code> and <code>AP1012</code>, which are designed to create Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details or miscellaneous freight amounts. Since both programs are intended to perform the same function with minor differences, this FRD consolidates the requirements for a single system, noting any variations where applicable. The document is structured to provide a clear, comprehensive description of the system's purpose, functionality, data requirements, and constraints.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#functional-requirements-document-ap-voucher-freight-allocation-system","title":"Functional Requirements Document: A/P Voucher Freight Allocation System","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#1-document-information","title":"1. Document Information","text":"<ul> <li>Document Title: Functional Requirements Document for A/P Voucher Freight Allocation System</li> <li>Document ID: FRD-AP1011-AP1012-001</li> <li>Version: 1.0</li> <li>Date: July 01, 2025</li> <li>Prepared By: Grok 3, xAI</li> <li>Purpose: To define the functional requirements for the A/P Voucher Freight Allocation System, implemented by RPG programs <code>AP1011</code> and <code>AP1012</code>, which prorate carrier freight costs across sales detail or miscellaneous lines for Accounts Payable voucher entry.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#2-system-overview","title":"2. System Overview","text":"<p>The A/P Voucher Freight Allocation System processes sales invoice data to allocate carrier freight costs across detail or miscellaneous lines based on net gallons or freight amounts, respectively. The system generates or updates A/P transaction records in the <code>APTRAN</code> file, ensuring accurate freight cost distribution and proper General Ledger (G/L) account assignment. The system supports both regular sales invoices (with detail lines) and miscellaneous-only invoices (without detail lines).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#21-objectives","title":"2.1 Objectives","text":"<ul> <li>Calculate total net gallons for freight allocation from sales detail records.</li> <li>Prorate freight costs across detail lines based on net gallons or miscellaneous lines based on freight amounts.</li> <li>Assign appropriate freight G/L accounts based on product codes or miscellaneous types.</li> <li>Create or update A/P transaction records with prorated freight amounts, discounts, and relevant details.</li> <li>Ensure data integrity by filtering records within one year of the invoice date.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#22-scope","title":"2.2 Scope","text":"<ul> <li>In-Scope:</li> <li>Processing sales detail records from <code>SA5FIUD</code> or <code>SA5MOUD</code> and miscellaneous records from <code>SA5FIUM</code> or <code>SA5MOUM</code>.</li> <li>Retrieving freight G/L accounts from <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code>.</li> <li>Writing or updating A/P transaction records in <code>APTRAN</code>.</li> <li>Handling discounts and ensuring total freight allocation matches the input freight amount.</li> <li>Out-of-Scope:</li> <li>Generation of sales invoices or modification of source data in <code>SA5FI*</code> or <code>SA5MO*</code> files.</li> <li>Validation of input parameters beyond what is provided in the <code>SALES</code> data structure.</li> <li>Integration with external systems beyond file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#3-functional-requirements","title":"3. Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#31-input-processing","title":"3.1 Input Processing","text":"<ul> <li>FR-001: The system shall accept input parameters via a <code>SALES</code> data structure with the following fields:</li> <li><code>SACO</code> (2 bytes): Company number.</li> <li><code>SAORD</code> (6 bytes): Order number.</li> <li><code>SASRN#</code> (3 bytes): Shipping reference number.</li> <li><code>SASEQ</code> (3 bytes): Sequence number.</li> <li><code>FRTTOT</code> (7,2): Total freight amount to allocate.</li> <li><code>VEND</code> (5 bytes): Vendor number.</li> <li><code>ENTNUM</code> (5 bytes): Entry number.</li> <li><code>EXGL</code> (8 bytes): Expense G/L number.</li> <li><code>DSPC</code> (4,3): Discount percentage.</li> <li><code>CMPDT8</code> (8 bytes): Comparison date (YYYYMMDD) for filtering records.</li> <li><code>S@FIMO</code> (1 byte): Table indicator (<code>F</code> for <code>SA5FI*</code>, <code>M</code> for <code>SA5MO*</code>).</li> <li><code>S@DM</code> (1 byte): Record type (<code>D</code> for detail, <code>M</code> for miscellaneous).</li> <li>FR-002: If <code>S@FIMO</code> is blank, the system shall determine the appropriate table (<code>SA5FI*</code> or <code>SA5MO*</code>) and record type (<code>D</code> or <code>M</code>) by searching for valid records in <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, or <code>SA5MOUM</code> matching <code>SACO</code>, <code>SAORD</code>, <code>SASRN#</code>, and <code>CMPDT8</code> (specific to <code>AP1012</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#32-data-retrieval-and-filtering","title":"3.2 Data Retrieval and Filtering","text":"<ul> <li>FR-003: The system shall read detail records from <code>SA5FIUD</code> (sales detail) or <code>SA5MOUD</code> (move detail) when <code>S@FIMO = 'F'</code> or <code>S@FIMO = 'M'</code>, respectively, filtering by:</li> <li><code>S5CO# = SACO</code> (company number).</li> <li><code>S5ORD# = SAORD</code> (order number).</li> <li><code>S5SRN# = SASRN#</code> (shipping reference number).</li> <li><code>S5SHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li>FR-004: The system shall read miscellaneous records from <code>SA5FIUM</code> (sales miscellaneous) or <code>SA5MOUM</code> (move miscellaneous) when no detail records are found, filtering by:</li> <li><code>SMCO# = SACO</code> (company number).</li> <li><code>SMORD# = SAORD</code> (order number).</li> <li><code>SMSRN# = SASRN#</code> (shipping reference number).</li> <li><code>SMSHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li><code>SMMSTY = 'F'</code> (freight type).</li> <li><code>SMGLNO \u2260 0</code> (non-zero G/L number).</li> <li>FR-005: The system shall retrieve freight G/L numbers (<code>FEGL</code>) as follows:</li> <li>For detail records with alpha characters in <code>S5PROD</code> (product code), use <code>CUFEGL</code> from <code>GSCTUM</code> based on <code>S5CO#</code>, <code>S5PROD</code>, <code>S5CNTR</code>, and <code>S5UM</code>.</li> <li>For detail records with numeric <code>S5PROD</code>, combine <code>TBFEG4</code> (first 4 digits) from <code>GSTABL</code> (keyed by <code>CNTRPF</code> and <code>S5TANK</code>) with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li>For miscellaneous records, use <code>SMGLNO</code> directly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#33-freight-proration","title":"3.3 Freight Proration","text":"<ul> <li>FR-006: For detail records:</li> <li>Calculate total net gallons (<code>TTLQTY</code>) by summing <code>S5NGAL</code> from filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>S5NGAL / TTLQTY</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>AMTITM</code>) for each line.</li> <li>Adjust the last record\u2019s amount to ensure the sum of all amounts equals <code>FRTTOT</code>:<ul> <li>If sum equals <code>FRTTOT</code>, no adjustment.</li> <li>If sum is less than <code>FRTTOT</code>, add the difference to the last record.</li> <li>If sum is greater than <code>FRTTOT</code>, subtract the difference from the last record.</li> </ul> </li> <li>FR-007: For miscellaneous records (when no detail records exist):</li> <li>Calculate total miscellaneous freight (<code>TTLMFT</code>) by summing <code>SMMAMT * SMMQTY</code> for filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>(SMMAMT * SMMQTY) / TTLMFT</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>FRTAMT</code>) for each line.</li> <li>For the last record, set <code>FRTAMT = FRTTOT - sum(previous FRTAMT)</code> to ensure the total matches <code>FRTTOT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#34-ap-transaction-processing","title":"3.4 A/P Transaction Processing","text":"<ul> <li>FR-008: The system shall write or update records in <code>APTRAN</code> (A/P transaction file) as follows:</li> <li>Key Fields: <code>S5CO#</code> or <code>SMCO#</code> (company number), <code>ENTNUM</code> (entry number), <code>COUNT2</code> or <code>COUNT3</code> (sequence number).</li> <li>Common Fields:<ul> <li>Record type: <code>A</code> (active).</li> <li>Vendor number: <code>VEND</code>.</li> <li>Freight G/L: <code>FEGL</code>.</li> <li>Description: <code>FRTCHG</code> (detail) or <code>MISC CHARGE</code> (miscellaneous) from <code>MSG</code> array.</li> <li>Order number: <code>SAORD</code> or <code>SMORD#</code>.</li> <li>Shipping reference number: <code>SASRN#</code> or <code>SMSRN#</code>.</li> <li>Discount percentage: <code>DSPC</code>.</li> <li>Status: <code>C</code> (closed).</li> <li>Zero-filled fields for unused amounts (e.g., <code>ATDISC</code>, <code>ATQTY</code>, <code>ATGALN</code>, etc.).</li> </ul> </li> <li>Detail-Specific Fields:<ul> <li>Product code: <code>S5PROD</code>.</li> <li>Container code: <code>S5CNTR</code>.</li> <li>Amount: <code>LINAMT</code> (prorated freight).</li> </ul> </li> <li>Miscellaneous-Specific Fields:<ul> <li>Amount: <code>FRTAMT</code> (adjusted for last record).</li> </ul> </li> <li>FR-009: If an <code>APTRAN</code> record exists for the key (<code>CHAIN</code> succeeds), update it (<code>UPDT</code> or <code>UPDTM</code>); otherwise, write a new record (<code>ADDT</code> or <code>ADDTM</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#35-error-handling-and-data-validation","title":"3.5 Error Handling and Data Validation","text":"<ul> <li>FR-010: The system shall skip records marked as deleted (<code>S5DEL = 'D'</code> or <code>SMDEL = 'D'</code>).</li> <li>FR-011: If no valid records are found in <code>SA5FIUD</code>/<code>SA5MOUD</code> or <code>SA5FIUM</code>/<code>SA5MOUM</code>, the system shall exit without writing to <code>APTRAN</code>.</li> <li>FR-012: If <code>TTLQTY = 0</code> for detail records or <code>TTLMFT = 0</code> for miscellaneous records, set <code>PCTHLD</code> to zero to avoid division by zero.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#4-data-requirements","title":"4. Data Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#41-input-files","title":"4.1 Input Files","text":"<ul> <li>SA5FIUD (Sales Detail, 1024 bytes, keyed):</li> <li>Fields: <code>S5DEL</code>, <code>S5CO#</code>, <code>S5CUST</code>, <code>S5SHIP</code>, <code>S5PROD</code>, <code>PRD1-4</code>, <code>S5TANK</code>, <code>S5ORD#</code>, <code>S5UM</code>, <code>S5NGAL</code>, <code>S5CNTR</code>, <code>S5SHD8</code>, <code>S5SRN#</code>.</li> <li>SA5MOUD (Move Detail, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUD</code>.</li> <li>SA5FIUM (Sales Miscellaneous, 1024 bytes, keyed):</li> <li>Fields: <code>SMDEL</code>, <code>SMCO#</code>, <code>SMCUST</code>, <code>SMSHIP</code>, <code>SMMQTY</code>, <code>SMMAMT</code>, <code>SMORD#</code>, <code>SMSEQ</code>, <code>SMMSTY</code>, <code>SMGLNO</code>, <code>SMIND8</code>, <code>SMSHD8</code>, <code>SMSRN#</code>.</li> <li>SA5MOUM (Move Miscellaneous, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUM</code>.</li> <li>GSTABL (General Table, 256 bytes, keyed):</li> <li>Field: <code>TBFEG4</code> (freight G/L first 4 digits).</li> <li>BICONT (Business Control, 256 bytes, keyed):</li> <li>Field: <code>BCFRGL</code> (default freight G/L).</li> <li>GSCTUM (Customer Table, 64 bytes, keyed):</li> <li>Field: <code>CUFEGL</code> (freight expense G/L).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#42-output-file","title":"4.2 Output File","text":"<ul> <li>APTRAN (A/P Transaction, 404 bytes, keyed):</li> <li>Fields: <code>ATDDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATENSQ</code>, <code>ATVEND</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATPONO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPOSQ</code>, <code>ATPRAM</code>, <code>ATFRAM</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#43-data-structures","title":"4.3 Data Structures","text":"<ul> <li>SALES: Input parameter structure with fields listed in FR-001.</li> <li>Internal Arrays:</li> <li><code>PCT</code> (999, 7,3): Percentage for each line.</li> <li><code>AMT</code> (999, 11,2): Freight amounts for each line.</li> <li><code>MSG</code> (2, 25 bytes): Descriptions (<code>FRTCHG</code>, <code>MISC CHARGE</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#5-non-functional-requirements","title":"5. Non-Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#51-performance","title":"5.1 Performance","text":"<ul> <li>NFR-001: The system shall process invoices with up to 999 detail or miscellaneous lines within 5 seconds per invoice.</li> <li>NFR-002: The system shall handle concurrent processing of multiple invoices without data corruption.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#52-reliability","title":"5.2 Reliability","text":"<ul> <li>NFR-003: The system shall ensure that the sum of prorated freight amounts equals <code>FRTTOT</code> within a tolerance of \u00b10.01.</li> <li>NFR-004: The system shall maintain data integrity by locking <code>APTRAN</code> records during updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#53-compatibility","title":"5.3 Compatibility","text":"<ul> <li>NFR-005: The system shall operate on IBM AS/400 or compatible systems supporting RPG/36 (<code>AP1011</code>) and RPG IV (<code>AP1012</code>).</li> <li>NFR-006: The system shall use standard file formats for <code>SA5FI*</code>, <code>SA5MO*</code>, <code>GSTABL</code>, <code>BICONT</code>, <code>GSCTUM</code>, and <code>APTRAN</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#54-maintainability","title":"5.4 Maintainability","text":"<ul> <li>NFR-007: Changes to <code>AP1011</code> must be mirrored in <code>AP1012</code> to maintain functional consistency, as noted in the file headers.</li> <li>NFR-008: The system shall include clear comments and change logs (e.g., JB02, MG03, JB07, JB08) to track modifications.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#6-constraints","title":"6. Constraints","text":"<ul> <li>C-001: The system assumes input parameters in the <code>SALES</code> data structure are valid and does not perform extensive validation.</li> <li>C-002: Records older than one year from the invoice date (<code>S5SHD8</code> or <code>SMSHD8 &lt; CMPDT8</code>) are excluded.</li> <li>C-003: The system relies on the presence of <code>GSTABL</code>, <code>BICONT</code>, and <code>GSCTUM</code> for G/L number retrieval.</li> <li>C-004: <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, while <code>AP1012</code> can derive them via the <code>GETS@</code> subroutine.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Input data in <code>SA5FI*</code> and <code>SA5MO*</code> files is accurate and consistent.</li> <li>The <code>APTRAN</code> file supports both create and update operations.</li> <li>The <code>CMPDT8</code> date is provided in YYYYMMDD format and represents a valid comparison date.</li> <li>Discounts (<code>DSPC</code>) are applicable to all transaction lines.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#8-differences-between-ap1011-and-ap1012","title":"8. Differences Between AP1011 and AP1012","text":"<ul> <li>GETS@ Subroutine:</li> <li>AP1012: Includes a <code>GETS@</code> subroutine to determine <code>S@FIMO</code> and <code>S@DM</code> when blank, enhancing flexibility.</li> <li>AP1011: Assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, potentially limiting its use in certain scenarios.</li> <li>File Access Mode:</li> <li>AP1011: <code>APTRAN</code> defined as <code>UC</code> (update/create).</li> <li>AP1012: <code>APTRAN</code> defined as <code>UF</code> (update/file), potentially allowing broader access.</li> <li>Change Log Dates:</li> <li>AP1011: JB07 dated 07/10/2024.</li> <li>AP1012: JB07 dated 04/01/2019, indicating possible synchronization issues.</li> <li>File Definition Syntax:</li> <li>AP1011: Uses <code>EXTK</code> and <code>L14AI</code> for some file definitions, reflecting RPG/36 syntax.</li> <li>AP1012: Uses simpler <code>14AI</code>, reflecting RPG IV conventions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#9-future-considerations","title":"9. Future Considerations","text":"<ul> <li>Synchronize the <code>GETS@</code> subroutine across both programs to ensure consistent handling of blank <code>S@FIMO</code> and <code>S@DM</code>.</li> <li>Standardize file access modes (<code>UC</code> vs. <code>UF</code>) to avoid potential operational differences.</li> <li>Implement additional input validation to handle invalid or missing parameters.</li> <li>Consider consolidating <code>AP1011</code> and <code>AP1012</code> into a single program to reduce maintenance overhead.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#10-approval","title":"10. Approval","text":"<ul> <li>Prepared By: Grok 3, xAI</li> <li>Reviewed By: [Pending Stakeholder Review]</li> <li>Approved By: [Pending Stakeholder Approval]</li> <li>Date Approved: [Pending]</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#additional-technical-details-","title":"Additional Technical Details --","text":"<p>The two RPG programs, <code>AP1011.rpg36.txt</code> and <code>AP1012.rpg.txt</code>, are designed to perform the same function: creating Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details (gallons) or miscellaneous freight amounts. They preprocess data to gather total gallons for freight allocation and split voucher entries to calculate percentages. Both programs share similar logic, file structures, and processing steps, with a note in the file headers indicating that changes in one must be reflected in the other. However, there are minor differences, primarily in file access modes and a specific subroutine present only in <code>AP1012</code>. Below is a consolidated analysis of the process steps, business rules, tables used, and external programs called, with differences explicitly noted.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#process-steps","title":"Process Steps","text":"<p>Both programs follow these steps to prorate freight costs and create A/P transaction records:</p> <ol> <li>Input Parameter Processing:</li> <li> <p>Receive input via a parameter list (<code>SALES</code> data structure) containing fields like company number (<code>SACO</code>), order number (<code>SAORD</code>), shipping reference number (<code>SASRN#</code>), freight total (<code>FRTTOT</code>), vendor number (<code>VEND</code>), entry number (<code>ENTNUM</code>), expense G/L (<code>EXGL</code>), discount percentage (<code>DSPC</code>), comparison date (<code>CMPDT8</code>), and table indicators (<code>S@FIMO</code>, <code>S@DM</code>).</p> </li> <li> <p>Determine Table Access (AP1012 only):</p> </li> <li> <p>In <code>AP1012</code>, if <code>S@FIMO</code> is blank, the <code>GETS@</code> subroutine determines whether to use <code>SA5FI</code> or <code>SA5MO</code> tables and whether to process detail (<code>D</code>) or miscellaneous (<code>M</code>) records by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for matching records.</p> </li> <li> <p>Calculate Total Net Gallons:</p> </li> <li>Read through <code>SA5FIUD</code> (detail) or <code>SA5MOUD</code> (move detail) based on <code>S@FIMO</code> (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>).</li> <li>Filter records by company (<code>S5CO# = SACO</code>), order (<code>S5ORD# = SAORD</code>), shipping reference number (<code>S5SRN# = SASRN#</code>), and ship date (<code>S5SHD8 &gt;= CMPDT8</code>, within one year of invoice date).</li> <li> <p>Sum net gallons (<code>S5NGAL</code>) into <code>TTLQTY</code> and count records (<code>COUNT1</code>).</p> </li> <li> <p>Handle No Detail Records:</p> </li> <li> <p>If no detail records are found (<code>TTLQTY = 0</code> and <code>COUNT1 = 0</code>), proceed to process miscellaneous records (<code>SA5FIUM</code> or <code>SA5MOUM</code>).</p> </li> <li> <p>Prorate Freight Based on Detail Records:</p> </li> <li>Re-read <code>SA5FIUD</code> or <code>SA5MOUD</code> to calculate the percentage of total gallons (<code>S5NGAL / TTLQTY</code>) for each record.</li> <li>Multiply the percentage (<code>PCTHLD</code>) by the total freight (<code>FRTTOT</code>) to compute the freight amount (<code>AMT,Y</code>) for each line.</li> <li>Store the amount in <code>AMTITM</code> and <code>LINAMT</code> (array elements).</li> <li>Adjust the last record\u2019s amount to ensure the sum matches <code>FRTTOT</code>:<ul> <li>If <code>FRTTOT = sum(AMT)</code>, write records.</li> <li>If <code>FRTTOT &gt; sum(AMT)</code>, add the difference to the last record.</li> <li>If <code>FRTTOT &lt; sum(AMT)</code>, subtract the difference from the last record.</li> </ul> </li> <li> <p>Call the <code>GOOD</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Prorate Freight Based on Miscellaneous Records:</p> </li> <li>If no detail records exist, call the <code>MFRTO</code> subroutine to calculate the total miscellaneous freight amount (<code>TTLMFT</code>) and count (<code>COUNTM</code>) from <code>SA5FIUM</code> or <code>SA5MOUM</code> where <code>SMMSTY = 'F'</code> (freight) and <code>SMGLNO \u2260 0</code>.</li> <li>Read <code>SA5FIUM</code> or <code>SA5MOUM</code>, calculate the percentage (<code>CLCAMT / TTLMFT</code>) for each record, and apply it to <code>FRTTOT</code> to get <code>FRTAMT</code>.</li> <li>For the last record, adjust <code>FRTAMT</code> to ensure the sum equals <code>FRTTOT</code>.</li> <li> <p>Call the <code>GETFRT</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Write/Update A/P Transaction Records:</p> </li> <li>In the <code>GOOD</code> subroutine:<ul> <li>Retrieve the freight G/L number (<code>FEGL</code>) based on product code (<code>S5PROD</code>):</li> <li>If the product code contains an alpha character, use <code>GSCTUM</code> (<code>CUFEGL</code>).</li> <li>Otherwise, combine the first 4 digits from <code>GSTABL</code> (<code>TBFEG4</code>) and the product code, or use the default from <code>BICONT</code> (<code>BCFRGL</code>).</li> <li>Write (<code>ADDT</code>) or update (<code>UPDT</code>) <code>APTRAN</code> with fields like company number, entry number, vendor, freight G/L, description, order, SRN, product code, container code, amount, and discount.</li> </ul> </li> <li> <p>In the <code>GETFRT</code> subroutine:</p> <ul> <li>Use the miscellaneous G/L number (<code>SMGLNO</code>) as <code>FEGL</code>.</li> <li>Write (<code>ADDTM</code>) or update (<code>UPDTM</code>) <code>APTRAN</code> with similar fields, using <code>FRTAMT</code> for the amount.</li> </ul> </li> <li> <p>Exit:</p> </li> <li>Set the last record indicator (<code>LR</code>) and terminate.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#business-rules","title":"Business Rules","text":"<p>The following business rules govern the processing in both programs:</p> <ol> <li>Freight Allocation:</li> <li>Freight (<code>FRTTOT</code>) is prorated across detail lines based on net gallons (<code>S5NGAL / TTLQTY</code>) or across miscellaneous lines based on freight amounts (<code>CLCAMT / TTLMFT</code>).</li> <li> <p>The last record\u2019s amount is adjusted to ensure the total allocated freight matches <code>FRTTOT</code>.</p> </li> <li> <p>Table Selection:</p> </li> <li>Use <code>SA5FIUD</code> or <code>SA5MOUD</code> for detail records and <code>SA5FIUM</code> or <code>SA5MOUM</code> for miscellaneous records, determined by <code>S@FIMO</code> (<code>F</code> or <code>M</code>).</li> <li> <p>Records are filtered by company, order, SRN, and ship date (within one year of invoice date, <code>S5SHD8 &gt;= CMPDT8</code>).</p> </li> <li> <p>Freight G/L Determination:</p> </li> <li>For detail records with alpha product codes, retrieve <code>FEGL</code> from <code>GSCTUM</code>.</li> <li>For numeric product codes, combine <code>TBFEG4</code> from <code>GSTABL</code> with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li> <p>For miscellaneous records, use <code>SMGLNO</code> as <code>FEGL</code>.</p> </li> <li> <p>Record Writing:</p> </li> <li>Write new <code>APTRAN</code> records if no existing record is found (<code>CHAIN APTRAN</code> fails).</li> <li>Update existing <code>APTRAN</code> records if found.</li> <li> <p>Include discounts (<code>DSPC</code>) in <code>APTRAN</code> records.</p> </li> <li> <p>Miscellaneous Records:</p> </li> <li>Process miscellaneous records only if no detail records exist.</li> <li>Only records with <code>SMMSTY = 'F'</code> (freight) and non-zero <code>SMGLNO</code> are used for freight proration.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#differences-in-business-rules","title":"Differences in Business Rules","text":"<ul> <li>S@FIMO and S@DM Handling (JB07):</li> <li>In <code>AP1012</code>, the <code>GETS@</code> subroutine is added to determine <code>S@FIMO</code> and <code>S@DM</code> when they are blank, by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for valid records. This logic is absent in <code>AP1011</code>, implying <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are always provided.</li> <li>Date of Change JB07:</li> <li><code>AP1011</code>: JB07 dated 07/10/2024.</li> <li><code>AP1012</code>: JB07 dated 04/01/2019, indicating a potential discrepancy in update synchronization, though the logic appears identical.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#tables-used","title":"Tables Used","text":"<p>Both programs use the same tables: - SA5FIUD: Sales detail file (input, 1024 bytes, keyed). - SA5FIUM: Sales miscellaneous file (input, 1024 bytes, keyed). - SA5MOUD: Move detail file (input, 1024 bytes, keyed, added in JB06). - SA5MOUM: Move miscellaneous file (input, 1024 bytes, keyed, added in JB06). - GSTABL: General table for freight G/L number lookup (input, 256 bytes, keyed). - BICONT: Business control file for default freight G/L (input, 256 bytes, keyed). - GSCTUM: Customer table for freight expense G/L (input, 64 bytes, keyed, added in JB02). - APTRAN: A/P transaction file (update in <code>AP1011</code>, update/input in <code>AP1012</code>, 404 bytes, keyed).</p> <p>Difference: - <code>AP1011</code> defines <code>APTRAN</code> with <code>UC</code> (update/create), while <code>AP1012</code> uses <code>UF</code> (update/file). This suggests <code>AP1012</code> may have broader file access capabilities, though the logic uses <code>UC</code>-style operations (write/update).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#external-programs-called","title":"External Programs Called","text":"<ul> <li>Neither program explicitly calls external programs (no <code>CALL</code> statements). All processing is handled via subroutines (<code>GOOD</code>, <code>GETFRT</code>, and <code>MFRTO</code> in both; <code>GETS@</code> in <code>AP1012</code> only).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#summary-of-differences","title":"Summary of Differences","text":"<ol> <li>GETS@ Subroutine:</li> <li>Present in <code>AP1012</code> to handle blank <code>S@FIMO</code> and <code>S@DM</code>, absent in <code>AP1011</code>.</li> <li>File Access Mode:</li> <li><code>APTRAN</code> is <code>UC</code> in <code>AP1011</code> and <code>UF</code> in <code>AP1012</code>.</li> <li>JB07 Date:</li> <li>Different dates for the JB07 change (07/10/2024 in <code>AP1011</code>, 04/01/2019 in <code>AP1012</code>).</li> <li>Field Length Consistency:</li> <li>Both programs updated the <code>AMT</code> array to 11,2 in JB07/JB08, but some commented lines suggest prior inconsistencies (e.g., 7,2 in <code>AP1011</code>).</li> <li>File Definition Syntax:</li> <li><code>AP1011</code> includes <code>EXTK</code> and <code>L14AI</code> in some file definitions, while <code>AP1012</code> uses simpler <code>14AI</code>. This may reflect platform-specific syntax (e.g., RPG/36 vs. RPG IV) but does not affect logic.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#conclusion","title":"Conclusion","text":"<p>Both programs perform identical core functions with minor differences in handling input parameters (<code>GETS@</code> in <code>AP1012</code>) and file access modes. The presence of <code>GETS@</code> in <code>AP1012</code> makes it more robust for cases where table indicators are not provided. The file header warning about synchronizing changes suggests these differences may be oversights or platform-specific adaptations. Developers should ensure <code>GETS@</code> is added to <code>AP1011</code> or confirm that <code>S@FIMO</code> and <code>S@DM</code> are always provided to maintain consistency.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/","title":"Summary AP125","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#freight-voucher-usecase-ap125-and-ap1012-programs","title":"Freight Voucher Usecase AP125 and AP1012 Programs","text":"<p>The <code>AP125.rpg</code> and <code>AP1012.rpg</code> programs together implement a single primary use case, as they form a cohesive process for creating accounts payable (A/P) voucher transactions from freight invoices. The use case is described below:</p> <ol> <li>Create A/P Voucher Transactions from Freight Invoices:</li> <li>Description: This use case processes freight invoices from the <code>FRCINH</code> or <code>FRCFBH</code> files to generate A/P voucher transactions in the <code>APTRAN</code> file, including header and detail records. It calculates due dates, applies discounts, prorates freight amounts across sales detail or miscellaneous records, and validates general ledger (G/L) accounts and vendor information. The process ensures accurate allocation of freight charges and compliance with payment terms and hold statuses.</li> <li>Inputs: Company code (<code>CO</code>), carrier ID (<code>CAID</code>), invoice number (<code>CAIN</code>), record type (<code>RCD</code>), reference number (<code>RDNO</code>), and sales-related data (order number, shipping reference number, freight total, etc.).</li> <li>Outputs: A/P transaction header and detail records in <code>APTRAN</code>, updated freight invoice records in <code>FRCINH</code> or <code>FRCFBH</code>, marked as processed.</li> <li>Components:<ul> <li><code>AP125.rpg</code>: Handles header creation, vendor validation, due date calculation, and G/L validation, and calls <code>AP1012.rpg</code> for detail line creation.</li> <li><code>AP1012.rpg</code>: Prorates freight amounts across sales detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) or miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records and creates detail lines in <code>APTRAN</code>.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#function-requirement-create-ap-voucher-transactions-from-freight-invoices","title":"Function Requirement: Create A/P Voucher Transactions from Freight Invoices","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#purpose","title":"Purpose","text":"<p>Automate the creation of accounts payable (A/P) voucher transactions from freight invoices, including header and detail records, by processing invoice data, validating vendor and G/L information, calculating due dates, applying discounts, and prorating freight amounts across sales detail or miscellaneous records.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>CO</code>): 2-digit code identifying the company.</li> <li>Carrier ID (<code>CAID</code>): 6-character identifier for the carrier.</li> <li>Invoice Number (<code>CAIN</code>): 25-character freight invoice number.</li> <li>Record Type (<code>RCD</code>): Indicates invoice source (<code>FRCFBHP4</code> for freight billed balance header, else <code>FRCINHP4</code>).</li> <li>Reference Number (<code>RDNO</code>): Numeric reference number for <code>FRCFBH</code> invoices.</li> <li>Sales Data (via <code>SALES</code> data structure):</li> <li>Order Number (<code>SAORD</code>): 6-digit sales order number.</li> <li>Shipping Reference Number (<code>SASRN#</code>): 3-digit shipping reference number.</li> <li>Freight Total (<code>FRTTOT</code>): Total freight amount to allocate (7.2 digits).</li> <li>Vendor Number (<code>VEND</code>): 5-digit vendor number.</li> <li>Entry Number (<code>ENTNUM</code>): 5-digit A/P entry number.</li> <li>Discount Percentage (<code>DSPC</code>): 4.3-digit discount percentage.</li> <li>Comparison Date (<code>CMPDT8</code>): Invoice date minus one year (8 digits).</li> <li>File Indicator (<code>S@FIMO</code>): <code>F</code> (SA5FI files) or <code>M</code> (SA5MO files).</li> <li>Detail/Misc Indicator (<code>S@DM</code>): <code>D</code> (detail) or <code>M</code> (miscellaneous).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#outputs","title":"Outputs","text":"<ul> <li>A/P Transaction Records: Header and detail records in <code>APTRAN</code> with validated vendor, G/L, and prorated freight amounts.</li> <li>Updated Freight Invoice Records: <code>FRCINH</code> or <code>FRCFBH</code> records marked as processed (<code>FRAPST = 'Y'</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Invoice Data:</li> <li>Access <code>FRCINH</code> (if <code>RCD \u2260 'FRCFBHP4'</code>) or <code>FRCFBH</code> (if <code>RCD = 'FRCFBHP4'</code>) using <code>CO</code>, <code>CAID</code>, <code>CAIN</code>, and <code>RDNO</code>.</li> <li> <p>Extract invoice number (<code>FRCAIN</code>), type (<code>FRINTY</code>), date (<code>FRIYMD</code>), amount (<code>FRINAM - FRFBOA</code>), sales order (<code>FRRDNO</code>), and shipping reference (<code>FRSRN</code>).</p> </li> <li> <p>Validate Company and Generate Entry Number:</p> </li> <li>Retrieve company details (<code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACRTGL</code>, <code>ACNXTE</code>) from <code>APCONT</code> using <code>CO</code>.</li> <li> <p>Assign a new entry number (<code>ENT#</code>) from <code>ACNXTE</code> for new transactions, incrementing and updating <code>ACNXTE</code>.</p> </li> <li> <p>Retrieve Vendor Information:</p> </li> <li>Get vendor number (<code>VYVEND</code>) from <code>APVENY</code> using <code>CO</code> and <code>CAID</code>.</li> <li>Retrieve vendor details (<code>VNVNAM</code>, <code>VNAD1-4</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNTERM</code>, <code>VNEXGL</code>) from <code>APVEND</code> using <code>CO</code> and <code>VEND</code>.</li> <li> <p>Set hold description (<code>HLDD</code>) based on hold code (<code>VNHOLD</code>):</p> <ul> <li><code>H</code>: \"VENDOR ON HOLD\"</li> <li><code>A</code>: \"ON HOLD FOR ACH\"</li> <li><code>W</code>: \"ON HOLD FOR WIRE TRANSFER\"</li> <li><code>U</code>: \"ON HOLD FOR UTILITY AUTO-PAYMENT\"</li> </ul> </li> <li> <p>Calculate Due Date:</p> </li> <li>If <code>VNTERM</code> is non-zero, retrieve terms (<code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>) from <code>GSTABL</code> (table <code>APTERM</code>).</li> <li>Calculate due date:<ul> <li>For net days (<code>TBNETD</code>): Add <code>TBNETD</code> to invoice date (<code>FRIYMD</code>) using Julian date conversion.</li> <li>For prox days (<code>TBPRXD</code>): Set to <code>TBPRXD</code> day of the next month.</li> <li>Default to invoice date if no terms.</li> </ul> </li> <li> <p>Adjust due date to a non-holiday/non-weekend date using <code>APDATE</code> (<code>ADNED8</code>).</p> </li> <li> <p>Validate G/L Accounts:</p> </li> <li> <p>Validate A/P (<code>APGL</code>), bank (<code>BKGL</code>), and retention (<code>RTGL</code>) accounts against <code>GLMAST</code>, retrieving descriptions.</p> </li> <li> <p>Create A/P Header:</p> </li> <li> <p>Write/update header in <code>APTRAN</code> with invoice, vendor, G/L, due date, hold status, and discount (<code>DSPC</code>) data.</p> </li> <li> <p>Prorate Freight and Create Detail Lines:</p> </li> <li>Call <code>AP1012</code> with <code>SALES</code> data structure to prorate <code>FRTTOT</code> across sales records.</li> <li>For Detail Records (<code>SA5FIUD</code> or <code>SA5MOUD</code>):<ul> <li>Calculate total gallons (<code>TTLQTY</code>) for records with <code>S5SHD8 &gt;= CMPDT8</code>.</li> <li>Prorate freight: <code>AMT = (S5NGAL / TTLQTY) * FRTTOT</code>.</li> <li>Adjust the last record to ensure the sum equals <code>FRTTOT</code>.</li> <li>Retrieve freight G/L (<code>FEGL</code>):</li> <li>If product code (<code>S5PROD</code>) has alpha characters, use <code>CUFEGL</code> from <code>GSCTUM</code>.</li> <li>Else, use <code>TBFEG4</code> from <code>GSTABL</code> (table <code>CNTRPF</code>) with <code>S5PROD</code> appended.</li> <li>Default to <code>BCFRGL</code> from <code>BICONT</code>.</li> <li>Write detail line to <code>APTRAN</code> with <code>FEGL</code>, <code>AMT</code>, <code>DSPC</code>, and description \"XXXXXXXXX XXXX XXX FRTCHG\".</li> </ul> </li> <li> <p>For Miscellaneous Records (<code>SA5FIUM</code> or <code>SA5MOUM</code>):</p> <ul> <li>If no detail records, calculate total miscellaneous freight (<code>TTLMFT</code>) for records with <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, and <code>SMSHD8 &gt;= CMPDT8</code>.</li> <li>Prorate freight: <code>FRTAMT = (SMMAMT * SMMQTY / TTLMFT) * FRTTOT</code>.</li> <li>Adjust the last record to match <code>FRTTOT</code>.</li> <li>Use <code>SMGLNO</code> as <code>FEGL</code>.</li> <li>Write detail line to <code>APTRAN</code> with <code>FRTAMT</code>, <code>DSPC</code>, and description \"MISC CHARGE\".</li> </ul> </li> <li> <p>Update Freight Invoice:</p> </li> <li>Mark <code>FRCINH</code> or <code>FRCFBH</code> as processed (<code>FRAPST = 'Y'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#business-rules","title":"Business Rules","text":"<ul> <li>Invoice Source: Process <code>FRCINH</code> or <code>FRCFBH</code> based on <code>RCD</code> (<code>FRCFBHP4</code> for freight billed balance).</li> <li>Freight Adjustment: Subtract <code>FRFBOA</code> from <code>FRINAM</code> for invoice amount.</li> <li>Hold Status: Support <code>H</code> (hold), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>U</code> (utility auto-payment) with corresponding descriptions.</li> <li>Due Date: Calculate based on <code>VNTERM</code> (net or prox days) or default to invoice date; adjust for non-holiday/weekend.</li> <li>Discounts: Apply <code>TBDISC</code> from <code>GSTABL</code> to detail lines.</li> <li>Date Restriction: Process sales records with ship date within one year of invoice date (<code>S5SHD8</code> or <code>SMSHD8 &gt;= CMPDT8</code>).</li> <li>Freight Proration:</li> <li>Detail records: Prorate based on net gallons (<code>S5NGAL</code>).</li> <li>Miscellaneous records: Prorate based on <code>SMMAMT * SMMQTY</code> for freight-type records (<code>SMMSTY = 'F'</code>).</li> <li>Ensure total prorated amounts equal <code>FRTTOT</code>.</li> <li>G/L Validation: Validate all G/L accounts against <code>GLMAST</code>; use <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code> for freight G/L.</li> <li>Record Selection: Use <code>S@FIMO</code> (<code>F</code> or <code>M</code>) and <code>S@DM</code> (<code>D</code> or <code>M</code>) to select appropriate sales files; determine dynamically if blank.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#calculations","title":"Calculations","text":"<ul> <li>Due Date (Net Days): <code>DUDT = INDT + TBNETD</code> (converted via Julian date).</li> <li>Due Date (Prox Days): <code>DUDT = TBPRXD</code> day of the next month from <code>INDT</code>.</li> <li>Freight Proration (Detail): <code>AMT = (S5NGAL / TTLQTY) * FRTTOT</code>; adjust last record to match <code>FRTTOT</code>.</li> <li>Freight Proration (Misc): <code>FRTAMT = ((SMMAMT * SMMQTY) / TTLMFT) * FRTTOT</code>; adjust last record to match <code>FRTTOT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li>Update: <code>APTRAN</code>, <code>APCONT</code>, <code>FRCINH</code>, <code>FRCFBH</code>.</li> <li>Input: <code>APVEND</code>, <code>APVENY</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>APDATE</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>BICONT</code>, <code>GSCTUM</code>.</li> <li>External Program: <code>AP1012</code> (called by <code>AP125</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#assumptions","title":"Assumptions","text":"<ul> <li>Input data is valid and exists in the respective files.</li> <li><code>APTRAN</code> can accommodate new or updated records without conflicts.</li> <li>Sales records are available within the one-year date range.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid company, vendor, or G/L accounts: Skip record creation and log errors (via indicators).</li> <li>No matching sales records: Skip detail line creation.</li> <li>Invalid dates: Reject and log errors.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/","title":"AP105 Call Stack Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#use-cases-implemented-by-the-program-call-stack","title":"Use Cases Implemented by the Program Call Stack","text":"<p>The call stack consists of the following programs: - AP105PCL.clp (IBM i CLP): Entry point, sets up file overrides and calls other programs. - AP105P.rpg (IBM i RPG): Validates A/P SOGAS ACH payment data and generates error reports. - AP105.ocl36 (System/36 OCL): Manages file setup and calls System/36 programs. - AP105.rpg36 (System/36 RPG): Processes A/P voucher entry and creates transaction records. - AP105A (System/36 program, not provided): Copies data to a history file.</p> <p>Based on the analysis of these programs, the primary use case implemented by this call stack is:</p> <ol> <li>Validate and Process A/P SOGAS ACH Payment Vouchers:</li> <li>This use case involves validating ACH payment data from an upload file, ensuring owners and vendors exist, adjusting due dates to avoid holidays/weekends, creating A/P voucher transactions, applying hold status based on vendor settings, and archiving processed data to a history file.</li> </ol> <p>No additional distinct use cases are evident, as the programs work together to achieve this single, cohesive process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-document-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements Document: Process A/P SOGAS ACH Payment Vouchers","text":"<p>Document Title: Process A/P SOGAS ACH Payment Vouchers Artifact ID: 7a8b9c0d-e29b-41d4-a716-446655440001 Content Type: text/markdown</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements: Process A/P SOGAS ACH Payment Vouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#purpose","title":"Purpose","text":"<p>To validate A/P SOGAS ACH payment data, create voucher transactions, adjust due dates, apply vendor hold status, and archive processed data without requiring interactive screen input.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#inputs","title":"Inputs","text":"<ul> <li>File Group Prefix (FGRP): 1-character string to prefix file names (e.g., environment identifier).</li> <li>Payment Data (APSOGAS): Records containing:</li> <li>Owner Number (ANOWNR, 7 chars)</li> <li>Check Amount (ANCHAM, packed decimal)</li> <li>Check Name (ANCHNM, 7 chars)</li> <li>Due Date (ANDUDT, 10 chars, MMDDYY format)</li> <li>Description (DESC, 13 chars, from LDA)</li> <li>Control Flags (LDA):</li> <li>Canadian Tax Flag (CANTAX, 'Y' or blank)</li> <li>Upload Type (UPTYPE, 'T' or blank)</li> <li>Century Data (Y2KCEN, Y2KCMP for date calculations)</li> <li>Reference Data:</li> <li>APSGACH: Owner-to-vendor mappings (AGOWNR, AGVEND).</li> <li>APVEND: Vendor details (VNVEND, VNHOLD, VNTERM, etc.).</li> <li>APCONT: Control data (ACAPGL, ACCAGL, ACNXTE).</li> <li>APDATE: Non-holiday/weekend due dates (ADDUD8, ADNED8).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Transaction File (APTRAN): Header and detail records for A/P vouchers.</li> <li>History File (APSOGSH): Archived payment data.</li> <li>Error Report (LIST132): Validation errors (owner/vendor not found, counts).</li> <li>Updated Control File (APCONT): Updated next entry number (ACNXTE).</li> <li>Local Data Area (LDA): Updated with error flag (ERRORS = 'Y' or blank).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#process-steps-pseudocode-summary","title":"Process Steps (Pseudocode Summary)","text":"<ol> <li>Initialize:</li> <li>Construct file names: APSOGAS = FGRP + 'APSOGAS', APSGACH = FGRP + 'APSGACH', etc.</li> <li>Override files to use FGRP-prefixed names.</li> <li>Initialize counters (COUNT, ERRCNT = 0).</li> <li>Set system date/time (SYDYMD = YYYYMMDD).</li> <li>If CANTAX = 'Y', set CanadianTaxFlag = true.</li> <li>If UPTYPE = 'T', set UploadTypeFlag = true.</li> <li> <p>If !CanadianTaxFlag &amp;&amp; !UploadTypeFlag, set ERRORS = 'Y', exit.</p> </li> <li> <p>Validate Payment Data:</p> </li> <li> <p>For each APSOGAS record:</p> <ul> <li>Chain APSGACH with ANOWNR:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>Chain APVEND with AGVEND from APSGACH:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>If VNHOLD = 'H', set HoldFlag = true.</li> </ul> </li> <li> <p>Adjust Due Date:</p> </li> <li>Convert ANDUDT to DUDT8 (YYYYMMDD).</li> <li> <p>Chain APDATE with DUDT8:</p> <ul> <li>If found, replace DUDT8 with ADNED8 (non-holiday/weekend date).</li> </ul> </li> <li> <p>Create Voucher:</p> </li> <li>Retrieve ACAPGL (A/P GL), ACCAGL (Bank GL), ACNXTE (next entry) from APCONT.</li> <li>If ENT# = 0, set ENT# = ACNXTE, increment ACNXTE.</li> <li>If ENT# \u2265 99999, reset ACNXTE = 1.</li> <li>Write APTRAN header:<ul> <li>Fields: 'A', '10', ENT#, VNVEND, ANCHNM, DUDT8, HoldFlag ? 'H' : 'A', etc.</li> </ul> </li> <li>Write APTRAN detail:<ul> <li>Fields: '10', ENT#, NXLINE, VNVEND, EXGL (CANTAX ? 12010009 : 12010008), ANCHAM, etc.</li> </ul> </li> <li> <p>Increment NXLINE, ENT#.</p> </li> <li> <p>Archive Data:</p> </li> <li> <p>Copy APSOGAS record to APSOGSH with user ID and workstation ID.</p> </li> <li> <p>Clean Up:</p> </li> <li>Update APCONT with new ACNXTE.</li> <li>Delete file overrides.</li> <li>Clear LDA (positions 1\u2013512).</li> <li>If ERRORS = 'Y', exit; else continue.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#business-requirements","title":"Business Requirements","text":"<ul> <li>Dynamic File Naming: Use FGRP to prefix file names for environment flexibility.</li> <li>Validation:</li> <li>ANOWNR must exist in APSGACH.</li> <li>AGVEND must exist in APVEND.</li> <li>Log errors to LIST132 if validations fail.</li> <li>Due Date Adjustment: Replace due date with non-holiday/weekend date from APDATE.</li> <li>Hold Status: If VNHOLD = 'H', mark voucher as 'H' with 'VENDOR ON HOLD'; else 'A' with 'ON HOLD FOR ACH'.</li> <li>GL Assignment: Use 12010009 for Canadian tax (CANTAX = 'Y'); else 12010008.</li> <li>Entry Number Management: Ensure unique ENT# from ACNXTE, reset at 99999.</li> <li>Archiving: Copy processed APSOGAS records to APSOGSH with audit data (user, workstation).</li> <li>Error Handling: Set ERRORS = 'Y' in LDA for invalid CANTAX/UPTYPE or validation failures, skip further processing.</li> <li>Y2K Compliance: Adjust dates using Y2KCEN/Y2KCMP for century correctness.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#constraints","title":"Constraints","text":"<ul> <li>No interactive screen input; process all data programmatically.</li> <li>Files are shared (DISP-SHR) for concurrent access.</li> <li>APTRAN is extended by 100 records.</li> <li>All files use first member (*FIRST).</li> <li>Century handling assumes Y2KCEN = 19, Y2KCMP = 80.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (APSOGAS, APSGACH, APVEND, APCONT, APDATE) are populated and accessible.</li> <li>APSOGSH is available for archiving.</li> <li>LDA is initialized with valid CANTAX, UPTYPE, Y2KCEN, Y2KCMP values.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/","title":"AP105 OCL","text":"<p>Let\u2019s analyze the provided System/36 OCL (Operation Control Language) program <code>AP105.ocl36.txt</code>, which is called by the CLP program <code>AP105PCL.clp</code> via the <code>STRS36PRC</code> command. This program is part of the A/P SOGAS ACH payment processing system and runs in a System/36 environment. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#process-steps","title":"Process Steps","text":"<p>The OCL program <code>AP105.ocl36</code> performs the following steps:</p> <ol> <li>Clear and Build Temporary Files:</li> <li>Checks if the file <code>?9?APTR?WS?</code> exists:<ul> <li>If it exists, clears the physical file using <code>CLRPFM ?9?APTR?WS?</code>.</li> </ul> </li> <li>If it does not exist, builds a new file <code>?9?APTR?WS?</code> with:<ul> <li>Type: Indexed (<code>I</code>)</li> <li>Initial records: 500</li> <li>Record length: 404 bytes</li> <li>Reserved records: 2</li> <li>Key length: 10 bytes</li> </ul> </li> <li> <p>If the index file <code>?9?APTX?WS?</code> does not exist, builds an index for <code>?9?APTR?WS?</code> with:</p> <ul> <li>Key length: 2 bytes</li> <li>Alternate key at position 12, length 5</li> <li>Alternate key at position 385, length 20</li> </ul> </li> <li> <p>Load and Run Program AP105:</p> </li> <li>Loads the program <code>AP105</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>) and dynamic labeling based on the <code>?9?</code> parameter (likely the <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSGACH</code> labeled as <code>?9?APSGACH</code></li> <li><code>APTRAN</code> labeled as <code>?9?APTR?WS?</code> with an extension of 100 records</li> <li><code>APCONT</code> labeled as <code>?9?APCONT</code></li> <li><code>APVEND</code> labeled as <code>?9?APVEND</code></li> <li><code>GSTABL</code> labeled as <code>?9?GSTABL</code></li> <li><code>APDATE</code> labeled as <code>?9?APDATE</code></li> </ul> </li> <li> <p>Executes the <code>AP105</code> program (<code>RUN</code>).</p> </li> <li> <p>Create and Copy to History Table:</p> </li> <li>Sets local data:<ul> <li>At offset 400, stores the user ID (<code>?USER?</code>).</li> <li>At offset 410, stores the workstation ID (<code>?WS?</code>).</li> </ul> </li> <li>Loads the program <code>AP105A</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSOGSH</code> labeled as <code>?9?APSOGSH</code> (likely a history file)</li> </ul> </li> <li> <p>Executes the <code>AP105A</code> program (<code>RUN</code>).</p> </li> <li> <p>Clear Local Data:</p> </li> <li>Clears all local data (<code>LOCAL BLANK-*ALL</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Labeling:</li> <li> <p>File names are dynamically constructed using the <code>?9?</code> parameter (substituted with <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>), allowing the program to work with different file groups or environments.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Ensures the temporary file <code>?9?APTR?WS?</code> is cleared if it exists or created if it does not, with a predefined structure (500 records, 404 bytes, 10-byte key).</li> <li> <p>Builds an index file <code>?9?APTX?WS?</code> for efficient access to <code>?9?APTR?WS?</code> if needed.</p> </li> <li> <p>File Sharing:</p> </li> <li> <p>All files are opened with shared access (<code>DISP-SHR</code>), allowing concurrent access by other processes or users.</p> </li> <li> <p>History Tracking:</p> </li> <li> <p>The program copies data from <code>APSOGAS</code> to a history file <code>APSOGSH</code> using <code>AP105A</code>_`, indicating that processed payment data is archived for historical or audit purposes.</p> </li> <li> <p>User and Workstation Tracking:</p> </li> <li> <p>Stores the user ID and workstation ID in local data (offsets 400 and 410) for auditing or logging purposes during the history copy process.</p> </li> <li> <p>File Extension:</p> </li> <li>Extends the <code>APTRAN</code> file by 100 records, ensuring sufficient space for transaction data during processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Labeled as <code>?9?APSOGAS</code> (e.g., <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Contains A/P SOGAS ACH payment data (likely source data for voucher entry/editing).</p> </li> <li> <p>APSGACH:</p> </li> <li>Labeled as <code>?9?APSGACH</code>.</li> <li> <p>Contains ACH-related data, likely for owner or vendor validation.</p> </li> <li> <p>APTRAN:</p> </li> <li>Labeled as <code>?9?APTR?WS?</code>.</li> <li> <p>Temporary transaction file, cleared or built with 500 records, 404 bytes, and a 10-byte key. Extended by 100 records during processing.</p> </li> <li> <p>APTX:</p> </li> <li>Labeled as <code>?9?APTX?WS?</code>.</li> <li> <p>Index file for <code>APTRAN</code>, with keys at positions 12 (5 bytes) and 385 (20 bytes).</p> </li> <li> <p>APCONT:</p> </li> <li>Labeled as <code>?9?APCONT</code>.</li> <li> <p>Likely contains control or configuration data for A/P processing.</p> </li> <li> <p>APVEND:</p> </li> <li>Labeled as <code>?9?APVEND</code>.</li> <li> <p>Vendor master file containing vendor details.</p> </li> <li> <p>GSTABL:</p> </li> <li>Labeled as <code>?9?GSTABL</code>.</li> <li> <p>Likely a general system table containing configuration or reference data.</p> </li> <li> <p>APDATE:</p> </li> <li>Labeled as <code>?9?APDATE</code>.</li> <li> <p>Likely contains date-related data for A/P processing (e.g., payment or due dates).</p> </li> <li> <p>APSOGSH:</p> </li> <li>Labeled as <code>?9?APSOGSH</code>.</li> <li>History file for archiving processed <code>APSOGAS</code> data.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program invokes the following external programs:</p> <ol> <li>AP105:</li> <li>Loaded and executed with <code>LOAD AP105</code> and <code>RUN</code>.</li> <li> <p>Processes A/P voucher entry and editing for SOGAS ACH payment creation, using the files <code>APSOGAS</code>, <code>APSGACH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, and <code>APDATE</code>.</p> </li> <li> <p>AP105A:</p> </li> <li>Loaded and executed with <code>LOAD AP105A</code> and <code>RUN</code>.</li> <li>Copies data from <code>APSOGAS</code> to the history file <code>APSOGSH</code>, likely for audit or record-keeping purposes.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: Clear or build temporary files (<code>APTRAN</code>, <code>APTX</code>), load and run <code>AP105</code> for voucher entry/editing, set user/workstation data, load and run <code>AP105A</code> to copy to history file, and clear local data.</li> <li>Business Rules: Dynamic file naming with <code>?9?</code> parameter, shared file access, temporary file management, history tracking, and user/workstation logging.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (ACH data), <code>APTRAN</code> (temporary transactions), <code>APTX</code> (index for <code>APTRAN</code>), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>GSTABL</code> (system table), <code>APDATE</code> (date data), <code>APSOGSH</code> (history file).</li> <li>External Programs Called: <code>AP105</code> (voucher entry/editing), <code>AP105A</code> (history copy).</li> </ul> <p>This OCL program manages the file setup and execution of A/P voucher processing and archiving for SOGAS ACH payments in a System/36 environment, integrating with the IBM i system via dynamic file naming.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/","title":"AP105 RPG","text":"<p>Let\u2019s analyze the provided System/36 RPG program <code>AP105.rpg36</code>, which is called by the OCL program <code>AP105.ocl36</code> via the <code>STRS36PRC</code> command in the CLP program <code>AP105PCL.clp</code>. This program is part of the A/P SOGAS ACH payment processing system, specifically for voucher entry and editing. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105.rpg36</code> performs the following steps:</p> <ol> <li>File and Data Structure Declarations:</li> <li>Defines files:<ul> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APTRAN</code>: Update file with keyed access (404 bytes, 10-byte key, disk).</li> <li><code>APCONT</code>: Update file with keyed access (256 bytes, 2-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>APDATE</code>: Input file with keyed access (19 bytes, 10-byte key, disk).</li> </ul> </li> <li> <p>Defines data structures:</p> <ul> <li><code>CKDATE</code> (6 bytes) with subfields <code>CKDMM</code> (month), <code>CKDDD</code> (day), <code>CKDYY</code> (year).</li> <li>User Data Structure (UDS) for Local Data Area (LDA) with fields:</li> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>LDAWT</code> (positions 198\u2013199, wire transfer flag)</li> <li><code>Y2KCEN</code> (positions 509\u2013510, century, e.g., 19 for 1900s)</li> <li><code>Y2KCMP</code> (positions 511\u2013512, comparison year, e.g., 80)</li> </ul> </li> <li> <p>Initialization:</p> </li> <li>Initializes variables:<ul> <li><code>Z5</code> and <code>Z3</code> (5- and 3-digit numerics) to 0.</li> <li><code>MSG</code> and <code>MSG2</code> (40-character message fields) to blanks.</li> <li><code>PTYP</code> (process type) to 'SOGAS '.</li> <li>Clears indicators <code>50</code>, <code>51</code>, <code>53</code>, <code>60</code>, <code>61</code>, <code>55</code>, and <code>91</code>.</li> </ul> </li> <li> <p>If indicator <code>09</code> is off:</p> <ul> <li>Clears <code>TERMKY</code> (12 characters) and sets it to 'APTERM'.</li> <li>Clears <code>GSCKEY</code> (12 characters).</li> <li>Sets <code>POKEY</code> (11 characters) to '000'.</li> <li>Captures system time (<code>TIMDAT</code>, 12 digits) and extracts:</li> <li><code>SYTIME</code> (6-digit time).</li> <li><code>SYDATE</code> (6-digit date).</li> <li><code>SYDYMD</code> (YYYYMMDD format) by multiplying <code>SYDATE</code> by 10000.01.</li> <li><code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>Sets indicator <code>09</code> on.</li> </ul> </li> <li> <p>Retrieve Control Data:</p> </li> <li>Chains to <code>APCONT</code> using a hardcoded key <code>10</code> (indicator <code>50</code> on if not found).</li> <li>Sets <code>APGL</code> (A/P GL number) from <code>ACAPGL</code>.</li> <li> <p>Sets <code>BKGL</code> (bank GL number) from <code>ACCAGL</code>.</p> </li> <li> <p>Prepare Entry Number:</p> </li> <li>Builds a company entry key <code>COENT</code> (7 characters) by combining '10' and <code>ENT#</code> (entry number).</li> <li> <p>Sets <code>CHKAMT</code> (11.2 digits) to <code>ANCHAM</code> (check amount from <code>APSOGAS</code>).</p> </li> <li> <p>Process Dates and Invoice Data:</p> </li> <li>Builds invoice and due dates:<ul> <li>Constructs <code>YMD6</code> (6 digits) from <code>DUDMM</code> (month), <code>DUDDD</code> (day), and <code>DUDYY</code> (year) from <code>APSOGAS</code>.</li> <li>Converts system date <code>SYDYMD</code> to <code>MMDDYY</code> format (6 digits) by multiplying by 100.0001.</li> <li>Sets <code>INDT</code> (invoice date) to <code>MMDDYY</code>.</li> <li>Sets invoice number <code>INV#</code> to <code>ANCHNM</code> (check name) or <code>DESC</code> (description from LDA).</li> </ul> </li> <li>Validates invoice date (<code>INDT</code>):<ul> <li>Converts to <code>IYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts century <code>IYY</code> (2 digits).</li> <li>If <code>IYY</code> &gt;= <code>Y2KCMP</code> (e.g., 80), sets <code>ICN</code> (century) to <code>Y2KCEN</code> (e.g., 19); otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>INDT8</code> (8-digit date) using <code>ICN</code> and <code>IYMD</code>.</li> <li>Subtracts 1 year from <code>INDT8</code> to get <code>CMPDT8</code>.</li> </ul> </li> <li> <p>Validates due date (<code>DUDT</code>):</p> <ul> <li>Converts <code>YMD6</code> to <code>DUDT</code> (MMDDYY) by multiplying by 100.0001.</li> <li>Extracts century <code>DYY</code> (2 digits).</li> <li>If <code>DYY</code> &gt;= <code>Y2KCMP</code>, sets <code>DCN</code> to <code>Y2KCEN</code>; otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>DUDT8</code> (8-digit date) using <code>DCN</code> and <code>YMD6</code>.</li> <li>Chains to <code>APDATE</code> using <code>DUDT8</code> as the key (<code>DATEKY</code>).</li> <li>If found (indicator <code>92</code> off), replaces <code>DUDT8</code> and <code>DUDT</code> with <code>ADNED8</code> (non-holiday/weekend due date from <code>APDATE</code>).</li> </ul> </li> <li> <p>Validate Vendor:</p> </li> <li>Chains to <code>APSGACH</code> using <code>ANOWNR</code> (owner number from <code>APSOGAS</code>) (indicator <code>99</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, builds <code>VNKEY</code> (7 characters) using '10' and <code>AGVEND</code> (vendor number from <code>APSGACH</code>).</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code> (indicator <code>53</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, moves vendor data to fields:<ul> <li><code>VNAM</code> (vendor name), <code>VAD1\u2013VAD4</code> (address lines).</li> </ul> </li> <li> <p>If <code>VNHOLD</code> = 'H', sets indicator <code>55</code> on (vendor on hold).</p> </li> <li> <p>Add Transaction Header:</p> </li> <li>Calls subroutine <code>HDRADD</code>:<ul> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (entry key) (indicator <code>95</code> on if found).</li> <li>Sets indicator <code>70</code> on, writes header record (<code>EXCPTHEADER</code>), and sets <code>70</code> off.</li> </ul> </li> <li>Increments <code>NXLINE</code> (next line number, 3 digits) by 1.</li> <li>Writes detail record (<code>EXCPTDETAIL</code>).</li> <li> <p>Increments <code>ENT#</code> (entry number).</p> </li> <li> <p>Check and Update Entry Number:</p> </li> <li>If <code>ENT#</code> = 0 (indicator <code>60</code> on):<ul> <li>Builds <code>KEYENT</code> (10 characters) from <code>COENT</code> or '000' if not set.</li> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (indicator <code>51</code> on if found).</li> <li>If found, writes <code>RELAPC</code> exception to release <code>APCONT</code> and jumps to <code>ENDS1</code>.</li> </ul> </li> <li> <p>If <code>ENT#</code> \u2260 0:</p> <ul> <li>Sets <code>RECSTS</code> to 'ADDNEW'.</li> <li>Sets <code>ENT#</code> to <code>ACNXTE</code> (next entry number from <code>APCONT</code>).</li> <li>Increments <code>ACNXTE</code> and <code>ENT#</code> unless <code>ENT#</code> \u2265 99999 (indicator <code>61</code> on), then resets <code>ACNXTE</code> to 1.</li> <li>Updates <code>COENT</code> with <code>ENT#</code>.</li> <li>Writes <code>APCONT</code> update (<code>EXCPT</code> with indicator <code>79</code>) and clears <code>79</code>.</li> </ul> </li> <li> <p>Initialize Fields:</p> </li> <li> <p>Clears or initializes fields for the next record:</p> <ul> <li><code>CNVO</code>, <code>PPCK</code>, <code>PCKD</code>, <code>IAMT</code>, <code>RTGL</code>, <code>RTPC</code>, <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>SVDSPC</code>, <code>POSQ</code>, <code>PRAM</code>, <code>FRAM</code>, <code>SVLNGL</code>, <code>GALN</code>, <code>RCPT</code>, <code>JQTY</code>, <code>AMT</code>, <code>DISC</code> (numeric fields to 0).</li> <li><code>SNGL</code>, <code>HOLD</code>, <code>HLDD</code>, <code>RTGLNM</code>, <code>DDES</code>, <code>EXGLNM</code>, <code>JOB#</code>, <code>CTYP</code>, <code>ITEM</code>, <code>CAID</code> (character fields to blanks).</li> <li><code>CLCD</code> to 'C' (open/closed status).</li> <li><code>DSPC</code> to 0 if <code>SVDSPC</code> = 0.</li> <li>Sets <code>EXGL</code> (expense GL) to 12010008 (if <code>CANTAX</code> \u2260 'Y') or 12010009 (if <code>CANTAX</code> = 'Y').</li> </ul> </li> <li> <p>Output Records:</p> <ul> <li>Writes to <code>APTRAN</code>:</li> <li>Header Record (<code>EXCPTHEADER</code>):<ul> <li>Record type 'A', company '10', <code>ENT#</code>, <code>Z3</code>, <code>VNVEND</code>, <code>CNVO</code>, <code>APGL</code>, <code>ANCHNM</code>, <code>INV#</code>, <code>DUDT</code> (twice), <code>SNGL</code>, hold status ('A' or 'H' based on <code>VNHOLD</code>), hold description, <code>PPCK</code>, <code>VNAM</code>, <code>VAD1\u2013VAD4</code>, <code>BKGL</code>, <code>CHKAMT</code>, <code>RTPC</code>, <code>ATRTGL</code>, <code>DUDT8</code> (twice), <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>CAID</code>, <code>VNTERM</code>, <code>PTYP</code>, <code>INV#</code>.</li> </ul> </li> <li>Detail Record (<code>EXCPTDETAIL</code>):<ul> <li><code>DDEL</code>, company '10', <code>ENT#</code>, <code>NXLINE</code>, <code>VNVEND</code>, expense company '10', <code>EXGL</code> (12010008 or 12010009), <code>INV#</code>, <code>CHKAMT</code>, <code>DISC</code>, <code>DSPC</code>, <code>ITEM</code>, <code>LNQTY</code>, <code>JOB#</code>, <code>CTYP</code>, <code>JQTY</code>, <code>PONO</code>, <code>GALN</code>, <code>RCPT</code>, <code>CLCD</code> ('C'), <code>POSQ</code>, <code>CHKAMT</code>, <code>FRAM</code>.</li> </ul> </li> <li>Updates <code>APCONT</code>:</li> <li>Updates <code>ACNXTE</code> (next entry number) if indicator <code>79</code> is on.</li> <li>Releases <code>APCONT</code> via <code>RELAPC</code> exception.</li> </ul> </li> <li> <p>Loop Control:</p> <ul> <li>Jumps to <code>SKIP1</code> tag on validation failures (e.g., <code>APSGACH</code> or <code>APVEND</code> not found).</li> <li>Continues processing <code>APSOGAS</code> records until the end of the file.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Access:</li> <li> <p>Uses files dynamically labeled with a prefix (e.g., <code>?9?</code> from <code>AP105.ocl36</code>, derived from <code>&amp;P$FGRP</code> in <code>AP105PCL.clp</code>), supporting multiple file groups or environments.</p> </li> <li> <p>Vendor and Owner Validation:</p> </li> <li>Validates that <code>ANOWNR</code> from <code>APSOGAS</code> exists in <code>APSGACH</code> (indicator <code>99</code>).</li> <li>Validates that <code>AGVEND</code> from <code>APSGACH</code> exists in <code>APVEND</code> (indicator <code>53</code>).</li> <li> <p>Skips processing if either validation fails.</p> </li> <li> <p>Hold Status Handling:</p> </li> <li> <p>If <code>VNHOLD</code> = 'H' in <code>APVEND</code>, sets indicator <code>55</code> and marks the transaction header with 'H' and 'VENDOR ON HOLD' in the hold description; otherwise, uses 'A' and 'ON HOLD FOR ACH'.</p> </li> <li> <p>Due Date Adjustment:</p> </li> <li> <p>Replaces the due date (<code>DUDT8</code>) with a non-holiday/non-weekend date from <code>APDATE</code> (<code>ADNED8</code>) if found, ensuring payments are scheduled on valid business days.</p> </li> <li> <p>Invoice Description:</p> </li> <li> <p>Copies the invoice description from <code>DESC</code> (LDA) or <code>ANCHNM</code> (check name) to <code>INV#</code> for new records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Manages entry numbers (<code>ENT#</code>, <code>ACNXTE</code>) to ensure unique transaction identifiers, resetting to 1 if <code>ENT#</code> reaches 99999.</li> <li> <p>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</p> </li> <li> <p>Canadian Tax Handling:</p> </li> <li> <p>If <code>CANTAX</code> = 'Y', uses expense GL 12010009; otherwise, uses 12010008.</p> </li> <li> <p>Transaction Structure:</p> </li> <li>Creates header and detail records in <code>APTRAN</code> for each valid <code>APSOGAS</code> record, populating fields like vendor details, GL accounts, amounts, and dates.</li> <li> <p>Ensures detail records are linked to headers via <code>ENT#</code> and <code>NXLINE</code>.</p> </li> <li> <p>Y2K Date Handling:</p> </li> <li>Adjusts dates for century compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code> to determine whether to use the current or next century.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (1\u20137): Owner number.</li> <li><code>ANNAME</code> (8\u201342): Name.</li> <li><code>ANCHNM</code> (43\u201349): Check name.</li> <li><code>ANDATE</code> (50\u201359): Date (subfields: <code>CKDMM</code> 50\u201351, <code>CKDDD</code> 53\u201354, <code>CKDYY</code> 58\u201359).</li> <li><code>ANCHAM</code> (60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (66\u201375): Start date.</li> <li><code>ANENTE</code> (76\u201385): Entry date.</li> <li><code>ANDUDT</code> (86\u201395): Due date (subfields: <code>DUDMM</code> 86\u201387, <code>DUDDD</code> 89\u201390, <code>DUDYY</code> 92\u201393).</li> </ul> </li> <li> <p>Source of payment data for voucher creation.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (1\u20137): Owner number.</li> <li><code>AGVEND</code> (8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> and retrieve <code>AGVEND</code>.</p> </li> <li> <p>APTRAN (Update, Keyed, 404 bytes, 10-byte key):</p> </li> <li>Header Fields:<ul> <li><code>ATHDEL</code> (1): Header delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATAPGL</code> (24\u201331): A/P GL number.</li> <li><code>ATIDES</code> (42\u201366): Invoice description.</li> <li><code>ATINDT</code> (67\u201372): Invoice date.</li> <li><code>ATDUDT</code> (73\u201378): Due date.</li> <li><code>ATSNGL</code> (79): Single check flag.</li> <li><code>ATHOLD</code> (80): Hold flag.</li> <li><code>ATHLDD</code> (81\u2013105): Hold description.</li> <li><code>ATPAID</code> (106): Prepaid flag.</li> <li><code>ATPPCK</code> (107\u2013112): Prepaid check number.</li> <li><code>ATVNAM</code> (113\u2013142): Vendor name.</li> <li><code>ATVAD1\u2013ATVAD4</code> (143\u2013262): Address lines.</li> <li><code>ATBKGL</code> (263\u2013270): Bank GL number.</li> <li><code>ATIAMT</code> (271\u2013281): Invoice amount.</li> <li><code>ATRTGL</code> (282\u2013289): Retention GL.</li> <li><code>ATRTPC</code> (290\u2013295): Retention percentage.</li> <li><code>ATPCKD</code> (296\u2013301): Prepaid check date.</li> <li><code>ATFRTL</code> (326\u2013332): Freight to allocate.</li> <li><code>ATSORN</code> (348\u2013353): Sales order number.</li> <li><code>ATSSRN</code> (354\u2013356): Sales SRN number.</li> <li><code>ATCAID</code> (357\u2013362): Carrier ID.</li> <li><code>ATTERM</code> (363\u2013364): Vendor payment terms.</li> <li><code>ATPTYP</code> (365\u2013370): Process type.</li> <li><code>ATDSDT</code> (371\u2013376): Discount due date.</li> <li><code>ATINV#</code> (385\u2013404): Vendor invoice number.</li> </ul> </li> <li>Detail Fields:<ul> <li><code>ATDDEL</code> (1): Detail delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATEXCO</code> (18\u201319): Expense company.</li> <li><code>ATEXGL</code> (20\u201327): Expense GL number.</li> <li><code>ATDDES</code> (28\u201352): Detail description.</li> <li><code>ATAMT</code> (53\u201358, packed): Detail line amount.</li> <li><code>ATDISC</code> (59\u201364, packed): Discount.</li> <li><code>ATDSPC</code> (65\u201369): Discount percentage.</li> <li><code>ATITEM</code> (79\u201391): Inventory item number.</li> <li><code>ATQTY</code> (92\u201397, packed): Inventory quantity.</li> <li><code>ATJOB#</code> (100\u2013105): Job number.</li> <li><code>ATCCOD</code> (108\u2013113): Job cost code.</li> <li><code>ATCTYP</code> (114\u2013115): Job cost type.</li> <li><code>ATJQTY</code> (116\u2013119, packed): Job cost quantity.</li> <li><code>ATPONO</code> (120\u2013125): Purchase order number.</li> <li><code>ATGALN</code> (126\u2013129, packed): Gallons.</li> <li><code>ATRCPT</code> (130\u2013136): Receipt number.</li> <li><code>ATCLCD</code> (137): Open/closed status.</li> <li><code>ATPOSQ</code> (138\u2013140): PO line sequence.</li> <li><code>ATPRAM</code> (141\u2013146, packed): Product amount.</li> <li><code>ATFRAM</code> (147\u2013150, packed): Freight amount.</li> </ul> </li> <li> <p>Stores transaction header and detail records.</p> </li> <li> <p>APCONT (Update, Keyed, 256 bytes, 2-byte key):</p> </li> <li>Fields:<ul> <li><code>ACDEL</code> (1): Delete flag.</li> <li><code>ACAPGL</code> (34\u201341): A/P GL number.</li> <li><code>ACCAGL</code> (42\u201349): Cash GL number.</li> <li><code>ACDSGL</code> (50\u201357): Discounts GL number.</li> <li><code>ACNXTE</code> (76\u201380): Next entry number.</li> <li><code>ACJCYN</code> (87): Job cost active flag.</li> <li><code>ACRTGL</code> (88\u201395): Retention GL number.</li> <li><code>ACPOYN</code> (96): PO active flag.</li> <li><code>ACEEGL</code> (97\u2013104): Employee expense GL number.</li> </ul> </li> <li> <p>Stores control data and manages entry numbers.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (1): Record code.</li> <li><code>VNCO</code> (2\u20133): Company number.</li> <li><code>VNVEND</code> (4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (9\u201338): Vendor name.</li> <li><code>VNAD1\u2013VNAD4</code> (39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (240): Hold invoices flag.</li> <li><code>VNSNGL</code> (241): Single check flag.</li> <li><code>VNEXGL</code> (254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (388\u2013390): ACH class.</li> <li><code>VNACOS</code> (391): ACH checking or savings.</li> <li><code>VNARTE</code> (392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate and retrieve vendor details.</p> </li> <li> <p>APDATE (Input, Keyed, 19 bytes, 10-byte key):</p> </li> <li>Fields:<ul> <li><code>ADDEL</code> (1): Delete flag.</li> <li><code>ADCO</code> (2\u20133): Company.</li> <li><code>ADDUD8</code> (4\u201311): Calculated due date.</li> <li><code>ADNED8</code> (12\u201319): New due date (non-holiday/weekend).</li> </ul> </li> <li>Used to adjust due dates to valid business days.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It relies on subroutines (<code>HDRADD</code>) and file operations.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files and data structures, initialize variables, retrieve control data, process dates and invoice numbers, validate vendors, adjust due dates, add header and detail records to <code>APTRAN</code>, manage entry numbers, and update <code>APCONT</code>.</li> <li>Business Rules: Validates owners and vendors, adjusts due dates for holidays/weekends, applies hold status for vendors, manages entry numbers, supports Canadian tax GL accounts, and ensures Y2K-compliant dates.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APTRAN</code> (transaction headers/details), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>APDATE</code> (due date adjustments).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program processes <code>APSOGAS</code> records to create A/P vouchers in <code>APTRAN</code>, validates data, adjusts dates, and handles vendor hold status, preparing transactions for ACH payment export.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/","title":"AP105P RPG","text":"<p>Let\u2019s analyze the provided RPG program <code>AP105P.rpg</code> to extract the process steps, business rules, tables used, and external programs called. This program is called by the CLP program <code>AP105PCL.clp</code> and is part of the A/P SOGAS ACH payment processing system on IBM i.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105P.rpg</code> performs the following steps:</p> <ol> <li>File Declarations:</li> <li>Defines the following files:<ul> <li><code>AP105PSC</code>: Workstation file (screen display file).</li> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>LIST132</code>: Output printer file (132 bytes).</li> </ul> </li> <li> <p>Defines the User Data Structure (UDS) for Local Data Area (LDA) fields:</p> <ul> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>UPTYPE</code> (position 121, positive/negative dollar values flag)</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Accepts a single 1-character parameter <code>@FGRP</code> via <code>*ENTRY PLIST</code>.</p> </li> <li> <p>Initialization (Indicator 09 Off):</p> </li> <li> <p>If indicator <code>09</code> is off (likely controlled by file status or program logic):</p> <ul> <li>Initializes counters:</li> <li><code>COUNT</code> (5-digit numeric) to 0.</li> <li><code>ERRCNT</code> (5-digit numeric, error count) to 0.</li> <li><code>DUP</code> (5-digit numeric, duplicate count) to 0.</li> <li><code>DATES</code> (5-digit numeric) to 0.</li> <li><code>ERRORS</code> (LDA position 106) to blanks.</li> <li>Captures system time and date:</li> <li>Stores current time/date in <code>TIMDAT</code> (12 digits).</li> <li>Extracts time to <code>SYTIME</code> (6 digits).</li> <li>Extracts date to <code>SYDATE</code> (6 digits).</li> <li>Converts <code>SYDATE</code> to <code>SYDYMD</code> (YYYYMMDD format) by multiplying by 10000.01.</li> <li>Extracts <code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>Sets indicators:</li> <li>Sets indicator <code>09</code> and <code>51</code> on.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> on.</li> <li>If both <code>54</code> and <code>55</code> are off, sets indicator <code>56</code> on and sets <code>ERRORS</code> to 'Y', then turns off indicators <code>50</code> and <code>51</code>.</li> </ul> </li> <li> <p>Increment Counter:</p> </li> <li> <p>Increments <code>COUNT</code> by 1 for each record processed.</p> </li> <li> <p>Validation of <code>APSOGAS</code> Record:</p> </li> <li>Uses <code>ANOWNR</code> (owner number, positions 1\u20137) from <code>APSOGAS</code> to chain (lookup) in <code>APSGACH</code>.</li> <li>If the chain fails (indicator <code>99</code> on, record not found):<ul> <li>Increments <code>ERRCNT</code>.</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Jumps to <code>SKIP</code> tag (bypassing further processing for this record).</li> </ul> </li> <li> <p>If the chain succeeds (indicator <code>99</code> off):</p> <ul> <li>Builds a 7-character key <code>VNKEY</code> by combining a hardcoded '10' with <code>AGVEND</code> (vendor number) from <code>APSGACH</code>.</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code>.</li> <li>If the chain to <code>APVEND</code> fails (indicator <code>53</code> on, vendor not found):</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Sets <code>ERRORS</code> to 'Y'.</li> <li>Increments <code>ERRCNT</code>.</li> <li>Writes an exception output (<code>EXCPT</code>) to <code>LIST132</code>.</li> <li>Jumps to <code>SKIP</code> tag.</li> </ul> </li> <li> <p>Clear and Display Screen:</p> </li> <li>If indicator <code>50</code> is off, clears indicator <code>56</code>.</li> <li> <p>Executes <code>EXFMT</code> (write/read) for <code>SCREEN1</code> in the <code>AP105PSC</code> display file.</p> </li> <li> <p>Output to Printer:</p> </li> <li>Writes to <code>LIST132</code> (printer file) with fields:<ul> <li><code>ANOWNR</code> (positions 1\u201310)</li> <li><code>ERRCNT</code> (positions 11\u201317)</li> <li><code>ANNAME</code> (positions 18\u201355)</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Owner Validation:</li> <li> <p>Each <code>APSOGAS</code> record\u2019s <code>ANOWNR</code> must exist in <code>APSGACH</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and processing skips to the next record.</p> </li> <li> <p>Vendor Validation:</p> </li> <li> <p>The vendor number (<code>AGVEND</code>) from <code>APSGACH</code> must exist in <code>APVEND</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and an exception report is generated.</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>Errors are tracked via <code>ERRCNT</code> and the <code>ERRORS</code> flag in the LDA (position 106). If errors occur, the program may signal to the calling CLP (<code>AP105PCL</code>) to skip further processing (e.g., S/36 procedure <code>AP105</code>).</p> </li> <li> <p>Canadian Tax and Upload Type Checks:</p> </li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> to flag Canadian tax-related processing.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> to flag specific dollar value handling (positive/negative).</li> <li> <p>If neither condition is met (<code>54</code> and <code>55</code> off), sets <code>ERRORS</code> to 'Y' and indicator <code>56</code> on, indicating a validation failure.</p> </li> <li> <p>Dynamic File Processing:</p> </li> <li> <p>The program processes records from <code>APSOGAS</code> and validates against <code>APSGACH</code> and <code>APVEND</code>, ensuring data integrity for A/P SOGAS ACH payments.</p> </li> <li> <p>Reporting:</p> </li> <li>Outputs errors or processing results to a printer file (<code>LIST132</code>) for reporting, including owner number, error count, and name.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>ANNAME</code> (positions 8\u201342): Name.</li> <li><code>ANCHNM</code> (positions 43\u201349): Check name.</li> <li><code>ANDATE</code> (positions 50\u201359): Date.</li> <li><code>ANCHAM</code> (positions 60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (positions 66\u201375): Start date.</li> <li><code>ANENTE</code> (positions 76\u201385): Entry date.</li> <li><code>ANDUDT</code> (positions 86\u201395): Due date.</li> </ul> </li> <li> <p>Used as the primary input file for payment data.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>AGVEND</code> (positions 8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> from <code>APSOGAS</code>.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1): Record code.</li> <li><code>VNCO</code> (positions 2\u20133): Company number.</li> <li><code>VNVEND</code> (positions 4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (positions 9\u201338): Vendor name.</li> <li><code>VNAD1</code> to <code>VNAD4</code> (positions 39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (position 240): Hold invoices flag.</li> <li><code>VNSNGL</code> (position 241): Single check flag.</li> <li><code>VNEXGL</code> (positions 254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (positions 262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (positions 294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (positions 384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (positions 388\u2013390): ACH class.</li> <li><code>VNACOS</code> (position 391): ACH checking or savings.</li> <li><code>VNARTE</code> (positions 392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (positions 401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate vendors associated with <code>AGVEND</code> from <code>APSGACH</code>.</p> </li> <li> <p>LIST132 (Output, Printer, 132 bytes):</p> </li> <li> <p>Used to generate a report with <code>ANOWNR</code>, <code>ERRCNT</code>, and <code>ANNAME</code>.</p> </li> <li> <p>AP105PSC (Workstation, Display File):</p> </li> <li>Contains <code>SCREEN1</code> for interactive display (written and read via <code>EXFMT</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It interacts with the display file <code>AP105PSC</code> and printer file <code>LIST132</code> but does not invoke other RPG or CL programs.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files, initialize counters and LDA, process <code>APSOGAS</code> records, validate against <code>APSGACH</code> and <code>APVEND</code>, handle errors, display screen, and output to printer.</li> <li>Business Rules: Validates owner and vendor numbers, tracks errors in LDA, handles Canadian tax and upload type flags, and generates error reports.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APVEND</code> (vendor details), <code>LIST132</code> (printer output), <code>AP105PSC</code> (display file).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program validates A/P SOGAS ACH payment records, ensuring owners and vendors exist in the respective files, and reports errors via a printer file and interactive screen.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/","title":"AP105PCL CLP","text":"<p>Let\u2019s analyze the provided AS400 IBM i CLP (Control Language Program) <code>AP105PCL.clp</code> to extract the process steps, business rules, programs called, and tables used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#process-steps","title":"Process Steps","text":"<p>The program performs the following sequential steps:</p> <ol> <li>Declare Variables:</li> <li>Defines a parameter <code>&amp;P$FGRP</code> (1-character input parameter).</li> <li> <p>Declares character variables:</p> <ul> <li><code>&amp;APSOGAS</code> (10 characters)</li> <li><code>&amp;APSOGASH</code> (10 characters)</li> <li><code>&amp;APSGACH</code> (10 characters)</li> <li><code>&amp;APVEND</code> (10 characters)</li> <li><code>&amp;PARM9</code> (10 characters)</li> </ul> </li> <li> <p>Construct File Names:</p> </li> <li>Concatenates the input parameter <code>&amp;P$FGRP</code> with fixed strings to create file names:<ul> <li><code>&amp;APSOGAS</code> = <code>&amp;P$FGRP</code> + 'APSOGAS'</li> <li><code>&amp;APSOGASH</code> = <code>&amp;P$FGRP</code> + 'APSOGASH'</li> <li><code>&amp;APSGACH</code> = <code>&amp;P$FGRP</code> + 'APSGACH'</li> <li><code>&amp;APVEND</code> = <code>&amp;P$FGRP</code> + 'APVEND'</li> </ul> </li> <li> <p>Constructs a parameter string <code>&amp;PARM9</code> by concatenating ',,,,,,,,' with <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Override Database Files:</p> </li> <li> <p>Overrides the logical files to point to the physical files in the library list (<code>*LIBL</code>):</p> <ul> <li><code>APSOGAS</code> to <code>&amp;APSOGAS</code> (first member)</li> <li><code>APSOGASH</code> to <code>&amp;APSOGASH</code> (first member)</li> <li><code>APSGACH</code> to <code>&amp;APSGACH</code> (first member)</li> <li><code>APVEND</code> to <code>&amp;APVEND</code> (first member)</li> </ul> </li> <li> <p>Call Program:</p> </li> <li> <p>Calls the program <code>AP105P</code>, passing the parameter <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Check Local Data Area (LDA):</p> </li> <li>Checks if position 106 of the LDA (Local Data Area) contains 'Y'.</li> <li> <p>If true:</p> <ul> <li>Clears the LDA (positions 1 to 512) to blanks.</li> <li>Returns (exits the program).</li> </ul> </li> <li> <p>Start S/36 Procedure:</p> </li> <li>If the LDA condition is not met, calls the S/36 procedure <code>AP105</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li> <p>Note: A commented-out line suggests a hardcoded parameter <code>',,,,,,,,G'</code> was previously used.</p> </li> <li> <p>Clean Up:</p> </li> <li>Deletes all file overrides (<code>DLTOVR FILE(*ALL)</code>).</li> <li> <p>Clears the LDA (positions 1 to 512) to blanks.</p> </li> <li> <p>End Program:</p> </li> <li>Ends the program with <code>ENDPGM</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#business-rules","title":"Business Rules","text":"<p>The program includes the following business rules:</p> <ol> <li>Dynamic File Naming:</li> <li> <p>File names are dynamically constructed by prefixing the input parameter <code>&amp;P$FGRP</code> to fixed file suffixes (<code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>). This implies the program supports multiple file groups or environments based on the input parameter.</p> </li> <li> <p>Conditional Logic Based on LDA:</p> </li> <li> <p>If position 106 of the LDA contains 'Y', the program clears the LDA and exits without invoking the S/36 procedure. This suggests that <code>AP105P</code> may set this flag to indicate a condition (e.g., error or completion) that skips further processing.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>The program ensures that file operations use the correct files by overriding them to the dynamically named files in the library list, ensuring flexibility across different file groups or environments.</p> </li> <li> <p>S/36 Compatibility:</p> </li> <li>The use of <code>STRS36PRC</code> indicates compatibility with System/36 procedures, suggesting this program may be part of a legacy system or migration to IBM i.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#programs-called","title":"Programs Called","text":"<p>The program invokes the following:</p> <ol> <li>AP105P:</li> <li>A program called via <code>CALL PGM(AP105P)</code> with the parameter <code>&amp;P$FGRP</code>.</li> <li> <p>Likely an IBM i program that processes A/P SOGAS ACH payments, possibly setting the LDA flag at position 106.</p> </li> <li> <p>AP105:</p> </li> <li>A System/36 procedure called via <code>STRS36PRC PRC(AP105)</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li>This procedure likely performs additional processing for A/P SOGAS ACH payments in a System/36 environment.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Overridden to <code>&amp;APSOGAS</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Likely contains A/P SOGAS ACH payment data.</p> </li> <li> <p>APSOGASH:</p> </li> <li>Overridden to <code>&amp;APSOGASH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGASH').</li> <li> <p>Likely a header file or summary data for A/P SOGAS ACH payments.</p> </li> <li> <p>APSGACH:</p> </li> <li>Overridden to <code>&amp;APSGACH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSGACH').</li> <li> <p>Likely contains ACH-specific data for A/P SOGAS payments.</p> </li> <li> <p>APVEND:</p> </li> <li>Overridden to <code>&amp;APVEND</code> (constructed as <code>&amp;P$FGRP</code> + 'APVEND').</li> <li>Likely a vendor master file containing vendor details for A/P payments.</li> </ol> <p>These files are accessed from the library list (<code>*LIBL</code>) and use the first member (<code>*FIRST</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare variables, construct file names, override files, call <code>AP105P</code>, check LDA, call S/36 procedure <code>AP105</code> (if LDA condition not met), clean up overrides, clear LDA, and end.</li> <li>Business Rules: Dynamic file naming based on <code>&amp;P$FGRP</code>, conditional exit based on LDA position 106, file overrides for flexibility, and S/36 compatibility.</li> <li>Programs Called: <code>AP105P</code> (IBM i program), <code>AP105</code> (System/36 procedure).</li> <li>Tables Used: <code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>.</li> </ul> <p>This program serves as a wrapper to check and process A/P SOGAS ACH payment files, bridging IBM i and System/36 environments.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/","title":"AP200 OCL","text":"<p>The provided document is an AS/400 Operation Control Language (OCL) procedure (<code>AP200.ocl36.txt</code>) that manages the Purchase Journal for posting voucher transactions in an Accounts Payable (A/P) system. Below, I\u2019ll explain the process steps in a clear, structured manner, breaking down the key operations, checks, and logic flow of the OCL file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#overview","title":"Overview","text":"<p>The <code>AP200</code> OCL procedure automates the posting of A/P voucher or wire transfer transactions to the Purchase Journal. It performs validations, sorts data, updates files, and generates reports. The procedure includes error handling, file management, and integration with other processes (e.g., inventory, job costing). It also supports wire transfer (<code>WT</code>) processing and ensures that certain conditions are met before proceeding.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#1-initial-setup-and-metadata","title":"1. Initial Setup and Metadata","text":"<ul> <li>Comments and Revisions:</li> <li>The file includes metadata about revisions, such as:<ul> <li><code>JB01</code> (09/14/14, Jan Beccari): Added posting to inventory transaction holding (<code>INTZH</code>).</li> <li><code>JK01</code> (03/27/15, Jimmy Krajacic): Added support for carrier freight invoices (<code>FRCINV</code>) when a voucher is deleted.</li> <li><code>JB</code> (06/07/21): Prevents A/P voucher posting during inventory beginning-of-week processing (<code>INTSZZ</code>).</li> </ul> </li> <li>Wire Transfer Check:</li> <li>The procedure checks if the user selected the \"Wire Transfer\" journal option (<code>WT</code>).<ul> <li>If <code>?3?/WT</code>, sets <code>P20='APWT?WS?'</code> (wire transfer file).</li> <li>Otherwise, sets <code>P20='APTR?WS?'</code> (standard transaction file).</li> </ul> </li> <li>Switch Initialization:</li> <li>Initializes <code>SWITCH</code> to <code>00000000</code> for conditional logic.</li> <li>Sets <code>SWITCH 10000000</code> if specific file conditions are met (e.g., <code>DATAF1-?9??20?</code> or <code>?F'A,?9??20?'?/00000000</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#2-pre-posting-validations","title":"2. Pre-Posting Validations","text":"<p>The procedure performs several checks to ensure the system is in a valid state for posting:</p> <ul> <li>No Voucher or Wire Transaction File:</li> <li> <p>If <code>SWITCH1-1</code> (indicating no A/P voucher or wire transaction file exists):</p> <ul> <li>Displays: \"NO A/P VOUCHER OR WIRE TRANSACTION FILE TO POST\".</li> <li>Prompts user to press <code>0, ENTER</code> to cancel.</li> <li>Jumps to <code>END</code>.</li> </ul> </li> <li> <p>Payment Cycle Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?APPT?WS?</code> (payment cycle file exists):</p> <ul> <li>Deletes <code>?9?APPT?WS?,F1</code> if conditions allow.</li> <li>Displays a warning: \"THE PAYMENT CYCLE MUST BE ENDED FROM THIS WORKSTATION BEFORE THIS PURCHASE JOURNAL CAN BE RUN\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Concurrent Purchase Register:</p> </li> <li> <p>If <code>ACTIVE-AP200</code> (another A/P purchase register is running):</p> <ul> <li>Displays: \"AN A/P PURCHASE REGISTER IS ALREADY IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Inventory Beginning-of-Week Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?INTSZZ</code> (inventory beginning-of-week process is active):</p> <ul> <li>Displays: \"INVENTORY BEGINNING OF WEEK IS IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Voucher Batch Errors:</p> </li> <li>Checks <code>?9?APSTAT</code> for errors in the voucher table (from <code>AP110</code>).</li> <li>If <code>?L'231,3'?/YES</code> (errors exist):<ul> <li>Displays: \"ERRORS EXIST IN THE BATCH. PLEASE RETURN TO THE BATCH AND CORRECT THE ERRORS\".</li> <li>Pauses and jumps to <code>END</code>.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#3-file-and-variable-initialization","title":"3. File and Variable Initialization","text":"<ul> <li>Clear Variables:</li> <li>Sets <code>LOCAL BLANK-*ALL</code> to clear local variables.</li> <li>Set Journal Type:</li> <li>If <code>?3?/WT</code>, sets <code>OFFSET-198,DATA-'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets <code>OFFSET-198,DATA-'                       '</code>.</li> <li>Set Workstation:</li> <li>Sets <code>OFFSET-300,DATA-'?WS?'</code> (workstation ID).</li> <li>Create Temporary File:</li> <li>Builds <code>?9?APPT?WS?</code> (payment transaction file) with 200 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#4-load-and-run-initial-program-ap200p","title":"4. Load and Run Initial Program (<code>AP200P</code>)","text":"<ul> <li>Program: <code>AP200P</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>APPYTR</code>: Payment transaction file (<code>?9?APPT?WS?</code>).</li> <li><code>GSTABL</code>, <code>GSCONT</code>, <code>GLCONT</code>: Shared general ledger and system control files.</li> <li>Action:</li> <li>Runs <code>AP200P</code> to process initial transaction data.</li> <li>Cancel Check:</li> <li>If <code>?L'129,6'?/CANCEL</code>, deletes <code>APPT?WS?</code> and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#5-file-cleanup-and-temporary-file-creation","title":"5. File Cleanup and Temporary File Creation","text":"<ul> <li>Delete Temporary Files:</li> <li>Deletes <code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APJC?WS?</code> using <code>GSDELETE</code>.</li> <li>Create Job Cost Transaction File:</li> <li>Builds <code>?9?APJC?WS?</code> with 999,000 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#6-sort-transactions-gsort","title":"6. Sort Transactions (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9??20?</code> (transaction file).</li> <li>Output File: <code>?9?APXX?WS?</code> (sorted transaction file, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Vendor (<code>FNC 12 16</code>).</li> <li>Entry/Entry Sequence (<code>FNC 4 11</code>).</li> </ul> </li> <li>Copies fields 1\u2013256 and 257\u2013404 (<code>FDC</code>).</li> <li>Action:</li> <li>Executes sort to organize transactions for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#7-run-main-purchase-journal-program-ap200","title":"7. Run Main Purchase Journal Program (<code>AP200</code>)","text":"<ul> <li>Program: <code>AP200</code></li> <li>Files:</li> <li><code>APTRAN</code>: Sorted transactions (<code>?9?APXX?WS?</code>).</li> <li><code>APCONT</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>: A/P control, vendor, and open item files (shared).</li> <li><code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>: A/P history files (shared).</li> <li><code>APINVH</code>: Invoice header file (shared).</li> <li><code>POFILEH</code>, <code>POFILED</code>: Purchase order files (shared).</li> <li><code>JCTRAN</code>: Job cost transactions (<code>?9?APJC?WS?</code>).</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>APPYTR</code>: Payment transactions (<code>?9?APPT?WS?</code>).</li> <li><code>FRCINH</code>, <code>FRCFBH</code>: Freight invoice files (shared).</li> <li>Printer Overrides:</li> <li>If <code>?9?/G</code>, sets output queue to <code>QUSRSYS/APPOST</code>.</li> <li>Otherwise, sets output queue to <code>QUSRSYS/TESTOUTQ</code>.</li> <li>Action:</li> <li>Runs <code>AP200</code> to process transactions, update A/P files, and generate the Purchase Journal report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#8-sort-journal-register-gsort","title":"8. Sort Journal Register (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9?APPJ?WS?</code> (journal register).</li> <li>Output File: <code>?9?APPK?WS?</code> (sorted journal register, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Control/Distribution (<code>FNC 12 12</code>).</li> <li>A/P, Expense, Inter-Company (<code>FNC 106 115</code>).</li> <li>G/L Account (<code>FNC 13 20</code>).</li> </ul> </li> <li>Includes records where field 1 is not empty (<code>I C 1 1NECD</code>).</li> <li>Action:</li> <li>Sorts the journal register for further processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#9-run-journal-summary-program-ap205","title":"9. Run Journal Summary Program (<code>AP205</code>)","text":"<ul> <li>Program: <code>AP205</code></li> <li>Files:</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>AP205S</code>: Sorted journal register (<code>?9?APPK?WS?</code>).</li> <li><code>APCONT</code>: A/P control file (shared).</li> <li><code>TEMGEN</code>: Temporary general ledger file (shared).</li> <li>Printer Overrides:</li> <li>Same as <code>AP200</code> (output queue <code>APPOST</code> or <code>TESTOUTQ</code>).</li> <li>Action:</li> <li>Runs <code>AP205</code> to summarize journal entries and produce reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#10-post-job-cost-transactions-conditional","title":"10. Post Job Cost Transactions (Conditional)","text":"<ul> <li>Condition:</li> <li>If <code>?F'A,?9?APJC?WS?'?/00000000</code> (job cost transaction file exists) and procedure <code>JC200</code> exists in the library (<code>?CLIB?</code>).</li> <li>Action:</li> <li>Calls <code>JC200</code> with <code>APJC?WS?</code> to post job cost transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#11-post-ap-invoices-to-inventory-receipts-ap210","title":"11. Post A/P Invoices to Inventory Receipts (<code>AP210</code>)","text":"<ul> <li>Program: <code>AP210</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>INFIL1</code>, <code>INTZH1</code>: Inventory files (shared).</li> <li>Printer:</li> <li>Output to <code>APLIST</code> (device <code>PJ</code>, form <code>JBAP</code>, priority 0).</li> <li>Action:</li> <li>Posts A/P invoices to inventory receipt records.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#12-cleanup-temporary-files","title":"12. Cleanup Temporary Files","text":"<ul> <li>Action:</li> <li>Deletes temporary files using <code>GSDELETE</code>:<ul> <li><code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APTX?WS?</code>, <code>APXX?WS?</code>.</li> <li><code>?20?</code>, <code>APCT?WS?</code>, <code>APJC?WS?</code>.</li> <li><code>APPT?WS?</code> (if no records exist).</li> </ul> </li> <li>Condition:</li> <li>If <code>DATAF1-?9?APPT?WS?</code>, skips deletion and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#13-automatic-prepaid-invoice-processing","title":"13. Automatic Prepaid Invoice Processing","text":"<ul> <li>Action:</li> <li>Displays: \"AUTOMATIC PROCESSING OF PREPAID INVOICES IS EXECUTING\".</li> <li>Calls procedures:<ul> <li><code>AP150</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP160</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP250</code> (auto mode, parameter <code>?3?</code>).</li> </ul> </li> <li>Purpose:</li> <li>Processes prepaid invoices automatically.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#14-final-cleanup","title":"14. Final Cleanup","text":"<ul> <li>LMS Identifier Deletion:</li> <li>If <code>DATAF1-?9?LMS?WS?</code> (LMS batch identifier exists), deletes <code>LMS?WS?</code>.</li> <li>Reset State:</li> <li>Clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Resets <code>SWITCH</code> to <code>00000000</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#15-end-of-procedure","title":"15. End of Procedure","text":"<ul> <li>Tag: <code>END</code></li> <li>Action:</li> <li>Terminates the procedure after all processing or upon cancellation/error.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#key-features-and-notes","title":"Key Features and Notes","text":"<ul> <li>Error Handling:</li> <li>The procedure includes robust checks to prevent conflicts (e.g., concurrent processes, payment cycle locks, inventory conflicts).</li> <li>User prompts ensure manual intervention when errors occur.</li> <li>File Management:</li> <li>Temporary files (<code>APPJ?WS?</code>, <code>APPK?WS?</code>, etc.) are created and deleted to manage data during processing.</li> <li>Shared files (e.g., <code>APCONT</code>, <code>APVEND</code>) are accessed in shared mode (<code>DISP-SHR</code>) to allow concurrent access.</li> <li>Sorting:</li> <li>Two sorting steps (<code>#GSORT</code>) organize transactions and journal entries for accurate posting and reporting.</li> <li>Modularity:</li> <li>Calls external programs (<code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>JC200</code>) and procedures (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>) for specific tasks.</li> <li>Wire Transfer Support:</li> <li>Differentiates between standard transactions (<code>APTR?WS?</code>) and wire transfers (<code>APWT?WS?</code>).</li> <li>Inventory Integration:</li> <li>Posts to inventory receipts (<code>AP210</code>) and prevents conflicts with inventory processes (<code>INTSZZ</code>).</li> <li>Freight Invoices:</li> <li>Supports carrier freight invoice processing (<code>FRCINV</code>) when vouchers are deleted.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#flow-summary","title":"Flow Summary","text":"<ol> <li>Validate environment (no conflicts, no errors in voucher batch).</li> <li>Initialize variables and files (set <code>WT</code>, create <code>APPT?WS?</code>).</li> <li>Process initial transactions (<code>AP200P</code>).</li> <li>Sort transactions (<code>#GSORT</code> to <code>APXX?WS?</code>).</li> <li>Post to Purchase Journal (<code>AP200</code>, update A/P and related files).</li> <li>Sort journal register (<code>#GSORT</code> to <code>APPK?WS?</code>).</li> <li>Summarize journal (<code>AP205</code>).</li> <li>Post job cost transactions (if applicable, <code>JC200</code>).</li> <li>Post to inventory receipts (<code>AP210</code>).</li> <li>Process prepaid invoices (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>).</li> <li>Clean up (delete temporary files, reset state).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#assumptions-and-clarifications","title":"Assumptions and Clarifications","text":"<ul> <li>Parameters:</li> <li><code>?9?</code>: Library name (dynamic).</li> <li><code>?WS?</code>: Workstation ID.</li> <li><code>?3?</code>: Likely a mode or batch parameter.</li> <li><code>?20?</code>: File name (<code>APTR?WS?</code> or <code>APWT?WS?</code> based on <code>WT</code>).</li> <li>System Context:</li> <li>Runs on IBM AS/400 with RPG programs and OCL.</li> <li>Assumes a multi-user environment with shared files.</li> <li>External Dependencies:</li> <li>Programs: <code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>#GSORT</code>, <code>JC200</code>.</li> <li>Procedures: <code>AP150</code>, <code>AP160</code>, <code>AP250</code>.</li> <li>Files: A/P, inventory, purchase order, job cost, and freight invoice files.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with labels indicating temporary or shared files: 1. APTRAN (<code>?9??20?</code>, either <code>APTR?WS?</code> or <code>APWT?WS?</code>): Transaction file for vouchers or wire transfers. 2. APPYTR (<code>?9?APPT?WS?</code>): Payment transaction file (temporary). 3. GSTABL (<code>?9?GSTABL</code>, shared): General system table. 4. GSCONT (<code>?9?GSCONT</code>, shared): General system control file. 5. GLCONT (<code>?9?GLCONT</code>, shared): General ledger control file. 6. APCONT (<code>?9?APCONT</code>, shared): A/P control file. 7. APVEND (<code>?9?APVEND</code>, shared): Vendor master file. 8. APOPEN (<code>?9?APOPEN</code>, shared): Open A/P file. 9. APOPENH (<code>?9?APOPNH</code>, shared): Open A/P header file. 10. APOPEND (<code>?9?APOPND</code>, shared): Open A/P detail file. 11. APOPENV (<code>?9?APOPNV</code>, shared): Open A/P vendor file. 12. APHISTH (<code>?9?APHSTH</code>, shared): A/P history header file. 13. APHISTD (<code>?9?APHSTD</code>, shared): A/P history detail file. 14. APHISTV (<code>?9?APHSTV</code>, shared): A/P history vendor file. 15. APINVH (<code>?9?APINVH</code>, shared): A/P invoice header file. 16. POFILEH (<code>?9?POFILH</code>, shared): Purchase order header file. 17. POFILED (<code>?9?POFILD</code>, shared): Purchase order detail file. 18. JCTRAN (<code>?9?APJC?WS?</code>, temporary): Job cost transaction file. 19. APPJJR (<code>?9?APPJ?WS?</code>, temporary): Journal register file. 20. AP205S (<code>?9?APPK?WS?</code>, temporary): Sorted journal register file. 21. FRCINH (<code>?9?FRCINH</code>, shared): Freight invoice header file. 22. FRCFBH (<code>?9?FRCFBH</code>, shared): Freight bill header file. 23. TEMGEN (<code>?9?TEMGEN</code>, shared): Temporary general ledger file. 24. INFIL1 (<code>?9?INFIL1</code>, shared): Inventory file. 25. INTZH1 (<code>?9?INTZH1</code>, shared): Inventory transaction holding file. 26. APSTAT (<code>?9?APSTAT</code>): A/P status file for error checking. 27. LMS?WS? (<code>?9?LMS?WS?</code>, temporary): LMS system identifier file. 28. APXX?WS? (<code>?9?APXX?WS?</code>, temporary): Sorted transaction file. 29. APTX?WS? (<code>?9?APTX?WS?</code>, temporary): Temporary transaction file. 30. APCT?WS? (<code>?9?APCT?WS?</code>, temporary): Temporary A/P control file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/","title":"AP200 RPG","text":"<p>The RPG program <code>AP200</code> is an Accounts Payable (A/P) Purchase Register program that processes vendor invoices, vouchers, and related transactions. Below is a detailed analysis of the process steps, business rules, tables used, and external programs called based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#process-steps","title":"Process Steps","text":"<p>The program follows a structured flow to process A/P transactions, including header and detail records, cancellations, intercompany transfers, and updates to various files. The main steps are:</p> <ol> <li>Initialization (ONCE routine):</li> <li>Executes once at program start.</li> <li>Converts the journal date (<code>JRDATE</code>) to a year-month-day format (<code>PJYMD</code>).</li> <li>Handles Y2K logic to determine the century (<code>JCN</code>).</li> <li>Initializes variables (e.g., <code>Z5</code>, <code>Z6</code>, <code>Z7</code>, <code>Z8</code>, <code>Z9</code>, <code>Z10</code>, <code>Z4</code>, <code>ONE1</code>, <code>ONE3</code>, <code>TWO1</code>, <code>THREE1</code>) to zeros or specific values.</li> <li> <p>Sets the <code>POKEY</code> to '000' and increments the <code>ONCE</code> counter.</p> </li> <li> <p>Level 2 Processing (L2DET subroutine):</p> </li> <li>Initializes page number, captures system time and date.</li> <li>Converts system date (<code>SYSDAT</code>) to a year-month-day format (<code>SYSYMD</code>).</li> <li>Chains to <code>APCONT</code> to retrieve company data and next voucher number (<code>ACNXVO</code>).</li> <li>Determines journal ID (<code>JRNID</code>) based on wire transfer flag (<code>WIRE</code>):<ul> <li>'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> <li>Updates <code>ACJRNL</code> (journal number) and writes to <code>APCONT</code> if not found.</li> <li> <p>Initializes level 2 accumulators (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</p> </li> <li> <p>Level 1 Processing (L1DET subroutine):</p> </li> <li>Initializes level 1 accumulators (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Resets indicators (e.g., 03, 10, 12, 13, 19, 24, 25, 32).</li> <li> <p>Initializes sequence number (<code>SEQ#</code>).</p> </li> <li> <p>Header Record Processing (EACH01 subroutine):</p> </li> <li>Processes header records from <code>APTRAN</code>.</li> <li>Checks if the voucher is deleted (<code>ATHDEL = 'D'</code>):<ul> <li>If deleted, updates <code>FRCFBH</code> and <code>FRCINH</code> to blank <code>FRAPST</code> if it was 'Y'.</li> <li>Skips further processing for deleted vouchers.</li> </ul> </li> <li>Converts dates (<code>ATINDT</code>, <code>ATDUDT</code>, <code>ATPCKD</code>, <code>ATDSDT</code>) to internal format.</li> <li>Validates vendor number (<code>ATVEND</code>), canceled voucher (<code>ATCNVO</code>), prepaid status (<code>ATPAID</code>), single check (<code>ATSNGL</code>), and hold codes (<code>ATHOLD</code>).</li> <li>Assigns voucher number (<code>VOUCHR</code>) from <code>NXTVO</code> or retention voucher (<code>RTVO</code>) if applicable.</li> <li>Processes prepaid vouchers (check, ACH, wire transfer, employee expense) by updating <code>APPYTR</code>.</li> <li>Handles canceled vouchers by calling the <code>CANCEL</code> subroutine.</li> <li> <p>Checks for retention (<code>ATRTPC</code>) and calculates retention amounts if applicable.</p> </li> <li> <p>Detail Record Processing (EACH02 subroutine):</p> </li> <li>Processes detail records from <code>APTRAN</code>.</li> <li>Handles gallons (<code>ATGALN</code>) and receipt number (<code>ATRCPT</code>) for printing.</li> <li>Calculates discounts based on discount percent (<code>ATDSPC</code>) and amount (<code>ATAMT</code>).</li> <li>Processes retention amounts (<code>ATRTAM</code>, <code>ATRTDS</code>) if applicable.</li> <li>Updates payment transaction records (<code>APPYTR</code>) for discounts.</li> <li>Accumulates amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Checks for intercompany transfers by calling <code>INTRCO</code> if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li> <p>Updates purchase order files (<code>POFILEH</code>, <code>POFILED</code>) if <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is not blank.</p> </li> <li> <p>Cancel Voucher Processing (CANCEL subroutine):</p> </li> <li>Processes canceled vouchers (<code>ATCNVO</code>).</li> <li>Builds a key (<code>OPKY12</code>) using company and vendor data.</li> <li>Reads <code>APOPEN</code> to find matching records.</li> <li>Updates <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on record type (<code>OPRCTY</code>).</li> <li> <p>Writes history records to <code>APHISTH</code>, <code>APHISTD</code>, or <code>APHISTV</code>.</p> </li> <li> <p>Level 1 Totals (L1TOT subroutine):</p> </li> <li>Accumulates level 1 totals into level 2 totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</li> <li>Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Writes invoice header (<code>APINVH</code>) if vendor is not zero.</li> <li> <p>Writes totals to <code>APPRINT</code>.</p> </li> <li> <p>Intercompany Transfers (INTRCO subroutine):</p> </li> <li>Processes intercompany transfers when company numbers differ.</li> <li>Sets debit and credit company codes (<code>IDRCO</code>, <code>ICRCO</code>) and G/L accounts (<code>IDRGL</code>, <code>ICRGL</code>).</li> <li>Writes journal entries to <code>APPJJR</code> for debit and credit sides.</li> <li> <p>Handles retention amounts separately if applicable.</p> </li> <li> <p>Output Processing:</p> </li> <li>Writes records to output files (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>APPJJR</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APINVH</code>, <code>POFILEH</code>, <code>POFILED</code>, <code>FRCINH</code>, <code>FRCFBH</code>).</li> <li>Generates a purchase register report via <code>APPRINT</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate A/P processing:</p> <ol> <li>Voucher Number Assignment:</li> <li>Voucher numbers are assigned from <code>ACNXVO</code> in <code>APCONT</code> and incremented.</li> <li>Retention vouchers (<code>RTVO</code>) are assigned separately if <code>ATRTPC</code> is non-zero.</li> <li> <p>Canceled vouchers use the original voucher number (<code>ATCNVO</code>).</p> </li> <li> <p>Prepaid Vouchers:</p> </li> <li>Prepaid vouchers are flagged with <code>ATPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), or <code>'E'</code> (employee expense).</li> <li> <p>Payment transactions are written to <code>APPYTR</code> for prepaid vouchers.</p> </li> <li> <p>Hold Vouchers:</p> </li> <li>Vouchers can be held with <code>ATHOLD = 'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay).</li> <li> <p>Hold descriptions (<code>ATHLDD</code>) are printed for held vouchers.</p> </li> <li> <p>Discounts:</p> </li> <li>Discounts are calculated if <code>ATDSPC</code> (discount percent) is non-zero.</li> <li>Discount amount (<code>ATDISC</code>) is computed as <code>ATAMT * (ATDSPC / 100)</code>.</li> <li> <p>Discounts are accumulated in <code>L1DISC</code> and written to <code>APPYTR</code>.</p> </li> <li> <p>Retention:</p> </li> <li>Retention is processed if <code>ATRTPC</code> (retention percent) is non-zero.</li> <li>Retention amount (<code>ATRTAM</code>) is calculated as <code>ATAMT * (ATRTPC / 100)</code>.</li> <li> <p>Retention vouchers are written to <code>APOPENH</code>, <code>APOPEND</code>, and <code>APOPENV</code> with a hold code (<code>'H'</code>) and description ('RETENTION').</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li>If <code>ATCONO \u2260 ATEXCO</code>, intercompany journal entries are written to <code>APPJJR</code>.</li> <li> <p>Debit and credit entries use the intercompany G/L account (<code>ACICGL</code>).</p> </li> <li> <p>Purchase Order Integration:</p> </li> <li>If <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is non-blank, updates <code>POFILEH</code> (header) and <code>POFILED</code> (detail).</li> <li> <p>Updates applied amount (<code>POAPPU</code>), received quantity (<code>PDRCQT</code>), and A/P voucher amount (<code>PDAPV$</code>).</p> </li> <li> <p>Deleted Vouchers:</p> </li> <li>If <code>ATHDEL = 'D'</code>, blanks <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> if it was 'Y'.</li> <li> <p>Skips further processing for deleted vouchers.</p> </li> <li> <p>Single Check and Canceled Vouchers:</p> </li> <li>Single check vouchers are flagged with <code>ATSNGL = 'S'</code>.</li> <li> <p>Canceled vouchers are processed by updating <code>APOPEN</code> and writing to <code>APHIST</code>.</p> </li> <li> <p>Y2K Date Handling:</p> <ul> <li>Adjusts century for dates based on <code>Y2KCMP</code> and <code>Y2KCEN</code>.</li> </ul> </li> <li> <p>Journal ID Assignment:</p> <ul> <li>Assigns <code>JRNID</code> as 'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>Voucher Processing:</li> <li>Processes header (<code>NS 01</code>) and detail (<code>NS 02</code>) records from <code>APTRAN</code>, skipping deleted vouchers (<code>ATHDEL = 'D'</code>).</li> <li>Assigns new voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers and retention vouchers.</li> <li> <p>Supports multiple payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), and utility auto-pay (<code>U</code>).</p> </li> <li> <p>Freight Invoice Handling:</p> </li> <li>Clears <code>FRAPST</code> to blank in <code>FRCINH</code> or <code>FRCFBH</code> if a voucher is deleted and <code>FRAPST = 'Y'</code>.</li> <li> <p>Prioritizes <code>FRCFBH</code> (freight bill override header) over <code>FRCINH</code> (carrier invoice header) when checking freight status.</p> </li> <li> <p>Discounts and Retentions:</p> </li> <li>Calculates discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>).</li> <li> <p>For retentions (<code>ATRTPC \u2260 0</code>), computes retention amount (<code>ATRTAM</code>) and adjusts <code>ATAMT</code>. For 100% retention, moves <code>ATAMT</code> to <code>ATRTAM</code> and zeros <code>ATAMT</code>.</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li> <p>Generates journal entries (<code>APPJJR</code>) for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</p> </li> <li> <p>Cancellation:</p> </li> <li> <p>Marks canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code> and writes history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>).</p> </li> <li> <p>Vendor and Invoice Updates:</p> </li> <li>Updates vendor balances (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) with voucher and retention amounts.</li> <li> <p>Records invoice details in <code>APINVH</code> for non-one-time vendors.</p> </li> <li> <p>Journal Entries:</p> </li> <li> <p>Generates <code>APPJJR</code> entries for A/P, expense, and intercompany accounts, including retention and non-retention transactions.</p> </li> <li> <p>Purchase Order Updates:</p> </li> <li> <p>Disabled (skipped via <code>GOTO SKIP</code>), but intended to update <code>POFILEH</code> (<code>POAPPU</code>) and <code>POFILED</code> (<code>PDRCQT</code>, <code>PDAPV$</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</p> </li> <li> <p>Reporting:</p> </li> <li>Produces a detailed Purchase Register with company, voucher, and line item details, including special fields like sales order, carrier ID, and process type.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#tables-used","title":"Tables Used","text":"<p>The program interacts with the following files (tables):</p> File Name Type Description Usage <code>APTRAN</code> Input A/P Transaction File Reads header and detail records <code>APCONT</code> Update A/P Control File Retrieves company data, updates <code>ACJRNL</code>, <code>ACNXVO</code> <code>APVEND</code> Update A/P Vendor File Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) <code>APOPEN</code> Input A/P Open File Reads open vouchers for cancellation <code>APOPENH</code> Update A/P Open Header File Writes/updates header records <code>APOPEND</code> Update A/P Open Detail File Writes detail records <code>APOPENV</code> Update A/P Open Vendor File Writes vendor records <code>APINVH</code> Input A/P Invoice Header File Writes invoice header records <code>POFILEH</code> Update Purchase Order Header File Updates applied amounts (<code>POAPPU</code>) <code>POFILED</code> Update Purchase Order Detail File Updates received qty (<code>PDRCQT</code>), voucher amounts <code>APHISTH</code> Output A/P History Header File Writes history header records <code>APHISTD</code> Output A/P History Detail File Writes history detail records <code>APHISTV</code> Output A/P History Vendor File Writes history vendor records <code>APPJJR</code> Output A/P Journal File Writes journal entries <code>APPYTR</code> Update A/P Payment Transaction File Writes/updates payment transactions <code>FRCINH</code> Update Freight Invoice Header File Updates <code>FRAPST</code> for deleted vouchers <code>FRCFBH</code> Update Freight Bill Override Header File Updates <code>FRAPST</code> for deleted vouchers <code>APPRINT</code> Output A/P Purchase Register Report Generates the purchase register report"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using the <code>CALL</code> opcode. All processing is handled within the program through subroutines and file operations. The subroutines used are:</p> <ul> <li><code>L2DET</code>: Level 2 detail processing.</li> <li><code>L1DET</code>: Level 1 detail processing.</li> <li><code>EACH01</code>: Header record processing.</li> <li><code>EACH02</code>: Detail record processing.</li> <li><code>CANCEL</code>: Cancel voucher processing.</li> <li><code>L1TOT</code>: Level 1 totals processing.</li> <li><code>INTRCO</code>: Intercompany transfer processing.</li> </ul> <p>No external programs are invoked, as the program is self-contained for A/P processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#summary","title":"Summary","text":"<p>The <code>AP200</code> RPG program is a comprehensive A/P Purchase Register system that processes vendor invoices, assigns voucher numbers, handles prepaid and held vouchers, calculates discounts and retentions, and supports intercompany transfers and purchase order integration. It uses 16 files for input, update, and output operations and enforces strict business rules for data integrity. No external programs are called, and all logic is managed via internal subroutines.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/","title":"AP200P RPG","text":"<p>The <code>AP200P.rpg36.txt</code> file is an RPG III program (<code>AP200P</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to prompt for and validate input parameters for the Purchase Journal and Cash Disbursements Journal, including dates and accounting periods. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP200P</code> program serves as the initial step in the Purchase Journal process within <code>AP200.ocl36.txt</code>. It prompts the user for key input parameters, such as the Purchase Journal date (<code>PJDATE</code>), Cash Disbursements Journal date (<code>CDDATE</code>), and accounting periods/years (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>). It validates these inputs against system controls and writes validated data to the payment transaction file (<code>APPYTR</code>) for further processing. This program ensures that the journal process starts with accurate and valid parameters, particularly for handling prepaid, ACH, wire transfer, or employee expense transactions.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early in the workflow (<code>LOAD AP200P</code>) to set up the necessary parameters before transaction processing and journal generation.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Clear Indicators and Variables:<ul> <li>Clears indicators <code>81</code> and <code>90</code> (<code>SETOF 8190</code>).</li> <li>Initializes <code>MSG30</code> (message field) to blanks.</li> <li>Sets zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>) to 0 for use in output.</li> </ul> </li> <li> <p>Cancel Check:</p> <ul> <li>If function key <code>KG</code> (cancel) is pressed, sets <code>CANCEL</code> to <code>'CANCEL'</code>, sets last record indicator (<code>LR</code>), clears <code>81</code>, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine):</p> </li> <li>Check for Prepaid Transactions:<ul> <li>Sets lower limit (<code>SETLL</code>) on <code>APTRAN</code> to check for records.</li> <li>Reads <code>APTRAN</code> until end-of-file (<code>09</code>) or a non-deleted record is found (<code>N08</code>).</li> <li>Checks <code>ATPAID</code> (payment type) for:</li> <li><code>'P'</code> (prepaid, sets <code>21</code> and <code>22</code>).</li> <li><code>'A'</code> (ACH, sets <code>21</code> and <code>23</code>, per <code>JB01</code>).</li> <li><code>'W'</code> (wire transfer, sets <code>21</code> and <code>24</code>, per <code>JB01</code>).</li> <li><code>'E'</code> (employee expense, sets <code>21</code> and <code>25</code>, per <code>JB01</code>).</li> <li>If no prepaid/ACH/wire/employee transactions exist (<code>N21</code>), sets indicator <code>20</code>.</li> </ul> </li> <li> <p>Accounting Period Check:</p> <ul> <li>Chains to <code>GSCONT</code> to check <code>GX13GL</code> (13 accounting periods flag).</li> <li>If <code>GX13GL = 'Y'</code> or no prepaid transactions exist (<code>N20</code>), sets indicator <code>19</code> (prompt for period/year).</li> <li>If prepaid transactions exist (<code>21</code>), sets indicator <code>18</code> (prompt for Cash Disbursements date).</li> </ul> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine):</p> </li> <li>Purchase Journal Date Validation:<ul> <li>Moves <code>PJDATE</code> to <code>DATE</code> and calls <code>DATCHK</code> to validate the date format.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>PJDATE</code> to <code>PJYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>PJYR</code>) and determines century (<code>PJCN</code>):</li> <li>If <code>PJYR &gt;= Y2KCMP</code> (80), sets <code>PJCN</code> to <code>Y2KCEN</code> (19).</li> <li>Otherwise, sets <code>PJCN</code> to <code>Y2KCEN + 1</code> (20).</li> <li>Combines into <code>PJYMD8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Cash Disbursements Date Validation (if Prepaid):<ul> <li>If prepaid transactions exist (<code>21</code>), validates <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>CDDATE</code> to <code>CDYMD</code> (YYYYMMDD) and determines century (<code>CN</code>), forming <code>CDDAT8</code>.</li> </ul> </li> <li>Purchase Journal Period/Year Validation (if 13 Periods):<ul> <li>If <code>16</code> (13 periods), validates <code>KYPD</code> (period, 1\u201313):</li> <li>If <code>KYPD &lt; 1</code> or <code>&gt; 13</code>, sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Retrieves period end date (<code>TBPDDT</code>) from <code>GSTABL</code> using <code>KYPD</code> and <code>KYPDYY</code>:</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Converts <code>TBPDDT</code> to <code>HIDATE</code> (YYYYMMDD) and <code>HIDAT8</code> (century + YYYYMMDD).</li> <li>Compares <code>PJYMD8</code> to <code>HIDAT8</code> (high date); if <code>PJYMD8 &gt; HIDAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Determines low date for previous period (e.g., period 1 uses period 13 of prior year):</li> <li>Retrieves <code>TBPDDT</code> for previous period from <code>GSTABL</code>.</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Compares <code>PJYMD8</code> to <code>LODAT8</code> (low date); if <code>PJYMD8 &lt; LODAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Fiscal Year Check:</li> <li>Chains to <code>GLCONT</code> to get last fiscal year closed (<code>GCLSYR</code>).</li> <li>If not found (<code>99</code>), clears date fields.</li> <li>Compares <code>PJDATE</code> (month/year) to fiscal year boundaries; if outside current fiscal year, sets <code>819051</code>, displays error (<code>MSG,7</code>), and jumps to <code>ENDS1</code>.</li> </ul> </li> <li>Cash Disbursements Period/Year Validation (if 13 Periods):<ul> <li>Similar validation for <code>CDPD</code> and <code>CDPDYY</code> using <code>GSTABL</code> and date comparisons.</li> <li>Displays errors (<code>MSG,5</code> or <code>MSG,6</code>) if invalid.</li> </ul> </li> <li> <p>Set Output:</p> <ul> <li>Sets <code>JRDATE</code> to <code>PJDATE</code> and <code>JRYMD8</code> to <code>PJYMD8</code>.</li> <li>Clears <code>CANCEL</code>.</li> <li>Sets indicator <code>82</code> (valid input) and clears <code>81</code>.</li> </ul> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine):</p> </li> <li>Displays confirmation screen (<code>AP200PS2</code>) with input values.</li> <li>If user enters <code>YORN = 'Y'</code>, sets <code>LR</code> (last record), clears <code>81</code>, and proceeds.</li> <li> <p>Otherwise, clears <code>PJDATE</code>, sets <code>0181</code>, clears <code>0282</code>, and redisplays screen.</p> </li> <li> <p>Date Check (<code>DATCHK</code> Subroutine):</p> </li> <li> <p>Validates date format (<code>MMDDYY</code>):</p> <ul> <li>Breaks down into month (<code>$MONTH</code>), day (<code>$DAY</code>), year (<code>$YR</code>).</li> <li>Checks month (1\u201312); sets <code>79</code> if invalid.</li> <li>Validates day based on month:</li> <li>For February, checks leap year:<ul> <li>Non-century years: Divides year by 4 (or multiplies by 0.25).</li> <li>Century years: Combines century and year, divides by 400 (or multiplies by 0.0025).</li> <li>Leap year: Allows up to 29 days; non-leap year: 28 days.</li> </ul> </li> <li>Other months: Allows 30 days for April, June, September, November; 31 days for others.</li> <li>Sets <code>79</code> if day is invalid.</li> </ul> </li> <li> <p>Write to Output File:</p> </li> <li> <p>If valid (<code>LR 21</code>), writes to <code>APPYTR</code>:</p> <ul> <li>Includes zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, and payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code> based on <code>ATPAID</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Jumps to <code>END</code> on cancel or error.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Prepaid Transaction Check:</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Prompts for Cash Disbursements date (<code>CDDATE</code>) only if such transactions exist (<code>21</code>).</li> <li>13 Accounting Periods:</li> <li>If <code>GX13GL = 'Y'</code> in <code>GSCONT</code>, validates period/year (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>) against <code>GSTABL</code> period end dates.</li> <li>Ensures dates fall within valid period boundaries (high and low dates).</li> <li>Date Validation:</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> for correct format and fiscal year.</li> <li>Checks leap years for February dates, handling century calculations for Y2K compliance.</li> <li>Fiscal Year Check:</li> <li>Ensures <code>PJDATE</code> is within the current fiscal year based on <code>GCLSYR</code> and first fiscal month (<code>GCFFMO</code>).</li> <li>User Confirmation:</li> <li>Requires user confirmation (<code>YORN = 'Y'</code>) to proceed with validated inputs.</li> <li>Error Handling:</li> <li>Displays error messages for invalid dates, periods, or fiscal year mismatches.</li> <li>Cancels processing if user presses <code>KG</code> or inputs are invalid.</li> <li>ACH/Wire Support (<code>JB01</code>, 05/01/13):</li> <li>Supports ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types in addition to prepaid (<code>'P'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Input with Delete, <code>ID</code>):<ul> <li>A/P transaction file (404 bytes).</li> <li>Fields: <code>ATPAID</code> (payment type: <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> <li>Keys: Positions 9 and 10 (company and other keys).</li> </ul> </li> <li><code>GSCONT</code> (Chained Input, <code>IC</code>):<ul> <li>System control file (512 bytes).</li> <li>Fields: <code>GX13GL</code> (13 accounting periods flag).</li> </ul> </li> <li><code>GLCONT</code> (Input, <code>IF</code>):<ul> <li>General ledger control file (256 bytes).</li> <li>Fields: <code>GCDEL</code> (delete flag), <code>GCCO</code> (company number), <code>GCNAME</code> (company name), <code>GCADR1\u20133</code> (address), <code>GCFFMO</code> (first fiscal month), <code>GCNXGJ</code> (next general journal), <code>GCICGL</code> (intercompany G/L), <code>GCLSYR</code> (last fiscal year closed), <code>GCRETC</code> (retained earnings current year), <code>GCYTDP</code> (YTD profit), <code>GCRETP</code> (retained earnings prior years), <code>GCINLN</code> (total income line), <code>GCCONS</code> (consolidated company code), <code>GCCOLM</code> (consolidated column), <code>GCBSGL</code> (balance sheet rounding G/L), <code>GCISGL</code> (income statement rounding G/L), <code>GCMINV</code> (month inventory cost flag), <code>GCLSY4</code> (last fiscal year closed, century), <code>GCLMCC</code> (last month closed for costing), <code>GCCOUM</code> (costing unit of measure).</li> </ul> </li> <li><code>GSTABL</code> (Chained Input, <code>IC</code>):<ul> <li>General ledger table file (256 bytes).</li> <li>Fields: <code>TBPDDT</code> (period end date).</li> <li>Key: Positions 1\u201312 (constructed from period and year).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>CP</code>):<ul> <li>Display file for user prompts (<code>AP200PS1</code>, <code>AP200PS2</code>).</li> <li>Fields: <code>PJDATE</code> (Purchase Journal date), <code>CDDATE</code> (Cash Disbursements date), <code>KYPD</code> (PJ period), <code>KYPDYY</code> (PJ year), <code>CDPD</code> (CD period), <code>CDPDYY</code> (CD year), <code>YORN</code> (confirmation), <code>MSG30</code> (error message).</li> </ul> </li> <li>Output:</li> <li><code>APPYTR</code> (Output, <code>O</code>):<ul> <li>Payment transaction file (128 bytes).</li> <li>Fields: Zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>O</code>):<ul> <li>Outputs prompts and error messages (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation).</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP200P</code> program does not call external programs. It relies on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early (<code>LOAD AP200P</code>) to: - Prompt the user for Purchase Journal and Cash Disbursements Journal dates and periods. - Validate inputs against system controls (<code>GSCONT</code>, <code>GLCONT</code>, <code>GSTABL</code>) for date format, period validity, and fiscal year compliance. - Write validated parameters to <code>APPYTR</code> for use in subsequent steps (e.g., <code>AP200</code>, <code>AP205</code>, <code>AP210</code>). - Handle special cases like prepaid, ACH, wire transfer, or employee expense transactions. - Ensure the process aborts gracefully on user cancellation or invalid inputs.</p> <p>This step is critical for initializing the Purchase Journal process with accurate parameters, ensuring downstream processing (sorting, posting, and reporting) uses valid dates and periods.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (05/01/13): Added support for ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types.</li> <li>Date Handling:</li> <li>Robust date validation with leap year checks and Y2K compliance (19xx vs. 20xx).</li> <li>Period Validation:</li> <li>Supports 13 accounting periods if enabled (<code>GX13GL = 'Y'</code>), with strict period/year checks.</li> <li>User Interaction:</li> <li>Uses two screens (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation) to ensure user validation.</li> <li>Error Messages:</li> <li>Provides clear feedback for invalid inputs (e.g., invalid date, period, or fiscal year).</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#ap200p-process-summary","title":"AP200P Process Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose","title":"Purpose","text":"<p><code>AP200P</code> is an RPG III program called in the <code>AP200</code> OCL procedure to prompt for and validate Purchase Journal and Cash Disbursements Journal parameters, including dates and accounting periods, and write them to <code>APPYTR</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps_1","title":"Process Steps","text":"<ol> <li>Initialization: Clears indicators, messages, and zero fields. Checks for user cancel (<code>KG</code>).</li> <li>One-Time Setup (<code>ONETIM</code>):</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Sets flags for prompting Cash Disbursements date (<code>21</code>) or period/year (<code>19</code>, <code>18</code>).</li> <li>Screen 1 (<code>S1</code>):</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>Converts dates to YYYYMMDD and handles Y2K (19xx/20xx).</li> <li>Validates periods (<code>KYPD</code>, <code>CDPD</code>) against <code>GSTABL</code> for 13 accounting periods.</li> <li>Checks fiscal year against <code>GLCONT</code>.</li> <li>Displays errors if invalid.</li> <li>Screen 2 (<code>S2</code>):</li> <li>Prompts for confirmation (<code>YORN = 'Y'</code>).</li> <li>Clears <code>PJDATE</code> if not confirmed.</li> <li>Date Check (<code>DATCHK</code>):</li> <li>Validates date format, month, day, and leap year.</li> <li>Write to <code>APPYTR</code>:</li> <li>Outputs validated dates, periods, and payment type to <code>APPYTR</code>.</li> <li>End: Closes files or jumps to <code>END</code> on cancel/error.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules_1","title":"Business Rules","text":"<ul> <li>Prompts for <code>CDDATE</code> only if prepaid/ACH/wire/employee transactions exist.</li> <li>Validates periods (1\u201313) if <code>GX13GL = 'Y'</code> in <code>GSCONT</code>.</li> <li>Ensures dates are within period boundaries and current fiscal year.</li> <li>Supports ACH/wire/employee payments (<code>JB01</code>).</li> <li>Displays error messages for invalid inputs.</li> <li>Requires user confirmation to proceed.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles","title":"Tables/Files","text":"<ul> <li>Input:</li> <li><code>APTRAN</code>: Transaction file (<code>ATPAID</code>).</li> <li><code>GSCONT</code>: System control (<code>GX13GL</code>).</li> <li><code>GLCONT</code>: G/L control (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li><code>GSTABL</code>: G/L table (<code>TBPDDT</code>).</li> <li><code>SCREEN</code>: Workstation input (<code>PJDATE</code>, <code>CDDATE</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>, <code>YORN</code>).</li> <li>Output:</li> <li><code>APPYTR</code>: Payment transaction file (dates, periods, payment type).</li> <li><code>SCREEN</code>: Workstation output (prompts, errors).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs","title":"External Programs","text":"<ul> <li>None (uses subroutines: <code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl_1","title":"Role in AP200 OCL","text":"<p>Initializes Purchase Journal by prompting and validating dates/periods, writing to <code>APPYTR</code> for downstream processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/","title":"AP205 RPG","text":"<p>The <code>AP205.rpg36.txt</code> file is an RPG III program (<code>AP205</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to summarize Accounts Payable (A/P) transactions for the Purchase Journal. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP205</code> program is responsible for summarizing A/P journal entries from the Purchase Journal process initiated by <code>AP200</code>. It processes sorted journal register records (<code>APPJJR</code>), accumulates amounts for summarized A/P entries, and writes summarized or detailed journal entries to a temporary general ledger file (<code>TEMGEN</code>) and a printed report (<code>APPRINT</code>). This step finalizes the journal entries for A/P transactions, ensuring they are properly formatted for general ledger integration and reporting.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to produce a summarized output, which is critical for financial reporting and ledger updates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Set Indicators and Variables:<ul> <li>Clears indicator <code>60</code> (<code>SETOF 60</code>).</li> <li>Checks if the year/period (<code>KYYYPD</code>) in <code>APCONT</code> is non-zero; if zero, sets indicator <code>99</code> (<code>SETON 99</code>).</li> </ul> </li> <li>Time and Date Setup:<ul> <li>Retrieves system time (<code>TIME</code> to <code>TIMDAT</code>) and formats it into <code>TIME</code> (HHMMSS) and <code>DATE</code> (MMDDYY).</li> <li>Converts <code>DATE</code> to <code>SYSYMD</code> (YYYYMMDD) by multiplying by 10000.01 and moves to <code>SYSDT8</code> (8-digit date).</li> </ul> </li> <li>Page and Separator:<ul> <li>Initializes page number (<code>PAGE</code>) to 0.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> </ul> </li> <li> <p>Company Lookup:</p> <ul> <li>Chains <code>PJCONO</code> (company number from <code>APPJJR</code>) to <code>APCONT</code> to retrieve company name (<code>ACNAME</code>). Sets indicator <code>94</code> if not found.</li> </ul> </li> <li> <p>Process Input Records (<code>APPJJR</code>):</p> </li> <li>Read Input:<ul> <li>Reads records from <code>APPJJR</code> (journal register file) at level <code>L4</code> (company level).</li> </ul> </li> <li>Determine Debit/Credit:<ul> <li>Compares <code>PJCORD</code> (credit/debit flag) to <code>'D'</code>; sets indicator <code>30</code> if debit (<code>DEBIT</code>).</li> </ul> </li> <li>Summarize A/P Entries:<ul> <li>Compares <code>PJTYPE</code> to <code>'AP      '</code>; sets indicator <code>20</code> if true (summarize A/P only).</li> </ul> </li> <li> <p>Accumulate Amount:</p> <ul> <li>Adds <code>PJAMT</code> (amount from <code>APPJJR</code>) to <code>L1AMT</code> (level 1 accumulator) for summarized entries.</li> </ul> </li> <li> <p>Date and Century Handling:</p> </li> <li>Converts <code>PJDATE</code> (purchase journal date) to <code>YMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>YY</code>) from <code>YMD</code>.</li> <li>Compares <code>YY</code> to <code>Y2KCMP</code> (80, from <code>APCONT</code>):<ul> <li>If <code>YY &gt;= 80</code>, sets century (<code>CN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> </ul> </li> <li> <p>Combines century and <code>YMD</code> into <code>CYMD</code> (century + YYYYMMDD).</p> </li> <li> <p>Journal Entry Processing:</p> </li> <li>Non-Summarized Entries:<ul> <li>If not summarized (<code>N20</code>), calls <code>JRNL</code> subroutine to write detailed journal entries.</li> </ul> </li> <li> <p>Summarized Entries:</p> <ul> <li>At level <code>L1</code> (summary level) and if <code>PJTYPE = 'AP      '</code> (<code>20</code>), calls <code>JRNL</code> subroutine to write summarized A/P entries.</li> </ul> </li> <li> <p>JRNL Subroutine:</p> </li> <li>Increments journal reference number (<code>JRREF#</code>).</li> <li>Sets credit/debit flag (<code>CORD</code>) based on <code>PJCORD</code>:<ul> <li>If <code>L1AMT &lt; 0</code> (indicator <code>10</code>), reverses sign of <code>L1AMT</code> and toggles <code>CORD</code> (<code>'C'</code> for credit, <code>'D'</code> for debit).</li> </ul> </li> <li>Accumulates amounts:<ul> <li>If debit (<code>CORD = 'D'</code>, indicator <code>11</code>), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>If credit (<code>CORD != 'D'</code>, <code>N11</code>), adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> </ul> </li> <li>Sets journal amount (<code>JRAMT</code>) to <code>L1AMT</code> and resets <code>L1AMT</code> to 0.</li> <li> <p>Checks if gallons (<code>PJGALN</code>) is non-zero (sets indicator <code>60</code>).</p> </li> <li> <p>Write to Output Files:</p> </li> <li>TEMGEN (General Ledger File):<ul> <li>Writes detailed entries (<code>DADD 01N20</code>):</li> <li>Includes company (<code>PJCONO</code>), G/L number (<code>PJGLNO</code>), journal number (<code>PJJRNL</code>), reference (<code>JRREF#</code>), credit/debit (<code>CORD</code>), description (<code>PJDES1</code> or <code>PJDES2</code>), vendor (<code>PJVN10</code>), date (<code>YMD</code>, <code>CYMD</code>), amount (<code>JRAMT</code>), gallons (<code>PJGALN</code>), and receipt (<code>PJRCPT</code>).</li> <li>Writes summarized entries (<code>TADD L1 20</code>):</li> <li>Similar fields but with fixed description (<code>'-SUMMARIZED A/P         '</code>) and <code>PJDATE</code>.</li> </ul> </li> <li> <p>APPRINT (Printed Report):</p> <ul> <li>Prints header (<code>D 103 L4</code> or <code>OFNL4</code>):</li> <li>Company name (<code>ACNAME</code>), page number, date (<code>DATE</code>), time (<code>TIME</code>), journal title (<code>PURCHASE JOURNAL</code>), and period (<code>KYPD</code>, <code>KYPDYY</code>).</li> <li>Prints column headers for journal, reference, description, vendor, G/L number, debit/credit amounts.</li> <li>Prints detailed entries (<code>D 1 01N20</code>):</li> <li>Journal number, reference, description, vendor, G/L number, and amount (debit or credit).</li> <li>Includes gallons and receipt number if <code>PJGALN</code> is non-zero (<code>60</code>).</li> <li>Prints summarized entries (<code>T 1 L1 20</code>):</li> <li>Similar format with <code>'-SUMMARIZED A/P'</code> description.</li> <li>Prints journal totals (<code>T 2 L4</code>):</li> <li>Debit total (<code>L4DR</code>) and credit total (<code>L4CR</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APPJJR</code> records until end-of-file, processing each at appropriate levels (<code>L4</code>, <code>L1</code>).</li> <li>Outputs final totals and closes files.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Summarization:</li> <li>Only records with <code>PJTYPE = 'AP      '</code> are summarized (indicator <code>20</code>).</li> <li>Summarized entries aggregate amounts (<code>L1AMT</code>) by company and type, written at level <code>L1</code>.</li> <li>Debit/Credit Handling:</li> <li>Determines debit (<code>D</code>) or credit (<code>C</code>) based on <code>PJCORD</code>.</li> <li>If amount is negative, reverses sign and toggles <code>CORD</code> (e.g., negative debit becomes credit).</li> <li>Year 2000 Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (century, default 19) and <code>Y2KCMP</code> (80) to determine if year is 19xx or 20xx.</li> <li>Error Checking:</li> <li>Validates year/period (<code>KYYYPD</code>) in <code>APCONT</code>; sets indicator <code>99</code> if invalid (zero).</li> <li>Chains to <code>APCONT</code> for company name; sets indicator <code>94</code> if not found.</li> <li>Output Formatting:</li> <li>Detailed entries include vendor, gallons, and receipt data if applicable.</li> <li>Summarized entries use a fixed description and aggregated amounts.</li> <li>Report includes headers, totals, and formatted dates/amounts.</li> <li>Gallons and Receipt:</li> <li>Includes <code>PJGALN</code> (gallons) and <code>PJRCPT</code> (receipt number) in output only if <code>PJGALN</code> is non-zero.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APPJJR</code> (Primary Input, <code>IP</code>):<ul> <li>Journal register file (sorted input from <code>AP200</code>).</li> <li>Fields: <code>PJDEL</code> (delete flag), <code>PJCONO</code> (company), <code>PJJRNL</code> (journal number), <code>PJCORD</code> (credit/debit), <code>PJGLNO</code> (G/L number), <code>PJDES1</code> (description 1), <code>PJDATE</code> (journal date), <code>PJAMT</code> (amount), <code>PJDES2</code> (description 2), <code>PJVN10</code> (vendor), <code>PJTYPE</code> (type), <code>PJGALN</code> (gallons), <code>PJRCPT</code> (receipt).</li> </ul> </li> <li><code>AP205S</code> (Secondary Input, <code>IR</code>):<ul> <li>Sorted journal register file (used for control breaks).</li> <li>Keys: <code>PJCONO</code> (company), <code>PJCORD</code> (credit/debit), <code>PJTYPE</code> (type).</li> </ul> </li> <li><code>APCONT</code> (Chained Input, <code>IC</code>):<ul> <li>A/P control file.</li> <li>Fields: <code>ACNAME</code> (company name), <code>KYYYPD</code> (year/period), <code>KYPDYY</code>, <code>KYPD</code>, <code>JRDATE</code> (journal date), <code>WIREDS</code> (wire transfer description), <code>Y2KCEN</code> (century), <code>Y2KCMP</code> (year compare).</li> </ul> </li> <li>Output:</li> <li><code>TEMGEN</code> (Output, <code>O</code>):<ul> <li>Temporary general ledger file.</li> <li>Stores detailed and summarized journal entries for ledger integration.</li> </ul> </li> <li><code>APPRINT</code> (Printer, <code>O</code>):<ul> <li>Printed Purchase Journal report.</li> <li>Includes headers, detailed/summarized entries, and totals.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP205</code> program does not call external programs. It relies on internal subroutines (<code>JRNL</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to: - Summarize A/P transactions for the Purchase Journal. - Generate a formatted report (<code>APPRINT</code>) for auditing and financial review. - Write journal entries to <code>TEMGEN</code> for integration with the general ledger. - Ensure accurate debit/credit totals and proper date handling for compliance.</p> <p>This step is critical for consolidating A/P data into a summarized format, making it ready for ledger posting and reporting, which aligns with the overall goal of <code>AP200</code> to process and post A/P voucher transactions.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Control Breaks:</li> <li>Uses <code>L4</code> (company), <code>L3</code> (credit/debit), <code>L2</code> (type), and <code>L1</code> (summary) for processing records hierarchically.</li> <li>Y2K Handling:</li> <li>Ensures dates are correctly interpreted for 19xx or 20xx centuries.</li> <li>Output Flexibility:</li> <li>Supports both detailed and summarized entries, with conditional inclusion of gallons and receipt data.</li> <li>File Integration:</li> <li>Links with <code>APCONT</code> for company and period data, ensuring consistency with A/P controls.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/","title":"AP210 RPG","text":"<p>The <code>AP210.rpg36.txt</code> file is an RPG III program (<code>AP210</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to post Accounts Payable (A/P) invoices to inventory receipt records. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP210</code> program is responsible for updating inventory receipt records (<code>INFIL1</code> or <code>INTZH1</code>) with A/P invoice data from the transaction file (<code>APTRAN</code>). It matches A/P invoices to inventory receipts based on receipt numbers, updates quantities, amounts, and status, and logs the activity in a printer output file (<code>APLIST</code>). In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing to ensure A/P invoices are reflected in inventory records, which is critical for tracking costs and quantities associated with inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Date and Century Handling:<ul> <li>Retrieves journal date (<code>JRDATE</code>) from the User Data Structure (<code>UDS</code>).</li> <li>Converts <code>JRDATE</code> to <code>JRYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>JYR</code>) and compares it to <code>Y2KCMP</code> (80, from <code>UDS</code>):</li> <li>If <code>JYR &gt;= 80</code>, sets century (<code>JCN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> <li>Combines century and <code>JRYMD</code> into <code>JRYM8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Variable Setup:<ul> <li>Clears indicators <code>20</code>, <code>90</code>, <code>91</code>, <code>92</code> and sets zero fields (<code>ZERO2</code>, <code>ZERO4</code>, <code>ZERO6</code>, <code>ZERO8</code>) to 0.</li> <li>Sets <code>ONCE</code> to 1 to ensure date processing occurs only once.</li> </ul> </li> <li> <p>Amount Setup:</p> <ul> <li>Moves <code>APGRAM</code> (gross amount from <code>APTRAN</code>) to <code>APAMT</code> (working amount field).</li> </ul> </li> <li> <p>Skip Deleted or Sales Order Records:</p> </li> <li>Checks if <code>ATSORN</code> (sales order number) is zero (<code>IFEQ *ZERO</code>):<ul> <li>If non-zero, skips to <code>END</code> (bypasses posting for sales order-related invoices, per <code>JB01</code> revision).</li> </ul> </li> <li> <p>Checks if header (<code>APHDEL</code>) or detail (<code>APDDEL</code>) delete flags are not <code>'D'</code>:</p> <ul> <li>If either is deleted, skips to <code>END</code>.</li> </ul> </li> <li> <p>Process A/P Invoice:</p> </li> <li>Determine Processing Type:<ul> <li>If indicator <code>20</code> is off (<code>N20</code>), calls <code>NORMAL</code> subroutine (standard invoice processing).</li> <li>If indicator <code>20</code> is on, calls <code>FREIGH</code> subroutine (freight invoice processing, which sets indicator <code>11</code> and calls <code>NORMAL</code>).</li> </ul> </li> <li>Receipt Key:<ul> <li>Builds <code>RCTKEY</code> (9 bytes) by combining <code>APCONO</code> (company number, 3 bytes) and <code>APREC#</code> (receipt number, 6 bytes).</li> </ul> </li> <li> <p>Log to Printer:</p> <ul> <li>Writes detail record to <code>APLIST</code> (<code>EXCPTDTL</code>) with invoice details (company, vendor, invoice number, date, G/L, receipt, gallons, amount, status).</li> </ul> </li> <li> <p>NORMAL Subroutine:</p> </li> <li> <p>Match Receipt (Exact Match):</p> <ul> <li>Sets lower limit (<code>SETLL</code>) on <code>INFIL1</code> and <code>INTZH1</code> using <code>RCTKEY</code>.</li> <li>Reads <code>INFIL1</code> (indicator <code>76</code>) until end-of-file (<code>90</code>) or match.</li> <li>If end-of-file on <code>INFIL1</code>, switches to <code>INTZH1</code> (indicator <code>77</code>) and reads.</li> <li>If a match is found (<code>N90</code>):</li> <li>Calculates remaining quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>If <code>APGAL</code> (A/P gallons) equals <code>RNQTY</code>, updates the record:<ul> <li>Adds <code>APAMT</code> to <code>IHAPTD</code> (total dollars).</li> <li>Adds <code>APGAL</code> to <code>IHAPTQ</code> (total quantity).</li> <li>Sets <code>IHCLCD</code> (status) to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates <code>IHCLDT</code> (closed date, YMD) and <code>IHCLD8</code> (closed date, CYMD) with <code>JRYMD</code> and <code>JRYM8</code>.</li> <li>Updates <code>APINVN</code> (invoice number) and <code>IHPONO</code> (PO number).</li> <li>Writes update to <code>INFIL1</code> or <code>INTZH1</code> (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT01</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> </ul> </li> <li> <p>Match Receipt (Partial Match):</p> <ul> <li>If no exact match, re-reads <code>INFIL1</code> and <code>INTZH1</code> to find a record with more gallons than <code>APGAL</code>.</li> <li>If found (<code>N90</code> and <code>APGAL &lt; RNQTY</code>):</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code> as above.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT02</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>No Match, Update First Record:</p> <ul> <li>If no match and <code>APGAL</code> is non-zero, reads first record from <code>INFIL1</code> or <code>INTZH1</code>.</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code>.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT03</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>FREIGH Subroutine:</p> </li> <li>Sets indicator <code>11</code> to flag freight processing.</li> <li>Calls <code>NORMAL</code> subroutine to process freight invoices similarly to standard invoices.</li> <li> <p>Clears indicator <code>11</code>.</p> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APTRAN</code> records until end-of-file.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Skip Sales Orders (<code>JB01</code>, 07/08/10):</li> <li>Bypasses posting if <code>ATSORN</code> (sales order number) is non-zero, as sales order invoices are not posted to inventory receipts.</li> <li>Skip Deleted Records:</li> <li>Skips records where <code>APHDEL</code> or <code>APDDEL</code> is <code>'D'</code> (deleted).</li> <li>Dual File Support (<code>JB02</code>, 09/18/14):</li> <li>Checks both <code>INFIL1</code> (inventory file) and <code>INTZH1</code> (holding file) for receipt matches, switching if no match is found in <code>INFIL1</code>.</li> <li>Quantity Matching:</li> <li>Matches A/P gallons (<code>APGAL</code>) to remaining receipt quantity (<code>IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>Updates the first record with sufficient gallons or the first available record if no match.</li> <li>Status Update:</li> <li>Sets <code>IHCLCD</code> to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates closed dates (<code>IHCLDT</code>, <code>IHCLD8</code>) with journal date.</li> <li>Freight Invoices:</li> <li>Processes freight invoices separately but uses the same <code>NORMAL</code> logic (indicator <code>11</code> flags freight).</li> <li>Printer Logging (<code>JB03</code>, 09/18/14):</li> <li>Logs all updates to <code>APLIST</code> for debugging and verification, with distinct exception records (<code>DTL</code>, <code>DT01</code>, <code>DT02</code>, <code>DT03</code>).</li> <li>Y2K Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) to determine 19xx or 20xx century.</li> <li>Field Updates (<code>MG04</code>, 09/15/15):</li> <li>Supports expanded <code>INFIL1</code> (448 bytes) and <code>APINVN</code> (20 bytes).</li> <li>Includes PO number (<code>IHPONO</code>) from the purchase order system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Primary Input, <code>IP</code>):<ul> <li>A/P transaction file.</li> <li>Fields: <code>APHDEL</code> (header delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>ATCNVO</code> (canceled voucher), <code>APINVD</code> (invoice date), <code>ATSORN</code> (sales order number), <code>ATSSRN</code> (sales sequence number), <code>APINVN</code> (invoice number), <code>APIN10</code> (short invoice number), <code>APDDEL</code> (detail delete flag), <code>APREC#</code> (receipt number), <code>APGAL</code> (gallons), <code>APGL</code> (G/L number), <code>APGRAM</code> (gross amount), <code>APCLCD</code> (open/closed status).</li> </ul> </li> <li><code>INFIL1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory file (448 bytes).</li> <li>Fields: <code>IHNQTY</code> (net quantity), <code>IHNQTF</code> (net quantity fraction), <code>IHUNMS</code> (unit of measure), <code>IHAPID</code> (last invoice date), <code>IHAPLE</code> (last expense G/L), <code>IHAPLP</code> (last purchase journal), <code>IHAPTQ</code> (total quantity), <code>IHAPTF</code> (total quantity fraction), <code>IHAPTD</code> (total dollars), <code>IHCLCD</code> (open/closed status), <code>IHCLDT</code> (closed date, YMD), <code>IHCLD8</code> (closed date, CYMD), <code>IHAPI#</code> (last invoice number), <code>IHPONO</code> (PO number).</li> </ul> </li> <li><code>INTZH1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory transaction holding file (592 bytes).</li> <li>Fields: Same as <code>INFIL1</code> but with different positions (e.g., <code>IHAPTD</code> at 171-179, <code>IHCLCD</code> at 170).</li> </ul> </li> <li>Output:</li> <li><code>INFIL1</code> (Update, <code>E 76 UPDRCP</code>):<ul> <li>Updates inventory receipt records with A/P data.</li> </ul> </li> <li><code>INTZH1</code> (Update, <code>E 77 UPDRCP</code>):<ul> <li>Updates holding file records with A/P data.</li> </ul> </li> <li><code>APLIST</code> (Printer, <code>O</code>):<ul> <li>Printer output file for logging (164 bytes).</li> <li>Logs invoice details (<code>DTL</code>) and update details (<code>DT01</code>, <code>DT02</code>, <code>DT03</code>) with fields like company, vendor, invoice number, date, G/L, receipt, gallons, amount, status, and journal data.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP210</code> program does not call external programs. It relies on internal subroutines (<code>NORMAL</code>, <code>FREIGH</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing (<code>AP200</code>) and journal summarization (<code>AP205</code>) to: - Post A/P invoice data (amounts, quantities, invoice numbers, PO numbers) to inventory receipt records in <code>INFIL1</code> or <code>INTZH1</code>. - Ensure inventory records reflect A/P costs and quantities, maintaining alignment between financial and inventory systems. - Log updates to <code>APLIST</code> for verification, especially useful for debugging (per <code>JB03</code>). - Support freight invoices and bypass sales order-related invoices, ensuring accurate inventory cost tracking.</p> <p>This step is critical for integrating A/P transactions with inventory management, ensuring that receipt records are updated with financial data for accurate cost tracking and reporting.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (07/08/10): Bypasses sales order invoices.</li> <li><code>JB02</code> (09/18/14): Adds support for <code>INTZH1</code> (holding file).</li> <li><code>JB03</code> (09/18/14): Adds <code>APLIST</code> for logging.</li> <li><code>MG04</code> (09/15/15): Expands <code>INFIL1</code> and adds invoice number (<code>APINVN</code>) and PO number (<code>IHPONO</code>).</li> <li>File Switching:</li> <li>Dynamically switches between <code>INFIL1</code> and <code>INTZH1</code> if no match is found, ensuring flexibility in receipt processing.</li> <li>Error Handling:</li> <li>Skips deleted records and non-inventory invoices (e.g., sales orders).</li> <li>Logs all updates for traceability.</li> <li>Quantity Logic:</li> <li>Matches A/P gallons to receipt quantities, updating the first suitable record if no exact match is found.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/","title":"Function Requirement Document: Process Accounts Payable Transactions and Post to General Ledger and Inventory","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) transactions, create and manage vouchers, generate general ledger journal entries, summarize A/P entries, post invoice details to inventory receipts, and produce detailed financial and diagnostic reports. This encompasses the end-to-end processing of A/P transactions, including voucher creation, journal entry generation, summarization, and posting to inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#components","title":"Components","text":"<p>The system consists of three interconnected RPG programs: 1. AP200 (Purchase Register): Processes A/P transactions, creates vouchers, updates related files, and generates journal entries and a Purchase Register report. 2. AP205 (Purchase Journal): Summarizes A/P journal entries and generates general ledger entries and a Purchase Journal report. 3. AP210 (A/P to Inventory Posting): Posts A/P invoice details to inventory receipt records, updating quantities and amounts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#inputs","title":"Inputs","text":"<ul> <li>Purchase Journal Date (<code>JRDATE</code>): MMDDYY format, required.</li> <li>Cash Disbursements Date (<code>CDDATE</code>): MMDDYY format, required if prepaid/ACH/wire/employee transactions exist.</li> <li>Purchase Journal Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Required if 13 accounting periods are enabled.</li> <li>Cash Disbursements Period/Year (<code>CDPD</code>, <code>CDPDYY</code>): Required if 13 periods and prepaid transactions exist.</li> <li>APTRAN: Transaction file with header (company, vendor, invoice, dates, hold codes, sales order, carrier ID) and detail (expense G/L, amount, discount, gallons, receipt number, purchase order) records.</li> <li>APCONT: A/P control file (company name, journal number, next voucher number).</li> <li>APVEND: Vendor master file (year-to-date purchases, balance).</li> <li>APOPENH, APOPEND, APOPENV: Open A/P files for voucher records.</li> <li>APINVH: Invoice header file for invoice details.</li> <li>FRCINH, FRCFBH: Freight invoice and override header files for A/P status.</li> <li>POFILEH, POFILED: Purchase order files.</li> <li>APPJJR: Journal register file for input to summarization.</li> <li>AP205S: Sort/index file for <code>APPJJR</code>.</li> <li>INFIL1, INTZH1: Inventory receipt and holding files for invoice posting.</li> <li>Control Files: <code>GSCONT</code> (system controls), <code>GLCONT</code> (G/L controls), <code>GSTABL</code> (period end dates).</li> <li>System Date and Time: For date conversions and reporting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#outputs","title":"Outputs","text":"<ul> <li>APPJJR: Journal register with G/L entries (A/P, expense, intercompany).</li> <li>APPYTR: Payment transaction records for prepaid/ACH/wire/employee/utility vouchers.</li> <li>APHISTH, APHISTD, APHISTV: History files for canceled vouchers.</li> <li>TEMGEN: General ledger entries (detailed and summarized).</li> <li>APOPENH, APOPEND, APOPENV: Updated open A/P records.</li> <li>APVEND: Updated vendor balances.</li> <li>APINVH: Updated invoice headers.</li> <li>FRCINH, FRCFBH: Updated freight A/P status.</li> <li>POFILEH, POFILED: Updated purchase order files (if enabled).</li> <li>INFIL1, INTZH1: Updated inventory receipt records.</li> <li>APPRINT (AP200, AP205): Purchase Register and Purchase Journal reports.</li> <li>APLIST: Diagnostic report for inventory posting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#1-validate-input-parameters","title":"1. Validate Input Parameters","text":"<ul> <li>Validate <code>JRDATE</code> and <code>CDDATE</code> for correct format (MMDDYY) and fiscal year compliance using <code>GLCONT</code> (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), validate <code>KYPD</code> (1\u201313) and <code>CDPD</code> (1\u201313) against period end dates in <code>GSTABL</code> (<code>TBPDDT</code>).</li> <li>Check for prepaid/ACH/wire/employee transactions (<code>ATPAID = 'P', 'A', 'W', 'E'</code>) in <code>APTRAN</code> to determine if <code>CDDATE</code> is required.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#2-initialize-system","title":"2. Initialize System","text":"<ul> <li>Convert journal date (<code>JRDATE</code>) to Y2K-compliant format (e.g., <code>JRYMD</code>, <code>JRYM8</code>).</li> <li>Convert <code>JRDATE</code> to YYYYMMDD (<code>PJYMD</code>) with Y2K-compliant century (19xx if year \u2265 80, else 20xx).</li> <li>Retrieve company details (<code>APCONT</code>) and initialize totals, counters, and separators.</li> <li>Retrieve next journal (<code>ACJRNL</code>) and voucher numbers (<code>ACNXVO</code>) from <code>APCONT</code>.</li> <li>Set journal ID (<code>JRNID</code>) to <code>'PJ'</code>, <code>'WT'</code>, or <code>'EE'</code> based on transaction type.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#3-process-ap-transactions-ap200","title":"3. Process A/P Transactions (AP200)","text":"<ul> <li>Read <code>APTRAN</code> header and detail records.</li> <li>For each header:</li> <li>Skip if deleted (<code>ATHDEL = 'D'</code>); clear <code>FRAPST</code> in <code>FRCINH</code>/<code>FRCFBH</code> if <code>'Y'</code>.</li> <li>Assign voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers.</li> <li>Set flags for prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>), single check (<code>ATSNGL = 'S'</code>), or hold (<code>ATHOLD = 'H', 'A', 'W', 'E', 'U'</code>).</li> <li>Write payment transactions (<code>APPYTR</code>) for prepaid, ACH, wire, employee, or utility auto-pay vouchers.</li> <li>Calculate retention amount (<code>ATRTAM = ATAMT * ATRTPC / 100</code>) if <code>ATRTPC \u2260 0</code>.</li> <li>For each detail:</li> <li>Calculate discounts (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>) if discount percent is non-zero AND <code>ATDISC = 0</code>.</li> <li>Handle retentions: compute retention amount (<code>ATRTAM = ATAMT * (ATRTPC / 100)</code>), adjust <code>ATAMT</code>, and set retention discount (<code>ATRTDS</code>). For 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Update level 1 totals (<code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>, <code>L1PAMT</code>, <code>L1FAMT</code>).</li> <li>Generate intercompany journal entries (<code>APPJJR</code>) if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li>Update P/O files (<code>POFILEH</code>, <code>POFILED</code>) if enabled (<code>ACPOYN = 'Y'</code>) with amounts (<code>POAPPU</code>, <code>PDAPV$</code>) and receipt data (<code>PDRCQT</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</li> <li>Update open A/P (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>), vendor (<code>APVEND</code>), and invoice (<code>APINVH</code>) files.</li> <li>Write history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>) for canceled vouchers.</li> <li>Update vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Accumulate company totals (<code>L2AMT</code>, <code>L2DISC</code>, <code>L2PAMT</code>, <code>L2FAMT</code>).</li> <li>Produce Purchase Register report (<code>APPRINT</code>) with voucher details, totals, and special fields (sales order, carrier ID, process type).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#4-summarize-journal-entries-ap205","title":"4. Summarize Journal Entries (AP205)","text":"<ul> <li>Read <code>APPJJR</code> records via <code>AP205S</code> sort file.</li> <li>Summarize A/P entries (<code>PJTYPE = 'AP      '</code>) into a single <code>TEMGEN</code> record per voucher.</li> <li>Write detailed <code>TEMGEN</code> records for non-A/P entries (expense, intercompany).</li> <li>Adjust negative amounts: negate and switch debit (<code>D</code>) to credit (<code>C</code>) or vice versa.</li> <li>Accumulate company-level debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals.</li> <li>Produce Purchase Journal report (<code>APPRINT</code>) with journal entries, totals, and gallons/receipt details.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#5-post-to-inventory-receipts-ap210","title":"5. Post to Inventory Receipts (AP210)","text":"<ul> <li>Read <code>APTRAN</code> detail records with receipt number (<code>APREC#</code>).</li> <li>Skip records with sales order (<code>ATSORN \u2260 *ZERO</code>) or deleted status (<code>APHDEL = 'D'</code>, <code>APDDEL = 'D'</code>).</li> <li>Match receipt number in <code>INFIL1</code> or <code>INTZH1</code>:</li> <li>If exact match (<code>APGAL = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>), update record.</li> <li>If no exact match, find record with sufficient gallons (<code>APGAL &lt; RNQTY</code>).</li> <li>If no sufficient gallons, update first record.</li> <li>Update <code>INFIL1</code> or <code>INTZH1</code> with invoice date (<code>JRYMD</code>), G/L number (<code>APGL</code>), journal number (<code>JR#</code>), quantities (<code>IHAPTQ</code>, <code>IHAPTF</code>), dollars (<code>IHAPTD</code>), invoice number (<code>APINVN</code>), PO number (<code>IHPONO</code>), and close code (<code>IHCLCD = 'O' or 'C'</code>).</li> <li>Produce diagnostic report (<code>APLIST</code>) with input and updated fields.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#business-rules","title":"Business Rules","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#validation","title":"Validation","text":"<ul> <li>Dates must be valid and within the current fiscal year (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>Periods (1\u201313) must match <code>GSTABL</code> boundaries if 13 periods enabled.</li> <li><code>CDDATE</code> required only if prepaid/ACH/wire/employee transactions exist.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#voucher-management","title":"Voucher Management","text":"<ul> <li>Assign unique voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention, and retention vouchers.</li> <li>Support payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>).</li> <li>Mark canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted in open A/P files and write to history files.</li> <li>Hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) affect voucher processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#discounts-and-retentions","title":"Discounts and Retentions","text":"<ul> <li>Calculate discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (both conditions must be true).</li> <li>For retentions (<code>ATRTPC \u2260 0</code>), compute <code>ATRTAM</code> and adjust <code>ATAMT</code>; for 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Create separate retention voucher if not 100% retention.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#freight-handling","title":"Freight Handling","text":"<ul> <li>Clear <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> for deleted vouchers if previously flagged (<code>FRAPST = 'Y'</code>).</li> <li>Prioritize <code>FRCFBH</code> over <code>FRCINH</code> for freight status checks.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#intercompany-transfers","title":"Intercompany Transfers","text":"<ul> <li>Generate <code>APPJJR</code> entries for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</li> <li>Generate debit/credit entries for <code>ATCONO \u2260 ATEXCO</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#purchase-orders","title":"Purchase Orders","text":"<ul> <li>Update <code>POFILEH</code>/<code>POFILED</code> if <code>ACPOYN = 'Y'</code> and <code>ATPONO \u2260 blanks</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#journal-summarization","title":"Journal Summarization","text":"<ul> <li>Summarize A/P entries into a single <code>TEMGEN</code> record with fixed description.</li> <li>Negate negative amounts and adjust debit/credit codes accordingly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#inventory-posting","title":"Inventory Posting","text":"<ul> <li>Skip posting if sales order exists or records are deleted.</li> <li>Match receipts exactly, by sufficient gallons, or use first record if no match.</li> <li>Update inventory records with A/P details and set close status based on <code>APCLCD</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#y2k-compliance","title":"Y2K Compliance","text":"<ul> <li>Convert dates to 8-digit format using century (19xx if year \u2265 80, else 20xx) based on <code>Y2KCMP = 1980</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#reporting","title":"Reporting","text":"<ul> <li>Generate Purchase Register (<code>AP200</code>) with voucher, sales order, carrier ID, and process type details.</li> <li>Generate Purchase Journal (<code>AP205</code>) with summarized A/P and detailed non-A/P entries, including gallons/receipt.</li> <li>Generate diagnostic report (<code>AP210</code>) for inventory posting verification.</li> <li>Include sales order (<code>ATSORN</code>), sequence (<code>ATSSRN</code>), carrier ID (<code>ATCAID</code>), process type (<code>ATPTYP</code>), and discount due date (<code>ATDSDT</code>) in reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#calculations","title":"Calculations","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#date-conversion","title":"Date Conversion","text":"<ul> <li><code>YYYYMMDD = JRDATE * 10000.01</code>, century set to 19 if year \u2265 1980, else 20.</li> <li>Alternative: <code>YYYYMMDD = MMDDYY * 10000.01</code>, with century (19xx if year \u2265 80, else 20xx).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#financial-calculations","title":"Financial Calculations","text":"<ul> <li>Discount: <code>ATDISC = ATAMT * (ATDSPC / 100)</code> if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code>.</li> <li>Retention Amount: <code>ATRTAM = ATAMT * (ATRTPC / 100)</code>.</li> <li>Remaining Quantity (Inventory): <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#totals","title":"Totals","text":"<ul> <li>Voucher Level: <code>L1AMT += ATAMT</code>, <code>L1DISC += ATDISC</code>, <code>L1RTAM += ATRTAM</code>, <code>L1RTDS += ATRTDS</code>, <code>L1PAMT += ATPRAM</code>, <code>L1FAMT += ATFRAM</code>.</li> <li>Company Level: <code>L2AMT += L1AMT</code>, <code>L2DISC += L1DISC</code>, <code>L2PAMT += L1PAMT</code>, <code>L2FAMT += L1FAMT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#constraints","title":"Constraints","text":"<ul> <li>Purchase order updates (<code>POFILEH</code>, <code>POFILED</code>) are controlled by <code>ACPOYN = 'Y'</code> flag.</li> <li><code>APLIST</code> is temporary for diagnostic purposes and may be removed.</li> <li>13-period accounting supported if <code>KYYYPD \u2260 0</code>.</li> <li>System supports various transaction types including utility auto-pay transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#error-handling","title":"Error Handling","text":"<ul> <li>Validate all input parameters before processing.</li> <li>Handle missing or invalid data gracefully.</li> <li>Provide diagnostic reporting for inventory posting verification.</li> <li>Maintain audit trail through history files for canceled vouchers.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/","title":"196OCL","text":"<p>The provided files, <code>AP196.ocl36.txt``</code> and <code>AP196.rpg36 (1).txt</code>, describe an A/P Voucher Status Code Update process within an IBM AS/400 (or IBM i) environment. The first file (<code></code>AP196.ocl36.txt<code>`</code>) is an OCL (Operation Control Language) script that controls the execution flow, while the second (<code>AP196.rpg36 (1).txt</code>) is an RPG III program that handles the core logic for updating voucher status codes. Below, I\u2019ll explain what these files do, outline the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#overview-of-what-these-files-do","title":"Overview of What These Files Do","text":"<ul> <li> <p>AP196.ocl36.txt<code>`</code> (OCL Script):   This script orchestrates the execution of the A/P voucher status code update process. It defines file allocations, conditionally runs the <code>AP196</code> program to modify voucher status codes, and optionally calls <code>AP197</code> to generate an edit report if errors are detected. The script ensures that the process terminates if no records are available for processing and manages output queues for reports.</p> </li> <li> <p><code>AP196.rpg36 (1).txt</code> (RPG III Program):   This is the core program (<code>AP196</code>) that provides an interactive interface for users to modify the status codes (e.g., hold codes) of accounts payable (A/P) vouchers. It validates input data (company number, vendor number, voucher number), retrieves related records, allows users to update hold codes and descriptions, and updates or deletes records in the voucher control file (<code>APVCTR</code>). The program uses a workstation display to interact with the user via two screens: one for input validation and another for status code modification.</p> </li> </ul> <p>Together, these files implement a process to: - Allow users to update or delete the hold status of A/P vouchers. - Validate input against master files (company, vendor, open payables). - Generate an edit report (via <code>AP197</code>) if errors occur. - Ensure data integrity by checking for valid records and handling deletions appropriately.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#process-steps","title":"Process Steps","text":"<ol> <li>OCL Script Execution (<code>AP196.ocl36.txt</code>):</li> <li>File Allocation:<ul> <li>Allocates files: <code>APVCTR</code> (voucher control), <code>APCONT</code> (company master), <code>APVEND</code> (vendor master), and <code>APOPNH</code> (open payables header).</li> <li>Uses shared disposition (<code>DISP-SHR</code>) to allow concurrent access.</li> </ul> </li> <li>Initial Check:<ul> <li>Checks if the <code>APVCTR</code> file (<code>?9?APVC?WS?</code>) is empty (record count = 00000000).</li> <li>If empty, the process jumps to the <code>END</code> tag and terminates.</li> </ul> </li> <li>Run <code>AP196</code>:<ul> <li>Loads and executes the <code>AP196</code> program to handle interactive voucher status updates.</li> </ul> </li> <li>Error Handling and Reporting:<ul> <li>If <code>AP196</code> processes records (i.e., <code>APVCTR</code> is not empty after execution), it loads <code>AP197</code> to generate an edit report.</li> <li>Overrides the printer file (<code>LIST</code>) to direct output to either <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on a condition (<code>?9?/G</code>).</li> <li>Copies the report to an output queue (<code>APSTEDIT</code>) with the name \u201cAP STATUS CHG EDIT\u201d and moves it to <code>JUNKOUTQ</code> if necessary.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>If no records remain in <code>APVCTR</code>, the process ends.</li> </ul> </li> <li> <p>RPG Program Execution (<code>AP196.rpg36</code>):</p> </li> <li>Screen 1 (AP196S1):<ul> <li>Displays a screen to accept user input: company number (<code>CONO</code>), vendor number (<code>VEND</code>), and voucher number (<code>VOUCH</code>).</li> <li>Validates input by chaining (looking up) records in:</li> <li><code>APCONT</code> (company master) to verify the company number.</li> <li><code>APVEND</code> (vendor master) to verify the vendor number.</li> <li><code>APVCTR</code> (voucher control) to check if a voucher record exists.</li> <li><code>APOPNH</code> (open payables header) to retrieve additional voucher details.</li> <li>If any validation fails (e.g., invalid company, vendor, or voucher), an error message is displayed (from the <code>COM</code> array), and the user is prompted to correct the input.</li> <li>If valid, retrieves the current hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) from either <code>APVCTR</code> or <code>APOPNH</code> and proceeds to Screen 2.</li> </ul> </li> <li>Screen 2 (AP196S2):<ul> <li>Displays the validated voucher details along with the current hold code and description.</li> <li>Allows the user to modify the hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>).</li> <li>Updates the <code>APVCTR</code> file with the new values or deletes the record if requested.</li> </ul> </li> <li>Function Key Handling:<ul> <li>KA (Rekey): Clears the screen and redisplays Screen 1 for new input without adding or updating records.</li> <li>KD (Delete): Deletes the voucher record from <code>APVCTR</code> if it exists.</li> <li>KG (End of Job): Terminates the program.</li> </ul> </li> <li>Record Processing:<ul> <li>If a record exists in <code>APVCTR</code>, it updates the hold code and description.</li> <li>If no record exists, it may create a new record or display an error.</li> <li>Deletes records from <code>APVCTR</code> when the delete function is invoked.</li> </ul> </li> <li>Error Handling:<ul> <li>Sets indicators (e.g., 81, 82, 90, 91) to control screen display and error messages.</li> <li>Clears fields after each operation to prevent data carryover.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input Validation:</li> <li>The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> and not be marked as deleted (<code>VNDEL \u2260 'D'</code>).</li> <li>The voucher number (<code>VOUCH</code>) must correspond to a valid record in either <code>APVCTR</code> or <code>APOPNH</code>. If not found in <code>APVCTR</code>, it checks <code>APOPNH</code>.</li> <li> <p>Invalid inputs trigger error messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cINVALID VENDOR #\u201d, \u201cINVALID COMBINATION\u201d).</p> </li> <li> <p>Hold Code and Description:</p> </li> <li>The hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) can be updated in <code>APVCTR</code>.</li> <li>If a voucher exists in <code>APOPNH</code>, its hold code (<code>OPHALT</code>) and description (<code>OPHDES</code>) are used as defaults if no <code>APVCTR</code> record exists.</li> <li> <p>The hold code and description are written to <code>APVCTR</code> when updated or added.</p> </li> <li> <p>Record Deletion:</p> </li> <li>A voucher record can be deleted from <code>APVCTR</code> using the KD function key.</li> <li> <p>Deletion is only performed if the record exists in <code>APVCTR</code>.</p> </li> <li> <p>Error Reporting:</p> </li> <li>If errors occur during processing, <code>AP197</code> is called to generate an edit report listing issues.</li> <li> <p>The report is sent to a specified output queue for review.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that only valid vouchers are processed by checking master files.</li> <li>Fields are cleared after each operation to prevent residual data from affecting subsequent transactions.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the OCL script and RPG program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Update file (<code>UF</code> in RPG).</li> <li>Fields:<ul> <li><code>ATKEY</code> (key field, 12 bytes, includes company, vendor, and voucher numbers).</li> <li><code>ATHOLD</code> (hold code, 1 byte).</li> <li><code>ATHLDS</code> (hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Stores voucher status codes and descriptions. Updated or deleted by <code>AP196</code>.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>ACDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates company numbers and retrieves company names for display.</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>VNCO</code> (company number, 29 bytes).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNNAME</code> (vendor name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates vendor numbers and retrieves vendor names for display.</p> </li> <li> <p><code>APOPNH</code> (Open Payables Header File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>OPDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>OPCONO</code> (company number, 29 bytes).</li> <li><code>OPVEND</code> (vendor number, 5 bytes).</li> <li><code>OPVONO</code> (voucher number, 5 bytes).</li> <li><code>OPHALT</code> (hold code, 1 byte).</li> <li><code>OPHDES</code> (hold description, 25 bytes).</li> <li>Other fields (e.g., invoice date, due date, gross amount) are defined but not used in this context.</li> </ul> </li> <li> <p>Purpose: Provides voucher details if no record exists in <code>APVCTR</code>. Supplies default hold code and description.</p> </li> <li> <p><code>SCREEN</code> (Workstation File):</p> </li> <li>Type: Combined file (<code>CP</code> in RPG).</li> <li>Purpose: Defines the interactive display for user input and output. Uses two formats:<ul> <li><code>AP196S1</code>: Input screen for company, vendor, and voucher numbers.</li> <li><code>AP196S2</code>: Update screen for hold code and description.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li><code>AP197</code>:</li> <li>Called By: <code>AP196.ocl36.txt</code> (OCL script).</li> <li>Purpose: Generates an edit report listing errors or changes made during the voucher status update process.</li> <li>Condition: Executed only if <code>APVCTR</code> contains records after <code>AP196</code> runs (i.e., not empty).</li> <li>Files Used: <code>APVCTR</code>, <code>APVEND</code>, <code>APCONT</code> (same as <code>AP196</code>).</li> <li>Output: Report sent to <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>, then copied to <code>JUNKOUTQ</code> withNo other external programs are called by the RPG program itself.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>AP196.ocl36.txt script sets up the environment, runs <code>AP196 program</code>, and conditionally calls <code>AP196</code> for reporting, ensuring efficient process control.</li> <li>The AP196 program (RPG III)** provides an interactive interface for updating or deleting voucher status codes, with robust validation against master files.</li> <li>Business rules ensure data integrity through validation and deletion checks.</li> <li>Tables include voucher control (<code>APVCTR</code>), company master (<code>APCONT</code>), vendor master (<code>VEND</code>), and open payables (<code>APOPNH</code>).</li> <li>External program <code>AP197</code> is used for error reporting.</li> </ul> <p>This process is typical of legacy AS/400 applications for managing A/P workflows, focusing on user-driven updates with strong validation to maintain accurate financial records.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/","title":"197RPG","text":"<p>The <code>AP197.rpg36.txt</code> file is an RPG III program (<code>AP197</code>) designed to generate an edit report for the A/P Voucher Status Code Update process, complementing the functionality of <code>AP196</code> described previously. Below, I provide a detailed explanation of what this program does, including its process steps, business rules, tables used, and any external programs called, formatted consistently with the prior response.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#overview-of-what-ap197-does","title":"Overview of What AP197 Does","text":"<p>The <code>AP197</code> program is responsible for producing a printed report that lists the details of voucher status code changes made by the <code>AP196</code> program. It reads records from the voucher control file (<code>APVCTR</code>), retrieves associated company and vendor information, and formats a report to display vendor details, voucher numbers, current status codes, and their descriptions. The report serves as an audit trail or error-checking mechanism to verify the modifications made to voucher status codes, highlighting whether prior hold codes existed.</p> <p>This program is called by the OCL script (<code>AP196.ocl36.txt</code>) when records remain in <code>APVCTR</code> after <code>AP196</code> execution, ensuring that any changes are documented for review.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Retrieves the system time and date (<code>TIMDAT</code>) and formats them into <code>SYSTIM</code> (time) and <code>SYSDAT</code> (date) for inclusion in the report header.</li> <li>Initializes the page counter (<code>PAGE</code>) to zero.</li> <li> <p>Sets a separator line (<code>SEP</code>) to \"* \" for formatting the report.</p> </li> <li> <p>Processing by Company (Level Break L2):</p> </li> <li>Loops through records in <code>APVCTR</code> grouped by company number (<code>ATCONO</code>), using the level break indicator <code>L2</code>.</li> <li> <p>For each company:</p> <ul> <li>Chains (looks up) the company number in <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>).</li> <li>If the company is not found (indicator 92 on), the company name is not printed in the report header.</li> <li>Initializes a field <code>L2CLAM</code> (likely a claim amount, but unused in output) to zero.</li> </ul> </li> <li> <p>Detail Record Processing:</p> </li> <li> <p>For each record in <code>APVCTR</code>:</p> <ul> <li>Checks if the open hold code (<code>ATOHLD</code>) and open hold description (<code>ATOHDS</code>) are blank.</li> <li>If both are blank, sets indicator 50 to indicate \"NO PRIOR HOLD CODE\" in the report.</li> <li>Constructs a vendor key (<code>VENKEY</code>) by combining the company number (<code>ATCONO</code>) and vendor number (<code>ATVEND</code>).</li> <li>Chains the vendor key to <code>APVEND</code> to retrieve the vendor name (<code>VNAME</code>).</li> <li>If the vendor is not found (indicator 99 on), clears the vendor name (<code>VENDNM</code>) to blanks.</li> <li>Writes a detail line to the report (<code>LIST</code>), including:</li> <li>Vendor number (<code>ATVEND</code>).</li> <li>Vendor name (<code>VENDNM</code>).</li> <li>Voucher number (<code>ATVOUC</code>).</li> <li>Current hold code (<code>ATHOLD</code>).</li> <li>Current hold description (<code>ATHLDS</code>).</li> <li>Open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>), if present; otherwise, \"NO PRIOR HOLD CODE\" is printed.</li> </ul> </li> <li> <p>Report Formatting:</p> </li> <li>Outputs a report header for each company (on <code>L2</code> break or overflow):<ul> <li>Includes the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), and system date (<code>SYSDAT</code>).</li> <li>Prints a title: \"A/P VOUCHER STATUS CODE MODIFY EDIT\" with the system time (<code>SYSTIM</code>).</li> </ul> </li> <li>Outputs column headings:<ul> <li>\"VENDOR\", \"NAME\", \"VOUCHER NUMBER\", \"STATUS CODE\", \"CODE DESCRIPTION\", \"CURRENT VALUES\".</li> </ul> </li> <li>Uses separator lines (<code>SEP</code>) to visually separate sections.</li> <li> <p>Handles overflow (<code>OF</code>) to ensure proper pagination.</p> </li> <li> <p>Output Generation:</p> </li> <li>Writes the formatted report to the printer file (<code>LIST</code>), which is directed to an output queue (e.g., <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>) as specified in the OCL script.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>The program assumes that records in <code>APVCTR</code> are valid, as they are pre-processed by <code>AP196</code>.</li> <li>Company numbers (<code>ATCONO</code>) are validated against <code>APCONT</code>. If not found, the company name is omitted from the report header.</li> <li> <p>Vendor numbers (<code>ATVEND</code>) are validated against <code>APVEND</code>. If not found, the vendor name is set to blanks in the report.</p> </li> <li> <p>Hold Code Reporting:</p> </li> <li>If the open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>) are both blank, the report indicates \"NO PRIOR HOLD CODE\".</li> <li> <p>Otherwise, the open hold code and description are printed to show the prior status.</p> </li> <li> <p>Report Structure:</p> </li> <li>The report is grouped by company number (<code>ATCONO</code>), with a header printed for each company.</li> <li>Detail lines list each voucher's status, including current and prior hold codes.</li> <li> <p>Page breaks are managed using the overflow indicator (<code>OF</code>) and level break (<code>L2</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>Missing company or vendor records do not halt the program; instead, blank values are used in the report.</li> <li> <p>The program does not modify any files, ensuring it is read-only and safe for audit purposes.</p> </li> <li> <p>Output Destination:</p> </li> <li>The report is sent to the printer file (<code>LIST</code>), with the output queue controlled by the OCL script (<code>AP196.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the <code>AP197</code> program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Input primary file (<code>IP</code> in RPG).</li> <li>Fields:<ul> <li><code>ATDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>ATCONO</code> (company number, 2 bytes, used for level break and lookup).</li> <li><code>ATVEND</code> (vendor number, 5 bytes).</li> <li><code>ATVOUC</code> (voucher number, 5 bytes).</li> <li><code>ATHOLD</code> (current hold code, 1 byte).</li> <li><code>ATHLDS</code> (current hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Primary input file containing voucher status records to be reported.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input chained file (<code>IC</code> in RPG).</li> <li>Fields:<ul> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Provides company names for the report header, looked up by company number (<code>ATCONO</code>).</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>VNCO</code> (company number, 29 bytes, not used in output).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNAME</code> (vendor name, 30 bytes).</li> <li><code>VNADD1</code> (address line 1, 30 bytes, not used in output).</li> </ul> </li> <li> <p>Purpose: Provides vendor names for the report, looked up by a composite key of company and vendor numbers.</p> </li> <li> <p><code>LIST</code> (Printer File):</p> </li> <li>Type: Output file (<code>O</code> in RPG).</li> <li>Purpose: Defines the report output format, with a line length of 132 characters. Used to print the edit report.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:   The <code>AP197</code> program does not call any external programs. It is a standalone report generator invoked by the OCL script (<code>AP196.ocl36.txt</code>) when needed.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>Purpose: The <code>AP197</code> program generates an edit report to document changes to voucher status codes made by <code>AP196</code>, serving as an audit or verification tool.</li> <li>Process: Reads <code>APVCTR</code> records, retrieves company and vendor details, and formats a report with headers, column headings, and detail lines showing voucher status codes and descriptions.</li> <li>Business Rules: Validates company and vendor data, handles missing records gracefully, and flags vouchers with no prior hold codes.</li> <li>Tables: Uses <code>APVCTR</code> (primary input), <code>APCONT</code> (company lookup), <code>APVEND</code> (vendor lookup), and <code>LIST</code> (report output).</li> <li>External Programs: None; operates independently under the control of the OCL script.</li> </ul> <p>This program is a typical AS/400 reporting application, designed to provide a clear, structured output for financial oversight in an accounts payable context.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/","title":"AP296 OCL","text":"<p>The provided document, <code>AP296.rpg36.txt</code>, is an RPG program (likely RPG II or RPG III) running on an IBM System/36 or AS/400, called by the OCL program <code>AP296.ocl36.txt</code> for the Accounts Payable (A/P) Voucher Status change Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#process-steps-of-the-ap296-ocl-rpg-program","title":"Process Steps of the AP296 OCL RPG Program","text":"<p>The RPG program <code>AP296</code> processes A/P Open Payable data, updating statuses and generating a report for vouchers with modified status codes (e.g., hold codes). Here\u2019s a step-by-step breakdown of the program\u2019s logic based on the provided code:</p> <ol> <li>File and Data Structure Definitions:</li> <li>Input Files:<ul> <li><code>APVCTR</code> (Input Primary, <code>IP</code>): Work file for transactions (80 bytes, indexed by 12-byte key).</li> <li><code>APCONT</code> (Input Full-Procedural, <code>IF</code>): A/P control file (256 bytes, indexed by 2-byte key).</li> <li><code>APVEND</code> (Input Full-Procedural, <code>IF</code>): Vendor master file (579 bytes, indexed by 7-byte key).</li> <li><code>APOPNH</code> (Update Full-Procedural, <code>UF</code>): Open A/P transactions file (384 bytes, indexed by 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>): Printer file for generating a report (132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>APVCTR NS 01</code>: Defines fields like <code>ATCONOL2</code> (company number), <code>ATVENDL1</code> (vendor), <code>ATVOUC</code> (voucher), <code>ATHOLD</code> (hold code), <code>ATHLDS</code> (hold description), <code>ATOHLD</code> (prior hold code), <code>ATOHDS</code> (prior hold description), and <code>ATNKEY</code> (key for chaining).</li> <li><code>APCONT NS</code>: Defines <code>ACNAME</code> (company name).</li> <li><code>APVEND NS</code>: Defines <code>VNDEL</code> (delete flag), <code>VNCO</code> (company number), <code>VNVEND</code> (vendor number), <code>VNNAME</code> (vendor name).</li> <li><code>APOPNH NS</code>: Defines fields like <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company number), <code>OPVEND</code> (vendor number), <code>OPVONO</code> (voucher number), <code>OPRCTY</code> (record type), <code>OPSEQN</code> (sequence number), and many others (e.g., amounts, dates, G/L accounts, hold flags).</li> <li><code>UDS</code>: User Data Structure with <code>Y2KCEN</code> (century, e.g., \"19\") and <code>Y2KCMP</code> (company number, e.g., \"80\").</li> </ul> </li> <li> <p>Array:</p> <ul> <li><code>SEP</code>: A 66-element array with 2-byte entries, initialized to <code>\"* \"</code> for report formatting.</li> </ul> </li> <li> <p>Initialization and Setup (Calculation Specs, <code>C</code>):</p> </li> <li>Time and Date Handling:      <pre><code>C                     TIME           TIMDAT 120\nC                     MOVELTIMDAT    SYSTIM  60\nC                     MOVE TIMDAT    SYSDAT  60\n</code></pre><ul> <li>Retrieves the system time (<code>TIME</code>) into <code>TIMDAT</code> (12 bytes).</li> <li>Extracts the time portion (<code>SYSTIM</code>, 6 bytes) and date portion (<code>SYSDAT</code>, 6 bytes) for report headers.</li> </ul> </li> <li>Report Initialization:      <pre><code>C                     MOVE '* '      SEP\nC                     Z-ADD*ZEROS    PAGE\n</code></pre><ul> <li>Sets the <code>SEP</code> array to <code>\"* \"</code> for report separators.</li> <li>Initializes the page number (<code>PAGE</code>) to zero.</li> </ul> </li> <li> <p>Indicator Setup:      <pre><code>C                     SETOF                     50\n</code></pre></p> <ul> <li>Turns off indicator <code>50</code>, which is later used to track whether a voucher has a prior hold code.</li> </ul> </li> <li> <p>Company Validation:    <pre><code>C           ATCONO    CHAINAPCONT               92\n</code></pre></p> </li> <li>Chains (looks up) the <code>APCONT</code> file using the company number (<code>ATCONO</code>) from <code>APVCTR</code>.</li> <li> <p>If no record is found, indicator <code>92</code> is set on, potentially skipping further processing for invalid companies.</p> </li> <li> <p>Hold Code Check:    <pre><code>C           ATOHLD    IFEQ *BLANKS\nC           ATOHDS    IFEQ *BLANKS\nC                     SETON                     50\nC                     END\nC                     END\n</code></pre></p> </li> <li>Checks if the prior hold code (<code>ATOHLD</code>) and prior hold description (<code>ATOHDS</code>) in <code>APVCTR</code> are blank.</li> <li> <p>If both are blank, sets indicator <code>50</code> on, indicating no prior hold code exists for the voucher.</p> </li> <li> <p>Vendor Lookup:    <pre><code>C                     MOVELATCONO    VENDKY  70\nC                     MOVE ATVEND    VENDKY\nC           VENDKY    CHAINAPVEND               31\n</code></pre></p> </li> <li>Builds a key (<code>VENDKY</code>, 7 bytes) by combining <code>ATCONO</code> (company number) and <code>ATVEND</code> (vendor number) from <code>APVCTR</code>.</li> <li>Chains to the <code>APVEND</code> file to retrieve vendor details (e.g., <code>VNNAME</code>).</li> <li> <p>If no vendor record is found, indicator <code>31</code> is set on.</p> </li> <li> <p>Open A/P Record Lookup and Update:    <pre><code>C                     MOVELATNKEY    OPNKEY 16\nC                     MOVE 1001      OPNKEY\nC           OPNKEY    CHAINAPOPNH               90\nC  N90                EXCPT\n</code></pre></p> </li> <li>Builds a key (<code>OPNKEY</code>, 16 bytes) using <code>ATNKEY</code> (from <code>APVCTR</code>) and appends a constant <code>1001</code> (likely a sequence or record type identifier).</li> <li>Chains to the <code>APOPNH</code> file to locate the corresponding open A/P record.</li> <li>If found (indicator <code>90</code> off), updates the <code>APOPNH</code> file with:      <pre><code>OAPOPNH  E\nO                         ATHOLD   126\nO                         ATHLDS   151\n</code></pre><ul> <li>Writes the new hold code (<code>ATHOLD</code>) to position 126 and hold description (<code>ATHLDS</code>) to positions 127\u2013151 in the <code>APOPNH</code> record.</li> </ul> </li> <li> <p>Executes an exception output (<code>EXCPT</code>) to write to the <code>LIST</code> file (report).</p> </li> <li> <p>Report Generation (Output Specs, <code>O</code>):</p> </li> <li> <p>The program generates a report via the <code>LIST</code> printer file with the following structure:</p> <ul> <li>Header (Level 2, <code>L2</code>):    <pre><code>OLIST    D  103   L2\nO       OR        OFNL2\nO                N92      ACNAME    30\nO                                  104 'PAGE'\nO                         PAGE  Z  108\nO                                  120 'DATE'\nO                         SYSDATY  129\nO        D  2     L2\nO       OR        OFNL2\nO                                   77 'A/P VOUCHER STATUS CODE '\nO                                   88 'MODIFY POST'\nO                                  120 'TIME'\nO                         SYSTIM   129 '  :  :  '\n</code></pre></li> <li>Prints the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Includes a title: \"A/P VOUCHER STATUS CODE MODIFY POST\".</li> <li>Column Headings:    <pre><code>O        D  1     L2\nO       OR        OFNL2\nO                                   22 'VENDOR'\nO                                   50 'VOUCHER'\nO                                   66 'STATUS'\nO                                   81 'CODE'\nO                                  112 'CURRENT'\nO        D  1     L2\nO       OR        OFNL2\nO                                    8 'VENDOR'\nO                                   20 'NAME'\nO                                   50 'NUMBER'\nO                                   64 'CODE'\nO                                   85 'DESCRIPTION'\nO                                  111 'VALUES'\n</code></pre></li> <li>Prints column headers for vendor, voucher, status code, description, and current values.</li> <li>Detail Lines:    <pre><code>O        D  2     L2\nO       OR        OFNL2\nO                         SEP      132\nO        D  1     01\nO                         ATVEND     7\nO                         VNNAME    40\nO                         ATVOUC    49\nO                         ATHOLD    62\nO                         ATHLDS    98\nO                N50      ATOHLD   105\nO                N50      ATOHDS   132\nO                 50               122 'NO PRIOR HOLD CODE'\n</code></pre></li> <li>Prints detail lines for each processed voucher, including:<ul> <li>Vendor number (<code>ATVEND</code>), vendor name (<code>VNNAME</code>), voucher number (<code>ATVOUC</code>), new hold code (<code>ATHOLD</code>), and new hold description (<code>ATHLDS</code>).</li> <li>If no prior hold code exists (indicator <code>50</code> on), prints \"NO PRIOR HOLD CODE\".</li> <li>If prior hold codes exist (indicator <code>50</code> off), prints prior hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>).</li> </ul> </li> <li>Uses the <code>SEP</code> array for line separation.</li> </ul> </li> <li> <p>Loop Control:    <pre><code>C   L2                DO                               B1\nC                     END                              E1\n</code></pre></p> </li> <li>The program processes records in a level-2 (<code>L2</code>) loop, iterating through <code>APVCTR</code> records until completion.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic, the following business rules apply: 1. Data Validation:    - The program validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file to ensure it exists.    - It verifies vendor numbers (<code>ATVEND</code>) in the <code>APVEND</code> file.    - It ensures open A/P records exist in <code>APOPNH</code> for the given voucher and key.</p> <ol> <li>Hold Code Updates:</li> <li>The program updates the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in the <code>APOPNH</code> file for matching vouchers.</li> <li> <p>It checks if prior hold codes/descriptions (<code>ATOHLD</code>, <code>ATOHDS</code>) are blank to determine if a voucher previously had no hold status.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a report listing modified vouchers with their vendor details, voucher numbers, new hold codes/descriptions, and prior hold codes/descriptions (if applicable).</li> <li>Includes company name, date, time, and page number in the report header.</li> <li> <p>Indicates when no prior hold code exists for clarity.</p> </li> <li> <p>Error Handling:</p> </li> <li>If no company record is found (<code>92</code> on), the program may skip processing or produce partial output.</li> <li>If no vendor record is found (<code>31</code> on), the report may omit vendor names.</li> <li> <p>If no open A/P record is found (<code>90</code> on), no update occurs, but the program may still produce report output via <code>EXCPT</code>.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Updates are written only to matched <code>APOPNH</code> records, ensuring data consistency.</li> <li>The program uses shared files (<code>DISP-SHR</code> in OCL), implying concurrent access is managed by the system.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPG program uses the following files: 1. APVCTR (Input Primary, <code>IP</code>): Work file containing check reconciliation transactions (e.g., company number, vendor, voucher, hold codes). 2. APCONT (Input Full-Procedural, <code>IF</code>): Control file with company details (e.g., company name). 3. APVEND (Input Full-Procedural, <code>IF</code>): Vendor master file with vendor details (e.g., vendor number, name). 4. APOPNH (Update Full-Procedural, <code>UF</code>): Open A/P transactions file, updated with new hold codes and descriptions. 5. LIST (Output, <code>O</code>): Printer file for generating the reconciliation report.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called within <code>AP296.rpg36.txt</code>. The program relies on internal logic and system operations (e.g., <code>CHAIN</code>, <code>EXCPT</code>) to perform its tasks. The <code>SFACOPY</code> command referenced in the OCL program is a system utility, not an RPG program, and is handled outside the RPG code.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#summary","title":"Summary","text":"<p>The <code>AP296</code> RPG program: - Processes A/P vouchers by reading transactions from <code>APVCTR</code>, validating company and vendor data, and updating hold codes/descriptions in <code>APOPNH</code>. - Generates a detailed report (<code>LIST</code>) showing modified vouchers, including vendor details, voucher numbers, new and prior hold codes, and descriptions. - Uses a loop (<code>L2</code>) to process records, with validations for company, vendor, and open A/P records. - Applies business rules to ensure data integrity, proper hold code updates, and clear reporting.</p> <p>Tables Used: <code>APVCTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APOPNH</code>, <code>LIST</code>. External Programs Called: None (only system utilities like <code>SFACOPY</code> in the OCL).</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/","title":"AP296 RPG","text":"<p>The provided document, <code>AP296.rpg36.txt</code>, is an RPG program (likely RPG II or RPG III) running on an IBM System/36 or AS/400, called by the OCL program <code>AP296.ocl36.txt</code> for the Accounts Payable (A/P) Voucher Status Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>AP296</code> processes A/P posted voucher to change status data, updating statuses and generating a report for vouchers with modified status codes (e.g., hold codes). Here\u2019s a step-by-step breakdown of the program\u2019s logic based on the provided code:</p> <ol> <li>File and Data Structure Definitions:</li> <li>Input Files:<ul> <li><code>APVCTR</code> (Input Primary, <code>IP</code>): Work file for voucher status transactions (80 bytes, indexed by 12-byte key).</li> <li><code>APCONT</code> (Input Full-Procedural, <code>IF</code>): A/P control file (256 bytes, indexed by 2-byte key).</li> <li><code>APVEND</code> (Input Full-Procedural, <code>IF</code>): Vendor master file (579 bytes, indexed by 7-byte key).</li> <li><code>APOPNH</code> (Update Full-Procedural, <code>UF</code>): Open A/P transactions file (384 bytes, indexed by 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>): Printer file for generating a report (132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>APVCTR NS 01</code>: Defines fields like <code>ATCONOL2</code> (company number), <code>ATVENDL1</code> (vendor), <code>ATVOUC</code> (voucher), <code>ATHOLD</code> (hold code), <code>ATHLDS</code> (hold description), <code>ATOHLD</code> (prior hold code), <code>ATOHDS</code> (prior hold description), and <code>ATNKEY</code> (key for chaining).</li> <li><code>APCONT NS</code>: Defines <code>ACNAME</code> (company name).</li> <li><code>APVEND NS</code>: Defines <code>VNDEL</code> (delete flag), <code>VNCO</code> (company number), <code>VNVEND</code> (vendor number), <code>VNNAME</code> (vendor name).</li> <li><code>APOPNH NS</code>: Defines fields like <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company number), <code>OPVEND</code> (vendor number), <code>OPVONO</code> (voucher number), <code>OPRCTY</code> (record type), <code>OPSEQN</code> (sequence number), and many others (e.g., amounts, dates, G/L accounts, hold flags).</li> <li><code>UDS</code>: User Data Structure with <code>Y2KCEN</code> (century, e.g., \"19\") and <code>Y2KCMP</code> (company number, e.g., \"80\").</li> </ul> </li> <li> <p>Array:</p> <ul> <li><code>SEP</code>: A 66-element array with 2-byte entries, initialized to <code>\"* \"</code> for report formatting.</li> </ul> </li> <li> <p>Initialization and Setup (Calculation Specs, <code>C</code>):</p> </li> <li>Time and Date Handling:      <pre><code>C                     TIME           TIMDAT 120\nC                     MOVELTIMDAT    SYSTIM  60\nC                     MOVE TIMDAT    SYSDAT  60\n</code></pre><ul> <li>Retrieves the system time (<code>TIME</code>) into <code>TIMDAT</code> (12 bytes).</li> <li>Extracts the time portion (<code>SYSTIM</code>, 6 bytes) and date portion (<code>SYSDAT</code>, 6 bytes) for report headers.</li> </ul> </li> <li>Report Initialization:      <pre><code>C                     MOVE '* '      SEP\nC                     Z-ADD*ZEROS    PAGE\n</code></pre><ul> <li>Sets the <code>SEP</code> array to <code>\"* \"</code> for report separators.</li> <li>Initializes the page number (<code>PAGE</code>) to zero.</li> </ul> </li> <li> <p>Indicator Setup:      <pre><code>C                     SETOF                     50\n</code></pre></p> <ul> <li>Turns off indicator <code>50</code>, which is later used to track whether a voucher has a prior hold code.</li> </ul> </li> <li> <p>Company Validation:    <pre><code>C           ATCONO    CHAINAPCONT               92\n</code></pre></p> </li> <li>Chains (looks up) the <code>APCONT</code> file using the company number (<code>ATCONO</code>) from <code>APVCTR</code>.</li> <li> <p>If no record is found, indicator <code>92</code> is set on, potentially skipping further processing for invalid companies.</p> </li> <li> <p>Hold Code Check:    <pre><code>C           ATOHLD    IFEQ *BLANKS\nC           ATOHDS    IFEQ *BLANKS\nC                     SETON                     50\nC                     END\nC                     END\n</code></pre></p> </li> <li>Checks if the prior hold code (<code>ATOHLD</code>) and prior hold description (<code>ATOHDS</code>) in <code>APVCTR</code> are blank.</li> <li> <p>If both are blank, sets indicator <code>50</code> on, indicating no prior hold code exists for the voucher.</p> </li> <li> <p>Vendor Lookup:    <pre><code>C                     MOVELATCONO    VENDKY  70\nC                     MOVE ATVEND    VENDKY\nC           VENDKY    CHAINAPVEND               31\n</code></pre></p> </li> <li>Builds a key (<code>VENDKY</code>, 7 bytes) by combining <code>ATCONO</code> (company number) and <code>ATVEND</code> (vendor number) from <code>APVCTR</code>.</li> <li>Chains to the <code>APVEND</code> file to retrieve vendor details (e.g., <code>VNNAME</code>).</li> <li> <p>If no vendor record is found, indicator <code>31</code> is set on.</p> </li> <li> <p>Open A/P Record Lookup and Update:    <pre><code>C                     MOVELATNKEY    OPNKEY 16\nC                     MOVE 1001      OPNKEY\nC           OPNKEY    CHAINAPOPNH               90\nC  N90                EXCPT\n</code></pre></p> </li> <li>Builds a key (<code>OPNKEY</code>, 16 bytes) using <code>ATNKEY</code> (from <code>APVCTR</code>) and appends a constant <code>1001</code> (likely a sequence or record type identifier).</li> <li>Chains to the <code>APOPNH</code> file to locate the corresponding open A/P record.</li> <li>If found (indicator <code>90</code> off), updates the <code>APOPNH</code> file with:      <pre><code>OAPOPNH  E\nO                         ATHOLD   126\nO                         ATHLDS   151\n</code></pre><ul> <li>Writes the new hold code (<code>ATHOLD</code>) to position 126 and hold description (<code>ATHLDS</code>) to positions 127\u2013151 in the <code>APOPNH</code> record.</li> </ul> </li> <li> <p>Executes an exception output (<code>EXCPT</code>) to write to the <code>LIST</code> file (report).</p> </li> <li> <p>Report Generation (Output Specs, <code>O</code>):</p> </li> <li> <p>The program generates a report via the <code>LIST</code> printer file with the following structure:</p> <ul> <li>Header (Level 2, <code>L2</code>):    <pre><code>OLIST    D  103   L2\nO       OR        OFNL2\nO                N92      ACNAME    30\nO                                  104 'PAGE'\nO                         PAGE  Z  108\nO                                  120 'DATE'\nO                         SYSDATY  129\nO        D  2     L2\nO       OR        OFNL2\nO                                   77 'A/P VOUCHER STATUS CODE '\nO                                   88 'MODIFY POST'\nO                                  120 'TIME'\nO                         SYSTIM   129 '  :  :  '\n</code></pre></li> <li>Prints the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Includes a title: \"A/P VOUCHER STATUS CODE MODIFY POST\".</li> <li>Column Headings:    <pre><code>O        D  1     L2\nO       OR        OFNL2\nO                                   22 'VENDOR'\nO                                   50 'VOUCHER'\nO                                   66 'STATUS'\nO                                   81 'CODE'\nO                                  112 'CURRENT'\nO        D  1     L2\nO       OR        OFNL2\nO                                    8 'VENDOR'\nO                                   20 'NAME'\nO                                   50 'NUMBER'\nO                                   64 'CODE'\nO                                   85 'DESCRIPTION'\nO                                  111 'VALUES'\n</code></pre></li> <li>Prints column headers for vendor, voucher, status code, description, and current values.</li> <li>Detail Lines:    <pre><code>O        D  2     L2\nO       OR        OFNL2\nO                         SEP      132\nO        D  1     01\nO                         ATVEND     7\nO                         VNNAME    40\nO                         ATVOUC    49\nO                         ATHOLD    62\nO                         ATHLDS    98\nO                N50      ATOHLD   105\nO                N50      ATOHDS   132\nO                 50               122 'NO PRIOR HOLD CODE'\n</code></pre></li> <li>Prints detail lines for each processed voucher, including:<ul> <li>Vendor number (<code>ATVEND</code>), vendor name (<code>VNNAME</code>), voucher number (<code>ATVOUC</code>), new hold code (<code>ATHOLD</code>), and new hold description (<code>ATHLDS</code>).</li> <li>If no prior hold code exists (indicator <code>50</code> on), prints \"NO PRIOR HOLD CODE\".</li> <li>If prior hold codes exist (indicator <code>50</code> off), prints prior hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>).</li> </ul> </li> <li>Uses the <code>SEP</code> array for line separation.</li> </ul> </li> <li> <p>Loop Control:    <pre><code>C   L2                DO                               B1\nC                     END                              E1\n</code></pre></p> </li> <li>The program processes records in a level-2 (<code>L2</code>) loop, iterating through <code>APVCTR</code> records until completion.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic, the following business rules apply: 1. Data Validation:    - The program validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file to ensure it exists.    - It verifies vendor numbers (<code>ATVEND</code>) in the <code>APVEND</code> file.    - It ensures open A/P records exist in <code>APOPNH</code> for the given voucher and key.</p> <ol> <li>Hold Code Updates:</li> <li>The program updates the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in the <code>APOPNH</code> file for matching vouchers.</li> <li> <p>It checks if prior hold codes/descriptions (<code>ATOHLD</code>, <code>ATOHDS</code>) are blank to determine if a voucher previously had no hold status.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a report listing modified vouchers with their vendor details, voucher numbers, new hold codes/descriptions, and prior hold codes/descriptions (if applicable).</li> <li>Includes company name, date, time, and page number in the report header.</li> <li> <p>Indicates when no prior hold code exists for clarity.</p> </li> <li> <p>Error Handling:</p> </li> <li>If no company record is found (<code>92</code> on), the program may skip processing or produce partial output.</li> <li>If no vendor record is found (<code>31</code> on), the report may omit vendor names.</li> <li> <p>If no open A/P record is found (<code>90</code> on), no update occurs, but the program may still produce report output via <code>EXCPT</code>.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Updates are written only to matched <code>APOPNH</code> records, ensuring data consistency.</li> <li>The program uses shared files (<code>DISP-SHR</code> in OCL), implying concurrent access is managed by the system.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPG program uses the following files: 1. APVCTR (Input Primary, <code>IP</code>): Work file containing  transactions (e.g., company number, vendor, voucher, hold codes). 2. APCONT (Input Full-Procedural, <code>IF</code>): Control file with company details (e.g., company name). 3. APVEND (Input Full-Procedural, <code>IF</code>): Vendor master file with vendor details (e.g., vendor number, name). 4. APOPNH (Update Full-Procedural, <code>UF</code>): Open A/P transactions file, updated with new hold codes and descriptions. 5. LIST (Output, <code>O</code>): Printer file for generating the report.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called within <code>AP296.rpg36.txt</code>. The program relies on internal logic and system operations (e.g., <code>CHAIN</code>, <code>EXCPT</code>) to perform its tasks. The <code>SFACOPY</code> command referenced in the OCL program is a system utility, not an RPG program, and is handled outside the RPG code.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#summary","title":"Summary","text":"<p>The <code>AP296</code> RPG program: - Processes A/P voucher status by reading transactions from <code>APVCTR</code>, validating company and vendor data, and updating hold codes/descriptions in <code>APOPNH</code>. - Generates a detailed report (<code>LIST</code>) showing modified vouchers, including vendor details, voucher numbers, new and prior hold codes, and descriptions. - Uses a loop (<code>L2</code>) to process records, with validations for company, vendor, and open A/P records. - Applies business rules to ensure data integrity, proper hold code updates, and clear reporting.</p> <p>Tables Used: <code>APVCTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APOPNH</code>, <code>LIST</code>. External Programs Called: None (only system utilities like <code>SFACOPY</code> in the OCL).</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/","title":"Summary AP296 Status Code Post","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#ap296-summary","title":"AP296 Summary","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#function-requirements-post-ap-voucher-status-code-changes","title":"Function Requirements: Post A/P Voucher Status Code Changes","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#overview","title":"Overview","text":"<p>The <code>PostAPVoucherStatus</code> function updates the hold status (hold code and description) of Accounts Payable (A/P) vouchers in the open A/P file and generates a report summarizing the changes. It processes input from a work file, validates data against company and vendor records, and ensures accurate updates and reporting for the A/P Voucher Status Code Change Process.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#inputs","title":"Inputs","text":"<ul> <li>Work File (<code>APVCTR</code>): Contains voucher records with:</li> <li>Company Number (<code>ATCONO</code>, 2 bytes)</li> <li>Vendor Number (<code>ATVEND</code>, 5 bytes)</li> <li>Voucher Number (<code>ATVOUC</code>, 5 bytes)</li> <li>Hold Code (<code>ATHOLD</code>, 1 byte)</li> <li>Hold Description (<code>ATHLDS</code>, 25 bytes)</li> <li>Prior Hold Code (<code>ATOHLD</code>, 1 byte)</li> <li>Prior Hold Description (<code>ATOHDS</code>, 25 bytes)</li> <li>Transaction Key (<code>ATNKEY</code>, 12 bytes)</li> <li>Control File (<code>APCONT</code>): Contains company details (e.g., <code>ACNAME</code>, company name, 30 bytes).</li> <li>Vendor File (<code>APVEND</code>): Contains vendor details (e.g., <code>VNVEND</code>, vendor number; <code>VNNAME</code>, vendor name).</li> <li>Open A/P File (<code>APOPNH</code>): Contains open A/P transactions (updated with new hold codes and descriptions).</li> <li>Printer File (<code>LIST</code>): Output file for the A/P Voucher Status Code Change Process report.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#outputs","title":"Outputs","text":"<ul> <li>Updated Open A/P File (<code>APOPNH</code>): Records updated with new hold codes and descriptions.</li> <li>Report (<code>LIST</code>): A printer file containing the A/P Voucher Status Code Change Process report with:</li> <li>Company name (<code>ACNAME</code>)</li> <li>Page number (<code>PAGE</code>)</li> <li>Date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>)</li> <li>Voucher details (<code>ATVEND</code>, <code>VNNAME</code>, <code>ATVOUC</code>, <code>ATHOLD</code>, <code>ATHLDS</code>, <code>ATOHLD</code>, <code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Input Data:</li> <li>Check if <code>APVCTR</code> contains any records.</li> <li>If no records exist, pause with message: \"THERE ARE NO RECORDS TO POST.  PRESS 0 TO CANCEL.\"</li> <li> <p>Cancel the process if the user presses <code>ATTN,2,ENTER</code>.</p> </li> <li> <p>Load RPG Program:</p> </li> <li> <p>Load the <code>AP296</code> RPG program.</p> </li> <li> <p>Validate Company:</p> </li> <li>Chain <code>ATCONO</code> to <code>APCONT</code> to verify the company number.</li> <li> <p>Set indicator <code>92</code> if the company number is invalid.</p> </li> <li> <p>Validate Vendor:</p> </li> <li>Chain <code>VENDKY</code> (built from <code>ATCONO</code> and <code>ATVEND</code>) to <code>APVEND</code> to verify the vendor number.</li> <li> <p>Set indicator <code>31</code> if the vendor number is invalid.</p> </li> <li> <p>Check Prior Hold Status:</p> </li> <li>If <code>ATOHLD</code> and <code>ATOHDS</code> are blank, set indicator <code>50</code> on.</li> <li> <p>Otherwise, no prior hold code exists.</p> </li> <li> <p>Update Open A/P Records:</p> </li> <li>For each valid voucher in <code>APVCTR</code>, chain <code>OPNKEY</code> (built from <code>ATNKEY</code> and <code>1001</code>) to <code>APOPNH</code>.</li> <li>If found (indicator <code>90</code> off), update <code>ATHOLD</code> (position 126) and <code>ATHLDS</code> (positions 127\u2013151) in <code>APOPNH</code>.</li> <li> <p>Execute exception output (<code>EXCPT</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li> <p>For each processed voucher, output to <code>LIST</code>:</p> <ul> <li>Vendor number (<code>ATVEND</code>)</li> <li>Vendor name (<code>VNNAME</code>)</li> <li>Voucher number (<code>ATVOUC</code>)</li> <li>New hold code (<code>ATHOLD</code>)</li> <li>New hold description (<code>ATHLDS</code>)</li> <li>Prior hold code (<code>ATOHLD</code>)</li> <li>Prior hold description (<code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul> </li> <li> <p>Clean Up:</p> </li> <li>Delete the processed work file (<code>APVCTR</code>) after successful posting.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#business-rules","title":"Business Rules","text":"<ul> <li>Data Validation:</li> <li>The company number (<code>ATCONO</code>) must exist in <code>APCONT</code>.</li> <li>The vendor number (<code>ATVEND</code>) must exist in <code>APVEND</code>.</li> <li> <p>The voucher must exist in <code>APOPNH</code> with matching vendor and company records.</p> </li> <li> <p>Hold Code Updates:</p> </li> <li>Update the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in <code>APOPNH</code> only for valid vouchers.</li> <li> <p>Check for prior hold codes (<code>ATOHLD</code>, <code>ATOHDS</code>) and update only if they are not blank.</p> </li> <li> <p>Reporting:</p> </li> <li> <p>Generate a report (<code>LIST</code>) summarizing the A/P Voucher Status Code Change Process:</p> <ul> <li>Company name (<code>ACNAME</code>)</li> <li>Page number (<code>PAGE</code>)</li> <li>Date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>)</li> <li>Voucher details (<code>ATVEND</code>, <code>VNNAME</code>, <code>ATVOUC</code>, <code>ATHOLD</code>, <code>ATHLDS</code>, <code>ATOHLD</code>, <code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>If the company number is invalid (<code>92</code> on), skip processing for that company.</li> <li>If the vendor number is invalid (<code>31</code> on), skip processing for that vendor.</li> <li> <p>If no open A/P record is found (<code>90</code> on), skip the update but generate report output.</p> </li> <li> <p>Data Cleanup:</p> </li> <li>Delete the processed <code>APVCTR</code> work file after successful posting.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#calculations","title":"Calculations","text":"<ul> <li>No calculations are explicitly performed in this function. It updates hold codes and descriptions based on input data and validation results.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP296: The main RPG program that processes the A/P Voucher Status Code Change Process.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#notes","title":"Notes","text":"<ul> <li>The function assumes that the input data in <code>APVCTR</code> is accurate and complete.</li> <li>The output report (<code>LIST</code>) is formatted for printing and includes all relevant voucher details.</li> <li>The <code>SFACOPY</code> system utility is used to manage the report output in the output queue.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/","title":"AP150 Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#use-cases-implemented-by-the-ap150-ap156-call-stack","title":"Use Cases Implemented by the AP150-AP156 Call Stack","text":"<p>The call stack, consisting of <code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, and <code>AP156.ocl36.txt</code> with <code>AP156.rpg36.txt</code>, implements a single primary use case in the Accounts Payable (A/P) system:</p> <ol> <li>Generate and Process Accounts Payable Payments:</li> <li>This use case encompasses selecting vouchers for payment based on criteria (e.g., due date, payment method), creating payment records, generating a cash requirements report, and producing a NACHA file for ACH payments. The process handles multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and tracks discounts, ensuring accurate payment processing and reporting.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-requirement-document-generate-and-process-accounts-payable-payments","title":"Function Requirement Document: Generate and Process Accounts Payable Payments","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-overview","title":"Function Overview","text":"<p>The <code>GenerateAndProcessAPPayments</code> function automates the selection, processing, reporting, and transmission of Accounts Payable payments. It takes input parameters defining payment criteria and produces payment records, a cash requirements report, and a NACHA file for ACH payments. The function supports checks, ACH, wire transfers, employee expenses, and utility auto-pay, while handling discounts and validations.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (PTCONO): Identifies the company for payment processing (7 digits).</li> <li>Bank G/L Number (PTBKGL): Bank general ledger number for payment (8 digits).</li> <li>Next Check Number (PTNXCK): Starting check number for non-prepaid payments (6 digits).</li> <li>Check Date (PTCKDT): Date of payment issuance (6 digits, YYMMDD).</li> <li>Pay-By Date (PTDATE): Cutoff date for selecting vouchers (6 digits, YYMMDD).</li> <li>Force Discount Flag (PTFDIS): <code>'D'</code> to force discounts, otherwise blank.</li> <li>Payment Method (PTHOLD): <code>' '</code> (check), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expense), <code>U</code> (utility auto-pay).</li> <li>Vendor Number (PTVEND): Optional vendor number for specific vendor payments (5 digits).</li> <li>Voucher Number (PTVO): Optional voucher number for specific voucher payments (5 digits).</li> <li>Partial Payment Amount (PTAMT): Amount for partial payments (7.2 digits, packed).</li> <li>Discount Amount (PTDISC): Specific discount to apply (5.2 digits, packed).</li> <li>Pay or Hold (PTPORH): <code>'P'</code> to pay held vouchers, <code>'H'</code> to hold, otherwise blank.</li> <li>Single Check Flag (PTSNGL): <code>'S'</code> for single check per voucher, otherwise blank.</li> <li>Make Prepaid Flag (PTMKPP): <code>'P'</code> to mark as prepaid, otherwise blank.</li> <li>Prepaid Check Number (PTPPCK): Check number for prepaid vouchers (6 digits).</li> <li>Prepaid Date (PTPPDT): Date for prepaid vouchers (6 digits, YYMMDD).</li> <li>Period (PTPD): Accounting period (2 digits).</li> <li>Year (PTPDYY): Accounting year (2 digits).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (APPAY): Records with payment details (company, vendor, voucher, amount, discount, check number, etc.).</li> <li>Missed Discount Records (APPYDS): Records for vouchers with missed discounts.</li> <li>Check Records (APPYCK): Check details (check number, amount, status, etc.).</li> <li>Invoice Detail Records (APDETINV): Aggregated invoice details for reporting.</li> <li>Cash Requirements Report (APCSHRQ): Report detailing payments, discounts, and totals.</li> <li>NACHA File (ACHFILE): NACHA-formatted file for ACH payments (if applicable).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure company number, bank G/L, and payment method are valid.</li> <li> <p>Validate dates (PTCKDT, PTDATE, PTPPDT) for Y2K compliance (convert to 8-digit format, e.g., CCYYMMDD).</p> </li> <li> <p>Select Vouchers (AP151):</p> </li> <li>Pay by Date:<ul> <li>Select <code>APOPEN</code> vouchers where:</li> <li>Company (<code>OPCONO</code>) matches <code>PTCONO</code>.</li> <li>Bank G/L (<code>OPBKGL</code>) matches <code>PTBKGL</code>.</li> <li>Payment method (<code>OPHALT</code>) matches <code>PTHOLD</code> (<code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code> unless <code>PTPORH = 'P'</code>).</li> <li>Due date (<code>OPDUED</code>) is on or before <code>PTDATE</code> (unless <code>PTFDIS = 'D'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), ensure payment method matches <code>PTHOLD</code>.</li> </ul> </li> <li> <p>Pay by Vendor/Voucher:</p> <ul> <li>Select <code>APOPEN</code> vouchers matching <code>PTVEND</code> and optionally <code>PTVO</code>.</li> <li>Apply same company, bank G/L, and payment method checks.</li> <li>Handle partial payments (<code>PTAMT</code>) and specific discounts (<code>PTDISC</code>).</li> </ul> </li> <li> <p>Calculate Payments and Discounts:</p> </li> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.<ul> <li><code>OPGRAM</code>: Gross voucher amount.</li> <li><code>OPDISC</code>: Discount (if applicable).</li> <li><code>OPPPTD</code>: Partial paid to date.</li> </ul> </li> <li>Discount Logic:<ul> <li>If <code>PTFDIS = 'D'</code>, apply <code>OPDISC</code> regardless of discount due date.</li> <li>Otherwise, apply <code>OPDISC</code> only if discount due date (<code>OPDSDT</code>) is on or after <code>PTCKDT</code> and before or on <code>PTDATE</code>.</li> <li>If discount is missed and <code>PTFDIS \u2260 'D'</code>, set <code>OPDISC = 0</code> and write to <code>APPYDS</code>.</li> </ul> </li> <li> <p>For partial payments, set <code>OPLPAM = PTAMT</code> and adjust <code>OPDISC</code> to zero if <code>PTAMT = OPLPAM</code>.</p> </li> <li> <p>Create Payment Records:</p> </li> <li>Write to <code>APPAY</code> with fields: <code>OPDEL</code> (delete flag), <code>OPLPAM</code>, <code>OPDISC</code>, <code>OPCKNO</code> (check number, <code>PTNXCK</code> for non-prepaid, <code>PTPPCK</code> for prepaid), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (<code>'S'</code> for single check or one-time vendor), <code>OPCKDT</code> (check date), <code>PTSEQ#</code> (sequence).</li> <li>For held vouchers (<code>PTPORH = 'H'</code>), mark <code>APPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li> <p>Write missed discount records to <code>APPYDS</code>.</p> </li> <li> <p>Generate Cash Requirements Report (AP155):</p> </li> <li>Aggregate payment totals by company and check:<ul> <li>Computer checks (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid payments (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Total checks (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li>Update <code>APDETINV</code> with aggregated invoice amounts (<code>APGRAM</code>, <code>APDISC</code>) for same invoice numbers.</li> <li>Validate checks against <code>APCHKR</code>:<ul> <li>Non-void checks must not exist or be open.</li> <li>Void checks must exist, be open, and fully voided.</li> </ul> </li> <li>Write check records to <code>APPYCK</code> with status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</li> <li> <p>Output report to <code>APCSHRQ</code> with invoice details, check totals, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</p> </li> <li> <p>Create NACHA File for ACH Payments (AP156):</p> </li> <li> <p>If <code>PTHOLD = 'A'</code> (indicated by LDA position 400 = <code>'A'</code>):</p> <ul> <li>Clear <code>ACHFILE</code>.</li> <li>Write NACHA records for <code>APPYCK</code> records with <code>PYSTAT = 'A'</code>:</li> <li>File Header (Type 1): ABA numbers, transmission date/time, company names.</li> <li>Batch Header (Type 5): Company details, effective date (<code>CKYMD</code>).</li> <li>Entry Detail (Type 6): Vendor bank routing (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount (<code>PYCKAM</code>), transaction code (<code>22</code> for checking, <code>32</code> for savings).</li> <li>Batch Control (Type 8): Batch entry count, hash, and credit totals.</li> <li>File Control (Type 9): File-level counts and totals.</li> <li>Filler records to pad blocks to multiples of 10.</li> <li>Output report to <code>REPORT</code> for logging.</li> </ul> </li> <li> <p>Return Outputs:</p> </li> <li>Return updated files (<code>APPAY</code>, <code>APPYDS</code>, <code>APPYCK</code>, <code>APDETINV</code>), report (<code>APCSHRQ</code>), and NACHA file (<code>ACHFILE</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Selection:</li> <li>Vouchers must match company, bank G/L, and payment method.</li> <li>Held vouchers (<code>OPHALT = 'H'</code>) require <code>PTPORH = 'P'</code> to be paid.</li> <li> <p>Prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) must match <code>PTHOLD</code>.</p> </li> <li> <p>Discount Handling:</p> </li> <li>Discounts applied if <code>PTFDIS = 'D'</code> or discount due date is valid.</li> <li> <p>Missed discounts (past due, no force discount) are recorded in <code>APPYDS</code>.</p> </li> <li> <p>Check Number Assignment:</p> </li> <li>Non-prepaid payments use <code>PTNXCK</code>, incremented per check.</li> <li> <p>Prepaid payments use <code>PTPPCK</code> and <code>PTPPDT</code>.</p> </li> <li> <p>Single Check and One-Time Vendors:</p> </li> <li> <p>One-time vendors (<code>OPVEND = 0</code>) or <code>PTSNGL = 'S'</code> require single checks (<code>OPSNGL = 'S'</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not exist or be open in <code>APCHKR</code>.</li> <li>Void checks must exist, be open, and fully voided.</li> <li> <p>Zero/negative amounts are marked \"CREDIT / NO PAY\".</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>Maximum 36 invoices per check to prevent stub overflow.</p> </li> <li> <p>ACH Processing:</p> </li> <li>Only executed if <code>PTHOLD = 'A'</code>.</li> <li>Requires valid vendor ACH details (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>NACHA file adheres to standard format with proper record types and block padding.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li>Multiple invoices with the same number for a vendor are aggregated in <code>APDETINV</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments: <code>OPLPAM = PTAMT</code>, <code>OPDISC = 0</code> if <code>PTAMT = OPLPAM</code>.</li> <li>Discount: <code>OPDISC = OPDISC</code> if valid (force discount or within date range), else <code>0</code>.</li> <li>Check Totals: Sum <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code> per check and company.</li> <li>NACHA Hash: Sum of vendor routing numbers (<code>VNARTE</code>) for batch (<code>L2HASH</code>) and file (<code>LRHASH</code>).</li> <li>NACHA Block Count: <code>LRBLOK = CEIL(RECCNT / 10)</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input data is pre-validated and sorted (e.g., <code>APPYTR</code> sorted by <code>#GSORT</code> in <code>AP150</code>).</li> <li>Files (<code>APOPEN</code>, <code>APVEND</code>, <code>APCONT</code>, <code>APCHKR</code>) are populated with valid data.</li> <li>ACH payments require vendor ACH details in <code>APVEND</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#error-handling","title":"Error Handling","text":"<ul> <li>Skips invalid records (deleted, mismatched company/bank G/L, or payment method).</li> <li>Reports errors in <code>APCSHRQ</code> (e.g., check already open, invalid void).</li> <li>Logs missed discounts in <code>APPYDS</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack-and-data-flow","title":"Tables Used in the AP150-AP156 Call Stack and Data Flow","text":"<p>Below is a detailed explanation of the tables (files) used in the Accounts Payable (A/P) payment processing call stack (<code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, <code>AP156.ocl36.txt</code>, <code>AP156.rpg36.txt</code>), their purposes, and a summary of the data flow.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-files-used-and-their-purpose","title":"Tables (Files) Used and Their Purpose","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack","title":"Tables Used in the AP150-AP156 Call Stack","text":"<p>The following tables are used across the AP150-AP156 call stack to process Accounts Payable payments, generate reports, and create NACHA files for ACH payments. Each table's purpose, key fields, and usage in the programs are described below.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#1-appytr-payment-transaction-file","title":"1. APPYTR (Payment Transaction File)","text":"<ul> <li>Purpose: Stores sorted payment transaction data used as input for payment selection criteria. It contains header records (pay by date) and detail records (pay by vendor/voucher).</li> <li>File Usage:</li> <li>AP151: Primary input file, read to determine which vouchers to select from <code>APOPEN</code> based on company, vendor, voucher, payment method, and dates.</li> <li>AP155: Chained to retrieve next check number, check date, pay-by date, and payment method for the cash requirements report.</li> <li>Key Fields:</li> <li><code>PTCONO</code> (Company Number, 7 digits)</li> <li><code>PTVEND</code> (Vendor Number, 5 digits)</li> <li><code>PTVO</code> (Voucher Number, 5 digits)</li> <li><code>PTAMT</code> (Partial Payment Amount, 7.2 digits, packed)</li> <li><code>PTDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>PTBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PTNXCK</code> (Next Check Number, 6 digits)</li> <li><code>PTCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PTDATE</code> (Pay-By Date, 6 digits, YYMMDD)</li> <li><code>PTFDIS</code> (Force Discount, <code>'D'</code> or blank)</li> <li><code>PTHOLD</code> (Payment Method, <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>)</li> <li><code>PTPORH</code> (Pay or Hold, <code>'P'</code>, <code>'H'</code>, or blank)</li> <li><code>PTMKPP</code> (Make Prepaid, <code>'P'</code> or blank)</li> <li><code>PTSEQ#</code> (Sequence Number)</li> <li>Record Length: 128 bytes</li> <li>Access: Input Primary (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#2-apopen-open-ap-file","title":"2. APOPEN (Open A/P File)","text":"<ul> <li>Purpose: Contains open voucher details used to identify eligible vouchers for payment based on selection criteria.</li> <li>File Usage:</li> <li>AP151: Chained to select vouchers matching company, bank G/L, payment method, and due date criteria.</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for reporting if not found in <code>APVEND</code>.</li> <li>Key Fields:</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPHALT</code> (Hold Code, <code>'H'</code> or payment method)</li> <li><code>OPPAID</code> (Prepaid Code, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPCKNO</code> (Prepaid Check Number, 6 digits)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Input with Disk (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#3-appay-payment-file","title":"3. APPAY (Payment File)","text":"<ul> <li>Purpose: Stores generated payment records, including payment amounts, discounts, and check details for processed vouchers.</li> <li>File Usage:</li> <li>AP151: Output file where payment records are written or updated with calculated payment amounts and check details.</li> <li>AP155: Primary input file, read to generate the cash requirements report; updated with sequence numbers.</li> <li>Key Fields:</li> <li><code>OPDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPLPAM</code> (Payment Amount, 6.2 digits, packed)</li> <li><code>OPPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPCKNO</code> (Check Number, 6 digits)</li> <li><code>OPCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>OPSEQ#</code> (Sequence Number, 5 digits)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li>Record Length: 384 bytes</li> <li>Access: Update/Create (AP151), Update Primary (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#4-appyds-missed-discount-file","title":"4. APPYDS (Missed Discount File)","text":"<ul> <li>Purpose: Tracks vouchers where discounts were available but not taken due to missed discount due dates.</li> <li>File Usage:</li> <li>AP151: Output file where missed discount records are written.</li> <li>AP155: Chained to check for missed discounts and annotate the cash requirements report (\"DISCOUNT NOT TAKEN\").</li> <li>Key Fields:</li> <li><code>DSDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>DSCONO</code> (Company Number, 7 digits)</li> <li><code>DSVEND</code> (Vendor Number, 5 digits)</li> <li><code>DSVONO</code> (Voucher Number, 5 digits)</li> <li><code>DSGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>DSDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>DSPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>DSLPAM</code> (Last Payment Amount, 6.2 digits, packed)</li> <li><code>DSDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>DSDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>DSCKNO</code> (Check Number, 6 digits)</li> <li><code>DSPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>DSSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>DSBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Output (AP151), Input with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#5-appyck-check-file","title":"5. APPYCK (Check File)","text":"<ul> <li>Purpose: Stores check details, including check number, amount, and status (e.g., full stub, void, credit/no pay).</li> <li>File Usage:</li> <li>AP155: Output file where check records are written or updated with status and totals.</li> <li>AP156: Primary input file, read to generate NACHA file for ACH payments.</li> <li>Key Fields:</li> <li><code>AXRECD</code> (Record Code, <code>' '</code>, <code>'F'</code>, <code>'V'</code>, <code>'C'</code>, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>PYCONO</code> (Company Number, 7 digits)</li> <li><code>PYVEND</code> (Vendor Number, 5 digits)</li> <li><code>PYBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PYCHK#</code> (Check Number, 6 digits)</li> <li><code>PYCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li><code>PYCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PYNAME</code> (Vendor Name, 22 bytes)</li> <li><code>PYSEQ#</code> (Sequence Number, 9 digits)</li> <li><code>PYCNTR</code> (Invoice Count, 9 digits)</li> <li>Record Length: 96 bytes</li> <li>Access: Update/Create (AP155), Input Primary (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#6-apdetinv-invoice-detail-file","title":"6. APDETINV (Invoice Detail File)","text":"<ul> <li>Purpose: Tracks aggregated invoice details for vendors, combining amounts for invoices with the same number.</li> <li>File Usage:</li> <li>AP155: Updated with aggregated gross and discount amounts for reporting.</li> <li>Key Fields:</li> <li><code>APDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>APCONO</code> (Company Number, 7 digits)</li> <li><code>APVEND</code> (Vendor Number, 5 digits)</li> <li><code>APINVN</code> (Invoice Number, 20 bytes)</li> <li><code>APGRAM</code> (Gross Amount, 6.2 digits, packed)</li> <li><code>APDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li>Record Length: 256 bytes</li> <li>Access: Update with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#7-apcont-ap-control-file","title":"7. APCONT (A/P Control File)","text":"<ul> <li>Purpose: Stores company-level control data, including company name, bank G/L, and check numbering details.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve company name and pre-numbered check flag for the report.</li> <li>AP156: Chained to retrieve company name and bank G/L for NACHA file headers.</li> <li>Key Fields:</li> <li><code>ACDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>ACCONO</code> (Company Number, 7 digits)</li> <li><code>ACNAME</code> (Company Name, 30 bytes)</li> <li><code>ACBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>ACPRE#</code> (Pre-Numbered Checks, <code>'Y'</code> or blank)</li> <li>Record Length: 256 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#8-apvend-vendor-file","title":"8. APVEND (Vendor File)","text":"<ul> <li>Purpose: Contains vendor details, including name, address, and ACH payment information.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for the report.</li> <li>AP156: Chained to retrieve ACH-specific fields (routing code, account number, account type) for NACHA file.</li> <li>Key Fields:</li> <li><code>VNDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>VNCO</code> (Company Number, 7 digits)</li> <li><code>VNVEND</code> (Vendor Number, 5 digits)</li> <li><code>VNNAME</code> (Vendor Name, 30 bytes)</li> <li><code>VNSORT</code> (Alpha Sort Abbreviation, 10 bytes)</li> <li><code>VNARTE</code> (ACH Bank Routing Code, 9 digits)</li> <li><code>VNABK#</code> (ACH Bank Account Number, 17 bytes)</li> <li><code>VNACOS</code> (ACH Account Type, <code>'C'</code> for checking, else savings)</li> <li>Record Length: 579 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#9-apchkr-check-register-file","title":"9. APCHKR (Check Register File)","text":"<ul> <li>Purpose: Validates check status to ensure checks are not already open or incorrectly voided.</li> <li>File Usage:</li> <li>AP155: Chained to validate check numbers and statuses for the report.</li> <li>Key Fields:</li> <li><code>AMCODE</code> (Status Code, <code>'D'</code>, <code>'O'</code>, <code>'R'</code>, <code>'V'</code>)</li> <li><code>AMCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li>Record Length: 128 bytes</li> <li>Access: Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#10-apcshrq-cash-requirements-report-file","title":"10. APCSHRQ (Cash Requirements Report File)","text":"<ul> <li>Purpose: Printer file for outputting the cash requirements report with payment details, check totals, and company summaries.</li> <li>File Usage:</li> <li>AP155: Output file for writing report headers, invoice details, check totals, and error messages.</li> <li>Key Fields:</li> <li>Report fields include company name, vendor name, invoice number, gross amount, discount, payment amount, check number, and totals.</li> <li>Record Length: 142 bytes</li> <li>Access: Output (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#11-achfile-nacha-file","title":"11. ACHFILE (NACHA File)","text":"<ul> <li>Purpose: Stores NACHA-formatted records for ACH payments to PNC Bank.</li> <li>File Usage:</li> <li>AP156: Output file for writing file header, batch header, entry detail, batch control, and file control records.</li> <li>Key Fields:</li> <li>Record Type Codes (<code>'1'</code>, <code>'5'</code>, <code>'6'</code>, <code>'8'</code>, <code>'9'</code>, filler)</li> <li>File Header: ABA numbers, transmission date/time</li> <li>Batch Header: Company name, tax ID, effective date</li> <li>Entry Detail: Vendor routing code, account number, amount</li> <li>Batch Control: Entry count, hash, credit total</li> <li>File Control: Batch count, block count, entry count</li> <li>Record Length: 94 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#12-report-printer-file","title":"12. REPORT (Printer File)","text":"<ul> <li>Purpose: Logs or verifies NACHA file creation details.</li> <li>File Usage:</li> <li>AP156: Output file for logging (specific content not defined in code).</li> <li>Record Length: 132 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#13-ap155s-report-sequencing-file","title":"13. AP155S (Report Sequencing File)","text":"<ul> <li>Purpose: Control or sort file used for sequencing the cash requirements report.</li> <li>File Usage:</li> <li>AP155: Input file for report sequencing.</li> <li>Key Fields: Not detailed in code (likely control flags or sort keys).</li> <li>Record Length: 3 bytes</li> <li>Access: Input Random (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#data-flow-summary","title":"Data Flow Summary","text":"<p>The data flow through the AP150-AP156 call stack is a sequential process that transforms input transaction data into payment records, a report, and an ACH payment file. Below is a summary:</p> <ol> <li>Input Preparation (AP150.ocl36.txt):</li> <li>Input: User-provided parameters (company, bank G/L, check date, etc.) and <code>APPYTR</code> (payment transactions).</li> <li>Process: Sorts <code>APPYTR</code> by company, vendor, voucher, and sequence using <code>#GSORT</code>. Clears <code>APPAY</code>, <code>APPYDS</code>, and <code>APPYCK</code> files to prepare for new data.</li> <li> <p>Output: Sorted <code>APPYTR</code> file.</p> </li> <li> <p>Payment Record Creation (AP151.rpg36.txt):</p> </li> <li>Input: Sorted <code>APPYTR</code>, <code>APOPEN</code> (open vouchers).</li> <li>Process: Reads <code>APPYTR</code> to select vouchers from <code>APOPEN</code> based on criteria (company, bank G/L, payment method, due date). Calculates payment amounts (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>) and applies discounts. Writes payment records to <code>APPAY</code> and missed discount records to <code>APPYDS</code>.</li> <li> <p>Output: Populated <code>APPAY</code> and <code>APPYDS</code> files.</p> </li> <li> <p>Cash Requirements Report Generation (AP155.rpg36.txt):</p> </li> <li>Input: <code>APPAY</code>, <code>APPYTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APCHKR</code>, <code>APPYDS</code>, <code>AP155S</code>.</li> <li>Process: Reads <code>APPAY</code> to aggregate payment totals (gross, discount, payment amount) by check and company. Updates <code>APDETINV</code> with aggregated invoice details. Validates checks against <code>APCHKR</code> and writes check records to <code>APPYCK</code>. Outputs report to <code>APCSHRQ</code> with invoice details, check totals, and error messages.</li> <li> <p>Output: Updated <code>APPAY</code>, <code>APDETINV</code>, <code>APPYCK</code>, and <code>APCSHRQ</code> report. Sets LDA position 400 to <code>'A'</code> if ACH payments are detected.</p> </li> <li> <p>NACHA File Creation (AP156.ocl36.txt, AP156.rpg36.txt):</p> </li> <li>Input: <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, LDA (position 400 = <code>'A'</code>).</li> <li>Process: If ACH payments are present, clears <code>ACHFILE</code> and reads <code>APPYCK</code> to generate NACHA records (file header, batch header, entry detail, batch control, file control). Uses <code>APVEND</code> for ACH details and <code>APCONT</code> for company data. Outputs to <code>ACHFILE</code> and logs to <code>REPORT</code>.</li> <li>Output: Populated <code>ACHFILE</code> and <code>REPORT</code>.</li> </ol> <p>Overall Flow: - Input: <code>APPYTR</code> (transaction criteria), <code>APOPEN</code> (vouchers), <code>APCONT</code> (company data), <code>APVEND</code> (vendor data), <code>APCHKR</code> (check validation). - Transformation: Sort transactions (<code>AP150</code>), select and process payments (<code>AP151</code>), generate report and validate checks (<code>AP155</code>), create NACHA file for ACH (<code>AP156</code>). - Output: <code>APPAY</code> (payments), <code>APPYDS</code> (missed discounts), <code>APPYCK</code> (checks), <code>APDETINV</code> (invoices), <code>APCSHRQ</code> (report), <code>ACHFILE</code> (NACHA file), <code>REPORT</code> (log).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/","title":"AP150OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP150.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400, now IBM i) for managing Accounts Payable (A/P) payment transactions. OCL is a scripting language used to control job execution and manage files in such environments. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#process-steps-of-the-ap150-ocl-program","title":"Process Steps of the AP150 OCL Program","text":"<p>The OCL program <code>AP150</code> handles the entry, editing, and processing of A/P payment transactions, including creating payment records and generating a cash requirements report. It involves file operations, sorting, and invoking external programs. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Conditional Check for Automation:</li> <li>The program checks if it\u2019s running in \"AUTO\" mode (triggered by another process, <code>AP200</code>).<ul> <li><code>IF ?2?/AUTO GOTO AP151</code>: If <code>?2?</code> (a parameter) equals \"AUTO,\" the program jumps to the <code>AP151</code> tag, skipping initial file setup.</li> </ul> </li> <li> <p>If not in AUTO mode, it proceeds with file creation and setup.</p> </li> <li> <p>File Creation for Work Files:</p> </li> <li>If the file <code>?9?APPT?WS?</code> (a work file for payment transactions) doesn\u2019t exist, it creates it:<ul> <li><code>BLDFILE ?9?APPT?WS?,I,RECORDS,500,128,,,2,5,DFILE</code></li> <li>Creates a file with 500 records, 128 bytes each, with specific attributes.</li> </ul> </li> <li>Sets a local variable at offset 135 with data <code>'F'</code> for <code>?9?APPT?WS?</code>.</li> <li> <p>If the file <code>?9?APPO?WS?</code> exists, sets a local variable at offset 300 to <code>'Y'</code>.</p> </li> <li> <p>Load Initial Program (<code>AP150</code>):</p> </li> <li>Loads the program <code>AP150</code> (likely an RPG or CL program).</li> <li>Opens the following files:<ul> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>, shared, extendable by 100 records): Transaction work file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General ledger master file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>Runs the <code>AP150</code> program to process payment transactions.</p> </li> <li> <p>AP151 Tag - Conditional File Deletion and Creation:</p> </li> <li>Checks if the local variable at offset 300 is <code>'Y'</code>:<ul> <li>If not <code>'Y'</code>, jumps to the <code>END</code> tag, terminating the program.</li> <li>If <code>'Y'</code>, deletes work files: <code>APPO?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>, <code>APDS?WS?</code>.</li> </ul> </li> <li> <p>Creates new work files:</p> <ul> <li><code>?9?APPY?WS?</code>: 999,000 records, 384 bytes.</li> <li><code>?9?APPC?WS?</code>: 999,000 records, 96 bytes.</li> <li><code>?9?APDT?WS?</code>: 500 records, 256 bytes.</li> <li><code>?9?APDS?WS?</code>: 999,000 records, 384 bytes.</li> </ul> </li> <li> <p>Sort Payment Records:</p> </li> <li>Loads the <code>#GSORT</code> program (a system sort utility).</li> <li>Sorts the input file <code>?9?APPT?WS?</code> into output file <code>?9?AP151S</code> (999,000 records, retained job file).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 7-8), vendor/voucher (bytes 36-45), sequence number (bytes 2-6), and full record (bytes 1-128).</li> </ul> </li> <li> <p>Runs the sort to organize payment transaction records.</p> </li> <li> <p>Load AP151 Program:</p> </li> <li>Loads the <code>AP151</code> program (likely an RPG program for further transaction processing).</li> <li>Opens files:<ul> <li><code>APPYTR</code> (labeled <code>?9?AP151S</code>): Sorted transaction file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, extendable): Payment work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li> <p>Runs <code>AP151</code> to process sorted transactions and update payment records, including handling discounts for late payments (noted in the comment: \"ADD CODE TO SAVE INVOICE INFO WHEN A DISCOUNT IS AVAILABLE BUT PAID TOO LATE\").</p> </li> <li> <p>Generate Cash Requirements Report:</p> </li> <li>Loads <code>#GSORT</code> again to sort payment records for reporting.</li> <li>Sorts the input file <code>?9?APPY?WS?</code> into output file <code>?9?APPS?WS?</code> (999,000 records).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 2-3), bank G/L number (bytes 153-160), vendor (bytes 4-8), prepaid code (byte 97), check number (bytes 91-96), and single check code (byte 152).</li> </ul> </li> <li> <p>Runs the sort to prepare data for the cash requirements report.</p> </li> <li> <p>Set Wire Transfer Indicator:</p> </li> <li> <p>Checks parameter <code>?3?</code>:</p> <ul> <li>If <code>?3?</code> equals <code>'WT'</code>, sets a local variable at offset 198 to <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets it to a blank string.</li> </ul> </li> <li> <p>Load AP155 Program:</p> </li> <li>Loads the <code>AP155</code> program (likely for generating the cash requirements report or final payment processing).</li> <li>Opens files:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, shared): Payment work file.</li> <li><code>AP155S</code> (labeled <code>?9?APPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): Transaction work file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>, extendable): Check work file.</li> <li><code>APDETINV</code> (labeled <code>?9?APDT?WS?</code>, extendable): Invoice detail work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li>Overrides printer file <code>APCSHRQ</code> to output queue <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on parameter <code>?9?</code>.</li> <li> <p>Runs <code>AP155</code> to generate the cash requirements report or finalize payments.</p> </li> <li> <p>AP156 Program and Cleanup:</p> <ul> <li>Invokes <code>AP156</code> with parameter <code>?9?</code>.</li> <li>If in AUTO mode (<code>?2?/AUTO</code>), clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Proceeds to the <code>END</code> tag, terminating the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP150: Initial program for A/P payment transaction entry and editing. 2. #GSORT: System sort utility, called twice for sorting payment and report data. 3. AP151: Program for processing sorted payment transactions and handling discounts. 4. AP155: Program for generating the cash requirements report or finalizing payments. 5. AP156: Final program, likely for cleanup or additional processing.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with their labels and descriptions: 1. APPYTR (<code>?9?APPT?WS?</code>, <code>?9?AP151S</code>): Payment transaction work file (input and sorted output). 2. APCONT (<code>?9?APCONT</code>): A/P control file, shared. 3. GLMAST (<code>?9?GLMAST</code>): General ledger master file, shared. 4. APVEND (<code>?9?APVEND</code>): Vendor master file, shared. 5. APOPEN (<code>?9?APOPEN</code>): Open A/P file, shared. 6. GSTABL (<code>?9?GSTABL</code>): General system table, shared. 7. GSCONT (<code>?9?GSCONT</code>): General system control file, shared. 8. APPAY (<code>?9?APPY?WS?</code>): Payment work file, extendable. 9. AP155S (<code>?9?APPS?WS?</code>): Sorted payment file for reporting. 10. APCHKR (<code>?9?APCHKR</code>): Check register file, shared. 11. APPYCK (<code>?9?APPC?WS?</code>): Check work file, extendable. 12. APDETINV (<code>?9?APDT?WS?</code>): Invoice detail work file, extendable. 13. APPYDS (<code>?9?APDS?WS?</code>): Payment discount work file, extendable. 14. APPO?WS?: Temporary work file (checked for existence). 15. APCSHRQ: Printer file for the cash requirements report.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#summary","title":"Summary","text":"<p>The <code>AP150</code> OCL program orchestrates the A/P payment transaction process by: - Creating and managing work files for transactions, payments, and discounts. - Sorting data for processing and reporting. - Invoking RPG programs (<code>AP150</code>, <code>AP151</code>, <code>AP155</code>, <code>AP156</code>) for specific tasks. - Handling special cases like wire transfers and late payment discounts. - Generating a cash requirements report.</p> <p>It interacts with multiple files (both permanent and temporary) and uses the <code>#GSORT</code> utility for data organization. The program is designed to run either standalone or in AUTO mode as part of a larger process (<code>AP200</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/","title":"AP150RPG","text":"<p>The <code>AP150.rpg36.txt</code> file is an RPG III program (used on IBM midrange systems like the AS/400, now IBM i) that handles Accounts Payable (A/P) Payment Transaction Entry and Edit. It is the first program called by the <code>AP150.ocl36.txt</code> OCL script, as specified in the <code>LOAD AP150</code> statement. This program provides a user interface for entering and editing payment transactions, validating inputs, and managing payment selections for checks, ACH, wire transfers, employee expenses, or utility auto-pay. Below, I\u2019ll explain the process steps and business rules embedded in the program, based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#process-steps-of-the-ap150-rpg-program","title":"Process Steps of the AP150 RPG Program","text":"<p>The <code>AP150</code> program is a workstation-based application that uses a display file (<code>SCREEN</code>) to interact with users for entering and editing A/P payment transactions. It processes data through a series of screens (<code>AP150S1</code> to <code>AP150S5</code>) and performs validations, file updates, and navigation logic. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Initializes variables, sets system date and time, and determines the operating mode (add or update).</li> <li>Checks if 13 accounting periods are used (<code>GX13GL</code> in <code>GSCONT</code> file).</li> <li>If no records exist in <code>APPYTR</code> (payment transaction file), sets the program to add mode (<code>indicator 17</code>) and initializes <code>NXTSEQ</code> (next sequence number) to 1.</li> <li> <p>If records exist, sets the program to update mode (<code>indicator 16</code>), retrieves the company number (<code>PTCONO</code>), and increments <code>NXTSEQ</code> based on the last sequence number (<code>LSTSEQ</code>).</p> </li> <li> <p>Screen Processing:    The program uses five screen formats (<code>AP150S1</code> to <code>AP150S5</code>) to collect and validate data. Each screen corresponds to a specific step in the payment transaction entry process:</p> </li> <li>S1 (Screen 1): Collects company number (<code>CONO</code>).<ul> <li>Validates the company number against <code>APCONT</code> (A/P control file).</li> <li>If valid, retrieves company details (e.g., cash G/L account <code>ACCAGL</code>, next check number <code>ACCKNO</code>) and populates screen fields.</li> <li>If invalid, displays error message \"INVALID COMPANY #\".</li> </ul> </li> <li>S2 (Screen 2): Collects bank G/L number (<code>BKGL</code>), check date (<code>CKDT</code>), payment date (<code>DATE</code>), force discount flag (<code>FDISC</code>), accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>), and payment method (<code>KYHOLD</code>).<ul> <li>Validates inputs (e.g., bank G/L against <code>GLMAST</code>, check number not zero, valid dates, valid <code>KYHOLD</code> codes: <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), validates the CAPTCHA code (<code>APCODE</code>) to ensure authorized access.</li> <li>Performs date and period validations, especially for 13 accounting periods.</li> </ul> </li> <li>S3 (Screen 3): Collects sequence number (<code>SEQ#</code>) for a transaction.<ul> <li>Validates <code>SEQ#</code> against <code>APPYTR</code> and ensures it\u2019s not marked for deletion (<code>PTDEL='D'</code>).</li> <li>Retrieves transaction details if valid; otherwise, displays an error.</li> </ul> </li> <li>S4 (Screen 4): Collects vendor (<code>VEND</code>), voucher (<code>VO</code>), payment amount (<code>AMT</code>), discount amount (<code>DISC</code>), and other flags (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).<ul> <li>Performs extensive validations (e.g., vendor exists in <code>APVEND</code>, voucher exists in <code>APOPEN</code>, payment amount doesn\u2019t exceed gross amount, correct payment method).</li> <li>Updates or adds the transaction to <code>APPYTR</code>.</li> </ul> </li> <li> <p>S5 (Screen 5): Allows the user to start over by deleting all transactions.</p> <ul> <li>Requires confirmation with the code <code>\"START OVER\"</code>.</li> <li>Deletes all records in <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Key Navigation and Modes:</p> </li> <li>The program supports add mode (<code>indicator 17</code>) for new transactions and update mode (<code>indicator 16</code>) for editing existing ones.</li> <li>Function keys control navigation:<ul> <li>KA F2: Rekey without adding/updating.</li> <li>KA F4: Clear selections and start over.</li> <li>KD F3: Delete a transaction.</li> <li>KG F3: End the job.</li> <li>KJ F11: Switch to add mode.</li> <li>KK F12: Switch to update mode.</li> <li>KL: Allow payment from a different bank G/L number than originally assigned.</li> <li>Roll Keys (18/19): Navigate forward/backward through transactions.</li> </ul> </li> <li> <p>The program updates the <code>LSTSEQ</code> (last sequence number) and increments <code>NXTSEQ</code> for new transactions.</p> </li> <li> <p>Data Validation and Editing:</p> </li> <li>The <code>S2EDIT</code>, <code>S4EDIT</code>, and <code>DTEDIT</code> subroutines perform detailed validations:<ul> <li>S2EDIT: Validates bank G/L, check number, dates, force discount code, and accounting period/year.</li> <li>S4EDIT: Validates vendor, voucher, payment amount, discount amount, and payment codes (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>).</li> <li>DTEDIT: Validates date formats, including leap year checks and month/day ranges.</li> </ul> </li> <li> <p>Errors trigger appropriate indicators (e.g., <code>90</code> for general errors) and display messages from the <code>MSG</code> array.</p> </li> <li> <p>File Updates:</p> </li> <li>Transactions are written to or updated in the <code>APPYTR</code> file (payment transaction file) using the <code>PUTPT</code> subroutine.</li> <li>Deletions are marked with <code>PTDEL='D'</code> in <code>APPYTR</code>.</li> <li> <p>The program updates the CAPTCHA code in <code>GSCONT</code> if needed (<code>CODEUP</code> subroutine).</p> </li> <li> <p>Error Handling and User Feedback:</p> </li> <li>Error messages are displayed on the screen (<code>MSG30</code>, <code>MSGC1</code>, <code>MSGC2</code>) based on validation failures (e.g., \"INVALID VENDOR #\", \"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li> <p>The program uses indicators (e.g., <code>81</code> to <code>90</code>) to control screen display and error states.</p> </li> <li> <p>Cleanup and Termination:</p> </li> <li>The <code>CLEAR</code> subroutine resets input fields for new entries.</li> <li>The <code>STOVER</code> subroutine handles the \"start over\" request.</li> <li>The program terminates when the user presses <code>KG</code> (F3) or completes the transaction entry process.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#business-rules-in-the-ap150-rpg-program","title":"Business Rules in the AP150 RPG Program","text":"<p>The program enforces several business rules to ensure accurate and secure A/P transaction processing. These rules are derived from the validation logic and comments in the code:</p> <ol> <li>Company Validation:</li> <li> <p>The company number (<code>CONO</code>) must exist in the <code>APCONT</code> file. If not, an error (\"INVALID COMPANY #\") is displayed, and the user is prompted to correct it.</p> </li> <li> <p>Bank G/L and Check Number:</p> </li> <li>The bank G/L number (<code>BKGL</code>) must exist in the <code>GLMAST</code> file (\"INVALID BANK G/L #\").</li> <li>The next check number (<code>NXCK</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\").</li> <li> <p>If a different bank G/L is used (<code>KL</code> key), the program allows overriding the original bank G/L assigned to a voucher, with a warning (\"PRESS F12 TO PAY VOUCHER\").</p> </li> <li> <p>Date Validations:</p> </li> <li>The check date (<code>CKDT</code>) and payment date (<code>DATE</code>) must be valid dates, checked via the <code>DTEDIT</code> subroutine.<ul> <li>Invalid dates trigger \"INVALID CHECK DATE\" or \"INVALID DATE TO PAY BY\".</li> <li>Dates must align with the accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>) if 13 accounting periods are used (<code>GX13GL='Y'</code>).</li> <li>Dates are compared against period end dates in <code>GSTABL</code> to ensure they fall within valid ranges (\"DATE INVALID FOR PD/YR KEYED\").</li> </ul> </li> <li> <p>If the check date is not today\u2019s date, a warning is displayed (\"DATE NOT TODAY - F3 IF OK\").</p> </li> <li> <p>Payment Method Selection:</p> </li> <li>The <code>KYHOLD</code> field specifies the payment method: <code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), or <code>U</code> (utility auto-pay).</li> <li>The voucher\u2019s hold code (<code>OPHALT</code> in <code>APOPEN</code>) must match <code>KYHOLD</code>. Mismatches trigger the error \"CAN\u2019T PAY THIS VOUCHER NOW\".</li> <li> <p>For example, a voucher marked for ACH (<code>OPHALT='A'</code>) cannot be paid with a check (<code>KYHOLD=' '</code>).</p> </li> <li> <p>Voucher and Vendor Validation:</p> </li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> (\"INVALID VENDOR #\").</li> <li>The voucher number (<code>VO</code>) must exist in <code>APOPEN</code> and match the vendor/company (<code>OPCOVN</code>) (\"VOUCHER IS NOT OPEN\").</li> <li>For one-time vendors (<code>VEND=0</code>), a voucher number must be provided (\"A VOUCHER MUST BE KEYED\").</li> <li> <p>The voucher must not be on hold unless explicitly allowed.</p> </li> <li> <p>Payment and Discount Amounts:</p> </li> <li>The payment amount (<code>AMT</code>) must not exceed the remaining gross amount (<code>OPGRAM - OPPPTD</code>) in <code>APOPEN</code> (\"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li>The discount amount (<code>DISC</code>) must not exceed the gross amount (\"INVALID DISCOUNT AMOUNT\").</li> <li> <p>The force discount code (<code>FDIS</code>) must be <code>' '</code> or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\").</p> </li> <li> <p>Pay or Hold and Single Check Codes:</p> </li> <li>The pay/hold code (<code>PORH</code>) must be <code>'P'</code> (pay) or <code>'H'</code> (hold) (\"PAY/HOLD MUST BE 'P'/'H'\").</li> <li> <p>The single check code (<code>SNGL</code>) must be <code>' '</code> or <code>'S'</code> (\"SINGLE CHECK MUST BE 'S'\").</p> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>If the make prepaid code (<code>MKPP</code>) is specified, it must match the payment method:<ul> <li><code>'P'</code> for checks, <code>'A'</code> for ACH, <code>'W'</code> for wire transfers, <code>'E'</code> for employee expenses, or <code>'U'</code> for utility auto-pay.</li> <li>Errors trigger specific messages (e.g., \"MAKE PREPAID MUST BE 'A'\").</li> </ul> </li> <li>If <code>MKPP</code> is set, the prepaid check number (<code>PPCK</code>) and date (<code>PPDT</code>) must be provided and valid (\"PREPAID CHECK # IS MISSING\", \"INVALID PPD CHECK DATE\").</li> <li> <p>If <code>MKPP</code> is not set, <code>PPCK</code> and <code>PPDT</code> must be zero (\"PREPAID CHECK # MUST BE ZERO\", \"PPD CHECK DATE MUST BE ZERO\").</p> </li> <li> <p>Sequence Number Management:</p> </li> <li>The sequence number (<code>SEQ#</code>) must exist in <code>APPYTR</code> and not be marked for deletion (\"INVALID SEQUENCE #\", \"SEQ # WAS PREVIOUSLY DELETED\").</li> <li> <p>New transactions increment the sequence number (<code>NXTSEQ</code>).</p> </li> <li> <p>Start Over Functionality:</p> <ul> <li>Users can delete all transactions by entering <code>\"START OVER\"</code> in the <code>STOVER</code> field (\"REQUEST TO START OVER WAS IGNORED\" if incorrect).</li> <li>This clears <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Security and CAPTCHA:</p> <ul> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), a CAPTCHA code (<code>APCODE</code>) must be validated against <code>GSCONT</code> to proceed (\"OVERRIDE CODES DO NOT MATCH\").</li> <li>A new CAPTCHA code is generated and updated in <code>GSCONT</code> after validation (<code>CODEUP</code> subroutine).</li> </ul> </li> <li> <p>Accounting Period Handling:</p> <ul> <li>If 13 accounting periods are used (<code>GX13GL='Y'</code>), the period (<code>KYPD</code>) must be between 1 and 13, and the period/year must align with period end dates in <code>GSTABL</code> (\"INVALID PERIOD/YEAR\").</li> <li>The check date must fall within the specified period\u2019s date range.</li> </ul> </li> <li> <p>Transaction Deletion:</p> <ul> <li>Transactions can be marked for deletion (<code>PTDEL='D'</code>) using the <code>KD</code> key.</li> <li>Deleted transactions are not processed further but remain in <code>APPYTR</code> with the deletion flag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#summary","title":"Summary","text":"<p>The <code>AP150</code> RPG program is a critical component of the A/P payment transaction process, providing an interactive interface for entering and editing payment details. It progresses through five screens to collect and validate company, bank, date, vendor, voucher, and payment information. The program enforces strict business rules to ensure data integrity, including validations for company, vendor, voucher, payment amounts, and payment methods. It supports multiple payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles special cases like prepaid checks and 13 accounting periods. The program interacts with multiple files (<code>APPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>GSCONT</code>, <code>GSTABL</code>) and uses subroutines to modularize validation and processing logic.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/","title":"AP151 RPG","text":"<p>The <code>AP151.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, specifically invoked after sorting payment transactions in the <code>APPYTR</code> file. Its primary purpose is to create payment records in the <code>APPAY</code> file and handle discount tracking in the <code>APPYDS</code> file for Accounts Payable (A/P) transactions. Below, I\u2019ll detail the process steps, business rules, tables used, and called programs based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#process-steps-of-the-ap151-rpg-program","title":"Process Steps of the AP151 RPG Program","text":"<p>The <code>AP151</code> program processes sorted payment transaction records from <code>APPYTR</code> to generate payment records in <code>APPAY</code>, applying logic for payment selection, discount handling, and prepaid vouchers. It operates in two main modes based on the record type in <code>APPYTR</code>: paying by date (<code>EACH01</code>) or paying by vendor/voucher (<code>EACH02</code>). Here\u2019s a step-by-step breakdown:</p> <ol> <li>Read APPYTR Records:</li> <li>The program reads records from the <code>APPYTR</code> file, which contains payment transaction data sorted by company, vendor/voucher, and sequence number.</li> <li> <p>Records are processed in two formats:</p> <ul> <li>Format 01: Header records (pay by date, no specific vendor/voucher).</li> <li>Format 02: Detail records (pay by specific vendor/voucher).</li> </ul> </li> <li> <p>Process Header Records (<code>EACH01</code> Subroutine):</p> </li> <li>Converts check date (<code>PTCKDT</code>) and pay-by date (<code>PTDATE</code>) to 8-digit formats (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling for Y2K compliance.</li> <li> <p>For each header record:</p> <ul> <li>If the record is not marked for deletion (<code>PTDEL \u2260 'D'</code>), processes all applicable vouchers in <code>APOPEN</code>.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment method (<code>PTHOLD</code> must match <code>OPHALT</code>: <code>' '</code> for checks, <code>A</code> for ACH, <code>W</code> for wire transfer, <code>E</code> for employee expenses, <code>U</code> for utility auto-pay).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>), ensures the payment method matches and processes them directly.</li> <li>For non-prepaid vouchers, checks discount eligibility:</li> <li>If force discount (<code>PTFDIS = 'D'</code>), applies the discount (<code>OPDISC</code>).</li> <li>Otherwise, compares the discount due date (<code>OPDSD8</code>) and due date (<code>DTYMD8</code>) against the check date (<code>CKYMD8</code>) and pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is valid (on or after check date and before or on pay-by date), applies the discount.</li> <li>If the discount due date is missed, records the voucher in <code>APPYDS</code> for tracking missed discounts and sets the discount to zero.</li> <li>Calculates the payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> <li>For one-time vendors (<code>OPVEND = 0</code>), sets the single check flag (<code>OPSNGL = 'S'</code>).</li> <li>Writes or updates the <code>APPAY</code> record with payment details.</li> </ul> </li> <li> <p>Process Detail Records (<code>EACH02</code> Subroutine):</p> </li> <li> <p>For detail records (specific vendor/voucher):</p> <ul> <li>If marked for deletion (<code>PTDEL = 'D'</code>), skips processing.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching vendor number (<code>OPVEND = PTVEND</code>).</li> <li>Matching voucher number (<code>OPVONO = PTVO</code>) if paying a specific voucher.</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>) if paying the whole vendor.</li> <li>Payment method (<code>PTHOLD</code> matches <code>OPHALT</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Handles hold status (<code>PTPORH = 'H'</code> to skip, <code>'P'</code> to pay).</li> <li>For prepaid vouchers, ensures the payment method matches (<code>PTMKPP</code> and <code>OPPAID</code>).</li> <li>Applies discounts based on <code>PTDISC</code> if provided, or sets to zero if the header discount is zero or the due date is past.</li> <li>Calculates the payment amount, adjusting for partial payments (<code>PTAMT</code>) if specified.</li> <li>Writes or updates the <code>APPAY</code> record, marking it for deletion if held (<code>PYDEL = 'D'</code>).</li> </ul> </li> <li> <p>Discount Tracking:</p> </li> <li> <p>If a discount is missed (check date past discount due date and no force discount), writes a record to <code>APPYDS</code> to track the missed discount (<code>EXCPTMISDIS</code>).</p> </li> <li> <p>Output to APPAY and APPYDS:</p> </li> <li>Writes payment records to <code>APPAY</code> with fields like payment amount (<code>OPLPAM</code>), discount (<code>OPDISC</code>), check number (<code>OPCKNO</code>), check date (<code>OPCKDT</code>), and payment method (<code>OPPAID</code>).</li> <li> <p>Writes missed discount records to <code>APPYDS</code> with similar fields for tracking purposes.</p> </li> <li> <p>Loop and Termination:</p> </li> <li>Continues processing <code>APPYTR</code> records until all are read.</li> <li>Terminates when no more records are available in <code>APPYTR</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#business-rules-in-the-ap151-rpg-program","title":"Business Rules in the AP151 RPG Program","text":"<p>The program enforces several business rules to ensure accurate payment processing and discount handling:</p> <ol> <li>Payment Method Matching:</li> <li> <p>The payment method in <code>APPYTR</code> (<code>PTHOLD</code>) must match the voucher's hold code in <code>APOPEN</code> (<code>OPHALT</code>):</p> <ul> <li><code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), <code>U</code> (utility auto-pay).</li> <li>Mismatches skip the voucher.</li> </ul> </li> <li> <p>Prepaid Voucher Handling:</p> </li> <li>Prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>) are paid only if the payment method matches <code>PTHOLD</code>.</li> <li> <p>Prepaid check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>) are set to the transaction\u2019s check date (<code>PTCKDT</code>).</p> </li> <li> <p>Discount Eligibility:</p> </li> <li>If force discount is set (<code>PTFDIS = 'D'</code>), the discount (<code>OPDISC</code>) is applied regardless of the discount due date.</li> <li>Otherwise, discounts are applied only if:<ul> <li>The discount due date (<code>OPDSD8</code>) is on or after the check date (<code>CKYMD8</code>) and before or on the pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is missed, the discount is set to zero, and a record is written to <code>APPYDS</code>.</li> </ul> </li> <li> <p>If the voucher is partially paid (<code>OPPPTD &gt; 0</code>) or past due, the discount is set to zero unless forced.</p> </li> <li> <p>Due Date Validation:</p> </li> <li> <p>Vouchers are selected for payment only if their due date (<code>DTYMD8</code>) is on or before the pay-by date (<code>PTDAT8</code>), unless force discount is applied.</p> </li> <li> <p>Partial Payments:</p> </li> <li>For detail records with a partial payment amount (<code>PTAMT &gt; 0</code>), the payment amount (<code>OPLPAM</code>) is set to <code>PTAMT</code>, and the discount is adjusted accordingly.</li> <li> <p>If the partial payment amount equals the remaining amount (<code>OPLPAM</code>), the discount is set to zero.</p> </li> <li> <p>One-Time Vendors:</p> </li> <li> <p>For one-time vendors (<code>OPVEND = 0</code>), the single check flag (<code>OPSNGL</code>) is set to <code>'S'</code>.</p> </li> <li> <p>Hold Status:</p> </li> <li>Vouchers on hold (<code>OPHALT = 'H'</code>) are skipped unless explicitly marked to pay (<code>PTPORH = 'P'</code>).</li> <li> <p>Detail records with <code>PTPORH = 'H'</code> are marked for deletion in <code>APPAY</code> (<code>PYDEL = 'D'</code>).</p> </li> <li> <p>Company and Bank G/L Matching:</p> </li> <li> <p>The company number (<code>OPCONO</code>) and bank G/L number (<code>OPBKGL</code>) must match the transaction\u2019s values (<code>PTCONO</code>, <code>PTBKGL</code>).</p> </li> <li> <p>Missed Discount Tracking:</p> </li> <li>If a discount is available but cannot be taken (check date past discount due date), a record is written to <code>APPYDS</code> to track the missed discount.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPYTR (<code>IP</code>, Input Primary, 128 bytes):</li> <li>Payment transaction file containing sorted header and detail records.</li> <li> <p>Fields include <code>PTCONO</code> (company), <code>PTVEND</code> (vendor), <code>PTVO</code> (voucher), <code>PTAMT</code> (payment amount), <code>PTDISC</code> (discount), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method), etc.</p> </li> <li> <p>APOPEN (<code>ID</code>, Input with Disk, 384 bytes):</p> </li> <li>Open A/P file containing voucher details.</li> <li> <p>Fields include <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPDSDT</code> (discount due date), <code>OPDUED</code> (due date), <code>OPHALT</code> (hold code), <code>OPPAID</code> (prepaid code), etc.</p> </li> <li> <p>APPAY (<code>UC</code>, Update/Create, 384 bytes):</p> </li> <li>Output file for payment records.</li> <li> <p>Fields include <code>PYDEL</code> (delete flag), <code>OPLPAM</code> (payment amount), <code>OPDISC</code> (discount), <code>OPCKNO</code> (check number), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (single check), <code>PTSEQ#</code> (sequence number), etc.</p> </li> <li> <p>APPYDS (<code>O</code>, Output, 384 bytes):</p> </li> <li>Output file for tracking missed discounts.</li> <li>Fields mirror <code>APPAY</code>, including <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>PTSEQ#</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#called-programs","title":"Called Programs","text":"<p>The <code>AP151</code> program does not explicitly call any external programs. It is a standalone RPG program that processes input from <code>APPYTR</code> and <code>APOPEN</code>, writing output to <code>APPAY</code> and <code>APPYDS</code>. The OCL script (<code>AP150.ocl36.txt</code>) invokes <code>AP151</code> after sorting <code>APPYTR</code> with <code>#GSORT</code>, but no additional programs are called within <code>AP151</code> itself.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#summary","title":"Summary","text":"<p>The <code>AP151</code> RPG program processes sorted payment transactions from <code>APPYTR</code> to create payment records in <code>APPAY</code> and track missed discounts in <code>APPYDS</code>. It handles two types of transactions: pay-by-date (header) and pay-by-vendor/voucher (detail). The program enforces strict business rules for payment method matching, discount eligibility, due date validation, and prepaid voucher handling. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures accurate payment calculations while tracking missed discounts for reporting. The program interacts with four files (<code>APPYTR</code>, <code>APOPEN</code>, <code>APPAY</code>, <code>APPYDS</code>) and does not call external programs.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/","title":"AP155 RPG","text":"<p>The <code>AP155.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, designed to generate a Cash Requirements Report for Accounts Payable (A/P) transactions. It processes payment records from the <code>APPAY</code> file, updates invoice details in <code>APDETINV</code>, and produces a formatted report in <code>APCSHRQ</code>. Below, I detail the process steps, business rules, tables used, and external programs called based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#process-steps-of-the-ap155-rpg-program","title":"Process Steps of the AP155 RPG Program","text":"<p>The <code>AP155</code> program generates a cash requirements report by processing payment records from <code>APPAY</code>, aggregating totals, validating checks, and updating invoice details. It handles both prepaid and non-prepaid payments, supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay), and tracks missed discounts. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Initialization (<code>L6DET</code> Subroutine):</li> <li>Initializes variables: sets page number to zero, clears counters (<code>C6CNT</code>, <code>P6CNT</code>, <code>L6CNT</code>, etc.), and prepares the report header.</li> <li>Retrieves the system date and time, formatting the date as an 8-digit value (<code>DATE8</code>) for Y2K compliance.</li> <li>Chains to <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>) and check if pre-numbered checks are used (<code>ACPRE#</code>).</li> <li>Chains to <code>APPYTR</code> to get the next check number (<code>PTNXCK</code>), check date (<code>PTCKDT</code>), pay-by date (<code>PTDATE</code>), force discount flag (<code>PTFDIS</code>), and payment method (<code>PTHOLD</code>).</li> <li>Sets the payment method description (<code>PAYBY</code>) based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>A</code>: \"PAY BY ACH\"</li> <li><code>W</code>: \"PAY BY WIRE TFR\"</li> <li><code>E</code>: \"PAY BY PAYROLL\"</li> <li><code>U</code>: \"PAY BY UTIL AUPY\"</li> </ul> </li> <li> <p>Writes the report header to <code>APCSHRQ</code> with company name, payment method, check date, and other details.</p> </li> <li> <p>Process APPAY Records:</p> </li> <li>Reads records from <code>APPAY</code> (payment file) sorted by company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and sequence number (<code>OPSEQ#</code>).</li> <li> <p>For each record:</p> <ul> <li>Checks if the record is not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Identifies payment type:</li> <li>Prepaid payments: <code>OPPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expenses), <code>'U'</code> (utility auto-pay).</li> <li>Single check: <code>OPSNGL = 'S'</code>.</li> <li>Updates <code>APDETINV</code> to track invoice details:</li> <li>Constructs a key (<code>APKY27</code>) using company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and invoice number (<code>OPINVN</code>).</li> <li>Chains to <code>APDETINV</code> to check for existing records.</li> <li>If found, adds gross amount (<code>OPGRAM</code>) and discount (<code>OPDISC</code>) to existing totals (<code>APGRAM</code>, <code>APDISC</code>).</li> <li>If not found, creates a new record with invoice details.</li> </ul> </li> <li> <p>Aggregate Totals:</p> </li> <li>Accumulates totals for gross amount (<code>CKGRAM</code>), discount (<code>CKDISC</code>), and payment amount (<code>CKAMT</code>) for each check.</li> <li>Tracks invoice count (<code>COUNT</code>) per check, with a maximum of 36 invoices to avoid stub overflow.</li> <li> <p>Maintains company-level totals:</p> <ul> <li><code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>: Computer checks.</li> <li><code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>: Prepaid payments.</li> <li><code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>: Total checks.</li> </ul> </li> <li> <p>Check Validation (<code>CHECK</code> Subroutine):</p> </li> <li>Determines the check number (<code>THISCK</code>):<ul> <li>For prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For non-prepaid, uses the next check number (<code>NXCK</code>) and increments it.</li> </ul> </li> <li>If the payment amount is zero or negative (<code>CKAMT \u2264 0</code>), marks the check as \"CREDIT / NO PAY\" and processes it in the <code>NOPAY</code> subroutine.</li> <li>Checks for missed discounts by chaining to <code>APPYDS</code> with a key (<code>DSKY12</code>) based on company and vendor/voucher. If found, sets indicator <code>50</code> to note \"DISCOUNT NOT TAKEN\" on the report.</li> <li>Validates the check against <code>APCHKR</code>:<ul> <li>For non-void checks (<code>CKAMT &gt; 0</code>), ensures the check does not exist or is not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks (<code>CKAMT &lt; 0</code>), ensures the check exists, is open, and the entire amount is voided (<code>VOIDAM = AMCKAM</code>).</li> </ul> </li> <li> <p>Writes the check record to <code>APPYCK</code> with fields like check number, payment amount, and status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</p> </li> <li> <p>Handle Credit/No Pay and Full Stubs (<code>NOPAY</code> Subroutine):</p> </li> <li>For checks with zero or negative amounts (<code>CKAMT \u2264 0</code>) or full stubs (36 invoices), marks related <code>APPYCK</code> records as \"CREDIT / NO PAY\" (<code>AXRECD = 'C'</code>, <code>AXCHEK = 0</code>).</li> <li> <p>Adjusts counters (<code>C6CNT</code>, <code>L6CNT</code>) if a full stub was previously written with the same check number.</p> </li> <li> <p>Report Output:</p> </li> <li>Writes detail lines to <code>APCSHRQ</code> for each invoice, including sequence number (<code>OPSEQ#</code>), invoice number (<code>OPINVN</code>), description (<code>OPINDS</code>), gross amount (<code>OPGRAM</code>), discount (<code>OPDISC</code>), paid-to-date (<code>OPPPTD</code>), payment amount (<code>OPLPAM</code>), due date (<code>OPDUED</code>), vendor (<code>OPVEND</code>), and voucher (<code>OPVONO</code>).</li> <li>Writes check totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) with annotations for prepaid payments, full stubs, or void checks.</li> <li>Writes company totals (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, etc.) at the end of each company group.</li> <li> <p>Includes error messages for invalid checks (e.g., \"CHECK IS ALREADY OPEN\", \"WHOLE CHECK AMOUNT MUST BE VOIDED\").</p> </li> <li> <p>End of Processing:</p> </li> <li>At the end of each company (<code>L6</code>), writes company totals and resets counters.</li> <li>Continues processing until all <code>APPAY</code> records are read, then terminates.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#business-rules-in-the-ap155-rpg-program","title":"Business Rules in the AP155 RPG Program","text":"<p>The program enforces the following business rules:</p> <ol> <li>Payment Method Handling:</li> <li>Supports payment methods: checks (<code>' '</code>), ACH (<code>A</code>), wire transfers (<code>W</code>), employee expenses (<code>E</code>), and utility auto-pay (<code>U</code>).</li> <li>Prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) use the provided check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>).</li> <li> <p>Non-prepaid payments increment the next check number (<code>NXCK</code>) from <code>APPYTR</code>.</p> </li> <li> <p>Single Check Processing:</p> </li> <li> <p>Vouchers marked as single check (<code>OPSNGL = 'S'</code>) are processed individually, ensuring separate checks for one-time vendors or specific vouchers.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li> <p>For multiple invoices with the same invoice number for a vendor, aggregates gross (<code>APGRAM</code>) and discount (<code>APDISC</code>) amounts in <code>APDETINV</code> to avoid duplicate entries (per modifications <code>JB03</code> and <code>MG04</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not already exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open, and have the entire amount voided.</li> <li> <p>Zero or negative payment amounts (<code>CKAMT \u2264 0</code>) are marked as \"CREDIT / NO PAY\" and not paid.</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>A maximum of 36 invoices per check is enforced to prevent stub overflow. If exceeded, the check is marked as a full stub (<code>'F'</code> or <code>'V'</code>), and processing continues with a new check number.</p> </li> <li> <p>Missed Discount Reporting:</p> </li> <li> <p>If a record exists in <code>APPYDS</code> for a voucher, indicates a missed discount on the report (\"DISCOUNT NOT TAKEN\").</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to validate company number and retrieve company name.</li> <li> <p>Chains to <code>APVEND</code> or <code>APOPEN</code> to retrieve vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>) for reporting.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company name, payment method, bank G/L, next check number, and dates.</li> <li>Detail lines include invoice details, and totals are provided for computer checks, prepaid payments, and overall checks per company.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPAY (<code>UP</code>, Update Primary, 384 bytes):</li> <li>Payment file containing records to be reported.</li> <li> <p>Fields: <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINVN</code> (invoice number), <code>OPLPAM</code> (payment amount), <code>OPPAID</code> (prepaid code), <code>OPSNGL</code> (single check), <code>OPCKNO</code> (check number), <code>OPCKDT</code> (check date).</p> </li> <li> <p>AP155S (<code>IR</code>, Input Random, 3 bytes):</p> </li> <li> <p>Input file for report sequencing (likely a control or sort file).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APPYTR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Payment transaction file for header information.</li> <li> <p>Fields: <code>PTBKGL</code> (bank G/L), <code>PTNXCK</code> (next check number), <code>PTCKDT</code> (check date), <code>PTDATE</code> (pay-by date), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for vendor details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APOPEN (<code>IC</code>, Input with Chain, 384 bytes):</p> </li> <li>Open A/P file for voucher details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APCHKR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Check register file for validating check status.</li> <li> <p>Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APPYCK (<code>UC</code>, Update/Create, 96 bytes):</p> </li> <li>Check file for recording check details.</li> <li> <p>Fields: <code>AXRECD</code> (record code: ' ', F, V, C, P, A, W, E, U), <code>AXCHEK</code> (check number), <code>CKAMT</code> (payment amount), <code>PTCKDT</code> (check date).</p> </li> <li> <p>APDETINV (<code>UF</code>, Update with File, 256 bytes):</p> </li> <li>Invoice detail file for tracking invoice totals.</li> <li> <p>Fields: <code>APDEL</code> (delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>APINVN</code> (invoice number), <code>APGRAM</code> (gross amount), <code>APDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINDS</code> (description), <code>OPDUED</code> (due date), <code>OPVONO</code> (voucher).</p> </li> <li> <p>APPYDS (<code>IF</code>, Input with File, 384 bytes):</p> <ul> <li>Missed discount file for identifying discounts not taken.</li> <li>Fields: <code>DSDEL</code> (delete flag), <code>DSCONO</code> (company), <code>DSVEND</code> (vendor), <code>DSVONO</code> (voucher), <code>DSDISC</code> (discount), <code>DSDSDT</code> (discount due date).</li> </ul> </li> <li> <p>APCSHRQ (<code>O</code>, Output, 142 bytes):</p> <ul> <li>Printer file for the cash requirements report.</li> <li>Outputs headers, detail lines, check totals, and company totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP155</code> program does not explicitly call any external programs. It is a standalone RPG program invoked by the <code>AP150.ocl36.txt</code> OCL script after <code>AP151</code> and sorting operations. All processing is handled internally through subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#summary","title":"Summary","text":"<p>The <code>AP155</code> RPG program generates a Cash Requirements Report by processing <code>APPAY</code> records, updating <code>APDETINV</code> for invoice tracking, and validating checks against <code>APCHKR</code>. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and enforces rules for check validation, stub limits (36 invoices), and missed discount reporting. The program interacts with 11 files (<code>APPAY</code>, <code>AP155S</code>, <code>APCONT</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APCHKR</code>, <code>APPYCK</code>, <code>APDETINV</code>, <code>APPYDS</code>, <code>APCSHRQ</code>) and produces a detailed report in <code>APCSHRQ</code> with invoice details, check totals, and company summaries. No external programs are called, as all logic is self-contained.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/","title":"AP156 RPG","text":"<p>Below, I provide a detailed analysis of the AP156.ocl36.txt OCL script and the AP156.rpg36.txt RPG program, which are part of the Accounts Payable (A/P) payment processing system. The OCL script invokes the <code>AP156</code> RPG program to create a National Automated Clearing House Association (NACHA) file for ACH payments to PNC Bank. I will outline the process steps, business rules, tables used, and external programs called for both the OCL and RPG components.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156ocl36txt-ocl-script","title":"AP156.ocl36.txt (OCL Script)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP156.ocl36.txt</code> OCL script is responsible for initiating the creation of a NACHA file for ACH payments. The steps are as follows:</p> <ol> <li>Conditional Execution Check:</li> <li>Checks if the payment run is for ACH payments by examining position 400 of the Local Data Area (LDA). The value must be <code>'A'</code>, set by the <code>AP155</code> program if ACH payments (<code>OPPAID = 'A'</code>) are detected in <code>APPAY</code>.</li> <li> <p>If the LDA position 400 does not contain <code>'A'</code>, the script jumps to the <code>END</code> tag, skipping execution of the <code>AP156</code> program.</p> </li> <li> <p>Clear ACH File:</p> </li> <li> <p>Executes the <code>CLRPFM</code> command to clear the physical file <code>ACHFIL</code> (labeled <code>?9?ACHFIL</code>), ensuring no residual data from previous runs.</p> </li> <li> <p>Load and Run AP156 Program:</p> </li> <li>Loads the <code>AP156</code> RPG program using the <code>LOAD AP156</code> command.</li> <li>Specifies input and output files:<ul> <li><code>APPYCK</code>: Check file, labeled <code>?9?APPC?WS?</code>, shared access (<code>DISP-SHR</code>).</li> <li><code>APCONT</code>: A/P control file, labeled <code>?9?APCONT</code>, shared access.</li> <li><code>APVEND</code>: Vendor file, labeled <code>?9?APVEND</code>, shared access.</li> <li><code>ACHFILE</code>: Output NACHA file, labeled <code>?9?ACHFIL</code>, shared access.</li> </ul> </li> <li> <p>Executes the program using the <code>RUN</code> command.</p> </li> <li> <p>Termination:</p> </li> <li>If the ACH condition is not met, the script terminates at the <code>END</code> tag without running <code>AP156</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>ACH Payment Requirement:</li> <li>The script only proceeds if the payment run includes ACH payments (<code>LDA position 400 = 'A'</code>).</li> <li> <p>If no ACH payments are present, the script skips execution to avoid unnecessary processing.</p> </li> <li> <p>File Preparation:</p> </li> <li> <p>The <code>ACHFIL</code> file must be cleared before processing to ensure a clean slate for the NACHA file output.</p> </li> <li> <p>Shared File Access:</p> </li> <li>All files (<code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, <code>ACHFILE</code>) are opened with shared access (<code>DISP-SHR</code>) to allow concurrent access by other programs or processes.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>?9?APPC?WS?</code>):</li> <li>Check file containing payment records.</li> <li>APCONT (<code>?9?APCONT</code>):</li> <li>A/P control file with company details.</li> <li>APVEND (<code>?9?APVEND</code>):</li> <li>Vendor file with vendor details, including ACH information.</li> <li>ACHFILE (<code>?9?ACHFIL</code>):</li> <li>Output file for the NACHA-formatted ACH payment data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP156: The RPG program loaded and executed to create the NACHA file.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156rpg36txt-rpg-program","title":"AP156.rpg36.txt (RPG Program)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps_1","title":"Process Steps","text":"<p>The <code>AP156</code> RPG program generates a NACHA-formatted file (<code>ACHFILE</code>) for ACH payments to PNC Bank, processing records from <code>APPYCK</code> and retrieving additional data from <code>APCONT</code> and <code>APVEND</code>. The program produces a structured file with specific record types (1, 5, 6, 8, 9) as required by NACHA standards. Here are the steps:</p> <ol> <li>Initialization (<code>ONETIM</code> Subroutine):</li> <li> <p>Executes once (<code>ONCE = 1</code>) to set up the environment:</p> <ul> <li>Retrieves system date and time (<code>SYTMDT</code>) and formats the date for NACHA records.</li> <li>Initializes counters: <code>BATCH#</code> (batch number), <code>TRACE#</code> (trace number), <code>LRCNT</code> (entry count), <code>LRHASH</code> (hash total), <code>LRDR</code> (debit total), <code>LRCR</code> (credit total), <code>RECCNT</code> (record count).</li> <li>Writes the File Header Record (Type 1) to <code>ACHFILE</code> with fields like priority code, ABA numbers, transmission date/time, and company names.</li> </ul> </li> <li> <p>Process APPYCK Records:</p> </li> <li>Reads <code>APPYCK</code> records (check file) sorted by company (<code>PYCONO</code>) and vendor (<code>PYVEND</code>).</li> <li> <p>For each record:</p> <ul> <li>Validates that the record is not a detail record (<code>NS 01</code>) and has a valid status (<code>PYSTAT = 'A'</code> for ACH payments).</li> <li>Chains to <code>APCONT</code> to retrieve company details (e.g., <code>ACNAME</code>, <code>ACBKGL</code>) using <code>PYCONO</code>.</li> <li>Chains to <code>APVEND</code> to retrieve vendor ACH details (e.g., <code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>, <code>PYNAME</code>) using <code>PYVEND</code>.</li> </ul> </li> <li> <p>Write Batch Header (<code>L2DET</code> Subroutine):</p> </li> <li>On the first record for a new company (<code>L1, N84</code>), writes a Batch Header Record (Type 5) to <code>ACHFILE</code>.</li> <li>Includes fields like service class code (<code>200</code> for credits), company name, tax ID, and effective entry date (<code>CKYMD</code> from <code>PYCKDT</code>).</li> <li> <p>Initializes batch counters (<code>L2CNT</code>, <code>L2HASH</code>, <code>L2DR</code>, <code>L2CR</code>).</p> </li> <li> <p>Write Entry Detail (<code>EACH</code> Subroutine):</p> </li> <li> <p>For each <code>APPYCK</code> record:</p> <ul> <li>Determines the transaction code (<code>TRNCDE</code>): <code>'22'</code> for checking accounts (<code>VNACOS = 'C'</code>) or <code>'32'</code> for savings accounts.</li> <li>Sets the payment amount (<code>AMOUNT = PYCKAM</code>).</li> <li>Updates counters: increments <code>TRACE#</code>, <code>L2CNT</code>, <code>LRCNT</code>, <code>RECCNT</code>, and adds <code>VNARTE</code> to <code>L2HASH</code> and <code>LRHASH</code>, and <code>AMOUNT</code> to <code>L2CR</code> and <code>LRCR</code>.</li> <li>Writes an Entry Detail Record (Type 6) to <code>ACHFILE</code> with vendor bank routing code (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount, vendor ID, and name.</li> </ul> </li> <li> <p>Write Batch Control (<code>L2TOT</code> Subroutine):</p> </li> <li>At the end of each company (<code>L2, 84</code>), writes a Batch Control Record (Type 8) to <code>ACHFILE</code>.</li> <li> <p>Includes batch entry count (<code>L2CNT</code>), hash total (<code>L2HASH</code>), credit total (<code>L2CR</code>), and batch number (<code>BATCH#</code>).</p> </li> <li> <p>Write File Control and Filler (<code>LRTOT</code> Subroutine):</p> </li> <li>At the end of processing (<code>LR, 10</code>), writes a File Control Record (Type 9) to <code>ACHFILE</code> with batch count (<code>LRBCNT</code>), block count (<code>LRBLOK</code>), entry count (<code>LRCNT</code>), hash total (<code>LRHASH</code>), and credit total (<code>LRCR</code>).</li> <li> <p>Calculates the number of blocks (<code>LRBLOK = RECCNT / 10</code>, rounded up) and fills remaining block space with filler records containing <code>'999999999999999999999999'</code>.</p> </li> <li> <p>Report Output:</p> </li> <li> <p>Outputs a report to <code>REPORT</code> (printer file) for logging or verification, though specific details are not defined in the code.</p> </li> <li> <p>Termination:</p> </li> <li>Completes after processing all <code>APPYCK</code> records and writing the necessary NACHA records.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>ACH Payment Validation:</li> <li> <p>Only processes <code>APPYCK</code> records with <code>PYSTAT = 'A'</code> (ACH payments), as confirmed by the OCL script\u2019s LDA check.</p> </li> <li> <p>NACHA Record Structure:</p> </li> <li>Adheres to NACHA file format standards:<ul> <li>Type 1 (File Header): Includes fixed ABA numbers (<code>043000096</code>, <code>1222318612</code>), transmission date/time, and company names.</li> <li>Type 5 (Batch Header): Uses service class code <code>200</code> (credits only), company tax ID (<code>1222318612</code>), and effective entry date.</li> <li>Type 6 (Entry Detail): Uses transaction codes (<code>22</code> for checking, <code>32</code> for savings), vendor bank details, and payment amount.</li> <li>Type 8 (Batch Control): Summarizes batch entries and totals.</li> <li>Type 9 (File Control): Summarizes file-level counts and totals.</li> </ul> </li> <li> <p>Filler records pad blocks to multiples of 10.</p> </li> <li> <p>Vendor ACH Details:</p> </li> <li>Requires valid ACH data in <code>APVEND</code> (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>Transaction code is set based on account type (<code>VNACOS = 'C'</code> for checking, otherwise savings).</p> </li> <li> <p>Counter and Hash Management:</p> </li> <li>Maintains accurate counts for batches (<code>L2CNT</code>), entries (<code>LRCNT</code>), blocks (<code>LRBLOK</code>), and hash totals (<code>L2HASH</code>, <code>LRHASH</code>) for NACHA compliance.</li> <li> <p>Credit totals (<code>L2CR</code>, <code>LRCR</code>) reflect payment amounts.</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to ensure valid company number (<code>PYCONO</code>).</li> <li>Chains to <code>APVEND</code> to ensure valid vendor number (<code>PYVEND</code>) and retrieve ACH-specific fields.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used_1","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>IP</code>, Input Primary, 96 bytes):</li> <li>Check file containing ACH payment records.</li> <li> <p>Fields: <code>PYSTAT</code> (status), <code>PYCONO</code> (company), <code>PYBKGL</code> (bank G/L), <code>PYCHK#</code> (check number), <code>PYVEND</code> (vendor), <code>PYCKAM</code> (check amount), <code>PYCKDT</code> (check date), <code>PYNAME</code> (vendor name), <code>PYSEQ#</code> (sequence), <code>PYCNTR</code> (count).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACCONO</code> (company number), <code>ACBKGL</code> (bank G/L), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for ACH payment details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNARTE</code> (ACH bank routing code), <code>VNABK#</code> (ACH bank account number), <code>VNACOS</code> (checking/savings), <code>VNVEND</code> (vendor number).</p> </li> <li> <p>ACHFILE (<code>O</code>, Output, 94 bytes):</p> </li> <li>Output file for NACHA-formatted ACH payment data.</li> <li> <p>Record types: 1 (file header), 5 (batch header), 6 (entry detail), 8 (batch control), 9 (file control), filler.</p> </li> <li> <p>REPORT (<code>O</code>, Output, 132 bytes):</p> </li> <li>Printer file for logging or reporting (details not specified in code).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called_1","title":"External Programs Called","text":"<ul> <li>The <code>AP156</code> RPG program does not call any external programs. It is a standalone program invoked by the <code>AP156.ocl36.txt</code> script, processing input files and producing output files internally.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#summary","title":"Summary","text":"<p>The <code>AP156.ocl36.txt</code> OCL script conditionally invokes the <code>AP156</code> RPG program to create a NACHA file for ACH payments if <code>LDA position 400 = 'A'</code>. It clears the <code>ACHFIL</code> file and loads <code>AP156</code> with access to <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, and <code>ACHFILE</code>. The <code>AP156</code> RPG program processes <code>APPYCK</code> records to generate a NACHA-compliant file with file header, batch header, entry detail, batch control, and file control records, adhering to strict formatting rules. It uses vendor ACH details from <code>APVEND</code> and company data from <code>APCONT</code>, maintaining counters and hash totals for compliance. The program interacts with five files and does not call external programs, completing the ACH payment file creation process for PNC Bank.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/","title":"AP160 Print Checks Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#list-of-use-cases-implemented-by-the-ap160-program","title":"List of Use Cases Implemented by the AP160 Program","text":"<p>Based on the provided OCL (<code>AP160.ocl36.txt</code>) and RPG (<code>AP160.rpg36.txt</code>) programs, the primary use case implemented is:</p> <ol> <li>Print Accounts Payable Checks for Vendor Payments:</li> <li>This use case involves processing selected vendor payments, generating physical checks (and copies) with detailed invoice information, and handling special cases like void checks or non-printed payments (e.g., ACH, wire transfers). The program retrieves data from various files, validates payment types, calculates totals, formats check output, and sends it to designated printers.</li> </ol> <p>No additional distinct use cases are explicitly implemented in the provided code, as the program's focus is solely on check printing for Accounts Payable.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-document","title":"Functional Requirements Document","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-accounts-payable-check-printing","title":"Functional Requirements: Accounts Payable Check Printing","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#overview","title":"Overview","text":"<p>The Accounts Payable (A/P) Check Printing function automates the generation and printing of checks for vendor payments, ensuring accurate payment processing, proper formatting, and compliance with business rules. It processes input data from payment, vendor, and control files to produce checks and copies, handling various payment types and exceptions.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Payment Data: Invoice details (vendor number, invoice number, gross amount, discount, payment amount, invoice date, sequence number).</li> <li>Vendor Data: Vendor name, address (up to four lines), and sort code.</li> <li>Control Data: Company name and code.</li> <li>Transaction Data: Check date.</li> <li>Check Data: Check number and payment type (e.g., normal, prepaid, ACH, wire transfer, void).</li> <li>Environment Parameter: Indicator for production (<code>G</code>) or test (<code>Z</code>) environment to determine output queues.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Input Data: Collect payment, vendor, control, transaction, and check data from respective input sources.</li> <li>Validate Payment Type: Identify payment type to determine if a physical check is required:</li> <li>Skip printing for prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>) payments.</li> <li>Process normal payments or void checks (<code>F</code>, <code>V</code>) for printing.</li> <li>Calculate Check Totals: Aggregate gross amount, discount, and net payment amount for each vendor\u2019s invoices.</li> <li>Assign Check Number: Use a valid check number, incrementing for voided checks (<code>V</code>) to avoid duplicates.</li> <li>Format Check Output:</li> <li>Include company name (except for company code <code>01</code>), vendor name, address, check date, and check number.</li> <li>List invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Convert net payment amount to words (e.g., \"ONE HUNDRED DOLLARS AND 50/100\") for the check\u2019s written line.</li> <li>Mark void checks with \" VOID * VOID * VOID \".</li> <li>Print Checks and Copies:</li> <li>Send primary check to the production (<code>APCHECKS</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Send check copy to the production (<code>APCHKCPY</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Create Temporary File (if needed): Generate a temporary file for check processing data if specified.</li> <li>Reset Accumulators: Clear totals after each check to prepare for the next vendor.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Selective Printing: Print checks only for normal payments or void checks (<code>F</code>, <code>V</code>); skip prepaid, ACH, wire transfer, employee expense, or credit/no pay payments.</li> <li>Void Check Handling:</li> <li>Print \"VOID\" on checks marked <code>F</code> (reuse check number) or <code>V</code> (use next check number).</li> <li>Company Name Exclusion: Omit company name on checks for company code <code>01</code>.</li> <li>Amount Formatting: Convert amounts to words, removing excess spaces to fit 10 CPI check layout; handle amounts over $999,999.99 correctly.</li> <li>Vendor Data Fallback: Use vendor details from open payables if missing from vendor master; blank fields if unavailable.</li> <li>Check Number Integrity: Skip voided check numbers to ensure valid, sequential issuance.</li> <li>Output Separation: Print checks and copies to separate queues for record-keeping.</li> <li>Invoice Aggregation: Combine multiple invoices for a vendor into one check with summarized totals.</li> <li>Date Consistency: Use transaction file\u2019s check date for all checks in a batch.</li> <li>Printer Configuration: Apply 6 lines per inch, 12 characters per inch, and standard quality for check printing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Primary Check: Formatted check with vendor details, invoice data, totals, and written amount, sent to the designated output queue.</li> <li>Check Copy: Duplicate of the check for record-keeping, sent to a separate output queue.</li> <li>Temporary File (optional): Temporary data file for processing, if required.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#constraints","title":"Constraints","text":"<ul> <li>Must handle large payment amounts without formatting errors.</li> <li>Must align with standard check printing formats (10 CPI).</li> <li>Must support production and test environments via output queue configuration.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/","title":"AP160OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AP160.ocl36.txt</code>, used on IBM midrange systems like the AS/400 (now IBM i) to manage Accounts Payable (A/P) check printing. Below, I\u2019ll explain the process steps of the program, list any external programs called, and identify tables or files created, destroyed, or read from.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#process-steps-of-the-ap160-ocl-program","title":"Process Steps of the AP160 OCL Program","text":"<p>The OCL program automates the printing of A/P checks, interacting with various files and printer configurations. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and Conditional Execution Check:</li> <li>The program checks if the parameter <code>?2?</code> is set to <code>AUTO</code>. If true, it jumps to the <code>AP160</code> tag, indicating it was called automatically by another procedure (likely <code>AP200</code>).</li> <li> <p>If not running in <code>AUTO</code> mode, the program proceeds with manual execution.</p> </li> <li> <p>User Interaction (Pause for Confirmation):</p> </li> <li>A commented-out <code>PAUSE</code> statement (not currently active) would prompt the user to either cancel the process (by pressing ATTN, 2, ENTER) or continue (by pressing 0, ENTER).</li> <li> <p>The <code>ATTR INQUIRY-YES,CANCEL-NO</code> suggests an inquiry screen for user confirmation, but it\u2019s not explicitly active in the provided code.</p> </li> <li> <p>Program Load and File Definitions (TAG AP160):</p> </li> <li>The program reaches the <code>AP160</code> tag and loads the <code>AP160</code> program (likely an RPG or CL program responsible for the core logic).</li> <li>It defines several files with specific labels and attributes:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>): Likely the payment file.</li> <li><code>AP160S</code> (labeled <code>?9?APPS?WS?</code>): Possibly a selection or summary file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, <code>DISP-SHR</code>): A control file, shared access.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): A transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, shared access.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, shared access.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>): Check file.</li> </ul> </li> <li> <p>The <code>?9?</code> and <code>?WS?</code> are placeholders for environment-specific prefixes or suffixes (e.g., library or workspace identifiers).</p> </li> <li> <p>Printer File Overrides:</p> </li> <li>The program configures printer output for two files: <code>APCHECK</code> (main check output) and <code>CHECKCPY</code> (check copy output).</li> <li>Conditional overrides are applied based on the value of <code>?9?</code>:<ul> <li>If <code>?9?</code> is <code>G</code> (likely production environment):</li> <li><code>APCHECK</code> is directed to the <code>QUSRSYS/APCHECKS</code> output queue.</li> <li><code>CHECKCPY</code> is directed to the <code>QUSRSYS/APCHKCPY</code> output queue.</li> <li>Both use device type <code>*SCS</code>, 6 lines per inch (LPI), 12 characters per inch (CPI), standard print quality, form type <code>APCK</code>, and are saved after printing.</li> <li>If <code>?9?</code> is <code>Z</code> (likely test environment):</li> <li>Both <code>APCHECK</code> and <code>CHECKCPY</code> are directed to the <code>QUSRSYS/TESTOUTQ</code> output queue with the same settings.</li> </ul> </li> <li> <p>These overrides ensure checks are printed to the correct printer based on the environment.</p> </li> <li> <p>Program Execution:</p> </li> <li>The <code>RUN</code> command executes the <code>AP160</code> program, which processes the defined files and generates check output.</li> <li> <p>The RPG program (AP160) likely reads from the vendor, open payables, and payment files, performs calculations (e.g., payment amounts), and writes check data to the <code>APPYCK</code> file and printer files.</p> </li> <li> <p>Temporary File Creation (Conditional):</p> </li> <li>If a file named <code>?9?APPO?WS?</code> exists in the <code>DATAF1</code> parameter, the program builds a temporary file with the same name using the <code>BLDFILE</code> command.</li> <li>The file is created with:<ul> <li><code>S</code> (sequential organization).</li> <li><code>RECORDS</code> (populated with records).</li> <li>Parameters <code>1,10</code> (possibly record length or block size).</li> </ul> </li> <li> <p>This temporary file is likely used to store intermediate check printing data, as indicated by the comment <code>--TEMPORARY FILE TO ALLOW CHECK P</code>.</p> </li> <li> <p>Completion:</p> </li> <li>After the <code>AP160</code> program completes, the OCL script ends. Any printed checks are sent to the configured output queues, and temporary files (if created) may persist until explicitly cleared.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#list-of-external-programs-called","title":"List of External Programs Called","text":"<ul> <li>AP160: The main program loaded and executed by the OCL script. It\u2019s likely an RPG or CL program that handles the core logic for printing A/P checks.</li> <li>AP200 (implied): The comment suggests <code>AP200</code> may call <code>AP160</code> in <code>AUTO</code> mode, but it\u2019s not directly called within this script.</li> </ul> <p>No other external programs are explicitly called in the provided OCL code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#tables-or-files-created-destroyed-or-read-from","title":"Tables or Files Created, Destroyed, or Read From","text":"<p>The OCL program interacts with several files, either by reading, writing, or creating them. Below is a categorized list based on the code and typical A/P check printing processes:</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from","title":"Files Read From:","text":"<ul> <li>APCONT (<code>?9?APCONT</code>, <code>DISP-SHR</code>): Control file, likely containing configuration or control data for A/P processing (e.g., bank account details).</li> <li>APVEND (<code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, containing vendor details (e.g., name, address, payment terms).</li> <li>APOPEN (<code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, listing outstanding invoices to be paid.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from-or-written-to","title":"Files Read From or Written To:","text":"<ul> <li>APPAY (<code>?9?APPY?WS?</code>): Payment file, likely containing selected payments to be processed into checks.</li> <li>AP160S (<code>?9?APPS?WS?</code>): Selection or summary file, possibly used to store temporary data during processing.</li> <li>APPYTR (<code>?9?APPT?WS?</code>): Transaction file, likely used to log payment transactions.</li> <li>APPYCK (<code>?9?APPC?WS?</code>): Check file, where check details (e.g., check number, amounts) are written.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-created","title":"Files Created:","text":"<ul> <li><code>?9?APPO?WS?</code> (conditional): A temporary file is created if <code>BLDFILE</code> is triggered for <code>?9?APPO?WS?</code>. This file is used for check processing and is marked as temporary.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-destroyed","title":"Files Destroyed:","text":"<ul> <li>No files are destroyed in the provided code. Temporary files like <code>?9?APPO?WS?</code> may be cleared by other processes outside this script, but this isn\u2019t explicitly shown.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#printer-output-files","title":"Printer Output Files:","text":"<ul> <li>APCHECK: Printer file for main checks, directed to an output queue (<code>APCHECKS</code> or <code>TESTOUTQ</code>).</li> <li>CHECKCPY: Printer file for check copies, directed to an output queue (<code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#notes-and-assumptions","title":"Notes and Assumptions","text":"<ul> <li>Placeholders: The <code>?9?</code> and <code>?WS?</code> are variables resolved at runtime, representing library names, typically representing names, company codes, or workspace identifiers. Without specific values, I\u2019ve described their general purpose.</li> <li>Commented Code: The commented-out code (e.g., <code>PAUSE</code>, initial display) suggests optional user interaction, which may be enabled in certain conditions or older versions.</li> <li>RPG Logic: The actual check printing logic (e.g., calculations, formatting) is in <code>AP160</code>, which isn\u2019t provided. My analysis focuses on the OCL orchestration.</li> <li>Temporary File Scope: The <code>BLDFILE</code> creates a temporary file, but its lifecycle (e.g., deletion) isn\u2019t shown here. It\u2019s likely cleared by a cleanup job.</li> </ul> <p>If you have the <code>AP160</code> RPG source or additional context (e.g., file schemas, specific <code>?9?</code> values), I can provide deeper insights into the data flow or logic. Let me know if you\u2019d like me to analyze related content or search for more information!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/","title":"AP160RPG","text":"<p>The RPG program <code>AP160.rpg36.txt</code> is designed to handle the business process of printing Accounts Payable (A/P) checks for vendor payments in an IBM midrange environment (e.g., AS/400 or IBM i). Below, I\u2019ll explain the process steps and business rules from a business perspective, focusing on the purpose, functionality, and rules governing the check printing process, rather than the technical RPG details.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#process-steps-of-the-ap160-program","title":"Process Steps of the AP160 Program","text":"<p>The <code>AP160</code> program orchestrates the generation and printing of A/P checks, ensuring payments to vendors are accurately processed, formatted, and recorded. Here\u2019s a step-by-step breakdown of the process from a business viewpoint:</p> <ol> <li>Retrieve Payment and Vendor Information:</li> <li>The program starts by accessing payment data from the payment file (<code>APPAY</code>), which contains details about invoices selected for payment, such as vendor numbers, invoice numbers, gross amounts, discounts, and payment amounts.</li> <li> <p>It cross-references this with:</p> <ul> <li>The vendor master file (<code>APVEND</code>) for vendor details like name and address.</li> <li>The open payables file (<code>APOPEN</code>) for additional invoice-related data.</li> <li>The control file (<code>APCONT</code>) for company-specific information, such as the company name for check printing.</li> <li>The transaction file (<code>APPYTR</code>) for check-related data, like the check date.</li> <li>The check file (<code>APPYCK</code>) for check numbers and statuses.</li> </ul> </li> <li> <p>Validate Payment Type and Check Eligibility:</p> </li> <li>For each payment record, the program checks the payment type (stored in the <code>AXRECD</code> field of <code>APPYCK</code>):<ul> <li>Prepaid (<code>P</code>), ACH (<code>A</code>), Wire Transfer (<code>W</code>), Employee Expense (<code>E</code>), Credit/No Pay (<code>C</code>): These payments are not printed as physical checks. They are either already paid (e.g., prepaid checks) or processed via electronic methods (e.g., ACH, wire transfer), so the program skips printing.</li> <li>Full Stub/Void Check (<code>F</code>, <code>V</code>): These indicate voided checks, which are printed with a \"VOID\" label. For <code>F</code>, the same check number is reused for the next stub; for <code>V</code>, the next check number is used.</li> <li>Normal Payments: Payments not flagged as <code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>C</code>, <code>F</code>, or <code>V</code> are processed for check printing.</li> </ul> </li> <li> <p>This step ensures only valid, non-electronic payments result in printed checks, aligning with payment method policies.</p> </li> <li> <p>Calculate Check Totals:</p> </li> <li>For each invoice, the program aggregates:<ul> <li>Gross Amount: The total invoice amount before discounts.</li> <li>Discount Amount: Any applicable vendor discounts (e.g., early payment discounts).</li> <li>Net Payment Amount: The actual amount to be paid (gross minus discount).</li> </ul> </li> <li> <p>These amounts are accumulated to calculate the total check amount (<code>CKAMT</code>), ensuring the check reflects all invoices paid to a vendor in a single transaction.</p> </li> <li> <p>Assign and Validate Check Numbers:</p> </li> <li>The program retrieves a check number from the check file (<code>APPYCK</code>) using a sequence number (<code>SEQ#</code>).</li> <li> <p>If the check number is marked as void (<code>V</code>), the program increments the sequence number to assign a new check number, ensuring only valid check numbers are used for printing.</p> </li> <li> <p>Format Check Information:</p> </li> <li>The program prepares the check for printing by pulling together:<ul> <li>Company Information: The company name from <code>APCONT</code> is printed at the top of the check (except for company code <code>01</code>, which skips this per a business rule).</li> <li>Vendor Information: Vendor name and address (up to four address lines) from <code>APVEND</code> or <code>APOPEN</code> are formatted for the check payee section.</li> <li>Payment Details: Invoice number, invoice date, description, gross amount, discount, and payment amount are included for each invoice.</li> <li>Check Date: Retrieved from <code>APPYTR</code> and formatted for the check.</li> <li>Check Amount: The total payment amount is printed in both numeric and written form (e.g., \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX AND 78/100 DOLLARS\").</li> </ul> </li> <li> <p>For amounts exceeding $999,999.99, special handling ensures proper formatting, and for zero or invalid amounts, the program adjusts to avoid errors.</p> </li> <li> <p>Convert Numeric Amount to Words:</p> </li> <li>The program converts the check amount\u2019s dollar portion into words for the check\u2019s written amount line (e.g., 123456.78 becomes \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX\").</li> <li>The cents are appended as a fraction (e.g., \"78/100\"), and the word \"DOLLARS\" is added.</li> <li> <p>The conversion eliminates excess spaces to fit within a standard check\u2019s 10 CPI (characters per inch) layout, ensuring readability and compliance with check printing standards.</p> </li> <li> <p>Print Checks and Copies:</p> </li> <li>The program generates output for two printer files:<ul> <li>APCHECK: The primary check output, sent to the designated output queue (e.g., <code>APCHECKS</code> for production or <code>TESTOUTQ</code> for testing, as set in the OCL).</li> <li>CHECKCPY: A copy of the check, sent to a separate output queue (e.g., <code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul> </li> <li>Each check includes:<ul> <li>Header: Company name (if applicable), vendor name, check date, and check number.</li> <li>Detail Lines: Invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Totals: Summarized gross amount, discount, and net payment amount.</li> <li>Written Amount: The check amount in words, with an asterisk (*) at the end for security.</li> </ul> </li> <li>Void checks are marked with \" VOID * VOID * VOID \" across the check to prevent misuse.</li> <li> <p>The program ensures proper alignment and formatting for both the check and its copy, adhering to printer settings (6 LPI, 12 CPI, standard quality).</p> </li> <li> <p>Handle Void Checks:</p> </li> <li> <p>For voided checks (<code>F</code> or <code>V</code>), the program prints the check with a \"VOID\" label and may either reuse the check number (<code>F</code>) or assign a new one (<code>V</code>), depending on the business need to track voided transactions.</p> </li> <li> <p>Clear Accumulators:</p> </li> <li> <p>After printing a check, the program resets the accumulated gross amount, discount, and payment totals to zero, preparing for the next vendor\u2019s check.</p> </li> <li> <p>Completion:</p> <ul> <li>The program continues processing until all selected payments are handled, generating checks and copies as needed. The output is sent to the configured printers, and the process ends.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate, compliant, and efficient check printing:</p> <ol> <li>Selective Check Printing:</li> <li> <p>Checks are only printed for payments not flagged as prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>). This ensures physical checks are issued only for standard payment methods, while electronic or prepaid payments are processed separately.</p> </li> <li> <p>Void Check Handling:</p> </li> <li>Void checks (<code>F</code> or <code>V</code>) are printed with clear \"VOID\" markings to prevent fraudulent use.</li> <li>For <code>F</code> (full stub, same check number), the check number is reused for the next stub, useful for multi-part check forms.</li> <li> <p>For <code>V</code> (void, next check number), a new check number is assigned, ensuring accurate tracking of voided checks.</p> </li> <li> <p>Company Name Exclusion:</p> </li> <li> <p>The company name is printed at the top of checks unless the company code is <code>01</code> (e.g., A.R.G.), likely due to specific branding or legal requirements for that company.</p> </li> <li> <p>Amount Formatting:</p> </li> <li>The check amount is printed in both numeric and written forms, with the written form adhering to a compact format to fit standard check layouts (10 CPI).</li> <li>Amounts exceeding $999,999.99 are handled to prevent formatting errors, ensuring reliability for large payments.</li> <li> <p>Zero or invalid amounts are processed to avoid printing blank or incorrect checks.</p> </li> <li> <p>Vendor Information Validation:</p> </li> <li> <p>If vendor details (e.g., name, address) are missing from the vendor file (<code>APVEND</code>), the program falls back to the open payables file (<code>APOPEN</code>) or blanks the fields, ensuring checks are still printed without errors.</p> </li> <li> <p>Check Number Management:</p> </li> <li> <p>The program ensures valid check numbers by skipping voided ones (<code>V</code>), preventing duplicate or invalid check numbers in the payment process.</p> </li> <li> <p>Invoice Detail Inclusion:</p> </li> <li> <p>Each check includes detailed invoice information (date, number, description, amounts) to provide transparency to vendors and support accounting reconciliation.</p> </li> <li> <p>Printer Output Separation:</p> </li> <li> <p>Checks and their copies are sent to separate output queues, allowing businesses to maintain distinct records for primary checks and copies for auditing or filing purposes.</p> </li> <li> <p>Payment Aggregation:</p> </li> <li> <p>Multiple invoices for a single vendor are aggregated into one check, with totals for gross amount, discount, and net payment, streamlining payment processing and reducing check issuance costs.</p> </li> <li> <p>Date and Check Number Consistency:</p> <ul> <li>The check date is sourced from the transaction file (<code>APPYTR</code>), ensuring consistency with the payment batch.</li> <li>Check numbers are tracked via the check file (<code>APPYCK</code>), maintaining sequential and accurate check issuance.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#summary","title":"Summary","text":"<p>From a business perspective, the <code>AP160</code> program automates the critical process of printing A/P checks, ensuring payments to vendors are accurately calculated, formatted, and printed according to strict business rules. It handles vendor payments by aggregating invoices, validating payment types, assigning check numbers, and producing both primary checks and copies for record-keeping. The program supports various payment scenarios (e.g., void checks, electronic payments) and enforces rules like excluding certain company names or formatting amounts for compliance. By integrating data from multiple files (payment, vendor, open payables, etc.), it ensures accuracy and transparency, making it a vital component of the A/P workflow.</p> <p>If you need further clarification, additional analysis (e.g., specific file layouts), or related information, let me know!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20OCL/","title":"AP250 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, specifically <code>AP250.ocl36.txt</code>, which appears to be part of an IBM System/36 or AS/400 environment for processing an Accounts Payable (A/P) Check Register, Journal, and file updates. Below is an explanation of the process steps, the external programs called, and the tables (files) used in the program.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20OCL/#process-steps-of-the-ap250-ocl-program","title":"Process Steps of the AP250 OCL Program","text":"<p>The OCL program orchestrates a sequence of operations to generate an A/P Check Register, update related files, and produce a Cash Disbursements Journal. Here\u2019s a breakdown of the steps based on the program\u2019s structure:</p> <ol> <li>Initialization and Setup:</li> <li>Procedure Call: The program starts by calling <code>STRPCOCLP</code>, likely a system procedure to initialize the environment or set up processing parameters.</li> <li>Conditional Wire Transfer Check:<ul> <li>Checks if parameter <code>?3?</code> equals 'WT' (Wire Transfer).</li> <li>If true, sets a local variable at offset 198 with the text <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>If false, clears the local variable (sets it to blanks).</li> </ul> </li> <li> <p>Auto-Run Check:</p> <ul> <li>If parameter <code>?2?</code> equals 'AUTO', the program jumps to the <code>AP250</code> tag, indicating it\u2019s running as part of an automated process (likely triggered by another program, <code>AP200</code>).</li> </ul> </li> <li> <p>Workstation Lockout Check:</p> </li> <li>Checks if the data field <code>DATAF1-?9?APPO?WS?</code> exists (indicating checks are pending printing at the workstation).</li> <li>If true, displays a warning message indicating that checks cannot be posted until printed (via Option 11 of <code>APMENU</code>).</li> <li> <p>Prompts the user to press <code>0,ENTER</code> to cancel the job, then jumps to the <code>END</code> tag to terminate.</p> </li> <li> <p>User Interaction:</p> </li> <li>If not in auto mode and no workstation lockout, displays a message: <code>'A/P CHECK REGISTER, JOURNAL, AND UPDATE FILES'</code>.</li> <li>Prompts the user to either cancel (press <code>ATTN,2,ENTER</code>) or continue (press <code>0,ENTER</code>).</li> <li> <p>Sets an attribute <code>INQUIRY-YES,CANCEL-NO</code> to handle user input.</p> </li> <li> <p>File Preparation:</p> </li> <li>Deletes any existing temporary file <code>APCD?WS?</code> using <code>GSDELETE</code>.</li> <li> <p>Builds a new sequential file <code>?9?APCD?WS?</code> with a capacity of 999,000 records and a record length of 128 bytes.</p> </li> <li> <p>Check Register and File Update Execution:</p> </li> <li>Displays a message: <code>'CHECK REGISTER, UPDATE FILES EXECUTING'</code>.</li> <li>Loads the program <code>AP250</code> and associates it with multiple files (see Tables Used below for details).</li> <li>Overrides printer output files (<code>APPNCF</code> and <code>APPRINT</code>) to specific output queues (<code>QUSRSYS/PRTPNC</code>, <code>QUSRSYS/APPOST</code>, or <code>QUSRSYS/TESTOUTQ</code>) based on the condition <code>?9?/G</code>.</li> <li> <p>Runs the <code>AP250</code> program to process the check register and update related files.</p> </li> <li> <p>Commission Table Update:</p> </li> <li>Loads the program <code>AP251</code>.</li> <li>Uses files <code>APPAY</code> and <code>APTORCY</code> to update a commission table with payment information.</li> <li> <p>Runs the <code>AP251</code> program.</p> </li> <li> <p>Sorting Cash Disbursements Data:</p> </li> <li>Displays a message: <code>'CASH DISBURSMENTS JOURNAL EXECUTING'</code>.</li> <li>Loads the <code>#GSORT</code> program to sort data.</li> <li>Input file: <code>?9?APCD?WS?</code>.</li> <li>Output file: <code>?9?APCS?WS?</code> (capacity of 999,000 records, extendable).</li> <li>Sorting parameters:<ul> <li>Sorts in ascending order (<code>HSORTA 30A 3X N</code>).</li> <li>Conditions and fields for sorting:</li> <li><code>I C 1 1NECD</code>: Likely a conditional check on a specific field.</li> <li>Fields sorted: Company (positions 2-3), C/D flag (position 12), AP/Cash/Discount (positions 106-115), G/L number (positions 13-20), and Sequence number (positions 97-105).</li> </ul> </li> <li> <p>Runs the sort operation.</p> </li> <li> <p>Cash Disbursements Journal Generation:</p> </li> <li>Loads the program <code>AP255</code>.</li> <li>Uses sorted data (<code>APCDJR</code> and <code>AP255S</code>) and control files (<code>APCONT</code>, <code>TEMGEN</code>).</li> <li>Overrides printer output file <code>APPRINT</code> to <code>QUSRSYS/APPOST</code> or <code>QUSRSYS/TESTOUTQ</code> based on <code>?9?/G</code>.</li> <li> <p>Runs <code>AP255</code> to generate the Cash Disbursements Journal.</p> </li> <li> <p>Optional File Processing (APDT?WS?):</p> </li> <li>Checks if the file <code>?9?APDT?WS?</code> exists and has a non-zero size.</li> <li> <p>If it exists:</p> <ul> <li>Builds a new indexed file <code>?9?APDT?WS?C</code> with 500 records, record length of 10 bytes, and specific key fields.</li> <li>Loads <code>AP256A</code> to process this file with <code>APVNFMX</code> (vendor master file).</li> <li>Runs <code>AP256A</code>.</li> <li>Loads <code>AP256</code> to further process <code>APDTWS</code>, <code>APDTWSC</code>, <code>APVEND</code>, <code>APCONT</code>, and <code>APVNFMX</code>.</li> <li>Overrides multiple report files (<code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code>) to output queues <code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code> based on <code>?9?/G</code>.</li> <li>Runs <code>AP256</code>.</li> </ul> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>Deletes temporary files (<code>APPT?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDS?WS?</code>, <code>APPO?WS?</code>, <code>APCD?WS?</code>, <code>APCS?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>) using <code>GSDELETE</code>.</li> <li>If in auto mode (<code>?2?/AUTO</code>), clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Ends the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs: 1. STRPCOCLP: Initializes the environment or sets up processing parameters. 2. AP250: Main program for generating the A/P Check Register and updating files. 3. AP251: Updates the commission table with payment data. 4. #GSORT: Sorts data for the Cash Disbursements Journal. 5. AP255: Generates the Cash Disbursements Journal. 6. AP256A: Processes temporary data files (if <code>APDT?WS?</code> exists). 7. AP256: Further processes temporary data and generates reports.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files, which serve as input, output, or shared data tables: 1. APPYCK (<code>?9?APPC?WS?</code>): Likely contains check data. 2. APPAY (<code>?9?APPY?WS?</code>): Payment data file, used in <code>AP250</code> and <code>AP251</code>. 3. AP250S (<code>?9?APPS?WS?</code>): Temporary file for <code>AP250</code> processing. 4. APPYTR (<code>?9?APPT?WS?</code>): Transaction-related file. 5. APCONT (<code>?9?APCONT</code>, DISP-SHR): Control file for A/P processing, shared across programs. 6. APVEND (<code>?9?APVEND</code>, DISP-SHR): Vendor master file, used in multiple programs. 7. APVEND2 (<code>?9?APVEND</code>, DISP-SHR): Likely an alias for <code>APVEND</code>. 8. APCHKR (<code>?9?APCHKR</code>, DISP-SHR): Check register file. 9. APPYDS (<code>?9?APDS?WS?</code>, DISP-SHR): Payment distribution file. 10. APOPEN (<code>?9?APOPEN</code>, DISP-SHR): Open A/P transactions. 11. APOPENH (<code>?9?APOPNH</code>, DISP-SHR): Historical A/P open transactions header. 12. APOPEND (<code>?9?APOPND</code>, DISP-SHR): Detailed A/P open transactions. 13. APOPENV (<code>?9?APOPNV</code>, DISP-SHR): Vendor-specific A/P open transactions. 14. APHISTH (<code>?9?APHSTH</code>, DISP-SHR): A/P history header. 15. APHISTD (<code>?9?APHSTD</code>, DISP-SHR): A/P history details. 16. APHISTV (<code>?9?APHSTV</code>, DISP-SHR): Vendor-specific A/P history. 17. FRCINH (<code>?9?FRCINH</code>, DISP-SHR): Possibly a financial control file. 18. FRCFBH (<code>?9?FRCFBH</code>, DISP-SHR): Another financial control file. 19. APCDJR (<code>?9?APCD?WS?</code>, EXTEND-100): Cash disbursements journal file. 20. APDSMS (<code>?9?APDSMS</code>, DISP-SHR): Summary data for disbursements. 21. AP255S (<code>?9?APCS?WS?</code>): Sorted output for the Cash Disbursements Journal. 22. TEMGEN (<code>?9?TEMGEN</code>, DISP-SHR): Temporary general file. 23. APDTWS (<code>?9?APDT?WS?</code>): Temporary data file for additional processing. 24. APDTWSC (<code>?9?APDT?WS?C</code>, RETAIN-T, RECORDS-50): Indexed temporary file for <code>AP256A</code> and <code>AP256</code>. 25. APVNFMX (<code>?9?APVNFMX</code>, DISP-SHR): Vendor master extension file.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20OCL/#summary","title":"Summary","text":"<p>The <code>AP250</code> OCL program is a comprehensive A/P processing routine that: - Validates workstation status and user input. - Generates an A/P Check Register and updates related files (<code>AP250</code>). - Updates commission tables (<code>AP251</code>). - Sorts data and produces a Cash Disbursements Journal (<code>#GSORT</code>, <code>AP255</code>). - Optionally processes additional temporary files (<code>AP256A</code>, <code>AP256</code>). - Cleans up temporary files and terminates.</p> <p>It integrates with multiple external programs and a large set of files to manage A/P transactions, vendor data, and financial reporting. The program supports both interactive and automated execution, with conditional logic for handling wire transfers and output queue assignments.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/","title":"AP250 RPG","text":"<p>The provided RPG program, <code>AP250.rpg36.txt</code>, is part of an IBM System/36 or AS/400 Accounts Payable (A/P) system, specifically designed to generate a Check Register, update master files, and handle related financial transactions such as checks, ACH payments, wire transfers, and employee expenses. It is called from the <code>AP250.ocl36.txt</code> OCL program. Below, I will explain the process steps, business rules, tables (files) used, and external programs called (if any) based on the RPG code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/#process-steps-of-the-ap250-rpg-program","title":"Process Steps of the AP250 RPG Program","text":"<p>The RPG program <code>AP250</code> processes A/P check data, updates related files (e.g., vendor, open invoices, history, and reconciliation files), and produces a Check Register report. It handles various payment types (checks, ACH, wire transfers, and employee expenses) and applies specific logic based on record codes and payment statuses. Below is a detailed breakdown of the process steps:</p> <ol> <li>File Initialization and Setup:</li> <li>The program defines input, update, and output files (see Tables Used below) for processing A/P checks, payments, vendor data, and history.</li> <li> <p>It initializes variables for totals (e.g., <code>C3CNT</code>, <code>C3AMT</code> for computer checks, <code>P3CNT</code>, <code>P3AMT</code> for prepaid checks, <code>A3CNT</code>, <code>A3AMT</code> for ACH, <code>W3CNT</code>, <code>W3AMT</code> for wire transfers, <code>E3CNT</code>, <code>E3AMT</code> for employee expenses) and other control fields.</p> </li> <li> <p>Main Processing Loop (Level Breaks):</p> </li> <li> <p>L4 (Company/Bank G/L Level):</p> <ul> <li>Executes the <code>L4DET</code> subroutine to initialize company-level processing.</li> <li>Retrieves the current date and time (<code>TIMDAT</code>) and formats it for reporting (<code>DATE8</code>).</li> <li>Chains to <code>APCONT</code> to fetch company details (e.g., <code>ACNAME</code>, <code>ACDSGL</code>, <code>ACCDJR</code>, <code>ACCKNO</code>).</li> <li>Determines the journal ID (<code>JRNID</code>) based on whether the transaction is a wire transfer (<code>WIRE='WT'</code>, sets <code>JRNID='WD'</code>) or standard check (<code>JRNID='CD'</code> or <code>ACCDJR</code>).</li> <li>Sets payment method description (<code>PAYBY</code>) based on <code>PTHOLD</code> (e.g., 'PAY BY CHECK', 'PAY BY ACH', 'PAY BY WIRE TFR', 'PAY BY PAYROLL').</li> <li>For ACH, wire transfers, or employee expenses, sets indicator <code>50</code> to skip updating <code>APCHKR</code>.</li> </ul> </li> <li> <p>Check Record Processing (<code>EACH01</code> Subroutine):</p> </li> <li>Processes each record in <code>APPYCK</code> (check file) using indicator <code>01</code>.</li> <li>Formats the check date (<code>AXCKDT</code>) into <code>AXYMD8</code> for reporting.</li> <li>Copies the check number to the Positive Pay field (<code>PNCCHK</code>) for external bank reconciliation.</li> <li>Evaluates the record code (<code>AXRECD</code>):<ul> <li><code>'C'</code>: Credit/no pay, skips processing (<code>19</code> set, jumps to <code>ENDL1D</code>).</li> <li><code>'F'</code>: Full stub, void check, continues to next stub with the same check number (<code>12</code> set).</li> <li><code>'V'</code>: Full stub, void check, uses next check number (<code>13</code> set).</li> <li><code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>: Prepaid check, ACH, wire transfer, or employee expense, respectively (<code>25</code>, <code>26</code>, <code>27</code>, <code>28</code> set, and <code>11</code> for prepaid).</li> </ul> </li> <li>Updates <code>APCHKR</code> (Check Reconciliation file):<ul> <li>Chains to <code>APCHKR</code> using a key (<code>AMKEY</code>) built from company number (<code>CONO</code>), bank G/L (<code>BKGL</code>), and check number (<code>AXCHEK</code>).</li> <li>If not found (<code>90</code> set), initializes fields (<code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>, <code>AMOCAM</code>).</li> <li>For voided checks (<code>13</code> set), sets <code>AMCODE='V'</code>, clears <code>AMCKAM</code>, and updates clear date (<code>AMCLDT</code>, <code>CLDT8</code>).</li> <li>For non-voided checks, sets <code>AMCODE='O'</code> (open) and updates <code>AMCKAM</code> with the check amount (<code>AXAMT</code>).</li> <li>Formats dates for Positive Pay (<code>PNCDT8</code>) and sets <code>PNCCOD</code> ('V' for void, 'I' for issued).</li> </ul> </li> <li> <p>Updates counters and totals (<code>C3CNT</code>, <code>C3AMT</code>, etc.) based on payment type, excluding voided checks (<code>N13</code>).</p> </li> <li> <p>Payment Processing (<code>EACH02</code> Subroutine):</p> </li> <li>Processes each payment record in <code>APPAY</code> (payment file) using indicator <code>02</code> and <code>N19</code> (non-credit records).</li> <li>Accumulates totals for gross amount (<code>L2GRAM</code>), discount (<code>L2DISC</code>), partial paid to date (<code>L2PPTD</code>), and payment amount (<code>L2AMT</code>) at the vendor level (<code>L2</code>).</li> <li>Updates vendor name overflow (<code>AXNAM2</code>) from <code>APVEND2</code> if <code>VNNOVF='Y'</code>.</li> <li>Calculates A/P reduction (<code>OPPAY = OPDISC + OPLPAM</code>) and open amount (<code>OPOPEN = OPGRAM - OPPPTD - OPPAY</code>).</li> <li>If fully paid (<code>OPOPEN=0</code>, <code>20</code> set), marks the record for deletion.</li> <li>Updates <code>APOPEN</code> (open invoices):<ul> <li>Sets lower limit (<code>SETLL</code>) using <code>OPKEY</code> and reads records.</li> <li>Chains to <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on indicators (<code>04</code>, <code>05</code>, <code>06</code>) to update or delete records.</li> <li>If fully paid (<code>20</code> set), writes deletion records (<code>'D'</code>) to <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code>.</li> </ul> </li> <li>Updates freight-related files (<code>FRCFBH</code>, <code>FRCINH</code>):<ul> <li>Builds a key (<code>FRCKEY</code>, <code>FRCK39</code>) using company number (<code>CONO</code>), carrier ID (<code>OPCAID</code>), invoice number (<code>OPINVN</code>), or sales order number (<code>OPSORN</code>).</li> <li>Chains to <code>FRCFBH</code> (freight bill override header) first; if found and posted (<code>FRAPST='Y'</code>), writes to <code>FRCFBH</code> (<code>APFBST</code> exception).</li> <li>If not found in <code>FRCFBH</code>, chains to <code>FRCINH</code> (carrier invoice header) and writes to <code>FRCINH</code> (<code>APINST</code> exception).</li> </ul> </li> <li>Updates <code>APPYDS</code> (discount missed table):<ul> <li>Chains to <code>APPYDS</code> using <code>OPKY1</code> and writes records if a discount is missed (<code>97</code> not set).</li> </ul> </li> <li> <p>Writes history records to <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code> for header, detail, and one-time vendor transactions, including payment details, check numbers, and dates.</p> </li> <li> <p>Vendor Totals Update (<code>L2TOT</code> Subroutine):</p> </li> <li> <p>At the vendor level break (<code>L2</code>), updates <code>APVEND</code>:</p> <ul> <li>Chains to <code>APVEND</code> using a key (<code>VNKEY</code>) built from company number (<code>CONO</code>) and vendor number (<code>VEND</code>).</li> <li>Updates fields:</li> <li>Last payment amount (<code>VNLPAY += L2AMT</code>).</li> <li>Last payment date (<code>VNLPDT</code>, <code>VNLPD8</code>).</li> <li>Month-to-date discounts (<code>VNDMTD += L2DISC</code>).</li> <li>Year-to-date discounts (<code>VNDYTD += L2DISC</code>).</li> <li>Month-to-date payments (<code>VNPAY += L2AMT + L2DISC</code>).</li> <li>Current balance (<code>VNCBAL -= L2AMT + L2DISC</code>).</li> <li>Year-to-date paid (<code>VNTYDP += L2PAID</code>).</li> </ul> </li> <li> <p>Company Totals and Control Update (<code>L4TOT</code> Subroutine):</p> </li> <li> <p>At the company/bank G/L level break (<code>L4</code>), updates <code>APCONT</code>:</p> <ul> <li>Increments the next check number (<code>ACCKNO</code>) if the last check number (<code>L4CHEK</code>) is greater than zero and matches or exceeds the current <code>ACCKNO</code>.</li> <li>Increments the next cash disbursements journal number (<code>ACCDJR</code>).</li> </ul> </li> <li> <p>Output Generation:</p> </li> <li>Check Register (<code>APPRINT</code>):<ul> <li>Prints headers with company name (<code>ACNAME</code>), payment method (<code>PAYBY</code>), page number, date, time, and journal ID (<code>JRNID</code>).</li> <li>Prints detail lines for each check (<code>AXCHEK</code>, <code>VEND</code>, <code>AXNAME</code>, <code>AXCKDT</code>, <code>AXAMT</code>) with annotations for prepaid, ACH, wire transfer, employee expense, or void status.</li> <li>Prints totals for computer checks, prepaid checks, ACH payments, wire transfers, employee expenses, and overall totals.</li> </ul> </li> <li>Positive Pay File (<code>APPNCF</code>):<ul> <li>Outputs check data (<code>PNCCHK</code>, <code>PNCDT8</code>, <code>AXAMT</code>, <code>AXNAME</code>, <code>AXNAM2</code>, <code>PNCCOD</code>) for bank reconciliation.</li> </ul> </li> <li> <p>Cash Disbursements Journal (<code>APCDJR</code>):</p> <ul> <li>Writes records for cash (<code>C</code>), discount (<code>D</code>), and A/P (<code>AP</code>) entries, including company number (<code>CONO</code>), journal ID (<code>JRNID</code>), bank G/L (<code>BKGL</code>), check number (<code>AXCHEK</code>), description (<code>DESC23</code>), check date (<code>PTCKDT</code>), amount (<code>OPLPAM</code>, <code>CDDISC</code>, <code>OPPAY</code>), and vendor name (<code>AXNAME</code>).</li> </ul> </li> <li> <p>Cleanup:</p> </li> <li>Ensures all files are updated or written as needed (e.g., <code>APOPEN</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>APCHKR</code>, <code>FRCFBH</code>, <code>FRCINH</code>, <code>APCDJR</code>, <code>APPYDS</code>).</li> <li>Commits changes to master files (<code>APVEND</code>, <code>APCONT</code>) at the appropriate level breaks.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate A/P processing and reporting:</p> <ol> <li>Payment Type Handling:</li> <li>Supports multiple payment types based on <code>AXRECD</code> and <code>PTHOLD</code>:<ul> <li><code>'C'</code>: Credit/no pay, skips processing.</li> <li><code>'F'</code>, <code>'V'</code>: Void checks with different behaviors for check number reuse.</li> <li><code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>: Prepaid checks, ACH, wire transfers, and employee expenses, respectively.</li> </ul> </li> <li> <p>Wire transfers, ACH, and employee expenses skip <code>APCHKR</code> updates (indicator <code>50</code> set).</p> </li> <li> <p>Check Reconciliation:</p> </li> <li>Updates <code>APCHKR</code> for non-prepaid, non-void checks with status <code>'O'</code> (open) or <code>'V'</code> (voided).</li> <li> <p>Maintains original check amount (<code>AMOCAM</code>) and clear date (<code>AMCLDT</code>) for voided checks.</p> </li> <li> <p>Vendor Balance and History:</p> </li> <li>Tracks vendor totals (last payment, discounts, balance, year-to-date paid) in <code>APVEND</code>.</li> <li>Records payment history in <code>APHISTH</code> (header), <code>APHISTD</code> (detail), and <code>APHISTV</code> (one-time vendor).</li> <li> <p>Adjusts vendor current balance (<code>VNCBAL</code>) by subtracting payment and discount amounts.</p> </li> <li> <p>Open Invoice Management:</p> </li> <li>Marks fully paid invoices (<code>OPOPEN=0</code>) for deletion (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>.</li> <li> <p>Updates partial payments (<code>OPPPTD += OPLPAM</code>).</p> </li> <li> <p>Freight Invoice Processing:</p> </li> <li>Updates <code>FRCFBH</code> (freight bill override header) or <code>FRCINH</code> (carrier invoice header) for freight invoices with a carrier ID (<code>OPCAID</code>).</li> <li> <p>Sets posting status (<code>FRAPST='P'</code>) for freight records.</p> </li> <li> <p>Discount Tracking:</p> </li> <li>Records missed discounts in <code>APPYDS</code> if applicable.</li> <li> <p>Accumulates discounts taken (<code>VNDMTD</code>, <code>VNDYTD</code>) in <code>APVEND</code>.</p> </li> <li> <p>Journal and Check Numbering:</p> </li> <li>Increments <code>ACCDJR</code> (journal number) and <code>ACCKNO</code> (check number) in <code>APCONT</code> for tracking.</li> <li> <p>Ensures unique journal entries in <code>APCDJR</code> for cash, discounts, and A/P accounts.</p> </li> <li> <p>Date Handling:</p> </li> <li>Supports century-aware date processing using <code>Y2KCEN</code> (e.g., 19 for 1900s, 20 for 2000s).</li> <li> <p>Formats dates for reporting (<code>AXYMD8</code>, <code>CDYMD8</code>, <code>PNCDT8</code>) and Positive Pay output.</p> </li> <li> <p>Positive Pay Compliance:</p> </li> <li>Generates formatted output (<code>APPNCF</code>) for bank reconciliation, including check number, date, amount, vendor name, and void/issue code (<code>PNCCOD</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (F-spec) section:</p> <ol> <li>Input Files:</li> <li>APPYCK (IP, 96 bytes, keyed): Check file, contains check details (e.g., <code>AXCHEK</code>, <code>AXAMT</code>, <code>AXCKDT</code>, <code>VEND</code>, <code>AXNAME</code>, <code>AXRECD</code>).</li> <li>APPAY (IS, 384 bytes, keyed): Payment file, contains payment details (e.g., <code>COVNVO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code>, <code>OPPAID</code>).</li> <li>APPYTR (IC, 128 bytes, keyed): Transaction file, contains check date (<code>PTCKDT</code>, <code>PTCKYY</code>) and hold code (<code>PTHOLD</code>).</li> <li>APVEND (UC, 579 bytes, keyed): Vendor master file, contains vendor details (e.g., <code>VNNAME</code>, <code>VNLPAY</code>, <code>VNCBAL</code>).</li> <li>APVEND2 (IC, 579 bytes, keyed): Secondary vendor file, includes address and name overflow (<code>VNNOVF</code>).</li> <li>APCHKR (UC, 128 bytes, keyed): Check reconciliation file, tracks check status (<code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>).</li> <li>APOPEN (ID, 384 bytes, keyed): Open A/P invoices, contains invoice details (<code>OPKY1</code>, <code>OPKY2</code>, <code>OPGRAM</code>, <code>OPDISC</code>).</li> <li>APOPENH (UC, 384 bytes, keyed): Open A/P header file, used for header-level updates.</li> <li>APOPEND (UC, 384 bytes, keyed): Open A/P detail file, used for detail-level updates.</li> <li>APOPENV (UC, 384 bytes, keyed): Open A/P one-time vendor file, used for one-time vendor updates.</li> <li>FRCINH (UF, 206 bytes, keyed): Freight carrier invoice header, tracks freight invoice details.</li> <li>FRCFBH (UF, 206 bytes, keyed): Freight bill override header, used for freight bill overrides.</li> <li> <p>APPYDS (IF, 384 bytes, keyed): Discount missed table, tracks missed discount invoices.</p> </li> <li> <p>Output Files:</p> </li> <li>APHISTH (O, 384 bytes): A/P history header file, stores header-level payment history.</li> <li>APHISTD (O, 384 bytes): A/P history detail file, stores detail-level payment history.</li> <li>APHISTV (O, 384 bytes): A/P history one-time vendor file, stores one-time vendor payment history.</li> <li>APCDJR (O, 128 bytes): Cash disbursements journal file, records journal entries for cash, discounts, and A/P.</li> <li>APPNCF (O, 155 bytes, PRINTER): Positive Pay file for bank reconciliation.</li> <li>APPRINT (O, 132 bytes, PRINTER): Check Register report file.</li> <li> <p>APDSMS (O, 384 bytes): Discount missed summary file, stores summary data for missed discounts.</p> </li> <li> <p>Table File:</p> </li> <li>AP250S (IR, 3 bytes, keyed): Internal table file, likely used for temporary storage or control data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call external programs (e.g., via <code>CALL</code> or <code>EXSR</code> to external routines). All processing is handled within the <code>AP250</code> program through its subroutines (<code>L4DET</code>, <code>EACH01</code>, <code>EACH02</code>, <code>L2TOT</code>, <code>L4TOT</code>). The program is self-contained, relying on file operations and internal logic to perform its tasks. However, it is called by the <code>AP250.ocl36.txt</code> OCL program, which orchestrates the broader A/P process.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20RPG/#summary","title":"Summary","text":"<p>The <code>AP250</code> RPG program is a critical component of the A/P system, responsible for processing checks, updating master files, and generating reports. It: - Processes check and payment records, handling various payment types (checks, ACH, wire transfers, employee expenses). - Updates vendor balances, open invoices, freight records, and history files. - Generates a Check Register (<code>APPRINT</code>), Positive Pay file (<code>APPNCF</code>), and Cash Disbursements Journal (<code>APCDJR</code>). - Enforces business rules for payment types, invoice status, discount tracking, and reconciliation. - Uses a variety of input, update, and output files to manage A/P data.</p> <p>The program is tightly integrated with the OCL program (<code>AP250.ocl36.txt</code>) and relies on shared files to maintain data consistency across the A/P process. If you meant <code>VNNOVF</code> as a field (noted in <code>APVEND2</code> as a name overflow indicator) rather than a file, it is used to determine if additional vendor name data (<code>VNADD1</code>) should be moved to <code>AXNAM2</code> for reporting. Please clarify if you need further details on <code>VNNOVF</code> or any other aspect.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/","title":"AP251 OCL","text":"<p>The provided OCL program, <code>AP251.ocl36.txt</code>, is a simple Operations Control Language (OCL) script for an IBM System/36 or AS/400 environment. It is called from the main OCL program (<code>AP250.ocl36.txt</code>) as part of an Accounts Payable (A/P) process to update a commission table with payment information. Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the provided OCL code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/#process-steps-of-the-ap251-ocl-program","title":"Process Steps of the AP251 OCL Program","text":"<p>The <code>AP251.ocl36.txt</code> program is straightforward and focuses on executing a single program to update a commission table. Here are the process steps:</p> <ol> <li>Load the AP251 Program:</li> <li> <p>The OCL script uses the <code>LOAD</code> command to load the <code>AP251</code> program, which is likely an RPG or similar program designed to process payment data and update commission-related records.</p> </li> <li> <p>File Assignments:</p> </li> <li>The program specifies two files to be used by <code>AP251</code>:<ul> <li>APPAY (labeled <code>?9?APPY?WS?</code>, <code>DISP-SHR</code>): A temporary payment file created by the main OCL program (<code>AP250.ocl36.txt</code>). It contains payment details such as vendor numbers, check numbers, payment amounts, and discounts.</li> <li>APTORCY (labeled <code>?9?APTORCY</code>, <code>DISP-SHR</code>): A commission-related file, likely a master file containing commission data (e.g., sales orders, commission amounts, or agent details) that needs to be updated based on payments processed in <code>APPAY</code>.</li> </ul> </li> <li> <p>Both files are opened with shared access (<code>DISP-SHR</code>), allowing concurrent access by other processes.</p> </li> <li> <p>Run the Program:</p> </li> <li>The <code>RUN</code> command executes the <code>AP251</code> program, which processes the <code>APPAY</code> file and updates the <code>APTORCY</code> file based on the payment data.</li> <li> <p>The exact logic of the update (e.g., matching payments to commission records, updating commission statuses, or calculating amounts) is handled within the <code>AP251</code> program, which is not detailed in the OCL script.</p> </li> <li> <p>Completion:</p> </li> <li>After the <code>AP251</code> program completes its execution, the OCL script ends, returning control to the main OCL program (<code>AP250.ocl36.txt</code>) for further processing (e.g., sorting data or generating reports).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/#business-rules","title":"Business Rules","text":"<p>Since the OCL script itself is minimal and does not contain explicit logic, the business rules are inferred based on its role in the A/P process and the files involved:</p> <ol> <li>Commission Table Update:</li> <li>The primary purpose of <code>AP251</code> is to update the commission table (<code>APTORCY</code>) with payment information from the <code>APPAY</code> file.</li> <li> <p>This likely involves matching payment records (e.g., by vendor number, sales order number, or invoice) to commission records and updating fields such as paid amounts, payment dates, or commission statuses.</p> </li> <li> <p>Shared File Access:</p> </li> <li>Both files (<code>APPAY</code> and <code>APTORCY</code>) are opened with shared access (<code>DISP-SHR</code>), ensuring that the program can read and update records without locking other processes that may need access to these files.</li> <li> <p>This supports a multi-user environment typical in A/P systems.</p> </li> <li> <p>Dependency on Main OCL:</p> </li> <li>The <code>APPAY</code> file is a temporary file (<code>?9?APPY?WS?</code>) created by the main OCL program (<code>AP250.ocl36.txt</code>), indicating that <code>AP251</code> relies on prior processing (e.g., check register generation) to provide valid payment data.</li> <li> <p>The <code>APTORCY</code> file is a persistent master file, suggesting it maintains long-term commission data that is updated incrementally as payments are processed.</p> </li> <li> <p>No User Interaction:</p> </li> <li> <p>The OCL script does not include prompts or interactive elements, implying it runs automatically as part of the broader A/P process, likely triggered by the main OCL program in either interactive or auto mode (<code>?2?/AUTO</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>The OCL script does not include explicit error handling or conditional logic, so any error handling (e.g., missing files, invalid data) is assumed to be managed within the <code>AP251</code> program itself.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files:</p> <ol> <li>APPAY (<code>?9?APPY?WS?</code>, <code>DISP-SHR</code>):</li> <li>A temporary payment file created by the main OCL program (<code>AP250.ocl36.txt</code>).</li> <li>Contains payment details such as company number, vendor number, check number, payment amount, discount, and sales order number (based on the <code>AP250.rpg36.txt</code> program, which uses <code>APPAY</code>).</li> <li> <p>Used as input to identify payments that need to be applied to the commission table.</p> </li> <li> <p>APTORCY (<code>?9?APTORCY</code>, <code>DISP-SHR</code>):</p> </li> <li>A master file, likely containing commission-related data (e.g., sales orders, commission amounts, agent IDs, or vendor mappings).</li> <li>Updated by <code>AP251</code> to reflect payment activity, such as marking commissions as paid or updating paid amounts.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external program:</p> <ol> <li>AP251:</li> <li>Loaded and executed via the <code>LOAD</code> and <code>RUN</code> commands.</li> <li>Responsible for processing the <code>APPAY</code> file and updating the <code>APTORCY</code> file.</li> <li>Likely an RPG program (similar to <code>AP250.rpg36.txt</code>) that contains the detailed logic for commission updates, such as matching payment records to commission records and updating relevant fields.</li> </ol> <p>No other external programs are called directly by this OCL script.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20OCL/#summary","title":"Summary","text":"<p>The <code>AP251.ocl36.txt</code> OCL program is a concise script that serves as a bridge between the A/P check processing (handled by <code>AP250</code>) and commission table updates. Its key functions are:</p> <ul> <li>Process Steps: Loads the <code>AP251</code> program, assigns the <code>APPAY</code> (payment) and <code>APTORCY</code> (commission) files with shared access, and runs the program to update commission data based on payment records.</li> <li>Business Rules: Updates the commission table (<code>APTORCY</code>) using payment data from <code>APPAY</code>, operates in a shared access environment, and runs automatically as part of the A/P process without user interaction.</li> <li>Tables Used: <code>APPAY</code> (temporary payment file) and <code>APTORCY</code> (commission master file).</li> <li>External Programs Called: <code>AP251</code> (likely an RPG program for commission table updates).</li> </ul> <p>The program is tightly integrated with the main OCL program (<code>AP250.ocl36.txt</code>) and relies on the <code>APPAY</code> file being properly populated by prior steps. If you have access to the <code>AP251</code> RPG source code or additional details about <code>APTORCY</code>, I can provide a more detailed explanation of the commission update logic. Please let me know if you need further clarification or analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/","title":"AP251 RPG","text":"<p>The provided RPG program, <code>AP251.rpg36.txt</code>, is executed by the OCL program <code>AP251.ocl36.txt</code>, which itself is called from the main OCL program <code>AP250.ocl36.txt</code> within an IBM System/36 or AS/400 Accounts Payable (A/P) system. The purpose of <code>AP251</code> is to update a commission table (<code>APTORCY</code>) with payment information from the payment file (<code>APPAY</code>). Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the RPG code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#process-steps-of-the-ap251-rpg-program","title":"Process Steps of the AP251 RPG Program","text":"<p>The <code>AP251</code> RPG program processes payment records from the <code>APPAY</code> file and updates corresponding records in the <code>APTORCY</code> commission table. Here is a detailed breakdown of the process steps:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li> <p>The program starts by checking indicator <code>09</code>. If <code>09</code> is off (<code>N09</code>), it executes the <code>ONETIM</code> subroutine:</p> <ul> <li>Retrieves the current system date and time using the <code>TIME</code> operation, storing it in <code>TIMDAT</code> (12 digits).</li> <li>Extracts the time portion into <code>TIME</code> (6 digits) and the date portion into <code>DATE</code> (6 digits).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by <code>10000.01</code> to adjust for century handling.</li> <li>Sets the century prefix (<code>20</code> for 2000s) into <code>DATE8</code> (8-digit date field, e.g., <code>20YYMMDD</code>).</li> <li>Moves <code>DATYMD</code> into <code>DATE8</code> for consistent date formatting.</li> <li>Sets indicator <code>09</code> on to prevent re-execution of <code>ONETIM</code>.</li> </ul> </li> <li> <p>Main Processing Loop (EACH01 Subroutine):</p> </li> <li> <p>For each record in the <code>APPAY</code> file (processed with indicator <code>01</code>), the <code>EACH01</code> subroutine is executed:</p> <ul> <li>Builds a key (<code>KEY27</code>, 27 characters) for chaining to the <code>APTORCY</code> file:</li> <li>Copies the company number (<code>CONO</code>, positions 2-3) into the first part of <code>KEY27</code>.</li> <li>Copies the vendor number (<code>VEND</code>, positions 4-8) into <code>KEY25</code>.</li> <li>Copies the invoice description (<code>OPIN20</code>, positions 35-54) into <code>KEY20</code>.</li> <li>Combines <code>KEY20</code> and <code>KEY25</code> into <code>KEY27</code> for the full key.</li> <li>Chains to the <code>APTORCY</code> file using <code>KEY27</code> to locate the corresponding commission record.</li> <li>If a matching record is found (<code>N99</code>, i.e., not indicator <code>99</code> set):</li> <li>Converts the check date (<code>AXCKDT</code>) to an 8-digit format (<code>AXYMD8</code>, e.g., <code>20YYMMDD</code>) by multiplying by <code>10000.01</code> and prefixing with the century (<code>20</code>).</li> <li>Stores the gross amount (<code>OPGRAM</code>) in a temporary field (<code>AMT92</code>, 9.2 format).</li> <li>Writes an exception record to <code>APTORCY</code> using the <code>UPDATE</code> exception (see Output Specification below).</li> <li>If no matching record is found (<code>99</code> set), the record is skipped.</li> </ul> </li> <li> <p>Update Commission Table:</p> </li> <li> <p>The <code>UPDATE</code> exception in the Output Specification (<code>OAPTORCY E UPDATE</code>) updates the <code>APTORCY</code> file with:</p> <ul> <li>Invoice number (<code>OPINV#</code>, positions 207-226 from <code>APPAY</code>) to <code>ATINV</code> (positions 84-103).</li> <li>Gross amount (<code>AMT92</code>, derived from <code>OPGRAM</code>) to <code>ATAPMT</code> (positions 104-108, packed).</li> <li>Status (<code>ATSTAT</code>) set to <code>'P'</code> (paid, position 109).</li> <li>Check number (<code>ATCHK#</code>, positions 110-115, likely populated from <code>OPCKNO</code> in <code>APPAY</code>).</li> </ul> </li> <li> <p>Completion:</p> </li> <li>The program processes all <code>APPAY</code> records sequentially, updating matching <code>APTORCY</code> records.</li> <li>Once all records are processed, the program terminates, and control returns to the calling OCL program (<code>AP251.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#business-rules","title":"Business Rules","text":"<p>The RPG program enforces the following business rules based on its logic and context within the A/P system:</p> <ol> <li>Commission Record Matching:</li> <li>Matches payment records from <code>APPAY</code> to commission records in <code>APTORCY</code> using a composite key (<code>KEY27</code>) built from:<ul> <li>Company number (<code>CONO</code>).</li> <li>Vendor number (<code>VEND</code>).</li> <li>Invoice description (<code>OPIN20</code>, likely a truncated or formatted invoice number).</li> </ul> </li> <li> <p>Only updates <code>APTORCY</code> records that match the key; unmatched records are skipped.</p> </li> <li> <p>Payment Status Update:</p> </li> <li>Sets the commission record status (<code>ATSTAT</code>) to <code>'P'</code> (paid) when a payment is applied.</li> <li>Records the payment amount (<code>OPGRAM</code> from <code>APPAY</code>) in <code>ATAPMT</code> and the check number (<code>OPCKNO</code>) in <code>ATCHK#</code>.</li> <li> <p>Includes the invoice number (<code>OPINV#</code>) to link the payment to the commission record.</p> </li> <li> <p>Date Handling:</p> </li> <li>Uses century-aware date processing (prefixes <code>20</code> for 2000s) to format the check date (<code>AXCKDT</code>) into <code>AXYMD8</code> for consistency.</li> <li> <p>Relies on <code>Y2KCEN</code> (century field, set to <code>19</code> or <code>20</code>) from the User Data Structure (UDS) for date calculations.</p> </li> <li> <p>File Access:</p> </li> <li><code>APPAY</code> is processed sequentially as the primary input file (<code>IP</code>), ensuring all payment records are read.</li> <li> <p><code>APTORCY</code> is a keyed update file (<code>UF</code>, <code>EXTK</code> for external key), allowing random access and updates based on the composite key.</p> </li> <li> <p>No Error Output:</p> </li> <li> <p>The program does not generate error reports or logs for unmatched records (<code>99</code> set). It silently skips them, assuming they are not relevant to the commission table.</p> </li> <li> <p>Integration with A/P Process:</p> </li> <li>The program assumes <code>APPAY</code> contains valid payment data from the A/P check register process (<code>AP250</code>).</li> <li>Updates to <code>APTORCY</code> are part of the broader A/P workflow, ensuring commission records reflect payments made to vendors or agents.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (F-spec) section:</p> <ol> <li>APPAY (IP, 384 bytes, keyed, <code>DISK</code>):</li> <li>Primary input file, temporary payment file created by the main OCL program (<code>AP250.ocl36.txt</code>).</li> <li> <p>Contains payment details, including:</p> <ul> <li><code>CONO</code>: Company number (positions 2-3).</li> <li><code>VEND</code>: Vendor number (positions 4-8).</li> <li><code>OPGRAM</code>: Gross amount (packed, positions 18-23).</li> <li><code>OPDISC</code>: Discount (packed, positions 24-28).</li> <li><code>OPPPTD</code>: Partial paid to date (packed, positions 29-34).</li> <li><code>OPCKNO</code>: Check number (positions 91-96).</li> <li><code>OPPAID</code>: Payment status (position 97, e.g., <code>'P'</code> for prepaid).</li> <li><code>OPLPAM</code>: This payment amount (packed, positions 161-166).</li> <li><code>OPDSTK</code>: Discount already taken (packed, positions 167-171).</li> <li><code>OPSORN</code>: Sales order number (positions 281-286).</li> <li><code>OPINV#</code>: Invoice number (positions 207-226).</li> <li><code>OPIN20</code>: Invoice description (positions 35-54).</li> <li><code>AXCKDT</code>: Check date (positions 434-439, from UDS).</li> </ul> </li> <li> <p>APTORCY (UF, 211 bytes, keyed, <code>EXTK</code>, <code>DISK</code>):</p> </li> <li>Update file, commission master file.</li> <li> <p>Contains commission-related data, including:</p> <ul> <li><code>ATDEL</code>: Deletion flag (position 1).</li> <li><code>ATCO</code>: Company number (positions 2-3).</li> <li><code>ATCUST</code>: Customer number (positions 4-9).</li> <li><code>ATORD#</code>: Order number (positions 10-15).</li> <li><code>ATSRN#</code>: Serial number (positions 16-18).</li> <li><code>ATINV#</code>: Invoice number (positions 19-25).</li> <li><code>ATIVAM</code>: Invoice amount (packed, positions 26-30).</li> <li><code>ATINV8</code>: Invoice date (positions 31-38).</li> <li><code>ATSHD8</code>: Shipping date (positions 39-46).</li> <li><code>ATPROD</code>: Product code (positions 47-50).</li> <li><code>ATUM</code>: Unit of measure (positions 51-53).</li> <li><code>ATAMT</code>: Amount (packed, positions 54-56).</li> <li><code>ATPCT</code>: Percentage (packed, positions 57-58).</li> <li><code>ATVEND</code>: Vendor number (positions 59-63).</li> <li><code>ATHAND</code>: Handling code (positions 64-83).</li> <li><code>ATINV</code>: Invoice number (positions 84-103, updated).</li> <li><code>ATAPMT</code>: Payment amount (packed, positions 104-108, updated).</li> <li><code>ATSTAT</code>: Status (position 109, updated to <code>'P'</code>).</li> <li><code>ATCHK#</code>: Check number (positions 110-115, updated).</li> </ul> </li> <li> <p>UDS (User Data Structure):</p> </li> <li>Provides additional fields, including:<ul> <li><code>AXCKDT</code>: Check date (positions 434-439).</li> <li><code>Y2KCEN</code>: Century indicator (positions 509-510, e.g., <code>19</code> or <code>20</code>).</li> <li><code>Y2KCMP</code>: Company-related century field (positions 511-512).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP251</code> RPG program does not call any external programs. It is self-contained, using two subroutines (<code>ONETIM</code> for initialization and <code>EACH01</code> for processing) to handle all logic. The program is invoked by the <code>AP251.ocl36.txt</code> OCL script, which loads and runs it as part of the A/P process.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#summary","title":"Summary","text":"<p>The <code>AP251</code> RPG program is a focused component of the A/P system, designed to update the commission table (<code>APTORCY</code>) with payment data from the <code>APPAY</code> file. Its key functions are:</p> <ul> <li>Process Steps:</li> <li>Initializes date and time fields (<code>ONETIM</code> subroutine).</li> <li>Processes each <code>APPAY</code> record, matches it to <code>APTORCY</code> using a composite key (company, vendor, invoice description), and updates commission records with payment details (invoice number, amount, status, check number).</li> <li> <p>Writes updated records to <code>APTORCY</code>.</p> </li> <li> <p>Business Rules:</p> </li> <li>Matches payments to commission records using company number, vendor number, and invoice description.</li> <li>Updates commission records with payment status (<code>'P'</code>), amount, and check number.</li> <li>Handles century-aware date formatting for check dates.</li> <li>Skips unmatched records without generating errors.</li> <li> <p>Operates in a shared access environment for concurrent processing.</p> </li> <li> <p>Tables Used:</p> </li> <li><code>APPAY</code>: Temporary payment file (input).</li> <li><code>APTORCY</code>: Commission master file (update).</li> <li> <p><code>UDS</code>: User Data Structure for date and century fields.</p> </li> <li> <p>External Programs Called: None.</p> </li> </ul> <p>The program integrates with the broader A/P process by processing payment data generated by <code>AP250</code> and updating the commission table to reflect payments made to vendors or agents. If you have additional details (e.g., the structure of <code>APTORCY</code> or specific commission logic), I can provide further analysis. Please let me know if you need clarification or more details!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/","title":"AP255 RPG","text":"<p>The provided RPG program, <code>AP255.rpg36.txt</code>, is executed by the main OCL program (<code>AP250.ocl36.txt</code>) within an IBM System/36 or AS/400 Accounts Payable (A/P) system. Its primary purpose is to generate a Cash Disbursements Journal and summarize A/P transactions, producing a report and updating a general ledger file. Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the RPG code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#process-steps-of-the-ap255-rpg-program","title":"Process Steps of the AP255 RPG Program","text":"<p>The <code>AP255</code> RPG program processes sorted cash disbursements journal records from <code>APCDJR</code>, summarizes A/P transactions, and generates a formatted report (<code>APPRINT</code>) while updating a temporary general ledger file (<code>TEMGEN</code>). Here is a detailed breakdown of the process steps:</p> <ol> <li>Initialization (Level 4 - Company/Bank G/L Break):</li> <li> <p>At the company or bank G/L level (<code>L4</code> indicator), the program initializes key variables:</p> <ul> <li>Retrieves the current system date and time using the <code>TIME</code> operation, storing it in <code>TIMDAT</code> (12 digits).</li> <li>Extracts the time portion into <code>TIME</code> (6 digits) and the date portion into <code>DATE</code> (6 digits).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by <code>10000.01</code> to adjust for century handling.</li> <li>Sets the century prefix (<code>20</code> for 2000s) into <code>DATE8</code> (8-digit date field, e.g., <code>20YYMMDD</code>) and moves <code>DATYMD</code> into <code>DATE8</code>.</li> <li>Initializes the page number (<code>PAGE</code>) to 0.</li> <li>Sets a separator line (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>CDCONO</code>) to retrieve company details (e.g., <code>ACNAME</code> for company name).</li> <li>Initializes debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals to 0 for journal balancing.</li> </ul> </li> <li> <p>Period/Year Validation:</p> </li> <li> <p>Checks if the year/period field (<code>CDYYPD</code>) is non-zero (<code>N99</code>).</p> <ul> <li>If non-zero, sets indicators <code>98</code> and <code>99</code> to enable printing of the period/year (<code>CDPD</code>, <code>CDPDYY</code>) in the report header.</li> </ul> </li> <li> <p>Record Processing Loop:</p> </li> <li> <p>Processes each record in the <code>APCDJR</code> file (primary input, indicator <code>01</code>):</p> <ul> <li>Identifies the transaction type (<code>CDCORD</code>):</li> <li>If <code>CDCORD = 'D'</code>, sets indicator <code>30</code> (debit transaction).</li> <li>Identifies the journal entry type (<code>CDTYPE</code>):</li> <li>If <code>CDTYPE = 'AP      '</code>, sets indicator <code>20</code> to indicate an A/P transaction that requires summarization.</li> <li>Converts the check date (<code>CDCKDT</code>) to an 8-digit format (<code>CYMD</code>, e.g., <code>20YYMMDD</code>):</li> <li>Multiplies <code>CDCKDT</code> by <code>10000.01</code> to get <code>YMD</code> (6 digits).</li> <li>Extracts the year (<code>YY</code>) and compares it to <code>Y2KCMP</code> (company century threshold, e.g., <code>80</code>).</li> <li>If <code>YY &gt;= Y2KCMP</code>, uses <code>Y2KCEN</code> (e.g., <code>19</code> or <code>20</code>) as the century (<code>CN</code>).</li> <li>If <code>YY &lt; Y2KCMP</code>, increments <code>Y2KCEN</code> by 1 (e.g., <code>20</code> becomes <code>21</code>).</li> <li>Combines <code>CN</code> and <code>YMD</code> into <code>CYMD</code> for reporting.</li> <li>Accumulates the transaction amount (<code>CDAMT</code>) into <code>L1AMT</code> (level 1 amount) for summarization.</li> </ul> </li> <li> <p>Journal Entry Processing (JRNL Subroutine):</p> </li> <li> <p>The <code>JRNL</code> subroutine is called for each non-summarized record (<code>N20</code>) and for summarized A/P records at the level 1 break (<code>L1</code> and <code>20</code>):</p> <ul> <li>Increments a journal reference number (<code>JRREF#</code>) for each entry.</li> <li>Sets the credit/debit code (<code>CORD</code>) based on <code>CDCORD</code>:</li> <li>If <code>L1AMT</code> is negative (<code>10</code> set), reverses the sign of <code>L1AMT</code> and adjusts <code>CORD</code>:<ul> <li>If <code>30</code> (debit), sets <code>CORD = 'C'</code> (credit).</li> <li>If not <code>30</code>, sets <code>CORD = 'D'</code> (debit).</li> </ul> </li> <li>Accumulates amounts:</li> <li>If <code>CORD = 'D'</code> (debit, <code>11</code> set), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>If <code>CORD \u2260 'D'</code> (credit, <code>N11</code>), adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> <li>Moves <code>L1AMT</code> to <code>JRAMT</code> (journal amount) and resets <code>L1AMT</code> to 0.</li> </ul> </li> <li> <p>Output to TEMGEN (General Ledger File):</p> </li> <li>For non-summarized records (<code>N20</code>):<ul> <li>Writes a detailed journal entry to <code>TEMGEN</code> with:</li> <li>Record type <code>'A'</code> (active).</li> <li>Company number (<code>CDCONO</code>).</li> <li>G/L number (<code>CDGLNO</code>).</li> <li>Journal number (<code>CDJRNL</code>).</li> <li>Reference number (<code>JRREF#</code>).</li> <li>Credit/debit code (<code>CORD</code>).</li> <li>Check number (<code>CDCHEK</code>).</li> <li>Description (<code>CDDESC</code>).</li> <li>Date (<code>YMD</code>).</li> <li>Amount (<code>JRAMT</code>, packed).</li> <li>Vendor name (<code>CDNAME</code>).</li> <li>Century-adjusted date (<code>CYMD</code>).</li> </ul> </li> <li> <p>For summarized A/P records (<code>L1</code> and <code>20</code>):</p> <ul> <li>Writes a summarized journal entry to <code>TEMGEN</code> with:</li> <li>Record type <code>'A'</code>.</li> <li>Company number (<code>CDCONO</code>).</li> <li>G/L number (<code>CDGLNO</code>).</li> <li>Journal number (<code>CDJRNL</code>).</li> <li>Reference number (<code>JRREF#</code>).</li> <li>Credit/debit code (<code>CORD</code>).</li> <li>Check date (<code>CDCKDT</code>).</li> <li>Fixed description <code>'-SUMMARIZED A/P         '</code>.</li> <li>Date (<code>YMD</code>).</li> <li>Amount (<code>JRAMT</code>, packed).</li> <li>Century-adjusted date (<code>CYMD</code>).</li> </ul> </li> <li> <p>Output to Cash Disbursements Journal Report (APPRINT):</p> </li> <li>At the company level (<code>L4</code>):<ul> <li>Prints report headers with:</li> <li>Company name (<code>ACNAME</code>).</li> <li>Page number (<code>PAGE</code>).</li> <li>Date (<code>DATE</code>, formatted as <code>MMDDYY</code>).</li> <li>Wire transfer description (<code>WIREDS</code>, e.g., <code>'WT*** WIRE TRANSFER ***'</code>).</li> <li>Title <code>'CASH DISBURSEMENTS JOURNAL'</code>.</li> <li>Time (<code>TIME</code>, formatted as <code>HH.MM.SS</code>).</li> <li>Journal number (<code>CDJRNL</code>).</li> <li>Check date (<code>CDCKDTY</code>).</li> <li>Period/year (<code>CDPD</code>, <code>CDPDYY</code>) if <code>98</code> is set.</li> <li>Column headings for journal reference, check number, description, vendor name, and debit/credit amounts with G/L numbers.</li> </ul> </li> <li>For each non-summarized record (<code>01</code> and <code>N20</code>):<ul> <li>Prints detail lines with:</li> <li>Journal number (<code>CDJRNL</code>).</li> <li>Reference number (<code>JRREF#</code>).</li> <li>Check number (<code>CDCHEK</code>).</li> <li>Description (<code>CDDESC</code>).</li> <li>Vendor name (<code>CDNAME</code>).</li> <li>G/L number (<code>CDGLNO</code>) and amount (<code>JRAMT</code>) in debit (<code>11</code>) or credit (<code>N11</code>) columns.</li> </ul> </li> <li>For summarized A/P records (<code>L1</code> and <code>20</code>):<ul> <li>Prints summarized lines with:</li> <li>Journal number (<code>CDJRNL</code>).</li> <li>Reference number (<code>JRREF#</code>).</li> <li>Check date (<code>CDCKDTY</code>).</li> <li>Fixed description <code>'-SUMMARIZED A/P         '</code>.</li> <li>G/L number (<code>CDGLNO</code>) and amount (<code>JRAMT</code>) in debit (<code>11</code>) or credit (<code>N11</code>) columns.</li> </ul> </li> <li> <p>At the end of the company level (<code>L4</code>, total time <code>T 2</code>):</p> <ul> <li>Prints journal totals with:</li> <li><code>'JOURNAL TOTALS'</code>.</li> <li>Total debits (<code>L4DR</code>) and credits (<code>L4CR</code>).</li> </ul> </li> <li> <p>Completion:</p> </li> <li>Processes all <code>APCDJR</code> records, writing to <code>TEMGEN</code> and <code>APPRINT</code> as needed.</li> <li>Terminates, returning control to the main OCL program (<code>AP250.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules based on its logic and context within the A/P system:</p> <ol> <li>Transaction Type Handling:</li> <li>Processes journal entries based on <code>CDCORD</code>:<ul> <li><code>'D'</code>: Debit transaction (<code>30</code> set).</li> <li>Other values (e.g., <code>'C'</code>): Credit transaction.</li> </ul> </li> <li> <p>Adjusts negative amounts by reversing the sign and switching the credit/debit code (<code>CORD</code>):</p> <ul> <li>Negative debit becomes credit (<code>CORD = 'C'</code>).</li> <li>Negative credit becomes debit (<code>CORD = 'D'</code>).</li> </ul> </li> <li> <p>A/P Summarization:</p> </li> <li> <p>Summarizes A/P transactions (<code>CDTYPE = 'AP      '</code>, <code>20</code> set) at the level 1 break (<code>L1</code>), consolidating multiple A/P entries into a single journal entry with the description <code>'-SUMMARIZED A/P         '</code>.</p> </li> <li> <p>Journal Balancing:</p> </li> <li>Accumulates debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals at the company level (<code>L4</code>) to ensure journal entries balance.</li> <li> <p>Prints totals in the report to verify debit and credit amounts.</p> </li> <li> <p>Date Handling:</p> </li> <li>Uses century-aware date processing:<ul> <li>Compares the year (<code>YY</code>) from <code>CDCKDT</code> to <code>Y2KCMP</code> (company century threshold).</li> <li>Assigns the century (<code>Y2KCEN</code> or <code>Y2KCEN + 1</code>) to create <code>CYMD</code> (e.g., <code>20YYMMDD</code>).</li> </ul> </li> <li> <p>Includes both raw (<code>YMD</code>) and century-adjusted (<code>CYMD</code>) dates in <code>TEMGEN</code> output.</p> </li> <li> <p>Period/Year Reporting:</p> </li> <li> <p>If the year/period (<code>CDYYPD</code>) is non-zero, includes the period (<code>CDPD</code>) and year (<code>CDPDYY</code>) in the report header (e.g., <code>'PERIOD XX-XX'</code>).</p> </li> <li> <p>General Ledger Integration:</p> </li> <li>Writes journal entries to <code>TEMGEN</code> for integration with the general ledger system, including both detailed and summarized entries.</li> <li> <p>Uses a consistent format with record type <code>'A'</code> (active), company number, G/L number, journal number, reference number, and amount.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Generates a formatted Cash Disbursements Journal (<code>APPRINT</code>) with headers, detail lines, and totals.</li> <li>Includes debit and credit columns with G/L numbers for clarity.</li> <li> <p>Supports wire transfer descriptions (<code>WIREDS</code>) for context.</p> </li> <li> <p>File Access:</p> </li> <li><code>APCDJR</code> is processed sequentially as the primary input file (<code>IP</code>).</li> <li><code>APCONT</code> is accessed randomly (<code>IC</code>, keyed) for company details.</li> <li><code>TEMGEN</code> is an output file for general ledger entries.</li> <li><code>AP255S</code> is a table file, likely used for temporary storage or control data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (F-spec) section:</p> <ol> <li>APCDJR (IP, 128 bytes, keyed, <code>DISK</code>):</li> <li>Primary input file, contains sorted cash disbursements journal entries from the main OCL process (sorted by <code>#GSORT</code> in <code>AP250.ocl36.txt</code>).</li> <li> <p>Fields include:</p> <ul> <li><code>CDDEL</code>: Deletion flag (position 1, <code>'D'</code> for delete).</li> <li><code>CDCONO</code>: Company number (positions 2-3, <code>L4</code>).</li> <li><code>CDJRNL</code>: Journal number (positions 4-7).</li> <li><code>CDCORD</code>: Credit/debit code (position 12, <code>L3</code>, e.g., <code>'C'</code>, <code>'D'</code>).</li> <li><code>CDGLNO</code>: G/L number (positions 13-20, <code>L1</code>).</li> <li><code>CDCHEK</code>: Check number (positions 21-26).</li> <li><code>CDDESC</code>: Description (positions 27-50).</li> <li><code>CDCKDT</code>: Check date (positions 51-56).</li> <li><code>CDAMT</code>: Amount (packed, positions 57-62).</li> <li><code>CDNAME</code>: Vendor name (positions 63-92).</li> <li><code>CDSEQ#</code>: Sequence number (positions 97-105).</li> <li><code>CDTYPE</code>: Transaction type (positions 106-115, <code>L2</code>, e.g., <code>'AP      '</code>, <code>'CASH      '</code>, <code>'DISC      '</code>).</li> <li><code>CDYYPD</code>: Year/period (positions 116-119).</li> <li><code>CDPDYY</code>: Year (positions 116-117).</li> <li><code>CDPD</code>: Period (positions 118-119).</li> </ul> </li> <li> <p>AP255S (IR, 3 bytes, keyed, <code>EDISK</code>):</p> </li> <li>Internal table file, likely used for temporary storage or control data during processing.</li> <li> <p>Associated with <code>APCDJR</code> via the <code>E</code> specification (<code>E AP255S APCDJR</code>).</p> </li> <li> <p>APCONT (IC, 256 bytes, keyed, <code>DISK</code>):</p> </li> <li>Control file, accessed randomly to retrieve company details.</li> <li> <p>Fields include:</p> <ul> <li><code>ACNAME</code>: Company name (positions 4-33).</li> </ul> </li> <li> <p>TEMGEN (O, 128 bytes, <code>DISK</code>):</p> </li> <li>Output file for general ledger entries.</li> <li> <p>Fields include:</p> <ul> <li>Record type (<code>'A'</code>, position 1).</li> <li>Company number (<code>CDCONO</code>, positions 2-3).</li> <li>G/L number (<code>CDGLNO</code>, positions 4-11).</li> <li>Journal number (<code>CDJRNL</code>, positions 12-15).</li> <li>Reference number (<code>JRREF#</code>, positions 16-19).</li> <li>Credit/debit code (<code>CORD</code>, position 20).</li> <li>Check number (<code>CDCHEK</code>) or check date (<code>CDCKDT</code>) for summarized entries.</li> <li>Description (<code>CDDESC</code> or <code>'-SUMMARIZED A/P         '</code>, positions 27-50).</li> <li>Date (<code>YMD</code>, positions 51-56).</li> <li>Amount (<code>JRAMT</code>, packed, positions 57-62).</li> <li>Vendor name (<code>CDNAME</code>, positions 63-92).</li> <li>Century-adjusted date (<code>CYMD</code>, positions 93-100).</li> </ul> </li> <li> <p>APPRINT (O, 132 bytes, <code>PRINTER</code>):</p> </li> <li>Output file for the Cash Disbursements Journal report.</li> <li> <p>Includes headers, detail lines, summarized A/P entries, and journal totals.</p> </li> <li> <p>UDS (User Data Structure):</p> </li> <li>Provides additional fields:<ul> <li><code>WIREDS</code>: Wire transfer description (positions 200-220, e.g., <code>'WT*** WIRE TRANSFER ***'</code>).</li> <li><code>Y2KCEN</code>: Century indicator (positions 509-510, e.g., <code>19</code> or <code>20</code>).</li> <li><code>Y2KCMP</code>: Company century threshold (positions 511-512, e.g., <code>80</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP255</code> RPG program does not call any external programs. It is self-contained, using the <code>JRNL</code> subroutine to handle journal entry processing. The program is invoked by the main OCL program (<code>AP250.ocl36.txt</code>) after sorting data with <code>#GSORT</code>.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#summary","title":"Summary","text":"<p>The <code>AP255</code> RPG program is a critical component of the A/P system, responsible for generating the Cash Disbursements Journal and preparing general ledger entries. Its key functions are:</p> <ul> <li>Process Steps:</li> <li>Initializes company-level data and report headers (<code>L4</code> break).</li> <li>Processes <code>APCDJR</code> records, handling debit/credit codes and summarizing A/P transactions.</li> <li>Converts dates to century-aware format.</li> <li>Writes detailed and summarized journal entries to <code>TEMGEN</code>.</li> <li> <p>Generates a formatted Cash Disbursements Journal report (<code>APPRINT</code>) with headers, details, and totals.</p> </li> <li> <p>Business Rules:</p> </li> <li>Handles debit (<code>'D'</code>) and credit (<code>'C'</code>) transactions, adjusting negative amounts.</li> <li>Summarizes A/P transactions (<code>CDTYPE = 'AP      '</code>) into a single entry.</li> <li>Maintains journal balance with debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals.</li> <li>Supports century-aware date processing.</li> <li>Includes period/year in the report if applicable.</li> <li> <p>Writes standardized general ledger entries to <code>TEMGEN</code>.</p> </li> <li> <p>Tables Used:</p> </li> <li><code>APCDJR</code>: Primary input, cash disbursements journal entries.</li> <li><code>AP255S</code>: Internal table file.</li> <li><code>APCONT</code>: Company control file.</li> <li><code>TEMGEN</code>: General ledger output file.</li> <li><code>APPRINT</code>: Cash Disbursements Journal report.</li> <li> <p><code>UDS</code>: User Data Structure for additional fields.</p> </li> <li> <p>External Programs Called: None.</p> </li> </ul> <p>The program integrates with the broader A/P process by processing sorted journal entries from <code>AP250</code> and preparing data for general ledger integration. If you need further details or analysis (e.g., specific report formats or <code>TEMGEN</code> integration), please let me know!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/","title":"AP256 OCL","text":"<p>The provided OCL program, <code>AP256.ocl36.txt</code>, is a component of an IBM System/36 or AS/400 Accounts Payable (A/P) system, called from the main OCL program (<code>AP250.ocl36.txt</code>). Its purpose is to process temporary data files related to A/P transactions and generate multiple reports. Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the provided OCL code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/#process-steps-of-the-ap256-ocl-program","title":"Process Steps of the AP256 OCL Program","text":"<p>The <code>AP256.ocl36.txt</code> OCL program is conditionally executed if a specific temporary file (<code>?9?APDT?WS?</code>) exists and has a non-zero size, as checked in the main OCL program (<code>AP250.ocl36.txt</code>). It involves two programs, <code>AP256A</code> and <code>AP256</code>, to process data and produce reports. Here are the detailed process steps:</p> <ol> <li>Conditional File Creation:</li> <li>Check for File Existence: The program checks if the temporary file <code>?9?APDT?WS?</code> exists and has a non-zero size (this check is performed in <code>AP250.ocl36.txt</code> before reaching this block).</li> <li>Build Indexed File:<ul> <li>If the condition <code>DATAF1-?9?APDT?WS?C</code> is true (indicating the file exists or needs creation), the <code>BLDFILE</code> command creates an indexed file:</li> <li>File: <code>?9?APDT?WS?C</code>.</li> <li>Type: Indexed (<code>I</code>).</li> <li>Capacity: 500 records.</li> <li>Record length: 10 bytes.</li> <li>Key fields: Positions 2-7 (likely company and vendor numbers or similar identifiers).</li> <li>File type: <code>DFILE</code> (data file).</li> </ul> </li> <li> <p>This file (<code>APDTWSC</code>) is used for temporary storage of processed data.</p> </li> <li> <p>Execute AP256A Program:</p> </li> <li>Load Program: The <code>LOAD AP256A</code> command loads the <code>AP256A</code> program.</li> <li>File Assignments:<ul> <li>APDTWS (<code>?9?APDT?WS?</code>): Temporary data file, likely containing raw A/P transaction data.</li> <li>APDTWSC (<code>?9?APDT?WS?C</code>, <code>RETAIN-T</code>, <code>RECORDS-50</code>): Indexed temporary file created in the previous step, retained temporarily with a capacity of 50 records.</li> <li>APVNFMX (<code>?9?APVNFMX</code>, <code>DISP-SHR</code>): Vendor master extension file, accessed in shared mode for reference data.</li> </ul> </li> <li> <p>Run Program: The <code>RUN</code> command executes <code>AP256A</code>, which likely processes <code>APDTWS</code>, populates <code>APDTWSC</code> with indexed data, and uses <code>APVNFMX</code> for vendor-related information (e.g., extended vendor attributes or payment terms).</p> </li> <li> <p>Execute AP256 Program:</p> </li> <li>Load Program: The <code>LOAD AP256</code> command loads the <code>AP256</code> program.</li> <li>File Assignments:<ul> <li>APDTWS (<code>?9?APDT?WS?</code>): Same temporary data file as in <code>AP256A</code>.</li> <li>APDTWSC (<code>?9?APDT?WS?C</code>, <code>DISP-SHR</code>): Indexed temporary file, now accessed in shared mode.</li> <li>APVEND (<code>?9?APVEND</code>, <code>DISP-SHR</code>): Primary vendor master file, containing vendor details (e.g., name, address).</li> <li>APCONT (<code>?9?APCONT</code>, <code>DISP-SHR</code>): A/P control file, containing company-level control data (e.g., company name, next check number).</li> <li>APVNFMX (<code>?9?APVNFMX</code>, <code>DISP-SHR</code>): Vendor master extension file, reused for additional vendor data.</li> </ul> </li> <li>Printer Overrides:<ul> <li>Overrides output queues for four report files (<code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code>) based on the condition <code>?9?/G</code>:</li> <li>If <code>?9?/G</code> is true, directs reports to <code>QUSRSYS/APACHOUTQ</code> (standard A/P output queue).</li> <li>If <code>?9?/G</code> is false, directs reports to <code>QUSRSYS/TESTOUTQ</code> (test output queue).</li> </ul> </li> <li> <p>Run Program: The <code>RUN</code> command executes <code>AP256</code>, which processes the temporary files (<code>APDTWS</code>, <code>APDTWSC</code>), references vendor and control data (<code>APVEND</code>, <code>APCONT</code>, <code>APVNFMX</code>), and generates up to four reports (<code>REPORT1</code> to <code>REPORT4</code>).</p> </li> <li> <p>Completion:</p> </li> <li>After <code>AP256A</code> and <code>AP256</code> complete, the OCL script ends, and control returns to the main OCL program (<code>AP250.ocl36.txt</code>).</li> <li>The temporary files (<code>APDTWS</code>, <code>APDTWSC</code>) are later deleted by <code>GSDELETE</code> commands in the main OCL program.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/#business-rules","title":"Business Rules","text":"<p>The OCL script itself is minimal, so business rules are inferred from its structure and context within the A/P system:</p> <ol> <li>Conditional Execution:</li> <li>The program only runs if the temporary file <code>?9?APDT?WS?</code> exists and has data (checked in <code>AP250.ocl36.txt</code>).</li> <li> <p>The creation of <code>APDTWSC</code> is conditional on the existence of <code>DATAF1-?9?APDT?WS?C</code>, ensuring resources are allocated only when necessary.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Creates an indexed file (<code>APDTWSC</code>) with a small record length (10 bytes) and a key spanning positions 2-7, suggesting it stores summarized or indexed A/P transaction data (e.g., company and vendor keys).</li> <li> <p><code>APDTWSC</code> is initially created with a capacity of 500 records but retained with only 50 records in <code>AP256A</code>, indicating a compact dataset for processing.</p> </li> <li> <p>Shared File Access:</p> </li> <li> <p>Files <code>APVNFMX</code>, <code>APVEND</code>, and <code>APCONT</code> are opened with shared access (<code>DISP-SHR</code>), supporting a multi-user environment where other processes may access these files concurrently.</p> </li> <li> <p>Report Output Control:</p> </li> <li>Directs reports to either a production output queue (<code>QUSRSYS/APACHOUTQ</code>) or a test queue (<code>QUSRSYS/TESTOUTQ</code>) based on the <code>?9?/G</code> condition, allowing for testing or production environments.</li> <li> <p>Supports up to four reports (<code>REPORT1</code> to <code>REPORT4</code>), suggesting multiple types of output (e.g., vendor payment summaries, transaction details, or reconciliation reports).</p> </li> <li> <p>Dependency on Main OCL:</p> </li> <li>Relies on the main OCL program (<code>AP250.ocl36.txt</code>) to provide the temporary file <code>APDTWS</code> and trigger execution.</li> <li> <p>Assumes <code>APVNFMX</code>, <code>APVEND</code>, and <code>APCONT</code> are populated with valid vendor and control data.</p> </li> <li> <p>No User Interaction:</p> </li> <li> <p>The script runs automatically without prompts, indicating it is part of an automated A/P workflow, possibly triggered in auto mode (<code>?2?/AUTO</code> in <code>AP250.ocl36.txt</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>No explicit error handling is included in the OCL script, so errors (e.g., missing files, invalid data) are assumed to be handled within the <code>AP256A</code> and <code>AP256</code> programs.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files:</p> <ol> <li>APDTWS (<code>?9?APDT?WS?</code>):</li> <li>Temporary data file, likely containing raw A/P transaction data generated by prior steps in the main OCL program.</li> <li> <p>Used as input by both <code>AP256A</code> and <code>AP256</code>.</p> </li> <li> <p>APDTWSC (<code>?9?APDT?WS?C</code>, <code>RETAIN-T</code>, <code>RECORDS-50</code> in <code>AP256A</code>, <code>DISP-SHR</code> in <code>AP256</code>):</p> </li> <li>Indexed temporary file, created with 500 records and a 10-byte record length, with a key in positions 2-7.</li> <li> <p>Populated by <code>AP256A</code> and used as input/output by <code>AP256</code>.</p> </li> <li> <p>APVNFMX (<code>?9?APVNFMX</code>, <code>DISP-SHR</code>):</p> </li> <li>Vendor master extension file, containing additional vendor data (e.g., extended attributes, payment terms).</li> <li> <p>Accessed in shared mode by both <code>AP256A</code> and <code>AP256</code>.</p> </li> <li> <p>APVEND (<code>?9?APVEND</code>, <code>DISP-SHR</code>):</p> </li> <li>Primary vendor master file, containing vendor details (e.g., name, address, balance).</li> <li> <p>Used by <code>AP256</code> for reference data.</p> </li> <li> <p>APCONT (<code>?9?APCONT</code>, <code>DISP-SHR</code>):</p> </li> <li>A/P control file, containing company-level data (e.g., company name, next check number).</li> <li>Used by <code>AP256</code> for reference data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs:</p> <ol> <li>AP256A:</li> <li>Loaded and executed to process <code>APDTWS</code>, populate <code>APDTWSC</code>, and use <code>APVNFMX</code> for vendor data.</li> <li> <p>Likely an RPG program that performs initial data processing or indexing.</p> </li> <li> <p>AP256:</p> </li> <li>Loaded and executed to process <code>APDTWS</code> and <code>APDTWSC</code>, reference <code>APVEND</code>, <code>APCONT</code>, and <code>APVNFMX</code>, and generate reports (<code>REPORT1</code> to <code>REPORT4</code>).</li> <li>Likely an RPG program that produces detailed A/P reports.</li> </ol> <p>No other external programs are called by this OCL script.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20OCL/#summary","title":"Summary","text":"<p>The <code>AP256.ocl36.txt</code> OCL program is a conditional component of the A/P system, responsible for processing temporary transaction data and generating reports. Its key functions are:</p> <ul> <li>Process Steps:</li> <li>Conditionally creates an indexed temporary file (<code>APDTWSC</code>).</li> <li>Executes <code>AP256A</code> to process <code>APDTWS</code> and populate <code>APDTWSC</code> using <code>APVNFMX</code>.</li> <li> <p>Executes <code>AP256</code> to process <code>APDTWS</code> and <code>APDTWSC</code>, reference <code>APVEND</code> and <code>APCONT</code>, and generate up to four reports directed to production or test output queues.</p> </li> <li> <p>Business Rules:</p> </li> <li>Runs only if <code>APDT?WS?</code> exists with data.</li> <li>Creates and uses a compact indexed file (<code>APDTWSC</code>) for efficient processing.</li> <li>Supports shared file access for multi-user environments.</li> <li>Directs reports to production or test queues based on the <code>?9?/G</code> condition.</li> <li> <p>Integrates with the main OCL program for automated A/P processing.</p> </li> <li> <p>Tables Used:</p> </li> <li><code>APDTWS</code>: Temporary transaction data file.</li> <li><code>APDTWSC</code>: Indexed temporary file.</li> <li><code>APVNFMX</code>: Vendor master extension file.</li> <li><code>APVEND</code>: Primary vendor master file.</li> <li> <p><code>APCONT</code>: A/P control file.</p> </li> <li> <p>External Programs Called:</p> </li> <li><code>AP256A</code>: Processes temporary data and populates <code>APDTWSC</code>.</li> <li><code>AP256</code>: Generates reports using temporary and master files.</li> </ul> <p>The program is tightly integrated with the main OCL program (<code>AP250.ocl36.txt</code>) and relies on prior steps to provide valid data in <code>APDTWS</code>. If you have the RPG source code for <code>AP256A</code> or <code>AP256</code>, or additional details about the reports or <code>APDTWS</code> structure, I can provide a deeper analysis of the processing logic. Please let me know if you need further clarification!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/","title":"AP256 RPG","text":"<p>The provided RPG program, <code>AP256.rpg36.txt</code>, is executed by the OCL program <code>AP256.ocl36.txt</code>, which is called from the main OCL program (<code>AP250.ocl36.txt</code>) within an IBM System/36 or AS/400 Accounts Payable (A/P) system. Its purpose is to generate vendor payment detail reports for ACH (Automated Clearing House) vendors, with output directed to four spool files (<code>REPORT1</code> to <code>REPORT4</code>) that are emailed to vendors. Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the RPG code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#process-steps-of-the-ap256-rpg-program","title":"Process Steps of the AP256 RPG Program","text":"<p>The <code>AP256</code> RPG program processes temporary A/P transaction data (<code>APDTWS</code> and <code>APDTWSC</code>), retrieves vendor and company information, and generates up to four reports (<code>REPORT1</code> to <code>REPORT4</code>) containing payment details for ACH vendors, formatted for emailing. Here is a detailed breakdown of the process steps:</p> <ol> <li>Initialization (Level 2 - Company Break):</li> <li> <p>At the company level (<code>L2</code>, based on <code>ADCO</code>):</p> <ul> <li>Retrieves the current system date and time using the <code>TIME</code> operation, storing it in <code>TIMDAT</code> (12 digits).</li> <li>Extracts the date portion into <code>DATE</code> (6 digits) and converts it to a year-month-day format (<code>DATYMD</code>) by multiplying by <code>10000.01</code>.</li> <li>Sets the century prefix (<code>20</code> for 2000s) into <code>DATE8</code> (8-digit date, e.g., <code>20YYMMDD</code>) and moves <code>DATYMD</code> into <code>DATE8</code>.</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>ADCO</code>) to retrieve the company name (<code>ACNAME</code>).</li> <li>Initializes the page number (<code>PAGE</code>) to 0 and a separator line (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> </ul> </li> <li> <p>Vendor Processing (Level 1 - Vendor Break):</p> </li> <li> <p>At the vendor level (<code>L1</code>, based on <code>ADVEND</code>):</p> <ul> <li>Chains to the <code>APVEND</code> file using the company/vendor number (<code>ADCOVN</code>) to retrieve vendor details (e.g., <code>VNNAME</code>, <code>VNADD1</code> to <code>VNADD4</code>, <code>VNZIP5</code>, <code>VNZPX4</code>).</li> <li>Chains to the <code>APDTWSC</code> file to retrieve the ACH transaction count (<code>ACECNT</code>) for the vendor.</li> <li>Chains to the <code>APVNFMX</code> file up to four times to retrieve email addresses (<code>AMEMLA</code>) for ACH transactions (<code>AMFMTY = 'ACHE'</code>):</li> <li>Stores email addresses in <code>EMALP1</code> to <code>EMALP4</code> for use in <code>REPORT1</code> to <code>REPORT4</code>.</li> <li>Initializes totals for invoice amount (<code>L1INV$M</code>), discount (<code>L1DIS$M</code>), and payment (<code>L1PYM$M</code>) to zero.</li> <li>Sets indicator <code>60</code> based on the vendor type (<code>VNCAID</code>):</li> <li>If <code>VNCAID \u2260 'CRUDE'</code>, <code>60</code> is off, using standard messages (<code>MSG,1</code> to <code>MSG,3</code>).</li> <li>If <code>VNCAID = 'CRUDE'</code>, <code>60</code> is on, using crude-specific messages (<code>MSG,4</code> to <code>MSG,6</code>).</li> </ul> </li> <li> <p>Transaction Processing (Indicator 01):</p> </li> <li> <p>For each record in the <code>APDTWS</code> file (primary input, indicator <code>01</code>):</p> <ul> <li>Converts the payment date (<code>ADDATE</code>) to an 8-digit format (<code>KYCKDTY</code>, e.g., <code>MMDDYYYY</code>) using century-aware logic (<code>Y2KCEN</code>).</li> <li>Formats monetary fields for reporting:</li> <li>Invoice amount (<code>ADINV$</code>) to <code>ADINV$M</code>.</li> <li>Discount amount (<code>ADDISC</code>) to <code>ADDISCM</code>.</li> <li>Payment amount (<code>ADLPAM</code>) to <code>ADPYM$M</code>.</li> <li>Accumulates totals at the vendor level (<code>L1</code>):</li> <li>Adds <code>ADINV$</code> to <code>L1INV$M</code>.</li> <li>Adds <code>ADDISC</code> to <code>L1DIS$M</code>.</li> <li>Adds <code>ADLPAM</code> to <code>L1PYM$M</code>.</li> </ul> </li> <li> <p>Report Generation (REPORT1 to REPORT4):</p> </li> <li> <p>Generates four reports (<code>REPORT1</code> to <code>REPORT4</code>), each directed to a different spool file (<code>OF</code>, <code>OG</code>, <code>OA</code>, <code>OB</code>) and potentially emailed to different vendor email addresses (<code>EMALP1</code> to <code>EMALP4</code>):</p> <ul> <li>Headers (Lines 06-28):</li> <li>Prints at the vendor level (<code>L1</code>, lines 52/53):<ul> <li>Current date (<code>UDATE</code>, formatted as <code>MMDDYY</code>).</li> <li>Company number (<code>ADCO</code>) and vendor number (<code>ADVEND</code>).</li> <li>Vendor name (<code>VNNAME</code>) and address (<code>VNADD1</code> to <code>VNADD4</code>).</li> <li>Messages based on vendor type:</li> <li>Standard vendors (<code>N60</code>): <code>MSG,1</code> to <code>MSG,3</code> (e.g., \"THE INVOICES LISTED BELOW WERE PAID BY ARG THROUGH ACH ON MM/DD/YY.\").</li> <li>Crude vendors (<code>60</code>): <code>MSG,4</code> to <code>MSG,6</code> (e.g., \"THIS EMAIL IS NOTIFICATION THAT A DEPOSIT WILL BE MADE INTO YOUR ACCOUNT.\").</li> <li>Payment date (<code>KYCKDTY</code>).</li> <li>Email address (<code>EMALP1</code> to <code>EMALP4</code>) for the respective report.</li> </ul> </li> <li>Detail Lines (Line 31-33):</li> <li>Prints for each <code>APDTWS</code> record:<ul> <li>Payment date (<code>KYCKDTY</code>).</li> <li>Invoice number (<code>ADINVN</code>).</li> <li>Invoice amount (<code>ADINV$M</code>).</li> <li>Discount amount (<code>ADDISCM</code>).</li> <li>Payment amount (<code>ADPYM$M</code>).</li> </ul> </li> <li>Totals (Line E 3):</li> <li>Prints vendor-level totals at <code>L1</code>:<ul> <li><code>\"TOTAL:\"</code>.</li> <li>Total invoice amount (<code>L1INV$M</code>).</li> <li>Total discount (<code>L1DIS$M</code>).</li> <li>Total payment (<code>L1PYM$M</code>).</li> </ul> </li> <li>Continuation Message:</li> <li>If the report exceeds the page length, prints <code>\"CONTINUED ON NEXT PAGE\"</code>.</li> </ul> </li> <li> <p>Completion:</p> </li> <li>Processes all <code>APDTWS</code> records, generating reports for each vendor with ACH transactions.</li> <li>Terminates, returning control to the <code>AP256.ocl36.txt</code> OCL program.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules based on its logic and context within the A/P system:</p> <ol> <li>ACH Vendor Reporting:</li> <li>Generates detailed payment reports for vendors using ACH payments, identified by <code>AMFMTY = 'ACHE'</code> in <code>APVNFMX</code>.</li> <li> <p>Supports up to four email addresses per vendor (<code>EMALP1</code> to <code>EMALP4</code>), allowing multiple recipients for payment notifications.</p> </li> <li> <p>Vendor Type Differentiation:</p> </li> <li>Distinguishes between standard vendors and crude vendors (<code>VNCAID = 'CRUDE'</code>):<ul> <li>Standard vendors receive messages <code>MSG,1</code> to <code>MSG,3</code> (e.g., instructions to send invoices to <code>acctpayable@amref.com</code>).</li> <li>Crude vendors receive messages <code>MSG,4</code> to <code>MSG,6</code> (e.g., notification of deposit with contact details for Ashley Lipps).</li> </ul> </li> <li> <p>Indicator <code>60</code> controls message selection based on <code>VNCAID</code>.</p> </li> <li> <p>Data Summarization:</p> </li> <li>Accumulates invoice, discount, and payment amounts at the vendor level (<code>L1INV$M</code>, <code>L1DIS$M</code>, <code>L1PYM$M</code>) for reporting totals.</li> <li> <p>Includes only ACH-related transactions from <code>APDTWS</code>, as filtered by <code>AP256A</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li> <p>Uses century-aware date processing to format payment dates (<code>ADDATE</code> to <code>KYCKDTY</code>) based on <code>Y2KCEN</code> (e.g., <code>19</code> or <code>20</code> for century).</p> </li> <li> <p>Report Output:</p> </li> <li>Produces four reports (<code>REPORT1</code> to <code>REPORT4</code>), each directed to a separate spool file and potentially emailed to different vendor email addresses.</li> <li>Reports include vendor details, payment details, and totals, formatted for clarity and email delivery.</li> <li> <p>Supports pagination with continuation messages.</p> </li> <li> <p>File Access:</p> </li> <li><code>APDTWS</code> is processed sequentially as the primary input file (<code>IP</code>).</li> <li><code>APDTWSC</code>, <code>APVEND</code>, <code>APVNFMX</code>, and <code>APCONT</code> are accessed randomly (<code>IF</code>, keyed) for reference data.</li> <li> <p>Reports are written to spool files (<code>LPRINTER</code>) for printing or emailing.</p> </li> <li> <p>Integration with A/P Process:</p> </li> <li>Relies on <code>APDTWS</code> and <code>APDTWSC</code> being populated by <code>AP256A</code> and prior steps in <code>AP250.ocl36.txt</code>.</li> <li> <p>Uses <code>APVEND</code> and <code>APCONT</code> for vendor and company details, and <code>APVNFMX</code> for ACH-specific email addresses.</p> </li> <li> <p>Error Handling:</p> </li> <li>No explicit error reporting for unmatched records or missing data, assuming valid input from <code>AP256A</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (F-spec) section:</p> <ol> <li>APDTWS (IP, 256 bytes, keyed, <code>DISK</code>):</li> <li>Primary input file, temporary A/P transaction file containing payment details.</li> <li> <p>Fields include:</p> <ul> <li><code>ADDEL</code>: Deletion flag (position 1).</li> <li><code>ADCO</code>: Company number (positions 2-3, <code>L2</code>).</li> <li><code>ADVEND</code>: Vendor number (positions 4-8, <code>L1</code>).</li> <li><code>ADCOVN</code>: Company/vendor number (positions 2-8).</li> <li><code>ADINVN</code>: Invoice number (positions 9-28).</li> <li><code>ADIDSC</code>: Invoice description (positions 29-53).</li> <li><code>ADINV$</code>: Invoice amount (packed, positions 54-59).</li> <li><code>ADDISC</code>: Discount amount (packed, positions 60-64).</li> <li><code>ADLPAM</code>: Last payment amount (packed, positions 65-70).</li> <li><code>ADDATE</code>: Payment date (positions 71-76).</li> <li><code>ADVCH#</code>: Voucher/check number (positions 77-81).</li> </ul> </li> <li> <p>APDTWSC (IF, 10 bytes, keyed, <code>DISK</code>):</p> </li> <li>Indexed temporary file, containing ACH transaction counts from <code>AP256A</code>.</li> <li> <p>Fields include:</p> <ul> <li><code>ACDEL</code>: Deletion flag (position 1).</li> <li><code>ACCO</code>: Company number (positions 2-3).</li> <li><code>ACVEND</code>: Vendor number (positions 4-8).</li> <li><code>ACECNT</code>: ACH transaction count (positions 9-10).</li> </ul> </li> <li> <p>APVEND (IF, 579 bytes, keyed, <code>DISK</code>):</p> </li> <li>Vendor master file, containing vendor details.</li> <li> <p>Fields include:</p> <ul> <li><code>VNDEL</code>: Deletion flag (position 1).</li> <li><code>VNCO</code>: Company number (positions 2-3).</li> <li><code>VNVEND</code>: Vendor number (positions 4-8).</li> <li><code>VNNAME</code>: Vendor name (positions 9-38).</li> <li><code>VNADD1</code> to <code>VNADD4</code>: Address lines (positions 39-158).</li> <li><code>VNZIP5</code>: Zip code (positions 159-163).</li> <li><code>VNZPX4</code>: Extra zip (positions 164-167).</li> <li><code>VNSORT</code>: Alpha sort abbreviation (positions 168-177).</li> <li><code>VNAREA</code>: Area code (positions 178-179).</li> <li><code>VNTELE</code>: Telephone number (positions 180-183).</li> <li><code>VNLPAY</code>: Last payment amount (packed, positions 184-188).</li> <li><code>VNLPDT</code>: Last payment date (positions 189-194).</li> <li><code>VN$YTD</code>: Year-to-date purchases (packed, positions 195-200).</li> <li><code>VN$LYR</code>: Last year purchases (packed, positions 201-206).</li> <li><code>VNDMTD</code>: Month-to-date discounts (packed, positions 207-210).</li> <li><code>VNDYTD</code>: Year-to-date discounts (packed, positions 211-215).</li> <li><code>VNNOVF</code>: Name overflow flag (position 216).</li> <li><code>VNPBAL</code>: Previous balance (packed, positions 220-224).</li> <li><code>VNPURC</code>: Month-to-date purchases (packed, positions 225-229).</li> <li><code>VNPAY</code>: Month-to-date payments (packed, positions 230-234).</li> <li><code>VNCBAL</code>: Current balance (packed, positions 235-239).</li> <li><code>VNHOLD</code>: Hold payments flag (position 240).</li> <li><code>VNSNGL</code>: Single check flag (position 241).</li> <li><code>VNTYDP</code>: Year-to-date paid (packed, positions 242-247).</li> <li><code>VNLYDP</code>: Last year-to-date paid (packed, positions 248-253).</li> <li><code>VNEXGL</code>: Expense G/L account (positions 254-261).</li> <li><code>VNTERM</code>: A/P terms code (positions 262-263).</li> <li><code>VN1099</code>: 1099 code (position 264).</li> <li><code>VNID#</code>: 1099 ID number (positions 265-275).</li> <li><code>VNBOX1</code>, <code>VNBOX2</code>: 1099 box numbers (positions 276-279).</li> <li><code>VNB2AM</code>: 1099 box amount (packed, positions 280-285).</li> <li><code>VNLPD8</code>: Last payment date (positions 286-293).</li> <li><code>VNCAID</code>: Carrier ID (positions 294-299).</li> </ul> </li> <li> <p>APVNFMX (IF, 266 bytes, keyed, <code>DISK</code>):</p> </li> <li>Vendor master extension file, containing ACH email addresses and other details.</li> <li> <p>Fields include (based on <code>AP256A.rpg.txt</code>):</p> <ul> <li><code>AMCONO</code>: Company number.</li> <li><code>AMCVEN</code>: Vendor number.</li> <li><code>AMCOVN</code>: Company/vendor number.</li> <li><code>AMFMTY</code>: Form type (e.g., <code>'ACHE'</code>).</li> <li><code>AMEMLA</code>: Email address.</li> </ul> </li> <li> <p>APCONT (IF, 256 bytes, keyed, <code>DISK</code>):</p> </li> <li>A/P control file, containing company details.</li> <li> <p>Fields include:</p> <ul> <li><code>ACNAME</code>: Company name.</li> </ul> </li> <li> <p>REPORT1 (O, 132 bytes, <code>LPRINTER</code>, <code>OF</code>):</p> </li> <li>First report spool file, emailed to <code>EMALP1</code>.</li> <li> <p>Contains vendor payment details for ACH transactions.</p> </li> <li> <p>REPORT2 (O, 132 bytes, <code>LPRINTER</code>, <code>OG</code>):</p> </li> <li>Second report spool file, emailed to <code>EMALP2</code>.</li> <li> <p>Contains vendor payment details for ACH transactions.</p> </li> <li> <p>REPORT3 (O, 132 bytes, <code>LPRINTER</code>, <code>OA</code>):</p> </li> <li>Third report spool file, emailed to <code>EMALP3</code>.</li> <li> <p>Contains vendor payment details for ACH transactions.</p> </li> <li> <p>REPORT4 (O, 132 bytes, <code>LPRINTER</code>, <code>OB</code>):</p> </li> <li>Fourth report spool file, emailed to <code>EMALP4</code>.</li> <li>Contains vendor payment details for ACH transactions.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256</code> RPG program does not call any external programs. It is self-contained, performing all processing within the main logic and level breaks (<code>L1</code>, <code>L2</code>). It is invoked by the <code>AP256.ocl36.txt</code> OCL program.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#summary","title":"Summary","text":"<p>The <code>AP256</code> RPG program generates detailed vendor payment reports for ACH vendors, formatted for emailing. Its key functions are:</p> <ul> <li>Process Steps:</li> <li>Initializes company-level data and retrieves company name (<code>L2</code>).</li> <li>Processes vendor-level data, retrieving vendor details and up to four ACH email addresses (<code>L1</code>).</li> <li>Processes <code>APDTWS</code> records, formatting payment details and accumulating totals.</li> <li> <p>Generates four reports (<code>REPORT1</code> to <code>REPORT4</code>) with headers, detail lines, totals, and vendor-specific messages.</p> </li> <li> <p>Business Rules:</p> </li> <li>Generates reports only for ACH vendors (<code>AMFMTY = 'ACHE'</code>).</li> <li>Differentiates between standard and crude vendors (<code>VNCAID = 'CRUDE'</code>) for messaging.</li> <li>Supports up to four email addresses per vendor for report distribution.</li> <li>Accumulates invoice, discount, and payment totals at the vendor level.</li> <li>Uses century-aware date formatting.</li> <li> <p>Produces formatted reports for printing or emailing via spool files.</p> </li> <li> <p>Tables Used:</p> </li> <li><code>APDTWS</code>: Temporary A/P transaction file (input).</li> <li><code>APDTWSC</code>: Indexed temporary file with ACH counts (input).</li> <li><code>APVEND</code>: Vendor master file (input).</li> <li><code>APVNFMX</code>: Vendor master extension file (input).</li> <li><code>APCONT</code>: A/P control file (input).</li> <li> <p><code>REPORT1</code> to <code>REPORT4</code>: Report spool files (output).</p> </li> <li> <p>External Programs Called: None.</p> </li> </ul> <p>The program integrates with the A/P process by leveraging data prepared by <code>AP256A</code> and prior steps, producing vendor-specific reports for ACH payments. If you need further details (e.g., specific report formats or email delivery mechanics), please let me know!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/","title":"AP256A RPG","text":"<p>The provided RPG program, <code>AP256A.rpg.txt</code>, is executed by the OCL program <code>AP256.ocl36.txt</code>, which is itself called from the main OCL program (<code>AP250.ocl36.txt</code>) within an IBM System/36 or AS/400 Accounts Payable (A/P) system. The purpose of <code>AP256A</code> is to process a temporary A/P transaction file (<code>APDTWS</code>) and update an indexed temporary file (<code>APDTWSC</code>) with counts of ACH (Automated Clearing House) transactions for each vendor, using the vendor master extension file (<code>APVNFMX</code>) for validation. Below, I will explain the process steps, business rules, tables (files) used, and external programs called based on the RPG code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/#process-steps-of-the-ap256a-rpg-program","title":"Process Steps of the AP256A RPG Program","text":"<p>The <code>AP256A</code> RPG program reads records from <code>APDTWS</code>, checks vendor information in <code>APVNFMX</code>, and updates <code>APDTWSC</code> with counts of ACH transactions. Here is a detailed breakdown of the process steps:</p> <ol> <li>Initialization:</li> <li> <p>The program initializes variables for processing:</p> <ul> <li>Sets <code>COUNT</code> to zero (used to track the number of ACH transactions for a vendor).</li> <li>Clears <code>KEY20</code> and <code>KEY13</code> (used to build a key for accessing <code>APVNFMX</code>).</li> </ul> </li> <li> <p>Main Processing Loop (Indicator 01):</p> </li> <li> <p>For each record in the primary input file <code>APDTWS</code> (processed with indicator <code>01</code>), the program performs the following:</p> <ul> <li>Builds a key (<code>KEY20</code>, 20 characters) for accessing <code>APVNFMX</code>:</li> <li>Copies the company/vendor number (<code>ADCOVN</code>, positions 2-8) from <code>APDTWS</code> into <code>KEY20</code>.</li> <li>Sets <code>KEY13</code> to <code>'ACHE'</code> (indicating ACH transaction type).</li> <li>Combines <code>KEY13</code> into <code>KEY20</code> to form the full key.</li> <li>Positions the file pointer in <code>APVNFMX</code> using <code>SETLL</code> with <code>KEY20</code> to locate records matching the company/vendor and ACH type.</li> </ul> </li> <li> <p>Read Vendor Master Extension (<code>APVNFMX</code>):</p> </li> <li> <p>Enters a loop (<code>AGAIN</code> tag) to read <code>APVNFMX</code> records:</p> <ul> <li>Reads the next record in <code>APVNFMX</code> (indicator <code>10</code> set on end-of-file).</li> <li>If end-of-file is reached (<code>10</code> set), jumps to the <code>END</code> tag to exit the loop.</li> <li>Compares the company/vendor number (<code>ADCOVN</code> from <code>APDTWS</code>) with <code>AMCOVN</code> from <code>APVNFMX</code>:</li> <li>If they do not match, jumps to <code>END</code> to skip the record.</li> <li>Checks if the form type (<code>AMFMTY</code>) in <code>APVNFMX</code> is <code>'ACHE'</code>:</li> <li>If not <code>'ACHE'</code>, jumps to <code>END</code> to skip the record.</li> <li>Increments the <code>COUNT</code> variable by 1 for each matching ACH record.</li> <li>Loops back to <code>AGAIN</code> to read the next <code>APVNFMX</code> record.</li> </ul> </li> <li> <p>Update Temporary File (<code>APDTWSC</code>):</p> </li> <li>Chains to <code>APDTWSC</code> using <code>ADCOVN</code> as the key to check if a record exists for the company/vendor (indicator <code>98</code> set if not found).</li> <li> <p>Writes or updates a record in <code>APDTWSC</code>:</p> <ul> <li>For new records (<code>98</code> set, no existing record):</li> <li>Writes a new record with:<ul> <li><code>ADCOVN</code> (company/vendor number, positions 2-8).</li> <li><code>COUNT</code> (number of ACH transactions, binary, position 10).</li> </ul> </li> <li>For existing records (<code>N98</code>, record found):</li> <li>Updates the existing record with the new <code>COUNT</code> value (binary, position 10).</li> </ul> </li> <li> <p>Completion:</p> </li> <li>Processes all <code>APDTWS</code> records, updating <code>APDTWSC</code> with ACH transaction counts for each vendor.</li> <li>Terminates, returning control to the calling OCL program (<code>AP256.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules based on its logic and context within the A/P system:</p> <ol> <li>ACH Transaction Counting:</li> <li>Counts the number of ACH transactions (<code>AMFMTY = 'ACHE'</code>) for each vendor in <code>APVNFMX</code> that matches the company/vendor number (<code>ADCOVN</code>) from <code>APDTWS</code>.</li> <li> <p>Only records with <code>AMFMTY = 'ACHE'</code> are counted, ensuring the program focuses on ACH-specific transactions.</p> </li> <li> <p>Vendor Matching:</p> </li> <li>Matches <code>APDTWS</code> records to <code>APVNFMX</code> using the company/vendor number (<code>ADCOVN</code> vs. <code>AMCOVN</code>).</li> <li> <p>Skips non-matching records to ensure accurate vendor association.</p> </li> <li> <p>Temporary File Updates:</p> </li> <li>Updates <code>APDTWSC</code> with the count of ACH transactions (<code>COUNT</code>) for each vendor.</li> <li>Creates new records if no existing record is found (<code>98</code> set) or updates existing records (<code>N98</code>).</li> <li> <p>Stores only the company/vendor number (<code>ADCOVN</code>) and count (<code>COUNT</code>) in <code>APDTWSC</code>, reflecting the compact 10-byte record structure.</p> </li> <li> <p>File Access:</p> </li> <li><code>APDTWS</code> is processed sequentially as the primary input file (<code>IP</code>).</li> <li><code>APVNFMX</code> is accessed randomly (<code>IF</code>, keyed) to retrieve vendor data.</li> <li> <p><code>APDTWSC</code> is an update file (<code>UF</code>, keyed), allowing both read and write operations.</p> </li> <li> <p>No Error Reporting:</p> </li> <li> <p>The program does not generate error reports for unmatched records or invalid data, silently skipping non-matching <code>APVNFMX</code> records or handling missing <code>APDTWSC</code> records by creating new ones.</p> </li> <li> <p>Integration with A/P Process:</p> </li> <li>Relies on <code>APDTWS</code> being populated by prior steps in the main OCL program (<code>AP250.ocl36.txt</code>).</li> <li>Prepares <code>APDTWSC</code> for use by the subsequent <code>AP256</code> program, which generates reports based on this data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (F-spec) section:</p> <ol> <li>APDTWS (IP, 256 bytes, keyed, <code>DISK</code>):</li> <li>Primary input file, temporary A/P transaction file created by the main OCL program.</li> <li> <p>Fields include:</p> <ul> <li><code>ADDEL</code>: Deletion flag (position 1).</li> <li><code>ADCO</code>: Company number (positions 2-3).</li> <li><code>ADVEND</code>: Vendor number (positions 4-8).</li> <li><code>ADCOVN</code>: Company/vendor number (positions 2-8).</li> <li><code>ADINVN</code>: Invoice number (positions 9-18).</li> <li><code>ADIDSC</code>: Invoice description (positions 19-43).</li> <li><code>ADINV$</code>: Invoice amount (packed, positions 44-49).</li> <li><code>ADDISC</code>: Discount amount (packed, positions 50-54).</li> <li><code>ADLPAM</code>: Last payment amount (packed, positions 55-60).</li> <li><code>ADDATE</code>: Date (positions 61-66).</li> <li><code>ADVCH#</code>: Voucher/check number (positions 67-71).</li> </ul> </li> <li> <p>APVNFMX (IF, 266 bytes, keyed, <code>DISK</code>):</p> </li> <li>Vendor master extension file, accessed randomly for vendor data.</li> <li> <p>Fields include:</p> <ul> <li><code>AMDEL</code>: Deletion code (position 1, e.g., <code>'D'</code> for delete).</li> <li><code>AMCONO</code>: Company number (positions 2-3).</li> <li><code>AMCVEN</code>: Vendor number (positions 4-8).</li> <li><code>AMCOVN</code>: Company/vendor number (positions 2-8).</li> <li><code>AMFMTY</code>: Form type (positions 9-12, e.g., <code>'ACHE'</code> for ACH).</li> <li><code>AMSEQ#</code>: Sequence number (positions 13-21).</li> <li><code>AMCNTC</code>: Contact name (positions 22-71).</li> <li><code>AMEMLA</code>: Email address (positions 72-131).</li> <li><code>AMFAX#</code>: Fax number (positions 132-151).</li> <li><code>AMFMYN</code>: Send original flag (position 152).</li> </ul> </li> <li> <p>APDTWSC (UF, 10 bytes, keyed, <code>DISK</code>):</p> </li> <li>Indexed temporary file, created by the OCL program with a key in positions 2-7.</li> <li>Fields include:<ul> <li><code>ADCOVN</code>: Company/vendor number (positions 2-8).</li> <li><code>COUNT</code>: Number of ACH transactions (binary, position 10).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256A</code> RPG program does not call any external programs. It is self-contained, performing all processing within the main logic and a single <code>DO</code> loop. It is invoked by the <code>AP256.ocl36.txt</code> OCL program as part of the A/P workflow.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A%20RPG/#summary","title":"Summary","text":"<p>The <code>AP256A</code> RPG program is a specialized component of the A/P system, designed to count ACH transactions for vendors and store the results in an indexed temporary file. Its key functions are:</p> <ul> <li>Process Steps:</li> <li>Reads <code>APDTWS</code> records sequentially.</li> <li>Matches each record to <code>APVNFMX</code> using a company/vendor key and checks for ACH form type (<code>'ACHE'</code>).</li> <li>Counts matching ACH transactions and updates <code>APDTWSC</code> with the count for each vendor.</li> <li> <p>Creates or updates <code>APDTWSC</code> records with the company/vendor number and ACH count.</p> </li> <li> <p>Business Rules:</p> </li> <li>Counts only ACH transactions (<code>AMFMTY = 'ACHE'</code>) for matching vendors.</li> <li>Matches records using the company/vendor number (<code>ADCOVN</code> vs. <code>AMCOVN</code>).</li> <li>Updates <code>APDTWSC</code> with compact records containing only the company/vendor number and ACH count.</li> <li>Operates in a read/write environment with no error reporting for unmatched records.</li> <li> <p>Prepares data for subsequent reporting by <code>AP256</code>.</p> </li> <li> <p>Tables Used:</p> </li> <li><code>APDTWS</code>: Temporary A/P transaction file (input).</li> <li><code>APVNFMX</code>: Vendor master extension file (input, reference).</li> <li> <p><code>APDTWSC</code>: Indexed temporary file (update, output).</p> </li> <li> <p>External Programs Called: None.</p> </li> </ul> <p>The program integrates with the A/P process by preparing summarized ACH transaction data for use by the <code>AP256</code> program, which generates reports. If you have the RPG source code for <code>AP256</code> or additional details about <code>APDTWS</code> or the reports, I can provide further analysis. Please let me know if you need clarification or more details!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/","title":"Summary AP250 Check Register","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#list-of-use-cases-implemented-by-the-ap250-call-stack","title":"List of Use Cases Implemented by the AP250 Call Stack","text":"<p>The AP250 call stack, comprising the OCL programs (<code>AP250.ocl36.txt</code>, <code>AP251.ocl36.txt</code>, <code>AP256.ocl36.txt</code>) and RPG programs (<code>AP250.rpg36.txt</code>, <code>AP251.rpg36.txt</code>, <code>AP255.rpg36.txt</code>, <code>AP256A.rpg.txt</code>, <code>AP256.rpg36.txt</code>), implements a single comprehensive use case within the IBM System/36 or AS/400 Accounts Payable (A/P) system. This use case is:</p> <ol> <li>Generate and Process A/P Check Register with Associated Updates and Reports:</li> <li>Description: This use case processes A/P transactions to generate a Check Register, update master files (vendor, open invoices, history, reconciliation), produce a Cash Disbursements Journal, and generate vendor payment detail reports for ACH transactions. It handles multiple payment types (checks, ACH, wire transfers, employee expenses) and ensures accurate financial tracking and reporting.</li> <li>Components:<ul> <li><code>AP250.ocl36.txt</code>: Orchestrates the overall process, calling other programs and managing temporary files.</li> <li><code>AP250.rpg36.txt</code>: Generates the Check Register, updates master files, and produces Positive Pay and journal entries.</li> <li><code>AP251.ocl36.txt</code> and <code>AP251.rpg36.txt</code>: Updates the commission table (<code>APTORCY</code>) with payment data.</li> <li><code>AP255.rpg36.txt</code>: Produces the Cash Disbursements Journal and general ledger entries.</li> <li><code>AP256.ocl36.txt</code>, <code>AP256A.rpg.txt</code>, <code>AP256.rpg36.txt</code>: Generates vendor payment detail reports for ACH vendors, emailed to up to four recipients per vendor.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#function-requirement-document-generate-and-process-ap-check-register","title":"Function Requirement Document: Generate and Process A/P Check Register","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#function-requirement-generate-and-process-ap-check-register","title":"Function Requirement: Generate and Process A/P Check Register","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#overview","title":"Overview","text":"<p>This function processes Accounts Payable (A/P) transactions to generate a Check Register, update master files (vendor, open invoices, history, reconciliation, commission), produce a Cash Disbursements Journal, and generate vendor payment detail reports for ACH transactions. It handles checks, ACH, wire transfers, and employee expenses, ensuring accurate financial tracking and reporting.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#inputs","title":"Inputs","text":"<ul> <li>Payment File (<code>APPAY</code>): Contains payment details (company number, vendor number, invoice number, gross amount, discount, payment amount, sales order number, check number, payment date).</li> <li>Check File (<code>APPYCK</code>): Contains check details (check number, amount, date, vendor, payment type: check, ACH, wire, expense).</li> <li>Transaction File (<code>APPYTR</code>): Contains check date and hold code (e.g., ACH, wire).</li> <li>Vendor Files (<code>APVEND</code>, <code>APVEND2</code>, <code>APVNFMX</code>): Vendor details (name, address, balance, email addresses, ACH form type).</li> <li>Control File (<code>APCONT</code>): Company details (name, next check/journal numbers).</li> <li>Open Invoice Files (<code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>): Invoice details (gross amount, partial paid, open amount).</li> <li>Freight Files (<code>FRCFBH</code>, <code>FRCINH</code>): Freight invoice details (carrier ID, invoice number).</li> <li>Commission File (<code>APTORCY</code>): Commission details (order number, invoice number, payment status).</li> <li>System Date/Time: For report headers and date calculations.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#outputs","title":"Outputs","text":"<ul> <li>Check Register (<code>APPRINT</code>): Report listing checks with totals by payment type.</li> <li>Positive Pay File (<code>APPNCF</code>): Bank reconciliation file with check details.</li> <li>Cash Disbursements Journal (<code>APCDJR</code>, <code>TEMGEN</code>): Journal entries for cash, discounts, and A/P, including summarized A/P entries.</li> <li>Updated Files: <code>APVEND</code>, <code>APOPEN*</code>, <code>APHIST*</code>, <code>APCHKR</code>, <code>FRCFBH</code>, <code>FRCINH</code>, <code>APPYDS</code>, <code>APTORCY</code> with updated payment data.</li> <li>ACH Vendor Reports (<code>REPORT1</code> to <code>REPORT4</code>): Payment detail reports emailed to up to four vendor email addresses, with vendor-specific messages.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Data:</li> <li>Retrieve system date/time for reporting.</li> <li> <p>Fetch company details from <code>APCONT</code> (e.g., name, next check/journal numbers).</p> </li> <li> <p>Process Payments and Checks:</p> </li> <li>Read <code>APPYCK</code>, <code>APPAY</code>, and <code>APPYTR</code> to process payments by company and vendor.</li> <li>Identify payment type (check, ACH, wire, expense, void) using <code>AXRECD</code> and <code>PTHOLD</code>.</li> <li> <p>Format check dates (e.g., <code>20YYMMDD</code>) using century-aware logic (<code>Y2KCEN</code>).</p> </li> <li> <p>Update Master Files:</p> </li> <li>Vendor (<code>APVEND</code>): Update last payment amount/date, discounts, balance, year-to-date paid.</li> <li>Open Invoices (<code>APOPEN*</code>): Update partial payments; mark fully paid invoices for deletion.</li> <li>History (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>): Record payment history.</li> <li>Reconciliation (<code>APCHKR</code>): Update check status (open/void), amount, and clear date.</li> <li>Freight (<code>FRCFBH</code>, <code>FRCINH</code>): Update freight invoices if carrier ID exists.</li> <li>Discounts (<code>APPYDS</code>): Record missed discounts.</li> <li> <p>Commission (<code>APTORCY</code>): Update with payment amount, status (<code>'P'</code>), and check number.</p> </li> <li> <p>Generate Check Register:</p> </li> <li> <p>Produce <code>APPRINT</code> with company name, payment method, check details (number, date, amount, vendor), and totals by payment type (check, ACH, wire, expense).</p> </li> <li> <p>Generate Positive Pay File:</p> </li> <li> <p>Output <code>APPNCF</code> with check number, date, amount, vendor name, and status (issued/void) for bank reconciliation.</p> </li> <li> <p>Generate Cash Disbursements Journal:</p> </li> <li>Process <code>APCDJR</code> to produce <code>TEMGEN</code> with detailed and summarized A/P journal entries (company, G/L number, amount, debit/credit).</li> <li> <p>Output <code>APPRINT</code> with journal headers, detail lines, and totals (debits/credits).</p> </li> <li> <p>Generate ACH Vendor Reports:</p> </li> <li>Process <code>APDTWS</code> and <code>APDTWSC</code> to count ACH transactions per vendor.</li> <li>Retrieve vendor details (<code>APVEND</code>) and up to four email addresses (<code>APVNFMX</code>, <code>AMFMTY = 'ACHE'</code>).</li> <li>Produce <code>REPORT1</code> to <code>REPORT4</code> with vendor details, payment details (invoice number, amount, discount, payment), totals, and messages (standard or crude-specific).</li> <li> <p>Direct reports to spool files for emailing.</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete temporary files (<code>APDTWS</code>, <code>APDTWSC</code>) via main OCL program.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Types:</li> <li>Handle checks (<code>'C'</code>), ACH (<code>'A'</code>), wire transfers (<code>'W'</code>), employee expenses (<code>'E'</code>), and void checks (<code>'F'</code>, <code>'V'</code>).</li> <li>Skip credit/no-pay records (<code>'C'</code> in <code>AXRECD</code>).</li> <li> <p>ACH, wire, and expenses skip <code>APCHKR</code> updates.</p> </li> <li> <p>Vendor Updates:</p> </li> <li> <p>Update <code>APVEND</code> with last payment amount/date, month/year-to-date discounts/payments, and current balance (<code>VNCBAL -= payment + discount</code>).</p> </li> <li> <p>Invoice Management:</p> </li> <li>Calculate open amount (<code>OPOPEN = OPGRAM - OPPPTD - payment</code>).</li> <li> <p>Mark fully paid invoices (<code>OPOPEN = 0</code>) for deletion in <code>APOPEN*</code>.</p> </li> <li> <p>Freight Processing:</p> </li> <li> <p>Update <code>FRCFBH</code> or <code>FRCINH</code> for freight invoices with valid carrier IDs, setting status to <code>'P'</code> (posted).</p> </li> <li> <p>Commission Updates:</p> </li> <li>Match payments to <code>APTORCY</code> using company, vendor, and invoice description.</li> <li> <p>Update with payment amount, status (<code>'P'</code>), and check number.</p> </li> <li> <p>Journal Entries:</p> </li> <li>Generate detailed entries for non-A/P transactions and summarized entries for A/P (<code>CDTYPE = 'AP      '</code>) in <code>TEMGEN</code>.</li> <li> <p>Adjust negative amounts by reversing sign and switching debit/credit code.</p> </li> <li> <p>ACH Reporting:</p> </li> <li>Count ACH transactions (<code>AMFMTY = 'ACHE'</code>) per vendor in <code>APDTWSC</code>.</li> <li>Generate up to four reports per vendor, emailed to <code>AMEMLA</code> addresses.</li> <li> <p>Use standard messages for non-crude vendors, crude-specific messages for <code>VNCAID = 'CRUDE'</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li> <p>Use century-aware formatting (<code>Y2KCEN</code>) for all dates (e.g., check date, payment date).</p> </li> <li> <p>File Access:</p> </li> <li>Support shared access (<code>DISP-SHR</code>) for concurrent processing.</li> <li>Delete temporary files after processing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#calculations","title":"Calculations","text":"<ul> <li>Vendor Balance: <code>VNCBAL = VNCBAL - (OPLPAM + OPDISC)</code> (payment + discount).</li> <li>Open Invoice Amount: <code>OPOPEN = OPGRAM - OPPPTD - (OPLPAM + OPDISC)</code>.</li> <li>Journal Amount: For negative amounts, reverse sign and switch debit (<code>'D'</code>) to credit (<code>'C'</code>) or vice versa.</li> <li>ACH Count: Increment <code>COUNT</code> for each <code>APVNFMX</code> record where <code>AMFMTY = 'ACHE'</code> and <code>AMCOVN</code> matches <code>ADCOVN</code>.</li> <li>Report Totals: Sum invoice (<code>ADINV$</code>), discount (<code>ADDISC</code>), and payment (<code>ADLPAM</code>) amounts at vendor level (<code>L1INV$M</code>, <code>L1DIS$M</code>, <code>L1PYM$M</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/Summary%20AP250%20Check%20Register/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (<code>APPAY</code>, <code>APPYCK</code>, <code>APPYTR</code>, etc.) are populated by prior steps.</li> <li>Vendor and control files (<code>APVEND</code>, <code>APCONT</code>, <code>APVNFMX</code>) contain valid data.</li> <li>Reports are emailed via spool files using an external system (not handled by RPG).</li> <li>No user interaction; process runs automatically.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/","title":"AP991P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP991P.ocl36.txt</code>, used in IBM System/36 environments to manage processes, typically for accounts payable tasks. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and list any tables used, based on the content provided.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>OCL is a scripting language used on IBM System/36 to control job execution, file handling, and program flow. The <code>AP991P</code> OCL program appears to be a control script that sets up and executes a specific process, likely related to accounts payable. Here\u2019s a step-by-step breakdown of the program\u2019s process:</p> <ol> <li>Header/Comment Section (<code>// SCPROCP ,,,,,,,,?9?</code>)</li> <li> <p>The <code>SCPROCP</code> line is likely a comment or identifier for the procedure, possibly indicating a specific accounts payable process. The <code>?9?</code> placeholder suggests a parameter or variable that may be substituted at runtime, potentially defining a specific job or configuration.</p> </li> <li> <p>Clear Local Variables (<code>// LOCAL BLANK-*ALL</code>)</p> </li> <li> <p>This command resets all local variables in the job environment to blank, ensuring no residual data from prior executions affects the current run. This is a common initialization step to maintain a clean state.</p> </li> <li> <p>Set System Date Compliance (<code>// GSY2K</code>)</p> </li> <li> <p>The <code>GSY2K</code> command likely enables Year 2000 compliance for date handling in the System/36 environment. This ensures that date-related operations in the program interpret years correctly (e.g., distinguishing between 19xx and 20xx).</p> </li> <li> <p>Load Program (<code>// LOAD AP991P</code>)</p> </li> <li> <p>This command loads the <code>AP991P</code> program into memory for execution. <code>AP991P</code> is likely an RPG (Report Program Generator) program, given the context of accounts payable and the OCL structure, which will perform the core processing logic.</p> </li> <li> <p>Specify File Access (<code>// FILE NAME-GSCONT,LABEL-?9?GSCONT,DISP-SHR</code>)</p> </li> <li>This line defines a file named <code>GSCONT</code> to be used by the program:<ul> <li><code>NAME-GSCONT</code>: Specifies the logical file name <code>GSCONT</code>.</li> <li><code>LABEL-?9?GSCONT</code>: Indicates the file\u2019s label, where <code>?9?</code> is likely a parameter or variable substituted at runtime (e.g., a specific library or prefix).</li> <li><code>DISP-SHR</code>: Sets the file disposition to shared, allowing multiple jobs to access the file concurrently without exclusive locking.</li> </ul> </li> <li> <p>The file <code>GSCONT</code> is likely a data file (e.g., a general ledger or control file) used by the <code>AP991P</code> program for accounts payable processing.</p> </li> <li> <p>Execute Program (<code>// RUN</code>)</p> </li> <li> <p>This command initiates the execution of the loaded <code>AP991P</code> program. The program will perform its defined logic, likely processing data from the <code>GSCONT</code> file or other inputs.</p> </li> <li> <p>Conditional Check and Termination (<code>// IF ?L'129,6'?/CANCEL GOTO Himmel GOTA END</code>)</p> </li> <li> <p>This line checks a condition based on a parameter or variable <code>?L'129,6'?</code>:</p> <ul> <li>The syntax suggests a comparison or status check, possibly related to a return code, error condition, or data value at position 129,6 (e.g., a 6-character field starting at position 129 in a record).</li> <li>If the condition evaluates to true (e.g., an error or specific status), the job is canceled, and control jumps to the <code>END</code> tag.</li> <li>The exact nature of <code>?L'129,6'?</code> is unclear without more context, but it could represent a specific error code or validation check.</li> </ul> </li> <li> <p>End Tag (<code>// TAG END</code>)</p> </li> <li> <p>Marks the <code>END</code> label, where the job flow is directed if the condition in the <code>IF</code> statement is met. This effectively terminates the job.</p> </li> <li> <p>Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>)</p> </li> <li>After reaching the <code>END</code> tag (whether normally or via cancellation), this command clears all local variables again, ensuring a clean exit from the job.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP991P: This is the primary program loaded and executed by the OCL script using the <code>// LOAD AP991P</code> and <code>// RUN</code> commands. It is likely an RPG program responsible for the core accounts payable processing logic.</li> <li>No other external programs are explicitly called in the provided OCL code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>GSCONT: The only explicitly mentioned file is <code>GSCONT</code>, defined in the <code>// FILE</code> statement. It is likely a data file or table (e.g., a control file, general ledger, or accounts payable master file) used by the <code>AP991P</code> program.</li> <li>No other tables or files are explicitly referenced in the provided code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#notes-and-assumptions","title":"Notes and Assumptions","text":"<ul> <li>Limited Context: The OCL code is brief and lacks detailed context about the <code>AP991P</code> program\u2019s internal logic or the specific role of <code>GSCONT</code>. The explanation assumes typical accounts payable processing based on the filename and System/36 conventions.</li> <li>Placeholders (<code>?9?</code>, <code>?L'129,6'?</code>): The placeholders suggest runtime parameters or variables. Without additional documentation, their exact values or purposes are speculative. <code>?9?</code> might represent a library or job-specific prefix, while <code>?L'129,6'?</code> could be a field or status check.</li> <li>System/36 Environment: The OCL syntax and commands like <code>GSY2K</code> and <code>DISP-SHR</code> are specific to the IBM System/36, indicating this is a legacy system used for business applications like accounts payable.</li> <li>No Additional Files or Tables: Only <code>GSCONT</code> is mentioned. If <code>AP991P</code> uses additional files or tables, they are not specified in the OCL script and would be defined within the RPG program or other configuration files.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment, ensures Y2K compliance, loads and runs the <code>AP991P</code> program with the <code>GSCONT</code> file, checks a condition to potentially cancel the job, and cleans up variables upon completion.</li> <li>External Programs: <code>AP991P</code> (RPG program).</li> <li>Tables Used: <code>GSCONT</code> (likely a control or data file).</li> </ul> <p>If you have additional details about the <code>AP991P</code> program, the <code>GSCONT</code> file structure, or the specific parameters (<code>?9?</code>, <code>?L'129,6'?</code>), I can provide a more detailed analysis.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/","title":"AP991P RPG","text":"<p>The provided document is an RPG (Report Program Generator) program, <code>AP991P.rpg36.txt</code>, designed for the IBM System/36 environment. This program is called by the OCL (Operation Control Language) script <code>AP991P.ocl36.txt</code> previously discussed. It appears to be part of an accounts payable (A/P) system, specifically handling override code retrieval and validation. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the RPG source code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>AP991P</code> is structured to interact with a workstation (screen) and a disk file, performing data retrieval and updates related to an override code. Here\u2019s a step-by-step breakdown of the process steps, based on the RPG code:</p> <ol> <li>Program Initialization (Header and File Specifications)</li> <li>H-Spec (Line 0002): The header specification (<code>H    P064</code>) identifies the program as <code>AP991P</code> and likely includes compilation options (e.g., <code>P064</code> may indicate a specific program option or library).</li> <li>F-Specs (Lines 0004, 0008):<ul> <li><code>SCREEN</code>: Defined as a workstation file (<code>WORKSTN</code>), used for interactive input/output with a display device (e.g., a terminal screen). It has a record length of 500 bytes.</li> <li><code>GSCONT</code>: Defined as an update-capable (<code>UF</code>), full-procedural (<code>F</code>), disk file with 512-byte records, indexed (<code>2AI</code>) with 2 keys. This file is likely a control or master file for accounts payable data.</li> </ul> </li> <li> <p>Comment (Line 0003): Indicates the program\u2019s purpose: \"PROMPTS FOR A/P OVERRIDE CODE RETRIEVAL,\" suggesting it retrieves or validates an override code for accounts payable processing.</p> </li> <li> <p>Input Specifications (I-Specs)</p> </li> <li>SCREEN Input (Lines 0006\u20130009):<ul> <li>Defines input format <code>GL951PS1</code> for the <code>SCREEN</code> file, with a field <code>KYCODE</code> (positions 3\u20138, 6 characters) read from the screen.</li> <li><code>NS 01</code> and <code>NS 09</code> indicate different record types or conditions for screen input, with <code>CS</code> and <code>C1</code> possibly representing control or cursor fields.</li> </ul> </li> <li>GSCONT Input (Lines 0042\u20130044):<ul> <li>Defines a field <code>GXCODE</code> (positions 53\u201358, 6 characters) in the <code>GSCONT</code> file, described as the \"OVERRIDE CODE FOR POSTING.\"</li> </ul> </li> <li>UDS (User Data Structure, Lines 0011\u20130014):<ul> <li>Defines fields in a user data structure:</li> <li><code>KYJOBQ</code> (position 120, 1 character): Likely a job queue indicator.</li> <li><code>KYCOPY</code> (positions 121\u2013122, 2 characters): Possibly a copy or version number.</li> <li><code>KYCANC</code> (positions 129\u2013134, 6 characters): Likely a cancellation code.</li> <li><code>KYCODE</code> (positions 135\u2013140, 6 characters): The override code, matching the screen and file fields.</li> </ul> </li> <li> <p>These fields are likely used for job control or validation.</p> </li> <li> <p>Calculation Specifications (C-Specs)</p> </li> <li>Initialize Variables (Lines 0016\u20130019):<ul> <li><code>MOVEL*BLANKS MSG 40</code>: Clears a 40-character message field (<code>MSG</code>) to blanks.</li> <li><code>SETOF 8190</code>: Turns off indicators 81 and 90, which are likely used for screen or error handling.</li> </ul> </li> <li>Indicator Logic (Line 0024):<ul> <li>If indicator <code>09</code> is on (from screen input), set indicator <code>81</code> on (likely for screen display control).</li> <li>If indicator <code>09</code> is off (<code>N09</code>), set the Last Record (<code>LR</code>) indicator and jump to the <code>END</code> tag, terminating the program.</li> </ul> </li> <li>Time and Date Processing (Lines 0151\u20130208):<ul> <li><code>TIME TIMEOF 60</code>: Retrieves the current time into a 6-character field <code>TIMEOF</code>.</li> <li><code>TIME TIMDAT 120</code>: Retrieves the current date and time into a 12-character field <code>TIMDAT</code>.</li> <li><code>MOVELTIMDAT SYSTIM 60</code>: Moves the first 6 characters of <code>TIMDAT</code> to <code>SYSTIM</code> (system time).</li> <li><code>MOVE TIMDAT SYSDAT 60</code>: Moves <code>TIMDAT</code> to <code>SYSDAT</code> (system date).</li> <li><code>SYSDAT MULT 10000.01 SYSYMD 60</code>: Multiplies <code>SYSDAT</code> by 10000.01 to create a year-month-day format in <code>SYSYMD</code>.</li> <li><code>MOVEL20 SYSDT8 80</code>: Moves the literal <code>20</code> (likely for century, e.g., 20xx) to the first 2 characters of <code>SYSDT8</code> (8-character date field).</li> <li><code>MOVE SYSYMD SYSDT8</code>: Completes the date field <code>SYSDT8</code> with <code>SYSYMD</code>.</li> <li><code>SYSDAT ADD SYSTIM FLD1 80</code>: Adds <code>SYSDAT</code> and <code>SYSTIM</code> to create <code>FLD1</code> (8 characters), combining date and time.</li> <li><code>FLD1 MULT SYSYMD FLD2 110</code>: Multiplies <code>FLD1</code> by <code>SYSYMD</code> to create <code>FLD2</code> (11 characters), possibly for a unique key or hash.</li> <li><code>Z-ADDFLD2 KYCODE 60</code>: Zero-adds <code>FLD2</code> to <code>KYCODE</code>, creating a 6-character override code.</li> </ul> </li> <li>File Access (Line 0208):<ul> <li><code>'00' CHAINGSCONT 99</code>: Chains (searches) the <code>GSCONT</code> file using the key <code>'00'</code> (likely a default or control record key), setting indicator <code>99</code> if the record is not found.</li> <li><code>N99 EXCPT</code>: If the record is found (<code>N99</code>, indicator 99 off), execute an exception output (write/update) to <code>GSCONT</code>.</li> </ul> </li> <li>Cancellation Logic (Lines 0021\u20130022):<ul> <li>If indicator <code>KG</code> is on (undefined in the code but likely set externally or in prior logic), turn off indicators 01 and 09 and move <code>'CANCEL'</code> to <code>KYCANC</code>.</li> <li>This suggests a cancellation condition, possibly linked to the OCL\u2019s <code>?L'129,6'?</code> check (positions 129\u2013134 match <code>KYCANC</code>).</li> </ul> </li> <li> <p>End Processing (Line 0029):</p> <ul> <li>The <code>END</code> tag marks the program\u2019s termination point, reached via <code>GOTO</code> or normal flow.</li> </ul> </li> <li> <p>Output Specifications (O-Specs)</p> </li> <li>SCREEN Output (Lines 0057\u20130061):<ul> <li>Writes to the <code>SCREEN</code> file using format <code>AP991PFM</code>.</li> <li>Outputs <code>KYCODE</code> (6 characters) and <code>MSG</code> (40 characters, starting at position 7, ending at 46).</li> </ul> </li> <li>GSCONT Output (Lines 0057\u20130061):<ul> <li>Updates or writes to the <code>GSCONT</code> file, outputting <code>KYCODE</code> at positions 53\u201358 (matching <code>GXCODE</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic and context, the following business rules can be inferred:</p> <ol> <li>Override Code Generation:</li> <li>The program generates an override code (<code>KYCODE</code>) by combining system date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>), performing arithmetic operations to create a unique code (<code>FLD2</code>), and storing it in <code>KYCODE</code>.</li> <li> <p>This code is likely used to authorize or validate accounts payable transactions, such as posting to a general ledger.</p> </li> <li> <p>Screen Interaction:</p> </li> <li>The program prompts the user via the <code>SCREEN</code> file (format <code>GL951PS1</code>) to input or validate an override code (<code>KYCODE</code>).</li> <li> <p>The message field (<code>MSG</code>) displays feedback or errors to the user.</p> </li> <li> <p>File Validation:</p> </li> <li>The program checks the <code>GSCONT</code> file using a key of <code>'00'</code> to retrieve or validate a control record.</li> <li>If the record is found, it updates <code>GSCONT</code> with the generated <code>KYCODE</code> (as <code>GXCODE</code>).</li> <li> <p>If the record is not found (indicator <code>99</code> on), no update occurs, potentially triggering an error or alternative flow.</p> </li> <li> <p>Cancellation Handling:</p> </li> <li>If a cancellation condition is detected (indicator <code>KG</code> or the OCL\u2019s <code>?L'129,6'?</code> matching <code>KYCANC</code>), the program sets <code>KYCANC</code> to <code>'CANCEL'</code> and may terminate early.</li> <li> <p>This aligns with the OCL\u2019s conditional check, suggesting the program supports job cancellation for invalid or unauthorized conditions.</p> </li> <li> <p>Date and Time Compliance:</p> </li> <li>The program ensures proper date handling (e.g., century prefix <code>20</code> for 20xx dates) to comply with Year 2000 standards, as reinforced by the OCL\u2019s <code>GSY2K</code> command.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#tables-used","title":"Tables Used","text":"<ul> <li>GSCONT:</li> <li>A disk file used for update and retrieval, containing at least the <code>GXCODE</code> field (positions 53\u201358) for storing the override code.</li> <li>Likely a control or master file for accounts payable data, indexed with 2 keys.</li> <li>SCREEN:</li> <li>A workstation file used for interactive input/output, with format <code>GL951PS1</code> for reading <code>KYCODE</code> and format <code>AP991PFM</code> for outputting <code>KYCODE</code> and <code>MSG</code>.</li> <li>Not a traditional \"table\" but a logical file for user interaction.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPG program does not explicitly call other programs. It operates standalone, performing its logic using the <code>SCREEN</code> and <code>GSCONT</code> files.</li> <li>The program is called by the OCL script (<code>AP991P.ocl36.txt</code>), but it does not invoke additional external programs within its code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Indicators like <code>09</code>, <code>81</code>, <code>90</code>, <code>99</code>, and <code>KG</code> control program flow and screen/file operations. Their exact triggers (e.g., <code>KG</code>) are not fully defined in the code and may depend on external inputs or prior logic.</li> <li>OCL Integration: The OCL script\u2019s <code>?L'129,6'?</code> likely checks the <code>KYCANC</code> field (positions 129\u2013134) for <code>'CANCEL'</code>, linking the RPG program\u2019s cancellation logic to the OCL\u2019s job termination.</li> <li>Parameter <code>?9?</code>: The OCL\u2019s <code>?9?</code> placeholder (e.g., in <code>LABEL-?9?GSCONT</code>) may correspond to a library or prefix for <code>GSCONT</code>, but it\u2019s not referenced in the RPG code directly.</li> <li>Legacy Context: The program\u2019s structure (RPG II/III, System/36) indicates a legacy environment, typical for accounts payable systems in the 1980s\u20131990s. The override code logic suggests a security or control mechanism for financial transactions.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initialize variables, generate an override code using date and time, interact with the user via <code>SCREEN</code>, validate/update the <code>GSCONT</code> file, handle cancellation, and output results.</li> <li>Business Rules: Generate and validate override codes, support user interaction, update control files, handle cancellations, and ensure Y2K-compliant date processing.</li> <li>Tables Used: <code>GSCONT</code> (disk file), <code>SCREEN</code> (workstation file).</li> <li>External Programs Called: None.</li> </ul> <p>If you have additional details (e.g., the <code>GL951PS1</code> or <code>AP991PFM</code> screen formats, <code>GSCONT</code> file structure, or external conditions setting <code>KG</code>), I can refine the analysis further.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/","title":"AP190 OCL Summary","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#list-of-use-cases-implemented-by-the-ap190ap195-program-suite","title":"List of Use Cases Implemented by the AP190/AP195 Program Suite","text":"<p>The <code>AP190.ocl36</code>, <code>AP190.rpg36</code>, and <code>AP195.rpg36</code> programs collectively implement a single primary use case for Accounts Payable (A/P) check reconciliation:</p> <ol> <li>A/P Cancelled Check Reconciliation and Reporting:</li> <li>Description: This use case allows users to enter, validate, and store cancelled check reconciliation data (company number, bank G/L number, check number, clear date, and clear amount) and generate a printed report summarizing the reconciled checks, grouped by company and bank G/L account with totals.</li> <li>Components:<ul> <li><code>AP190.ocl36</code>: Orchestrates file setup and program execution (calls <code>AP190</code> and <code>AP195</code>).</li> <li><code>AP190.rpg36</code>: Handles interactive data entry and validation through two screens (<code>AP190S1</code> for company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), updating the reconciliation transaction file (<code>APCRTR</code>).</li> <li><code>AP195.rpg36</code>: Generates a report listing cancelled checks with totals by bank G/L and company.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#function-requirement-document-for-ap-cancelled-check-reconciliation","title":"Function Requirement Document for A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#function-requirement-document-ap-cancelled-check-reconciliation","title":"Function Requirement Document: A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#overview","title":"Overview","text":"<p>The A/P Cancelled Check Reconciliation function processes and validates cancelled check data, storing reconciliation records and generating a summary report grouped by company and bank G/L account.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>, 2 bytes): Identifies the company.</li> <li>Bank G/L Number (<code>BKGL</code>, 8 bytes): Specifies the bank general ledger account.</li> <li>Check Number (<code>CHK#</code>, 6 bytes): Unique identifier for the check.</li> <li>Clear Date (<code>CLDT</code>, 6 digits, MMDDYY): Date the check cleared.</li> <li>Clear Amount (<code>CLAM</code>, 11.2 numeric): Amount cleared for the check.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Reconciliation Records: Stored in <code>APCRTR</code> file with company, bank G/L, check number, clear date, and clear amount.</li> <li>Printed Report: Lists cancelled checks with check number, clear date, clear amount, and totals by bank G/L and company, including company name, date, time, and page number.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code> and is not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Verify <code>CONO</code> + <code>BKGL</code> exists in <code>GLMAST</code> and is not deleted (<code>GLDEL \u2260 'D'</code>).</li> <li>Verify <code>CHK#</code> exists in <code>APCHKR</code>, is open (<code>AMCODE = 'O'</code>), and not deleted (<code>D</code>), reconciled (<code>R</code>), or voided (<code>V</code>).</li> <li>Validate <code>CLDT</code> as a valid date (MMDDYY, month 1\u201312, day 1\u201331 based on month/leap year).</li> <li> <p>Ensure <code>CLAM</code> matches the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>.</p> </li> <li> <p>Store Reconciliation Data:</p> </li> <li>Write or update <code>APCRTR</code> with <code>CONO</code>, <code>BKGL</code>, <code>CHK#</code>, <code>CLDT</code>, and <code>CLAM</code>.</li> <li> <p>Support deletion of existing <code>APCRTR</code> records.</p> </li> <li> <p>Generate Report:</p> </li> <li>Read <code>APCRTR</code> records, group by <code>CONO</code> and <code>BKGL</code>.</li> <li>Retrieve company name (<code>ACNAME</code>) from <code>APCONT</code>.</li> <li>Print headers (company name, bank G/L, date, time, page).</li> <li>List check details (<code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>).</li> <li>Calculate and print totals:<ul> <li>Bank G/L total (<code>L1CLAM</code>): Sum of <code>CLAM</code> for each bank G/L.</li> <li>Company total (<code>L2CLAM</code>): Sum of <code>L1CLAM</code> for each company.</li> </ul> </li> <li>Output after 21 detail lines or at group breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Invalid <code>CONO</code>, <code>BKGL</code>, or <code>CHK#</code> prevents processing.</li> <li><code>CLDT</code> must be a valid date, accounting for leap years (February 28/29, others 30/31 days).</li> <li><code>CLAM</code> must equal <code>AMCKAM</code> from <code>APCHKR</code>.</li> <li>Data Integrity:</li> <li>Only open checks (<code>AMCODE = 'O'</code>) are processed.</li> <li>Deleted records in <code>APCONT</code> or <code>GLMAST</code> are invalid.</li> <li>Reporting:</li> <li>Group by company and bank G/L, with subtotals and company totals.</li> <li>Include company name if available; otherwise, proceed without it.</li> <li>Format dates (MMDDYY) and amounts (11.2 decimal) for readability.</li> <li>Record Management:</li> <li>Allow updates or deletions in <code>APCRTR</code>.</li> <li>Ensure unique keys (<code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>) in <code>APCRTR</code>.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Date Validation:</li> <li>Extract month, day, year from <code>CLDT</code> (MMDDYY).</li> <li>Validate month (1\u201312).</li> <li>Validate day: February (28 or 29 for leap years), April/June/September/November (30), others (31).</li> <li>Leap year: If year divisible by 4 (or by 400 for century years), allow 29 days for February; else, 28.</li> <li>Construct 8-digit date (<code>CLDT8</code>, YYYYMMDD) using century (<code>Y2KCEN</code>) for Y2K compliance.</li> <li>Totals:</li> <li><code>L1CLAM</code> = Sum of <code>CLAM</code> for each bank G/L group.</li> <li><code>L2CLAM</code> = Sum of <code>L1CLAM</code> for each company.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#data-sources","title":"Data Sources","text":"<ul> <li>APCRTR: Stores reconciliation data (key: <code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>).</li> <li>APCONT: Provides company name (<code>ACNAME</code>) and deletion flag (<code>ACDEL</code>).</li> <li>GLMAST: Validates bank G/L (<code>GLDEL</code>, <code>GLDESC</code>).</li> <li>APCHKR: Provides check details (<code>AMCODE</code>, <code>AMVEN#</code>, <code>AMCKAM</code>, <code>AMCKDT</code>, <code>AMVNNM</code>).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/","title":"AP190 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP190.ocl36.txt</code>, used for Accounts Payable (A/P) check reconciliation in an IBM System/3x or AS/400 environment. Below, I\u2019ll break down the process steps, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#process-steps-of-the-ap190-ocl-program","title":"Process Steps of the AP190 OCL Program","text":"<p>OCL is a scripting language used to control job execution, file operations, and program invocation on IBM midrange systems. The program <code>AP190</code> handles A/P check reconciliation, performing file setup, validation, and editing. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Initial File Setup (BLDFILE):</li> <li> <p><code>// IFF DATAF1-?9?APCR?WS? BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code></p> <ul> <li>This command checks if the file <code>?9?APCR?WS?</code> (a work file for A/P check reconciliation) exists. If not, it creates it using the <code>BLDFILE</code> operation.</li> <li>Parameters:</li> <li><code>I</code>: Input mode.</li> <li><code>RECORDS,500</code>: Allocates space for 500 records.</li> <li><code>80</code>: Record length of 80 bytes.</li> <li><code>2,16</code>: Likely specifies key field attributes (e.g., key starts at position 2, length 16).</li> <li><code>DFILE,,50</code>: Indicates a disk file with a block size or extent of 50.</li> <li>Purpose: Ensures the work file <code>?9?APCR?WS?</code> is available for processing.</li> </ul> </li> <li> <p>Load and Execute AP190 Program:</p> </li> <li><code>// LOAD AP190</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?,EXTEND-100</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li><code>// FILE NAME-GLMAST,LABEL-?9?GLMAST,DISP-SHR</code></li> <li><code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP190: Loads the <code>AP190</code> program (likely an RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): The work file for check reconciliation transactions, with an extension of 100 records.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): A control file, opened in shared mode (<code>DISP-SHR</code>).</li> <li><code>GLMAST</code> (mapped to <code>?9?GLMAST</code>): General Ledger master file, opened in shared mode.</li> <li><code>APCHKR</code> (mapped to <code>?9?APCHKR</code>): A/P check reconciliation file, opened in shared mode.</li> <li>RUN: Executes the <code>AP190</code> program, which processes the check reconciliation data using these files.</li> <li>Purpose: The <code>AP190</code> program likely validates or processes check reconciliation data, updating or reading from the specified files.</li> </ul> </li> <li> <p>Conditional Check for File Existence:</p> </li> <li> <p><code>// IF ?F'A,?9?APCR?WS?'?/00000000 GOTO END</code></p> <ul> <li>This checks if the work file <code>?9?APCR?WS?</code> is empty or has no records (condition <code>?F'A</code> checks file attributes, and <code>/00000000</code> likely indicates zero records).</li> <li>If true, the program jumps to the <code>END</code> tag, skipping further processing.</li> <li>Purpose: Prevents unnecessary execution if there\u2019s no data to process.</li> </ul> </li> <li> <p>Display Message:</p> </li> <li> <p><code>// * 'A/P CHECK RECONCILIATION EDIT EXECUTING'</code></p> <ul> <li>Outputs a message to the console or log indicating that the A/P check reconciliation edit process is running.</li> <li>Purpose: Provides feedback to the operator about the program\u2019s status.</li> </ul> </li> <li> <p>Load and Execute AP195 Program:</p> </li> <li><code>// LOAD AP195</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP195: Loads the <code>AP195</code> program (another RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): Reuses the work file from the previous step.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): Reuses the control file in shared mode.</li> <li>RUN: Executes the <code>AP195</code> program.</li> <li>Purpose: The <code>AP195</code> program likely performs additional processing or validation on the check reconciliation data, such as generating reports or finalizing edits.</li> </ul> </li> <li> <p>End of Program:</p> </li> <li><code>// TAG END</code><ul> <li>Marks the end of the program execution.</li> <li>Purpose: Terminates the OCL script.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP190: The main program for A/P check reconciliation, likely responsible for initial data processing or validation. 2. AP195: A secondary program, possibly for further editing, reporting, or finalizing the reconciliation process.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables): 1. APCRTR (labeled <code>?9?APCR?WS?</code>):    - A work file used for check reconciliation transactions.    - Created or extended as needed. 2. APCONT (labeled <code>?9?APCONT</code>):    - A control file, likely containing configuration or reference data for A/P processing.    - Opened in shared mode (<code>DISP-SHR</code>). 3. GLMAST (labeled <code>?9?GLMAST</code>):    - General Ledger master file, containing financial account data.    - Opened in shared mode (<code>DISP-SHR</code>). 4. APCHKR (labeled <code>?9?APCHKR</code>):    - A/P check reconciliation file, likely storing check details or reconciliation status.    - Opened in shared mode (<code>DISP-SHR</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#summary","title":"Summary","text":"<p>The <code>AP190</code> OCL program orchestrates an A/P check reconciliation process by: 1. Creating or verifying the work file <code>APCRTR</code>. 2. Running the <code>AP190</code> program to process reconciliation data using <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>. 3. Skipping further execution if no data is present in <code>APCRTR</code>. 4. Running the <code>AP195</code> program for additional processing or reporting using <code>APCRTR</code> and <code>APCONT</code>. 5. Displaying status messages for operator feedback.</p> <p>External Programs: <code>AP190</code>, <code>AP195</code>. Files Used: <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/","title":"AP190 RPG","text":"<p>The provided RPG program, <code>AP190.rpg36</code>, is an RPG II or RPG/400 program designed for Accounts Payable (A/P) cancelled check entry and reconciliation, executed from the <code>AP190.ocl36</code> OCL program. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#process-steps-of-the-ap190-rpg-program","title":"Process Steps of the AP190 RPG Program","text":"<p>The program facilitates data entry and validation for cancelled checks through two display formats (<code>AP190S1</code> and <code>AP190S2</code>) on a workstation screen, performing checks against various files and updating the A/P check reconciliation work file (<code>APCRTR</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications:<ul> <li>Defines the program (<code>AP190</code>) and files: <code>SCREEN</code> (workstation display), <code>APCRTR</code> (update file), <code>APCONT</code> (control file), <code>GLMAST</code> (general ledger master), and <code>APCHKR</code> (check reconciliation file).</li> <li><code>SCREEN</code> uses <code>KINFSR ROLLKY</code> for handling roll keys (page up/down) and <code>KINFDS INFDS</code> for status information.</li> </ul> </li> <li>Indicator Setup:<ul> <li>Lines 0072\u20130074: Initializes indicators (30\u201334, 81\u201382, 90\u201391) to off, ensuring a clean state.</li> <li>Line 0075: Clears the message field (<code>MSG60</code>) to blanks.</li> </ul> </li> <li> <p>Purpose: Prepares the program environment for processing user input and file operations.</p> </li> <li> <p>Handle Roll Keys:</p> </li> <li>Subroutine ROLLKY (Lines 0357\u20130363):<ul> <li>Checks workstation status codes (<code>STATUS</code>) to detect roll forward (up, code 01122, sets indicator 18) or roll backward (down, code 01123, sets indicator 19).</li> </ul> </li> <li>Subroutine ROLLFW (Roll Forward) (Lines 0365\u20130380):<ul> <li>Reads the next record from <code>APCRTR</code> using <code>SCKEY</code> (search key, company + bank G/L + check number).</li> <li>If a record is found (<code>N60</code>), moves the key (<code>ATKEY</code>) to <code>SCKEY</code>, calls <code>S1</code> to display, and sets indicators.</li> <li>If end-of-file (<code>60</code>), displays message \u201cEND OF FILE HAS BEEN REACHED\u201d and clears fields.</li> </ul> </li> <li>Subroutine ROLLBW (Roll Backward) (Lines 0382\u20130394):<ul> <li>Reads the previous record from <code>APCRTR</code> using <code>SCKEY</code>.</li> <li>Similar logic to <code>ROLLFW</code>, but displays \u201cBEGIN OF FILE HAS BEEN REACHED\u201d if no prior record exists.</li> </ul> </li> <li> <p>Purpose: Allows users to navigate through <code>APCRTR</code> records using roll keys.</p> </li> <li> <p>Process Function Keys:</p> </li> <li>KA (Rekey, No Add/Update) (Lines 0080\u20130085):<ul> <li>Calls <code>CLEAR</code> subroutine to reset fields, sets indicators (32, 81 on; 01, 02, 09 off), and jumps to <code>END</code>.</li> </ul> </li> <li>KD (Delete Record) (Lines 0087\u20130092):<ul> <li>Calls <code>DELETE</code> subroutine to remove a record from <code>APCRTR</code>, sets indicators, and jumps to <code>END</code>.</li> </ul> </li> <li>KG (End of Job) (Lines 0094\u20130099):<ul> <li>Sets the Last Record (<code>LR</code>) indicator to terminate the program, clears indicators, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Purpose: Handles user commands for rekeying, deleting, or ending the job.</p> </li> <li> <p>Screen 1 Processing (AP190S1, Subroutine S1) (Lines 0114\u20130184):</p> </li> <li>Input Validation:<ul> <li>Reads user input: company number (<code>CONO</code>), bank G/L number (<code>BKGL</code>), and check number (<code>CHK#</code>).</li> <li>Company Validation (Lines 0116\u20130123):</li> <li>Chains to <code>APCONT</code> using <code>CONO</code>. If not found (<code>30</code>) or deleted (<code>ACDEL = 'D'</code>), sets error indicators (81, 90), displays \u201cINVALID COMPANY #\u201d, and exits.</li> <li>Moves company name (<code>ACNAME</code>) to <code>CONONM</code> for display.</li> <li>Bank G/L Validation (Lines 0125\u20130135):</li> <li>Constructs <code>GLKEY</code> from <code>CONO</code> and <code>BKGL</code>, chains to <code>GLMAST</code>. If not found (<code>31</code>) or deleted (<code>GLDEL = 'D'</code>), sets error indicators, displays \u201cINVALID BANK G/L #\u201d, and exits.</li> <li>Moves G/L description (<code>GLDESC</code>) to <code>BKGLNM</code>.</li> <li>Check Validation (Lines 0137\u20130172):</li> <li>Chains to <code>APCHKR</code> using <code>SCKEY</code> (company + bank G/L + check #). If not found (<code>32</code>), sets error indicators, displays \u201cCHECK # NOT FOUND\u201d or other status messages based on <code>AMCODE</code>:<ul> <li><code>D</code>: \u201cCHECK WAS PREVIOUSLY DELETED\u201d.</li> <li><code>R</code>: \u201cCHECK IS ALREADY RECONCILED\u201d.</li> <li><code>V</code>: \u201cCHECK WAS PREVIOUSLY VOIDED\u201d.</li> <li><code>O</code>: Valid open check; moves vendor number (<code>AMVEN#</code>), check amount (<code>AMCKAM</code>), check date (<code>AMCKDT</code>), and vendor name (<code>AMVNNM</code>) to variables.</li> </ul> </li> <li>Chains to <code>APCRTR</code> to check for existing reconciliation record (<code>SCKEY</code>). If found (<code>N92</code>), retrieves clear date (<code>ATCLDT</code>) and amount (<code>ATCLAM</code>); if not, sets indicator 34 for new record.</li> </ul> </li> <li>Display:<ul> <li>Sets indicator 82 to display <code>AP190S2</code> (next screen) if no errors (81 off).</li> <li>Outputs <code>AP190S1</code> with company, bank G/L, check number, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates user-entered company, bank G/L, and check number, retrieving associated data for display.</p> </li> <li> <p>Screen 2 Processing (AP190S2, Subroutine S2) (Lines 0186\u20130217):</p> </li> <li>Input Validation:<ul> <li>Reads clear date (<code>CLDT</code>, <code>CLYY</code>) and clear amount (<code>CLAM</code>) from the user.</li> <li>Date Validation (Lines 0188\u20130205):</li> <li>Tests <code>DPCLDT</code> (clear date) for valid numeric format using <code>TESTB</code>. If invalid (<code>99</code>), restores saved date (<code>SVCLDT</code>) and proceeds.</li> <li>Calls subroutine <code>DTEDIT</code> to validate <code>CLDT</code> (MMDDYY format):<ul> <li>Breaks down date into month (<code>$MONTH</code>), day (<code>$DAY</code>), and year (<code>$YR</code>).</li> <li>Validates month (1\u201312) and day based on month and leap year rules (e.g., February 28/29, other months 30/31).</li> <li>Handles Y2K compliance by determining century (<code>Y2KCEN</code>) and constructing an 8-digit date (<code>CLDT8</code>).</li> <li>Sets indicator 79 if the date is invalid, displaying \u201cCLEAR DATE IS INVALID\u201d.</li> </ul> </li> <li>Amount Validation (Lines 0207\u20130210):</li> <li>Compares clear amount (<code>CLAM</code>) to check amount (<code>AMCKAM</code>). If mismatched (<code>34</code>), sets error indicators (82, 90), displays \u201cCLEAR AMOUNT DOES NOT MATCH\u201d, and exits.</li> </ul> </li> <li>Record Update:<ul> <li>If no errors, writes or updates <code>APCRTR</code> with <code>OUTREC</code> (clear amount, date, and key).</li> <li>Calls <code>CLEAR</code> to reset fields and sets indicator 32 for the next entry.</li> </ul> </li> <li>Display:<ul> <li>Outputs <code>AP190S2</code> with company, bank G/L, check number, vendor details, check date/amount, clear date/amount, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates and stores the clear date and amount, updating the reconciliation file.</p> </li> <li> <p>Clear Subroutine (Lines 0334\u20130347):</p> </li> <li>Resets fields: <code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>, <code>VEN#</code>, <code>CKAM</code>, <code>CKDT</code>, <code>VEN#NM</code>, and <code>CLDT8</code> to zeros or blanks.</li> <li>Saves <code>CLDT</code> to <code>SVCLDT</code> for recovery.</li> <li> <p>Purpose: Clears variables for the next entry.</p> </li> <li> <p>Delete Subroutine (Lines 0349\u20130355):</p> </li> <li>Chains to <code>APCRTR</code> using <code>SCKEY</code>. If found (<code>N92</code>), writes a delete record (<code>DELREC</code>).</li> <li>Calls <code>CLEAR</code> to reset fields.</li> <li> <p>Purpose: Deletes a reconciliation record from <code>APCRTR</code>.</p> </li> <li> <p>Program Termination (Line 0110):</p> </li> <li>Jumps to <code>END</code> tag after processing, resetting roll key indicators (18, 19).</li> <li>Purpose: Completes the program cycle.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/P check reconciliation: 1. Company Validation:    - The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>). 2. Bank G/L Validation:    - The bank G/L number (<code>BKGL</code>) combined with <code>CONO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>). 3. Check Validation:    - The check number (<code>CHK#</code>) must exist in <code>APCHKR</code> and have a valid status (<code>AMCODE = 'O'</code> for open checks).    - Checks with <code>AMCODE</code> of <code>D</code> (deleted), <code>R</code> (reconciled), or <code>V</code> (voided) are invalid for processing. 4. Clear Date Validation:    - The clear date (<code>CLDT</code>) must be a valid date in MMDDYY format, with proper month (1\u201312) and day (28\u201331, accounting for leap years).    - Handles Y2K compliance by determining the century based on <code>Y2KCMP</code> and <code>Y2KCEN</code>. 5. Clear Amount Validation:    - The clear amount (<code>CLAM</code>) must match the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>. 6. Record Management:    - Existing <code>APCRTR</code> records can be updated or deleted; new records are added if none exist.    - Duplicate key processing is supported by redefining <code>CLDT</code> as alphanumeric (<code>DPCLDT</code>) for validation. 7. User Interface:    - Errors are displayed on the screen with specific messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cCLEAR DATE IS INVALID\u201d).    - Roll keys allow navigation through existing reconciliation records.    - Function keys (<code>KA</code>, <code>KD</code>, <code>KG</code>) control rekeying, deletion, or program termination.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN:    - Workstation file for display formats <code>AP190S1</code> (input company, bank G/L, check number) and <code>AP190S2</code> (input clear date, amount, and display vendor/check details).    - Record length: 500 bytes. 2. APCRTR:    - Update file (UF) for check reconciliation transactions.    - Keyed by <code>ATKEY</code> (16 bytes, company + bank G/L + check number).    - Fields: <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 3. APCONT:    - Input file (IC) for company control data.    - Keyed by company number (2 bytes).    - Fields: <code>ACDEL</code> (delete flag), <code>ACNAME</code> (company name).    - Record length: 256 bytes. 4. GLMAST:    - Input file (IC) for general ledger master data.    - Keyed by <code>GLKEY</code> (11 bytes, company + bank G/L).    - Fields: <code>GLDEL</code> (delete flag), <code>GLDESC</code> (description).    - Record length: 256 bytes. 5. APCHKR:    - Input file (IC) for check reconciliation data.    - Keyed by check number (16 bytes).    - Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMVEN#</code> (vendor number), <code>AMCKAM</code> (check amount), <code>AMCKDT</code> (check date), <code>AMVNNM</code> (vendor name).    - Record length: 128 bytes.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call any external programs. All processing is handled within <code>AP190</code> through its subroutines (<code>S1</code>, <code>S2</code>, <code>DTEDIT</code>, <code>CLEAR</code>, <code>DELETE</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#summary","title":"Summary","text":"<p>The <code>AP190</code> RPG program is a data entry and validation tool for A/P check reconciliation: - Process: Displays two screens (<code>AP190S1</code> for inputting company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), validates inputs against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and updates <code>APCRTR</code>. Supports navigation (roll keys), deletion, and rekeying. - Business Rules: Ensures valid company, bank G/L, and check data; enforces date and amount accuracy; manages record updates/deletions; and provides error feedback. - Files Used: <code>SCREEN</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>. - External Programs: None.</p> <p>This program integrates with the <code>AP190.ocl36</code> OCL script, which sets up files and calls <code>AP190</code> and <code>AP195</code> for a complete reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/","title":"AP195 RPG","text":"<p>The provided RPG program, <code>AP195.rpg36</code>, is an RPG II or RPG/400 program called from the <code>AP190.ocl36</code> OCL program as part of the Accounts Payable (A/P) check reconciliation process. It generates a report listing cancelled checks, including totals by bank G/L account and company. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#process-steps-of-the-ap195-rpg-program","title":"Process Steps of the AP195 RPG Program","text":"<p>The program reads the A/P check reconciliation transaction file (<code>APCRTR</code>), retrieves company information from the control file (<code>APCONT</code>), and produces a printed report on the <code>LIST</code> file with details of cancelled checks, subtotals by bank G/L account, and company totals. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications (Lines 0002\u20130011):<ul> <li>Defines the program (<code>AP195</code>) and files:</li> <li><code>APCRTR</code>: Input primary file (IP) for check reconciliation transactions.</li> <li><code>APCONT</code>: Input control file (IC) for company data.</li> <li><code>LIST</code>: Output file (O) for the printer, producing the report.</li> <li><code>APCRTR</code> is keyed by a 16-byte field (company + bank G/L + check number).</li> <li><code>APCONT</code> is keyed by a 2-byte company number.</li> </ul> </li> <li>Data Structures (Lines 0014\u20130022):<ul> <li>Defines input fields for <code>APCRTR</code>: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).</li> <li>Defines <code>ACNAME</code> (company name) from <code>APCONT</code>.</li> </ul> </li> <li> <p>Purpose: Sets up the environment for reading transaction data and generating the report.</p> </li> <li> <p>Report Initialization (Lines 0025\u20130032):</p> </li> <li>Level 2 (L2) Processing (Company-level):<ul> <li>Executes at the start of a new company (<code>L2</code> indicator).</li> <li>Retrieves the current time and date (<code>TIME</code> to <code>TIMDAT</code>, split into <code>SYSTIM</code> and <code>SYSDAT</code>).</li> <li>Initializes the separator line (<code>SEP</code>) to <code>'* '</code>.</li> <li>Resets the page number (<code>PAGE</code>) to zero.</li> <li>Chains to <code>APCONT</code> using <code>ATCONO</code> (company #). If not found (<code>92</code>), <code>ACNAME</code> is not updated.</li> <li>Resets the company total clear amount (<code>L2CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Prepares headers and totals for each company in the report.</p> </li> <li> <p>Bank G/L Level Processing (Lines 0038\u20130040):</p> </li> <li>Level 1 (L1) Processing (Bank G/L-level):<ul> <li>Executes at the start of a new bank G/L number (<code>L1</code> indicator).</li> <li>Resets the bank G/L total clear amount (<code>L1CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Initializes subtotals for each bank G/L account within a company.</p> </li> <li> <p>Detail Processing and Accumulation (Lines 0042\u20130044):</p> </li> <li>For each <code>APCRTR</code> record:<ul> <li>Adds the clear amount (<code>ATCLAM</code>) to the bank G/L total (<code>L1CLAM</code>).</li> <li>At the <code>L1</code> break (change in bank G/L), adds <code>L1CLAM</code> to the company total (<code>L2CLAM</code>).</li> </ul> </li> <li> <p>Purpose: Accumulates totals for reporting at both bank G/L and company levels.</p> </li> <li> <p>Report Output (Lines 0047\u20130082):</p> </li> <li>Header Output (Lines 0047\u20130072):<ul> <li>At <code>L1</code> break or overflow (<code>OFNL1</code>):</li> <li>Outputs company name (<code>ACNAME</code>) if found (<code>N92</code>).</li> <li>Prints page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Prints report title (\u201cA/P CANCELLED CHECKS EDIT\u201d) and bank G/L number (<code>ATBKGL</code>).</li> <li>Outputs column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Prints separator lines (<code>SEP</code>).</li> </ul> </li> <li>Detail Lines (Lines 0073\u20130076):<ul> <li>For each <code>APCRTR</code> record (<code>01</code> indicator):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> </ul> </li> <li>Total Lines (Lines 0077\u20130082):<ul> <li>At <code>L1</code> break (after 21 lines, <code>T 21 L1</code>): Prints bank G/L total (<code>L1CLAM</code>) with label \u201cBANK G/L # TOTAL\u201d.</li> <li>At <code>L2</code> break (after 21 lines, <code>T 21 L2</code>): Prints company total (<code>L2CLAM</code>) with label \u201cCOMPANY TOTAL\u201d.</li> </ul> </li> <li>Purpose: Generates a formatted report with check details and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for the A/P cancelled checks edit report: 1. Data Source:    - Reads all records from <code>APCRTR</code> sequentially, grouped by company (<code>ATCONOL2</code>) and bank G/L number (<code>ATBKGLL1</code>). 2. Company Validation:    - Attempts to retrieve company name (<code>ACNAME</code>) from <code>APCONT</code> using <code>ATCONO</code>. If not found, the report omits the company name but continues processing. 3. Report Structure:    - Organizes the report by company (<code>L2</code>) and bank G/L number (<code>L1</code>), with subtotals for each bank G/L and company.    - Includes headers with company name, bank G/L number, date, time, and page number.    - Lists check number, clear date, and clear amount for each transaction.    - Prints totals after 21 detail lines or at level breaks (<code>L1</code>, <code>L2</code>). 4. Formatting:    - Uses a separator line (<code>SEP = '* '</code>) to visually distinguish sections.    - Formats dates (<code>ATCLDT</code>, <code>SYSDAT</code>) and amounts (<code>ATCLAM</code>, <code>L1CLAM</code>, <code>L2CLAM</code>) for readability (e.g., <code>Z</code> for zero suppression, <code>M</code> for monetary format, <code>Y</code> for date format). 5. Accumulation:    - Accumulates clear amounts (<code>ATCLAM</code>) into bank G/L totals (<code>L1CLAM</code>) and company totals (<code>L2CLAM</code>) for accurate reporting.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. APCRTR:    - Input primary file (IP) for check reconciliation transactions.    - Keyed by a 16-byte field (company + bank G/L + check number).    - Fields: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 2. APCONT:    - Input control file (IC) for company data.    - Keyed by company number (2 bytes).    - Field: <code>ACNAME</code> (company name).    - Record length: 256 bytes. 3. LIST:    - Output file (O) for the printed report.    - Record length: 132 bytes (standard printer width).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. All processing is handled within <code>AP195</code> using its RPG logic.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#summary","title":"Summary","text":"<p>The <code>AP195</code> RPG program generates a report for A/P cancelled checks: - Process: Reads <code>APCRTR</code> for check reconciliation data, retrieves company names from <code>APCONT</code>, accumulates totals by bank G/L and company, and outputs a formatted report to <code>LIST</code> with headers, detail lines, and totals. - Business Rules: Groups data by company and bank G/L, validates company numbers, formats output for readability, and provides totals after 21 lines or level breaks. - Files Used: <code>APCRTR</code> (input), <code>APCONT</code> (input), <code>LIST</code> (output). - External Programs: None.</p> <p>This program complements the <code>AP190</code> program (data entry and validation) by producing a final edit report, as orchestrated by the <code>AP190.ocl36</code> OCL script.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/","title":"AP192 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program used on IBM System/36 or AS/400 systems to manage Accounts Payable (A/P) check reconciliation uploads and edits from PNC. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script outlines a sequence of operations for processing A/P check reconciliation data. Here\u2019s a step-by-step breakdown of the program\u2019s logic:</p> <ol> <li>Initial Setup and Conditional File Deletion:</li> <li>The program checks if a file named <code>?9?APCR?WS?</code> exists in <code>DATAF1</code>.</li> <li>If the file exists (<code>IFF DATAF1-?9?APCR?WS?</code>), it is deleted (<code>DELETE ?9?APCR?WS?,F1</code>).</li> <li> <p>This ensures that any previous version of the working file is removed before proceeding, preventing data conflicts.</p> </li> <li> <p>Conditional File Creation:</p> </li> <li>If the file <code>?9?APCR?WS?</code> does not exist in <code>DATAF1</code> or after deletion, the program creates a new file (<code>BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code>).</li> <li> <p>The <code>BLDFILE</code> command specifies:</p> <ul> <li>File name: <code>?9?APCR?WS?</code></li> <li>Type: Indexed file (<code>I</code>)</li> <li>Initial record count: 500 records</li> <li>Record length: 80 bytes</li> <li>Other parameters: Likely related to file attributes like key length (2 bytes) and key position (16th byte).</li> <li>File is created in <code>DFILE</code> with a block size of 50.</li> </ul> </li> <li> <p>Conditional Branching:</p> </li> <li>The program checks if the file <code>?9?APCR?WS?</code> has a specific condition (<code>?F'A,?9?APCR?WS?'?/00000000</code>).</li> <li> <p>If the condition is met (likely checking if the file is empty or has no records), the program branches to the <code>SKIP</code> tag, bypassing the execution of <code>AP192</code>.</p> </li> <li> <p>Execution of AP192:</p> </li> <li>If the condition in step 3 is not met (i.e., the file exists and has data), the program proceeds to load and run the <code>AP192</code> program.</li> <li>Files used by <code>AP192</code>:<ul> <li><code>APCHKUP</code> (labeled <code>?9?APCHKUP</code>, disposition <code>SHR</code> for shared access): Likely the input file containing check reconciliation data uploaded from PNC.</li> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>, extendable by 100 records): The working file for check reconciliation transactions.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP192</code>, which presumably processes the uploaded check data and updates the <code>APCRTR</code> file.</p> </li> <li> <p>Execution of AP193:</p> </li> <li>After <code>AP192</code> completes (or if the program branches to <code>SKIP</code>), the program loads and runs the <code>AP193</code> program.</li> <li>Files used by <code>AP193</code>:<ul> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>): The same working file used in <code>AP192</code>, containing processed check reconciliation data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, disposition <code>SHR</code>): Likely a control file for A/P processing, containing configuration or summary data.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, disposition <code>SHR</code>): General Ledger master file, used for updating financial records.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, disposition <code>SHR</code>): A file likely used for storing reconciled check data or audit trails.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP193</code>, which likely finalizes the reconciliation process, updates the General Ledger, and stores results in the appropriate files.</p> </li> <li> <p>Program Flow Control:</p> </li> <li>The <code>TAG SKIP</code> label serves as a branching point. If the file <code>?9?APCR?WS?</code> is empty or meets the condition in step 3, the program skips <code>AP192</code> and proceeds directly to <code>AP193</code>.</li> <li>This ensures that <code>AP193</code> runs regardless of whether <code>AP192</code> was executed, providing a consistent final processing step.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. AP192: Handles the initial processing of A/P check reconciliation data, likely validating and uploading data from <code>APCHKUP</code> to <code>APCRTR</code>. 2. AP193: Performs final processing, such as updating the General Ledger (<code>GLMAST</code>), reconciling checks in <code>APCHKR</code>, and using control data from <code>APCONT</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files (referred to as tables in some contexts): 1. APCHKUP (<code>?9?APCHKUP</code>): Input file containing check reconciliation data uploaded from PNC. Used by <code>AP192</code>. 2. APCRTR (<code>?9?APCR?WS?</code>): Working file for check reconciliation transactions, created or deleted as needed. Used by both <code>AP192</code> and <code>AP193</code>. 3. APCONT (<code>?9?APCONT</code>): Control file for A/P processing, likely containing configuration or summary data. Used by <code>AP193</code>. 4. GLMAST (<code>?9?GLMAST</code>): General Ledger master file, used for financial updates. Used by <code>AP193</code>. 5. APCHKR (<code>?9?APCHKR</code>): File for reconciled check data or audit trails. Used by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#summary","title":"Summary","text":"<p>The OCL program orchestrates an A/P check reconciliation process by: - Managing the lifecycle of a working file (<code>APCRTR</code>) through deletion and creation. - Conditionally running <code>AP192</code> to process uploaded check data if the working file has valid data. - Always running <code>AP193</code> to finalize reconciliation, update the General Ledger, and store results. - The program uses shared files (<code>SHR</code> disposition) to allow concurrent access and extends the <code>APCRTR</code> file as needed.</p> <p>External Programs: <code>AP192</code>, <code>AP193</code> Files Used: <code>APCHKUP</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code></p> <p>If you need further clarification or details about specific file formats or program logic, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/","title":"AP192 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP192</code> for the IBM System/36 or AS/400, called from the OCL program previously discussed. It is designed to populate an Accounts Payable (A/P) check reconciliation workfile (<code>APCRTR</code>) from data uploaded from PNC (<code>APCHKUP</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#process-steps-of-the-rpg-program-ap192","title":"Process Steps of the RPG Program (AP192)","text":"<p>The RPG program reads records from the input file <code>APCHKUP</code>, processes them, and writes formatted records to the output file <code>APCRTR</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File Definitions:</li> <li>Input File (<code>APCHKUP</code>):<ul> <li>Defined as a primary input file (<code>IP</code>) with a record length of 25 bytes (<code>FAPCHKUP IP F 25 25 DISK</code>).</li> <li>Fields are extracted from positions 1 to 25 of each record.</li> </ul> </li> <li> <p>Output File (<code>APCRTR</code>):</p> <ul> <li>Defined as an output file (<code>O</code>) with a record length of 80 bytes (<code>FAPCRTR O F 80 80 16AI 2 DISK</code>).</li> <li>Indexed file (<code>AI</code>) with a key length of 2 bytes starting at position 16.</li> <li>The <code>A</code> indicator suggests append mode, allowing new records to be added.</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li> <p>The input file <code>APCHKUP</code> is read using a non-sequenced record (<code>NS 01</code>) and fields are mapped as follows:</p> <ul> <li><code>CHECK#</code> (positions 1\u20136): Check number (likely a numeric or alphanumeric identifier).</li> <li><code>AMOUNT</code> (positions 7\u201317): Check amount, including vendor number data (likely a packed or zoned decimal field).</li> <li><code>YEAR</code> (positions 18\u201321): Four-digit year of the check date.</li> <li><code>YEAR2</code> (positions 20\u201321): Two-digit year (subset of <code>YEAR</code>, possibly for compatibility).</li> <li><code>MONTH</code> (positions 22\u201323): Month of the check date.</li> <li><code>DAY</code> (positions 24\u201325): Day of the check date.</li> <li>Comments suggest additional fields like <code>VENDOR NUMBER</code> and <code>VENDOR NAME</code>, but these are not explicitly mapped in the provided code, possibly indicating a partial or simplified program listing.</li> </ul> </li> <li> <p>Processing Logic:</p> </li> <li>Indicator <code>N09</code> Check:<ul> <li>The program checks if indicator <code>09</code> is off (<code>N09</code>).</li> <li>If <code>09</code> is off, it sets a field <code>GLNUMB</code> (80 bytes) to a constant value <code>11000001</code> using <code>Z-ADD</code> (zero and add operation).</li> <li>It then sets indicator <code>09</code> on (<code>SETON 09</code>), ensuring this logic executes only once (likely for the first record or initialization).</li> </ul> </li> <li> <p>This suggests <code>GLNUMB</code> is a General Ledger number or a control field used in the output file, initialized to a default value.</p> </li> <li> <p>Output Record Writing:</p> </li> <li>The program writes records to <code>APCRTR</code> using the <code>DADD</code> operation (add a new record) for output specification <code>01</code> (<code>OAPCRTR DADD 01</code>).</li> <li>The output record is formatted as follows:<ul> <li>Position 1: A single space (<code>' '</code>) for padding or alignment.</li> <li>Positions 3\u20134: Hardcoded value <code>'10'</code> (possibly a transaction code or record type).</li> <li>Positions 5\u201311: <code>GLNUMB</code> (General Ledger number, set to <code>11000001</code>).</li> <li>Positions 12\u201317: <code>CHECK#</code> (check number from input).</li> <li>Positions 18\u201333: <code>AMOUNT</code> (check amount from input).</li> <li>Positions 34\u201341: <code>MONTH</code> (month of check date).</li> <li>Positions 42\u201343: <code>DAY</code> (day of check date).</li> <li>Positions 44\u201345: <code>YEAR2</code> (two-digit year).</li> <li>Positions 46\u201349: <code>YEAR</code> (four-digit year).</li> <li>Positions 50\u201351: <code>MONTH</code> (repeated, possibly for compatibility or formatting).</li> <li>Positions 52\u201353: <code>DAY</code> (repeated, possibly for compatibility or formatting).</li> </ul> </li> <li> <p>The output record is 80 bytes long, with fields explicitly positioned to match the file\u2019s structure.</p> </li> <li> <p>Program Flow:</p> </li> <li>The RPG program operates in a cycle-driven manner (typical of RPG II/III on System/36).</li> <li>It reads each record from <code>APCHKUP</code>, processes it (assigning <code>GLNUMB</code> for the first record), and writes a formatted record to <code>APCRTR</code>.</li> <li>The cycle continues until all input records are processed or an end-of-file condition is reached.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Data Transformation:    - Input data from <code>APCHKUP</code> (check number, amount, and date components) is reformatted into a structured output file (<code>APCRTR</code>) with additional fields like <code>GLNUMB</code> and a hardcoded transaction code (<code>'10'</code>).    - This suggests the program prepares data for downstream A/P reconciliation processes, ensuring compatibility with the system\u2019s database structure.</p> <ol> <li>Initialization of General Ledger Number:</li> <li>The <code>GLNUMB</code> field is initialized to <code>11000001</code> for the first record (or when indicator <code>09</code> is off), indicating a default or starting General Ledger account number.</li> <li> <p>The use of indicator <code>09</code> ensures this initialization happens only once, preventing overwrites for subsequent records.</p> </li> <li> <p>Data Validation:</p> </li> <li>The program assumes input data in <code>APCHKUP</code> is correctly formatted (e.g., check number in positions 1\u20136, amount in 7\u201317, etc.).</li> <li> <p>No explicit validation logic is shown, but the field mappings suggest reliance on the input file\u2019s structure being consistent.</p> </li> <li> <p>Output File Structure:</p> </li> <li>The output file <code>APCRTR</code> is indexed with a key starting at position 16 (likely the check number or a related field), facilitating efficient retrieval in subsequent processes (e.g., by <code>AP193</code>).</li> <li>Repeated fields (<code>MONTH</code> and <code>DAY</code>) in the output suggest compatibility with legacy systems or specific formatting requirements for downstream processing.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. APCHKUP:    - Input file (<code>IP</code>), 25 bytes per record.    - Contains check reconciliation data uploaded from PNC, including check number, amount, and date components. 2. APCRTR:    - Output file (<code>O</code>), 80 bytes per record, indexed with a 2-byte key starting at position 16.    - Stores processed check reconciliation data for further processing by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The provided RPG code does not explicitly call any external programs. It is a self-contained program that reads from <code>APCHKUP</code>, processes the data, and writes to <code>APCRTR</code>. However, it is called by the OCL program (as noted in the previous query) and works in conjunction with <code>AP193</code>, which processes the output file <code>APCRTR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#summary","title":"Summary","text":"<p>The <code>AP192</code> RPG program is responsible for populating the A/P check reconciliation workfile (<code>APCRTR</code>) from PNC upload data (<code>APCHKUP</code>). It: - Reads input records containing check number, amount, and date components. - Initializes a General Ledger number (<code>GLNUMB</code>) for the first record. - Formats and writes output records to <code>APCRTR</code> with additional fields like a transaction code (<code>'10'</code>) and repeated date fields for compatibility. - Uses a cycle-driven approach to process all input records.</p> <p>Business Rules: - Transform and reformat PNC upload data for A/P reconciliation. - Initialize <code>GLNUMB</code> once for the output file. - Ensure output records are structured for downstream processing.</p> <p>Tables Used: <code>APCHKUP</code> (input), <code>APCRTR</code> (output). External Programs Called: None directly in the RPG code, but <code>AP192</code> is part of a workflow with <code>AP193</code> via the OCL program.</p> <p>If you need further details, such as field format specifics (e.g., numeric vs. alphanumeric) or clarification on the System/36 environment, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/","title":"AP192 Summary Upload Checks to Clear","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of the OCL program (<code>AP192.ocl36.txt</code>), the RPG program <code>AP192</code> (<code>AP192.rpg36.txt</code>), and the RPG program <code>AP193</code> (<code>AP193.rpg36.txt</code>). Together, they implement a single primary use case for Accounts Payable (A/P) check reconciliation from PNC uploads:</p> <ol> <li>Process and Validate A/P Check Reconciliation Data from PNC:</li> <li>Description: This use case involves uploading check reconciliation data from PNC, transforming it into a structured workfile, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</li> <li>Components:<ul> <li>The OCL program orchestrates the workflow by managing file creation/deletion and invoking <code>AP192</code> and <code>AP193</code>.</li> <li><code>AP192</code> transforms PNC upload data (<code>APCHKUP</code>) into a workfile (<code>APCRTR</code>) with formatted records.</li> <li><code>AP193</code> validates the workfile data against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and generates a report (<code>LIST</code>) with errors and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#ap-check-reconciliation-function-requirements","title":"A/P Check Reconciliation Function Requirements","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#overview","title":"Overview","text":"<p>The A/P Check Reconciliation function processes and validates check reconciliation data uploaded from PNC, transforming it into a structured format, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#inputs","title":"Inputs","text":"<ul> <li>PNC Upload File (<code>APCHKUP</code>):</li> <li>Fields: Check number (6 bytes), amount (11 bytes), year (4 bytes), two-digit year (2 bytes), month (2 bytes), day (2 bytes).</li> <li>Format: Fixed-length records (25 bytes).</li> <li>Control Files:</li> <li><code>APCONT</code>: Company data (company code, name, deletion flag).</li> <li><code>GLMAST</code>: General Ledger data (G/L number, description, deletion flag).</li> <li><code>APCHKR</code>: Historical check data (check number, status code, vendor number, check amount, check date, vendor name).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#outputs","title":"Outputs","text":"<ul> <li>Workfile (<code>APCRTR</code>):</li> <li>Fields: Company code, G/L number (default: 11000001), check number, clear amount, clear date (year, two-digit year, month, day, repeated month/day).</li> <li>Format: Fixed-length records (80 bytes, indexed).</li> <li>Report (<code>LIST</code>):</li> <li>Content: Company and G/L headers, check details (check number, clear date, clear amount), error messages, G/L and company totals.</li> <li>Format: Printer file (132 bytes).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#process-steps","title":"Process Steps","text":"<ol> <li>File Management:</li> <li>Delete existing <code>APCRTR</code> workfile if present.</li> <li> <p>Create new <code>APCRTR</code> workfile (500 records, 80 bytes, indexed, 2-byte key at position 16) if it doesn\u2019t exist.</p> </li> <li> <p>Data Transformation (via <code>AP192</code>):</p> </li> <li>Read <code>APCHKUP</code> records.</li> <li>Map fields: check number, amount, year, two-digit year, month, day.</li> <li>Add default G/L number (11000001) and transaction code (\u201810\u2019).</li> <li> <p>Write formatted records to <code>APCRTR</code>.</p> </li> <li> <p>Validation and Reporting (via <code>AP193</code>):</p> </li> <li>Read <code>APCRTR</code> records.</li> <li>Validate:<ul> <li>Company code exists in <code>APCONT</code> and is not deleted.</li> <li>G/L number exists in <code>GLMAST</code> and is not deleted.</li> <li>Check number exists in <code>APCHKR</code> and is not deleted, reconciled, voided, or non-open.</li> <li>Clear amount matches <code>APCHKR</code> check amount.</li> </ul> </li> <li>Log errors for invalid records (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li>Accumulate clear amounts for valid records by G/L (<code>L2CLAM</code>) and company (<code>L3CLAM</code>).</li> <li>Generate report (<code>LIST</code>) with headers, check details, errors, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company code must exist in <code>APCONT</code> and not be marked deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li>G/L number must exist in <code>GLMAST</code> and not be marked deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</li> <li>Check number must exist in <code>APCHKR</code> with status code \u2018O\u2019 (open), not \u2018D\u2019 (deleted), \u2018R\u2019 (reconciled), or \u2018V\u2019 (voided).</li> <li> <p>Clear amount in <code>APCRTR</code> must match check amount in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Log errors for invalid company, G/L, check status, or amount mismatch.</li> <li>Increment error counter for each validation failure.</li> <li> <p>Include error messages in the report.</p> </li> <li> <p>Calculations:</p> </li> <li>Initialize G/L and company totals to zero.</li> <li>Add clear amount to G/L total (<code>L2CLAM</code>) and company total (<code>L3CLAM</code>) for valid records.</li> <li> <p>Report totals at G/L and company levels.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Include company name, G/L number, date, time, and bank info in headers.</li> <li>List check number, clear date, clear amount, and errors for each record.</li> <li>Print G/L and company totals at respective breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#assumptions","title":"Assumptions","text":"<ul> <li>Input file <code>APCHKUP</code> is correctly formatted with valid data.</li> <li>Control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) are up-to-date and accessible.</li> <li>Output workfile <code>APCRTR</code> is used by downstream processes (not covered in this function).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/","title":"AP193 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP193</code> for the IBM System/36 or AS/400, called from the OCL program discussed previously. It serves as an edit program for Accounts Payable (A/P) check reconciliation data uploaded from PNC, validating data in the workfile (<code>APCRTR</code>) against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and producing a report (<code>LIST</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#process-steps-of-the-rpg-program-ap193","title":"Process Steps of the RPG Program (AP193)","text":"<p>The <code>AP193</code> program reads records from the A/P check reconciliation workfile (<code>APCRTR</code>), validates them against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), accumulates totals, and generates a report (<code>LIST</code>) with validation results and errors. Here\u2019s a step-by-step breakdown:</p> <ol> <li>File Definitions:</li> <li>Input Files:<ul> <li><code>APCRTR</code> (Primary Input, <code>IP</code>, 80 bytes, indexed with 2-byte key at position 16): Workfile containing check reconciliation data from <code>AP192</code>.</li> <li><code>APCONT</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 2): A/P control file with company or configuration data.</li> <li><code>GLMAST</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 11): General Ledger master file for account validation.</li> <li><code>APCHKR</code> (Input Control, <code>IC</code>, 128 bytes, indexed with 2-byte key at position 16): A/P check reconciliation file with historical check data.</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>, 132 bytes, printer file): Generates a report detailing check reconciliation results, errors, and totals.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li><code>COM</code> (Error message array, 10 elements, 30 bytes each): Stores error messages (e.g., \"INVALID CHECK #\", \"CHECK NOT FOUND\").</li> <li><code>SEP</code> (66-byte array, 2 elements): Likely used for report separators (e.g., lines or spaces).</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li>APCRTR (Primary Input):<ul> <li><code>ATKEY</code> (positions 2\u201317): Key field (likely check number).</li> <li><code>ATCO</code> (positions 2\u20133): Company code, used for <code>L3</code> (company-level) totaling.</li> <li><code>ATGL#</code> (positions 4\u201311): General Ledger number, used for <code>L2</code> (G/L-level) totaling.</li> <li><code>ATCHK#</code> (positions 12\u201317): Check number, used for validation.</li> <li><code>ATCLAM</code> (positions 23\u201333): Clear amount (check amount to be reconciled).</li> <li><code>ATCLDT</code> (positions 40\u201345): Clear date (date the check cleared).</li> </ul> </li> <li>APCONT (Control):<ul> <li><code>ACDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>ACNAME</code> (positions 4\u201333): Company name.</li> </ul> </li> <li>GLMAST (Control):<ul> <li><code>GLDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>GLDESC</code> (positions 13\u201337): General Ledger description.</li> </ul> </li> <li>APCHKR (Control):<ul> <li><code>AMCODE</code> (position 1): Check status code (\u2018D\u2019, \u2018O\u2019, \u2018R\u2019, \u2018V\u2019 for deleted, open, reconciled, voided).</li> <li><code>AMVEN#</code> (positions 18\u201322): Vendor number.</li> <li><code>AMCKAM</code> (positions 23\u201333): Check amount.</li> <li><code>AMCKDT</code> (positions 34\u201339): Check date.</li> <li><code>AMVNNM</code> (positions 46\u201375): Vendor name.</li> </ul> </li> <li> <p>UDS (User Data Structure):</p> <ul> <li><code>Y2KCEN</code> (positions 509\u2013510): Century for Y2K handling.</li> <li><code>Y2KCMP</code> (positions 511\u2013512): Company code for Y2K.</li> </ul> </li> <li> <p>Initialization (N09 Block):</p> </li> <li>If indicator <code>09</code> is off (<code>N09</code>), the program:<ul> <li>Initializes <code>L2CLAM</code> and <code>L3CLAM</code> (G/L and company clear amount totals) to zero (<code>Z-ADD*ZEROS</code>).</li> <li>Captures system time (<code>TIME</code>) and moves it to <code>TIMDAT</code> (12 bytes), then extracts <code>SYSTIM</code> (time, 6 bytes) and <code>SYSDAT</code> (date, 6 bytes).</li> <li>Sets <code>SEP</code> to <code>'* '</code> (separator for report).</li> <li>Initializes <code>PAGE</code> to zero for report pagination.</li> <li>Sets <code>GLKEY</code> to <code>'C'</code> (11 bytes, likely a default G/L key).</li> <li>Sets indicator <code>09</code> on to prevent re-execution.</li> </ul> </li> <li> <p>This block runs once at program start to set up variables and report parameters.</p> </li> <li> <p>Indicator and Variable Reset:</p> </li> <li>Indicators <code>30</code>, <code>31</code>, <code>32</code>, <code>33</code>, <code>34</code>, <code>81</code>, <code>90</code>, <code>91</code>, <code>92</code>, <code>93</code>, <code>94</code>, <code>95</code>, <code>96</code> are turned off (<code>SETOF</code>).</li> <li>Error message fields (<code>MSG</code>, <code>MSG1</code>\u2013<code>MSG6</code>) are cleared to blanks.</li> <li> <p><code>COUNT</code> (error counter) is reset to zero.</p> </li> <li> <p>Validation Logic:</p> </li> <li>Company Validation:<ul> <li>The program chains <code>ATCO</code> (company code from <code>APCRTR</code>) to <code>APCONT</code> (<code>CHAINAPCONT</code>, indicator <code>30</code>).</li> <li>If no record is found or <code>ACDEL</code> = \u2018D\u2019 (deleted), indicator <code>30</code> is set, and <code>CONONM</code> (company name) is cleared; otherwise, <code>CONONM</code> is set to <code>ACNAME</code>.</li> </ul> </li> <li>General Ledger Validation:<ul> <li>Constructs <code>GLKEY</code> by combining <code>ATCO</code> and <code>ATGL#</code> into <code>GLKY10</code> (10 bytes) and moving it to <code>GLKEY</code>.</li> <li>Chains <code>GLKEY</code> to <code>GLMAST</code> (<code>CHAINGLMAST</code>, indicator <code>31</code>).</li> <li>If no record is found or <code>GLDEL</code> = \u2018D\u2019 (deleted), indicator <code>31</code> is set, and <code>BKGLNM</code> (G/L description) is cleared; otherwise, <code>BKGLNM</code> is set to <code>GLDESC</code>.</li> </ul> </li> <li>Check Validation:<ul> <li>Chains <code>ATKEY</code> (check number) to <code>APCHKR</code> (<code>CHAINAPCHKR</code>, indicator <code>32</code>).</li> <li>If no record is found, sets indicator <code>90</code>, logs error \u201cCHECK # NOT FOUND\u201d (<code>COM,3</code>/<code>COM,4</code> to <code>MSG1</code>), increments <code>COUNT</code>, and branches to <code>AROUND</code> (skips further checks).</li> <li>Checks <code>AMCODE</code> in <code>APCHKR</code> for:</li> <li>\u2018D\u2019 (Deleted): Sets indicator <code>91</code>, logs \u201cCHECK WAS PREVIOUSLY DELETED\u201d (<code>COM,3</code>/<code>COM,5</code> to <code>MSG2</code>), increments <code>COUNT</code>.</li> <li>\u2018R\u2019 (Reconciled): Sets indicator <code>92</code>, logs \u201cCHECK IS ALREADY RECONCILED\u201d (<code>COM,3</code>/<code>COM,6</code> to <code>MSG3</code>), increments <code>COUNT</code>.</li> <li>\u2018V\u2019 (Voided): Sets indicator <code>93</code>, logs \u201cCHECK WAS PREVIOUSLY VOIDED\u201d (<code>COM,3</code>/<code>COM,7</code> to <code>MSG4</code>), increments <code>COUNT</code>.</li> <li>\u2018O\u2019 (Open): Sets indicator <code>94</code>, logs \u201cCHECK IS NOT OPEN\u201d (<code>COM,3</code>/<code>COM,8</code> to <code>MSG5</code>), increments <code>COUNT</code>.</li> <li>Compares <code>ATCLAM</code> (clear amount from <code>APCRTR</code>) to <code>AMCKAM</code> (check amount from <code>APCHKR</code>) (<code>COMP</code>, indicator <code>34</code>).</li> <li>If amounts don\u2019t match, sets indicator <code>95</code>, logs \u201cCLEAR AMOUNT DOES NOT MATCH\u201d (<code>COM,10</code> to <code>MSG6</code>), increments <code>COUNT</code>.</li> </ul> </li> <li> <p>If any validation fails, the program branches to <code>AROUND</code> to skip further processing for the record.</p> </li> <li> <p>Accumulation:</p> </li> <li> <p>If validations pass (no branch to <code>AROUND</code>), adds <code>ATCLAM</code> to <code>L2CLAM</code> (G/L total) and <code>L3CLAM</code> (company total).</p> </li> <li> <p>Report Generation:</p> </li> <li> <p>The program writes to the <code>LIST</code> printer file:</p> <ul> <li>Header (Level <code>L3</code>, Company-Level):</li> <li>Prints company name (<code>ACNAME</code>), page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), bank info, and report title (\u201cA/P CANCELLED CHECKS EDIT FROM PNC UPLOAD\u201d).</li> <li>Includes system time (<code>SYSTIM</code>) and separators (<code>SEP</code>).</li> <li>Column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Detail Lines (Level <code>01</code>):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> <li>If errors exist (indicators <code>90</code>\u2013<code>95</code>), prints corresponding error messages (<code>MSG1</code>\u2013<code>MSG6</code>) at position 110.</li> <li>Totals (Level <code>L2</code> and <code>L3</code>):</li> <li>At <code>L2</code> (G/L break), prints \u201cBANK G/L # TOTAL\u201d with <code>L2CLAM</code>.</li> <li>At <code>L3</code> (company break), prints \u201cCOMPANY TOTAL\u201d with <code>L3CLAM</code>.</li> </ul> </li> <li> <p>Program Flow:</p> </li> <li>The RPG cycle reads each <code>APCRTR</code> record, validates it against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, logs errors, accumulates totals, and writes report lines.</li> <li>The program continues until all <code>APCRTR</code> records are processed, producing a report with headers, detail lines, error messages, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Validation of Company and G/L:</li> <li>Each record\u2019s company code (<code>ATCO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li> <p>The G/L number (<code>ATGL#</code>) combined with <code>ATCO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>The check number (<code>ATKEY</code>) must exist in <code>APCHKR</code>.</li> <li>The check must not be deleted (<code>AMCODE \u2260 \u2018D\u2019</code>), reconciled (<code>AMCODE \u2260 \u2018R\u2019</code>), voided (<code>AMCODE \u2260 \u2018V\u2019</code>), or non-open (<code>AMCODE \u2260 \u2018O\u2019</code>).</li> <li> <p>The clear amount (<code>ATCLAM</code>) must match the check amount (<code>AMCKAM</code>) in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors are logged with predefined messages (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li> <p>Each error increments a counter (<code>COUNT</code>) and is printed in the report.</p> </li> <li> <p>Totaling:</p> </li> <li>Clear amounts are accumulated at the G/L level (<code>L2CLAM</code>) and company level (<code>L3CLAM</code>) for valid records.</li> <li> <p>Totals are printed at G/L and company breaks in the report.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company, date, time, and bank info.</li> <li>Detail lines show check number, clear date, clear amount, and any errors.</li> <li>Totals are printed for each G/L account and company.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APCRTR:</li> <li>Primary input file, 80 bytes, indexed.</li> <li>Contains check reconciliation data from <code>AP192</code> (check number, G/L number, company code, clear amount, clear date).</li> <li>APCONT:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores company data (name, deletion flag).</li> <li>GLMAST:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores General Ledger data (description, deletion flag).</li> <li>APCHKR:</li> <li>Input control file, 128 bytes, indexed.</li> <li>Stores historical check data (status code, vendor number, check amount, check date, vendor name).</li> <li>LIST:</li> <li>Output printer file, 132 bytes.</li> <li>Generates the reconciliation edit report.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP193</code> RPG program does not explicitly call any external programs. It is a self-contained program that processes input from <code>APCRTR</code>, validates against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and produces a report via <code>LIST</code>. It is called by the OCL program as part of the A/P reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#summary","title":"Summary","text":"<p>The <code>AP193</code> RPG program validates A/P check reconciliation data from <code>APCRTR</code> against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), logs errors, accumulates totals, and generates a report (<code>LIST</code>). It: - Validates company, G/L, and check data, ensuring records are not deleted, reconciled, or voided, and amounts match. - Logs errors with predefined messages and counts errors. - Accumulates clear amount totals at G/L and company levels. - Produces a formatted report with headers, detail lines, error messages, and totals.</p> <p>Business Rules: - Validate company, G/L, and check data for existence and status. - Ensure clear amounts match historical check amounts. - Log and report errors for invalid records. - Accumulate and report totals by G/L and company.</p> <p>Tables Used: <code>APCRTR</code> (input), <code>APCONT</code> (control), <code>GLMAST</code> (control), <code>APCHKR</code> (control), <code>LIST</code> (output). External Programs Called: None.</p> <p>If you need further details, such as specific field formats or deeper analysis of the report structure, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/","title":"AP290 OCL","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#ap290","title":"AP290","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#process-steps-of-the-ap290-ocl-program","title":"Process Steps of the AP290 OCL Program","text":"<p>The OCL program appears to be part of an Accounts Payable check reconciliation post process. Here\u2019s a step-by-step breakdown of the operations based on the provided code:</p> <ol> <li>Program Header and Identification:</li> <li>The lines <code>** A/P CHECK RECONCILIATION POST</code> and <code>// SCPROCP ,,,,,,,,?9?</code> indicate the program\u2019s purpose and possibly a procedure identifier (<code>SCPROCP</code>). The <code>?9?</code> is a placeholder for a specific value (e.g., library or system identifier) that is resolved at runtime.</li> <li> <p><code>// GSY2K</code> suggests a reference to a system or configuration, possibly related to Y2K compliance or a specific system module.</p> </li> <li> <p>User Interaction (Pause for Confirmation):</p> </li> <li>The line <code>// * 'A/P CHECK RECONCILIATION POST'</code> displays a message to the user, indicating the program\u2019s purpose.</li> <li> <p><code>// PAUSE 'TO CANCEL--PRESS ATTN,2,ENTER  TO CONTINUE--PRESS 0,ENTER'</code> prompts the user to either cancel the process (by pressing ATTN, 2, ENTER) or continue (by pressing 0, ENTER). This is a user interaction step to confirm whether the reconciliation post should proceed.</p> </li> <li> <p>Attribute Inquiry:</p> </li> <li> <p><code>// ATTR INQUIRY-YES,CANCEL-NO</code> likely sets up the program to handle inquiry mode (YES) or cancellation (NO) based on user input. This could control whether the program runs in an interactive inquiry mode or proceeds with processing.</p> </li> <li> <p>Loading the Program:</p> </li> <li> <p><code>// LOAD AP290</code> loads the program <code>AP290</code>, which is presumably the main RPG program responsible for performing the A/P check reconciliation post. This is the core executable for the process.</p> </li> <li> <p>File Specifications:</p> </li> <li>The program specifies three files to be used:<ul> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code>: Defines a file named <code>APCRTR</code> (likely a transaction or work file) with a label that includes placeholders (<code>?9?APCR?WS?</code>). The placeholders suggest dynamic naming based on system or job parameters.</li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>: Defines a file named <code>APCONT</code> (possibly a control file for A/P) with a shared disposition (<code>DISP-SHR</code>), allowing multiple processes to access it concurrently.</li> <li><code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code>: Defines a file named <code>APCHKR</code> (likely the check reconciliation file) with shared disposition.</li> </ul> </li> <li> <p>These files are opened for use by the <code>AP290</code> program.</p> </li> <li> <p>Running the Program:</p> </li> <li> <p><code>// RUN</code> executes the loaded <code>AP290</code> program, which processes the reconciliation using the specified files.</p> </li> <li> <p>File Cleanup:</p> </li> <li><code>// GSDELETE APCR?WS?,,,,,,,,?9?</code> deletes the work file <code>APCR?WS?</code> (likely <code>APCRTR</code> with resolved placeholders) to clean up temporary data after processing.</li> <li><code>CLRPFM FILE(?9?APCHKUP)</code> clears the physical file <code>APCHKUP</code> (a file not mentioned earlier in the file specifications but likely used as an output or temporary file). The <code>CLRPFM</code> (Clear Physical File Member) command removes all records from the file, preparing it for new data or ensuring it is empty post-processing.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP290: This is the main RPG program loaded and executed by the OCL script (<code>// LOAD AP290</code> and <code>// RUN</code>). It performs the core logic for the A/P check reconciliation post.</li> <li>No other external programs are explicitly called in the provided OCL snippet.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files (tables in IBM i terminology):</p> <ol> <li>APCRTR (<code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code>):</li> <li>Likely a transaction or work file used for temporary storage of reconciliation data.</li> <li> <p>The label includes placeholders (<code>?9?APCR?WS?</code>), suggesting dynamic naming.</p> </li> <li> <p>APCONT (<code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>):</p> </li> <li>Probably a control file containing configuration or summary data for the A/P process.</li> <li> <p>Opened with shared disposition (<code>DISP-SHR</code>), allowing concurrent access.</p> </li> <li> <p>APCHKR (<code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code>):</p> </li> <li>Likely the main check reconciliation file, storing check data or reconciliation results.</li> <li> <p>Also opened with shared disposition.</p> </li> <li> <p>APCHKUP (<code>CLRPFM FILE(?9?APCHKUP)</code>):</p> </li> <li>A file cleared at the end of the process, possibly used as an output or update file for storing reconciled check data.</li> <li>Not listed in the initial file specifications, suggesting it may be implicitly used by <code>AP290</code> or defined elsewhere.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The OCL program initiates an A/P check reconciliation process by prompting the user for confirmation, loading the <code>AP290</code> RPG program, opening necessary files (<code>APCRTR</code>, <code>APCONT</code>, <code>APCHKR</code>), running the program, and performing cleanup by deleting a work file and clearing an output file (<code>APCHKUP</code>).</li> <li>External Programs: <code>AP290</code> (main RPG program).</li> <li>Files Used: <code>APCRTR</code>, <code>APCONT</code>, <code>APCHKR</code>, <code>APCHKUP</code>.</li> </ul> <p>If you have additional context (e.g., the RPG code for <code>AP290</code> or more OCL snippets), I can provide a more detailed analysis of the program\u2019s logic or interactions. Let me know if you\u2019d like me to search for related information or clarify any specific part!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/","title":"AP290 RPG","text":"<p>The provided document is an RPG III (or RPG/36) program named <code>AP290</code>, which is called from the OCL program described previously. This program handles the Accounts Payable (A/P) Cancelled Checks Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called, based on the RPG code provided.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#process-steps-of-the-rpg-program-ap290","title":"Process Steps of the RPG Program (AP290)","text":"<p>The RPG program <code>AP290</code> processes cancelled checks for Accounts Payable reconciliation, updating relevant files and generating a report. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File and Data Definitions:</li> <li>Input Files:<ul> <li><code>APCRTR</code> (Primary Input, Line 0009): A transaction file containing check data (80 bytes, indexed by a 16-byte key).</li> <li><code>APCONT</code> (Input, Chained, Line 0010): A control file with company information (256 bytes, indexed by a 2-byte key).</li> <li><code>APCHKR</code> (Update, Chained, Line 0011): A check reconciliation file (128 bytes, indexed by a 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, Line 0012): A printer file for generating a report (132 characters wide).</li> </ul> </li> <li>Data Structures:<ul> <li><code>SEP</code> (Line 0013): An array of 66 elements (2 bytes each) used for formatting report separators.</li> <li><code>APCRTR NS 01</code> (Lines 0015\u20130020): Defines fields from the <code>APCRTR</code> file, including:</li> <li><code>ATCONOL2</code> (Company Number, positions 2\u20133).</li> <li><code>ATBKGLL1</code> (Bank G/L Number, positions 4\u201311).</li> <li><code>ATCHK#</code> (Check Number, positions 12\u201317).</li> <li><code>ATCLAM</code> (Clear Amount, positions 23\u201333, 2 decimal places).</li> <li><code>ATCLDT</code> (Clear Date, positions 40\u201345).</li> <li><code>ATCLYY</code> (Clear Date Year, positions 44\u201345).</li> <li><code>ATKEY</code> (Key field, positions 2\u201317, likely a composite key).</li> <li><code>APCONT NS</code> (Line 0026): Defines <code>ACNAME</code> (Company Name, positions 4\u201333).</li> <li><code>UDS</code> (Line 0029): User Data Structure with:</li> <li><code>Y2KCEN</code> (Century, positions 509\u2013510, value 19 for 1900s).</li> <li><code>Y2KCMP</code> (Comparison Year, positions 511\u2013512, value 80 for Y2K logic).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>L1CLAM</code>, <code>L2CLAM</code> (112 zoned decimal, initialized to zero): Accumulators for totals at level 1 (Bank G/L) and level 2 (Company).</li> <li><code>TIMDAT</code>, <code>SYSTIM</code>, <code>SYSDAT</code> (6-digit fields): Used for system time and date.</li> <li><code>CLDT</code>, <code>CLDT8</code> (6-digit and 8-digit fields): Used for date manipulation.</li> <li><code>CN</code> (2-digit): Century for date processing.</li> </ul> </li> <li> <p>Initialization (Lines 0036\u20130040):</p> </li> <li>Retrieves the system time (<code>TIME</code> to <code>TIMDAT</code>, 12 digits).</li> <li>Moves <code>TIMDAT</code> to <code>SYSTIM</code> (time, positions 1\u20136) and <code>SYSDAT</code> (date, positions 7\u201312).</li> <li>Initializes the <code>SEP</code> array with asterisks (<code>*</code>) for report formatting.</li> <li> <p>Sets <code>PAGE</code> to zero for report pagination.</p> </li> <li> <p>Level 2 (L2) Processing \u2013 Company Level (Lines 0034\u20130045):</p> </li> <li>The <code>L2</code> indicator represents a control break at the company level (<code>ATCONOL2</code>).</li> <li>For each new company:<ul> <li>Performs a <code>CHAIN</code> operation on <code>APCONT</code> using <code>ATCONO</code> (Company Number) to retrieve the company name (<code>ACNAME</code>). If not found, indicator 92 is set.</li> <li>Initializes <code>L2CLAM</code> (Company Total Clear Amount) to zero.</li> </ul> </li> <li> <p>The <code>DO</code> loop (<code>L2 DO</code>) processes all records for a company until the company number changes.</p> </li> <li> <p>Level 1 (L1) Processing \u2013 Bank G/L Level (Lines 0047\u20130049):</p> </li> <li>The <code>L1</code> indicator represents a control break at the Bank G/L level (<code>ATBKGLL1</code>).</li> <li>For each new Bank G/L number:<ul> <li>Initializes <code>L1CLAM</code> (Bank G/L Total Clear Amount) to zero.</li> </ul> </li> <li> <p>This loop processes all checks for a specific Bank G/L account within a company.</p> </li> <li> <p>Date Processing for Y2K Compliance (Lines 0051\u20130058):</p> </li> <li>Converts the clear date (<code>ATCLDT</code>) to a 6-digit format by multiplying by 10000.01 (e.g., MMDDYY format).</li> <li>Handles Y2K logic for the year (<code>ATCLYY</code>):<ul> <li>If <code>ATCLYY</code> (2-digit year) is greater than or equal to <code>Y2KCMP</code> (80), assumes the century is <code>Y2KCEN</code> (19, for 1900s).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 20 for 2000s).</li> </ul> </li> <li> <p>Constructs an 8-digit date (<code>CLDT8</code>) by combining the century (<code>CN</code>) and <code>CLDT</code> (e.g., CCYYMMDD).</p> </li> <li> <p>Check Reconciliation Update (Lines 0060\u20130064):</p> </li> <li>Performs a <code>CHAIN</code> on <code>APCHKR</code> using <code>ATKEY</code> (likely a composite key of company and check number) to locate the check record. If not found, indicator 90 is set.</li> <li>If the record is found (not 90), updates <code>APCHKR</code> with:<ul> <li>A status of 'R' (position 1, likely indicating \"Reconciled\").</li> <li>The clear date (<code>ATCLDT</code>, positions 2\u201345).</li> <li>The 8-digit clear date (<code>CLDT8</code>, positions 46\u201391).</li> </ul> </li> <li>Adds the clear amount (<code>ATCLAM</code>) to <code>L1CLAM</code> (Bank G/L total).</li> <li> <p>At the L1 control break, adds <code>L1CLAM</code> to <code>L2CLAM</code> (Company total).</p> </li> <li> <p>Report Generation (Lines 0067\u20130107):</p> </li> <li>Outputs to the <code>LIST</code> printer file:<ul> <li>Detail Lines (Lines 0098\u20130101, triggered for each <code>APCRTR</code> record):</li> <li>Check Number (<code>ATCHK#</code>, zoned, position 10).</li> <li>Clear Date (<code>ATCLDT</code>, formatted, position 25).</li> <li>Clear Amount (<code>ATCLAM</code>, formatted, position 45).</li> <li>Headers (Lines 0072\u20130097):</li> <li>Company Name (<code>ACNAME</code>, if not indicator 92, position 30).</li> <li>Page number (<code>PAGE</code>, zoned, position 108).</li> <li>System Date (<code>SYSDAT</code>, formatted, position 129).</li> <li>Bank G/L Number (<code>ATBKGL</code>, formatted with dashes, position 15).</li> <li>Report title (\u201cA/P CANCELLED CHECKS POST\u201d, position 77\u201378).</li> <li>System Time (<code>SYSTIM</code>, formatted as HH:MM:SS, position 129).</li> <li>Column headings (\u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d).</li> <li>Separator lines (<code>SEP</code> array, position 132).</li> <li>Totals (Lines 0102\u20130107):</li> <li>At L1 break: \u201cBANK G/L # TOTAL\u201d with <code>L1CLAM</code> (position 45).</li> <li>At L2 break: \u201cCOMPANY TOTAL\u201d with <code>L2CLAM</code> (position 45).</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Control Breaks:</li> <li>The program processes records hierarchically:<ul> <li>L2 (Company Level): Groups records by company number (<code>ATCONOL2</code>).</li> <li>L1 (Bank G/L Level): Within each company, groups records by Bank G/L number (<code>ATBKGLL1</code>).</li> </ul> </li> <li> <p>Totals (<code>L1CLAM</code>, <code>L2CLAM</code>) are accumulated and reported at each level.</p> </li> <li> <p>Y2K Date Handling:</p> </li> <li>The program adjusts the century for the clear date based on a comparison year (<code>Y2KCMP</code> = 80):<ul> <li>Years \u2265 80 are assumed to be 19xx (e.g., 1980\u20131999).</li> <li>Years &lt; 80 are assumed to be 20xx (e.g., 2000\u20132079).</li> </ul> </li> <li> <p>This ensures correct date representation in the <code>CLDT8</code> field (CCYYMMDD).</p> </li> <li> <p>File Updates:</p> </li> <li>The <code>APCHKR</code> file is updated for each valid check record (not indicator 90) with a reconciled status ('R'), the clear date, and the 8-digit date.</li> <li> <p>The program assumes that <code>APCRTR</code> provides valid transaction data, and <code>APCONT</code> provides company details.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a detailed report with headers, check details, and totals for each Bank G/L and company.</li> <li>Skips company name printing if the <code>APCONT</code> record is not found (indicator 92).</li> <li> <p>Formats dates, amounts, and other fields for readability.</p> </li> <li> <p>Error Handling:</p> </li> <li>Uses indicators (90 for <code>APCHKR</code> chain failure, 92 for <code>APCONT</code> chain failure) to handle missing records gracefully.</li> <li>Does not update <code>APCHKR</code> if the record is not found (indicator 90).</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APCRTR (Line 0009):</li> <li>Primary input file (transaction file).</li> <li> <p>Fields: Company Number (<code>ATCONOL2</code>), Bank G/L Number (<code>ATBKGLL1</code>), Check Number (<code>ATCHK#</code>), Clear Amount (<code>ATCLAM</code>), Clear Date (<code>ATCLDT</code>, <code>ATCLYY</code>), Key (<code>ATKEY</code>).</p> </li> <li> <p>APCONT (Line 0010):</p> </li> <li>Input file (company control file).</li> <li> <p>Field: Company Name (<code>ACNAME</code>).</p> </li> <li> <p>APCHKR (Line 0011):</p> </li> <li>Update file (check reconciliation file).</li> <li> <p>Updated with reconciled status ('R'), clear date (<code>ATCLDT</code>), and 8-digit date (<code>CLDT8</code>).</p> </li> <li> <p>LIST (Line 0012):</p> </li> <li>Output printer file for the report.</li> </ol> <p>Note: The OCL program referenced an additional file, <code>APCHKUP</code>, which is cleared (<code>CLRPFM</code>) but not used in the RPG code. It may be used by another program or implicitly by <code>AP290</code> (e.g., as a work file).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The RPG program <code>AP290</code> does not explicitly call any external programs. It performs all processing internally using the defined files and generates a report.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Overview: The <code>AP290</code> RPG program processes cancelled checks by reading transaction data from <code>APCRTR</code>, retrieving company details from <code>APCONT</code>, updating the <code>APCHKR</code> file with reconciled check information, and generating a report (<code>LIST</code>) with check details and totals at Bank G/L and company levels. It includes Y2K-compliant date handling.</li> <li>Business Rules: Hierarchical processing (company and Bank G/L levels), Y2K date conversion, file updates for reconciled checks, and detailed reporting with error handling for missing records.</li> <li>Files Used: <code>APCRTR</code> (input), <code>APCONT</code> (input), <code>APCHKR</code> (update), <code>LIST</code> (output).</li> <li>External Programs: None.</li> </ul> <p>If you have additional OCL or RPG snippets, or need further details (e.g., specific field formats or interactions with <code>APCHKUP</code>), let me know! I can also search for related information if required.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/","title":"Summary AP290 Clear Checks Post","text":"<p>Based on the provided OCL (<code>AP290.ocl36.txt</code>) and RPG (<code>AP290.rpg36.txt</code>) program details, I\u2019ll identify the use case implemented by the program and create a concise function requirement document for it, assuming the use case is implemented as a large function that processes inputs programmatically rather than through screen interactions.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#use-case-implemented","title":"Use Case Implemented","text":"<p>The program implements a single primary use case:</p> <ol> <li>Post Cancelled Checks for Accounts Payable Reconciliation:</li> <li>This use case processes a set of cancelled check transactions to update the check reconciliation file, accumulate totals by bank general ledger (G/L) account and company, and generate a report summarizing the reconciled checks. It includes Y2K-compliant date handling to ensure accurate date representation.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#function-requirements-post-cancelled-checks-for-ap-reconciliation","title":"Function Requirements: Post Cancelled Checks for A/P Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#purpose","title":"Purpose","text":"<p>Automate the posting of cancelled checks to update the Accounts Payable (A/P) reconciliation file, calculate totals by bank G/L account and company, and generate a summary report.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#inputs","title":"Inputs","text":"<ul> <li>Transaction Data (<code>APCRTR</code> equivalent):</li> <li>Company Number (2 chars)</li> <li>Bank G/L Number (8 chars)</li> <li>Check Number (6 chars)</li> <li>Clear Amount (11 digits, 2 decimal places)</li> <li>Clear Date (6 digits, MMDDYY format)</li> <li>Company Data (<code>APCONT</code> equivalent):</li> <li>Company Number (2 chars, key)</li> <li>Company Name (30 chars)</li> <li>Check Reconciliation Data (<code>APCHKR</code> equivalent, for update):</li> <li>Key (16 chars, composite of company and check number)</li> <li>System Parameters:</li> <li>System Date (6 digits, MMDDYY)</li> <li>System Time (6 digits, HHMMSS)</li> <li>Y2K Century (2 digits, e.g., 19 for 1900s)</li> <li>Y2K Comparison Year (2 digits, e.g., 80)</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#outputs","title":"Outputs","text":"<ul> <li>Updated Check Reconciliation File (<code>APCHKR</code> equivalent):</li> <li>Updated records with reconciled status ('R'), clear date (6 digits), and 8-digit date (CCYYMMDD).</li> <li>Report (<code>LIST</code> equivalent):</li> <li>Header: Company name, page number, system date/time, bank G/L number, report title.</li> <li>Detail Lines: Check number, clear date, clear amount.</li> <li>Totals: Bank G/L total and company total clear amounts.</li> <li>Cleared Work File (<code>APCHKUP</code> equivalent): Emptied file.</li> <li>Deleted Work File (<code>APCRTR</code> equivalent): Deleted after processing.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Initialize report page counter to 0 and separator lines with asterisks.</li> <li> <p>Initialize accumulators for bank G/L (<code>L1CLAM</code>) and company (<code>L2CLAM</code>) totals to 0.</p> </li> <li> <p>Process by Company (group by Company Number):</p> </li> <li>Retrieve company name from company data using Company Number.</li> <li> <p>If company not found, skip name in report but continue processing.</p> </li> <li> <p>Process by Bank G/L (within company):</p> </li> <li>Group transactions by Bank G/L Number.</li> <li> <p>Initialize bank G/L total (<code>L1CLAM</code>) to 0 for each new G/L.</p> </li> <li> <p>Process Each Transaction:</p> </li> <li>Convert clear date to 8-digit format (CCYYMMDD):<ul> <li>If 2-digit year \u2265 80, use century 19 (e.g., 1980\u20131999).</li> <li>Else, use century 20 (e.g., 2000\u20132079).</li> </ul> </li> <li>Update check reconciliation file with:<ul> <li>Status 'R' (reconciled).</li> <li>Clear date (MMDDYY).</li> <li>8-digit date (CCYYMMDD).</li> </ul> </li> <li> <p>Add clear amount to bank G/L total (<code>L1CLAM</code>).</p> </li> <li> <p>Accumulate Totals:</p> </li> <li> <p>At bank G/L break, add <code>L1CLAM</code> to company total (<code>L2CLAM</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Print header (company name, page, date/time, bank G/L, title).</li> <li>Print column headings (Check #, Clear Date, Clear Amount).</li> <li>For each transaction: Print check number, clear date, clear amount.</li> <li>At bank G/L break: Print bank G/L total.</li> <li> <p>At company break: Print company total.</p> </li> <li> <p>Cleanup:</p> </li> <li>Delete transaction work file.</li> <li>Clear output work file.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#business-rules","title":"Business Rules","text":"<ul> <li>Hierarchical Processing: Group checks by company, then by bank G/L account.</li> <li>Y2K Date Handling: Convert 2-digit year to 4-digit year based on comparison year (80):</li> <li>Year \u2265 80 \u2192 19xx (e.g., 80 \u2192 1980).</li> <li>Year &lt; 80 \u2192 20xx (e.g., 79 \u2192 2079).</li> <li>File Updates: Update check reconciliation file only if record exists; otherwise, skip update but continue processing.</li> <li>Reporting: Include company name only if found; format bank G/L number with dashes (e.g., XXXXXX-XX); report totals at bank G/L and company levels.</li> <li>Error Handling: Handle missing company or check records gracefully (skip updates or report fields).</li> <li>Cleanup: Ensure temporary transaction file is deleted and output file is cleared post-processing.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#calculations","title":"Calculations","text":"<ul> <li>Date Conversion:</li> <li><code>CLDT = ATCLDT * 10000.01</code> (converts MMDDYY to internal format).</li> <li><code>CLDT8 = CN (century) + CLDT</code> (e.g., 19 + MMDDYY \u2192 CCYYMMDD).</li> <li>Totals:</li> <li><code>L1CLAM += ATCLAM</code> (accumulate clear amount for bank G/L).</li> <li><code>L2CLAM += L1CLAM</code> (accumulate bank G/L total for company at L1 break).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#assumptions","title":"Assumptions","text":"<ul> <li>Input transaction data is valid and sorted by company and bank G/L number.</li> <li>Check reconciliation file allows updates with shared access.</li> <li>Report formatting uses fixed positions for fields and totals.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/","title":"AP140 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script used on IBM midrange systems (like AS/400 or IBM i) to control the execution of RPG programs and manage file operations for an Accounts Payable (A/P) Employee Expenses Report and Spreadsheet process. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script orchestrates a sequence of file operations, program executions, and sorts to generate an employee expenses report and spreadsheet. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and File Setup:</li> <li>GSY2K and SCPROCP: These are likely system or environment setup commands or parameters, possibly related to the operating system or job control. <code>SCPROCP ,,,,,,,,?9?</code> suggests a parameter <code>?9?</code> (likely a job or library identifier) is being passed.</li> <li>SWITCH 00000000: Initializes job control switches to off (all zeros), which are used later for conditional branching.</li> <li>GSDELETE: Deletes temporary work files (<code>ADPY?WS?</code>, <code>ADPS?WS?</code>, <code>ADPC?WS?</code>, <code>ADPO?WS?</code>, <code>ADPT?WS?</code>) to ensure a clean slate. The <code>?WS?</code> and <code>?9?</code> are placeholders for dynamic values (e.g., work library or job-specific identifiers).</li> <li>IFF DATAF1-?9?ADPT?WS? BLDFILE: Conditionally builds a temporary file <code>?9?ADPT?WS?</code> with 500 records, 128 bytes each, if it doesn\u2019t exist. The <code>DFILE</code> parameter indicates it\u2019s a disk file.</li> <li> <p>CLRPFM FILE(?9?APEEPY): Clears the physical file <code>APEEPY</code>, which likely stores the final employee expense data.</p> </li> <li> <p>Load and Run AP140:</p> </li> <li>LOAD AP140: Loads the RPG program <code>AP140</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>, shared access, extended by 100 records): Transaction file for A/P data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General Ledger master file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table file.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP140</code>, which likely processes A/P transactions, retrieves control data, and prepares initial data for the expense report.</p> </li> <li> <p>Conditional Branching (SWITCH1):</p> </li> <li> <p>IF SWITCH1-1 GOTO END: Checks if switch 1 is set to 1. If true, the program jumps to the <code>END</code> tag, terminating the process. This suggests <code>AP140</code> may set this switch to indicate an error or completion condition.</p> </li> <li> <p>Tag AP141 and File Preparation:</p> </li> <li>TAG AP141: Marks a program section for branching.</li> <li>GSDELETE: Deletes temporary files again to ensure no residual data.</li> <li> <p>BLDFILE:</p> <ul> <li>Builds <code>?9?ADPY?WS?</code> (999,000 records, 226 bytes) for A/P payment data.</li> <li>Builds <code>?9?ADPC?WS?</code> (999,000 records, 96 bytes) for check-related data.</li> </ul> </li> <li> <p>First Sort (#GSORT for AP141):</p> </li> <li>LOAD #GSORT: Loads the system sort utility.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPT?WS?</code> (from <code>AP140</code> output).</li> <li>Output: <code>?9?ADP151S</code> (999,000 records, retained as a job file).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTR 17A 3X 128 N</code>: Sorts in reverse order, 17-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records where position 1 is not equal to a specific condition (likely a deletion flag).</li> <li>Sort keys:</li> <li><code>FNC 7 8 COMPANY</code>: Sorts by company code (positions 7\u20138).</li> <li><code>FNC 36 45 VENDOR/VOUCHER</code>: Sorts by vendor/voucher number (positions 36\u201345).</li> <li><code>FNC 2 6 SEQ#</code>: Sorts by sequence number (positions 2\u20136).</li> <li><code>FDC 1 128 RECORDS</code>: Includes entire record (positions 1\u2013128).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted file <code>?9?ADP151S</code>.</p> </li> <li> <p>Load and Run AP141:</p> </li> <li>LOAD AP141: Loads the RPG program <code>AP141</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADP151S</code>): Sorted transaction file from the previous step.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, extended by 100 records): A/P payment file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP141</code>, which likely processes sorted transactions, matches them with open items, and prepares payment data.</p> </li> <li> <p>Second Sort (#GSORT for AP145):</p> </li> <li>LOAD #GSORT: Loads the sort utility again.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPY?WS?</code> (from <code>AP141</code> output).</li> <li>Output: <code>?9?ADPS?WS?</code> (999,000 records).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 23A 3X N</code>: Sorts in ascending order, 23-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records based on position 1 condition.</li> <li>Sort keys:</li> <li><code>FNC 2 3 COMPANY</code>: Sorts by company code (positions 2\u20133).</li> <li><code>FNC 153 160 BANK G/L #</code>: Sorts by bank general ledger number (positions 153\u2013160).</li> <li><code>FNC 4 8 VENDOR</code>: Sorts by vendor code (positions 4\u20138).</li> <li><code>FNC 97 97 PREPAID CODE</code>: Sorts by prepaid code (position 97).</li> <li><code>FNC 91 96 CHECK #</code>: Sorts by check number (positions 91\u201396).</li> <li><code>FNC 152 152 SINGLE CHECK CODE</code>: Sorts by single check code (position 152).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted payment file <code>?9?ADPS?WS?</code>.</p> </li> <li> <p>Conditional Label for Employee Expense:</p> </li> <li>IF ?3?/EE LOCAL OFFSET-198,DATA-'EE EMPLOYEE EXPENSE': If parameter <code>?3?</code> equals <code>EE</code>, sets a data field at offset 198 to indicate an employee expense report.</li> <li> <p>ELSE LOCAL OFFSET-198,DATA-' ': Otherwise, clears the field.</p> </li> <li> <p>Load and Run AP145:</p> </li> <li>LOAD AP145: Loads the RPG program <code>AP145</code>.</li> <li>File Definitions:<ul> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, shared): Payment file.</li> <li><code>AP145S</code> (labeled <code>?9?ADPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>): Transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>ADPYCK</code> (labeled <code>?9?ADPC?WS?</code>, extended by 100 records): Check file.</li> <li><code>APEEPY</code> (labeled <code>?9?APEEPY</code>, shared): Employee expense file.</li> </ul> </li> <li>Printer Overrides:<ul> <li>If parameter <code>?9?</code> equals <code>G</code>, overrides printer files <code>APEEEXP</code> and <code>APEEEXPO</code> to output queue <code>QUSRSYS/APPOST</code> (production) or <code>QUSRSYS/TESTOUTQ</code> (test).</li> </ul> </li> <li> <p>RUN: Executes <code>AP145</code>, which generates the final employee expense report and spreadsheet, using sorted payment data, vendor information, and check details.</p> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>GSDELETE: Deletes temporary files again.</li> <li>IFF ?9?/G GOTO END: If parameter <code>?9?</code> equals <code>G</code>, skips to the <code>END</code> tag.</li> <li>TAG END: Marks the end of the process.</li> <li>SWITCH 00000000: Resets switches to off.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly loads and runs the following external programs: 1. AP140: Processes initial A/P transactions and prepares data. 2. AP141: Processes sorted transactions, matches with open items, and prepares payment data. 3. AP145: Generates the final employee expense report and spreadsheet. 4. #GSORT (system sort utility, called twice): Performs sorting of transaction and payment data.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script references the following files (tables): 1. ADPYTR (?9?ADPT?WS?): A/P transaction file (temporary, used across programs). 2. APCONT (?9?APCONT): A/P control file (shared, contains control settings). 3. GLMAST (?9?GLMAST): General Ledger master file (shared, used in <code>AP140</code>). 4. GSTABL (?9?GSTABL): General system table file (shared, used in <code>AP140</code>). 5. GSCONT (?9?GSCONT): General system control file (shared, used in <code>AP140</code>). 6. ADP151S (?9?ADP151S): Sorted transaction file (temporary, output from first <code>#GSORT</code>). 7. ADPPAY (?9?ADPY?WS?): A/P payment file (temporary, used in <code>AP141</code> and <code>AP145</code>). 8. APOPEN (?9?APOPEN): A/P open items file (shared, used in <code>AP141</code> and <code>AP145</code>). 9. AP145S (?9?ADPS?WS?): Sorted payment file (temporary, output from second <code>#GSORT</code>). 10. APVEND (?9?APVEND): Vendor master file (shared, used in <code>AP145</code>). 11. APCHKR (?9?APCHKR): Check register file (shared, used in <code>AP145</code>). 12. ADPYCK (?9?ADPC?WS?): Check file (temporary, used in <code>AP145</code>). 13. APEEPY (?9?APEEPY): Employee expense file (shared, cleared initially and used in <code>AP145</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#summary","title":"Summary","text":"<p>The OCL script automates the generation of an A/P employee expenses report and spreadsheet by: 1. Initializing and clearing temporary files. 2. Running <code>AP140</code> to process A/P transactions. 3. Sorting data with <code>#GSORT</code> for <code>AP141</code>, which prepares payment data. 4. Sorting payment data again with <code>#GSORT</code> for <code>AP145</code>. 5. Running <code>AP145</code> to produce the final report and spreadsheet, with conditional printer output. 6. Cleaning up temporary files and terminating.</p> <p>The process uses three RPG programs (<code>AP140</code>, <code>AP141</code>, <code>AP145</code>) and the system sort utility (<code>#GSORT</code>), along with 13 files for data storage and processing. Parameters like <code>?9?</code>, <code>?3?</code>, and switches control the flow and environment (e.g., production vs. test output).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/","title":"AP140 RPG","text":"<p>The provided AP140.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that handles the A/P Payment Transaction Entry Screen for processing accounts payable (A/P) transactions, specifically for employee expense payments. It includes modifications for handling 13 accounting periods, ACH/wire transfer selections, and utility auto-pay. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, referencing the OCL context from the previous query where <code>AP140</code> is the first program executed.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#process-steps-of-the-ap140-rpg-program","title":"Process Steps of the AP140 RPG Program","text":"<p>The <code>AP140</code> program is an interactive screen-based application that allows users to enter and manage A/P payment transactions. It validates input, retrieves data from control and master files, and updates transaction records. The steps are structured around subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) and screen formats (<code>AP140S1</code>, <code>AP140S2</code>). Here\u2019s a detailed breakdown:</p> <ol> <li>Program Initialization:</li> <li>Indicators and Setup (lines 0133\u20130137): Resets indicators (81, 82, 90, 93) and clears message fields (<code>MSG30</code>, <code>MSG230</code>) to prepare for screen interactions.</li> <li>Roll Key Handling (lines 0138\u20130139): Calls <code>ROLLFW</code> (roll forward) or <code>ROLLBW</code> (roll backward) subroutines if indicators 18 or 19 are set, allowing navigation through transaction records.</li> <li> <p>End of Job (lines 0156\u20130158): If indicator <code>KG</code> (end of job) is set, resets indicators 01 and 02, sets <code>LR</code> (last record) and <code>U1</code>, and exits.</p> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine) (lines 0183\u20130200):</p> </li> <li>Check Accounting Periods (lines 0185\u20130187): Checks <code>GSCONT</code> for <code>GX13GL</code> (Y/N for 13 accounting periods). Sets indicators 13, 12 if <code>GX13GL = 'Y'</code>.</li> <li>Check for Existing Transactions (lines 0189\u20130193): Chains to <code>ADPYTR</code> with key <code>'00000'</code>. If not found (indicator 81 on), sets add mode (indicator 17 on, 16 off) and initializes sequence number (<code>NXTSEQ = 1</code>). If found, proceeds to update mode.</li> <li> <p>Set Defaults (lines 0195\u20130198, 0685\u20130694): In update mode, sets company number (<code>CONO = PTCONO</code>), sequence number (<code>NXTSEQ = LSTSEQ + 1</code>), and clears fields (<code>VEND</code>, <code>VO</code>, <code>AMT</code>, <code>DISC</code>, <code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).</p> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine) (lines 0202\u20130233):</p> </li> <li>Validate Company Number (lines 0204\u20130207): Chains to <code>APCONT</code> using <code>CONO</code>. If not found (indicator 91 on), sets error indicator 90, displays message \"INVALID COMPANY #\" (MSG,1), and jumps to <code>ENDS1</code>.</li> <li>Retrieve or Set Transaction Data (lines 0209\u20130226):<ul> <li>If no transaction exists (indicator 95 on), sets defaults: <code>BKGL = ACEEGL</code> (employee expense G/L from <code>APCONT</code>), <code>KYHOLD = 'E'</code> (employee expense), <code>BTCH = 99</code>, and zeros for <code>CKDT</code>, <code>DATE</code>, <code>KYPD</code>, <code>KYPDYY</code>. Clears <code>FDISC</code>.</li> <li>If a transaction exists (indicator 95 off), populates screen fields with <code>ADPYTR</code> values (<code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTFDIS</code>, <code>PTPD</code>, <code>PTPDYY</code>, <code>PTHOLD</code>).</li> </ul> </li> <li>Protect <code>KYHOLD</code> (lines 0218, 0226): Sets indicator 57 to protect <code>KYHOLD</code> in update mode (non-editable) or unprotect it in add mode.</li> <li>Call <code>S2EDIT</code> (line 0228): Validates screen 2 data (even though screen 1 is displayed).</li> <li> <p>Display Screen 1 (lines 0229\u20130231): Sets indicator 82 to display <code>AP140S2</code> format, clears error indicators and messages if no errors.</p> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine) (lines 0235\u20130252):</p> </li> <li>Validate Input (line 0237): Calls <code>S2EDIT</code> to validate screen 2 fields.</li> <li>Error Handling (lines 0238\u20130239): If error indicator 90 is on, redisplays screen 2 (indicator 82 on) and jumps to <code>ENDS2</code>.</li> <li>Double Enter Check (lines 0242\u20130243): If indicator 89 is on (user pressed Enter twice), redisplays screen 2.</li> <li> <p>Write Transaction (lines 0245\u20130247): If no errors, sets indicator 70, writes to <code>ADPYTR</code> (via <code>EXCPT</code>), and resets indicator 70.</p> </li> <li> <p>Screen 2 Edit (<code>S2EDIT</code> Subroutine) (lines 0254\u20130366):</p> </li> <li>Validate Bank G/L Number (lines 0256\u20130266):<ul> <li>Compares <code>SVBKGL</code> to <code>BKGL</code>. If different, updates <code>SVBKGL</code>.</li> <li>Chains to <code>GLMAST</code> using <code>GLKEY</code> (constructed from <code>CONO</code>, <code>BKGL</code>, and <code>'C'</code>). If not found or marked deleted/inactive (<code>GLDEL = 'D'</code> or <code>'I'</code>), sets error indicator 90 and displays \"INVALID BANK G/L #\".</li> </ul> </li> <li>Validate Batch Number (lines 0268\u20130271): If <code>BTCH = 0</code>, sets error indicator 90 and displays \"CHECK # CANNOT BE ZERO\".</li> <li>Validate Check Date (lines 0273\u20130285):<ul> <li>Calls <code>DTEDIT</code> to validate <code>CKDT</code>. If invalid (indicator 79 on), sets error 90 and displays \"INVALID CHECK DATE\".</li> <li>Converts <code>CKDT</code> to 8-digit format (<code>CKDT8</code>) with century handling.</li> </ul> </li> <li>Validate Pay-By Date (lines 0287\u20130299):<ul> <li>Calls <code>DTEDIT</code> to validate <code>DATE</code>. If invalid, sets error 90 and displays \"INVALID DATE TO PAY BY\".</li> <li>Converts <code>DATE</code> to 8-digit format (<code>DATE8</code>) with century handling.</li> </ul> </li> <li>Validate Force Discount (lines 0301\u20130305): If <code>FDISC</code> is not blank or <code>'D'</code>, sets error 90 and displays \"FORCE DISCOUNTS MUST BE 'D'\".</li> <li>Validate Period/Year for 13 Periods (lines 0307\u20130362, if indicator 12 on):<ul> <li>Checks if <code>KYPD</code> is between 1 and 13. If not, sets error 81/90/55 and displays \"INVALID PERIOD/YEAR\".</li> <li>Chains to <code>GSTABL</code> to get period end date (<code>TBPDDT</code>) for <code>KYPD</code>/<code>KYPDYY</code>. If not found, sets error.</li> <li>Validates <code>CKDT</code> against period end date (<code>HIDATE</code>) and prior period\u2019s end date (<code>LODATE</code>). If outside range, sets error and displays \"DATE INVALID FOR PD/YR KEYED\".</li> </ul> </li> <li> <p>Validate Voucher Payment Type (<code>KYHOLD</code>) (lines JB01, MG03):</p> <ul> <li>Ensures <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>. If invalid, sets error 56/90 and displays \"VOUCHER TO PAY MUST BE ' ',A,W OR E\" (or includes <code>'U'</code> for utility auto-pay).</li> </ul> </li> <li> <p>Date Edit (<code>DTEDIT</code> Subroutine) (lines 0368\u20130480):</p> </li> <li> <p>Validates dates (<code>CKDT</code>, <code>DATE</code>) in MMDDYY format:</p> <ul> <li>Breaks down into month, day, year (<code>$MONTH</code>, <code>$DAY</code>, <code>$YR</code>).</li> <li>Validates month (1\u201312).</li> <li>For February, checks leap year (divisible by 4 or 400 for century years) and ensures day \u2264 29 (leap year) or \u2264 28 (non-leap year).</li> <li>For other months, checks day \u2264 30 (for April, June, September, November) or \u2264 31 (other months).</li> <li>Sets indicator 79 if invalid.</li> </ul> </li> <li> <p>Roll Key Navigation (<code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code> Subroutines) (lines 0737\u20130771):</p> </li> <li>ROLLKY: Detects roll keys (status codes 01122 for forward, 01123 for backward), sets update mode (indicator 16 on, 17 off).</li> <li>ROLLFW: Chains to <code>ADPYTR</code> by <code>SEQ#</code>, reads next record, and updates <code>SEQ#</code> if found.</li> <li> <p>ROLLBW: Chains to <code>ADPYTR</code>, reads previous record, handles edge case for sequence 0, and updates <code>SEQ#</code>.</p> </li> <li> <p>File Output (lines 0774\u20130799):</p> </li> <li>Update/Delete (<code>E 70N95</code>): Writes updated <code>ADPYTR</code> record with fields like <code>CONO</code>, <code>BKGL</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPDYY</code>, <code>KYPD</code>, <code>CKDT8</code>, <code>DATE8</code>, <code>KYHOLD</code>.</li> <li>Add (<code>EADD 70 95</code>): Writes new <code>ADPYTR</code> record with sequence number (<code>Z5</code>) and same fields.</li> <li>Delete (<code>EDEL</code>): Marks record for deletion.</li> <li>Screen Output (lines 0844\u20130860):<ul> <li><code>AP140S1</code>: Displays <code>CONO</code> and <code>MSG30</code>.</li> <li><code>AP140S2</code>: Displays <code>CONO</code>, <code>ACNAME</code>, <code>BKGL</code>, <code>GLDESC</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>MSG30</code>, <code>KYHOLD</code>.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Company Validation: Company number (<code>CONO</code>) must exist in <code>APCONT</code>. Invalid company triggers \"INVALID COMPANY #\". 2. Bank G/L Validation: Bank G/L number (<code>BKGL</code>) must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>) or inactive (<code>GLDEL \u2260 'I'</code>). Invalid G/L triggers \"INVALID BANK G/L #\". 3. Batch Number: Batch number (<code>BTCH</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\"). 4. Date Validation:    - Check date (<code>CKDT</code>) and pay-by date (<code>DATE</code>) must be valid (MMDDYY format, valid month/day, leap year handling).    - For 13 accounting periods, <code>CKDT</code> must fall within the period defined by <code>KYPD</code>/<code>KYPDYY</code> in <code>GSTABL</code>. 5. Force Discount: <code>FDISC</code> must be blank or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\"). 6. Period/Year: If 13 periods are enabled (<code>GX13GL = 'Y'</code>), <code>KYPD</code> must be 1\u201313, and <code>CKDT</code> must align with period start/end dates in <code>GSTABL</code>. 7. Voucher Payment Type (<code>KYHOLD</code>): Must be <code>' '</code> (checks), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay). Invalid values trigger \"VOUCHER TO PAY MUST BE ' ',A,W OR E\". 8. Sequence Number: Managed automatically (<code>NXTSEQ = LSTSEQ + 1</code> in update mode, or 1 in add mode). 9. Navigation: Supports rolling forward/backward through transactions using sequence numbers. 10. Error Handling: Displays specific error messages for invalid inputs and prevents record updates until errors are resolved.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN: Workstation file (300 bytes) for interactive screen display (<code>AP140S1</code>, <code>AP140S2</code>). 2. ADPYTR: A/P transaction file (128 bytes, update mode, indexed by 5 keys). Stores payment transactions (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>). 3. APCONT: A/P control file (256 bytes, input mode, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACEEGL</code>, <code>ACBKGL</code>). 4. GLMAST: General Ledger master file (256 bytes, input mode, indexed by 11 keys). Contains G/L account details (e.g., <code>GLDESC</code>, <code>GLDEL</code>). 5. GSCONT: General system control file (512 bytes, input mode, indexed by 2 keys). Stores system settings (e.g., <code>GX13GL</code> for 13 periods). 6. GSTABL: General system table file (256 bytes, input mode, indexed by 12 keys). Stores period end dates (<code>TBPDDT</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP140</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#summary","title":"Summary","text":"<p>AP140 is an interactive RPG/36 program that facilitates A/P payment transaction entry for employee expenses. It: - Displays two screens (<code>AP140S1</code>, <code>AP140S2</code>) for entering company, bank G/L, batch, check date, pay-by date, and payment type. - Validates inputs against <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, and <code>GSTABL</code>, ensuring valid company, G/L accounts, dates, and periods. - Supports add/update/delete modes for <code>ADPYTR</code> records, with navigation via roll keys. - Handles special cases like 13 accounting periods and payment types (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>). - Uses five files (<code>SCREEN</code>, <code>ADPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, <code>GSTABL</code>) and no external programs.</p> <p>The program\u2019s output in <code>ADPYTR</code> feeds into the subsequent sort and <code>AP141</code> processing in the OCL script, as described in the main process flow.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/","title":"AP140 Summary Emp Expense","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#list-of-use-cases-implemented-by-the-ap140-ap141-and-ap145-rpg-programs","title":"List of Use Cases Implemented by the AP140, AP141, and AP145 RPG Programs","text":"<p>The RPG programs <code>AP140</code>, <code>AP141</code>, and <code>AP145</code>, along with the associated OCL script, implement a single primary use case as part of an IBM System/36 or AS/400 accounts payable (A/P) system for processing employee expense payments. This use case is:</p> <ol> <li>Generate Employee Expense Voucher Selection Spreadsheet and Report:</li> <li>Description: This use case allows the system to process A/P payment transactions for employee expenses, select eligible open payables (vouchers), and produce a detailed report and summary file for payroll integration. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles validations, calculations, and reporting.</li> <li>Components:<ul> <li>AP140: Interactive entry of payment transaction details (company, bank G/L, batch, check date, pay-by date, payment type, vendor/voucher specifics).</li> <li>AP141: Matches transactions to open payables and creates payment records with appropriate payment amounts and types.</li> <li>AP145: Generates detailed reports and a summary file, validating checks and accumulating totals for reporting.</li> </ul> </li> <li>Inputs: Company number, bank G/L number, batch number, check date, pay-by date, payment type, vendor/voucher details, and accounting period/year (if 13 periods).</li> <li>Outputs: Payment records (<code>ADPPAY</code>, <code>ADPYCK</code>), detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>), and a summary disk file (<code>APEEPY</code>) for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#employee-expense-processing-function-requirements","title":"Employee Expense Processing Function Requirements","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#overview","title":"Overview","text":"<p>The Employee Expense Processing Function automates the selection, validation, and reporting of accounts payable (A/P) employee expense payments. It processes transactions, matches them to open payables, calculates payment amounts, and generates detailed reports and a payroll summary file. The function supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures compliance with accounting rules, including support for 13 accounting periods.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): Valid company identifier from <code>APCONT</code>.</li> <li>Bank G/L Number (<code>BKGL</code>): Valid bank G/L account from <code>GLMAST</code> (not deleted/inactive).</li> <li>Batch Number (<code>BTCH</code>): Non-zero batch identifier for grouping payments.</li> <li>Check Date (<code>CKDT</code>): Valid date (MMDDYY) for issuing payments.</li> <li>Pay-By Date (<code>DATE</code>): Optional date (MMDDYY) to filter vouchers by due date.</li> <li>Payment Type (<code>KYHOLD</code>): <code>' '</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Vendor Number (<code>PTVEND</code>): Optional vendor identifier from <code>APVEND</code> (0 for one-time vendors).</li> <li>Voucher Number (<code>PTVO</code>): Optional voucher identifier from <code>APOPEN</code> (0 for whole vendor).</li> <li>Partial Payment Amount (<code>PTAMT</code>): Optional amount for partial voucher payment.</li> <li>Override Discount (<code>PTDISC</code>): Optional discount amount to override default.</li> <li>Force Discount (<code>FDISC</code>): <code>'D'</code> to force discount, else blank.</li> <li>Pay or Hold (<code>PTPORH</code>): <code>'P'</code> to pay, <code>'H'</code> to hold (for vendor/voucher-specific transactions).</li> <li>Single Check (<code>PTSNGL</code>): <code>'S'</code> for single check per vendor, else blank.</li> <li>Prepaid Flag (<code>PTMKPP</code>): <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code> for prepaid vouchers, else blank.</li> <li>Prepaid Check Number (<code>PTPPCK</code>): Check number for prepaid vouchers.</li> <li>Prepaid Date (<code>PTPPDT</code>): Date for prepaid vouchers.</li> <li>Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Accounting period (1\u201313) and year (if 13 periods enabled in <code>GSCONT</code>).</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (<code>ADPPAY</code>): Records with company, vendor, voucher, payment amount, discount, check number, and payment type.</li> <li>Check Records (<code>ADPYCK</code>): Check details with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Reports (<code>APEEEXP</code>, <code>APEEEXPO</code>): Detailed reports with company, vendor, invoice details, check totals, and company totals.</li> <li>Summary File (<code>APEEPY</code>): Disk file with vendor payroll ID and payment amounts for payroll integration.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code>.</li> <li>Ensure <code>BKGL</code> is valid in <code>GLMAST</code> (not deleted/inactive).</li> <li>Confirm <code>BTCH \u2260 0</code>.</li> <li>Validate <code>CKDT</code> and <code>DATE</code> (MMDDYY format, valid month/day, leap year).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), ensure <code>KYPD</code> is 1\u201313 and <code>CKDT</code> falls within period dates in <code>GSTABL</code>.</li> <li>Validate <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>.</li> <li> <p>For vendor-specific transactions, verify <code>PTVEND</code> exists in <code>APVEND</code> and <code>PTVO</code> in <code>APOPEN</code> (if provided).</p> </li> <li> <p>Create Transactions:</p> </li> <li> <p>Store transaction details in <code>ADPYTR</code> with sequence number, company, bank G/L, batch, check date, pay-by date, payment type, and vendor/voucher details.</p> </li> <li> <p>Match Open Payables:</p> </li> <li>For pay-by-date transactions (<code>DATE \u2260 0</code>):<ul> <li>Select <code>APOPEN</code> records where <code>OPCONO = CONO</code>, <code>OPBKGL = BKGL</code>, due date (<code>OPDUED</code>) \u2264 <code>DATE</code>, and not deleted (<code>OPDEL \u2260 'D'</code>) or halted (<code>OPHALT \u2260 'H'</code>).</li> <li>Match payment type: <code>' '</code> (non-ACH/wire/employee/utility), <code>'A'</code> (<code>OPHALT = 'A'</code>), etc.</li> </ul> </li> <li> <p>For vendor-specific transactions:</p> <ul> <li>Select <code>APOPEN</code> records matching <code>PTVEND</code> (and <code>PTVO</code> if provided), <code>OPCONO</code>, and <code>OPBKGL</code> (if whole vendor).</li> <li>Override hold (<code>OPHALT = 'H'</code>) if <code>PTPORH = 'P'</code>.</li> <li>Validate prepaid flags match <code>KYHOLD</code>.</li> </ul> </li> <li> <p>Calculate Payment Amounts:</p> </li> <li>Gross amount: <code>OPGRAM</code> from <code>APOPEN</code>.</li> <li>Discount: Apply <code>PTDISC</code> (if provided), else <code>OPDISC</code> from <code>APOPEN</code>. Set to 0 if voucher is past due (<code>OPDUED &gt; CKDT</code>) or partially paid (<code>OPPPTD \u2260 0</code>) and <code>FDISC \u2260 'D'</code>.</li> <li>Payment amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li> <p>Partial payment: If <code>PTAMT \u2260 0</code>, set <code>OPLPAM = PTAMT</code> and adjust remaining <code>PTAMT</code>.</p> </li> <li> <p>Assign Check Numbers:</p> </li> <li>Use <code>PTPPCK</code> for prepaid vouchers.</li> <li>Use next check number (<code>PTNXCK</code>) from <code>ADPYTR</code> for non-prepaid.</li> <li>Set check number to 0 for credit/no pay (<code>OPLPAM = 0</code>).</li> <li> <p>Increment <code>PTNXCK</code> for each new check unless full stub or credit/no pay.</p> </li> <li> <p>Validate Checks:</p> </li> <li>Ensure non-void checks do not exist in <code>APCHKR</code> or are not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks, ensure they exist, are open, and match the full amount.</li> <li> <p>Mark negative or zero-amount checks as credit/no pay (<code>Hypothesized: (</code>AXRECD = 'C'`).</p> </li> <li> <p>Generate Outputs:</p> </li> <li>Write payment records to <code>ADPPAY</code> with company, vendor, voucher, payment amount, discount, check number, payment type, and single check flag.</li> <li>Write check records to <code>ADPYCK</code> with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Generate reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with:<ul> <li>Headers: Company name, payment type, date, time.</li> <li>Details: Sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, voucher number.</li> <li>Totals: Check totals, company totals (employee count, gross, discount, payment amounts).</li> </ul> </li> <li>Write summary file (<code>APEEPY</code>) with vendor payroll ID (<code>VNPRID</code>) and negative payment amount.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Company, bank G/L, and batch must be valid and non-zero.</li> <li>Dates must be valid and align with accounting periods (if 13 periods).</li> <li>Payment type must match voucher type in <code>APOPEN</code>.</li> <li>Vendor/voucher must exist for specific transactions.</li> <li>Payment Selection:</li> <li>Pay-by-date: Select vouchers due by <code>DATE</code>, not on hold unless overridden.</li> <li>Vendor-specific: Match vendor (and voucher if specified), override hold if <code>PTPORH = 'P'</code>.</li> <li>Prepaid vouchers must match payment type (<code>OPPAID = KYHOLD</code>).</li> <li>Discounts:</li> <li>Apply override discount (<code>PTDISC</code>) or default (<code>OPDISC</code>).</li> <li>Set discount to 0 for past due or partially paid vouchers unless forced (<code>FDISC = 'D'</code>).</li> <li>Payment Amount:</li> <li>Calculate as <code>OPGRAM - OPDISC - OPPPTD</code>.</li> <li>Adjust for partial payments (<code>PTAMT</code>).</li> <li>Check Handling:</li> <li>Single checks (<code>OPSNGL = 'S'</code>) for one-time vendors or specified cases.</li> <li>Maximum 12 invoices per stub; mark as full stub (<code>AXRECD = 'F'</code> or <code>'V'</code>).</li> <li>Negative/zero-amount checks marked as credit/no pay.</li> <li>Reporting:</li> <li>Include vendor name from <code>APVEND</code> or <code>APOPEN</code>.</li> <li>Display payment type labels (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Report errors for invalid checks (e.g., \"CHECK IS ALREADY OPEN\").</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>. If <code>PTAMT \u2260 0</code>, <code>OPLPAM = min(PTAMT, OPGRAM - OPDISC - OPPPTD)</code> and update <code>PTAMT</code>.</li> <li>Discount: <code>OPDISC = PTDISC</code> (if provided) or <code>OPOPEN.OPDISC</code>. Set to 0 if past due (<code>OPDUED &gt; CKDT</code>) or <code>OPPPTD \u2260 0</code> and <code>FDISC \u2260 'D'</code>.</li> <li>Check Number: <code>THISCK = OPCKNO</code> (prepaid), <code>PTNXCK</code> (non-prepaid), or 0 (credit/no pay). Increment <code>PTNXCK</code> unless full stub or credit/no pay.</li> <li>Totals: Accumulate gross (<code>CKGRAM</code>, <code>C6GRAM</code>, <code>P6GRAM</code>, <code>L6GRAM</code>), discount (<code>CKDISC</code>, <code>C6DISC</code>, <code>P6DISC</code>, <code>L6DISC</code>), and payment (<code>CKAMT</code>, <code>C6LPAM</code>, <code>P6LPAM</code>, <code>L6LPAM</code>) at check and company levels.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>APCONT</code>: Company data.</li> <li><code>GLMAST</code>: G/L accounts.</li> <li><code>GSCONT</code>: System settings (13 periods).</li> <li><code>GSTABL</code>: Period end dates.</li> <li><code>APVEND</code>: Vendor details.</li> <li><code>APOPEN</code>: Open payables.</li> <li><code>APCHKR</code>: Check register.</li> <li><code>ADPYTR</code>: Transaction input.</li> <li><code>ADPPAY</code>: Payment output.</li> <li><code>ADPYCK</code>: Check output.</li> <li><code>APEEPY</code>: Payroll summary output.</li> <li><code>APEEEXP</code>, <code>APEEEXPO</code>: Report output.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/","title":"AP141 RPG","text":"<p>The AP141.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that processes A/P payment transactions from the <code>ADPYTR</code> file (created by <code>AP140</code>) to generate payment records in the <code>ADPPAY</code> file, matching them against open payables in the <code>APOPEN</code> file. It is called in the OCL script after the first sort (<code>#GSORT</code>) and is part of the A/P Employee Expenses Report and Spreadsheet process. Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#process-steps-of-the-ap141-rpg-program","title":"Process Steps of the AP141 RPG Program","text":"<p>The <code>AP141</code> program reads transaction records from <code>ADPYTR</code>, matches them with open payables in <code>APOPEN</code>, and creates or updates payment records in <code>ADPPAY</code>. It handles two types of transaction records (distinguished by <code>NS 01</code> and <code>NS 02</code>) and supports payment methods like checks, ACH, wire transfers, employee expenses, and utility auto-pay. The program is structured around two main subroutines: <code>EACH01</code> (for pay-by-date records) and <code>EACH02</code> (for vendor-specific records).</p> <ol> <li>Program Initialization:</li> <li>The program reads <code>ADPYTR</code> records sequentially (defined as input primary file, <code>IP</code>) and processes them based on their type (<code>NS 01</code> or <code>NS 02</code>).</li> <li> <p>Record Type Check (lines 0067\u20130069):</p> <ul> <li>For <code>NS 01</code> records (pay by date), calls <code>EACH01</code> subroutine.</li> <li>For <code>NS 02</code> records (pay by vendor/voucher), checks if <code>PTDEL = 'D'</code> (deleted). If deleted, calls <code>EACH02</code>. Otherwise, processes normally.</li> </ul> </li> <li> <p>EACH01 Subroutine (Pay by Date) (lines 0072\u20130162):</p> </li> <li>Date Conversion (lines 0074\u20130092):<ul> <li>Converts <code>PTCKDT</code> (check date) and <code>PTDATE</code> (pay-by date) to 8-digit format (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</li> </ul> </li> <li>Check Pay-By Date (line 0094): If <code>PTDATE \u2260 0</code>, proceeds to match open payables; otherwise, skips to <code>END01</code>.</li> <li>Set Up <code>APOPEN</code> Read (lines 0099\u20130101):<ul> <li>If <code>PTFDIS = 'D'</code>, sets force discount flag (indicator 10).</li> <li>Sets lower limit (<code>OPLIM</code>) with <code>PTCONO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0103\u20130160, <code>AGN01</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or halted records (<code>OPHALT = 'H'</code>).</li> <li>Validates:</li> <li>Company number (<code>OPCONO = PTCONO</code>).</li> <li>Bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):<ul> <li>If <code>PTHOLD = ' '</code>, selects records where <code>OPHALT \u2260 'A', 'W', 'E', 'U'</code> (checks).</li> <li>If <code>PTHOLD = 'A'</code>, selects only <code>OPHALT = 'A'</code> (ACH).</li> <li>If <code>PTHOLD = 'W'</code>, selects only <code>OPHALT = 'W'</code> (wire transfer).</li> <li>If <code>PTHOLD = 'E'</code>, selects only <code>OPHALT = 'E'</code> (employee expense).</li> <li>If <code>PTHOLD = 'U'</code>, selects only <code>OPHALT = 'U'</code> (utility auto-pay).</li> </ul> </li> <li>Converts due date (<code>OPDUED</code>) to 8-digit format (<code>DTYMD8</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code> and <code>PTHOLD = ' '</code>), clears <code>OPCKNO</code> and <code>OPCKDT</code>.</li> <li>Skips vouchers with due date after <code>PTDATE</code> (<code>DTYMD8 &gt; PTDAT8</code>).</li> <li>For ACH, wire, employee expense, or utility auto-pay (<code>PTHOLD = 'A', 'W', 'E', 'U'</code>), sets <code>OPPAID</code>, <code>OPCKNO</code>, and <code>OPCKDT</code> accordingly.</li> </ul> </li> <li>Calculate Payment Amount (lines 0142\u20130149):<ul> <li>If voucher is past due (<code>DTYMD8 &gt; CKYMD8</code>) or force discount is off, sets <code>OPDISC = 0</code>.</li> <li>If partially paid (<code>OPPPTD \u2260 0</code>), sets <code>OPDISC = 0</code>.</li> <li>Calculates last payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> </ul> </li> <li>Handle One-Time Vendor (lines 0151\u20130152): If <code>OPVEND = 0</code>, sets <code>OPSNGL = 'S'</code> (single check).</li> <li> <p>Write <code>ADPPAY</code> (lines 0154\u20130159):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>. If not found (indicator 89 on), adds new record; otherwise, updates existing record.</li> <li>Writes record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> </ul> </li> <li> <p>EACH02 Subroutine (Pay by Vendor/Voucher) (lines 0164\u20130281):</p> </li> <li>Validate Input (lines 0168\u20130171):<ul> <li>Sets force discount flag if <code>PTFDIS = 'D'</code> (indicator 10).</li> <li>Checks if paying whole vendor (<code>PTVO = 0</code>, indicator 12).</li> <li>Checks if partial payment (<code>PTAMT \u2260 0</code>, indicator 14).</li> <li>Checks if vendor/voucher is on hold (<code>PTPORH = 'H'</code>, indicator 15).</li> </ul> </li> <li>Set Up <code>APOPEN</code> Read (lines 0172\u20130178):<ul> <li>Constructs <code>OPLIM</code> with <code>PTCONO</code>, <code>PTVEND</code>, and <code>PTVO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0180\u20130269, <code>AGN02</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or mismatched company (<code>OPCONO \u2260 PTCONO</code>) or vendor (<code>OPVEND \u2260 PTVEND</code>).</li> <li>For whole vendor (<code>PTVO = 0</code>), ensures <code>OPBKGL = PTBKGL</code>. For specific voucher, ensures <code>OPVONO = PTVO</code>.</li> <li>Validates payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>) as in <code>EACH01</code>.</li> <li>For prepaid vouchers (<code>PTMKPP \u2260 ' '</code>), ensures <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).</li> <li>For held vouchers (<code>OPHALT = 'H'</code>), requires <code>PTPORH = 'P'</code> to pay.</li> <li>Converts dates and sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH, wire, employee expense, or utility auto-pay.</li> </ul> </li> <li>Calculate Payment Amount (lines 0242\u20130258):<ul> <li>Applies override discount (<code>PTDISC</code>) if provided (<code>OPDISC = PTDISC</code>).</li> <li>Adjusts <code>OPDISC</code> for past due or partially paid vouchers.</li> <li>Calculates <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments (<code>PTAMT \u2260 0</code>), adjusts <code>OPLPAM</code> and <code>PTAMT</code> accordingly.</li> </ul> </li> <li>Handle Single Check and One-Time Vendor (lines 0260\u20130265):<ul> <li>Sets <code>OPSNGL = PTSNGL</code> if provided, or <code>'S'</code> for one-time vendors (<code>PTVEND = 0</code>).</li> </ul> </li> <li> <p>Write/Delete <code>ADPPAY</code> (lines 0267\u20130279):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>.</li> <li>If on hold (<code>PTPORH = 'H'</code>), marks <code>ADPPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li>Otherwise, adds or updates <code>ADPPAY</code> record with fields as in <code>EACH01</code>.</li> </ul> </li> <li> <p>File Output (lines 0284\u20130303):</p> </li> <li>Add (<code>EADD 80 89</code>): Writes new <code>ADPPAY</code> record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> <li>Update/Delete (<code>E 80N89</code>): Updates existing <code>ADPPAY</code> record, setting <code>PYDEL</code> to <code>'D'</code> for deletion or <code>' '</code> for update.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Selection:    - Skips deleted records (<code>OPDEL = 'D'</code>), detail records, or halted records (<code>OPHALT = 'H'</code>) unless explicitly set to pay (<code>PTPORH = 'P'</code>).    - Matches company number (<code>OPCONO = PTCONO</code>) and bank G/L number (<code>OPBKGL = PTBKGL</code>).    - Matches payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):      - <code>' '</code> (checks): Selects non-ACH/wire/employee/utility vouchers.      - <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility): Selects matching <code>OPHALT</code>. 2. Pay by Date (<code>EACH01</code>):    - Processes vouchers with due date (<code>OPDUED</code>) \u2264 pay-by date (<code>PTDATE</code>).    - Clears check number/date (<code>OPCKNO</code>, <code>OPCKDT</code>) for prepaid vouchers if paying by check.    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH/wire/employee/utility payments. 3. Pay by Vendor/Voucher (<code>EACH02</code>):    - Matches vendor (<code>OPVEND = PTVEND</code>) and, if specified, voucher (<code>OPVONO = PTVO</code>).    - For whole vendor (<code>PTVO = 0</code>), ensures bank G/L match.    - Allows partial payments (<code>PTAMT</code>) and override discounts (<code>PTDISC</code>).    - Deletes <code>ADPPAY</code> records for held vendors/vouchers (<code>PTPORH = 'H'</code>). 4. Discount Handling:    - Applies force discount (<code>PTFDIS = 'D'</code>) unless voucher is past due or partially paid.    - Uses override discount (<code>PTDISC</code>) if provided.    - Sets discount to 0 for past due or partially paid vouchers. 5. Payment Amount:    - Calculates payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).    - Adjusts for partial payments, ensuring <code>PTAMT</code> does not exceed remaining amount. 6. Single Check and One-Time Vendor:    - Sets <code>OPSNGL = 'S'</code> for one-time vendors (<code>OPVEND = 0</code>) or if specified (<code>PTSNGL \u2260 ' '</code>). 7. Prepaid Vouchers:    - Allows prepayment only if <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for prepaid records.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPYTR: A/P transaction file (128 bytes, input primary, <code>IP</code>). Contains transaction data (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>, <code>PTVEND</code>, <code>PTVO</code>). 2. APOPEN: A/P open items file (384 bytes, input with database relations, <code>ID</code>, indexed by 16 keys). Contains open payables (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPPAID</code>). 3. ADPPAY: A/P payment file (226 bytes, update mode, <code>UC</code>, indexed by 16 keys). Stores payment records (e.g., <code>PYDEL</code>, <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPLPAM</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP141</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>EACH01</code>, <code>EACH02</code>) for Rosettacut 4 times: System, System, System, System for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#summary","title":"Summary","text":"<p>AP141 processes <code>ADPYTR</code> transactions to create or update <code>ADPPAY</code> records by matching against <code>APOPEN</code>. It: - Handles two transaction types: pay by date (<code>EACH01</code>) and pay by vendor/voucher (<code>EACH02</code>). - Validates company, bank G/L, and payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>). - Manages discounts, partial payments, and prepaid vouchers. - Supports checks, ACH, wire transfers, employee expenses, and utility auto-pay. - Uses three files (<code>ADPYTR</code>, <code>APOPEN</code>, <code>ADPPAY</code>) and no external programs. - Outputs <code>ADPPAY</code> records for the next sort and <code>AP145</code> processing in the OCL script.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/","title":"AP145 RPG","text":"<p>The AP145.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that generates the Employee Expenses Voucher Selection Spreadsheet and Report as part of the A/P process. It is the final program called in the OCL script after the second sort (<code>#GSORT</code>) and processes sorted payment records from <code>ADPPAY</code> to produce reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) and a disk file (<code>APEEPY</code>). Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>, <code>AP141</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#process-steps-of-the-ap145-rpg-program","title":"Process Steps of the AP145 RPG Program","text":"<p>The <code>AP145</code> program processes payment records from <code>ADPPAY</code> (sorted by company, bank G/L, vendor, prepaid code, check number, and single check code) and <code>AP145S</code> (a sorted version of <code>ADPPAY</code>) to generate detailed employee expense reports and a summary file. It accumulates totals, validates checks, and handles payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay). The program uses subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) to manage processing.</p> <ol> <li>Program Initialization:</li> <li>Reads <code>ADPPAY</code> as the primary file (<code>UP</code>) and <code>AP145S</code> as a secondary file (<code>IR</code>) with matching records logic.</li> <li>Level Breaks (lines 0061\u20130069):<ul> <li>At company level break (<code>L6</code>, company change), calls <code>L6DET</code> to initialize company-level data and print headers.</li> <li>At vendor level break (<code>L4</code>, vendor change), sets indicator 14 and calls <code>L4DET</code> to process vendor details.</li> <li>At prepaid code level (<code>L3</code>), checks <code>OPPAID</code> for <code>'P'</code> (check, indicator 25), <code>'A'</code> (ACH, 26), <code>'W'</code> (wire transfer, 27), <code>'E'</code> (employee expense, 28), or <code>'U'</code> (utility auto-pay, 29). Sets indicator 11 for prepaid records.</li> <li>At single check level (<code>L1</code>, <code>OPSNGL = 'S'</code>), sets indicator 10 for single check processing.</li> </ul> </li> <li> <p>Stub Check (line 0070): If stub is full (<code>COUNT = 12</code>, indicator 12) and not prepaid (indicator 11 off), calls <code>CHECK</code> to process the check.</p> </li> <li> <p>Process Each Invoice (lines 0073\u20130082):</p> </li> <li>Accumulates totals: <code>CKGRAM</code> (gross amount), <code>CKDISC</code> (discount), <code>CKAMT</code> (payment amount).</li> <li>Calculates negative amount (<code>NEGAMT = CKAMT * -1</code>) for reporting.</li> <li>Increments invoice count (<code>COUNT</code>).</li> <li>Calls <code>L4DET</code> at vendor break (indicator 14 on).</li> <li>Writes detail record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicator 80) and updates <code>ADPPAY</code> with sequence number (<code>SEQ#</code>).</li> <li> <p>Sets overflow indicator (76) if printer overflow occurs (<code>OF</code> on).</p> </li> <li> <p>Check for Full Stub (lines 0085\u20130092):</p> </li> <li>If not a single check (<code>L1</code> off) and <code>COUNT = 12</code> (indicator 12 on), sets full stub condition.</li> <li> <p>For single checks (<code>L1</code> on) or non-single checks with full stub, calls <code>CHECK</code> to finalize the check.</p> </li> <li> <p>Company-Level Processing (<code>L6</code> Break) (lines 0095\u20130109):</p> </li> <li>Sets indicator 86 to print company totals.</li> <li>Writes company total record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>).</li> <li> <p>Resets company-level counters (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, <code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>, <code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</p> </li> <li> <p>L6DET Subroutine (Company-Level Processing) (lines 0112\u20130126):</p> </li> <li>Initializes page number (<code>PAGE = 0</code>) and separator (<code>SEP = '* '</code>).</li> <li>Gets current date and time (<code>TIME</code>, <code>DATE</code>) and converts <code>DATE</code> to 8-digit format (<code>DATE8</code>).</li> <li>Chains to <code>APCONT</code> with <code>OPCONO</code> to get company name (<code>ACNAME</code>) and pre-numbered check flag (<code>ACPRE#</code>).</li> <li>Chains to <code>ADPYTR</code> with <code>'00000'</code> to get next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>).</li> <li>Sets <code>PAYBY</code> based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>'A'</code>: \"PAY BY ACH\"</li> <li><code>'W'</code>: \"PAY BY WIRE TFR\"</li> <li><code>'E'</code>: \"PAY BY PAYROLL\"</li> <li><code>'U'</code>: \"PAY BY UTIL-AUPY\"</li> </ul> </li> <li> <p>Writes report header to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicators 76, 77).</p> </li> <li> <p>L4DET Subroutine (Vendor-Level Processing) (lines 0128\u20130144):</p> </li> <li>Constructs vendor key (<code>VNKEY</code>) from <code>OPCONO</code> and <code>OPVEND</code>.</li> <li>Chains to <code>APVEND</code> to get vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>).</li> <li>If not found (indicator 94 on), chains to <code>APOPEN</code> with <code>OPKEY</code> (constructed from <code>VNKEY</code>, <code>OPVONO</code>, and <code>'3001'</code>) to get <code>VNNAME</code> and <code>VNSORT</code>.</li> <li>If still not found, clears <code>VNNAME</code> and <code>VNSORT</code>.</li> <li> <p>Writes vendor detail to <code>APEEEXP</code> (via <code>EXCPT</code>, indicator 74) and handles overflow.</p> </li> <li> <p>CHECK Subroutine (Check Processing) (lines 0146\u20130194):</p> </li> <li>Resets indicators 19 (credit/no pay) for non-prepaid and non-full stub cases.</li> <li>Sets check number (<code>THISCK</code>):<ul> <li>For prepaid (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For credit/no pay (<code>CKAMT = 0</code>), sets <code>THISCK = 0</code>.</li> <li>Otherwise, uses <code>PTNXCK</code> (next check number).</li> </ul> </li> <li>If credit/no pay or full stub without pre-numbered checks, calls <code>NOPAY</code>.</li> <li>Calls <code>EDITCK</code> to validate check.</li> <li>Writes check record to <code>ADPYCK</code> (via <code>EXCPT</code>, indicator 81).</li> <li>Increments <code>NXCK</code> (next check number) unless credit/no pay or full stub.</li> <li>Updates counters:<ul> <li>Non-prepaid, non-credit (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Non-credit (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li> <p>Resets <code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>, <code>NEGAMT</code>, <code>COUNT</code>, and sets vendor break (indicator 14).</p> </li> <li> <p>NOPAY Subroutine (Credit/No Pay Processing) (lines 0196\u20130217):</p> </li> <li>Handles negative or zero-amount checks by marking related <code>ADPYCK</code> records as credit/no pay (<code>AXRECD = 'C'</code>).</li> <li>Reads backward through <code>ADPYCK</code> starting from <code>SEQ#</code> (<code>CRSEQ#</code>).</li> <li>For full stub records (<code>AXRECD = 'F'</code> or <code>'V'</code>), updates <code>NXCK</code>, decrements counters (<code>C6CNT</code>, <code>L6CNT</code>), sets <code>AXRECD = 'C'</code>, and clears <code>AXCHEK</code>.</li> <li> <p>Writes updated <code>ADPYCK</code> record (via <code>EXCPTNOPAYX</code>).</p> </li> <li> <p>EDITCK Subroutine (Check Validation) (lines 0219\u20130248):</p> </li> <li>Validates check amount (<code>CKAMT</code>):<ul> <li>If <code>CKAMT = 0</code>, sets indicators 20 and 21 (credit/no pay).</li> </ul> </li> <li>Constructs check key (<code>ATKEY</code>) from <code>OPCONO</code>, <code>OPBKGL</code>, and <code>THISCK</code>.</li> <li> <p>Chains to <code>APCHKR</code> to check if the check exists:</p> <ul> <li>For non-void checks (<code>CKAMT \u2260 0</code> and not found), ensures <code>AMCODE \u2260 'O'</code> (open). If open, sets error indicator 23.</li> <li>For void checks (<code>CKAMT = 0</code> and found), ensures <code>AMCODE = 'O'</code> and <code>VOIDAM = AMCKAM</code>. If not, sets error 23.</li> </ul> </li> <li> <p>File Output (lines 0251\u20130470):</p> <ul> <li>ADPPAY: Updates <code>SEQ#</code> for each record.</li> <li>ADPYCK:</li> <li>Adds records with <code>AXRECD</code> set to <code>' '</code> (normal), <code>'C'</code> (credit/no pay), <code>'P'</code> (prepaid check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay), <code>'F'</code> (full stub), or <code>'V'</code> (full stub/void).</li> <li>Includes <code>OPCONO</code>, <code>OPBKGL</code>, <code>THISCK</code>, <code>OPVEND</code>, <code>CKAMT</code>, <code>PTCKDT</code> or <code>OPCKDT</code>, <code>VNNAME</code>, <code>SEQ#</code>, <code>COUNT</code>.</li> <li>APEEPY: Writes summary records with ADP payroll ID (<code>VNPRID</code>) and negative amount (<code>NEGAMT</code>).</li> <li>APEEEXP/APEEEXPO:</li> <li>Prints headers with company name, payment type (<code>PAYBY</code>), date, time, and column labels.</li> <li>Prints detail lines with sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, and voucher number.</li> <li>Prints check totals, prepaid indicators, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</li> <li>Prints company totals with employee count and aggregates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Type Handling:</li> <li>Processes payments based on <code>OPPAID</code>/<code>PTHOLD</code>: <code>'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Labels payment types in reports (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Check Number Assignment:</li> <li>Uses <code>OPCKNO</code> for prepaid checks, <code>PTNXCK</code> for non-prepaid, or 0 for credit/no pay.</li> <li>Increments <code>PTNXCK</code> for new checks unless full stub or credit/no pay.</li> <li>Stub Limits:</li> <li>Limits stubs to 12 invoices (<code>COUNT = 12</code> triggers full stub).</li> <li>Marks full stubs as <code>'F'</code> or <code>'V'</code> (void) in <code>ADPYCK</code>.</li> <li>Credit/No Pay:</li> <li>Negative or zero-amount checks (<code>CKAMT = 0</code>) are marked as credit/no pay (<code>AXRECD = 'C'</code>) with <code>AXCHEK = 0</code>.</li> <li>Adjusts prior full stub records in <code>ADPYCK</code> to credit/no pay.</li> <li>Check Validation:</li> <li>Non-void checks must not exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open (<code>AMCODE = 'O'</code>), and have matching amounts.</li> <li>Vendor Information:</li> <li>Retrieves <code>VNNAME</code> and <code>VNSORT</code> from <code>APVEND</code> or <code>APOPEN</code> if not found.</li> <li>Uses ADP payroll ID (<code>VNPRID</code>) for <code>APEEPY</code> output.</li> <li>Totals and Aggregates:</li> <li>Tracks company-level (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>), prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>), and check-level (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>) totals.</li> <li>Resets check-level totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) after each check.</li> <li>Report Formatting:</li> <li>Prints detailed reports with invoice details, check totals, and company summaries.</li> <li>Handles overflow and page breaks.</li> <li>Outputs summary data to <code>APEEPY</code> for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPPAY: A/P payment file (226 bytes, update mode, <code>UP</code>, indexed by 16 keys). Primary input with payment data (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code>, <code>OPPAID</code>). 2. AP145S: Sorted A/P payment file (3 bytes, input with relations, <code>IR</code>). Used for matching records (extension of <code>ADPPAY</code>). 3. APCONT: A/P control file (256 bytes, input, <code>IC</code>, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACPRE#</code>). 4. ADPYTR: A/P transaction file (128 bytes, input, <code>IC</code>, indexed by 5 keys). Provides next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>). 5. APVEND: Vendor master file (579 bytes, input, <code>IC</code>, indexed by 7 keys). Contains vendor details (e.g., <code>VNNAME</code>, <code>VNSORT</code>, <code>VNPRID</code>). 6. APOPEN: A/P open items file (384 bytes, input, <code>IC</code>, indexed by 16 keys). Provides vendor name and sort data if not in <code>APVEND</code>. 7. APCHKR: Check register file (128 bytes, input, <code>IC</code>, indexed by 16 keys). Validates check status (<code>AMCODE</code>, <code>AMCKAM</code>). 8. ADPYCK: Check file (96 bytes, update mode, <code>UC</code>, indexed by 9 keys). Stores check records (e.g., <code>AXRECD</code>, <code>AXCHEK</code>). 9. APEEEXP: Printer file (142 bytes, output, <code>O</code>). Primary employee expense report. 10. APEEEXPO: Printer file (142 bytes, output, <code>O</code>). Secondary report (paperless). 11. APEEPY: Employee expense disk file (74 bytes, output, <code>O</code>). Summary for payroll integration.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP145</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#summary","title":"Summary","text":"<p>AP145 generates the final employee expense report and spreadsheet by: - Processing sorted <code>ADPPAY</code> records to accumulate invoice and check totals. - Validating checks against <code>APCHKR</code> and handling credit/no pay cases. - Retrieving vendor and company data from <code>APVEND</code>, <code>APOPEN</code>, and <code>APCONT</code>. - Writing check records to <code>ADPYCK</code> and summary data to <code>APEEPY</code>. - Printing detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with headers, invoice details, check totals, and company summaries. - Supporting payment types (checks, ACH, wire, employee expense, utility auto-pay). - Using 11 files and no external programs.</p> <p>The output (<code>APEEEXP</code>, <code>APEEEXPO</code>, <code>APEEPY</code>) completes the A/P employee expense process defined in the OCL script.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/","title":"AP300 OCL","text":"<p>The provided OCL program, <code>AP300.ocl36.txt</code>, is an Operation Control Language (OCL) script for the IBM System/36 environment, called from the main OCL script (<code>AP300P.ocl36.txt</code>) to perform the Accounts Payable (A/P) vendor file update, specifically clearing Month-to-Date (MTD) and/or Year-to-Date (YTD) totals in the vendor master file. It also handles file backups for IRS 1099 processing. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called, ensuring a clear and concise analysis that ties back to the previously analyzed <code>AP300P.ocl36.txt</code> and <code>AP300P.rpg36.txt</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The <code>AP300.ocl36.txt</code> script orchestrates the A/P vendor file update process, including sorting the vendor file, saving backups for 1099 processing, maintaining a rolling history of vendor files, and executing the update program. Here\u2019s a step-by-step breakdown:</p> <ol> <li>User Prompt and Pause (<code>// PAUSE</code>):</li> <li>The script displays a warning message to ensure no users are accessing the Accounts Payable system during the update, as concurrent access could cause data inconsistencies.</li> <li>The message instructs users to exit the A/P system and press <code>0</code> to continue or <code>Shift/ES</code> and select option <code>2</code> to cancel.</li> <li> <p>The <code>// PAUSE</code> statement halts execution, waiting for user confirmation, ensuring exclusive access to the vendor file.</p> </li> <li> <p>Sort Vendor File (<code>// LOAD #GSORT</code>):</p> </li> <li>Loads the System/36 sort utility (<code>#GSORT</code>) to preprocess the vendor file.</li> <li>Input File: <code>?9?APVEND</code> (vendor master file, shared mode <code>DISP-SHR</code>).</li> <li>Output File: <code>?9?AP300S</code> (temporary sorted file, created with up to 999,000 records, extendable by 999,000, retained as a job file <code>RETAIN-J</code>).</li> <li>Sort Specifications:<ul> <li><code>HSORTA 7A 3X N</code>: Sorts in ascending order (<code>A</code>) on a 7-byte field, with additional specifications (<code>3X</code> likely indicates a control field or exclusion, <code>N</code> for no sequence checking).</li> <li>Selection Criteria:</li> <li>Records are included if the company number (positions 2\u20133) matches one of the user-specified companies (<code>?L'114,2'?</code>, <code>?L'116,2'?</code>, <code>?L'118,2'?</code> from the Local Data Area, corresponding to <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> from <code>AP300P.rpg36.txt</code>) and the record is not deleted (<code>NECD</code> at position 1).</li> <li>If <code>KYALCO = 'ALL'</code> (from <code>AP300P</code>), all non-deleted records are likely included, as the OCL script relies on <code>AP300P</code> to validate company selection.</li> <li>Fields:</li> <li><code>FNC 2 3 COMPANY</code>: Company number (2 bytes, positions 2\u20133).</li> <li><code>FNC 4 8 VENDOR</code>: Vendor number (5 bytes, positions 4\u20138).</li> </ul> </li> <li> <p>The sorted output (<code>?9?AP300S</code>) contains only the records needed for the update, filtered by company and deletion status.</p> </li> <li> <p>Save Vendor File for 1099 Processing (<code>// IF ?L'135,1'?/Y ...</code>):</p> </li> <li>Checks if <code>?L'135,1'?</code> (corresponding to <code>KYYTDY</code> in <code>AP300P.rpg36.txt</code>) is <code>Y</code>, indicating YTD totals are to be cleared.</li> <li>If true, copies the vendor file (<code>?9?APVEND</code>) to two backup files for 1099 processing:<ul> <li><code>QS36F/APVN?L'136,4'?</code>: Named <code>APVN</code> followed by the 4-digit year (<code>KYCCYY</code> from <code>AP300P</code>, e.g., <code>APVN2025</code>).</li> <li><code>QS36F/?9?VN?L'136,4'?</code>: Named with library prefix <code>?9?</code> (e.g., <code>PRODVN2025</code>).</li> <li>Both use <code>CPYF</code> with <code>MBROPT(*REPLACE)</code> to overwrite existing files and <code>CRTFILE(*YES)</code> to create the files if they don\u2019t exist.</li> </ul> </li> <li> <p>This step ensures a snapshot of the vendor file is preserved for IRS 1099 reporting, as YTD clearing would reset tax-related data.</p> </li> <li> <p>Maintain Rolling Vendor File History:</p> </li> <li>Manages a rolling history of up to 12 months of vendor file backups (<code>?9?U1VEND</code> to <code>?9?UCVEND</code>).</li> <li>Steps:<ul> <li>Deletes the oldest file (<code>?9?UCVEND</code>) if it exists (<code>DELETE ?9?UCVEND,F1</code>).</li> <li>Renames files to shift the history:</li> <li><code>?9?UBVEND</code> to <code>?9?UCVEND</code></li> <li><code>?9?UAVEND</code> to <code>?9?UBVEND</code></li> <li><code>?9?U9VEND</code> to <code>?9?UAVEND</code></li> <li>... down to <code>?9?U1VEND</code> to <code>?9?U2VEND</code>.</li> <li>Copies the current vendor file (<code>?9?APVEND</code>) to <code>?9?U1VEND</code> using <code>CPYF</code> with <code>MBROPT(*REPLACE)</code> and <code>CRTFILE(*YES)</code>.</li> </ul> </li> <li> <p>This creates a new backup (<code>?9?U1VEND</code>) and shifts older backups, maintaining a 12-month history for auditing or recovery.</p> </li> <li> <p>Set Inquiry Attribute (<code>// ATTR INQUIRY-YES,CANCEL-NO</code>):</p> </li> <li> <p>Sets the job attribute to allow inquiry (<code>YES</code>) but disallow cancellation (<code>NO</code>) during the update, ensuring the process completes once started.</p> </li> <li> <p>Execute Update Program (<code>// LOAD AP300</code>):</p> </li> <li>Loads the <code>AP300</code> program, which performs the actual MTD/YTD clearing.</li> <li>Files:<ul> <li><code>APVEND</code>: Input vendor master file (<code>?9?APVEND</code>, shared mode).</li> <li><code>AP300S</code>: Sorted temporary file (<code>?9?AP300S</code>) from the sort step.</li> </ul> </li> <li>Run: Executes <code>AP300</code> to process the sorted records and update <code>APVEND</code> by clearing MTD and/or YTD totals based on parameters set by <code>AP300P.rpg36.txt</code> (e.g., <code>KYALCO</code>, <code>KYCO1</code>, <code>KYYTDY</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/#business-rules","title":"Business Rules","text":"<p>The OCL script enforces the following business rules for the A/P vendor file update:</p> <ol> <li>Exclusive Access:</li> <li> <p>No users can access the A/P system during the update to prevent data corruption. The <code>PAUSE</code> ensures users confirm they\u2019ve exited the system.</p> </li> <li> <p>Company Filtering:</p> </li> <li>Updates are applied to either all non-deleted vendors (<code>KYALCO = 'ALL'</code>) or specific companies (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) as validated by <code>AP300P</code>.</li> <li> <p>Only non-deleted records (<code>NECD \u2260 'D'</code>) are processed, as specified in the sort criteria.</p> </li> <li> <p>YTD Backup for 1099:</p> </li> <li>If YTD totals are cleared (<code>KYYTDY = 'Y'</code>), the vendor file is backed up to two files (<code>APVN&lt;year&gt;</code> and <code>?9?VN&lt;year&gt;</code>) for IRS 1099 processing.</li> <li> <p>The year (<code>KYCCYY</code>) must be provided, as validated by <code>AP300P</code>.</p> </li> <li> <p>Rolling File History:</p> </li> <li>Maintains a 12-month history of vendor file snapshots (<code>?9?U1VEND</code> to <code>?9?UCVEND</code>) for auditing or recovery.</li> <li> <p>The oldest file is deleted, and others are renamed to accommodate a new backup each time the process runs.</p> </li> <li> <p>File Management:</p> </li> <li>The sorted file (<code>?9?AP300S</code>) is temporary (<code>RETAIN-J</code>) and used only for the current job.</li> <li> <p>The vendor file (<code>?9?APVEND</code>) is updated in shared mode to allow read access but ensure safe updates.</p> </li> <li> <p>No Cancellation During Update:</p> </li> <li>Once the update starts (<code>AP300</code> is loaded), cancellation is disabled (<code>CANCEL-NO</code>) to ensure completion.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script uses the following files:</p> <ol> <li>?9?APVEND:</li> <li>Type: Disk file (vendor master file).</li> <li>Purpose: Primary input file containing vendor data, updated by <code>AP300</code>.</li> <li>Access: Shared mode (<code>DISP-SHR</code>) for sorting and updating.</li> <li> <p>Label: <code>?9?APVEND</code> (e.g., <code>PRODAPVEND</code> with library prefix).</p> </li> <li> <p>?9?AP300S:</p> </li> <li>Type: Temporary disk file.</li> <li>Purpose: Stores sorted vendor records filtered by company and deletion status for processing by <code>AP300</code>.</li> <li>Attributes: Up to 999,000 records, extendable, retained for the job (<code>RETAIN-J</code>).</li> <li> <p>Label: <code>?9?AP300S</code>.</p> </li> <li> <p>APVN?L'136,4'?:</p> </li> <li>Type: Disk file in library <code>QS36F</code>.</li> <li>Purpose: Backup of vendor file for 1099 processing when YTD is cleared (e.g., <code>APVN2025</code> for year 2025).</li> <li> <p>Attributes: Created/overwritten with <code>CPYF</code>, <code>MBROPT(*REPLACE)</code>, <code>CRTFILE(*YES)</code>.</p> </li> <li> <p>?9?VN?L'136,4'?:</p> </li> <li>Type: Disk file in library <code>QS36F</code>.</li> <li>Purpose: Additional 1099 backup with library prefix (e.g., <code>PRODVN2025</code>).</li> <li> <p>Attributes: Same as <code>APVN&lt;year&gt;</code>.</p> </li> <li> <p>?9?U1VEND to ?9?UCVEND:</p> </li> <li>Type: Disk files (12 files).</li> <li>Purpose: Rolling history of vendor file backups for up to 12 months.</li> <li>Operations: Renamed in sequence, with the oldest (<code>?9?UCVEND</code>) deleted and a new <code>?9?U1VEND</code> created.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script calls the following programs:</p> <ol> <li>#GSORT:</li> <li>System/36 sort utility.</li> <li> <p>Purpose: Sorts the <code>?9?APVEND</code> file into <code>?9?AP300S</code> based on company and vendor fields, filtering by user-specified companies and non-deleted records.</p> </li> <li> <p>AP300:</p> </li> <li>Main update program.</li> <li>Purpose: Processes the sorted file (<code>?9?AP300S</code>) to clear MTD and/or YTD totals in <code>?9?APVEND</code> based on parameters from <code>AP300P</code> (e.g., <code>KYALCO</code>, <code>KYYTDY</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20OCL/#summary","title":"Summary","text":"<p>Process Overview: - The <code>AP300.ocl36.txt</code> script manages the A/P vendor file update process:   - Prompts users to ensure exclusive access with a <code>PAUSE</code>.   - Sorts the vendor file (<code>?9?APVEND</code>) into a temporary file (<code>?9?AP300S</code>) based on company selection.   - If YTD is cleared, saves the vendor file to two 1099 backup files (<code>APVN&lt;year&gt;</code>, <code>?9?VN&lt;year&gt;</code>).   - Maintains a 12-month rolling history of vendor file backups (<code>?9?U1VEND</code> to <code>?9?UCVEND</code>).   - Executes the <code>AP300</code> program to clear MTD/YTD totals in <code>?9?APVEND</code>.</p> <p>Business Rules: - Requires exclusive A/P system access during execution. - Filters updates by company (<code>ALL</code> or specific) and excludes deleted records. - Saves YTD data for 1099 processing when clearing YTD totals. - Maintains a 12-month vendor file history. - Disables cancellation during the update to ensure completion.</p> <p>Tables Used: - <code>?9?APVEND</code>: Vendor master file (input/output). - <code>?9?AP300S</code>: Temporary sorted file. - <code>APVN&lt;year&gt;</code>, <code>?9?VN&lt;year&gt;</code>: 1099 backup files. - <code>?9?U1VEND</code> to <code>?9?UCVEND</code>: Rolling history backups.</p> <p>External Programs: - <code>#GSORT</code>: Sorts the vendor file. - <code>AP300</code>: Performs the MTD/YTD update.</p> <p>This script integrates with <code>AP300P.rpg36.txt</code> (for input validation) and <code>AP300P.ocl36.txt</code> (for job control), ensuring a robust A/P update process with proper data backup and validation. If you need details on the <code>AP300</code> program\u2019s RPG logic or further clarification, please provide additional files or context!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/","title":"AP300 RPG","text":"<p>The provided RPG program, <code>AP300.rpg36.txt</code>, is an RPG II program designed for the IBM System/36 environment, called by the OCL script <code>AP300.ocl36.txt</code>. It performs the actual clearing of Month-to-Date (MTD) and Year-to-Date (YTD) totals in the Accounts Payable (A/P) vendor master file. This program is the final step in the A/P update process orchestrated by <code>AP300P.ocl36.txt</code>, <code>AP300P.rpg36.txt</code>, and <code>AP300.ocl36.txt</code>. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called, ensuring a concise and clear analysis that integrates with the previous documents.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AP300</code> program processes the sorted vendor records to clear MTD and optionally YTD totals in the vendor master file. Here\u2019s a step-by-step breakdown:</p> <ol> <li>File and Data Definitions:</li> <li>Files:<ul> <li><code>APVEND</code>: Vendor master file, defined as an update file (<code>UP</code>) with 579-byte records, indexed (<code>I</code>), used for reading and updating vendor records.</li> <li><code>AP300S</code>: Sorted input file, defined as an input file (<code>IR</code>) with 30-byte records, indexed with 3-byte keys (<code>3IT</code>), used to identify which vendor records to update.</li> </ul> </li> <li>Input Specifications:<ul> <li><code>APVEND</code> fields (packed decimal, <code>P</code>):</li> <li><code>VN$YTD</code> (6,2): YTD purchases (positions 195\u2013200).</li> <li><code>VN$LYR</code> (6,2): Last year\u2019s purchases (positions 201\u2013206).</li> <li><code>VNDMTD</code> (4,2): MTD discounts (positions 207\u2013210).</li> <li><code>VNDYTD</code> (5,2): YTD discounts (positions 211\u2013215).</li> <li><code>VNPBAL</code> (5,2): Previous balance (positions 220\u2013224).</li> <li><code>VNPURC</code> (5,2): MTD purchases (positions 225\u2013229).</li> <li><code>VNPAY</code> (5,2): MTD payments (positions 230\u2013234).</li> <li><code>VNCBAL</code> (5,2): Current balance (positions 235\u2013239).</li> <li><code>VNTYDP</code> (6,2): This year\u2019s YTD paid (positions 242\u2013247).</li> <li><code>VNLYDP</code> (6,2): Last year\u2019s YTD paid (positions 248\u2013253).</li> <li><code>UDS</code> (Local Data Area):</li> <li><code>KYYTDY</code> (1 byte, position 135): Flag indicating whether to clear YTD totals (<code>'Y'</code> or blank).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li><code>05</code>: Controls whether the program runs (set if <code>KYYTDY \u2260 'Y'</code>).</li> <li><code>50</code>: Set if YTD clearing is requested (<code>KYYTDY = 'Y'</code>).</li> <li><code>01</code>: Output indicator for updating <code>APVEND</code> records.</li> </ul> </li> <li> <p>Initialization and YTD Check (Lines 0026\u20130027):</p> </li> <li>Checks if <code>KYYTDY = 'Y'</code> (from <code>AP300P.rpg36.txt</code> via the Local Data Area).</li> <li>If true, sets indicator <code>50</code> to control YTD field updates.</li> <li> <p>If <code>KYYTDY \u2260 'Y'</code>, sets indicator <code>05</code> to ensure the program processes MTD updates (line 0027).</p> </li> <li> <p>MTD Field Updates (Lines 0029\u20130032):</p> </li> <li>For each vendor record processed:<ul> <li>Clears <code>VNDMTD</code> (MTD discounts) to 0 (<code>Z-ADD0</code>).</li> <li>Sets <code>VNPBAL</code> (previous balance) to the value of <code>VNCBAL</code> (current balance), preserving the balance before clearing MTD fields.</li> <li>Clears <code>VNPURC</code> (MTD purchases) to 0.</li> <li>Clears <code>VNPAY</code> (MTD payments) to 0.</li> </ul> </li> <li> <p>These updates apply to all records processed, regardless of <code>KYYTDY</code>.</p> </li> <li> <p>YTD Field Updates (Lines 0034\u20130038):</p> </li> <li> <p>If indicator <code>50</code> is on (<code>KYYTDY = 'Y'</code>):</p> <ul> <li>Moves <code>VN$YTD</code> (YTD purchases) to <code>VN$LYR</code> (last year\u2019s purchases), preserving YTD data before clearing.</li> <li>Clears <code>VNDYTD</code> (YTD discounts) to 0.</li> <li>Clears <code>VN$YTD</code> (YTD purchases) to 0.</li> <li>Moves <code>VNTYDP</code> (this year\u2019s YTD paid) to <code>VNLYDP</code> (last year\u2019s YTD paid), preserving payment data.</li> <li>Clears <code>VNTYDP</code> (this year\u2019s YTD paid) to 0.</li> </ul> </li> <li> <p>Output to Vendor File (Lines 0040\u20130049):</p> </li> <li>Updates the <code>APVEND</code> file for each processed record (indicator <code>01</code>):<ul> <li>If indicator <code>50</code> is on, updates:</li> <li><code>VN$YTD</code> (YTD purchases).</li> <li><code>VN$LYR</code> (last year\u2019s purchases).</li> <li><code>VNDYTD</code> (YTD discounts).</li> <li><code>VNTYDP</code> (this year\u2019s YTD paid).</li> <li><code>VNLYDP</code> (last year\u2019s YTD paid).</li> <li>Updates MTD fields for all records:</li> <li><code>VNDMTD</code> (MTD discounts).</li> <li><code>VNPBAL</code> (previous balance).</li> <li><code>VNPURC</code> (MTD purchases).</li> <li><code>VNPAY</code> (MTD payments).</li> </ul> </li> <li> <p>The updates are written to the <code>APVEND</code> file, modifying the vendor records.</p> </li> <li> <p>Program Flow:</p> </li> <li>The program processes records from <code>AP300S</code> (sorted by company and vendor, as prepared by <code>#GSORT</code> in <code>AP300.ocl36.txt</code>).</li> <li>For each record in <code>AP300S</code>, it locates the corresponding record in <code>APVEND</code> (via indexing) and applies the MTD and optional YTD updates.</li> <li>The program relies on the <code>AP300S</code> file to determine which vendors to update, based on the company selection (<code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) from <code>AP300P.rpg36.txt</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for clearing MTD and YTD totals:</p> <ol> <li>MTD Clearing:</li> <li>Always clears MTD fields for all processed records:<ul> <li><code>VNDMTD</code> (MTD discounts) set to 0.</li> <li><code>VNPURC</code> (MTD purchases) set to 0.</li> <li><code>VNPAY</code> (MTD payments) set to 0.</li> </ul> </li> <li> <p>Preserves the current balance by moving <code>VNCBAL</code> to <code>VNPBAL</code> before clearing MTD fields.</p> </li> <li> <p>YTD Clearing:</p> </li> <li>Clears YTD fields only if <code>KYYTDY = 'Y'</code> (controlled by indicator <code>50</code>):<ul> <li>Moves <code>VN$YTD</code> (YTD purchases) to <code>VN$LYR</code> (last year\u2019s purchases).</li> <li>Clears <code>VN$YTD</code> and <code>VNDYTD</code> (YTD discounts) to 0.</li> <li>Moves <code>VNTYDP</code> (this year\u2019s YTD paid) to <code>VNLYDP</code> (last year\u2019s YTD paid).</li> <li>Clears <code>VNTYDP</code> to 0.</li> </ul> </li> <li> <p>Preserves YTD data in last-year fields (<code>VN$LYR</code>, <code>VNLYDP</code>) for historical reference or auditing.</p> </li> <li> <p>Record Selection:</p> </li> <li> <p>Processes only records included in the sorted <code>AP300S</code> file, which filters vendors by:</p> <ul> <li>Company selection (<code>ALL</code> or specific companies <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) from <code>AP300P</code>.</li> <li>Non-deleted status (<code>NECD \u2260 'D'</code>) from <code>AP300.ocl36.txt</code>.</li> </ul> </li> <li> <p>Data Integrity:</p> </li> <li>Ensures the current balance (<code>VNCBAL</code>) is not modified, maintaining financial accuracy.</li> <li> <p>Preserves YTD data in last-year fields when clearing YTD totals, supporting audit and 1099 requirements.</p> </li> <li> <p>Dependencies:</p> </li> <li>Relies on <code>AP300P.rpg36.txt</code> to validate user input (<code>KYYTDY</code>, company selections).</li> <li>Relies on <code>AP300.ocl36.txt</code> to sort <code>APVEND</code> into <code>AP300S</code> and handle backups for 1099 processing.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files:</p> <ol> <li>APVEND:</li> <li>Type: Disk file (update, <code>UP</code>).</li> <li>Purpose: Vendor master file containing financial data (MTD/YTD totals), updated by the program.</li> <li>Record Length: 579 bytes, indexed (<code>I</code>).</li> <li>Fields Updated:<ul> <li><code>VN$YTD</code>, <code>VN$LYR</code>, <code>VNDMTD</code>, <code>VNDYTD</code>, <code>VNPBAL</code>, <code>VNPURC</code>, <code>VNPAY</code>, <code>VNTYDP</code>, <code>VNLYDP</code>.</li> </ul> </li> <li> <p>Label: <code>?9?APVEND</code> (e.g., <code>PRODAPVEND</code>).</p> </li> <li> <p>AP300S:</p> </li> <li>Type: Disk file (input, <code>IR</code>).</li> <li>Purpose: Sorted temporary file containing vendor records to be updated, filtered by company and non-deleted status.</li> <li>Record Length: 30 bytes, indexed with 3-byte keys (likely company and vendor numbers).</li> <li>Label: <code>?9?AP300S</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not directly call any external programs (e.g., via <code>CALL</code> operations). It is executed by the <code>AP300.ocl36.txt</code> script and relies on:</p> <ol> <li>#GSORT (from <code>AP300.ocl36.txt</code>):</li> <li>Prepares the <code>AP300S</code> file by sorting <code>APVEND</code> based on company and vendor fields.</li> <li> <p>Not called directly by <code>AP300.rpg36.txt</code> but critical to its input.</p> </li> <li> <p>AP300P.rpg36.txt (indirectly):</p> </li> <li>Provides validated parameters (<code>KYYTDY</code>, <code>KYALCO</code>, <code>KYCO1</code>, etc.) via the Local Data Area, set before <code>AP300</code> runs.</li> </ol> <p>No other programs are called within the RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300%20RPG/#summary","title":"Summary","text":"<p>Process Overview: - <code>AP300.rpg36.txt</code> clears MTD and optionally YTD totals in the <code>APVEND</code> vendor master file. - Processes records from the sorted <code>AP300S</code> file, updating:   - MTD fields (<code>VNDMTD</code>, <code>VNPURC</code>, <code>VNPAY</code>) to 0, with <code>VNPBAL</code> set to <code>VNCBAL</code>.   - YTD fields (<code>VN$YTD</code>, <code>VNDYTD</code>, <code>VNTYDP</code>) to 0 if <code>KYYTDY = 'Y'</code>, moving current YTD values to last-year fields (<code>VN$LYR</code>, <code>VNLYDP</code>). - Updates are written back to <code>APVEND</code> for each processed record.</p> <p>Business Rules: - Always clears MTD fields, preserving the current balance. - Clears YTD fields only if <code>KYYTDY = 'Y'</code>, preserving YTD data in last-year fields. - Processes only records from <code>AP300S</code>, filtered by company and non-deleted status. - Maintains data integrity for financial accuracy and auditing.</p> <p>Tables Used: - <code>APVEND</code>: Vendor master file (updated). - <code>AP300S</code>: Sorted temporary file (input).</p> <p>External Programs: - None called directly; relies on <code>#GSORT</code> (via <code>AP300.ocl36.txt</code>) and <code>AP300P.rpg36.txt</code> (for parameters).</p> <p>This program completes the A/P update process by performing the actual data modifications, integrating with the validation from <code>AP300P.rpg36.txt</code> and file management from <code>AP300.ocl36.txt</code>. If you need further details (e.g., file record layouts or additional context), please provide more information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20OCL/","title":"AP300P OCL","text":"<p>Let\u2019s break down the provided Operation Control Language (OCL) program, <code>AP300P.ocl36.txt</code>, which appears to be a control script used in an IBM System/36 environment to manage Accounts Payable (A/P) monthly and yearly updates for Month-to-Date (MTD) and Year-to-Date (YTD) fields in the vendor master file. OCL is a scripting language used on IBM midrange systems like the System/36 to control job execution and program flow. Below, I\u2019ll explain the process steps, identify external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script controls the execution of an Accounts Payable update process. Here\u2019s a step-by-step explanation of the program\u2019s logic:</p> <ol> <li>Load the Program (<code>// LOAD AP300P</code>):</li> <li>The script begins by loading the program <code>AP300P</code>. This is the main program that performs the A/P monthly or yearly update for MTD/YTD fields in the vendor master file.</li> <li> <p>In the System/36 environment, <code>// LOAD</code> specifies the program to be executed.</p> </li> <li> <p>File Specification (<code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>):</p> </li> <li>The script defines a file named <code>APCONT</code>, which is associated with the disk file labeled <code>?9?APCONT</code>. The <code>?9?</code> is a substitution variable, likely a library or prefix defined at runtime (e.g., a specific library or environment code).</li> <li><code>DISP-SHR</code> indicates the file is opened in shared mode, allowing multiple processes to access it concurrently without modifying its structure.</li> <li> <p>This file (<code>APCONT</code>) is likely the vendor master file containing MTD/YTD data to be updated.</p> </li> <li> <p>Run the Program (<code>// RUN</code>):</p> </li> <li>The <code>// RUN</code> statement initiates the execution of the loaded <code>AP300P</code> program.</li> <li> <p>At this point, the program is expected to perform the core logic of updating MTD/YTD fields, but the OCL script itself does not contain the RPG logic\u2014only the control flow.</p> </li> <li> <p>Conditional Check for Cancel (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li>The script checks a condition using a substitution variable <code>?L'129,6'?</code>, which likely references a 6-character field starting at position 129 in a system control area or parameter area (e.g., Local Data Area or program parameter).</li> <li>If this field equals <code>CANCEL</code>, the script branches to the <code>END</code> tag, effectively terminating the job without further processing.</li> <li> <p>This acts as a safeguard to allow cancellation of the update process based on an external condition (e.g., user input or system state).</p> </li> <li> <p>Conditional Data Assignment (<code>// IF ?L'111,3'?/CO ...</code>):</p> </li> <li>The script checks another condition using <code>?L'111,3'?</code>, a 3-character field starting at position 111.</li> <li>If the condition is <code>CO</code> (likely indicating \"Company\"):<ul> <li>The script sets a local variable at <code>OFFSET-1</code> with the value <code>IAC</code> (3 characters).</li> <li>This might represent a specific company code or configuration for the update process.</li> </ul> </li> <li>Else:<ul> <li>The script sets the same local variable at <code>OFFSET-1</code> with the value <code>I*C</code> (3 characters, where <code>*</code> could be a wildcard or specific character depending on context).</li> <li>This suggests an alternative configuration, possibly for a different company or processing mode.</li> </ul> </li> <li> <p>The <code>LOCAL</code> statement modifies the Local Data Area (LDA), a System/36 mechanism for passing parameters between programs or jobs. The assigned value (<code>IAC</code> or <code>I*C</code>) likely influences how <code>AP300P</code> processes the data.</p> </li> <li> <p>Conditional Job Queue Submission (<code>// IF ?L'120,1'?/Y ...</code>):</p> </li> <li>The script checks a single-character field at position 120 (<code>?L'120,1'?</code>).</li> <li>If the value is <code>Y</code>:<ul> <li>The script submits a job named <code>AP300</code> to a job queue (<code>JOBQ</code>) in the library specified by <code>?CLIB?</code> (a substitution variable for the library name). The job is submitted with parameters <code>,,,,,,,,,?9?</code>, where <code>?9?</code> is likely the same library or environment prefix used earlier.</li> <li>This suggests the update process is queued for batch processing, possibly to run asynchronously or in a specific job queue for resource management.</li> </ul> </li> <li>Else:<ul> <li>The script executes <code>AP300</code> directly (not queued) with parameters <code>,,,,,,,,?9?</code>.</li> <li>This implies immediate execution of the <code>AP300</code> program in the current job stream.</li> </ul> </li> <li> <p>The difference between queuing and direct execution likely depends on system workload or user preference (e.g., <code>Y</code> for batch processing when the system is busy).</p> </li> <li> <p>End of Processing (<code>// TAG END</code>):</p> </li> <li>The <code>END</code> tag marks the termination point of the script. If the <code>CANCEL</code> condition was met earlier, the script jumps here, skipping all other steps.</li> <li> <p>After executing the job or program, the script reaches this point and ends.</p> </li> <li> <p>Clear Local Data Area (<code>// LOCAL BLANK-*ALL</code>):</p> </li> <li>The script clears all data in the Local Data Area (LDA) at the start and end of the program (<code>BLANK-*ALL</code>).</li> <li> <p>This ensures a clean state, preventing residual data from affecting this or subsequent jobs. The LDA is often used to pass parameters or flags between programs, and clearing it avoids unintended side effects.</p> </li> <li> <p>Additional Notes:</p> </li> <li>The <code>// GSY2K</code> statement is a System/36 directive, possibly related to Y2K compliance or a system-level configuration, but it has no direct impact on the logic described here.</li> <li>The <code>// SCPROCP ,,,,,,,,?9?</code> comment at the top might be a header indicating the procedure name (<code>SCPROCP</code>) and parameters, with <code>?9?</code> as a placeholder for a library or environment code.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script references the following external programs:</p> <ol> <li>AP300P:</li> <li>Loaded and executed via <code>// LOAD AP300P</code> and <code>// RUN</code>.</li> <li>This is the primary program responsible for updating MTD/YTD fields in the vendor master file (<code>APCONT</code>).</li> <li> <p>Likely an RPG or RPG II program, given the System/36 context and the <code>.ocl36</code> extension.</p> </li> <li> <p>AP300:</p> </li> <li>Referenced in the conditional job submission (<code>JOBQ ?CLIB?,AP300</code>) or direct execution (<code>AP300 ,,,,,,,,?9?</code>).</li> <li>This could be:<ul> <li>A different program from <code>AP300P</code>, possibly a batch version or a related utility program for the same A/P update process.</li> <li>Alternatively, it might be a typo or alias for <code>AP300P</code>, but the distinct naming suggests a separate program or entry point.</li> </ul> </li> <li>The parameters <code>,,,,,,,,?9?</code> indicate that up to nine placeholders are passed, with <code>?9?</code> being the only non-empty parameter (likely a library or environment code).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script explicitly references one file:</p> <ol> <li>APCONT:</li> <li>Specified in <code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>.</li> <li>This is likely the vendor master file in the Accounts Payable system, containing records with MTD/YTD fields to be updated.</li> <li>The <code>?9?APCONT</code> label suggests the file resides in a library or is prefixed with a code provided at runtime (e.g., <code>PRODAPCONT</code> for production).</li> <li>Opened in shared mode (<code>DISP-SHR</code>), indicating read/write access without exclusive locking.</li> </ol> <p>No other files are explicitly mentioned in the OCL script, but the <code>AP300P</code> or <code>AP300</code> programs might access additional files (e.g., transaction files, history files) not visible in the OCL control structure.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20OCL/#summary","title":"Summary","text":"<p>Process Overview: The OCL script <code>AP300P.ocl36.txt</code> controls the execution of an Accounts Payable update process on an IBM System/36. It: - Clears the Local Data Area for a clean state. - Loads and runs the <code>AP300P</code> program, which updates MTD/YTD fields in the <code>APCONT</code> vendor master file. - Checks for a <code>CANCEL</code> condition to abort the process. - Sets a configuration code (<code>IAC</code> or <code>I*C</code>) based on a company-related condition. - Either submits the <code>AP300</code> program to a job queue or runs it directly, depending on a flag. - Clears the LDA again to ensure no residual data affects subsequent processes.</p> <p>External Programs: - <code>AP300P</code>: Main update program. - <code>AP300</code>: Possibly a batch version or related program, executed directly or via job queue.</p> <p>Tables Used: - <code>APCONT</code>: Vendor master file containing MTD/YTD data.</p> <p>This script provides a controlled, conditional execution of the A/P update process, with flexibility for batch or immediate processing and safeguards for cancellation. If you need further analysis (e.g., the RPG code for <code>AP300P</code> or details about the file structure), please provide additional context or files!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/","title":"AP300P RPG","text":"<p>The provided RPG program, <code>AP300P.rpg36.txt</code>, is an RPG II program designed for the IBM System/36 environment, used in conjunction with the previously analyzed OCL script (<code>AP300P.ocl36.txt</code>). This program handles the prompting and validation for an Accounts Payable (A/P) monthly or yearly update process, specifically for updating Month-to-Date (MTD) and Year-to-Date (YTD) fields in the vendor master file. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, ensuring a clear and concise analysis tailored to the System/36 context.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>AP300P</code> is a prompting program that displays a screen to collect user input for the A/P update process, validates the input, and sets parameters for the update. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File and Data Structure Definitions:</li> <li>Files:<ul> <li><code>SCREEN</code>: A workstation file (display file) with 512-byte records, used to interact with the user via a screen format (<code>AP300PS1</code>).</li> <li><code>APCONT</code>: A disk file (vendor master file) with 256-byte records, indexed (<code>2AI</code>) with two keys, used for validation and data retrieval.</li> </ul> </li> <li>Arrays and Data Structures:<ul> <li><code>MSG</code>: An array of 8 elements, each 40 characters, holding error messages (defined at the end of the program).</li> <li><code>CO</code>: An array of 10 elements, each 35 characters, used to store company numbers and names for display.</li> <li><code>UDS</code>: User Data Structure (Local Data Area) for passing parameters, with fields like <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCANC</code>, <code>KYYTDY</code>, and <code>KYCCYY</code>.</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>Indicators <code>01</code>, <code>09</code>, <code>10</code>, <code>11</code>, <code>12</code>, <code>50\u201355</code>, <code>81</code>, <code>90</code> control program flow, screen display, and error handling.</li> <li><code>KG</code> is a control-level indicator for cancel operations.</li> </ul> </li> <li> <p>Initialization (Lines 0036\u20130043):</p> </li> <li>Clears the <code>MSG40</code> field (used for error messages) to blanks.</li> <li>Turns off indicators <code>50\u201354</code> (error indicators), <code>81</code> (screen display), and <code>90</code> (general error).</li> <li> <p>If the <code>KG</code> (cancel) indicator is on, sets <code>KYCANC</code> to <code>CANCEL</code> and skips further processing.</p> </li> <li> <p>One-Time Setup Subroutine (<code>ONETIM</code>, Lines 0050\u20130077):</p> </li> <li>Executed once when indicator <code>09</code> is on (first cycle, line 0045).</li> <li>Purpose: Populates the <code>CO</code> array with company numbers and names from <code>APCONT</code> for display on the screen.</li> <li> <p>Steps:</p> <ul> <li>Initializes index <code>X</code> to 1.</li> <li>Sets the file pointer to the first record in <code>APCONT</code> using key <code>01</code> (<code>SETLL</code>).</li> <li>Loops through <code>APCONT</code> records (<code>AGNONE</code> loop):</li> <li>Reads a record (<code>READ APCONT</code>).</li> <li>Skips records marked as deleted (<code>ACDEL = 'D'</code>).</li> <li>Checks if the company number (<code>ACCO</code>) is not <code>99</code> and <code>X</code> is less than 11 (to limit to 10 companies).</li> <li>If valid, formats the company number with a hyphen (<code>COXX</code>) and moves it along with the company name (<code>ACNAME</code>) to the <code>CO</code> array at index <code>X</code>.</li> <li>Increments <code>X</code> and continues until the end of the file or <code>X &gt; 10</code>.</li> <li>Sets defaults:</li> <li><code>KYALCO = 'ALL'</code>: Default to process all companies.</li> <li><code>KYJOBQ = ' '</code>: Default to no job queue.</li> <li><code>KYYTDY = ' '</code>: Default to not clearing YTD.</li> <li><code>KYCCYY = 0</code>: Default year to zero.</li> </ul> </li> <li> <p>Main Screen Processing Subroutine (<code>S1</code>, Lines 0079\u20130153):</p> </li> <li>Executed when indicator <code>01</code> is on (line 0047), handling user input validation and screen display.</li> <li>Purpose: Validates user input from the <code>SCREEN</code> file (format <code>AP300PS1</code>) and sets parameters for the update process.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Selection (Lines 0083\u20130099):</li> <li>Checks if <code>KYALCO</code> is <code>CO</code> (specific companies) or <code>ALL</code> (all companies).</li> <li>If neither, sets error indicators <code>81</code>, <code>90</code>, <code>50</code>, displays message <code>MSG,2</code> (\"SECOND ENTRY MUST BE 'CO' OR 'ALL'\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'CO'</code>, checks if <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (company numbers) are all zero; if so, sets error indicators <code>81</code>, <code>90</code>, <code>51</code>, displays <code>MSG,3</code> (\"INVALID COMPANY NUMBER\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'ALL'</code> and any of <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> are non-zero, sets error indicators <code>81</code>, <code>90</code>, <code>51</code>, displays <code>MSG,4</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>Validate Specific Companies (Lines 0103\u20130124):</li> <li>If <code>KYALCO = 'CO'</code>, validates each non-zero company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) using <code>CHAIN</code> to look up the company in <code>APCONT</code>.</li> <li>If a company number is invalid (not found), sets error indicators (<code>81</code>, <code>90</code>, and <code>51</code>, <code>52</code>, or <code>53</code> respectively), displays <code>MSG,5</code> (\"IF CO, THEN ENTER VALID COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>Validate All Companies (Lines 0128\u20130136):</li> <li>If <code>KYALCO = 'ALL'</code>, sets the file pointer to the first record in <code>APCONT</code> (<code>SETLL '01'</code>) and reads records to ensure valid data, but no specific validation is performed here.</li> <li>Validate YTD Selection (Lines 0139\u20130143):</li> <li>Checks if <code>KYYTDY</code> is <code>Y</code> (clear YTD) or blank (do not clear).</li> <li>If neither, sets error indicators <code>81</code>, <code>90</code>, <code>54</code>, displays <code>MSG,7</code> (\"YTD ENTRY MUST BE 'Y' OR ' '\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYYTDY = 'Y'</code>, checks if <code>KYCCYY</code> (year) is non-zero; if zero, sets error indicators <code>81</code>, <code>90</code>, <code>54</code>, displays <code>MSG,8</code> (\"IF CLEAR YTD=Y, THEN KEY A 4 DIGIT YEAR\"), and jumps to <code>ENDS1</code>.</li> <li>Validate Job Queue Selection (Lines 0147\u20130151):</li> <li>Checks if <code>KYJOBQ</code> is <code>Y</code> (submit to job queue), <code>N</code>, or blank (run immediately).</li> <li>If invalid, sets error indicators <code>81</code>, <code>90</code>, <code>55</code>, displays <code>MSG,6</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR ' '\"), and jumps to <code>ENDS1</code>.</li> <li>Screen Output (Lines 0156\u20130165):</li> <li>If indicator <code>81</code> is on, displays the <code>SCREEN</code> file with format <code>AP300PS1</code>, showing:<ul> <li><code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (company selection fields).</li> <li><code>CO</code> array (company numbers and names).</li> <li><code>KYYTDY</code> (YTD clear flag).</li> <li><code>KYCCYY</code> (year for YTD clear).</li> <li><code>KYJOBQ</code> (job queue flag).</li> <li><code>MSG40</code> (error message).</li> </ul> </li> </ul> </li> <li> <p>Program Flow:</p> </li> <li>The program loops through the <code>S1</code> subroutine until all validations pass or the user cancels (<code>KYCANC = 'CANCEL'</code>).</li> <li>If validations fail, error messages are displayed, and the screen is redisplayed for user correction.</li> <li>If validations pass, the program sets the Local Data Area fields (<code>KYALCO</code>, <code>KYCO1</code>, etc.) and returns control to the OCL script, which uses these to execute the update (via <code>AP300</code> or job queue).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for the A/P update process:</p> <ol> <li>Company Selection:</li> <li>Users must select either <code>ALL</code> companies or specific companies (<code>CO</code>).</li> <li>If <code>ALL</code> is selected, no specific company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) should be entered.</li> <li>If <code>CO</code> is selected, at least one valid company number must be entered, and each must exist in the <code>APCONT</code> file.</li> <li> <p>Invalid company selections trigger error messages (<code>MSG,2</code>, <code>MSG,3</code>, <code>MSG,4</code>, <code>MSG,5</code>).</p> </li> <li> <p>YTD Processing:</p> </li> <li>Users can choose to clear YTD fields (<code>KYYTDY = 'Y'</code>) or not (<code>KYYTDY = ' '</code>).</li> <li>If YTD is to be cleared, a valid 4-digit year (<code>KYCCYY</code>) must be provided (non-zero).</li> <li>Invalid YTD selections trigger error messages (<code>MSG,7</code>, <code>MSG,8</code>).</li> <li> <p>Note: Clearing YTD is noted to involve saving the vendor file for 1099 processing, indicating a tax-related requirement.</p> </li> <li> <p>Job Queue Option:</p> </li> <li>Users can choose to submit the update job to a queue (<code>KYJOBQ = 'Y'</code>) or run it immediately (<code>KYJOBQ = ' '</code> or <code>N</code>).</li> <li> <p>Invalid job queue entries trigger error message <code>MSG,6</code>.</p> </li> <li> <p>Cancel Option:</p> </li> <li> <p>The program allows cancellation by setting <code>KYCANC</code> to <code>CANCEL</code>, which is checked in the OCL script to terminate processing.</p> </li> <li> <p>Data Validation:</p> </li> <li>Only non-deleted records (<code>ACDEL \u2260 'D'</code>) and company numbers not equal to <code>99</code> are considered valid for display in the <code>CO</code> array.</li> <li> <p>Up to 10 companies are displayed on the screen for selection.</p> </li> <li> <p>Error Handling:</p> </li> <li>The program uses indicators (<code>50\u201355</code>, <code>81</code>, <code>90</code>) to flag errors and display appropriate messages from the <code>MSG</code> array.</li> <li>Errors prevent further processing until corrected, ensuring data integrity.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files:</p> <ol> <li>SCREEN:</li> <li>Type: Workstation file (display file).</li> <li>Purpose: Displays the <code>AP300PS1</code> screen format for user input and output, including company selection, YTD options, job queue choice, and error messages.</li> <li> <p>Fields: <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>CO</code> (array), <code>KYYTDY</code>, <code>KYCCYY</code>, <code>KYJOBQ</code>, <code>MSG40</code>.</p> </li> <li> <p>APCONT:</p> </li> <li>Type: Indexed disk file (256 bytes, 2 keys).</li> <li>Purpose: Vendor master file containing company data for validation and display.</li> <li>Fields:<ul> <li><code>ACDEL</code> (1 byte): Deletion flag (<code>'D'</code> for deleted).</li> <li><code>ACCO</code> (2 bytes): Company number.</li> <li><code>ACNAME</code> (30 bytes): Company name.</li> </ul> </li> <li>Operations: <code>SETLL</code>, <code>READ</code>, <code>CHAIN</code> for accessing records.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not directly call external programs via RPG operations (e.g., <code>CALL</code>). However, it interacts with the OCL script (<code>AP300P.ocl36.txt</code>), which may call:</p> <ol> <li>AP300:</li> <li>Referenced in the OCL script as either a direct execution (<code>AP300 ,,,,,,,,?9?</code>) or job queue submission (<code>JOBQ ?CLIB?,AP300</code>).</li> <li>Likely the program that performs the actual MTD/YTD update using parameters set by <code>AP300P</code>.</li> <li>The RPG program sets up the Local Data Area (<code>UDS</code>) fields (<code>KYALCO</code>, <code>KYCO1</code>, etc.) that <code>AP300</code> uses.</li> </ol> <p>No other programs are explicitly called within the RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/AP300P%20RPG/#summary","title":"Summary","text":"<p>Process Overview: - <code>AP300P</code> is a prompting and validation program for the A/P monthly/yearly update process. - It displays a screen (<code>AP300PS1</code>) to collect user input for company selection (<code>ALL</code> or specific companies), YTD clearing (<code>Y</code> or blank), year (if YTD is cleared), and job queue option (<code>Y</code>, <code>N</code>, or blank). - It validates input against the <code>APCONT</code> file and business rules, displaying error messages if invalid. - The validated parameters are stored in the Local Data Area for use by the OCL script and subsequent programs (e.g., <code>AP300</code>). - The program ensures data integrity by enforcing strict validation and providing user feedback.</p> <p>Business Rules: - Company selection must be <code>ALL</code> or valid company numbers (<code>CO</code>). - YTD clearing requires a valid 4-digit year if selected. - Job queue option must be <code>Y</code>, <code>N</code>, or blank. - Errors are flagged and displayed to prevent incorrect updates. - Cancellation is supported via the <code>KYCANC</code> field.</p> <p>Tables Used: - <code>SCREEN</code>: Workstation file for user interaction. - <code>APCONT</code>: Vendor master file for company data.</p> <p>External Programs: - <code>AP300</code>: Likely called by the OCL script to perform the update, using parameters set by <code>AP300P</code>.</p> <p>This program acts as the user interface and validation layer, ensuring the A/P update process is configured correctly before execution. If you need further details (e.g., the <code>AP300</code> program logic or screen format details), please provide additional context or files!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/","title":"Summary Vendor Month Year End Process","text":"<p>The provided call stack consists of four files: <code>AP300P.ocl36.txt</code>, <code>AP300P.rpg36.txt</code>, <code>AP300.ocl36.txt</code>, and <code>AP300.rpg36.txt</code>. These files work together to implement an Accounts Payable (A/P) vendor file update process on the IBM System/36, specifically for clearing Month-to-Date (MTD) and Year-to-Date (YTD) totals in the vendor master file. Below, I\u2019ll identify the use cases implemented by this program suite and then provide a function requirement document for a non-interactive version of the primary use case, focusing on business requirements and calculations.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The program suite implements a single primary use case with variations based on input parameters. The use case is:</p> <ol> <li>Clear Vendor MTD and YTD Totals:</li> <li>Description: Updates the A/P vendor master file by clearing MTD totals (discounts, purchases, payments) for selected vendors and, optionally, YTD totals (purchases, discounts, payments) while preserving last year\u2019s data. The process includes validation of input parameters, sorting of vendor records, backup of the vendor file for IRS 1099 processing, and maintenance of a 12-month file history.</li> <li>Variations:<ul> <li>Company Selection: Process all non-deleted vendors (<code>ALL</code>) or specific companies (<code>CO</code> with up to three company numbers).</li> <li>YTD Clearing: Clear YTD totals (<code>KYYTDY = 'Y'</code>) or only MTD totals (<code>KYYTDY = ' '</code>).</li> <li>Execution Mode: Run immediately or submit to a job queue (<code>KYJOBQ = 'Y'</code>, <code>'N'</code>, or <code>' '</code>).</li> </ul> </li> <li>Components:<ul> <li><code>AP300P.ocl36.txt</code>: Controls the overall job flow, invoking <code>AP300P.rpg36.txt</code> and conditionally <code>AP300.ocl36.txt</code>.</li> <li><code>AP300P.rpg36.txt</code>: Validates user inputs (company selection, YTD flag, year, job queue) via a screen interface.</li> <li><code>AP300.ocl36.txt</code>: Sorts the vendor file, creates backups, and invokes <code>AP300.rpg36.txt</code>.</li> <li><code>AP300.rpg36.txt</code>: Performs the actual MTD/YTD clearing in the vendor file.</li> </ul> </li> </ol> <p>No additional use cases are implemented, as the suite is focused solely on this update process with configurable options.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#function-requirement-document","title":"Function Requirement Document","text":"<p>The following document reimagines the primary use case as a non-interactive function that accepts inputs programmatically (instead of via a screen) and completes the A/P vendor file update process. The document is concise, focusing on business requirements and necessary calculations, and assumes a modern programming context while retaining the core logic from the System/36 programs.</p> <p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#function-requirement-document-ap-vendor-file-update","title":"Function Requirement Document: AP Vendor File Update","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#overview","title":"Overview","text":"<p>The <code>APVendorUpdate</code> function updates the Accounts Payable (A/P) vendor master file by clearing Month-to-Date (MTD) and optionally Year-to-Date (YTD) totals for selected vendors, ensuring data integrity and compliance with IRS 1099 requirements. It accepts input parameters programmatically, validates them, sorts vendor records, creates backups, and performs the updates.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#inputs","title":"Inputs","text":"<ul> <li>CompanySelection (string): <code>\"ALL\"</code> for all non-deleted vendors or <code>\"CO\"</code> for specific companies.</li> <li>CompanyNumbers (array of strings, max 3): Company codes (2 bytes each) if <code>CompanySelection = \"CO\"</code>. Empty if <code>\"ALL\"</code>.</li> <li>ClearYTD (boolean): <code>true</code> to clear YTD totals, <code>false</code> to clear only MTD totals.</li> <li>Year (integer, 4 digits): Year for 1099 backup (required if <code>ClearYTD = true</code>, e.g., 2025).</li> <li>JobQueue (boolean): <code>true</code> to queue the update, <code>false</code> to run immediately.</li> <li>LibraryPrefix (string): Prefix for file names (e.g., <code>\"PROD\"</code> for <code>PRODAPVEND</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#outputs","title":"Outputs","text":"<ul> <li>Status (string): <code>\"Success\"</code>, <code>\"ValidationError\"</code>, or <code>\"SystemError\"</code>.</li> <li>ErrorMessage (string): Description of validation or system errors, if any.</li> <li>UpdatedRecords (integer): Number of vendor records updated.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>CompanySelection</code> is <code>\"ALL\"</code> or <code>\"CO\"</code>. Return <code>\"ValidationError\"</code> with message \"Company selection must be 'ALL' or 'CO'\" if invalid.</li> <li>If <code>CompanySelection = \"CO\"</code>, verify <code>CompanyNumbers</code> contains 1\u20133 valid 2-byte company codes in the vendor file. Return <code>\"ValidationError\"</code> with message \"Invalid company number\" if any code is invalid or all are empty.</li> <li>If <code>CompanySelection = \"ALL\"</code>, ensure <code>CompanyNumbers</code> is empty. Return <code>\"ValidationError\"</code> with message \"Do not specify companies when selecting 'ALL'\" if not empty.</li> <li>If <code>ClearYTD = true</code>, ensure <code>Year</code> is a valid 4-digit year (&gt; 0). Return <code>\"ValidationError\"</code> with message \"A 4-digit year is required when clearing YTD\" if invalid.</li> <li> <p>Ensure <code>JobQueue</code> is <code>true</code> or <code>false</code>. Return <code>\"ValidationError\"</code> with message \"Job queue must be 'Y' or 'N'\" if invalid.</p> </li> <li> <p>Check Exclusive Access:</p> </li> <li> <p>Verify no users are accessing the A/P system. Return <code>\"SystemError\"</code> with message \"A/P system in use; ensure exclusive access\" if locked.</p> </li> <li> <p>Sort Vendor Records:</p> </li> <li>Filter the vendor master file (<code>&lt;LibraryPrefix&gt;APVEND</code>) to include only non-deleted records (<code>DeletionFlag \u2260 'D'</code>).</li> <li>If <code>CompanySelection = \"CO\"</code>, include only records matching <code>CompanyNumbers</code>.</li> <li> <p>Sort by company (2 bytes) and vendor number (5 bytes) into a temporary file (<code>&lt;LibraryPrefix&gt;AP300S</code>).</p> </li> <li> <p>Create Backups for 1099 (if <code>ClearYTD = true</code>):</p> </li> <li>Copy <code>&lt;LibraryPrefix&gt;APVEND</code> to:<ul> <li><code>APVN&lt;Year&gt;</code> (e.g., <code>APVN2025</code>).</li> <li><code>&lt;LibraryPrefix&gt;VN&lt;Year&gt;</code> (e.g., <code>PRODVN2025</code>).</li> </ul> </li> <li> <p>Overwrite existing files and create if they don\u2019t exist.</p> </li> <li> <p>Maintain 12-Month File History:</p> </li> <li>Delete the oldest backup file (<code>&lt;LibraryPrefix&gt;UCVEND</code>) if it exists.</li> <li>Rename files to shift history:<ul> <li><code>&lt;LibraryPrefix&gt;UBVEND</code> to <code>&lt;LibraryPrefix&gt;UCVEND</code>.</li> <li><code>&lt;LibraryPrefix&gt;UAVEND</code> to <code>&lt;LibraryPrefix&gt;UBVEND</code>.</li> <li>... down to <code>&lt;LibraryPrefix&gt;U1VEND</code> to <code>&lt;LibraryPrefix&gt;U2VEND</code>.</li> </ul> </li> <li> <p>Copy <code>&lt;LibraryPrefix&gt;APVEND</code> to <code>&lt;LibraryPrefix&gt;U1VEND</code>, overwriting if exists.</p> </li> <li> <p>Update Vendor Records:</p> </li> <li>For each record in <code>&lt;LibraryPrefix&gt;AP300S</code>, update the corresponding record in <code>&lt;LibraryPrefix&gt;APVEND</code>:<ul> <li>MTD Updates (always):</li> <li>Set <code>MTDDiscounts</code> to 0.</li> <li>Set <code>MTDPurchases</code> to 0.</li> <li>Set <code>MTDPayments</code> to 0.</li> <li>Set <code>PreviousBalance</code> to <code>CurrentBalance</code>.</li> <li>YTD Updates (if <code>ClearYTD = true</code>):</li> <li>Move <code>YTDPurchases</code> to <code>LastYearPurchases</code>.</li> <li>Move <code>YTDPaid</code> to <code>LastYearPaid</code>.</li> <li>Set <code>YTDPurchases</code> to 0.</li> <li>Set <code>YTDDiscounts</code> to 0.</li> <li>Set <code>YTDPaid</code> to 0.</li> </ul> </li> <li> <p>Track the number of updated records.</p> </li> <li> <p>Execute or Queue:</p> </li> <li>If <code>JobQueue = true</code>, submit the update process to a job queue.</li> <li>If <code>JobQueue = false</code>, execute immediately.</li> <li>Return <code>\"Success\"</code> with the count of updated records or <code>\"SystemError\"</code> with an error message if execution fails.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#business-rules","title":"Business Rules","text":"<ol> <li>Exclusive Access: The A/P system must not be in use during the update to prevent data corruption.</li> <li>Company Selection:</li> <li><code>\"ALL\"</code> processes all non-deleted vendors.</li> <li><code>\"CO\"</code> processes only specified, valid company codes (1\u20133).</li> <li>Invalid or conflicting company selections are rejected.</li> <li>MTD Clearing: Always clear MTD discounts, purchases, and payments, preserving the current balance as the previous balance.</li> <li>YTD Clearing:</li> <li>Clear YTD purchases, discounts, and payments only if <code>ClearYTD = true</code>.</li> <li>Preserve YTD data in last-year fields (<code>LastYearPurchases</code>, <code>LastYearPaid</code>) for auditing.</li> <li>Require a valid 4-digit year for 1099 backups.</li> <li>Backups for 1099: Save two copies of the vendor file (<code>APVN&lt;Year&gt;</code>, <code>&lt;LibraryPrefix&gt;VN&lt;Year&gt;</code>) before clearing YTD totals.</li> <li>File History: Maintain a rolling 12-month history of vendor file backups (<code>&lt;LibraryPrefix&gt;U1VEND</code> to <code>&lt;LibraryPrefix&gt;UCVEND</code>).</li> <li>Data Integrity:</li> <li>Process only non-deleted records.</li> <li>Preserve the current balance (<code>CurrentBalance</code>) during updates.</li> <li>Ensure backups are created before modifying the vendor file.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#calculations","title":"Calculations","text":"<ul> <li>MTD Updates:</li> <li><code>MTDDiscounts = 0</code></li> <li><code>MTDPurchases = 0</code></li> <li><code>MTDPayments = 0</code></li> <li><code>PreviousBalance = CurrentBalance</code></li> <li>YTD Updates (if <code>ClearYTD = true</code>):</li> <li><code>LastYearPurchases = YTDPurchases</code></li> <li><code>LastYearPaid = YTDPaid</code></li> <li><code>YTDPurchases = 0</code></li> <li><code>YTDDiscounts = 0</code></li> <li><code>YTDPaid = 0</code></li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#assumptions","title":"Assumptions","text":"<ul> <li>The vendor master file (<code>&lt;LibraryPrefix&gt;APVEND</code>) contains fields for MTD/YTD totals, deletion flag, company, and vendor number.</li> <li>The system supports file operations (copy, rename, delete) and job queuing.</li> <li>Input validation ensures only valid data is processed, eliminating the need for interactive error correction.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP300P%20OCL%20Vendor%20Month/Summary%20Vendor%20Month%20Year%20End%20Process/#explanation","title":"Explanation","text":"<ul> <li>Use Case Identification: The suite implements one core use case\u2014clearing MTD/YTD totals\u2014with variations for company selection, YTD clearing, and execution mode. All components (<code>AP300P.ocl36.txt</code>, <code>AP300P.rpg36.txt</code>, <code>AP300.ocl36.txt</code>, <code>AP300.rpg36.txt</code>) contribute to this single process, with no additional use cases identified.</li> <li>Function Requirement Document:</li> <li>Non-Interactive Design: The document reimagines the process as a function that accepts inputs directly, bypassing the screen interface (<code>AP300PS1</code> from <code>AP300P.rpg36.txt</code>).</li> <li>Business Focus: Emphasizes business rules (e.g., exclusive access, company filtering, 1099 backups) and calculations derived from <code>AP300.rpg36.txt</code> (e.g., MTD/YTD field updates).</li> <li>Integration: Incorporates logic from all four files:<ul> <li>Validation from <code>AP300P.rpg36.txt</code> (company selection, YTD flag, year).</li> <li>Sorting and backups from <code>AP300.ocl36.txt</code> (<code>#GSORT</code>, <code>CPYF</code>).</li> <li>Updates from <code>AP300.rpg36.txt</code> (MTD/YTD clearing).</li> <li>Job control from <code>AP300P.ocl36.txt</code> (queue or immediate execution).</li> </ul> </li> <li>Conciseness: Streamlines the process into clear steps and rules, avoiding technical System/36 specifics (e.g., OCL syntax, RPG indicators) while preserving functionality.</li> </ul> <p>This document provides a modernized, non-interactive specification for the A/P update process, suitable for implementation in a contemporary system while retaining the original business logic. If you need further refinements or additional details, let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/","title":"AP760 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AP760.ocl36.txt</code>, which is called by the main OCL program <code>AP760P.ocl36.txt</code> as part of the vendor 1099 register process on an IBM AS/400 or iSeries system. This OCL program orchestrates the sorting, processing, and reporting of vendor 1099 data. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used, based on the provided OCL code and its context within the 1099 register process.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#process-steps-of-the-ap760-ocl-program","title":"Process Steps of the AP760 OCL Program","text":"<p>The <code>AP760.ocl36.txt</code> OCL program is responsible for sorting the 1099 data file, processing it to generate an intermediate file, and then producing the final 1099 register report. It relies on parameters passed from the main OCL (<code>AP760P.ocl36.txt</code>) and the validated inputs from the RPG program <code>AP760P.rpg36.txt</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Set Year in Local Data Area (LDA):</li> <li> <p>The program sets the 1099 year (<code>?10?</code>, e.g., <code>2025</code>) into the Local Data Area (LDA) at offset 142 with the command <code>LOCAL OFFSET-142,DATA-'?10?'</code>. This makes the year available to subsequent programs.</p> </li> <li> <p>Delete Existing Temporary File:</p> </li> <li> <p>If the temporary file <code>?9?AP761</code> (e.g., <code>PRODAP761</code> if <code>?9?</code> is <code>PROD</code>) exists, it is deleted using <code>IF DATAF1-?9?AP761 DELETE ?9?AP761,F1</code>. This ensures a clean slate for the intermediate file created later.</p> </li> <li> <p>Set Company and Type Selection in LDA:</p> </li> <li>Company Selection:<ul> <li>If <code>?L'111,3'?</code> (likely <code>KYALCO</code> from <code>AP760P.rpg36.txt</code>) equals <code>'CO'</code>, set LDA offset 1 to <code>'IAC'</code> (indicating specific companies).</li> <li>Otherwise, set LDA offset 1 to <code>'I*C'</code> (indicating all companies).</li> </ul> </li> <li>Type Selection:<ul> <li>If <code>?L'135,3'?</code> (likely <code>KYALTY</code> from <code>AP760P.rpg36.txt</code>) equals <code>'TYP'</code>, set LDA offset 4 to <code>'IAC'</code> (indicating specific 1099 types).</li> <li>Otherwise, set LDA offset 4 to <code>'I*C'</code> (indicating all 1099 types).</li> </ul> </li> <li> <p>These settings control filtering in the subsequent sort operation.</p> </li> <li> <p>Sort the 1099 File:</p> </li> <li>Load Sort Program: The program loads the system sort utility <code>#GSORT</code>.</li> <li>File Definitions:<ul> <li>Input file: <code>?13?</code> (e.g., <code>APVN2025</code>, the 1099 data file created by <code>AP300</code>).</li> <li>Output file: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>), a temporary sorted file with up to 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li>Sort sequence: Ascending (<code>HSORTA 22A</code>).</li> <li>Primary sort field: 1099 type (field at positions 264\u2013264, 1 byte).</li> <li>Secondary sort field: Vendor (field at positions 4\u20138, 5 bytes).</li> <li>Tertiary sort field: Company (field at positions 2\u20133, 2 bytes).</li> </ul> </li> <li>Record Selection:<ul> <li>Exclude records marked as deleted (position 1 \u2260 <code>'D'</code>).</li> <li>Apply conditional filters based on company and type selections:</li> <li>If specific companies (<code>'CO'</code>), include records where company (positions 2\u20133) matches <code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code> (from <code>?L'114,2'</code>, <code>?L'116,2'</code>, <code>?L'118,2'</code>).</li> <li>If specific types (<code>'TYP'</code>), include records where 1099 type (position 264) matches <code>KYTY1</code>, <code>KYTY2</code>, or <code>KYTY3</code> (from <code>?L'138,1'</code>, <code>?L'139,1'</code>, <code>?L'140,1'</code>).</li> <li>If <code>'ALL'</code> is selected for companies or types, no specific matching is applied (handled by <code>I*C</code> in LDA).</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes the sort, producing the sorted file <code>?9?AP760S</code>.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li>Load Program <code>AP761</code>:<ul> <li>Input files:</li> <li><code>APVEND</code>: The original 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>), shared access.</li> <li><code>AP760S</code>: The sorted file (<code>?9?AP760S</code>).</li> <li>Output file: <code>AP761</code> (<code>?9?AP761</code>), a temporary file with 1,000 records, extendable by 500.</li> <li>Purpose: The <code>AP761</code> program processes the sorted data to create an intermediate file (<code>?9?AP761</code>) for reporting. It likely aggregates or formats the 1099 data based on the sorted input.</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes <code>AP761</code>.</p> </li> <li> <p>Generate 1099 Register Report:</p> </li> <li>Load Program <code>AP760</code>:<ul> <li>Input files:</li> <li><code>AP761</code>: The intermediate file (<code>?9?AP761</code>), shared access.</li> <li><code>GSTABL</code>: Table file (<code>?9?GSTABL</code>, e.g., <code>PRODGSTABL</code>), shared access, likely used for 1099 type descriptions.</li> <li>Purpose: The <code>AP760</code> program generates the final 1099 register report, using the processed data from <code>?9?AP761</code> and reference data from <code>GSTABL</code>.</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes <code>AP760</code>.</p> </li> <li> <p>Clean Up Temporary File:</p> </li> <li>After processing, if the temporary file <code>?9?AP761</code> exists, it is deleted (<code>IF DATAF1-?9?AP761 DELETE ?9?AP761,F1</code>) to free up resources.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs:</p> <ol> <li>#GSORT:</li> <li>System sort utility used to sort the 1099 data file (<code>?13?</code>) into a temporary sorted file (<code>?9?AP760S</code>).</li> <li> <p>Purpose: Sorts records by 1099 type, vendor, and company, applying filters based on user selections.</p> </li> <li> <p>AP761:</p> </li> <li>An RPG or CL program (not provided) that processes the sorted file (<code>?9?AP760S</code>) and the original 1099 file (<code>?13?</code>) to produce an intermediate file (<code>?9?AP761</code>).</li> <li> <p>Purpose: Likely aggregates or formats 1099 data for reporting.</p> </li> <li> <p>AP760:</p> </li> <li>An RPG or CL program (not provided, but likely the main report generator) that uses the intermediate file (<code>?9?AP761</code>) and table file (<code>?9?GSTABL</code>) to produce the final 1099 register report.</li> <li>Purpose: Generates the formatted 1099 register output, possibly a printed report or file.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#tables-used","title":"Tables Used","text":"<p>The OCL program references the following files (tables):</p> <ol> <li>INPUT (labeled ?13?):</li> <li>Name: <code>?13?</code> (e.g., <code>APVN2025</code>, the 1099 data file created by <code>AP300</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li> <p>Purpose: Input to the <code>#GSORT</code> program, containing raw vendor 1099 data (e.g., <code>GAPVEND</code> before monthly/yearly totals are cleared).</p> </li> <li> <p>OUTPUT (labeled ?9?AP760S):</p> </li> <li>Name: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>).</li> <li>Type: Disk file, temporary, up to 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> <li> <p>Purpose: Sorted output from <code>#GSORT</code>, used as input to <code>AP761</code>.</p> </li> <li> <p>APVEND (labeled ?13?):</p> </li> <li>Name: <code>?13?</code> (e.g., <code>APVN2025</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li> <p>Purpose: Input to <code>AP761</code>, providing the original 1099 data for processing.</p> </li> <li> <p>AP760S (labeled ?9?AP760S):</p> </li> <li>Name: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>).</li> <li>Type: Disk file, used as input to <code>AP761</code>.</li> <li> <p>Purpose: Contains sorted 1099 data from <code>#GSORT</code>.</p> </li> <li> <p>AP761 (labeled ?9?AP761):</p> </li> <li>Name: <code>?9?AP761</code> (e.g., <code>PRODAP761</code>).</li> <li>Type: Disk file, temporary, 1,000 records, extendable by 500.</li> <li> <p>Purpose: Output from <code>AP761</code>, input to <code>AP760</code>, containing processed 1099 data for the final report.</p> </li> <li> <p>GSTABL (labeled ?9?GSTABL):</p> </li> <li>Name: <code>?9?GSTABL</code> (e.g., <code>PRODGSTABL</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li>Purpose: Reference table used by <code>AP760</code>, likely containing 1099 type descriptions or other lookup data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#integration-with-main-ocl-and-rpg-program","title":"Integration with Main OCL and RPG Program","text":"<p>The <code>AP760.ocl36.txt</code> program is called by <code>AP760P.ocl36.txt</code> after the RPG program <code>AP760P.rpg36.txt</code> validates user inputs. Here\u2019s how it integrates:</p> <ul> <li>Parameters from AP760P:</li> <li>The main OCL passes parameters <code>?9?</code> (library prefix), <code>?10?</code> (year), and <code>?13?</code> (1099 file name, e.g., <code>APVN2025</code>).</li> <li> <p>The RPG program <code>AP760P</code> sets fields in the LDA (e.g., <code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCYYR</code>) at offsets like 111, 114\u2013118, 135, 138\u2013140, etc., which are referenced in the sort logic (<code>?L'111,3'?</code>, <code>?L'114,2'?</code>, etc.).</p> </li> <li> <p>Job Queue Execution:</p> </li> <li> <p>The main OCL (<code>AP760P.ocl36.txt</code>) decides whether to run <code>AP760</code> (this OCL or its final program) interactively or via a job queue based on <code>?L'120,1'?</code> (<code>KYJOBQ</code> from <code>AP760P</code>).</p> </li> <li> <p>File Usage:</p> </li> <li>The 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>) is created by <code>AP300</code> (period-end processing) and used as input.</li> <li> <p>The <code>GSTABL</code> file is shared with <code>AP760P.rpg36.txt</code> for validating 1099 types and used here for report generation.</p> </li> <li> <p>Cancellation:</p> </li> <li>If <code>AP760P.rpg36.txt</code> sets <code>KYCANC</code> to <code>'CANCEL'</code> (offset 129\u2013134), the main OCL cancels the job before calling this OCL.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program sets the 1099 year in the LDA, deletes any existing temporary file, configures company and type selections, sorts the 1099 data by type, vendor, and company, processes the sorted data into an intermediate file, generates the final 1099 register report, and cleans up the temporary file.</li> <li>External Programs Called:</li> <li><code>#GSORT</code>: System sort utility for sorting the 1099 file.</li> <li><code>AP761</code>: Processes sorted data into an intermediate file.</li> <li><code>AP760</code>: Generates the final 1099 register report.</li> <li>Tables Used:</li> <li><code>?13?</code> (e.g., <code>APVN2025</code>): Input 1099 data.</li> <li><code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>): Sorted output.</li> <li><code>APVEND</code> (same as <code>?13?</code>): Input to <code>AP761</code>.</li> <li><code>AP760S</code> (same as <code>?9?AP760S</code>): Input to <code>AP761</code>.</li> <li><code>?9?AP761</code> (e.g., <code>PRODAP761</code>): Intermediate file.</li> <li><code>?9?GSTABL</code> (e.g., <code>PRODGSTABL</code>): Reference table for 1099 types.</li> </ul> <p>This OCL program orchestrates the backend processing of the 1099 register, transforming raw vendor data into a sorted, processed, and report-ready format, building on the validated inputs from <code>AP760P.rpg36.txt</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/","title":"AP760 RPG36","text":"<p>The <code>AP760.rpg36.txt</code> is an RPG/36 program (likely running on an IBM System/36 or AS/400 environment) called from the <code>AP760P.ocl36.txt</code> OCL program to generate a Vendor 1099 Register. This program processes vendor data from the <code>AP761</code> file and produces a printed report (<code>APPRINT</code>) summarizing 1099-related information, such as vendor payments categorized by 1099 box types (e.g., rent, medical, miscellaneous). Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the provided RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#process-steps-of-the-rpg36-program-ap760","title":"Process Steps of the RPG/36 Program (AP760)","text":"<p>The <code>AP760</code> program reads vendor data from the <code>AP761</code> file, retrieves 1099 type descriptions from <code>GSTABL</code>, accumulates totals for specific 1099 boxes, and outputs a formatted report to the printer file <code>APPRINT</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (lines 0026\u20130032):</li> <li> <p>ONCE Subroutine:</p> <ul> <li>Checks if the <code>ONCE</code> flag is zero (first execution) (line 0026).</li> <li>Retrieves the system time and date using the <code>TIME</code> operation and stores them in <code>TIMDAT</code> (12 bytes), then moves them to <code>TIME</code> (6 bytes, time) and <code>DATE</code> (6 bytes, date) fields (lines 0027\u20130029).</li> <li>Initializes the <code>SEP</code> array (66 elements, 2 bytes each) with <code>'* '</code> for use as a separator in the report (line 0030).</li> <li>Sets <code>ONCE</code> to 1 to prevent re-execution (line 0031).</li> </ul> </li> <li> <p>Processing Vendor Records (Level 2 Break - L2):</p> </li> <li>The program processes records from the <code>AP761</code> file at level 2 (L2), indicated by the <code>L2</code> indicator, which suggests a control break for grouping records by 1099 type (<code>VN1099</code>).</li> <li> <p>Steps for Each L2 Group (lines 0034\u20130074):</p> <ul> <li>Initializes the table key (<code>TBKEY</code>, 12 bytes) to blanks and sets the prefix to <code>'AP1099'</code> (lines 0034\u20130035).</li> <li>Appends the vendor\u2019s 1099 code (<code>VN1099</code>) to <code>TBKEY</code> and chains to the <code>GSTABL</code> file to retrieve the corresponding description (<code>TBDESC</code>) (lines 0036\u20130037).</li> <li>If the record is not found (indicator 99 on) and <code>KYTY1</code> (from UDS, set by <code>AP760P</code>) is neither <code>'M'</code> (miscellaneous) nor <code>'N'</code> (non-employee compensation), sets indicators 33 or 34 to adjust report formatting (line 0037).</li> <li>Initializes counters and accumulators for the L2 group:</li> <li><code>L2CNT</code> (count of vendors in the group) to zero (line JB01).</li> <li><code>L21AMT</code> (total for box 1, rent), <code>L23AMT</code> (total for box 3, non-employee compensation), <code>L26AMT</code> (total for box 6, medical), and <code>L27AMT</code> (total for box 7, miscellaneous) to zero (lines 0038\u20130040).</li> <li>Initializes report accumulators for each box (<code>BX1AMT</code>, <code>BX3AMT</code>, <code>BX6AMT</code>, <code>BX7AMT</code>) to zero (lines 0044\u20130046).</li> </ul> </li> <li> <p>Processing Individual Vendor Records (Level 1 Break - 01):</p> </li> <li> <p>For each vendor record (<code>AP761</code>, indicator 01), the program processes payment amounts and payee names:</p> <ul> <li>Accumulate Box Amounts (lines 0048\u20130070):</li> <li>Checks the first box number (<code>VNBOX1</code>) and assigns the first amount (<code>VNAMT1</code>) to the corresponding accumulator:<ul> <li>If <code>VNBOX1 = 1</code>, adds <code>VNAMT1</code> to <code>BX1AMT</code> (rent) (lines 0048\u20130050).</li> <li>If <code>VNBOX1 = 3</code>, adds <code>VNAMT1</code> to <code>BX3AMT</code> (non-employee compensation) (lines 0052\u20130054).</li> <li>If <code>VNBOX1 = 6</code>, adds <code>VNAMT1</code> to <code>BX6AMT</code> (medical) (lines 0052\u20130054).</li> <li>If <code>VNBOX1 = 7</code>, adds <code>VNAMT1</code> to <code>BX3AMT</code> (miscellaneous, treated as non-employee compensation) (lines 0056\u20130058).</li> </ul> </li> <li>Checks the second box number (<code>VNBOX2</code>) and assigns the second amount (<code>VNAMT2</code>) similarly:<ul> <li>If <code>VNBOX2 = 1</code>, adds <code>VNAMT2</code> to <code>BX1AMT</code> (rent) (lines 0060\u20130062).</li> <li>If <code>VNBOX2 = 6</code>, adds <code>VNAMT2</code> to <code>BX6AMT</code> (medical) (lines 0064\u20130066).</li> <li>If <code>VNBOX2 = 7</code>, adds <code>VNAMT2</code> to <code>BX3AMT</code> (miscellaneous) (lines 0068\u20130070).</li> </ul> </li> <li>Update Group Totals (lines 0071\u20130074, JB01):</li> <li>Increments the vendor count (<code>L2CNT</code>) for the L2 group.</li> <li>Adds <code>BX1AMT</code>, <code>BX3AMT</code>, <code>BX6AMT</code>, and <code>BX7AMT</code> to their respective L2 totals (<code>L21AMT</code>, <code>L23AMT</code>, <code>L26AMT</code>, <code>L27AMT</code>).</li> <li>Handle Payee Names (lines JB01):</li> <li>Initializes <code>PYN1</code> and <code>PYN2</code> (payee name fields, 40 bytes each) to blanks and turns off indicators 71 and 72 (formatting flags).</li> <li>If <code>VNPYN1</code> (payee name 1) is blank, uses <code>VNNAME</code> (vendor name) for <code>PYN1</code> (lines JB01).</li> <li>If <code>VNNOVF = 'Y'</code> (name overflow flag), moves <code>VNADD1</code> (address line 1) to <code>PYN2</code> and sets indicator 72 for printing (lines JB02).</li> <li>If <code>VNPYN1</code> is not blank, uses <code>VNPYN1</code> for <code>PYN1</code> and sets indicator 71.</li> <li>If <code>VNPYN2</code> (payee name 2) is not blank, uses <code>VNPYN2</code> for <code>PYN2</code> and sets indicator 72 (lines JB01).</li> </ul> </li> <li> <p>Report Output (APPRINT) (lines 0076\u20130120):</p> </li> <li>The program writes to the printer file <code>APPRINT</code> (132 characters per line) with the following structure:<ul> <li>L2 Detail and Overflow Lines (lines 0076\u20130108):</li> <li>Prints page number (<code>PAGE</code>), date (<code>DATE</code>, formatted as <code>Y</code>), and time (<code>TIME</code>, formatted as <code>HH.MM.SS</code>) (lines 0078\u20130086).</li> <li>Prints the report title \u201cVENDOR 1099 REGISTER\u201d (line 0084).</li> <li>Prints the 1099 type (<code>VN1099</code>) and description (<code>TBDESC</code>) from <code>GSTABL</code> (lines 0088\u20130089).</li> <li>Prints column headers: \u201cNUMBER\u201d (vendor number), \u201c1099 ID #\u201d, \u201cPAYEE NAME\u201d, \u201cRENT (BOX=1)\u201d, \u201cMEDICAL (BOX=6)\u201d, \u201cMISC (BOX=3)\u201d (lines 0095\u20130105).</li> <li>Prints separator lines (<code>SEP</code>) as needed (lines 0092, 0108).</li> <li>Vendor Detail Lines (01) (lines 0109\u20130115, JB01):</li> <li>Prints vendor number (<code>VNVENDZ</code>), 1099 ID (<code>VNID#</code>), payee name 1 (<code>PYN1</code>), and amounts for boxes 1, 6, and 3 (<code>BX1AMTK</code>, <code>BX6AMTK</code>, <code>BX3AMTK</code>) (lines 0109\u20130115).</li> <li>If indicator 72 is on, prints payee name 2 (<code>PYN2</code>) on a second line (line JB01).</li> <li>L2 Totals (lines 0116\u20130120):</li> <li>Prints \u201c** TOTALS\u201d, vendor count (<code>L2CNT</code>), and total amounts for boxes 1, 6, and 3 (<code>L21AMTK</code>, <code>L26AMTK</code>, <code>L23AMTK</code>) at the end of each 1099 type group.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP760</code> RPG program enforces the following business rules for generating the 1099 register report:</p> <ol> <li>1099 Type Grouping:</li> <li>The report groups vendors by 1099 type (<code>VN1099</code>), with subtotals printed at each type change (L2 break).</li> <li> <p>Descriptions for 1099 types are retrieved from <code>GSTABL</code> using the key <code>AP1099</code> + <code>VN1099</code>.</p> </li> <li> <p>Box Number Mapping:</p> </li> <li>Box 1: Rent payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 1).</li> <li>Box 3: Miscellaneous payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 3 or 7).</li> <li>Box 6: Medical payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 6).</li> <li>Box 7: Treated as miscellaneous (mapped to <code>BX3AMT</code>).</li> <li> <p>Amounts are accumulated separately for each box and totaled by 1099 type.</p> </li> <li> <p>Payee Name Formatting (JB01, JB02):</p> </li> <li>If <code>VNPYN1</code> (payee name 1) is blank, use <code>VNNAME</code> (vendor name) as the primary name (<code>PYN1</code>).</li> <li>If <code>VNNOVF</code> is <code>'Y'</code>, use <code>VNADD1</code> (address line 1) as the secondary name (<code>PYN2</code>) for name overflow.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> as <code>PYN1</code> and <code>VNPYN2</code> (if not blank) as <code>PYN2</code>.</li> <li> <p>Indicators 71 and 72 control printing of <code>PYN1</code> and <code>PYN2</code>.</p> </li> <li> <p>Report Layout:</p> </li> <li>Headers include page number, date, time, 1099 type, and column labels.</li> <li>Detail lines show vendor number, 1099 ID, payee name(s), and amounts for rent, medical, and miscellaneous boxes.</li> <li> <p>Totals at each 1099 type break include vendor count and box amounts.</p> </li> <li> <p>Data Exclusion:</p> </li> <li> <p>Records marked as deleted (<code>VNDEL = 'D'</code>, position 1) are skipped (handled by prior steps in <code>AP760.ocl36.txt</code> and <code>AP761.rpg36.txt</code>).</p> </li> <li> <p>Special Handling:</p> </li> <li>If <code>KYTY1</code> is <code>'M'</code> or <code>'N'</code> and the <code>GSTABL</code> lookup fails, set indicators 33 or 34, respectively, which may affect report formatting or filtering (line 0037).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#tables-used","title":"Tables Used","text":"<p>The RPG program uses the following files (tables):</p> <ol> <li>AP761:</li> <li>Type: Disk file (<code>DISK</code>), primary input file (<code>IP</code>).</li> <li>Size: 196 bytes.</li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1, 1 byte): Delete code.</li> <li><code>VN1099L2</code> (position 2, 1 byte): 1099 code (renamed <code>VN1099</code>).</li> <li><code>VNVENDL1</code> (positions 3\u20137, 5 bytes): Vendor number (renamed <code>VNVENDZ</code>).</li> <li><code>VNID#</code> (positions 8\u201318, 11 bytes): 1099 ID number.</li> <li><code>VNNAME</code> (positions 19\u201348, 30 bytes): Vendor name.</li> <li><code>VNAMT1</code> (positions 49\u201357, 9 bytes, packed decimal): First box amount.</li> <li><code>VNAMT2</code> (positions 58\u201366, 9 bytes, packed decimal): Second box amount.</li> <li><code>VNBOX1</code> (positions 67\u201368, 2 bytes): First box number.</li> <li><code>VNBOX2</code> (positions 69\u201370, 2 bytes): Second box number.</li> <li><code>VNPYN1</code> (positions 71\u2013110, 40 bytes): Payee name 1 (added by JB01).</li> <li><code>VNPYN2</code> (positions 111\u2013150, 40 bytes): Payee name 2 (added by JB01).</li> <li><code>VNNOVF</code> (position 151, 1 byte): Name overflow (added by JB02).</li> <li><code>VNADD1</code> (positions 152\u2013181, 30 bytes): Address line 1 (added by JB02).</li> </ul> </li> <li> <p>Purpose: Preprocessed 1099 data from <code>AP761.rpg36.txt</code>, containing one record per vendor.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Disk file (<code>DISK</code>), input file (<code>IC</code>), keyed access.</li> <li>Size: 256 bytes, with a 12-byte key.</li> <li>Fields:<ul> <li><code>TBDESC</code> (positions 14\u201343, 30 bytes): Table description.</li> </ul> </li> <li> <p>Purpose: Lookup table for 1099 type descriptions, accessed with key <code>AP1099</code> + <code>VN1099</code>.</p> </li> <li> <p>APPRINT:</p> </li> <li>Type: Printer file (<code>PRINTER</code>), output file (<code>O</code>).</li> <li>Size: 132 bytes.</li> <li>Purpose: Output file for the 1099 register report, containing headers, detail lines, and totals.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP760</code> program does not explicitly call any external programs. However: - It is invoked by the <code>AP760P.ocl36.txt</code> OCL program, either directly or via a job queue, as specified in the OCL\u2019s <code>// JOBQ</code> or <code>// AP760</code> commands. - The <code>AP760P</code> program (previously analyzed) sets up and validates parameters passed to <code>AP760</code> via the User Data Structure (UDS), specifically <code>KYTY1</code> for 1099 type filtering.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP760</code> RPG/36 program generates a Vendor 1099 Register by: 1. Initializing date, time, and report formatting settings. 2. Processing vendor records from <code>AP761</code>, grouped by 1099 type (<code>VN1099</code>), and retrieving type descriptions from <code>GSTABL</code>. 3. Accumulating payment amounts for 1099 boxes (1: rent, 3: non-employee compensation, 6: medical, 7: miscellaneous) and handling payee names (using vendor name, payee names, or address for overflow). 4. Printing a formatted report to <code>APPRINT</code> with headers, vendor details, and totals for each 1099 type group. 5. Enforcing business rules for box mapping, payee name formatting, and report structure.</p> <p>Tables/Files Used: - <code>AP761</code> (vendor 1099 data, primary input). - <code>GSTABL</code> (1099 type descriptions, indexed). - <code>APPRINT</code> (printer output for the report).</p> <p>External Programs Called: - None directly called, but invoked by <code>AP760P.ocl36.txt</code> and relies on parameters set by <code>AP760P</code>.</p> <p>If you need further details, such as a sample report layout or additional analysis of the <code>AP761</code> file structure, let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/","title":"AP760P OCL","text":"<p>Let\u2019s break down the process steps of the provided RPG .OCL (Operation Control Language) program, <code>AP760P.ocl36.txt</code>, which appears to be a control program for generating a Vendor 1099 Register. I\u2019ll explain each step clearly, identify external programs called, and list the tables/files used, based on the provided document.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The program is designed to initiate the generation of a Vendor 1099 Register for a specified year, using a file named <code>APVNYYYY</code> (where <code>YYYY</code> is the four-digit year). Below is a step-by-step explanation of the program\u2019s logic, derived from the OCL code:</p> <ol> <li>Program Initialization and Parameter Setup:</li> <li>The program begins with the <code>// SCPROCP</code> command, indicating it\u2019s a system control procedure, likely running on an IBM System/3x or AS/400 environment.</li> <li>Parameters <code>?9?</code> (likely a library or environment identifier) and <code>?10?</code> (the four-digit year for the 1099 forms) are expected as inputs.</li> <li>The <code>// LOCAL BLANK-*ALL</code> command clears all local variables to ensure a clean state before processing.</li> <li> <p>The <code>// GSY2K</code> command may invoke a utility or subroutine to handle Year 2000 compliance, ensuring date-related calculations are correct.</p> </li> <li> <p>Prompt for Year (if needed):</p> </li> <li> <p>The commented-out line <code>// * 'WHAT YEAR ARE THESE 1099''S FOR? PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'</code> suggests that the program may prompt the user for the year (<code>?10?</code>) if it\u2019s not provided. However, since it\u2019s commented out, the year is likely passed as a parameter when the program is invoked.</p> </li> <li> <p>Determine the 1099 File Name:</p> </li> <li>The program constructs the file name for the 1099 data using the <code>EVALUATE</code> command:<ul> <li>If <code>?9?</code> (the library/environment identifier) equals <code>'G'</code>, the file name is set to <code>APVN?10?</code> (e.g., <code>APVN2025</code> for year 2025).</li> <li>Otherwise, the file name is set to <code>?9?VN?10?</code> (e.g., <code>LIBVN2025</code> if <code>?9?</code> is <code>LIB</code>).</li> </ul> </li> <li> <p>The resulting file name is stored in parameter <code>P13</code>.</p> </li> <li> <p>Check for File Existence:</p> </li> <li>The program checks if the file specified in <code>?13?</code> exists using <code>// IFF DATAF1-?13?</code>.</li> <li>If the file does not exist, the program displays a pause message: <code>'?10? NOT FOUND ( ?13? )'</code>, informing the user that the file for the specified year (e.g., <code>2025 NOT FOUND ( APVN2025 )</code>) is missing.</li> <li> <p>If the file is not found, the program executes <code>// CANCEL</code>, terminating the process.</p> </li> <li> <p>Load the Main Program:</p> </li> <li>If the file exists, the program proceeds with <code>// LOAD AP760P</code>, which loads the main RPG program (<code>AP760P</code>) responsible for generating the 1099 Register.</li> <li> <p>Two files are opened with shared access (<code>DISP-SHR</code>):</p> <ul> <li><code>APCONT</code>, labeled as <code>?9?APCONT</code> (e.g., <code>LIBAPCONT</code> if <code>?9?</code> is <code>LIB</code>), likely containing accounts payable control information.</li> <li><code>GSTABL</code>, labeled as <code>?9?GSTABL</code>, likely a general system table containing configuration or reference data.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li>The <code>// RUN</code> command executes the loaded <code>AP760P</code> program.</li> <li> <p>The program checks a condition using <code>// IF ?L'129,6'?/CANCEL</code>:</p> <ul> <li>This likely checks a specific field or flag at position 129, character 6 in a control record or parameter.</li> <li>If the condition evaluates to <code>CANCEL</code>, the program jumps to the <code>END</code> tag, terminating execution.</li> </ul> </li> <li> <p>Job Submission or Direct Execution:</p> </li> <li>The program checks another condition using <code>// IF ?L'120,1'?/Y</code>:<ul> <li>If the condition at position 120, character 1 is <code>'Y'</code>, the program submits <code>AP760</code> to a job queue (<code>JOBQ</code>) with parameters <code>?CLIB?</code>, <code>?9?</code>, <code>?10?</code>, and <code>?13?</code>. The <code>?CLIB?</code> likely specifies the library for the job queue.</li> <li>If the condition is not <code>'Y'</code>, the program directly executes <code>AP760</code> with the same parameters (<code>?9?</code>, <code>?10?</code>, <code>?13?</code>).</li> </ul> </li> <li> <p><code>AP760</code> is likely the program that processes the <code>APVNYYYY</code> file to generate the 1099 Register.</p> </li> <li> <p>Program Termination:</p> </li> <li>The <code>// TAG END</code> marks the end of the program.</li> <li>The final <code>// LOCAL BLANK-*ALL</code> clears all local variables again, ensuring no residual data remains in memory.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>Based on the OCL code, the following external programs are referenced or called: 1. AP760P: The main RPG program loaded and executed to generate the 1099 Register. It processes the vendor data from the <code>APVNYYYY</code> file. 2. AP760: Invoked either directly or via the job queue, likely a compiled version of <code>AP760P</code> or a related program that performs the core 1099 processing. 3. GSY2K (implied): The <code>// GSY2K</code> command suggests a utility or subroutine for Year 2000 date handling, though it\u2019s not explicitly a separate program.</p> <p>Note: The <code>AP300</code> program is mentioned in the programmer\u2019s note as the program that creates the <code>APVNYYYY</code> file during period-end processing, but it is not called within this OCL program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program references the following files/tables: 1. APVNYYYY (referenced as <code>?13?</code>, e.g., <code>APVN2025</code>):    - This is the primary input file containing vendor data for the specified year (<code>YYYY</code> = <code>?10?</code>).    - Created by the <code>AP300</code> program during period-end processing, it holds the <code>GAPVEND</code> file data before monthly and yearly totals are cleared. 2. APCONT (labeled <code>?9?APCONT</code>, e.g., <code>LIBAPCONT</code>):    - A shared file (<code>DISP-SHR</code>) likely containing accounts payable control information, such as vendor master data or configuration settings. 3. GSTABL (labeled <code>?9?GSTABL</code>, e.g., <code>LIBGSTABL</code>):    - A shared file (<code>DISP-SHR</code>) likely containing general system tables with reference data, such as tax codes, vendor categories, or other configuration details.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#summary","title":"Summary","text":"<p>The <code>AP760P.ocl36.txt</code> OCL program orchestrates the generation of a Vendor 1099 Register by: 1. Setting up the environment and determining the 1099 file name (<code>APVNYYYY</code>). 2. Verifying the existence of the input file. 3. Loading and running the <code>AP760P</code> program, which uses the <code>APCONT</code> and <code>GSTABL</code> files. 4. Either submitting the <code>AP760</code> program to a job queue or executing it directly, based on a control condition. 5. Cleaning up local variables at the start and end of the process.</p> <p>External Programs Called: - <code>AP760P</code> (loaded and run) - <code>AP760</code> (executed directly or via job queue) - <code>GSY2K</code> (implied utility, not explicitly called)</p> <p>Tables/Files Used: - <code>APVNYYYY</code> (e.g., <code>APVN2025</code>, primary 1099 data file) - <code>APCONT</code> (e.g., <code>LIBAPCONT</code>, accounts payable control file) - <code>GSTABL</code> (e.g., <code>LIBGSTABL</code>, general system table)</p> <p>If you need further clarification or additional analysis (e.g., specific RPG code within <code>AP760P</code>), let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/","title":"AP760P RPG36","text":"<p>The provided <code>AP760P.rpg36.txt</code> is an RPG/36 program (likely running on an IBM System/36 or AS/400 environment) that serves as the main program for generating a Vendor 1099 Register, called from the <code>AP760P.ocl36.txt</code> OCL program previously discussed. This program handles user input validation and setup for the 1099 report generation process. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the RPG code provided.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#process-steps-of-the-rpg36-program-ap760p","title":"Process Steps of the RPG/36 Program (AP760P)","text":"<p>The <code>AP760P</code> program is responsible for prompting the user for parameters (via a workstation screen) and validating inputs before passing them to another program (likely <code>AP760</code>) for generating the Vendor 1099 Register. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines a workstation file (<code>SCREEN</code>) for user interaction, and two disk files: <code>APCONT</code> (accounts payable control file) and <code>GSTABL</code> (general system table).</li> <li>Arrays are defined: <code>MSG</code> (10 error messages, 40 characters each) and <code>DCO</code> (5 company numbers/names, 35 characters each).</li> <li>The program clears indicators (50\u201358, 81\u201390) and initializes the <code>MSG40</code> field to blanks to reset any previous error messages (lines 0047\u20130051).</li> <li> <p>If the <code>KG</code> (cancel) condition is set, the program sets <code>KYCANC</code> to <code>'CANCEL'</code> and turns off indicators 01 and 09, likely preparing to exit (lines 0053\u20130054).</p> </li> <li> <p>One-Time Setup (ONETIM Subroutine):</p> </li> <li>Executed if indicator 09 is on (line 0056), typically on the first run.</li> <li>Purpose: Populates the <code>DCO</code> array with company numbers and names from the <code>APCONT</code> file for display on the screen.</li> <li> <p>Steps:</p> <ul> <li>Initializes counter <code>X</code> to 1 and limit <code>ACLIM</code> to 0 (lines 0066\u20130067).</li> <li>Positions the file pointer to the start of <code>APCONT</code> using <code>SETLL</code> (line 0068).</li> <li>Reads records from <code>APCONT</code> in a loop (lines 0069\u20130079):</li> <li>Skips records marked as deleted (<code>ACRCCD = 'D'</code>) (lines 0073\u20130074).</li> <li>Moves the company number (<code>ACCONO</code>) and name (<code>ACNAME</code>) into the <code>DCO</code> array at index <code>X</code> (lines 0075\u20130076).</li> <li>Increments <code>X</code> and continues until 5 companies are loaded or the end of the file is reached (indicator 79) (lines 0077\u20130079).</li> <li>Sets default values for screen fields (lines 0084\u20130089):</li> <li><code>KYALCO = 'ALL'</code> (select all companies by default).</li> <li><code>KYALTY = 'TYP'</code> (select specific 1099 types by default).</li> <li><code>KYCRLS = 'C'</code> (current year data).</li> <li><code>KYJOBQ = 'N'</code> (do not submit to job queue).</li> <li><code>KYCOPY = 01</code> (one copy of the report).</li> <li>Sets indicator 81 to display the screen.</li> </ul> </li> <li> <p>Screen Processing and Validation (S1 Subroutine):</p> </li> <li>Executed if indicator 01 is on (line 0058), handling user input validation from the screen (<code>SCREEN</code>, format <code>AP760PS1</code>).</li> <li>Purpose: Validates user inputs for company selection, 1099 types, current/last year, job queue option, and number of copies.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Selection (lines 0096\u20130137):</li> <li>Checks if <code>KYALCO</code> is <code>'ALL'</code> or <code>'CO'</code> (lines 0096\u20130097).</li> <li>If neither, sets error indicators (81, 90, 50), displays error message 1 (\u201cENTRY MUST BE 'CO' OR 'ALL'\u201d), and exits to <code>ENDS1</code> (lines 0098\u20130100).</li> <li>If <code>KYALCO = 'CO'</code> and company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are all zero, or if <code>KYALCO = 'ALL'</code> and any company number is non-zero, sets error indicators (81, 90, 51) and displays error message 2 or 3 (lines 0102\u20130112).</li> <li>If <code>KYALCO = 'CO'</code>, validates each company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) by chaining to <code>APCONT</code> (lines 0116\u20130135):<ul> <li>If a company number is invalid (not found in <code>APCONT</code>), sets error indicators (81, 90, 51\u201353) and displays error message 4 (\u201cINVALID COMPANY NUMBER\u201d).</li> </ul> </li> <li>Validate 1099 Type Selection (lines 0142\u20130188):</li> <li>Checks if <code>KYALTY</code> is <code>'ALL'</code> or <code>'TYP'</code> (lines 0142\u20130143).</li> <li>If neither, sets error indicators (81, 90, 54), displays error message 6 (\u201cENTRY MUST BE 'TYP' OR 'ALL'\u201d), and exits (lines 0144\u20130146).</li> <li>If <code>KYALTY = 'TYP'</code> and types (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>) are blank, or if <code>KYALTY = 'ALL'</code> and any type is non-blank, sets error indicators (81, 90, 55) and displays error message 7 or 8 (lines 0148\u20130158).</li> <li>If <code>KYALTY = 'TYP'</code>, validates each type (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>) by chaining to <code>GSTABL</code> with key <code>AP1099</code> concatenated with the type (lines 0162\u20130186):<ul> <li>If a type is invalid (not found in <code>GSTABL</code>), sets error indicators (81, 90, 55\u201357) and displays error message 9 (\u201cINVALID 1099 TYPE\u201d).</li> </ul> </li> <li>Validate Current/Last Year Selection (lines 0192\u20130197):</li> <li>Checks if <code>KYCRLS</code> is <code>'C'</code> (current year) or <code>'L'</code> (last year) (lines 0192\u20130193).</li> <li>If neither, sets error indicators (81, 90, 58), displays error message 10 (\u201cCURR/LAST ENTRY MUST BE 'C' OR 'L'\u201d), and exits (lines 0194\u20130196).</li> <li>Sets <code>KYCYYR</code> (year for 1099s):<ul> <li>If <code>KYCRLS = 'C'</code>, sets <code>KYCYYR</code> to the current year (<code>UYEAR</code>) (lines 0197).</li> <li>If <code>KYCRLS = 'L'</code>, sets <code>KYCYYR</code> to the previous year (<code>UYEAR - 1</code>) (lines 0197).</li> </ul> </li> <li>Validate Job Queue Selection (lines 0199\u20130204):</li> <li>Checks if <code>KYJOBQ</code> is <code>'Y'</code>, <code>'N'</code>, or blank (lines 0199\u20130201).</li> <li>If invalid, sets error indicators (81, 90, 59), displays error message 5 (\u201cJOB QUEUE ENTRY MUST BE 'Y' OR 'N'\u201d), and exits (lines 0202\u20130204).</li> <li>Validate Number of Copies (lines 0206\u20130207):</li> <li>If <code>KYCOPY</code> is zero, sets it to 1 (lines 0206\u20130207).</li> <li>Output to Screen (lines 0211\u20130225):</li> <li>If indicator 81 is on, displays the <code>AP760PS1</code> screen format with fields (<code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>DCO</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>MSG40</code>).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program loops back to display the screen if validation fails (indicator 81 on), allowing the user to correct inputs.</li> <li>If validation succeeds, the program sets the necessary parameters in the User Data Structure (UDS) fields (<code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCANC</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYCYYR</code>) for use by the calling OCL or subsequent program (<code>AP760</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the 1099 Register:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies) in <code>KYALCO</code>.</li> <li>If <code>'CO'</code> is selected, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided, and each must exist in the <code>APCONT</code> file.</li> <li>If <code>'ALL'</code> is selected, no company numbers should be specified.</li> <li> <p>Invalid company selections trigger error messages (1\u20134).</p> </li> <li> <p>1099 Type Selection:</p> </li> <li>The user must select either <code>'ALL'</code> (all 1099 types) or <code>'TYP'</code> (specific types) in <code>KYALTY</code>.</li> <li>If <code>'TYP'</code> is selected, at least one valid 1099 type (<code>KYTY1</code>, <code>KYTY2</code>, or <code>KYTY3</code>) must be provided, and each must exist in the <code>GSTABL</code> file under the <code>AP1099</code> key.</li> <li>If <code>'ALL'</code> is selected, no specific types should be specified.</li> <li> <p>Invalid type selections trigger error messages (6\u20139).</p> </li> <li> <p>Current/Last Year Selection:</p> </li> <li>The user must select <code>'C'</code> (current year) or <code>'L'</code> (last year) in <code>KYCRLS</code>.</li> <li>The year (<code>KYCYYR</code>) is set to the current year (<code>UYEAR</code>) for <code>'C'</code> or the previous year (<code>UYEAR - 1</code>) for <code>'L'</code>.</li> <li> <p>Invalid selections trigger error message 10.</p> </li> <li> <p>Job Queue Option:</p> </li> <li>The user must specify <code>'Y'</code> (submit to job queue) or <code>'N'</code> (run interactively) in <code>KYJOBQ</code>.</li> <li> <p>Invalid selections trigger error message 5.</p> </li> <li> <p>Number of Copies:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be non-zero; if zero, it defaults to 1.</p> </li> <li> <p>Error Handling:</p> </li> <li>If any validation fails, the program displays an error message on the screen and waits for corrected input.</li> <li>The user can cancel the process (setting <code>KYCANC = 'CANCEL'</code>), which likely terminates the program or signals the OCL to exit.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. SCREEN:    - Type: Workstation file (<code>WORKSTN</code>), 512 bytes.    - Used for user interaction via the <code>AP760PS1</code> screen format to collect and display input parameters and error messages. 2. APCONT:    - Type: Indexed file (<code>IF</code>), 256 bytes, with a 2-byte key, shared access (<code>DISP-SHR</code>).    - Contains accounts payable control data, including:      - <code>ACRCCD</code> (1 byte): Delete code (\u2018D\u2019 for deleted records).      - <code>ACCONO</code> (2 bytes): Company number.      - <code>ACNAME</code> (30 bytes): Company name.    - Used to validate company numbers and populate the <code>DCO</code> array for display. 3. GSTABL:    - Type: Indexed file (<code>IC</code>), 256 bytes, with a 12-byte key, shared access (<code>DISP-SHR</code>).    - Contains general system tables, specifically 1099 type codes under the <code>AP1099</code> key.    - Used to validate 1099 types (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program itself does not explicitly call external programs. However: - It is called from the <code>AP760P.ocl36.txt</code> OCL program, as indicated in the OCL\u2019s <code>// LOAD AP760P</code> and <code>// RUN</code> commands. - The validated parameters are passed to the <code>AP760</code> program (via the OCL\u2019s <code>JOBQ</code> or direct execution), which likely performs the actual 1099 Register generation. - The <code>GSY2K</code> utility (mentioned in the OCL) may be indirectly involved for date handling, but it is not called within the RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP760P</code> RPG/36 program is a front-end validation program that: 1. Displays a screen (<code>AP760PS1</code>) to collect user inputs for company selection (<code>KYALCO</code>, <code>KYCO1\u20133</code>), 1099 types (<code>KYALTY</code>, <code>KYTY1\u20133</code>), year (<code>KYCRLS</code>), job queue option (<code>KYJOBQ</code>), and number of copies (<code>KYCOPY</code>). 2. Validates inputs against the <code>APCONT</code> (company data) and <code>GSTABL</code> (1099 types) files, displaying error messages if invalid. 3. Sets up parameters in the User Data Structure (UDS) for the year (<code>KYCYYR</code>) and other options, which are passed to the <code>AP760</code> program via the OCL for report generation. 4. Enforces business rules to ensure valid company numbers, 1099 types, year selection, job queue option, and copy count.</p> <p>Tables/Files Used: - <code>SCREEN</code> (workstation file for user interaction) - <code>APCONT</code> (accounts payable control file for company data) - <code>GSTABL</code> (general system table for 1099 types)</p> <p>External Programs Called: - None directly called within the RPG code, but <code>AP760</code> is invoked via the OCL, and <code>AP760P</code> is called by the OCL program <code>AP760P.ocl36.txt</code>.</p> <p>If you need further details, such as a deeper analysis of the screen format or the <code>AP760</code> program\u2019s expected behavior, let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/","title":"AP761 RPG36","text":"<p>The provided document is an RPG (Report Program Generator) program, <code>AP761.rpg36.txt</code>, which is called by the OCL program <code>AP760.ocl36.txt</code> as part of the vendor 1099 register process on an IBM AS/400 or iSeries system. This RPG program preprocesses the 1099 data to create a consolidated work file (<code>AP761</code>) with one record per vendor, regardless of multiple company affiliations, for use in generating the final 1099 register report. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called, based on the provided RPG code and its integration with the OCL program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#process-steps-of-the-ap761-rpg-program","title":"Process Steps of the AP761 RPG Program","text":"<p>The <code>AP761</code> RPG program reads sorted 1099 data from a temporary file (<code>AP760S</code>) and the original 1099 file (<code>APVEND</code>), aggregates amounts for each vendor, adjusts for dual 1099 box amounts, and writes a consolidated record to the output file (<code>AP761</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization:</li> <li> <p>At the start of each level 1 break (<code>L1</code>, triggered by a change in the control field defined in <code>AP760S</code>), the program initializes accumulators and fields:</p> <ul> <li><code>L1AMT1</code> (primary 1099 amount): Set to zero (line 0025).</li> <li><code>L1AMT2</code> (secondary 1099 box amount): Set to zero (line 0026).</li> <li><code>BOX1</code> (first 1099 box number): Set to zero (line 0027).</li> <li><code>BOX2</code> (second 1099 box number): Set to zero (line 0028).</li> </ul> </li> <li> <p>Read Input Files:</p> </li> <li>Primary File (<code>AP760S</code>):<ul> <li>Defined as an input file (<code>IR</code>), externally described (<code>EDISK</code>), with a 30-byte record and a 3-byte key (lines 0007, 0009).</li> <li>Sorted by 1099 type, vendor, and company (as defined in <code>AP760.ocl36.txt</code>).</li> <li>Drives the program cycle, triggering processing for each record.</li> </ul> </li> <li> <p>Secondary File (<code>APVEND</code>):</p> <ul> <li>Defined as the primary input file (<code>IP</code>), 579 bytes, internally described (line 0006).</li> <li>Matched with <code>AP760S</code> records to retrieve detailed vendor data (e.g., name, amounts, 1099 codes).</li> </ul> </li> <li> <p>Accumulate 1099 Amounts:</p> </li> <li>Determine Year:<ul> <li>Check the <code>CURLST</code> field (from User Data Structure at offset 141, set by <code>AP760.ocl36.txt</code> as <code>'C'</code> or <code>'L'</code>) to determine whether to use current or last year\u2019s year-to-date (YTD) paid amount (line 0033).</li> <li>Regardless of <code>CURLST</code>, the program adds <code>VNYTDP</code> (current year YTD paid, positions 242\u2013247) to <code>L1AMT1</code> (lines 0034\u2013037). Note: The code comment suggests a future change to use <code>VNLYDP</code> (last year YTD paid, positions 248\u2013253) or an individual year file (<code>APVNXXXX</code>), but currently, it uses <code>VNYTDP</code> for both cases.</li> </ul> </li> <li> <p>Secondary Box Amount:</p> <ul> <li>Add <code>VNB2AM</code> (second 1099 box amount, positions 280\u2013285) to <code>L1AMT2</code> (line 0039).</li> </ul> </li> <li> <p>Set 1099 Box Numbers:</p> </li> <li>First Box (<code>BOX1</code>):<ul> <li>If <code>BOX1</code> is zero, set it to <code>VNBOX1</code> (first 1099 box number, positions 276\u2013277) (lines 0041\u20130043).</li> </ul> </li> <li>Second Box (<code>BOX2</code>):<ul> <li>If <code>BOX2</code> is zero, set it to <code>VNBOX2</code> (second 1099 box number, positions 278\u2013279) (lines 0045\u20130047).</li> </ul> </li> <li> <p>Default Box (<code>BOX1</code>):</p> <ul> <li>At level 1 (<code>L1</code>), if <code>BOX1</code> is still zero, set it to 7 (default 1099 box, e.g., for miscellaneous income) (lines 0049\u20130051).</li> </ul> </li> <li> <p>Adjust Amounts for Dual Boxes:</p> </li> <li> <p>At level 1 (<code>L1</code>), if <code>L1AMT2</code> (secondary box amount) is greater than zero and <code>BOX2</code> is non-zero, subtract <code>L1AMT2</code> from <code>L1AMT1</code> (lines 0052\u20130056). This ensures the total YTD amount is split between the two 1099 boxes, as <code>VNYTDP</code> includes both amounts.</p> </li> <li> <p>Write Output Record:</p> </li> <li>At level 1 (<code>L1</code>), if the above conditions are met, the program writes a record to the output file <code>AP761</code> using the <code>L1ADD</code> exception output (line 0057).</li> <li>Output Fields (lines 0059\u20130068, JB01, JB02):<ul> <li>Record identification: <code>'A'</code> (position 1).</li> <li><code>VN1099</code> (1099 code, position 264, 1 byte, renamed from <code>VN1099L2</code>).</li> <li><code>VNVEND</code> (vendor number, positions 4\u20138, 5 bytes, renamed from <code>VNVENDL1</code>).</li> <li><code>VNID#</code> (1099 ID number, positions 265\u2013275, 11 bytes).</li> <li><code>VNNAME</code> (vendor name, positions 9\u201338, 30 bytes).</li> <li><code>L1AMT1</code> (primary 1099 amount, 9 bytes, packed decimal).</li> <li><code>L1AMT2</code> (secondary 1099 box amount, 9 bytes, packed decimal).</li> <li><code>BOX1</code> (first 1099 box number, 2 bytes).</li> <li><code>BOX2</code> (second 1099 box number, 2 bytes).</li> <li><code>VNPYN1</code> (payee name 1, positions 300\u2013339, 40 bytes, added by JB01).</li> <li><code>VNPYN2</code> (payee name 2, positions 340\u2013379, 40 bytes, added by JB01).</li> <li><code>VNNOVF</code> (name overflow, position 216, 1 byte, added by JB02).</li> <li><code>VNADD1</code> (address line 1, positions 39\u201368, 30 bytes, added by JB02).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP761</code> RPG program enforces the following business rules for preprocessing the 1099 register:</p> <ol> <li>Single Record per Vendor:</li> <li> <p>The program consolidates multiple records for the same vendor (across different companies) into a single output record in <code>AP761</code>, aggregating YTD amounts and handling dual 1099 boxes.</p> </li> <li> <p>Year Selection:</p> </li> <li> <p>The program uses the current year\u2019s YTD paid amount (<code>VNYTDP</code>) for both current (<code>CURLST = 'C'</code>) and last year (<code>CURLST = 'L'</code>) processing, pending a future update to use <code>VNLYDP</code> or a year-specific file (<code>APVNXXXX</code>).</p> </li> <li> <p>1099 Box Handling:</p> </li> <li>If a second 1099 box amount (<code>VNB2AM</code>) exists, it is accumulated separately (<code>L1AMT2</code>) and subtracted from the primary amount (<code>L1AMT1</code>) to split the total YTD amount between two boxes.</li> <li>The first 1099 box (<code>BOX1</code>) defaults to 7 (e.g., miscellaneous income) if not specified.</li> <li> <p>Box numbers (<code>VNBOX1</code>, <code>VNBOX2</code>) are preserved if provided in the input file.</p> </li> <li> <p>Record Exclusion:</p> </li> <li> <p>Records marked as deleted (<code>VNDEL = 'D'</code>, position 1) are skipped (implicitly handled by the sort in <code>AP760.ocl36.txt</code>).</p> </li> <li> <p>Data Inclusion:</p> </li> <li>The output record includes critical 1099 data: 1099 code, vendor number, ID number, name, amounts, box numbers, payee names (added by JB01), name overflow, and address line 1 (added by JB02).</li> <li> <p>Payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) and name overflow (<code>VNNOVF</code>) support extended vendor identification and formatting for printing.</p> </li> <li> <p>Error Handling:</p> </li> <li>The program assumes valid input from the sorted file (<code>AP760S</code>) and original file (<code>APVEND</code>). No explicit validation is performed, as filtering (e.g., company, type) is handled by the sort in <code>AP760.ocl36.txt</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#tables-used","title":"Tables Used","text":"<p>The RPG program uses the following files (tables):</p> <ol> <li>APVEND:</li> <li>Type: Disk file (<code>DISK</code>), primary input file (<code>IP</code>), internally described.</li> <li>Size: 579 bytes.</li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1, 1 byte): Delete code (e.g., <code>'D'</code> for deleted).</li> <li><code>VNCO</code> (positions 2\u20133, 2 bytes): Company number.</li> <li><code>VNVENDL1</code> (positions 4\u20138, 5 bytes): Vendor number.</li> <li><code>VNNAME</code> (positions 9\u201338, 30 bytes): Vendor name.</li> <li><code>VNADD1</code> (positions 39\u201368, 30 bytes): Address line 1 (added by JB02).</li> <li><code>VNNOVF</code> (position 216, 1 byte): Name overflow (added by JB02).</li> <li><code>VNYTDP</code> (positions 242\u2013247, packed decimal, 6 bytes): Current year YTD paid.</li> <li><code>VNLYDP</code> (positions 248\u2013253, packed decimal, 6 bytes): Last year YTD paid.</li> <li><code>VN1099L2</code> (position 264, 1 byte): 1099 code.</li> <li><code>VNID#</code> (positions 265\u2013275, 11 bytes): 1099 ID number.</li> <li><code>VNBOX1</code> (positions 276\u2013277, 2 bytes): First 1099 box number.</li> <li><code>VNBOX2</code> (positions 278\u2013279, 2 bytes): Second 1099 box number.</li> <li><code>VNB2AM</code> (positions 280\u2013285, packed decimal, 6 bytes): Second 1099 box amount.</li> <li><code>VNPYN1</code> (positions 300\u2013339, 40 bytes): Payee name 1 (added by JB01).</li> <li><code>VNPYN2</code> (positions 340\u2013379, 40 bytes): Payee name 2 (added by JB01).</li> </ul> </li> <li> <p>Purpose: Provides detailed vendor 1099 data, matched with <code>AP760S</code> records.</p> </li> <li> <p>AP760S:</p> </li> <li>Type: Disk file (<code>DISK</code>), input file (<code>IR</code>), externally described (<code>EDISK</code>).</li> <li>Size: 30 bytes, with a 3-byte key.</li> <li> <p>Purpose: Sorted 1099 data (by 1099 type, vendor, company) from the <code>#GSORT</code> step in <code>AP760.ocl36.txt</code>. Drives the program cycle and provides control fields for matching with <code>APVEND</code>.</p> </li> <li> <p>AP761:</p> </li> <li>Type: Disk file (<code>DISK</code>), output file (<code>O</code>).</li> <li>Size: 196 bytes.</li> <li>Fields: As listed in the output specification (lines 0059\u20130068, JB01, JB02).</li> <li>Purpose: Consolidated work file with one record per vendor, containing aggregated amounts and formatting data for the final 1099 register report.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP761</code> RPG program does not explicitly call any external RPG or CL programs. It is invoked by the OCL program <code>AP760.ocl36.txt</code> and produces output for the subsequent program <code>AP760</code>. Key points:</p> <ul> <li>Called by OCL:</li> <li> <p>The OCL program <code>AP760.ocl36.txt</code> loads and runs <code>AP761</code>, passing file labels <code>?13?</code> (e.g., <code>APVN2025</code>) for <code>APVEND</code> and <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>) for <code>AP760S</code>, and defining <code>?9?AP761</code> (e.g., <code>PRODAP761</code>) as the output file.</p> </li> <li> <p>No Subprogram Calls:</p> </li> <li> <p>The program uses no internal subroutines or external program calls. All processing is handled within the RPG cycle and exception output.</p> </li> <li> <p>Downstream Program:</p> </li> <li>The output file <code>AP761</code> is used by the <code>AP760</code> program (called later in <code>AP760.ocl36.txt</code>) to generate the final 1099 register report.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#integration-with-ocl-program","title":"Integration with OCL Program","text":"<p>The <code>AP761</code> RPG program integrates with <code>AP760.ocl36.txt</code> as follows:</p> <ul> <li>Input Files:</li> <li><code>APVEND</code> uses the 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>) created by <code>AP300</code> (period-end processing).</li> <li> <p><code>AP760S</code> is the sorted file (<code>?9?AP760S</code>) produced by <code>#GSORT</code> in the OCL, filtered by company and 1099 type selections from <code>AP760P.rpg36.txt</code>.</p> </li> <li> <p>Output File:</p> </li> <li> <p><code>AP761</code> produces the intermediate file (<code>?9?AP761</code>), which is used as input by the <code>AP760</code> program for the final report.</p> </li> <li> <p>Parameters:</p> </li> <li> <p>The <code>CURLST</code> field (offset 141 in UDS) is set by <code>AP760.ocl36.txt</code> based on <code>KYCRLS</code> (<code>'C'</code> or <code>'L'</code>) from <code>AP760P.rpg36.txt</code>, controlling whether current or last year amounts are used (though currently, <code>VNYTDP</code> is used for both).</p> </li> <li> <p>Change History:</p> </li> <li>JB01 (01/30/2013): Added <code>VNPYN1</code> and <code>VNPYN2</code> to the output file to support printing payee names.</li> <li>JB02 (01/20/2014): Added <code>VNNOVF</code> and <code>VNADD1</code> to support name overflow and address line 1 for improved report formatting.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes accumulators, reads sorted (<code>AP760S</code>) and original (<code>APVEND</code>) 1099 data, aggregates YTD amounts per vendor, adjusts for dual 1099 boxes, sets default box numbers, and writes a consolidated record to <code>AP761</code> with vendor details, amounts, and formatting fields.</li> <li>Business Rules: Consolidate vendor records across companies into one record, use current YTD amounts (pending future year-specific logic), split amounts between two 1099 boxes if applicable, default <code>BOX1</code> to 7 if unspecified, and include payee names, name overflow, and address for printing.</li> <li>Tables Used:</li> <li><code>APVEND</code>: Original 1099 data (e.g., <code>APVN2025</code>).</li> <li><code>AP760S</code>: Sorted 1099 data (e.g., <code>PRODAP760S</code>).</li> <li><code>AP761</code>: Output work file (e.g., <code>PRODAP761</code>).</li> <li>External Programs Called: None directly; called by <code>AP760.ocl36.txt</code>, produces output for <code>AP760</code>.</li> </ul> <p>The <code>AP761</code> program serves as a critical preprocessing step, consolidating and formatting 1099 data for the final report generated by <code>AP760</code>, ensuring accurate aggregation and proper handling of 1099 box amounts.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/","title":"Summary AP760P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack, consisting of <code>AP760P.ocl36.txt</code>, <code>AP760P.rpg36.txt</code>, <code>AP760.ocl36.txt</code>, <code>AP761.rpg36.txt</code>, and <code>AP760.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate Vendor 1099 Register Report:</li> <li>This use case involves collecting user inputs for filtering vendor 1099 data, preprocessing the data to consolidate vendor records, and producing a formatted report summarizing payments by 1099 type and box numbers (e.g., rent, medical, miscellaneous) for tax reporting purposes. The process supports filtering by company, 1099 type, current or last year, and job queue execution, ensuring accurate aggregation and formatting for IRS compliance.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#function-requirement-document-generate-vendor-1099-register-report","title":"Function Requirement Document: Generate Vendor 1099 Register Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#function-requirement-document-generate-vendor-1099-register-report_1","title":"Function Requirement Document: Generate Vendor 1099 Register Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#purpose","title":"Purpose","text":"<p>Generate a consolidated 1099 register report summarizing vendor payments by 1099 type and box numbers (rent, medical, miscellaneous) for tax reporting, filtered by user-specified criteria.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: Four-digit year (e.g., 2025) for the 1099 data file.</li> <li>Company Selection:</li> <li><code>'ALL'</code>: Include all companies.</li> <li><code>'CO'</code>: List of up to three valid company numbers.</li> <li>1099 Type Selection:</li> <li><code>'ALL'</code>: Include all 1099 types.</li> <li><code>'TYP'</code>: List of up to three valid 1099 types.</li> <li>Year Scope: <code>'C'</code> (current year) or <code>'L'</code> (last year).</li> <li>Job Queue: <code>'Y'</code> (submit to job queue) or <code>'N'</code> (run interactively).</li> <li>Copies: Number of report copies (minimum 1).</li> <li>1099 Data File: File name (e.g., <code>APVN2025</code>) containing vendor payment data.</li> <li>Control File: Company data file (e.g., <code>APCONT</code>) for validation.</li> <li>Table File: Lookup table (e.g., <code>GSTABL</code>) for 1099 type descriptions.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>1099 Register Report: Printed report listing:</li> <li>Vendor number, 1099 ID, payee or vendor name (with overflow support).</li> <li>Payment amounts by 1099 box (1=rent, 3/7=miscellaneous, 6=medical).</li> <li>Totals by 1099 type, including vendor count and box amounts.</li> <li>Temporary Files: Intermediate sorted and processed files (e.g., <code>AP760S</code>, <code>AP761</code>), deleted after processing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure year is a valid four-digit value and 1099 data file (e.g., <code>APVN2025</code>) exists.</li> <li>Validate company numbers against control file if <code>'CO'</code> selected; reject if invalid or none provided.</li> <li>Validate 1099 types against table file if <code>'TYP'</code> selected; reject if invalid or none provided.</li> <li> <p>Ensure year scope is <code>'C'</code> or <code>'L'</code>, job queue is <code>'Y'</code> or <code>'N'</code>, and copies is at least 1.</p> </li> <li> <p>Sort 1099 Data:</p> </li> <li>Filter 1099 data file by:<ul> <li>Excluding deleted records (delete code \u2260 <code>'D'</code>).</li> <li>Matching specified companies (if <code>'CO'</code>) or all companies (if <code>'ALL'</code>).</li> <li>Matching specified 1099 types (if <code>'TYP'</code>) or all types (if <code>'ALL'</code>).</li> </ul> </li> <li> <p>Sort by 1099 type, vendor number, and company number, producing a temporary sorted file.</p> </li> <li> <p>Preprocess Data:</p> </li> <li>Consolidate records by vendor, creating one record per vendor:<ul> <li>Aggregate current year YTD paid amount (or last year if <code>'L'</code> selected).</li> <li>If a second 1099 box amount exists, subtract it from the primary amount.</li> <li>Set first box number to 7 (miscellaneous) if unspecified.</li> <li>Include vendor number, 1099 ID, name, payee names, name overflow, address, and box numbers/amounts.</li> </ul> </li> <li> <p>Write to an intermediate work file.</p> </li> <li> <p>Generate Report:</p> </li> <li>Group records by 1099 type, retrieving descriptions from table file.</li> <li>For each vendor:<ul> <li>Print vendor number, 1099 ID, and name (payee names if provided, else vendor name; use address for overflow if flagged).</li> <li>Print amounts for boxes 1 (rent), 3/7 (miscellaneous), and 6 (medical).</li> </ul> </li> <li>At each 1099 type break:<ul> <li>Print vendor count and total amounts for boxes 1, 3/7, and 6.</li> </ul> </li> <li> <p>Include report headers with date, time, page number, and column labels.</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete temporary files after report generation.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Data Filtering:</li> <li>Include only non-deleted vendor records.</li> <li>If <code>'CO'</code> selected, require at least one valid company; if <code>'ALL'</code>, exclude specific companies.</li> <li> <p>If <code>'TYP'</code> selected, require at least one valid 1099 type; if <code>'ALL'</code>, exclude specific types.</p> </li> <li> <p>Amount Calculation:</p> </li> <li>Use current year YTD paid for <code>'C'</code>; last year YTD paid for <code>'L'</code> (pending future year-specific file support).</li> <li> <p>If a second 1099 box amount exists, subtract it from the primary amount to split total payment.</p> </li> <li> <p>Box Mapping:</p> </li> <li>Box 1: Rent payments.</li> <li>Box 3 or 7: Miscellaneous payments (7 defaults if first box unspecified).</li> <li> <p>Box 6: Medical payments.</p> </li> <li> <p>Name Formatting:</p> </li> <li>Use payee name 1 and 2 if provided; otherwise, use vendor name.</li> <li> <p>If name overflow flag is <code>'Y'</code>, use address line 1 as secondary name.</p> </li> <li> <p>Report Requirements:</p> </li> <li>Group by 1099 type with subtotals.</li> <li>Include vendor count per 1099 type.</li> <li>Support multiple report copies (default 1 if zero specified).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Primary Amount (<code>L1AMT1</code>): Sum of YTD paid (<code>VNYTDP</code> or <code>VNLYDP</code>) across all records for a vendor.</li> <li>Secondary Amount (<code>L1AMT2</code>): Sum of second box amount (<code>VNB2AM</code>) if applicable.</li> <li>Adjusted Primary Amount: <code>L1AMT1</code> - <code>L1AMT2</code> if <code>L1AMT2</code> &gt; 0 and second box exists.</li> <li>Box Totals: Accumulate amounts for boxes 1, 3, 6, and 7 by 1099 type, mapping box 7 to box 3 for reporting.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Reject invalid inputs (e.g., non-existent companies, types, or file).</li> <li>Display error messages for invalid selections and halt processing until corrected.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/","title":"AP765 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#explanation-of-the-process-steps-and-business-rules-in-the-ocl-program-ap765ocl36txt","title":"Explanation of the Process Steps and Business Rules in the OCL Program (AP765.ocl36.txt)","text":"<p>The provided OCL (Operation Control Language) program, <code>AP765.ocl36.txt</code>, is designed for processing vendor 1099 forms on an IBM System/36 or AS/400 system. It is called by the main OCL program (<code>AP765P.ocl36.txt</code>) and handles sorting, data processing, and printing of 1099 forms for a specified year. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Program Initialization:</li> <li>GSY2K: Calls a system routine to ensure Year 2000 compliance for date handling.</li> <li>Parameters:<ul> <li><code>?10?</code>: Represents the four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: Specifies the 1099 file name (e.g., <code>APVN2012</code>), which contains vendor data.</li> </ul> </li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and is a snapshot of the <code>GAPVEND</code> file before monthly and yearly totals are cleared.</p> </li> <li> <p>Delete Temporary File (if exists):</p> </li> <li> <p><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: Checks if the temporary file <code>?9?AP766</code> (e.g., <code>XXAP766</code> where <code>?9?</code> is a prefix) exists. If it does, the file is deleted to ensure a clean start for processing.</p> </li> <li> <p>Sort Input File:</p> </li> <li><code>LOAD #GSORT</code>: Loads the system sort utility (<code>#GSORT</code>).</li> <li>Input File:<ul> <li><code>FILE NAME-INPUT,LABEL-?13?,DISP-SHR</code>: Specifies the input file as <code>?13?</code> (e.g., <code>APVN2012</code>), opened in shared mode (<code>DISP-SHR</code>).</li> </ul> </li> <li>Output File:<ul> <li><code>FILE NAME-OUTPUT,LABEL-?9?AP765S,RECORDS-999000,EXTEND-999000,RETAIN-J</code>: Creates a sorted output file named <code>?9?AP765S</code> (e.g., <code>XXAP765S</code>), with a capacity of 999,000 records, extendable by another 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 22A 3X N</code>: Defines an ascending sort (<code>A</code>) on a 22-character field starting at position 3, with no sequence checking (<code>N</code>).</li> <li><code>O C 264EQC</code>: Includes records where the field at position 264 equals a constant value (likely a flag or type indicator).</li> <li><code>I*</code>: Indicates inclusion of all records.</li> <li><code>I C 1NECD</code>: Includes records where position 1 equals <code>N</code>, <code>E</code>, <code>C</code>, or <code>D</code> (likely 1099 types: Non-Employee Compensation, etc.).</li> <li><code>IAC 264 264EQC?L'110,1'?</code>: Conditionally includes records based on the value of <code>?L'110,1'?</code> (e.g., <code>M</code> or <code>N</code> from the main OCL, determining 1099 type).</li> <li>Sort Fields:</li> <li><code>FNC 264 264</code>: Sorts on the 1099 type field (position 264, 1 character).</li> <li><code>FNC 4 8</code>: Sorts on the vendor field (positions 4-8, 5 characters).</li> <li><code>FNC 2 3</code>: Sorts on the company field (positions 2-3, 2 characters).</li> </ul> </li> <li><code>RUN</code>: Executes the sort, producing the sorted file <code>?9?AP765S</code>.</li> <li> <p>Purpose: This step sorts the vendor data by 1099 type, vendor, and company to organize records for subsequent processing.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li><code>LOAD AP766</code>: Loads the program <code>AP766</code> (likely an RPG program for data processing).</li> <li>Files Used:<ul> <li><code>FILE NAME-APVEND,LABEL-?13?,DISP-SHR</code>: Input file <code>?13?</code> (e.g., <code>APVN2012</code>), shared mode.</li> <li><code>FILE NAME-AP765S,LABEL-?9?AP765S</code>: Sorted input file <code>?9?AP765S</code> from the previous step.</li> <li><code>FILE NAME-AP766,LABEL-?9?AP766,RECORDS-1000,EXTEND-500</code>: Output file <code>?9?AP766</code>, with an initial capacity of 1,000 records, extendable by 500.</li> <li><code>FILE NAME-PA1099X,LABEL-?9?PA1099X,DISP-SHR</code>: Additional file <code>?9?PA1099X</code>, likely a cross-reference or configuration file, opened in shared mode.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP766</code>, which processes the sorted vendor data and produces the output file <code>?9?AP766</code>.</li> <li> <p>Purpose: This step likely aggregates or transforms the sorted data into a format suitable for printing 1099 forms.</p> </li> <li> <p>Print 1099 Forms:</p> </li> <li><code>LOAD AP765</code>: Loads the program <code>AP765</code> (likely an RPG program for printing).</li> <li>File Used:<ul> <li><code>FILE NAME-AP766,LABEL-?9?AP766,DISP-SHR</code>: Input file <code>?9?AP766</code>, the processed data from the previous step, shared mode.</li> </ul> </li> <li>Printer Configuration:<ul> <li><code>OVRPRTF FILE(AP1099) FORMTYPE(1099) CPI(10) LPI(6)</code>: Overrides printer file <code>AP1099</code> to use form type <code>1099</code>, with 10 characters per inch (<code>CPI</code>) and 6 lines per inch (<code>LPI</code>).</li> <li>The commented line <code>PRINTER NAME-AP1099,FORMSNO-1099,ALIGN-YES,LPI-6,CPI-10</code> suggests similar printer settings, possibly for compatibility with older syntax.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP765</code>, which prints the 1099 forms using the data in <code>?9?AP766</code>.</li> <li> <p>Purpose: This step generates the physical or electronic 1099 forms for vendors.</p> </li> <li> <p>Cleanup Temporary File:</p> </li> <li><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: After processing, checks if the temporary file <code>?9?AP766</code> exists and deletes it to clean up.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input File Validation:</li> <li>The input file <code>?13?</code> (e.g., <code>APVN2012</code>) must exist and contain vendor data from the period-end process (<code>AP300</code>).</li> <li> <p>The file is a snapshot of <code>GAPVEND</code> before monthly and yearly totals are cleared.</p> </li> <li> <p>Data Sorting:</p> </li> <li>Vendor records are sorted by:<ul> <li>1099 type (position 264, e.g., <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> <li>Vendor code (positions 4-8).</li> <li>Company code (positions 2-3).</li> </ul> </li> <li> <p>Only records matching specific 1099 types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>) or the value in <code>?L'110,1'?</code> (e.g., <code>M</code> or <code>N</code>) are included.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files <code>?9?AP765S</code> and <code>?9?AP766</code> are created during processing and deleted afterward to avoid conflicts in subsequent runs.</li> <li><code>?9?AP765S</code> is a sorted version of the input file.</li> <li> <p><code>?9?AP766</code> contains processed data ready for printing.</p> </li> <li> <p>File Retention:</p> </li> <li> <p>The sorted file <code>?9?AP765S</code> is retained as a job file (<code>RETAIN-J</code>), ensuring it persists for the duration of the job.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The 1099 forms are printed with specific formatting (10 CPI, 6 LPI) on form type <code>1099</code>, ensuring compliance with IRS requirements.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li>The <code>GSY2K</code> routine ensures dates are handled correctly, particularly for the year specified in <code>?10?</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>Input File:</li> <li> <p><code>?13?</code> (e.g., <code>APVN2012</code>): The vendor file created by <code>AP300</code>, a snapshot of <code>GAPVEND</code> containing vendor data before totals are cleared. Used in the sort and processing steps.</p> </li> <li> <p>Temporary Files:</p> </li> <li><code>?9?AP765S</code> (e.g., <code>XXAP765S</code>): Sorted output file created by <code>#GSORT</code>, used as input for <code>AP766</code>.</li> <li> <p><code>?9?AP766</code> (e.g., <code>XXAP766</code>): Processed output file created by <code>AP766</code>, used as input for <code>AP765</code> to print 1099 forms.</p> </li> <li> <p>Cross-Reference File:</p> </li> <li> <p><code>?9?PA1099X</code> (e.g., <code>XXPA1099X</code>): Likely a configuration or cross-reference file used by <code>AP766</code> for 1099 processing, opened in shared mode.</p> </li> <li> <p>Printer File:</p> </li> <li><code>AP1099</code>: The printer file used by <code>AP765</code> to output 1099 forms, configured with specific formatting (form type <code>1099</code>, 10 CPI, 6 LPI).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>#GSORT:</li> <li> <p>The system sort utility, used to sort the input file <code>?13?</code> into <code>?9?AP765S</code> based on 1099 type, vendor, and company.</p> </li> <li> <p>AP766:</p> </li> <li> <p>Likely an RPG program that processes the sorted file <code>?9?AP765S</code> and the original vendor file <code>?13?</code>, producing the processed file <code>?9?AP766</code>. It also uses the cross-reference file <code>?9?PA1099X</code>.</p> </li> <li> <p>AP765:</p> </li> <li> <p>Likely an RPG program that reads the processed file <code>?9?AP766</code> and prints 1099 forms to the printer file <code>AP1099</code>.</p> </li> <li> <p>AP300 (Referenced):</p> </li> <li>Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (<code>?13?</code>). Not called directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#outputs","title":"Outputs","text":"<ol> <li>Sorted File:</li> <li> <p><code>?9?AP765S</code>: A temporary file containing the sorted vendor data, created by <code>#GSORT</code>.</p> </li> <li> <p>Processed File:</p> </li> <li> <p><code>?9?AP766</code>: A temporary file containing processed data ready for printing, created by <code>AP766</code>.</p> </li> <li> <p>Printed 1099 Forms:</p> </li> <li>Output to the printer file <code>AP1099</code>, formatted as 1099 forms (form type <code>1099</code>, 10 CPI, 6 LPI). These are the final vendor 1099 forms for the specified year.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#summary","title":"Summary","text":"<ul> <li>Purpose: The OCL program <code>AP765.ocl36.txt</code> orchestrates the processing of vendor 1099 forms by sorting vendor data, processing it, and printing the forms for a specified year.</li> <li>Process:</li> <li>Deletes any existing temporary file (<code>?9?AP766</code>).</li> <li>Sorts the input vendor file (<code>?13?</code>, e.g., <code>APVN2012</code>) into <code>?9?AP765S</code> using <code>#GSORT</code>.</li> <li>Processes the sorted data using <code>AP766</code>, producing <code>?9?AP766</code>.</li> <li>Prints 1099 forms using <code>AP765</code> and the printer file <code>AP1099</code>.</li> <li>Cleans up by deleting <code>?9?AP766</code>.</li> <li>Business Rules:</li> <li>Ensures valid input file and 1099 types.</li> <li>Sorts data by 1099 type, vendor, and company.</li> <li>Manages temporary files and printer formatting.</li> <li>Ensures Year 2000 compliance.</li> <li>Files Used:</li> <li>Input: <code>?13?</code> (<code>APVNYYYY</code>), <code>?9?PA1099X</code>.</li> <li>Temporary: <code>?9?AP765S</code>, <code>?9?AP766</code>.</li> <li>Output: <code>AP1099</code> (printer file).</li> <li>External Programs: <code>#GSORT</code>, <code>AP766</code>, <code>AP765</code>.</li> </ul> <p>This program is a critical component of the 1099 processing workflow, integrating sorting, data transformation, and printing to produce IRS-compliant vendor forms.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/","title":"AP765 RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765rpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765.rpg36.txt)","text":"<p>The RPG III program <code>AP765.rpg36.txt</code> is designed to print vendor 1099 forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765.ocl36.txt</code> and uses data from the preprocessed file <code>AP766</code> to generate 1099 forms, printing two forms per page on laser paper. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765</code>) and parameter <code>P016</code>, likely a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0008</code>: <code>AP766</code> (Input, Primary, 300 bytes): The preprocessed work file (e.g., <code>?9?AP766</code> from the OCL), containing consolidated vendor data.</li> <li>Line <code>0009</code>: <code>AP1099</code> (Output, 80 bytes, Printer): The printer file used to output 1099 forms, configured in the OCL with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ul> </li> <li>Line Counter Specification (L):<ul> <li>Line <code>0011</code>: Defines line counter settings for <code>AP1099</code> with 66 lines per form (<code>FL 66</code>) and 66 lines of overflow (<code>OL 66</code>), ensuring proper pagination.</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0012-0025</code>: Define fields in the <code>AP766</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VN1099</code> (1 char, position 2): A/P 1099 code (e.g., <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> <li><code>VNVEND</code> (5 chars, positions 3-7): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 8-37): Vendor name.</li> <li><code>VNADD1-4</code> (30 chars each, positions 38-157): Address lines 1-4.</li> <li><code>L1AMT1</code> (9,2 numeric, positions 158-166): First box amount.</li> <li><code>L1AMT2</code> (9,2 numeric, positions 167-175): Second box amount.</li> <li><code>BOX1</code> (2 numeric, positions 176-177): First box number.</li> <li><code>BOX2</code> (2 numeric, positions 178-179): Second box number.</li> <li><code>VNID#</code> (11 chars, positions 180-190): 1099 ID number (e.g., Tax ID).</li> <li><code>VNPYN1</code> (40 chars, positions 191-230, added by <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 231-270, added by <code>JB01</code>): Payee name 2.</li> <li><code>VNNOVF</code> (1 char, position 271, added by <code>JB02</code>): Name overflow indicator.</li> <li><code>STATID</code> (8 chars, positions 272-279): State ID.</li> <li><code>STATED</code> (9,2 numeric, positions 280-288): State amount.</li> <li>Lines <code>0026-0032</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Company Tax ID.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Threshold amount for printing.</li> <li><code>CURLST</code> (1 char, position 109): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>CNYEAR</code> (4 numeric, positions 201-204): Current year.</li> <li><code>YEAR</code> (4 numeric, positions 203-204): Year (overlaps with <code>CNYEAR</code>, possibly a typo or legacy field).</li> </ul> </li> <li> <p>Initial Vendor Processing:</p> </li> <li>Vendor Number Check:<ul> <li>Lines <code>C*</code>: If <code>VNVEND</code> equals <code>9384</code>, set <code>YES</code> to <code>'YES'</code> (3 chars). This likely flags a specific vendor for special handling, though its purpose is unclear.</li> </ul> </li> <li> <p>1099 Type Check:</p> <ul> <li>If <code>VN1099</code> is <code>M</code> (Miscellaneous), set indicator <code>33</code> on.</li> <li>If <code>VN1099</code> is <code>N</code> (Non-Employee Compensation), set indicator <code>34</code> on.</li> <li>These indicators control which box amounts are printed (e.g., <code>AMT11</code> for 1099-MISC or 1099-NEC).</li> </ul> </li> <li> <p>Amount Validation:</p> </li> <li>Line <code>0034</code>: Add <code>L1AMT1</code> and <code>L1AMT2</code> to compute <code>TOTAMT</code> (9,2 numeric), the total vendor payment.</li> <li>Line <code>0035</code>: Compare <code>TOTAMT</code> with <code>ENTAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>30</code> if <code>TOTAMT</code> is greater than or equal to <code>ENTAMT</code>.</li> <li> <p>Line <code>0036</code>: If indicator <code>30</code> is off (<code>N30</code>), skip to the <code>END</code> tag, bypassing the vendor (i.e., only vendors meeting the threshold are printed).</p> </li> <li> <p>Form Counter Logic:</p> </li> <li> <p>Lines <code>C*</code>: Manage the <code>COUNTP</code> (2 numeric) field to track whether the first (<code>31</code>) or second (<code>32</code>) form on the page is being processed:</p> <ul> <li>If <code>COUNTP</code> is zero, set it to <code>1</code>, set indicator <code>31</code> on (first form), and set <code>32</code> off.</li> <li>Otherwise, increment <code>COUNTP</code>, set <code>31</code> off, and set <code>32</code> on (second form).</li> <li>This supports printing two forms per page (revision <code>MG03</code>).</li> </ul> </li> <li> <p>Clear Work Fields:</p> </li> <li> <p>Lines <code>JB01</code>: For each form (indicators <code>31</code> or <code>32</code>):</p> <ul> <li>Clear fields for payee names (<code>PYN11</code>, <code>PYN12</code>, <code>PYN21</code>, <code>PYN22</code>), tax IDs (<code>VNID#1</code>, <code>VNID#2</code>), state amounts (<code>STATE1</code>, <code>STATE2</code>), state IDs (<code>STATI1</code>, <code>STATI2</code>), vendor numbers (<code>VNVEN1</code>, <code>VNVEN2</code>), addresses (<code>ADDR11</code>, <code>ADDR12</code>, <code>ADDR21</code>, <code>ADDR22</code>, <code>CTSTZ1</code>, <code>CTSTZ2</code>), and amounts (<code>AMT11</code>, <code>AMT12</code>, <code>AMT31</code>, <code>AMT32</code>, <code>AMT61</code>, <code>AMT62</code>, <code>AMT71</code>, <code>AMT72</code>).</li> <li>Reset indicators <code>71</code>, <code>72</code>, <code>35</code>, <code>36</code> to control name and address printing.</li> </ul> </li> <li> <p>Payee and Address Processing (First Form, Indicator <code>31</code>):</p> </li> <li>Lines <code>JB01</code>: Determine whether to use vendor name or payee names:<ul> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> for <code>PYN11</code> (vendor name).</li> <li>If <code>VNNOVF</code> is <code>Y</code> (name overflow, revision <code>JB02</code>), set indicators <code>35</code> and <code>71</code> on.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> for <code>PYN11</code> and set <code>71</code> on. If <code>VNPYN2</code> is not blank, use <code>VNPYN2</code> for <code>PYN21</code> and set <code>71</code> on.</li> </ul> </li> <li>Lines <code>0045-0069</code>: Assign address fields based on non-blank values:<ul> <li>If <code>VNADD4</code> is not blank, set <code>CTSTZ1</code> (city/state/ZIP) to <code>VNADD4</code>, <code>VNAD21</code> to <code>VNADD3</code>, <code>VNAD11</code> to <code>VNADD2</code>, and <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD3</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD3</code>, <code>VNAD21</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD2</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD1</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD1</code>.</li> <li>If none are non-blank, set indicator <code>73</code> on (likely to skip address printing).</li> <li>Jump to <code>CONT1</code> tag after address assignment.</li> </ul> </li> <li> <p>Lines <code>0045-0069</code> (non-overflow case, <code>N35</code>): Similar address assignment without overflow logic.</p> </li> <li> <p>Payee and Address Processing (Second Form, Indicator <code>32</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, with indicators <code>36</code> and <code>72</code>, jumping to <code>CONT2</code> tag.</p> </li> <li> <p>Address Processing (Non-Overflow, <code>CONT3</code> and <code>CONT4</code>):</p> </li> <li> <p>Lines <code>0045-0069</code>: For both forms (<code>31N35</code> and <code>32N36</code>), assign address fields similarly to ensure proper formatting when no name overflow occurs.</p> </li> <li> <p>Amount Assignment for Printing:</p> </li> <li> <p>Lines <code>0071-0094</code>: Assign amounts to specific 1099 box fields based on <code>BOX1</code> and <code>BOX2</code>:</p> <ul> <li>For <code>BOX1</code> (indicators <code>31</code> and <code>32</code>):</li> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code> to <code>L1AMT1</code> (e.g., box 1 for 1099-MISC).</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code> to <code>L1AMT1</code> (e.g., box 3 for 1099-MISC).</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code> to <code>L1AMT1</code> (e.g., box 6 for 1099-MISC).</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code> to <code>L1AMT1</code> (e.g., box 7 for 1099-NEC).</li> <li>For <code>BOX2</code> (indicators <code>31</code> and <code>32</code>):</li> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code> to <code>L1AMT2</code>.</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code> to <code>L1AMT2</code>.</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code> to <code>L1AMT2</code>.</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code> to <code>L1AMT2</code>.</li> </ul> </li> <li> <p>Accumulate Totals:</p> <ul> <li>Lines <code>0095-0098</code>: For each form:</li> <li>Increment <code>COUNT</code> (6 numeric, total vendors printed).</li> <li>Add <code>AMT11</code>/<code>AMT12</code> to <code>LRAMT1</code> (10,2 numeric, total for box 1).</li> <li>Add <code>AMT31</code>/<code>AMT32</code> to <code>LRAMT3</code> (total for box 3).</li> <li>Add <code>AMT61</code>/<code>AMT62</code> to <code>LRAMT6</code> (total for box 6).</li> <li>Add <code>AMT71</code>/<code>AMT72</code> to <code>LRAMT7</code> (total for box 7).</li> </ul> </li> <li> <p>Page Break Logic:</p> <ul> <li>Lines <code>C*</code>: If <code>COUNTP</code> equals <code>2</code> (both forms on the page filled):</li> <li>Reset <code>COUNTP</code> to zero, set <code>31</code> on, and execute an <code>EXCPT</code> to print the page.</li> <li>At end of file (<code>LR</code> on):</li> <li>If data remains for the first form (<code>31</code> on, not <code>32</code>), print a final page with one vendor.</li> <li>Compute total amount <code>LRAMT</code> (11,2 numeric) by summing <code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>.</li> <li>Set indicator <code>30</code> and execute <code>EXCPT</code> to print totals.</li> </ul> </li> <li> <p>Output to Printer:</p> <ul> <li>Lines <code>0107-0140</code>: Define the output format for <code>AP1099</code>:</li> <li>First Form (Indicator <code>31</code>):<ul> <li>Lines 5-23: Print company headers (<code>HEAD1-3</code>), year (<code>CNYEAR</code>), tax IDs (<code>ID#</code>, <code>VNID#1</code>), payee names (<code>PYN11</code>, <code>PYN21</code>), addresses (<code>VNAD11</code>, <code>VNAD21</code>, <code>CTSTZ1</code>), and amounts (<code>AMT11</code>, <code>AMT31</code>, <code>AMT61</code>, <code>AMT71</code>).</li> <li>Conditional on <code>33</code> (1099-MISC) or <code>34</code> (1099-NEC) for amount fields.</li> </ul> </li> <li>Second Form (Indicator <code>32</code>):<ul> <li>Similar fields for the second form, using <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, <code>AMT12</code>, <code>AMT32</code>, <code>AMT62</code>, <code>AMT72</code>, <code>VNID#2</code>.</li> </ul> </li> <li>Totals (LR):<ul> <li>Print <code>HEAD1-3</code>, <code>ID#</code>, totals (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT</code>), and vendor count (<code>COUNT</code>).</li> </ul> </li> <li>Vendor Number (Revision <code>JB02</code>):<ul> <li>Print <code>VNVEN1</code>/<code>VNVEN2</code> as the account number for each form.</li> </ul> </li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Threshold Check:</li> <li> <p>Only vendors with a total amount (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) greater than or equal to <code>ENTAMT</code> are printed.</p> </li> <li> <p>Two Forms per Page:</p> </li> <li>The program prints two 1099 forms per page on laser paper (revision <code>MG03</code>), managed by <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>.</li> <li> <p>If only one vendor remains at the end of the file, a final page with one form is printed.</p> </li> <li> <p>Payee Name Handling:</p> </li> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> (vendor name). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code> (payee names, revision <code>JB01</code>).</li> <li> <p>If <code>VNNOVF</code> is <code>Y</code>, use address fields to continue the name on the second line (revision <code>JB02</code>).</p> </li> <li> <p>Address Formatting:</p> </li> <li> <p>Use the highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) for city/state/ZIP (<code>CTSTZ1</code>/<code>CTSTZ2</code>) and shift other fields accordingly to ensure proper formatting.</p> </li> <li> <p>Box Amount Assignment:</p> </li> <li> <p>Amounts are assigned to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code> values, supporting both 1099-MISC and 1099-NEC forms (revision <code>MG04</code>).</p> </li> <li> <p>1099 Type:</p> </li> <li> <p>Indicator <code>33</code> for 1099-MISC (<code>VN1099 = 'M'</code>) and <code>34</code> for 1099-NEC (<code>VN1099 = 'N'</code>) control amount field printing.</p> </li> <li> <p>Totals:</p> </li> <li> <p>Accumulate totals for each box (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>) and vendor count (<code>COUNT</code>) for the final summary.</p> </li> <li> <p>Vendor Number as Account Number:</p> </li> <li>Print <code>VNVEND</code> as the account number (revision <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AP766:</li> <li>Input file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains preprocessed vendor data from <code>AP766.rpg36.txt</code>, including vendor details, amounts, box numbers, and payee names.</p> </li> <li> <p>AP1099:</p> </li> <li>Output printer file (80 bytes, labeled <code>AP1099</code> in the OCL).</li> <li> <p>Configured to print 1099 forms with form type <code>1099</code>, 10 CPI, 6 LPI, two forms per page.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL (<code>?9?PA1099X</code>), likely a cross-reference file, but not used directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP765</code>. It is invoked by <code>AP765.ocl36.txt</code> and processes data from <code>AP766.rpg36.txt</code>, with input prepared by <code>#GSORT</code> and <code>AP766</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 Printer File:</li> <li>Prints 1099 forms (two per page, revision <code>MG03</code>) with:<ul> <li>Company headers (<code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>).</li> <li>Year (<code>CNYEAR</code>).</li> <li>Company Tax ID (<code>ID#</code>) and vendor Tax ID (<code>VNID#1</code>/<code>VNID#2</code>).</li> <li>Payee names (<code>PYN11</code>/<code>PYN12</code>, <code>PYN21</code>/<code>PYN22</code>) or vendor name (<code>VNNAME</code>).</li> <li>Addresses (<code>VNAD11</code>/<code>VNAD12</code>, <code>VNAD21</code>/<code>VNAD22</code>, <code>CTSTZ1</code>/<code>CTSTZ2</code>).</li> <li>Amounts for boxes 1, 3, 6, or 7 (<code>AMT11</code>/<code>AMT12</code>, <code>AMT31</code>/<code>AMT32</code>, <code>AMT61</code>/<code>AMT62</code>, <code>AMT71</code>/<code>AMT72</code>).</li> <li>Vendor number as account number (<code>VNVEN1</code>/<code>VNVEN2</code>, revision <code>JB02</code>).</li> </ul> </li> <li>Final page includes totals (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT</code>) and vendor count (<code>COUNT</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765</code> prints 1099 forms (MISC and NEC) using preprocessed vendor data, formatting two forms per page on laser paper.</li> <li>Process:</li> <li>Reads <code>AP766</code> and validates vendor amounts against a threshold (<code>ENTAMT</code>).</li> <li>Manages two forms per page with <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>.</li> <li>Assigns payee names, addresses, and amounts to appropriate fields.</li> <li>Prints forms with company and vendor details, amounts, and totals.</li> <li>Business Rules:</li> <li>Prints only vendors meeting the amount threshold.</li> <li>Supports two forms per page and different 1099 types (MISC, NEC).</li> <li>Handles payee names, name overflow, and vendor number as account number.</li> <li>Accumulates totals for reporting.</li> <li>Files Used:</li> <li>Input: <code>AP766</code> (preprocessed vendor data).</li> <li>Output: <code>AP1099</code> (printer file for 1099 forms).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code>, <code>AP766</code>, and <code>AP765P</code>.</li> </ul> <p>This program finalizes the 1099 form printing process, producing IRS-compliant output for vendors.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/","title":"AP765N OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#explanation-of-the-process-steps-and-business-rules-in-the-ocl-program-ap765nocl36txt","title":"Explanation of the Process Steps and Business Rules in the OCL Program (AP765N.ocl36.txt)","text":"<p>The OCL (Operation Control Language) program <code>AP765N.ocl36.txt</code> is an alternative path for processing vendor 1099 forms on an IBM System/36 or AS/400 system, called conditionally from <code>AP765P.ocl36.txt</code> when <code>?L'110,1'?</code> is <code>N</code> instead of <code>M</code>. It is nearly identical to <code>AP765.ocl36.txt</code> but invokes <code>AP765N</code> instead of <code>AP765</code> for printing the 1099 forms, suggesting a variation in the printing process (likely for 1099-NEC forms instead of 1099-MISC). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Program Initialization:</li> <li>GSY2K: Invokes a system routine to ensure Year 2000 compliance for date handling.</li> <li>Parameters:<ul> <li><code>?10?</code>: Specifies the four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: Specifies the 1099 file name (e.g., <code>APVN2012</code>), containing vendor data.</li> </ul> </li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and is a snapshot of the <code>GAPVEND</code> file before monthly and yearly totals are cleared.</p> </li> <li> <p>Delete Temporary File (if exists):</p> </li> <li> <p><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: Checks if the temporary file <code>?9?AP766</code> (e.g., <code>XXAP766</code>, where <code>?9?</code> is a prefix) exists. If it does, the file is deleted to ensure a clean start for processing.</p> </li> <li> <p>Sort Input File:</p> </li> <li><code>LOAD #GSORT</code>: Loads the system sort utility (<code>#GSORT</code>).</li> <li>Input File:<ul> <li><code>FILE NAME-INPUT,LABEL-?13?,DISP-SHR</code>: Specifies the input file as <code>?13?</code> (e.g., <code>APVN2012</code>), opened in shared mode (<code>DISP-SHR</code>).</li> </ul> </li> <li>Output File:<ul> <li><code>FILE NAME-OUTPUT,LABEL-?9?AP765S,RECORDS-999000,EXTEND-999000,RETAIN-J</code>: Creates a sorted output file named <code>?9?AP765S</code> (e.g., <code>XXAP765S</code>), with a capacity of 999,000 records, extendable by another 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 22A 3X N</code>: Defines an ascending sort (<code>A</code>) on a 22-character field starting at position 3, with no sequence checking (<code>N</code>).</li> <li><code>O C 264EQC</code>: Includes records where the field at position 264 equals a constant value (likely a flag or type indicator).</li> <li><code>I*</code>: Includes all records.</li> <li><code>I C 1NECD</code>: Includes records where position 1 equals <code>N</code>, <code>E</code>, <code>C</code>, or <code>D</code> (likely 1099 types: Non-Employee Compensation, etc.).</li> <li><code>IAC 264 264EQC?L'110,1'?</code>: Conditionally includes records based on the value of <code>?L'110,1'?</code> (in this case, <code>N</code> for 1099-NEC).</li> <li>Sort Fields:</li> <li><code>FNC 264 264</code>: Sorts on the 1099 type field (position 264, 1 character).</li> <li><code>FNC 4 8</code>: Sorts on the vendor field (positions 4-8, 5 characters).</li> <li><code>FNC 2 3</code>: Sorts on the company field (positions 2-3, 2 characters).</li> </ul> </li> <li><code>RUN</code>: Executes the sort, producing the sorted file <code>?9?AP765S</code>.</li> <li> <p>Purpose: Sorts vendor data by 1099 type (likely filtered for <code>N</code>), vendor, and company to organize records for processing.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li><code>LOAD AP766</code>: Loads the program <code>AP766</code> (an RPG program for data processing, as described in <code>AP766.rpg36.txt</code>).</li> <li>Files Used:<ul> <li><code>FILE NAME-APVEND,LABEL-?13?,DISP-SHR</code>: Input file <code>?13?</code> (e.g., <code>APVN2012</code>), shared mode.</li> <li><code>FILE NAME-AP765S,LABEL-?9?AP765S</code>: Sorted input file <code>?9?AP765S</code> from the sort step.</li> <li><code>FILE NAME-AP766,LABEL-?9?AP766,RECORDS-1000,EXTEND-500</code>: Output file <code>?9?AP766</code>, with an initial capacity of 1,000 records, extendable by 500.</li> <li><code>FILE NAME-PA1099X,LABEL-?9?PA1099X,DISP-SHR</code>: Cross-reference or configuration file <code>?9?PA1099X</code>, opened in shared mode.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP766</code>, which processes the sorted vendor data and produces the output file <code>?9?AP766</code>.</li> <li> <p>Purpose: Consolidates vendor records (one per vendor) and prepares data for printing, likely focusing on 1099-NEC forms due to <code>?L'110,1'?</code> being <code>N</code>.</p> </li> <li> <p>Print 1099 Forms:</p> </li> <li><code>LOAD AP765N</code>: Loads the program <code>AP765N</code> (an RPG program for printing, distinct from <code>AP765</code>).</li> <li>File Used:<ul> <li><code>FILE NAME-AP766,LABEL-?9?AP766,DISP-SHR</code>: Input file <code>?9?AP766</code>, the processed data from <code>AP766</code>, shared mode.</li> </ul> </li> <li>Printer Configuration:<ul> <li><code>OVRPRTF FILE(AP1099) FORMTYPE(1099) CPI(10) LPI(6)</code>: Overrides printer file <code>AP1099</code> to use form type <code>1099</code>, with 10 characters per inch (<code>CPI</code>) and 6 lines per inch (<code>LPI</code>).</li> <li>The commented line <code>PRINTER NAME-AP1099,FORMSNO-1099,ALIGN-YES,LPI-6,CPI-10</code> suggests similar settings for older syntax compatibility.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP765N</code>, which prints the 1099 forms (likely 1099-NEC) using the data in <code>?9?AP766</code>.</li> <li> <p>Purpose: Generates the final 1099 forms, tailored for the <code>N</code> type (Non-Employee Compensation).</p> </li> <li> <p>Cleanup Temporary File:</p> </li> <li><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: After processing, checks if the temporary file <code>?9?AP766</code> exists and deletes it to clean up.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input File Validation:</li> <li>The input file <code>?13?</code> (e.g., <code>APVN2012</code>) must exist and contain vendor data from the period-end process (<code>AP300</code>).</li> <li> <p>It is a snapshot of <code>GAPVEND</code> before monthly and yearly totals are cleared.</p> </li> <li> <p>Data Sorting:</p> </li> <li>Vendor records are sorted by:<ul> <li>1099 type (position 264, likely <code>N</code> for Non-Employee Compensation due to <code>?L'110,1'?</code>).</li> <li>Vendor code (positions 4-8).</li> <li>Company code (positions 2-3).</li> </ul> </li> <li> <p>Only records matching specific 1099 types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>) or the value in <code>?L'110,1'?</code> (<code>N</code>) are included.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files <code>?9?AP765S</code> and <code>?9?AP766</code> are created during processing and deleted afterward to avoid conflicts in subsequent runs.</li> <li><code>?9?AP765S</code> is a sorted version of the input file.</li> <li> <p><code>?9?AP766</code> contains processed data ready for printing.</p> </li> <li> <p>File Retention:</p> </li> <li> <p>The sorted file <code>?9?AP765S</code> is retained as a job file (<code>RETAIN-J</code>), ensuring it persists for the duration of the job.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The 1099 forms are printed with specific formatting (10 CPI, 6 LPI) on form type <code>1099</code>, ensuring IRS compliance, likely for 1099-NEC forms.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li> <p>The <code>GSY2K</code> routine ensures proper date handling for the year specified in <code>?10?</code>.</p> </li> <li> <p>Conditional Path:</p> </li> <li>This program is called when <code>?L'110,1'?</code> is <code>N</code> in <code>AP765P.ocl36.txt</code>, indicating a focus on 1099-NEC forms rather than 1099-MISC (handled by <code>AP765.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>Input File:</li> <li> <p><code>?13?</code> (e.g., <code>APVN2012</code>): The vendor file created by <code>AP300</code>, a snapshot of <code>GAPVEND</code> containing vendor data. Used in the sort and processing steps.</p> </li> <li> <p>Temporary Files:</p> </li> <li><code>?9?AP765S</code> (e.g., <code>XXAP765S</code>): Sorted output file created by <code>#GSORT</code>, used as input for <code>AP766</code>.</li> <li> <p><code>?9?AP766</code> (e.g., <code>XXAP766</code>): Processed output file created by <code>AP766</code>, used as input for <code>AP765N</code> to print 1099 forms.</p> </li> <li> <p>Cross-Reference File:</p> </li> <li> <p><code>?9?PA1099X</code> (e.g., <code>XXPA1099X</code>): A configuration or cross-reference file used by <code>AP766</code>, opened in shared mode.</p> </li> <li> <p>Printer File:</p> </li> <li><code>AP1099</code>: The printer file used by <code>AP765N</code> to output 1099 forms, configured with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>#GSORT:</li> <li> <p>The system sort utility, used to sort the input file <code>?13?</code> into <code>?9?AP765S</code> based on 1099 type, vendor, and company.</p> </li> <li> <p>AP766:</p> </li> <li> <p>An RPG program (<code>AP766.rpg36.txt</code>) that processes the sorted file <code>?9?AP765S</code> and the vendor file <code>?13?</code>, producing the processed file <code>?9?AP766</code>. It uses the cross-reference file <code>?9?PA1099X</code>.</p> </li> <li> <p>AP765N:</p> </li> <li> <p>An RPG program (not provided, but referenced in the OCL) that reads the processed file <code>?9?AP766</code> and prints 1099 forms (likely 1099-NEC) to the printer file <code>AP1099</code>.</p> </li> <li> <p>AP300 (Referenced):</p> </li> <li>Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (<code>?13?</code>). Not called directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#outputs","title":"Outputs","text":"<ol> <li>Sorted File:</li> <li> <p><code>?9?AP765S</code>: A temporary file containing sorted vendor data, created by <code>#GSORT</code>.</p> </li> <li> <p>Processed File:</p> </li> <li> <p><code>?9?AP766</code>: A temporary file containing processed data ready for printing, created by <code>AP766</code>.</p> </li> <li> <p>Printed 1099 Forms:</p> </li> <li>Output to the printer file <code>AP1099</code>, formatted as 1099 forms (likely 1099-NEC due to <code>?L'110,1'?</code> being <code>N</code>), with 10 CPI, 6 LPI.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#comparison-with-ap765ocl36txt","title":"Comparison with AP765.ocl36.txt","text":"<ul> <li>Similarity: <code>AP765N.ocl36.txt</code> is nearly identical to <code>AP765.ocl36.txt</code>, with the same file handling, sorting logic, and cleanup steps. Both use <code>#GSORT</code> and <code>AP766</code> for preprocessing and produce output via <code>AP1099</code>.</li> <li>Difference: The key difference is the printing program:</li> <li><code>AP765.ocl36.txt</code> calls <code>AP765</code> (likely for 1099-MISC forms, as <code>?L'110,1'?</code> is <code>M</code>).</li> <li><code>AP765N.ocl36.txt</code> calls <code>AP765N</code> (likely for 1099-NEC forms, as <code>?L'110,1'?</code> is <code>N</code>).</li> <li>This suggests <code>AP765N</code> may have specific formatting or logic tailored for 1099-NEC, such as different box assignments or layout.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#summary","title":"Summary","text":"<ul> <li>Purpose: The OCL program <code>AP765N.ocl36.txt</code> processes vendor 1099 forms (likely 1099-NEC) by sorting vendor data, preprocessing it, and printing the forms for a specified year.</li> <li>Process:</li> <li>Deletes existing temporary file <code>?9?AP766</code>.</li> <li>Sorts the vendor file <code>?13?</code> (e.g., <code>APVN2012</code>) into <code>?9?AP765S</code> using <code>#GSORT</code>.</li> <li>Processes sorted data with <code>AP766</code>, producing <code>?9?AP766</code>.</li> <li>Prints 1099 forms (likely 1099-NEC) using <code>AP765N</code> and printer file <code>AP1099</code>.</li> <li>Cleans up by deleting <code>?9?AP766</code>.</li> <li>Business Rules:</li> <li>Validates input file and focuses on 1099 type <code>N</code> (Non-Employee Compensation).</li> <li>Sorts data by 1099 type, vendor, and company.</li> <li>Manages temporary files and ensures printer formatting compliance.</li> <li>Maintains Year 2000 compliance.</li> <li>Files Used:</li> <li>Input: <code>?13?</code> (<code>APVNYYYY</code>), <code>?9?PA1099X</code>.</li> <li>Temporary: <code>?9?AP765S</code>, <code>?9?AP766</code>.</li> <li>Output: <code>AP1099</code> (printer file).</li> <li>External Programs: <code>#GSORT</code>, <code>AP766</code>, <code>AP765N</code>.</li> </ul> <p>This program provides an alternative path for 1099-NEC form processing, differing from <code>AP765.ocl36.txt</code> primarily in the printing step, ensuring flexibility for different 1099 form types. Since <code>AP765N.rpg36.txt</code> was not provided, I can infer its role based on the context, but a detailed analysis of its logic would require the source code. If you have <code>AP765N.rpg36.txt</code>, please provide it for a complete breakdown.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/","title":"AP765N RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765nrpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765N.rpg36.txt)","text":"<p>The RPG III program <code>AP765N.rpg36.txt</code> is designed to print vendor 1099-NEC (Non-Employee Compensation) forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765N.ocl36.txt</code> when <code>?L'110,1'?</code> is set to <code>N</code> in the main OCL (<code>AP765P.ocl36.txt</code>), indicating a focus on 1099-NEC forms. This program is similar to <code>AP765.rpg36.txt</code> (used for 1099-MISC forms) but has modifications to handle three forms per page instead of two, reflecting differences in form layout or printing requirements for 1099-NEC. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765N</code>) and parameter <code>P016</code>, likely a control parameter passed from the OCL.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0008</code>: <code>AP766</code> (Input, Primary, 300 bytes): The preprocessed work file (e.g., <code>?9?AP766</code> from the OCL), containing consolidated vendor data from <code>AP766.rpg36.txt</code>.</li> <li>Line <code>0009</code>: <code>AP1099</code> (Output, 80 bytes, Printer): The printer file used to output 1099-NEC forms, configured in the OCL with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ul> </li> <li>Line Counter Specification (L):<ul> <li>Line <code>0011</code>: Defines line counter settings for <code>AP1099</code> with 66 lines per form (<code>FL 66</code>) and 66 lines of overflow (<code>OL 66</code>), ensuring proper pagination.</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0012-0025</code>: Define fields in the <code>AP766</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VN1099</code> (1 char, position 2): A/P 1099 code (e.g., <code>N</code> for Non-Employee Compensation).</li> <li><code>VNVEND</code> (5 chars, positions 3-7): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 8-37): Vendor name.</li> <li><code>VNADD1-4</code> (30 chars each, positions 38-157): Address lines 1-4.</li> <li><code>L1AMT1</code> (9,2 numeric, positions 158-166): First box amount.</li> <li><code>L1AMT2</code> (9,2 numeric, positions 167-175): Second box amount.</li> <li><code>BOX1</code> (2 numeric, positions 176-177): First box number.</li> <li><code>BOX2</code> (2 numeric, positions 178-179): Second box number.</li> <li><code>VNID#</code> (11 chars, positions 180-190): 1099 ID number (e.g., Tax ID).</li> <li><code>VNPYN1</code> (40 chars, positions 191-230, added by <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 231-270, added by <code>JB01</code>): Payee name 2.</li> <li><code>VNNOVF</code> (1 char, position 271, added by <code>JB02</code>): Name overflow indicator.</li> <li><code>STATID</code> (8 chars, positions 272-279): State ID.</li> <li><code>STATED</code> (9,2 numeric, positions 280-288): State amount.</li> <li>Lines <code>0026-0032</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Company Tax ID.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Threshold amount for printing.</li> <li><code>CURLST</code> (1 char, position 109): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>CNYEAR</code> (4 numeric, positions 201-204): Current year.</li> <li><code>YEAR</code> (4 numeric, positions 203-204): Year (overlaps with <code>CNYEAR</code>, possibly a typo or legacy field).</li> </ul> </li> <li> <p>Initial Vendor Processing:</p> </li> <li>Indicator Reset:<ul> <li>Line <code>C*</code>: Set indicator <code>33</code> off (disabling 1099-MISC logic, as this program is for 1099-NEC).</li> </ul> </li> <li>1099 Type Check:<ul> <li>Lines <code>C*</code>: If <code>VN1099</code> is <code>N</code>, set indicator <code>34</code> on (for 1099-NEC).</li> <li>The commented-out logic for <code>VN1099 = 'M'</code> (1099-MISC) indicates this program is exclusively for 1099-NEC.</li> </ul> </li> <li> <p>Vendor Number Check:</p> <ul> <li>Lines <code>C*</code>: If <code>VNVEND</code> equals <code>32800</code>, set <code>YES</code> to <code>'YES'</code> (3 chars). This likely flags a specific vendor for special handling, though its purpose is unclear (different from <code>9384</code> in <code>AP765</code>).</li> </ul> </li> <li> <p>Amount Validation:</p> </li> <li>Line <code>0034</code>: Add <code>L1AMT1</code> and <code>L1AMT2</code> to compute <code>TOTAMT</code> (9,2 numeric), the total vendor payment.</li> <li>Line <code>0035</code>: Compare <code>TOTAMT</code> with <code>ENTAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>30</code> if <code>TOTAMT</code> is greater than or equal to <code>ENTAMT</code>.</li> <li> <p>Line <code>0036</code>: If indicator <code>30</code> is off (<code>N30</code>), skip to the <code>END</code> tag, bypassing the vendor (i.e., only vendors meeting the threshold are printed).</p> </li> <li> <p>Form Counter Logic:</p> </li> <li> <p>Lines <code>C*</code>: Manage the <code>COUNTP</code> (2 numeric) field to track whether the first (<code>31</code>), second (<code>32</code>), or third (<code>40</code>) form on the page is being processed:</p> <ul> <li>If <code>COUNTP</code> is <code>2</code>, increment to <code>3</code>, set indicator <code>40</code> on (third form), set <code>32</code> off, and jump to <code>SKIP</code>.</li> <li>If <code>COUNTP</code> is zero, set it to <code>1</code>, set <code>31</code> on (first form), set <code>32</code> and <code>40</code> off.</li> <li>Otherwise, increment <code>COUNTP</code>, set <code>31</code> and <code>40</code> off, set <code>32</code> on (second form).</li> <li>This supports printing three forms per page, a key difference from <code>AP765</code> (which prints two forms per page, revision <code>MG03</code>).</li> </ul> </li> <li> <p>Clear Work Fields:</p> </li> <li> <p>Lines <code>JB01</code>: For each form (indicators <code>31</code>, <code>32</code>, <code>40</code>):</p> <ul> <li>Clear fields for payee names (<code>PYN11</code>, <code>PYN12</code>, <code>PYN13</code>, <code>PYN21</code>, <code>PYN22</code>, <code>PYN23</code>), tax IDs (<code>VNID#1</code>, <code>VNID#2</code>, <code>VNID#3</code>), state amounts (<code>STATE1</code>, <code>STATE2</code>, <code>STATE3</code>), state IDs (<code>STATI1</code>, <code>STATI2</code>, <code>STATI3</code>), vendor numbers (<code>VNVEN1</code>, <code>VNVEN2</code>, <code>VNVEN3</code>), addresses (<code>ADDR11</code>, <code>ADDR12</code>, <code>ADDR13</code>, <code>ADDR21</code>, <code>ADDR22</code>, <code>ADDR23</code>, <code>CTSTZ1</code>, <code>CTSTZ2</code>, <code>CTSTZ3</code>), and amounts (<code>AMT11</code>, <code>AMT12</code>, <code>AMT13</code>, <code>AMT31</code>, <code>AMT32</code>, <code>AMT33</code>, <code>AMT61</code>, <code>AMT62</code>, <code>AMT63</code>, <code>AMT71</code>, <code>AMT72</code>, <code>AMT73</code>).</li> <li>Reset indicators <code>71</code>, <code>72</code>, <code>73</code>, <code>35</code>, <code>36</code>, <code>37</code> to control name and address printing.</li> </ul> </li> <li> <p>Payee and Address Processing (First Form, Indicator <code>31</code>):</p> </li> <li>Lines <code>JB01</code>: Determine whether to use vendor name or payee names:<ul> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> for <code>PYN11</code> (vendor name).</li> <li>If <code>VNNOVF</code> is <code>Y</code> (name overflow, revision <code>JB02</code>), set indicators <code>35</code> and <code>71</code> on.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> for <code>PYN11</code> and set <code>71</code> on. If <code>VNPYN2</code> is not blank, use <code>VNPYN2</code> for <code>PYN21</code> and set <code>71</code> on.</li> </ul> </li> <li>Lines <code>0045-0069</code>: Assign address fields based on non-blank values:<ul> <li>If <code>VNADD4</code> is not blank, set <code>CTSTZ1</code> (city/state/ZIP) to <code>VNADD4</code>, <code>VNAD21</code> to <code>VNADD3</code>, <code>VNAD11</code> to <code>VNADD2</code>, and <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD3</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD3</code>, <code>VNAD21</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD2</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD1</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD1</code>.</li> <li>If none are non-blank, set indicator <code>73</code> on (likely to skip address printing).</li> <li>Jump to <code>CONT1</code> tag after address assignment.</li> </ul> </li> <li> <p>Lines <code>0045-0069</code> (non-overflow case, <code>N35</code>): Similar address assignment without overflow logic.</p> </li> <li> <p>Payee and Address Processing (Second Form, Indicator <code>32</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, with indicators <code>36</code> and <code>72</code>, jumping to <code>CONT2</code> tag.</p> </li> <li> <p>Payee and Address Processing (Third Form, Indicator <code>40</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN13</code>, <code>PYN23</code>, <code>VNAD13</code>, <code>CTSTZ3</code>, with indicators <code>37</code> and <code>73</code>, jumping to <code>CONT3</code> tag.</p> </li> <li> <p>Address Processing (Non-Overflow, <code>CONT3</code>, <code>CONT4</code>, <code>CONT5</code>):</p> </li> <li> <p>Lines <code>0045-0069</code>: For each form (<code>31N35</code>, <code>32N36</code>, <code>40N37</code>), assign address fields similarly to ensure proper formatting when no name overflow occurs, jumping to <code>CONT3</code>, <code>CONT4</code>, or <code>CONT5</code> tags.</p> </li> <li> <p>Amount Assignment for Printing:</p> <ul> <li>Lines <code>0071-0094</code>: Assign amounts to specific 1099 box fields based on <code>BOX1</code> and <code>BOX2</code> for each form (<code>31</code>, <code>32</code>, <code>40</code>):</li> <li>For <code>BOX1</code>:<ul> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>L1AMT1</code> (box 1 for 1099-NEC).</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>L1AMT1</code> (box 3, possibly for other forms).</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>L1AMT1</code> (box 6, possibly for other forms).</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>L1AMT1</code> (box 7, standard for 1099-NEC Non-Employee Compensation).</li> </ul> </li> <li>For <code>BOX2</code>:<ul> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>L1AMT2</code>.</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>L1AMT2</code>.</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>L1AMT2</code>.</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>L1AMT2</code>.</li> </ul> </li> </ul> </li> <li> <p>Accumulate Totals:</p> <ul> <li>Lines <code>0095-0098</code>: For each form (<code>31</code>, <code>32</code>, <code>40</code>):</li> <li>Increment <code>COUNT</code> (6 numeric, total vendors printed).</li> <li>Add <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>LRAMT1</code> (10,2 numeric, total for box 1).</li> <li>Add <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>LRAMT3</code> (total for box 3).</li> <li>Add <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>LRAMT6</code> (total for box 6).</li> <li>Add <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>LRAMT7</code> (total for box 7).</li> </ul> </li> <li> <p>Page Break Logic:</p> <ul> <li>Lines <code>C*</code>: If <code>COUNTP</code> equals <code>3</code> (all three forms on the page filled):</li> <li>Reset <code>COUNTP</code> to zero, set indicators <code>31</code>, <code>32</code>, <code>40</code> on, and execute an <code>EXCPT</code> to print the page.</li> <li>At end of file (<code>LR</code> on):</li> <li>If data remains for the first form (<code>31</code> on), set indicator <code>30</code> on, clear <code>TEST</code> (11 chars), and execute <code>EXCPT</code> to print a final page with one vendor.</li> <li>Unlike <code>AP765</code>, this program does not compute a grand total (<code>LRAMT</code>) across all boxes, focusing only on individual box totals.</li> </ul> </li> <li> <p>Output to Printer:</p> <ul> <li>Lines <code>0107-0140</code>: Define the output format for <code>AP1099</code>:</li> <li>First Form (Indicator <code>31</code>):<ul> <li>Lines 5-23: Print company headers (<code>HEAD1-3</code>), year (<code>CNYEAR</code>), tax IDs (<code>ID#</code>, <code>VNID#1</code>), payee names (<code>PYN11</code>, <code>PYN21</code>), addresses (<code>VNAD11</code>, <code>VNAD21</code>, <code>CTSTZ1</code>), amounts (<code>AMT11</code>, <code>AMT31</code>, <code>AMT61</code>, <code>AMT71</code>), and vendor number (<code>VNVEN1</code>, revision <code>JB02</code>).</li> <li>Conditional on <code>34</code> (1099-NEC) for primary amount (<code>AMT11</code>) and <code>N34</code> for other boxes (<code>AMT31</code>).</li> </ul> </li> <li>Second Form (Indicator <code>32</code>):<ul> <li>Similar fields for the second form, using <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, <code>AMT12</code>, <code>AMT32</code>, <code>AMT62</code>, <code>AMT72</code>, <code>VNID#2</code>, <code>VNVEN2</code>.</li> </ul> </li> <li>Third Form (Indicator <code>40</code>):<ul> <li>Similar fields for the third form, using <code>PYN13</code>, <code>PYN23</code>, <code>VNAD13</code>, <code>CTSTZ3</code>, <code>AMT13</code>, <code>AMT33</code>, <code>AMT63</code>, <code>AMT73</code>, <code>VNID#3</code>, <code>VNVEN3</code>.</li> </ul> </li> <li>Totals (LR):<ul> <li>Print <code>HEAD1-3</code>, <code>ID#</code>, totals (<code>LRAMT1</code>, <code>LRAMT6</code>, <code>LRAMT7</code>), and vendor count (<code>COUNT</code>). Notably, <code>LRAMT3</code> is printed but not accumulated for <code>40</code>, indicating a possible oversight or specific requirement.</li> </ul> </li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Threshold Check:</li> <li> <p>Only vendors with a total amount (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) greater than or equal to <code>ENTAMT</code> are printed.</p> </li> <li> <p>Three Forms per Page:</p> </li> <li>The program prints three 1099-NEC forms per page on laser paper (revision <code>MG03</code>, modified for three forms), managed by <code>COUNTP</code> and indicators <code>31</code>, <code>32</code>, <code>40</code>.</li> <li> <p>If fewer than three vendors remain at the end, a final page with one or two vendors is printed.</p> </li> <li> <p>Payee Name Handling:</p> </li> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> (vendor name). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code> (payee names, revision <code>JB01</code>).</li> <li> <p>If <code>VNNOVF</code> is <code>Y</code>, use address fields to continue the name on the second line (revision <code>JB02</code>).</p> </li> <li> <p>Address Formatting:</p> </li> <li> <p>Use the highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) for city/state/ZIP (<code>CTSTZ1</code>/<code>CTSTZ2</code>/<code>CTSTZ3</code>) and shift other fields accordingly to ensure proper formatting.</p> </li> <li> <p>Box Amount Assignment:</p> </li> <li> <p>Amounts are assigned to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code>, with a focus on box 7 for 1099-NEC Non-Employee Compensation (revision <code>MG04</code> supports multiple form types).</p> </li> <li> <p>1099 Type:</p> </li> <li> <p>Indicator <code>34</code> is set for <code>VN1099 = 'N'</code> (1099-NEC). The commented-out logic for <code>M</code> (1099-MISC) ensures this program is dedicated to 1099-NEC.</p> </li> <li> <p>Totals:</p> </li> <li> <p>Accumulate totals for boxes 1, 3, 6, and 7 (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>) and vendor count (<code>COUNT</code>). Unlike <code>AP765</code>, no grand total (<code>LRAMT</code>) is computed.</p> </li> <li> <p>Vendor Number as Account Number:</p> </li> <li>Print <code>VNVEND</code> as the account number (<code>VNVEN1</code>/<code>VNVEN2</code>/<code>VNVEN3</code>, revision <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#comparison-with-ap765rpg36txt","title":"Comparison with AP765.rpg36.txt","text":"<ul> <li>Similarity:</li> <li>Both programs read <code>AP766</code>, validate amounts against <code>ENTAMT</code>, handle payee names and addresses, assign amounts to boxes 1, 3, 6, or 7, and print to <code>AP1099</code>.</li> <li>Both support revisions <code>JB01</code> (payee names), <code>JB02</code> (name overflow, vendor number as account), <code>MG03</code> (laser paper), and <code>MG04</code> (multiple form types).</li> <li>Differences:</li> <li>Forms per Page: <code>AP765</code> prints two forms per page (<code>COUNTP</code> up to 2, indicators <code>31</code>/<code>32</code>), while <code>AP765N</code> prints three forms per page (<code>COUNTP</code> up to 3, indicators <code>31</code>/<code>32</code>/<code>40</code>).</li> <li>1099 Type: <code>AP765</code> handles both 1099-MISC (<code>VN1099 = 'M'</code>, indicator <code>33</code>) and 1099-NEC (<code>VN1099 = 'N'</code>, indicator <code>34</code>), while <code>AP765N</code> is dedicated to 1099-NEC (<code>VN1099 = 'N'</code>, indicator <code>34</code> only).</li> <li>Vendor Number Check: <code>AP765</code> checks for <code>VNVEND = 9384</code>, while <code>AP765N</code> checks for <code>VNVEND = 32800</code>.</li> <li>Totals: <code>AP765</code> computes a grand total (<code>LRAMT</code>), while <code>AP765N</code> does not, though it prints <code>LRAMT3</code> in the totals section without accumulating it for <code>40</code>.</li> <li>Output Lines: <code>AP765N</code> has fewer active output lines for amounts (e.g., <code>AMT61</code>, <code>AMT71</code> are commented out), focusing on 1099-NEC fields.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AP766:</li> <li>Input file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains preprocessed vendor data from <code>AP766.rpg36.txt</code>, including vendor details, amounts, box numbers, and payee names.</p> </li> <li> <p>AP1099:</p> </li> <li>Output printer file (80 bytes, labeled <code>AP1099</code> in the OCL).</li> <li> <p>Configured to print 1099-NEC forms with form type <code>1099</code>, 10 CPI, 6 LPI, three forms per page.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL (<code>?9?PA1099X</code>), likely a cross-reference file, but not used directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP765N</code>. It is invoked by <code>AP765N.ocl36.txt</code> and processes data from <code>AP766.rpg36.txt</code>, with input prepared by <code>#GSORT</code> and <code>AP766</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 Printer File:</li> <li>Prints 1099-NEC forms (three per page) with:<ul> <li>Company headers (<code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>).</li> <li>Year (<code>CNYEAR</code>).</li> <li>Company Tax ID (<code>ID#</code>) and vendor Tax ID (<code>VNID#1</code>/<code>VNID#2</code>/<code>VNID#3</code>).</li> <li>Payee names (<code>PYN11</code>/<code>PYN12</code>/<code>PYN13</code>, <code>PYN21</code>/<code>PYN22</code>/<code>PYN23</code>) or vendor name (<code>VNNAME</code>).</li> <li>Addresses (<code>VNAD11</code>/<code>VNAD12</code>/<code>VNAD13</code>, <code>VNAD21</code>/<code>VNAD22</code>/<code>VNAD23</code>, <code>CTSTZ1</code>/<code>CTSTZ2</code>/<code>CTSTZ3</code>).</li> <li>Amounts for boxes 1, 3, 6, or 7 (<code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code>, <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code>, <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code>, <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code>), primarily box 7 for 1099-NEC.</li> <li>Vendor number as account number (<code>VNVEN1</code>/<code>VNVEN2</code>/<code>VNVEN3</code>, revision <code>JB02</code>).</li> </ul> </li> <li>Final page includes totals (<code>LRAMT1</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT3</code> for <code>31</code>/<code>32</code> only) and vendor count (<code>COUNT</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765N</code> prints 1099-NEC forms, formatting three forms per page on laser paper, using preprocessed vendor data from <code>AP766</code>.</li> <li>Process:</li> <li>Reads <code>AP766</code> and validates vendor amounts against <code>ENTAMT</code>.</li> <li>Manages three forms per page with <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>/<code>40</code>.</li> <li>Assigns payee names, addresses, and amounts to appropriate fields, focusing on 1099-NEC.</li> <li>Prints forms with company and vendor details, amounts, and totals.</li> <li>Business Rules:</li> <li>Prints only vendors meeting the amount threshold.</li> <li>Supports three forms per page and 1099-NEC exclusively.</li> <li>Handles payee names, name overflow, and vendor number as account number.</li> <li>Accumulates totals for boxes 1, 3, 6, and 7, but not a grand total.</li> <li>Files Used:</li> <li>Input: <code>AP766</code> (preprocessed vendor data).</li> <li>Output: <code>AP1099</code> (printer file for 1099-NEC forms).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code>, <code>AP766</code>, and <code>AP765N.ocl36.txt</code>.</li> </ul> <p>This program is tailored for 1099-NEC forms, differing from <code>AP765</code> by supporting three forms per page and focusing exclusively on Non-Employee Compensation, ensuring IRS-compliant output for vendors.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/","title":"AP765P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#explanation-of-the-process-steps-in-the-rpg-ocl-program-ap765pocl36txt","title":"Explanation of the Process Steps in the RPG .OCL Program (AP765P.ocl36.txt)","text":"<p>This .OCL (Operation Control Language) program, likely written for an IBM System/36 or AS/400 environment, is designed to handle the processing of 1099 vendor forms for a specified year. Below is a step-by-step explanation of the process steps based on the provided code:</p> <ol> <li>Program Initialization:</li> <li>The program starts with <code>SCPROCP</code>, which likely sets up the procedure environment with parameters (up to 9 parameters, as indicated by <code>,,,,,,,?9?</code>).</li> <li><code>SWITCH 00000000</code>: Initializes all switches to off (binary 0s).</li> <li><code>LOCAL BLANK-*ALL</code>: Clears all local variables to blanks.</li> <li> <p><code>GSY2K</code>: Likely a call to a system routine to handle Year 2000 compliance (date formatting).</p> </li> <li> <p>Prompt for Year Input:</p> </li> <li>The program prompts the user with the message: \"WHAT YEAR ARE THESE 1099'S FOR? PLEASE ENTER THE 'FOUR DIGIT YEAR'...\".</li> <li> <p>The input is stored in parameter <code>?10?</code> (a four-digit year, e.g., 2012).</p> </li> <li> <p>Construct 1099 File Name:</p> </li> <li>If parameter <code>?9?</code> is 'G', the program sets <code>P13</code> (the 1099 file name) to <code>'APVN?10?'</code>, where <code>?10?</code> is the year (e.g., <code>APVN2012</code> for year 2012).</li> <li>Otherwise, if <code>?9?</code> is not 'G', it sets <code>P13</code> to <code>'?9?VN?10?'</code>, incorporating <code>?9?</code> as a prefix (e.g., if <code>?9?</code> is 'XX', the file name becomes <code>XXVN2012</code>).</li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and contains vendor data (<code>GAPVEND</code>) before monthly and yearly totals are cleared.</p> </li> <li> <p>Validate File Existence:</p> </li> <li>The program checks if the file specified in <code>?13?</code> exists using <code>DATAF1-?13?</code>.</li> <li>If the file is not found, it displays an error message (<code>'?L'142,4'? NOT FOUND'</code>) and pauses for user interaction.</li> <li> <p>If the file still cannot be found, the program cancels execution (<code>CANCEL</code>).</p> </li> <li> <p>Set Company Information:</p> </li> <li>The program sets local variables with hardcoded company data for the 1099 form:<ul> <li><code>OFFSET-1</code>: Company name (<code>AMERICAN REFINING GROUP INC</code>).</li> <li><code>OFFSET-31</code>: Address line 1 (<code>55 ALPHA DRIVE WEST</code>).</li> <li><code>OFFSET-61</code>: Address line 2 (<code>PITTSBURGH PA 15238</code>).</li> <li><code>OFFSET-91</code>: Tax ID (<code>22-2318612</code>).</li> <li><code>OFFSET-201</code>: Year (<code>?10?</code>, the input year).</li> </ul> </li> <li> <p>These values are likely used in the 1099 form output.</p> </li> <li> <p>Load and Run Main Program:</p> </li> <li><code>LOAD AP765P</code>: Loads the main program <code>AP765P</code> (this could be the current program or a related module).</li> <li><code>RUN</code>: Executes the loaded program.</li> <li> <p>If <code>SWITCH1-1</code> is set (indicating an error or specific condition), the program jumps to the <code>END</code> tag, terminating execution.</p> </li> <li> <p>Conditional Program Execution:</p> </li> <li>The program checks two flags:<ul> <li><code>?L'120,1'?</code>: Likely indicates whether to submit the job to a job queue (<code>Y</code> for yes, else run directly).</li> <li><code>?L'110,1'?</code>: Determines which program to run (<code>M</code> for <code>AP765</code>, <code>N</code> for <code>AP765N</code>).</li> </ul> </li> <li>Based on these flags, the program executes one of four scenarios:<ul> <li>If <code>?L'120,1'?</code> is <code>Y</code> and <code>?L'110,1'?</code> is <code>M</code>: Submits <code>AP765</code> to the job queue (<code>JOBQ ?CLIB?,AP765,,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is not <code>Y</code> and <code>?L'110,1'?</code> is <code>M</code>: Runs <code>AP765</code> directly (<code>AP765 ,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is <code>Y</code> and <code>?L'110,1'?</code> is <code>N</code>: Submits <code>AP765N</code> to the job queue (<code>JOBQ ?CLIB?,AP765N,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is not <code>Y</code> and <code>?L'110,1'?</code> is <code>N</code>: Runs <code>AP765N</code> directly (<code>AP765N ,,,,,,,,?9?,?10?,,,?13?</code>).</li> </ul> </li> <li> <p>Parameters <code>?9?</code>, <code>?10?</code>, and <code>?13?</code> are passed to the called programs.</p> </li> <li> <p>Program Termination:</p> </li> <li><code>TAG END</code>: Marks the end of the program.</li> <li><code>LOCAL BLANK-*ALL</code>: Clears all local variables again.</li> <li><code>SWITCH 00000000</code>: Resets all switches to off.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program references the following external programs: 1. AP765: Likely the main program for processing 1099 forms when <code>?L'110,1'?</code> is <code>M</code>. 2. AP765N: An alternate program for processing 1099 forms when <code>?L'110,1'?</code> is <code>N</code> (possibly for a different format or condition). 3. AP300: Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (not called directly in this program).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following table/file: 1. GAPVEND: The vendor file, stored as <code>APVNYYYY</code> (e.g., <code>APVN2012</code>), which contains vendor data before monthly and yearly totals are cleared. This file is accessed via the file name constructed in <code>?13?</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#summary","title":"Summary","text":"<p>The program facilitates the generation of 1099 forms by: - Prompting for the year and constructing the appropriate file name (<code>APVNYYYY</code>). - Validating the existence of the vendor file. - Setting company information for the forms. - Conditionally running or queuing one of two programs (<code>AP765</code> or <code>AP765N</code>) based on control flags. - The process relies on the <code>GAPVEND</code> file and interacts with external programs <code>AP765</code> and <code>AP765N</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/","title":"AP765P RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765prpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765P.rpg36.txt)","text":"<p>The provided RPG program (<code>AP765P.rpg36.txt</code>) is an RPG III program for the IBM System/36 or AS/400, designed to handle user input for generating 1099 vendor forms, likely called by the OCL program <code>AP765P.ocl36.txt</code>. It defines a screen format (<code>AP765PS1</code>) for capturing and validating input data required for 1099 form processing. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765P</code>) and parameter <code>P014</code>, which may be a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specification (F):<ul> <li>Line <code>0008</code>: Defines a workstation file <code>SCREEN</code> (512 bytes) for interactive input/output, used to display and capture data via a display device (e.g., a terminal screen).</li> </ul> </li> <li>Extension Specification (E):<ul> <li>Line <code>0009</code>: Defines an array <code>MSG</code> with 5 elements, each 35 characters long, to store error messages (loaded from the <code>** MESSAGES</code> section at the end of the program).</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0010-0027</code>: Define the screen format <code>AP765PS1</code> (used for both input and output) and a data structure (<code>UDS</code>) to hold the following fields:</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Tax ID number.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Entered amount (likely for 1099 payments).</li> <li><code>CURLST</code> (1 char, position 109): Current or Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>TYPE</code> (1 char, position 110): Type of 1099 form (<code>I</code> for Interest, <code>D</code> for Dividend, <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> </ul> </li> <li> <p>Initialization:</p> </li> <li>Lines <code>0029-0031</code>: Reset indicators <code>81</code>, <code>90</code>, <code>91</code>, <code>92</code>, <code>93</code>, <code>94</code>, <code>95</code>, and <code>96</code> to off using <code>SETOF</code>.</li> <li>Line <code>0032</code>: Initialize the error message field <code>MSGE</code> to blanks.</li> <li> <p>Line <code>0038</code>: Set indicator <code>60</code> on (likely used to control screen display or program flow).</p> </li> <li> <p>Handle Special Key (KG):</p> </li> <li> <p>Lines <code>0034-0036</code>: If the <code>KG</code> key (likely a function key like F3 for exit) is pressed:</p> <ul> <li>Reset indicator <code>81</code> (if set).</li> <li>Set indicator <code>U1</code> and <code>LR</code> (Last Record, signaling program termination).</li> <li>Jump to the <code>END</code> tag to exit the program.</li> </ul> </li> <li> <p>Check for Format 09 (NS 09):</p> </li> <li> <p>Lines <code>0040-0041</code>: If the program is processing format <code>09</code> (likely a control format or condition):</p> <ul> <li>Set indicators <code>81</code> and <code>94</code> on.</li> <li>Jump to the <code>END</code> tag to exit the program.</li> </ul> </li> <li> <p>Main Processing (Format 01):</p> </li> <li> <p>Line <code>0043</code>: If processing format <code>01</code> (the main screen input format <code>AP765PS1</code>), execute the subroutine <code>SUBSC1</code> to validate input fields.</p> </li> <li> <p>Validation Subroutine (SUBSC1):</p> </li> <li>Lines <code>0047-0077</code>: The <code>SUBSC1</code> subroutine validates the input fields from the screen:<ul> <li>HEAD1 Validation (Lines <code>0049-0052</code>):</li> <li>Check if <code>HEAD1</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>91</code> on, move message <code>MSG,1</code> (\"FIRST HEADING CANNOT BE BLANK\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>HEAD2 Validation (Lines <code>0054-0057</code>):</li> <li>Check if <code>HEAD2</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>92</code> on, move message <code>MSG,2</code> (\"SECOND HEADING CANNOT BE BLANK\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>ID# Validation (Lines <code>0059-0062</code>):</li> <li>Check if <code>ID#</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>93</code> on, move message <code>MSG,3</code> (\"ID# CANNOT BE BLANK - TRY AGAIN!\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>TYPE Validation (Lines <code>0064-0069</code>):</li> <li>Check if <code>TYPE</code> is one of the valid values: <code>D</code> (Dividend), <code>I</code> (Interest), <code>M</code> (Miscellaneous), or <code>N</code> (Non-Employee Compensation).</li> <li>If not valid, set indicators <code>81</code> and <code>95</code> on, move message <code>MSG,4</code> (\"ENTER I-INT, D-DIV, M-MISC, N-NEC\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>CURLST Validation (Lines <code>0071-0075</code>):</li> <li>Check if <code>CURLST</code> is either <code>C</code> (Current) or <code>L</code> (Last).</li> <li>If not valid, set indicators <code>81</code> and <code>96</code> on, move message <code>MSG,5</code> (\"ENTER 'C'-CURR OR 'L'-LAST\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>If any validation fails, the program sets the appropriate error indicators and displays an error message (<code>MSGE</code>) on the screen, then exits the subroutine (<code>ENDSC1</code>).</p> </li> <li> <p>Program Termination:</p> </li> <li>Line <code>0045</code>: The <code>END</code> tag marks the program\u2019s termination point.</li> <li> <p>If validations pass, the program likely proceeds to write the validated data to the screen or another process (not shown in this code snippet).</p> </li> <li> <p>Output Specifications:</p> </li> <li>Lines <code>0079-0088</code>: Define the output format for the <code>SCREEN</code> file (format <code>AP765PS1</code>):<ul> <li>Output fields <code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>, <code>ID#</code>, <code>ENTAMT</code>, <code>TYPE</code>, and <code>CURLST</code> to their respective positions (1-110).</li> <li>Output the error message <code>MSGE</code> at position 145.</li> <li>The output is conditional on indicator <code>81</code> (likely used to display errors or re-display the screen for corrections).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Mandatory Fields:</li> <li><code>HEAD1</code>, <code>HEAD2</code>, and <code>ID#</code> must not be blank. If any are blank, the program displays an error message and prevents further processing.</li> <li>Valid 1099 Type:</li> <li>The <code>TYPE</code> field must be one of:<ul> <li><code>I</code> (Interest, for 1099-INT).</li> <li><code>D</code> (Dividend, for 1099-DIV).</li> <li><code>M</code> (Miscellaneous, for 1099-MISC).</li> <li><code>N</code> (Non-Employee Compensation, for 1099-NEC).</li> </ul> </li> <li>Invalid values trigger an error message.</li> <li>Current or Last Indicator:</li> <li>The <code>CURLST</code> field must be either <code>C</code> (Current) or <code>L</code> (Last). Invalid values trigger an error message.</li> <li>Error Handling:</li> <li>If any validation fails, the program sets indicator <code>81</code> and a specific indicator (<code>91</code>, <code>92</code>, <code>93</code>, <code>95</code>, or <code>96</code>) to highlight the error field, displays an error message, and redisplays the screen for correction.</li> <li>User Exit:</li> <li>Pressing the <code>KG</code> key (e.g., F3) allows the user to exit the program immediately, setting <code>U1</code> and <code>LR</code> indicators.</li> <li>Screen Interaction:</li> <li>The program uses a workstation file (<code>SCREEN</code>) to display input fields and error messages interactively, allowing the user to correct invalid inputs.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#tables-used","title":"Tables Used","text":"<ol> <li>MSG Array:</li> <li>Defined in the <code>E</code> specification (Line <code>0009</code>).</li> <li>A table of 5 elements, each 35 characters long, loaded from the <code>** MESSAGES</code> section at the end of the program:<ul> <li><code>MSG,1</code>: \"FIRST HEADING CANNOT BE BLANK\"</li> <li><code>MSG,2</code>: \"SECOND HEADING CANNOT BE BLANK\"</li> <li><code>MSG,3</code>: \"ID# CANNOT BE BLANK - TRY AGAIN!\"</li> <li><code>MSG,4</code>: \"ENTER I-INT, D-DIV, M-MISC, N-NEC\"</li> <li><code>MSG,5</code>: \"ENTER 'C'-CURR OR 'L'-LAST\"</li> </ul> </li> <li> <p>Used to display error messages when validation fails.</p> </li> <li> <p>SCREEN File:</p> </li> <li>Defined in the <code>F</code> specification (Line <code>0008</code>).</li> <li>A workstation file used for interactive input/output, with format <code>AP765PS1</code> for capturing and displaying data.</li> </ol> <p>Note: The program does not explicitly reference any database files (e.g., <code>GAPVEND</code> from the OCL program). It focuses on screen input validation, suggesting that data is either passed from the OCL program or handled in subsequent programs (e.g., <code>AP765</code> or <code>AP765N</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called within this RPG program. However, based on the context from the OCL program (<code>AP765P.ocl36.txt</code>): - The RPG program <code>AP765P</code> is likely one of the programs (<code>AP765</code> or <code>AP765N</code>) called by the OCL procedure. - The OCL program references <code>AP765</code> and <code>AP765N</code>, which may perform further processing of the validated data (e.g., generating 1099 forms or updating files).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>Screen Output (AP765PS1):</li> <li>The program outputs the following fields to the workstation screen:<ul> <li><code>HEAD1</code> (positions 1-30): First heading.</li> <li><code>HEAD2</code> (positions 31-60): Second heading.</li> <li><code>HEAD3</code> (positions 61-90): Third heading.</li> <li><code>ID#</code> (positions 91-100): Tax ID number.</li> <li><code>ENTAMT</code> (positions 101-108): Entered amount (numeric, 8 digits with 2 decimals).</li> <li><code>TYPE</code> (position 109): 1099 form type (<code>I</code>, <code>D</code>, <code>M</code>, or <code>N</code>).</li> <li><code>CURLST</code> (position 110): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>MSGE</code> (position 145): Error message (if any).</li> </ul> </li> <li> <p>The output is conditional on indicator <code>81</code>, which is set when validation fails to redisplay the screen with an error message.</p> </li> <li> <p>No File Outputs:</p> </li> <li>The program does not directly write to any database files. The validated data is likely passed to subsequent programs (<code>AP765</code> or <code>AP765N</code>) for further processing, such as updating the <code>GAPVEND</code> file or generating 1099 forms.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765P</code> provides an interactive screen (<code>AP765PS1</code>) for users to input data for 1099 vendor forms, including company headings, tax ID, amount, form type, and current/last indicator. It validates these inputs and displays error messages if validations fail.</li> <li>Process: The program initializes, displays a screen for input, validates the fields using the <code>SUBSC1</code> subroutine, and redisplays the screen with error messages if validations fail. Users can exit using the <code>KG</code> key.</li> <li>Business Rules: Enforce non-blank headings and ID#, valid 1099 types (<code>I</code>, <code>D</code>, <code>M</code>, <code>N</code>), and valid <code>CURLST</code> values (<code>C</code>, <code>L</code>).</li> <li>Tables Used: <code>MSG</code> array (for error messages) and <code>SCREEN</code> workstation file (for input/output).</li> <li>External Programs: None called directly, but likely interacts with <code>AP765</code> or <code>AP765N</code> as part of the OCL procedure.</li> <li>Outputs: Screen output to display input fields and error messages; no direct file outputs.</li> </ul> <p>This program serves as the front-end validation step for 1099 form processing, ensuring accurate data entry before passing control to other programs for further processing.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/","title":"AP766 RPG","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap766rpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP766.rpg36.txt)","text":"<p>The RPG III program <code>AP766.rpg36.txt</code> is designed to preprocess Accounts Payable (A/P) 1099 forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765.ocl36.txt</code> and processes vendor data to consolidate records (one per vendor, regardless of multiple companies) and prepare them for printing 1099 forms. Below is a detailed explanation of the process steps, business rules, tables/files used, external programs called, and outputs.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0001</code>: Defines the program name (<code>AP766</code>) and parameter <code>P064</code>, likely a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0006</code>: <code>APVEND</code> (Input, Primary, 579 bytes, Record Address Type <code>R</code>): The vendor file (e.g., <code>APVN2012</code>, labeled <code>?13?</code> in the OCL), read sequentially.</li> <li>Line <code>0007</code>: <code>AP765S</code> (Input, Record Address, 30 bytes, Indexed by positions 3-3): The sorted file (e.g., <code>?9?AP765S</code>) from the <code>#GSORT</code> step in the OCL, used to control the order of processing.</li> <li>Line <code>0008</code>: <code>AP766</code> (Output, 300 bytes): The output work file (e.g., <code>?9?AP766</code>) that stores processed data for printing.</li> </ul> </li> <li>Extension Specification (E):<ul> <li>Line <code>0009</code>: Links <code>AP765S</code> (sorted file) to <code>APVEND</code> (vendor file) for record address processing, ensuring records are read in the sorted order (by 1099 type, vendor, and company).</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0011-0027</code>: Define fields in the <code>APVEND</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VNCO</code> (29 chars, positions 2-30): Company number.</li> <li><code>VNVENDL1</code> (5 chars, positions 4-8): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 9-38): Vendor name.</li> <li><code>VNADD1</code> (30 chars, positions 39-68): Address line 1.</li> <li><code>VNADD2</code> (30 chars, positions 69-98): Address line 2.</li> <li><code>VNADD3</code> (30 chars, positions 99-128): Address line 3.</li> <li><code>VNADD4</code> (30 chars, positions 129-158): Address line 4.</li> <li><code>VNZIP5</code> (5 numeric, positions 159-163): ZIP code.</li> <li><code>VNNOVF</code> (1 char, position 216, added by revision <code>JB02</code>): Name overflow indicator.</li> <li><code>VNYTDP</code> (6,2 numeric, positions 242-247): Current year year-to-date paid amount.</li> <li><code>VNLYDP</code> (6,2 numeric, positions 248-253): Last year year-to-date paid amount.</li> <li><code>VN1099L2</code> (1 char, position 264): A/P 1099 code (e.g., <code>M</code>, <code>N</code>, <code>I</code>, <code>D</code>).</li> <li><code>VNID#</code> (11 chars, positions 265-275): 1099 ID number (e.g., Tax ID).</li> <li><code>VNBOX1</code> (2 numeric, positions 276-277): First 1099 box number.</li> <li><code>VNBOX2</code> (2 numeric, positions 278-279): Second 1099 box number.</li> <li><code>VNB2AM</code> (6,2 numeric, positions 280-285): Second 1099 box amount.</li> <li><code>VNPYN1</code> (40 chars, positions 300-339, added by revision <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 340-379, added by revision <code>JB01</code>): Payee name 2.</li> <li>Lines <code>0028-0030</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>KYCRLS</code> (1 char, position 141): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>KYAMT</code> (8,2 numeric, positions 142-149): Amount threshold for processing.</li> </ul> </li> <li> <p>Initialization at Level 1 (L1):</p> </li> <li> <p>Lines <code>0031-0034</code>: At the start of each level 1 break (<code>L1</code>, triggered by a change in the key fields from <code>AP765S</code>, i.e., vendor number):</p> <ul> <li><code>L1AMT1</code> (9,2 numeric): Initialize to zero (total amount for box 1).</li> <li><code>L1AMT2</code> (9,2 numeric): Initialize to zero (total amount for box 2).</li> <li><code>BOX1</code> (2 numeric): Initialize to zero (first 1099 box number).</li> <li><code>BOX2</code> (2 numeric): Initialize to zero (second 1099 box number).</li> </ul> </li> <li> <p>Process Year-to-Date Amount:</p> </li> <li>Lines <code>0039-0043</code>: Check <code>KYCRLS</code> to determine whether to use current or last year\u2019s YTD amount:<ul> <li>If <code>KYCRLS</code> is <code>C</code> (current year), add <code>VNYTDP</code> (current year YTD paid) to <code>L1AMT1</code>.</li> <li>Otherwise (e.g., <code>L</code> for last year), add <code>VNYTDP</code> to <code>L1AMT1</code> (note: the <code>ELSE</code> clause uses <code>VNYTDP</code>, which seems incorrect; it likely should use <code>VNLYDP</code> for last year, indicating a potential bug or oversight).</li> </ul> </li> <li> <p>Line <code>0045</code>: Add <code>VNB2AM</code> (second 1099 box amount) to <code>L1AMT2</code>.</p> </li> <li> <p>Assign Box Numbers:</p> </li> <li> <p>Lines <code>0047-0053</code>:</p> <ul> <li>If <code>BOX1</code> is zero, set it to <code>VNBOX1</code> (first 1099 box number from the vendor file).</li> <li>If <code>BOX2</code> is zero, set it to <code>VNBOX2</code> (second 1099 box number from the vendor file).</li> </ul> </li> <li> <p>Amount Validation and Adjustment:</p> </li> <li>Line <code>0055</code>: Compare <code>L1AMT1</code> (total amount for box 1) with <code>KYAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>50</code> if <code>L1AMT1</code> is greater than or equal to <code>KYAMT</code>.</li> <li> <p>Lines <code>0056-0063</code> (Level 1 and Indicator <code>50</code>):</p> <ul> <li>If <code>BOX1</code> is zero, set it to <code>7</code> (likely a default box number for 1099 forms, e.g., box 7 for Non-Employee Compensation on 1099-NEC).</li> <li>If <code>L1AMT2</code> (second box amount) is greater than zero and <code>BOX2</code> is greater than zero, subtract <code>L1AMT2</code> from <code>L1AMT1</code> to split the total amount between two boxes.</li> </ul> </li> <li> <p>Write Output Record:</p> </li> <li>Line <code>0064</code>: If indicator <code>50</code> is on (i.e., <code>L1AMT1</code> meets or exceeds the threshold <code>KYAMT</code>), write a record to the <code>AP766</code> file using the <code>L1ADD</code> output format.</li> <li>Output Format (L1ADD) (Lines <code>0066-0079</code>):<ul> <li>Position 1: <code>'A'</code> (record identification).</li> <li>Position 2: <code>VN1099</code> (1099 code, 1 char).</li> <li>Positions 3-7: <code>VNVEND</code> (vendor number, 5 chars).</li> <li>Positions 8-37: <code>VNNAME</code> (vendor name, 30 chars).</li> <li>Positions 38-67: <code>VNADD1</code> (address line 1, 30 chars).</li> <li>Positions 68-97: <code>VNADD2</code> (address line 2, 30 chars).</li> <li>Positions 98-127: <code>VNADD3</code> (address line 3, 30 chars).</li> <li>Positions 128-157: <code>VNADD4</code> (address line 4, 30 chars).</li> <li>Positions 158-166: <code>L1AMT1</code> (box 1 amount, 9,2 numeric).</li> <li>Positions 167-175: <code>L1AMT2</code> (box 2 amount, 9,2 numeric).</li> <li>Positions 176-177: <code>BOX1</code> (box 1 number, 2 numeric).</li> <li>Positions 178-179: <code>BOX2</code> (box 2 number, 2 numeric).</li> <li>Positions 180-190: <code>VNID#</code> (1099 ID number, 11 chars).</li> <li>Positions 191-230: <code>VNPYN1</code> (payee name 1, 40 chars, added by <code>JB01</code>).</li> <li>Positions 231-270: <code>VNPYN2</code> (payee name 2, 40 chars, added by <code>JB01</code>).</li> <li>Position 271: <code>VNNOVF</code> (name overflow indicator, 1 char, added by <code>JB02</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Consolidate Vendor Records:</li> <li> <p>The program processes one record per vendor, regardless of whether the vendor appears in multiple companies (indicated by <code>VNCO</code>). This is achieved using the <code>L1</code> (Level 1) break on the vendor number from the sorted file <code>AP765S</code>.</p> </li> <li> <p>Year-to-Date Amount Selection:</p> </li> <li>If <code>KYCRLS</code> is <code>C</code>, use the current year\u2019s YTD paid amount (<code>VNYTDP</code>) for <code>L1AMT1</code>.</li> <li>If <code>KYCRLS</code> is not <code>C</code> (e.g., <code>L</code>), the program incorrectly uses <code>VNYTDP</code> instead of <code>VNLYDP</code> (last year\u2019s YTD paid amount), which may be a coding error.</li> <li> <p>The second 1099 box amount (<code>VNB2AM</code>) is added to <code>L1AMT2</code>.</p> </li> <li> <p>Box Number Assignment:</p> </li> <li>If <code>BOX1</code> or <code>BOX2</code> are zero, they are set to <code>VNBOX1</code> or <code>VNBOX2</code>, respectively, from the vendor file.</li> <li> <p>If <code>L1AMT1</code> meets the threshold (<code>KYAMT</code>) and <code>BOX1</code> is zero, <code>BOX1</code> is set to <code>7</code> (likely for 1099-NEC box 7).</p> </li> <li> <p>Amount Splitting:</p> </li> <li> <p>If a second box amount (<code>L1AMT2</code>) and box number (<code>BOX2</code>) exist, subtract <code>L1AMT2</code> from <code>L1AMT1</code> to split the total amount between two 1099 boxes.</p> </li> <li> <p>Threshold Check:</p> </li> <li> <p>Only vendors with <code>L1AMT1</code> greater than or equal to <code>KYAMT</code> (threshold amount) are written to the output file <code>AP766</code>.</p> </li> <li> <p>Output Record Structure:</p> </li> <li>The output file <code>AP766</code> includes vendor details, payment amounts, box numbers, and payee names, formatted for printing 1099 forms.</li> <li>Revisions (<code>JB01</code>, <code>JB02</code>) added support for payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) and a name overflow indicator (<code>VNNOVF</code>) for extended name handling.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>APVEND:</li> <li>Input file (579 bytes, primary, labeled <code>?13?</code> in the OCL, e.g., <code>APVN2012</code>).</li> <li>Contains vendor data from the period-end process (<code>AP300</code>), including vendor number, name, address, 1099 amounts, box numbers, and payee names.</li> <li> <p>Fields include <code>VNDEL</code>, <code>VNCO</code>, <code>VNVENDL1</code>, <code>VNNAME</code>, <code>VNADD1-4</code>, <code>VNZIP5</code>, <code>VNNOVF</code>, <code>VNYTDP</code>, <code>VNLYDP</code>, <code>VN1099L2</code>, <code>VNID#</code>, <code>VNBOX1</code>, <code>VNBOX2</code>, <code>VNB2AM</code>, <code>VNPYN1</code>, <code>VNPYN2</code>.</p> </li> <li> <p>AP765S:</p> </li> <li>Input file (30 bytes, record address, labeled <code>?9?AP765S</code> in the OCL, e.g., <code>XXAP765S</code>).</li> <li>Sorted file from <code>#GSORT</code>, used to control the order of processing (by 1099 type, vendor, and company).</li> <li> <p>Linked to <code>APVEND</code> via the <code>E</code> specification for record address processing.</p> </li> <li> <p>AP766:</p> </li> <li>Output file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains processed vendor records with consolidated amounts and box numbers, ready for printing 1099 forms.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL program (<code>?9?PA1099X</code>), likely a cross-reference or configuration file, but not directly used in this RPG program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP766</code>. The program is invoked by the OCL program <code>AP765.ocl36.txt</code> and works in conjunction with:</li> <li><code>#GSORT</code> (from the OCL, produces <code>AP765S</code>).</li> <li><code>AP765</code> (from the OCL, prints 1099 forms using <code>AP766</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#outputs","title":"Outputs","text":"<ol> <li>AP766 File:</li> <li>A work file (e.g., <code>?9?AP766</code>) containing one record per vendor with the following fields:<ul> <li>Record identifier (<code>'A'</code>, position 1).</li> <li>1099 code (<code>VN1099</code>, position 2).</li> <li>Vendor number (<code>VNVEND</code>, positions 3-7).</li> <li>Vendor name (<code>VNNAME</code>, positions 8-37).</li> <li>Address lines (<code>VNADD1-4</code>, positions 38-157).</li> <li>Box 1 amount (<code>L1AMT1</code>, positions 158-166).</li> <li>Box 2 amount (<code>L1AMT2</code>, positions 167-175).</li> <li>Box 1 number (<code>BOX1</code>, positions 176-177).</li> <li>Box 2 number (<code>BOX2</code>, positions 178-179).</li> <li>1099 ID number (<code>VNID#</code>, positions 180-190).</li> <li>Payee name 1 (<code>VNPYN1</code>, positions 191-230).</li> <li>Payee name 2 (<code>VNPYN2</code>, positions 231-270).</li> <li>Name overflow indicator (<code>VNNOVF</code>, position 271).</li> </ul> </li> <li>Used by the subsequent <code>AP765</code> program to print 1099 forms.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP766</code> preprocesses vendor data for 1099 forms, consolidating records to one per vendor, calculating payment amounts for specific 1099 boxes, and writing the results to a work file for printing.</li> <li>Process:</li> <li>Reads sorted vendor data (<code>AP765S</code> and <code>APVEND</code>) in order (by 1099 type, vendor, company).</li> <li>Initializes amounts and box numbers at each vendor break (<code>L1</code>).</li> <li>Selects current or last year\u2019s YTD amount based on <code>KYCRLS</code> (with a potential bug using <code>VNYTDP</code> for both).</li> <li>Assigns box numbers and splits amounts if a second box is used.</li> <li>Writes records to <code>AP766</code> if the total amount meets the threshold (<code>KYAMT</code>).</li> <li>Business Rules:</li> <li>One record per vendor, regardless of multiple companies.</li> <li>Splits amounts between two 1099 boxes if applicable.</li> <li>Applies a threshold (<code>KYAMT</code>) to filter vendors.</li> <li>Supports extended payee names and name overflow.</li> <li>Files Used:</li> <li>Input: <code>APVEND</code> (vendor data), <code>AP765S</code> (sorted control file).</li> <li>Output: <code>AP766</code> (processed work file).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code> and <code>AP765</code>.</li> <li>Outputs: The <code>AP766</code> file, formatted for printing 1099 forms by the <code>AP765</code> program.</li> </ul> <p>This program is a critical step in preparing consolidated vendor data for 1099 form generation, ensuring accurate amounts and box assignments.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/","title":"Summary AP765P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#list-of-use-cases-implemented-by-the-ap765-call-stack","title":"List of Use Cases Implemented by the AP765 Call Stack","text":"<p>The call stack, consisting of <code>AP765P.ocl36.txt</code>, <code>AP765.ocl36.txt</code> or <code>AP765N.ocl36.txt</code>, <code>AP766.rpg36.txt</code>, <code>AP765.rpg36.txt</code> (for 1099-MISC) or <code>AP765N.rpg36.txt</code> (for 1099-NEC), implements the following primary use case:</p> <ol> <li>Generate and Print Vendor 1099 Forms:</li> <li>This use case involves processing vendor payment data from a specified year, sorting and consolidating the data, and printing IRS-compliant 1099 forms (either 1099-MISC or 1099-NEC) for vendors whose total payments meet or exceed a threshold amount. The forms include vendor details, payment amounts for specific boxes, and company information, with two forms per page for 1099-MISC (via <code>AP765</code>) or three forms per page for 1099-NEC (via <code>AP765N</code>).</li> </ol> Program Basic Purpose AP765P.ocl36.txt Controls 1099 processing path (MISC or NEC) AP765.ocl36.txt Orchestrates 1099-MISC form generation AP765N.ocl36.txt Orchestrates 1099-NEC form generation AP766.rpg36.txt Consolidates vendor data for 1099 forms AP765.rpg36.txt Prints 1099-MISC forms (two per page) AP765N.rpg36.txt Prints 1099-NEC forms (three per page)"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#function-requirement-document-generate-and-print-vendor-1099-forms","title":"Function Requirement Document: Generate and Print Vendor 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#function-requirement-document-generate-and-print-vendor-1099-forms_1","title":"Function Requirement Document: Generate and Print Vendor 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#purpose","title":"Purpose","text":"<p>Generate IRS-compliant 1099 forms (1099-MISC or 1099-NEC) for vendors based on payment data for a specified year, ensuring proper sorting, consolidation, and formatting for printing.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Vendor File (<code>APVNYYYY</code>, e.g., <code>APVN2012</code>): Snapshot of vendor payment data from period-end process (<code>AP300</code>), containing:</li> <li>Vendor number, name, address (lines 1-4), Tax ID, 1099 type (<code>M</code> for MISC, <code>N</code> for NEC), payment amounts, box numbers, payee names (1 and 2), name overflow indicator, state ID, state amount.</li> <li>Year (<code>?10?</code>): Four-digit year for the 1099 forms (e.g., 2012).</li> <li>1099 Type Flag (<code>?L'110,1'?</code>): <code>M</code> for 1099-MISC or <code>N</code> for 1099-NEC.</li> <li>Cross-Reference File (<code>PA1099X</code>): Configuration data for processing.</li> <li>Threshold Amount (<code>ENTAMT</code>): Minimum payment amount for including a vendor in the output.</li> <li>Company Information: Company name, address (lines 1-2), Tax ID, stored in User Data Structure (UDS).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed 1099 Forms (<code>AP1099</code>):</li> <li>1099-MISC forms (two per page) or 1099-NEC forms (three per page) on laser paper, formatted with:<ul> <li>Company name, address, Tax ID, and year.</li> <li>Vendor/payee name, address, Tax ID, vendor number (as account number).</li> <li>Payment amounts in boxes 1, 3, 6, or 7.</li> <li>Totals for vendor count and box amounts (1, 3, 6, 7).</li> </ul> </li> <li>Temporary Files:</li> <li>Sorted file (<code>?9?AP765S</code>): Intermediate sorted vendor data.</li> <li>Processed file (<code>?9?AP766</code>): Consolidated vendor data for printing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Sort Vendor Data:</li> <li>Sort input file (<code>APVNYYYY</code>) by 1099 type, vendor number, and company code using <code>#GSORT</code>.</li> <li>Filter records based on 1099 type (<code>M</code> or <code>N</code>) and include only valid types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>).</li> <li> <p>Output to temporary file <code>?9?AP765S</code>.</p> </li> <li> <p>Process Vendor Data:</p> </li> <li>Use <code>AP766</code> to read sorted file (<code>?9?AP765S</code>) and vendor file (<code>APVNYYYY</code>).</li> <li>Consolidate records into one per vendor, using <code>PA1099X</code> for configuration.</li> <li> <p>Output processed data to <code>?9?AP766</code>.</p> </li> <li> <p>Validate and Prepare for Printing:</p> </li> <li>Read <code>?9?AP766</code> using <code>AP765</code> (for 1099-MISC) or <code>AP765N</code> (for 1099-NEC).</li> <li>Calculate total payment (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) and include vendors where <code>TOTAMT</code> &gt;= <code>ENTAMT</code>.</li> <li> <p>Assign payment amounts to boxes (1, 3, 6, or 7) based on <code>BOX1</code> and <code>BOX2</code>.</p> </li> <li> <p>Format Payee and Address:</p> </li> <li>If payee name 1 (<code>VNPYN1</code>) is blank, use vendor name (<code>VNNAME</code>). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code>.</li> <li>If name overflow (<code>VNNOVF = 'Y'</code>), use address fields to continue name on the second line.</li> <li> <p>Assign highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) to city/state/ZIP, shifting others accordingly.</p> </li> <li> <p>Print Forms:</p> </li> <li>For 1099-MISC (<code>AP765</code>): Print two forms per page with company headers, year, Tax IDs, payee names, addresses, amounts, and vendor number.</li> <li>For 1099-NEC (<code>AP765N</code>): Print three forms per page with similar details.</li> <li> <p>Print totals (vendor count, box amounts) on the final page.</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete temporary files (<code>?9?AP765S</code>, <code>?9?AP766</code>) after processing.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Threshold: Include vendors only if <code>TOTAMT</code> &gt;= <code>ENTAMT</code>.</li> <li>Form Type:</li> <li>If <code>?L'110,1'? = 'M'</code>, generate 1099-MISC forms (two per page).</li> <li>If <code>?L'110,1'? = 'N'</code>, generate 1099-NEC forms (three per page).</li> <li>Payee Names: Use <code>VNPYN1</code> and <code>VNPYN2</code> if provided; otherwise, use <code>VNNAME</code>. Handle overflow with address fields if <code>VNNOVF = 'Y'</code>.</li> <li>Address Formatting: Use highest non-blank address line for city/state/ZIP, shift others for proper formatting.</li> <li>Box Assignments: Assign <code>L1AMT1</code> and <code>L1AMT2</code> to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code>.</li> <li>Vendor Number: Print as account number on forms.</li> <li>Totals: Accumulate vendor count and box amounts (1, 3, 6, 7). For 1099-MISC, compute grand total (<code>LRAMT</code>).</li> <li>Special Vendor Flags:</li> <li>For 1099-MISC: Flag vendor <code>9384</code> with <code>YES = 'YES'</code>.</li> <li>For 1099-NEC: Flag vendor <code>32800</code> with <code>YES = 'YES'</code>.</li> <li>Printer Settings: Use form type <code>1099</code>, 10 CPI, 6 LPI on laser paper.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Total Payment: <code>TOTAMT = L1AMT1 + L1AMT2</code> (9,2 numeric).</li> <li>Box Amounts: Assign <code>L1AMT1</code> and <code>L1AMT2</code> to boxes (1, 3, 6, or 7) based on <code>BOX1</code> and <code>BOX2</code> for each form.</li> <li>Totals:</li> <li>Increment <code>COUNT</code> for each vendor printed.</li> <li>Accumulate <code>AMT1x</code> to <code>LRAMT1</code>, <code>AMT3x</code> to <code>LRAMT3</code>, <code>AMT6x</code> to <code>LRAMT6</code>, <code>AMT7x</code> to <code>LRAMT7</code> (10,2 numeric).</li> <li>For 1099-MISC: Compute <code>LRAMT = LRAMT1 + LRAMT3 + LRAMT6 + LRAMT7</code> (11,2 numeric).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#constraints","title":"Constraints","text":"<ul> <li>Input file (<code>APVNYYYY</code>) must exist and contain valid vendor data.</li> <li>Temporary files are deleted before and after processing to avoid conflicts.</li> <li>Year 2000 compliance is ensured via <code>GSY2K</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#success-criteria","title":"Success Criteria","text":"<ul> <li>All eligible vendors (meeting threshold) are printed on IRS-compliant 1099 forms (MISC or NEC).</li> <li>Forms are correctly formatted with two (MISC) or three (NEC) per page.</li> <li>Totals and vendor counts are accurate on the final page.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/","title":"AP780 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, specifically <code>AP780.ocl36.txt</code>, designed to create an IRS 1099 file for Accounts Payable (A/P) processing, primarily for 1099-MISC forms. Below, I\u2019ll break down the process steps, list the external programs called, and identify the tables used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#process-steps-of-the-ap780-ocl-program","title":"Process Steps of the AP780 OCL Program","text":"<p>The OCL program automates the creation of an IRS 1099 file by performing a series of file manipulations, data validations, and processing steps. Here\u2019s a detailed explanation of the steps:</p> <ol> <li>Initialization and Setup:</li> <li>The program begins with comments explaining its purpose: to create an A/P 1099 file for IRS electronic processing, specifically for 1099-MISC forms. Other 1099 types would require program modifications.</li> <li>It prompts for two parameters:<ul> <li><code>?10?</code>: The four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: The 1099 file name (e.g., <code>APVN2012</code>).</li> </ul> </li> <li>A programmer note indicates that the file specified in <code>?13?</code> (e.g., <code>APVN2012</code>) is created in a prior process (<code>AP300</code>) and contains vendor data before monthly and yearly totals are cleared.</li> <li>The program sets the <code>SWITCH</code> to <code>00000000</code> and clears local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li> <p>It initializes a data structure with hardcoded company information for American Refining Group Inc., including name, address, tax ID, year (<code>?10?</code>), contact name, and phone number.</p> </li> <li> <p>File Name Assignment:</p> </li> <li>If <code>?9?</code> (likely a test environment flag) equals <code>G</code>, the program sets <code>P13</code> to <code>APVN?10?</code> (e.g., <code>APVN2012</code>).</li> <li>Otherwise, it sets <code>P13</code> to <code>?9?VN?10?</code> (e.g., <code>TESTVN2012</code> for a test environment).</li> <li> <p>If the file specified by <code>?13?</code> does not exist (<code>DATAF1-?13?</code>), the program pauses with an error message (<code>?10? NOT FOUND ( ?13? )</code>) and cancels execution.</p> </li> <li> <p>User Update Option:</p> </li> <li>The program pauses to ask if a Data File Utility (DFU) update should be moved to a separate menu option.</li> <li>If <code>?9?</code> equals <code>G</code>, it updates the <code>?13?</code> file using format <code>APFMT15</code>.</li> <li> <p>If in a test environment (<code>?9?</code> not equal to <code>G</code>), it pauses with a message indicating that DFU does not work in the test environment.</p> </li> <li> <p>Run AP780P Program:</p> </li> <li>Loads and runs the <code>AP780P</code> program.</li> <li>Opens a file <code>GSTABL</code> (or <code>?9?GSTABL</code> based on the environment) with shared access (<code>DISP-SHR</code>).</li> <li> <p>If <code>SWITCH1-1</code> is set, the program jumps to the <code>END</code> tag, terminating execution.</p> </li> <li> <p>File Deletion:</p> </li> <li>Displays a message indicating that the program is creating the A/P 1099 file for IRS electronic processing.</li> <li> <p>Deletes several files if they exist, depending on the environment (<code>?9?/G</code>):</p> <ul> <li><code>AP1099I</code>, <code>?9?AP1099I</code>, <code>AP1099</code>, <code>?9?AP1099</code>, <code>IRSTAX</code>, <code>?9?IRSTAX</code>, and <code>?9?AP781</code>.</li> </ul> </li> <li> <p>Sorting Input File (GSORT):</p> </li> <li>Loads the <code>#GSORT</code> program to sort the input file specified by <code>?13?</code> (e.g., <code>APVN2012</code>).</li> <li>Input file: <code>?13?</code> with shared access (<code>DISP-SHR</code>).</li> <li>Output file: <code>?9?AP780S</code> with 999,000 records, extendable by 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> <li> <p>Sorting parameters:</p> <ul> <li><code>HSORTA 22A 3X N</code>: Sorts ascending on a 22-character field, with additional logic.</li> <li>Conditions (<code>O C</code>, <code>I*</code>, <code>I C</code>, etc.) define sorting and filtering logic based on fields like 1099 type, vendor, and company.</li> <li>Fields extracted include:</li> <li>1099 type (positions 264\u2013264).</li> <li>Vendor (positions 4\u20138).</li> <li>Company (positions 2\u20133).</li> </ul> </li> <li> <p>Processing with AP781:</p> </li> <li>Loads the <code>AP781</code> program.</li> <li>Input files:<ul> <li><code>APVEND</code> (label <code>?13?</code>, shared access).</li> <li><code>AP780S</code> (label <code>?9?AP780S</code>).</li> </ul> </li> <li>Output file:<ul> <li><code>AP781</code> (label <code>?9?AP781</code>, 1,000 records, extendable by 500, temporary retention <code>RETAIN-T</code>).</li> </ul> </li> <li> <p>Runs the program to process the sorted data.</p> </li> <li> <p>Creating the Final 1099 File (AP780):</p> </li> <li>Loads the <code>AP780</code> program.</li> <li>Input file: <code>AP781</code> (label <code>?9?AP781</code>, shared access).</li> <li>Output file:<ul> <li>If <code>?9?/G</code>, creates <code>AP1099</code> (1,000 records, extendable by 500).</li> <li>Otherwise, creates <code>?9?AP1099</code> (e.g., <code>TESTAP1099</code>).</li> </ul> </li> <li> <p>Runs the program to generate the final 1099 file.</p> </li> <li> <p>Building Index:</p> </li> <li>If <code>?9?/G</code> and <code>AP1099I</code> exists, builds an index (<code>AP1099I</code>) for <code>AP1099</code> with keys at positions 7 (4 bytes) and 12 (9 bytes), allowing duplicate keys.</li> <li> <p>If not <code>?9?/G</code> and <code>?9?AP1099I</code> exists, builds an index (<code>?9?AP1099I</code>) for <code>?9?AP1099</code> with the same key structure.</p> </li> <li> <p>Copying Data:</p> <ul> <li>Deletes the existing file <code>AP10?10?</code> (e.g., <code>AP102012</code>) or <code>?9?AP1?10?</code> (e.g., <code>TESTAP12012</code>) if it exists.</li> <li>Copies data:</li> <li>If <code>?9?/G</code>, from <code>AP1099</code> to <code>AP10?10?</code>.</li> <li>Otherwise, from <code>?9?AP1099</code> to <code>?9?AP1?10?</code>.</li> </ul> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>Jumps to the <code>END</code> tag.</li> <li>Resets the <code>SWITCH</code> to <code>00000000</code> and clears local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Deletes the temporary file <code>?9?AP781</code> if it exists.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program invokes the following external programs: 1. AP780P: Likely a preprocessing program that sets up or validates data before the main 1099 file creation. 2. #GSORT: A sorting utility to sort the input file (<code>?13?</code>) and produce a sorted output (<code>?9?AP780S</code>). 3. AP781: Processes the sorted data to prepare it for the final 1099 file. 4. AP780: Generates the final 1099 file (<code>AP1099</code> or <code>?9?AP1099</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables): 1. GSTABL (or <code>?9?GSTABL</code>): A table file opened with shared access, likely containing configuration or reference data. 2. APVEND (label <code>?13?</code>, e.g., <code>APVN2012</code>): The input vendor file containing A/P data before totals are cleared. 3. AP780S (label <code>?9?AP780S</code>): A temporary sorted output file from the <code>#GSORT</code> program. 4. AP781 (label <code>?9?AP781</code>): A temporary file used by the <code>AP781</code> program for intermediate processing. 5. AP1099 (or <code>?9?AP1099</code>): The final 1099 output file. 6. AP1099I (or <code>?9?AP1099I</code>): An index file for <code>AP1099</code> or <code>?9?AP1099</code>. 7. IRSTAX (or <code>?9?IRSTAX</code>): A file that may store tax-related data, deleted if it exists. 8. AP10?10? (or <code>?9?AP1?10?</code>, e.g., <code>AP102012</code> or <code>TESTAP12012</code>): The final copied 1099 data file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#summary","title":"Summary","text":"<p>The <code>AP780</code> OCL program orchestrates the creation of an IRS 1099 file by: - Validating input parameters and files. - Allowing user updates via DFU. - Sorting vendor data, processing it through intermediate steps, and generating the final 1099 file. - Managing file deletions and indexing for efficient data access. - Supporting both production (<code>?9?/G</code>) and test environments.</p> <p>The program relies on external programs (<code>AP780P</code>, <code>#GSORT</code>, <code>AP781</code>, <code>AP780</code>) and multiple files for data storage and processing, ensuring the output is suitable for IRS electronic submission.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/","title":"AP780 RPG36","text":"<p>The provided document, <code>AP780.rpg36.txt</code>, is an RPG (Report Program Generator) program for an IBM System/3x or AS/400 system, called by the main OCL program (<code>AP780.ocl36.txt</code>) to finalize the creation of an IRS 1099 file (<code>AP1099</code>) for electronic submission. This program processes the preprocessed vendor data from the <code>AP781</code> file to generate IRS-compliant records, including Transmitter (\"T\"), Payer (\"A\"), Payee (\"B\"), End of Payer (\"C\"), and End of Transmission (\"F\") records. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs of the <code>AP780</code> RPG program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#process-steps-of-the-ap780-rpg-program","title":"Process Steps of the AP780 RPG Program","text":"<p>The <code>AP780</code> program reads the <code>AP781</code> file, which contains consolidated vendor records, and generates a formatted <code>AP1099</code> file with IRS-specified record types. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (ONCE Block):</li> <li>The program checks if the <code>ONCE</code> variable is zero (first execution):<ul> <li>Initializes counters and fields:</li> <li><code>RECSEQ</code> (record sequence number, 8 digits): Set to zero (JB02 revision).</li> <li><code>ZERO03</code>, <code>ZERO04</code>, <code>ZERO06</code>, <code>ZERO12</code>, <code>ZERO15</code> (zero-filled fields of various lengths): Set to zero.</li> <li><code>Z1</code> (1-digit zero): Set to zero.</li> <li><code>BLNK04</code>, <code>BLNK05</code>, <code>BLNK06</code>, <code>BLNK07</code>, <code>BLNK08</code>, <code>BLNK10</code>, <code>BLNK11</code>, <code>BLNK15</code>, <code>BLNK20</code>, <code>BLNK40</code>, <code>BLNK45</code>, <code>BLNK48</code>, <code>BLNK60</code>, <code>BLNK76</code>, <code>BLN115</code> (blank fields of various lengths): Set to blanks.</li> <li>Increments <code>RECSEQ</code> by 1 for the first record.</li> <li>Writes the Transmitter \"T\" Record to <code>AP1099</code> using the <code>ADDT</code> exception output (see Outputs section for details).</li> <li>Sets <code>ONCE</code> to 1 to prevent re-execution.</li> </ul> </li> <li> <p>The \"T\" record contains transmitter information (e.g., company name, tax ID, contact details) and is written once at the start of the file.</p> </li> <li> <p>Process Vendor Records (L1 Level Loop):</p> </li> <li> <p>For each vendor record in <code>AP781</code> (grouped by vendor using level-break <code>L1</code>):</p> <ul> <li>Initializes variables:</li> <li>Increments <code>TOTA</code> (count of Payer \"A\" records, 8 digits) by 1.</li> <li>Resets <code>COUNT</code> (count of Payee \"B\" records for the current payer, 8 digits) to zero.</li> <li>Resets control totals (<code>TOTGR1</code>, <code>TOTGR2</code>, <code>TOTGR3</code>, <code>TOTGR6</code>, <code>TOTGR7</code>, 15 digits, 2 decimals) to zero.</li> <li>Clears <code>TYPE</code> (2 characters, form type) to blanks (FL01 revision).</li> <li>Turns off indicators 31, 32, 33, 34 (form type indicators), and 41, 46, 47, 51, 56, 57 (box-specific indicators).</li> <li>Determines the 1099 form type based on <code>VN1099</code> (A/P 1099 code, position 2):</li> <li>If <code>VN1099 = 'D'</code> (Dividend):<ul> <li>Sets <code>TYPE = '1 '</code> (1099-DIV, FL01).</li> <li>Sets indicator 31 on.</li> </ul> </li> <li>If <code>VN1099 = 'I'</code> (Interest):<ul> <li>Sets <code>TYPE = '6 '</code> (1099-INT, FL01).</li> <li>Sets indicator 32 on.</li> </ul> </li> <li>If <code>VN1099 = 'M'</code> (Miscellaneous):<ul> <li>Sets <code>TYPE = 'A '</code> (1099-MISC, FL01).</li> <li>Sets indicator 33 on.</li> </ul> </li> <li>If <code>VN1099 = 'N'</code> (Non-Employee Compensation):<ul> <li>Sets <code>TYPE = 'NE'</code> (1099-NEC, FL01, added by MG04).</li> <li>Sets indicator 34 on.</li> </ul> </li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the Payer \"A\" Record to <code>AP1099</code> using the <code>ADDA</code> exception output, containing payer information (e.g., company name, tax ID, form type).</li> <li>Processes payee data:</li> <li>Handles name and payee logic (JB02, JB03, JK01 revisions):<ul> <li>Clears <code>NAM4</code> (name control, 4 characters) and <code>PYN1</code>, <code>PYN2</code> (payee names, 40 characters each).</li> <li>Sets <code>NAM4</code> to <code>VNNMCT</code> (IRS name control, JK01).</li> <li>If <code>VNPYN1</code> (payee name 1) is blank:</li> <li>If <code>NAM4</code> is blank, sets <code>NAM4</code> to <code>VNNAM4</code> (sort abbreviation).</li> <li>Sets <code>PYN1</code> to <code>VNNAME</code> (vendor name).</li> <li>If <code>VNNOVF = 'Y'</code> (name overflow, JB03):<ul> <li>Sets <code>PYN2</code> to <code>VNADD1</code> (address line 1 as name continuation).</li> <li>Moves <code>VNADD2</code> to <code>VNADD1</code>, clears <code>VNADD2</code>.</li> <li>Sets indicator 72 on.</li> </ul> </li> <li>If <code>VNPYN1</code> is not blank:</li> <li>If <code>NAM4</code> is blank, sets <code>NAM4</code> to <code>VNNAM4</code>.</li> <li>Sets <code>PYN1</code> to <code>VNPYN1</code>, sets indicator 71 on.</li> <li>If <code>VNPYN2</code> is not blank, sets <code>PYN2</code> to <code>VNPYN2</code>, sets indicator 72 on.</li> </ul> </li> <li>Checks tax ID type (<code>VNDASH</code>, position 119):<ul> <li>If <code>VNDASH = '-'</code> (indicator 20 on), indicates a business EIN; otherwise, assumes an individual SSN.</li> </ul> </li> <li>Accumulates control totals based on form type and box numbers:<ul> <li>For 1099-DIV (indicator 31):</li> <li>Adds <code>VNAMT1</code> (first box amount) to <code>TOTGR1</code> and <code>TOTGR2</code>.</li> <li>For 1099-INT (indicator 32):</li> <li>Adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>For 1099-MISC (indicator 33):</li> <li>If <code>BOX1 = 1</code> (Rents), sets indicator 41, adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX1 = 3</code> (Other Income), sets indicator 43, adds <code>VNAMT1</code> to <code>TOTGR3</code>.</li> <li>If <code>BOX1 = 6</code> (Medical Payments), sets indicator 46, adds <code>VNAMT1</code> to <code>TOTGR6</code>.</li> <li>If <code>BOX2 = 1</code> (Rents), sets indicator 51, adds <code>VNAMT2</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX2 = 3</code> (Other Income), sets indicator 53, adds <code>VNAMT2</code> to <code>TOTGR3</code>.</li> <li>If <code>BOX2 = 6</code> (Medical Payments), sets indicator 56, adds <code>VNAMT2</code> to <code>TOTGR6</code>.</li> <li>For 1099-NEC (indicator 34):</li> <li>If <code>BOX1 = 1</code> (Nonemployee Compensation), sets indicator 47, adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX2 = 1</code>, sets indicator 57, adds <code>VNAMT2</code> to <code>TOTGR1</code>.</li> </ul> </li> <li>Copies <code>VNAMT1</code> and <code>VNAMT2</code> to <code>VXAMT1</code> and <code>VXAMT2</code> (12 digits, 2 decimals) for output.</li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the Payee \"B\" Record to <code>AP1099</code> using the <code>ADDB</code> exception output, containing vendor details (e.g., tax ID, name, address, payment amounts).</li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the End of Payer \"C\" Record to <code>AP1099</code> using the <code>ADDL1</code> exception output, summarizing the number of payees (<code>COUNT</code>) and control totals (<code>TOTGR1</code>, <code>TOTGR3</code>, <code>TOTGR6</code>, <code>TOTGR7</code>).</li> </ul> </li> <li> <p>End of Transmission (LR Indicator):</p> </li> <li>When the last record is processed (<code>LR</code> indicator on):<ul> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the End of Transmission \"F\" Record to <code>AP1099</code> using the <code>ADDLR</code> exception output, indicating the total number of Payer \"A\" records (<code>TOTA</code>) and closing the file.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP780</code> program enforces the following business rules for IRS 1099 file creation: 1. IRS Record Structure:    - Generates a file with five record types per IRS specifications:      - T Record: One per file, containing transmitter information (company name, tax ID, contact, etc.).      - A Record: One per 1099 form type (DIV, INT, MISC, NEC), containing payer information.      - B Record: One per vendor, containing payee details (tax ID, name, address, payment amounts).      - C Record: One per Payer \"A\" record, summarizing payee count and control totals.      - F Record: One per file, marking the end of transmission.    - Each record is 750 bytes, padded with blanks or zeros as required.</p> <ol> <li>Form Type Mapping:</li> <li>Maps <code>VN1099</code> codes to IRS form types:<ul> <li><code>'D'</code> \u2192 1099-DIV (<code>TYPE = '1 '</code>, indicator 31).</li> <li><code>'I'</code> \u2192 1099-INT (<code>TYPE = '6 '</code>, indicator 32).</li> <li><code>'M'</code> \u2192 1099-MISC (<code>TYPE = 'A '</code>, indicator 33).</li> <li><code>'N'</code> \u2192 1099-NEC (<code>TYPE = 'NE'</code>, indicator 34, added by MG04).</li> </ul> </li> <li> <p>Supports multiple form types in a single file, with separate \"A\" and \"C\" records for each.</p> </li> <li> <p>Payment Amount Allocation:</p> </li> <li>Allocates payment amounts (<code>VNAMT1</code>, <code>VNAMT2</code>) to IRS-specified boxes based on <code>BOX1</code> and <code>BOX2</code>:<ul> <li>1099-MISC: Box 1 (Rents), Box 3 (Other Income), Box 6 (Medical Payments), Box 7 (Nonemployee Compensation).</li> <li>1099-NEC: Box 1 (Nonemployee Compensation).</li> <li>1099-DIV: Box 1 (Ordinary Dividends), Box 2 (Capital Gains).</li> <li>1099-INT: Box 1 (Interest Income).</li> </ul> </li> <li> <p>Accumulates control totals (<code>TOTGR1</code>, <code>TOTGR3</code>, <code>TOTGR6</code>) for specific boxes in the \"C\" record.</p> </li> <li> <p>Tax ID Handling:</p> </li> <li>Identifies tax ID type based on <code>VNDASH</code> (<code>'-'</code> for EIN, otherwise SSN).</li> <li>Formats tax ID (<code>VNID11</code>, <code>VNID12</code>, <code>VNID13</code> for SSN; <code>VNID21</code>, <code>VNID22</code> for EIN) in the \"B\" record.</li> <li> <p>Uses transmitter and payer tax IDs (<code>ID1</code>, <code>ID2</code>) from <code>UDS</code> for \"T\" and \"A\" records.</p> </li> <li> <p>Name and Payee Logic:</p> </li> <li>Prefers payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) over vendor name (<code>VNNAME</code>) if provided (JB02).</li> <li>Uses name overflow (<code>VNNOVF = 'Y'</code>) to continue vendor name with address line 1 (<code>VNADD1</code>) in <code>PYN2</code>, shifting <code>VNADD2</code> to <code>VNADD1</code> (JB03).</li> <li> <p>Uses IRS name control (<code>VNNMCT</code>, JK01) or sort abbreviation (<code>VNNAM4</code>) in <code>NAM4</code> for \"B\" records, ensuring IRS compliance.</p> </li> <li> <p>Sequence Numbering:</p> </li> <li> <p>Assigns a unique sequence number (<code>RECSEQ</code>) to each record (\"T\", \"A\", \"B\", \"C\", \"F\"), incremented sequentially (JB02).</p> </li> <li> <p>Zero and Blank Padding:</p> </li> <li>Fills unused numeric fields with zeros (e.g., <code>ZERO12</code> for payment amounts) and unused character fields with blanks (e.g., <code>BLNK40</code>) per IRS requirements (JB02).</li> <li> <p>Ensures fixed-length records (750 bytes) with proper padding.</p> </li> <li> <p>IRS Compliance:</p> </li> <li>Includes fields like name control, foreign entity indicators, and contact information to meet IRS electronic filing standards.</li> <li>Supports 1099-NEC (added by MG04 in 2021) alongside 1099-MISC, 1099-DIV, and 1099-INT.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>None: The <code>AP780</code> program does not use any table files (e.g., <code>GSTABL</code> as used in <code>AP780P</code>). It relies entirely on the input file <code>AP781</code> and user data structure (<code>UDS</code>) for processing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP780</code> program does not call any external RPG or OCL programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and performs its tasks independently, reading from <code>AP781</code> and writing to <code>AP1099</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 File:</li> <li>Purpose: The final IRS 1099 file for electronic submission, containing formatted records per IRS specifications.</li> <li>Record Length: 750 bytes per record, padded with blanks or zeros.</li> <li> <p>Record Types:</p> <ul> <li>Transmitter \"T\" Record (<code>ADDT</code>, written once):</li> <li>Position 1: <code>'T'</code>.</li> <li>Positions 2-5: <code>YEAR</code> (four-digit year, e.g., 2025).</li> <li>Position 6: Blank (no prior year indicator).</li> <li>Positions 7-8: <code>ID1</code> (transmitter tax ID part 1).</li> <li>Positions 9-15: <code>ID2</code> (transmitter tax ID part 2).</li> <li>Positions 16-20: <code>'28Q01'</code> (transmitter code).</li> <li>Positions 21-27: Blanks (replacement file code, test file indicator).</li> <li>Position 28: Blank (foreign entity indicator).</li> <li>Positions 29-58: <code>HEAD1</code> (transmitter name).</li> <li>Positions 59-258: Blanks, <code>HEAD1</code>, <code>HEAD2</code>, <code>HDCITY</code>, <code>HDSTAT</code>, <code>HDZIP</code> (address fields).</li> <li>Positions 259-303: <code>TOTB</code> (total payees, from <code>UDS</code>).</li> <li>Positions 304-323: <code>CNTACT</code> (contact name).</li> <li>Positions 324-353: <code>CNTPH#</code> (contact phone).</li> <li>Positions 354-507: Blanks, <code>RECSEQ</code> (sequence number, JB02).</li> <li>Position 518: <code>'I'</code> (inhouse software indicator, JB02).</li> <li>Positions 519-750: Blanks.</li> <li>Payer \"A\" Record (<code>ADDA</code>, one per form type):</li> <li>Position 1: <code>'A'</code>.</li> <li>Positions 2-5: <code>YEAR</code>.</li> <li>Position 6: Blank (combined federal/state indicator, FL01).</li> <li>Positions 7-11: Blanks.</li> <li>Positions 12-13: <code>ID1</code> (payer tax ID part 1).</li> <li>Positions 14-20: <code>ID2</code> (payer tax ID part 2).</li> <li>Positions 21-24: <code>'AMER'</code> (payer name control).</li> <li>Position 25: Blank (last filing indicator).</li> <li>Positions 26-27: <code>TYPE</code> (form type: <code>'1 '</code>, <code>'6 '</code>, <code>'A '</code>, <code>'NE'</code>).</li> <li>Positions 28-43: Form-specific code (e.g., <code>'12 '</code> for 1099-DIV, <code>'13 '</code> for 1099-MISC, <code>'1 '</code> for 1099-NEC).</li> <li>Positions 44-51: Blanks, foreign entity indicator.</li> <li>Positions 52-224: <code>HEAD1</code>, <code>HEAD2</code>, <code>HDCITY</code>, <code>HDSTAT</code>, <code>HDZIP</code>, <code>CNTPH#</code> (payer details).</li> <li>Positions 225-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> <li>Payee \"B\" Record (<code>ADDB</code>, one per vendor):</li> <li>Position 1: <code>'B'</code>.</li> <li>Positions 2-5: <code>YEAR</code>.</li> <li>Position 6: Blank (no corrections).</li> <li>Positions 7-10: <code>NAM4</code> (name control, <code>VNNMCT</code> or <code>VNNAM4</code>).</li> <li>Position 11: <code>'1'</code> (EIN) or <code>'2'</code> (SSN) based on <code>VNDASH</code>.</li> <li>Positions 12-20: <code>VNID11</code>, <code>VNID12</code>, <code>VNID13</code> (SSN) or <code>VNID21</code>, <code>VNID22</code> (EIN).</li> <li>Positions 21-25: <code>VNVEND</code> (vendor number, JB03).</li> <li>Positions 26-54: Blanks.</li> <li>Positions 55-66: <code>VXAMT1</code> (payment amount 1, based on form/box).</li> <li>Positions 67-78: <code>VXAMT1</code> or <code>VXAMT2</code> (payment amount 2, if applicable).</li> <li>Positions 79-258: Zero-filled payment amounts (3 to J), populated based on <code>BOX1</code>, <code>BOX2</code>.</li> <li>Position 287: Blank (foreign entity indicator).</li> <li>Positions 288-327: <code>PYN1</code> (payee name 1 or vendor name).</li> <li>Positions 328-367: <code>PYN2</code> (payee name 2 or name continuation).</li> <li>Positions 368-494: <code>VNADD1</code>, <code>CITY</code>, <code>STATE</code>, <code>ZIP5</code> (payee address).</li> <li>Positions 495-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Form-specific fields (e.g., direct sales indicator for 1099-MISC/NEC), blanks.</li> <li>End of Payer \"C\" Record (<code>ADDL1</code>, one per \"A\" record):</li> <li>Position 1: <code>'C'</code>.</li> <li>Positions 2-9: <code>COUNT</code> (number of \"B\" records for this payer).</li> <li>Positions 10-15: Blanks.</li> <li>Positions 16-33: <code>TOTGR1</code> (control total 1, e.g., Rents, Nonemployee Compensation).</li> <li>Positions 34-51: <code>TOTGR2</code> (control total 2, e.g., Dividends).</li> <li>Positions 52-69: <code>TOTGR3</code> (control total 3, e.g., Other Income).</li> <li>Positions 70-123: Zeroes, <code>TOTGR6</code> (control total 6, e.g., Medical Payments).</li> <li>Positions 124-339: Zeroes, <code>TOTGR7</code> (control total 7, if applicable).</li> <li>Positions 340-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> <li>End of Transmission \"F\" Record (<code>ADDLR</code>, written once):</li> <li>Position 1: <code>'F'</code>.</li> <li>Positions 2-9: <code>TOTA</code> (number of \"A\" records).</li> <li>Positions 10-30: Zeroes.</li> <li>Positions 31-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> </ul> </li> <li> <p>TOTB Field (in UDS):</p> </li> <li>Purpose: Tracks the total number of payees, used in the \"T\" record.</li> <li>Location: Positions 201-208 in the user data structure (<code>UDS</code>), 8 digits, no decimals.</li> <li>Source: Set by <code>AP781</code> and passed through <code>UDS</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/","title":"AP780P RPG36","text":"<p>The provided document, <code>AP780P.rpg36.txt</code>, is an RPG (Report Program Generator) program for an IBM System/3x or AS/400 system, called by the main OCL program (<code>AP780.ocl36.txt</code>) to perform initial validation and processing for creating an IRS 1099 file. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs of the <code>AP780P</code> RPG program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#process-steps-of-the-ap780p-rpg-program","title":"Process Steps of the AP780P RPG Program","text":"<p>The <code>AP780P</code> program validates user input for creating an IRS 1099 file, specifically focusing on company and vendor data used in the 1099-MISC file generation process. It uses a display file (<code>SCREEN</code>) for user interaction and a table file (<code>GSTABL</code>) for validation. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Set Indicators Off: The program begins by resetting indicators 81, 90, 91, 92, 93, 94, 95, 96, and 97 (<code>SETOF 819091</code>, <code>SETOF 929394</code>, <code>SETOF 959697</code>) to ensure a clean state.</li> <li> <p>Clear Error Message: The message field <code>MSGE</code> (40 characters) is cleared to blanks (<code>MOVEL*BLANKS MSGE</code>).</p> </li> <li> <p>Check for Test Environment (KG Indicator):</p> </li> <li>If the <code>KG</code> indicator is on (likely set by the OCL program when <code>?9?</code> indicates a test environment, e.g., <code>?9?=TEST</code>):<ul> <li>Indicator 81 is turned off (<code>SETOF 81</code>).</li> <li>Indicator <code>U1</code> (user indicator) and <code>LR</code> (last record) are turned on (<code>SETON U1LR</code>).</li> <li>The program jumps to the <code>END</code> tag, bypassing further processing and effectively terminating early.</li> </ul> </li> <li> <p>This ensures no validation or screen interaction occurs in a test environment, possibly to avoid unintended changes.</p> </li> <li> <p>Set Indicator 60:</p> </li> <li> <p>Indicator 60 is turned on (<code>SETON 60</code>), likely used to control display file behavior or program flow, though its specific purpose is not detailed in the code.</p> </li> <li> <p>Check for Screen Input (Indicator 09):</p> </li> <li>If indicator 09 is on (indicating input from the <code>SCREEN</code> file, format <code>AP780PS1</code>):<ul> <li>Sets indicator 81 and 94 (<code>SETON 8194</code>).</li> <li>Sets the <code>CURLST</code> field to <code>'C'</code> (indicating \"current\" list).</li> <li>Jumps to the <code>END</code> tag, skipping further processing.</li> </ul> </li> <li> <p>This suggests that if the screen has already been processed, the program assumes default values or skips validation.</p> </li> <li> <p>Execute Validation Subroutine (SUBSC1):</p> </li> <li> <p>If indicator 09 is not on, the program calls the <code>SUBSC1</code> subroutine (<code>EXSR SUBSC1</code>) to validate input fields from the <code>SCREEN</code> file or user data structure (<code>UDS</code>).</p> </li> <li> <p>SUBSC1 Subroutine (Validation Logic):    The <code>SUBSC1</code> subroutine validates key fields required for the 1099 file. Each validation step checks for specific conditions, sets error indicators, and assigns error messages if validation fails. If any validation fails, the program jumps to <code>ENDSC1</code> to exit the subroutine.</p> </li> <li> <p>Validate HEAD1 (Company Name):</p> <ul> <li>Checks if <code>HEAD1</code> (positions 3-32, company name) is blank (<code>COMP *BLANKS</code>).</li> <li>If blank, sets indicators 81 and 91 (<code>SETON 8191</code>), moves message \"FIRST HEADING CANNOT BE BLANK\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate HEAD2 (Address Line):</p> <ul> <li>Checks if <code>HEAD2</code> (positions 33-62, address line) is blank.</li> <li>If blank, sets indicators 81 and 92 (<code>SETON 8192</code>), moves message \"SECOND HEADING CANNOT BE BLANK\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate ID# (Tax ID):</p> <ul> <li>Checks if <code>ID#</code> (positions 103-112, tax ID) is blank.</li> <li>If blank, sets indicators 81 and 93 (<code>SETON 8193</code>), moves message \"ID# CANNOT BE BLANK - TRY AGAIN!\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate YEAR:</p> <ul> <li>Checks if <code>YEAR</code> (positions 121-124, four-digit year) is zero (<code>COMP 0</code>).</li> <li>If zero, sets indicators 81 and 95 (<code>SETON 8195</code>), moves message \"ENTER VALID YEAR\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate CURLST (Current/Last List Indicator):</p> <ul> <li>Checks if <code>CURLST</code> (position 125, current/last list flag) is neither <code>'C'</code> nor <code>'L'</code> (<code>COMP 'C'</code> and <code>COMP 'L'</code>).</li> <li>If invalid, sets indicators 81 and 96 (<code>SETON 8196</code>), moves message \"ENTER 'C'-CURR OR 'L'-LAST\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate FORM (1099 Form Type):</p> <ul> <li>Constructs a key <code>TBLKEY</code> (12 characters) by combining the literal <code>'AP1099'</code> with the <code>FORM</code> field (position 160, e.g., <code>'C'</code> for 1099-MISC).</li> <li>Performs a <code>CHAIN</code> operation on the <code>GSTABL</code> file using <code>TBLKEY</code> to check if the form type exists in the table.</li> <li>If the record is not found (indicator 90 on), sets indicators 81 and 97 (<code>SETON 8197</code>), moves message \"INVALID FORM TYPE\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>End Subroutine (ENDSC1):</p> </li> <li> <p>The <code>ENDSC1</code> tag marks the end of the <code>SUBSC1</code> subroutine. If any validation fails, the program exits the subroutine and proceeds to output the screen with the error message.</p> </li> <li> <p>Output to SCREEN:</p> </li> <li>If indicator 81 is on (indicating a validation error or first-time display), the program writes to the <code>SCREEN</code> file using format <code>AP780PS1</code>.</li> <li>Outputs the following fields:<ul> <li><code>HEAD1</code> (company name, positions 1-30).</li> <li><code>HEAD2</code> (address line, positions 31-60).</li> <li><code>CITY</code> (city, positions 61-89).</li> <li><code>STATE</code> (state, positions 90-91).</li> <li><code>ZIP</code> (zip code, positions 92-100).</li> <li><code>ID#</code> (tax ID, positions 101-110).</li> <li><code>ENTAMT</code> (entered amount, positions 113-118, zoned decimal).</li> <li><code>YEAR</code> (year, positions 119-122).</li> <li><code>CURLST</code> (current/last flag, position 123).</li> <li><code>MSGE</code> (error message, positions 124-163).</li> <li><code>FORM</code> (form type, position 164).</li> </ul> </li> <li> <p>The screen displays these fields for user input or correction, along with any error message from validation failures.</p> </li> <li> <p>Program Termination (END Tag):</p> </li> <li>The program reaches the <code>END</code> tag, either after validation, screen output, or early termination (e.g., test environment or indicator 09).</li> <li>If <code>U1</code> and <code>LR</code> are on (set in the test environment case), the program terminates, potentially signaling an error to the calling OCL program via <code>SWITCH1-1</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP780P</code> program enforces the following business rules for 1099 file creation: 1. Mandatory Fields:    - The company name (<code>HEAD1</code>), address line (<code>HEAD2</code>), and tax ID (<code>ID#</code>) must not be blank, as they are critical for IRS 1099 reporting.    - The year (<code>YEAR</code>) must be a valid non-zero value (e.g., 2025).    - The current/last list flag (<code>CURLST</code>) must be either <code>'C'</code> (current) or <code>'L'</code> (last), indicating the type of vendor list to process.    - The form type (<code>FORM</code>) must exist in the <code>GSTABL</code> table, ensuring only valid 1099 form types (e.g., <code>'C'</code> for 1099-MISC) are processed.</p> <ol> <li>Error Handling:</li> <li>If any validation fails, an appropriate error message is displayed on the screen, and indicators 81 and a specific error indicator (91-97) are set to highlight the issue.</li> <li> <p>The program prevents further processing until all validations pass, ensuring data integrity for the 1099 file.</p> </li> <li> <p>Test Environment Handling:</p> </li> <li> <p>In a test environment (indicated by <code>KG</code>), the program skips validation and screen interaction, setting <code>U1</code> and <code>LR</code> to signal early termination, likely to avoid modifying production data.</p> </li> <li> <p>Screen Interaction:</p> </li> <li>The program uses the <code>SCREEN</code> file (format <code>AP780PS1</code>) to interact with the user, displaying input fields and error messages.</li> <li>If the screen has already been processed (indicator 09), it defaults <code>CURLST</code> to <code>'C'</code> and skips further validation, assuming prior input is valid.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li><code>GSTABL</code>:</li> <li>Type: Input file (<code>IF</code>), fixed format, 256 bytes per record, 256 records, with an alternate index (<code>AI</code>) on 12 bytes.</li> <li>Fields:<ul> <li><code>TBDEL</code> (position 1): Delete flag ('D' for deleted records).</li> <li><code>TBTYPE</code> (positions 2-7): Table type.</li> <li><code>TBCODE</code> (positions 8-13): Table code.</li> <li><code>TBDESC</code> (positions 14-43): Table description.</li> </ul> </li> <li>Usage: The program uses <code>GSTABL</code> to validate the <code>FORM</code> field by constructing a key (<code>TBLKEY</code>) combining <code>'AP1099'</code> and <code>FORM</code> (e.g., <code>'AP1099C'</code> for 1099-MISC). The <code>CHAIN</code> operation checks if the form type exists in the table.</li> <li>Access: Accessed via a <code>CHAIN</code> operation with a 12-byte key.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP780P</code> program does not explicitly call any external RPG or OCL programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and performs its tasks independently, relying on file I/O and user interaction via the <code>SCREEN</code> file.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>SCREEN File (AP780PS1 Format):</li> <li>Purpose: Displays input fields and error messages to the user for validation or correction.</li> <li>Fields Output:<ul> <li><code>HEAD1</code>: Company name (30 characters).</li> <li><code>HEAD2</code>: Address line (30 characters).</li> <li><code>CITY</code>: City (29 characters).</li> <li><code>STATE</code>: State (2 characters).</li> <li><code>ZIP</code>: Zip code (9 characters).</li> <li><code>ID#</code>: Tax ID (10 characters).</li> <li><code>ENTAMT</code>: Entered amount (8 bytes, zoned decimal, 2 decimal places).</li> <li><code>YEAR</code>: Four-digit year (4 bytes, zoned decimal).</li> <li><code>CURLST</code>: Current/last flag (1 character, 'C' or 'L').</li> <li><code>MSGE</code>: Error message (40 characters).</li> <li><code>FORM</code>: 1099 form type (1 character, e.g., 'C' for 1099-MISC).</li> </ul> </li> <li> <p>Conditions: Written when indicator 81 is on (first-time display or validation error).</p> </li> <li> <p>Indicators:</p> </li> <li>Indicator 81: Set on for screen output or validation errors, signaling the calling OCL program (<code>AP780.ocl36.txt</code>) to display the screen.</li> <li>Indicators 91-97: Set to indicate specific validation errors (e.g., 91 for blank <code>HEAD1</code>, 93 for blank <code>ID#</code>, etc.).</li> <li> <p>U1 and LR: Set in test environment (<code>KG</code> on) to indicate early termination, potentially setting <code>SWITCH1-1</code> in the OCL program to signal an error or bypass condition.</p> </li> <li> <p>No Direct File Output:</p> </li> <li>The program does not directly create or update any data files (e.g., <code>AP1099</code> or <code>APVNYYYY</code>). Its primary role is to validate input data, which is then used by subsequent programs (<code>AP781</code>, <code>AP780</code>) in the OCL process to generate the 1099 file.</li> <li>The validated data is likely stored in the <code>SCREEN</code> file or user data structure (<code>UDS</code>) and passed back to the OCL program for further processing.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Purpose in the OCL Workflow: <code>AP780P</code> serves as the initial validation step in the 1099 file creation process, ensuring that critical fields (company name, address, tax ID, year, list type, and form type) are valid before subsequent programs (<code>#GSORT</code>, <code>AP781</code>, <code>AP780</code>) process the vendor data.</li> <li>Form Type Limitation: The program is designed for 1099-MISC (likely indicated by <code>FORM='C'</code>), as noted in the OCL program. Other 1099 types would require modifications to the validation logic and <code>GSTABL</code> table.</li> <li>Table Dependency: The <code>GSTABL</code> table is critical for validating the <code>FORM</code> field, and its absence or incorrect data could cause validation failures.</li> <li>Error Handling: The program provides clear, user-friendly error messages via the <code>SCREEN</code> file, ensuring users can correct invalid inputs.</li> <li>Test Environment: The <code>KG</code> indicator allows the program to bypass processing in a test environment, preventing unintended data changes, which is a common practice in legacy systems to separate test and production workflows.</li> </ul> <p>This RPG program is a critical front-end component of the 1099 creation process, ensuring data integrity through rigorous input validation before the main file processing occurs in the OCL-driven workflow.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/","title":"AP781 RPG36","text":"<p>The <code>AP781.rpg36.txt</code> is an RPG/36 program invoked by the main OCL program (<code>AP780.ocl36.txt</code>) to preprocess Accounts Payable (A/P) vendor data for IRS 1099 file creation. It consolidates vendor data from the <code>APVEND</code> file, using the sorted <code>AP780S</code> file to ensure one record per vendor, and produces the <code>AP781</code> output file for further processing by <code>AP780</code>. Below, I\u2019ll detail the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#process-steps-of-the-ap781-rpg-program","title":"Process Steps of the AP781 RPG Program","text":"<p>The <code>AP781</code> program processes sorted vendor data from the <code>AP780S</code> file and the original vendor file <code>APVEND</code> to create a consolidated output file <code>AP781</code>, which is used in subsequent steps to generate the IRS 1099 file. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines input files <code>APVEND</code> (primary vendor file) and <code>AP780S</code> (sorted input file), and an output file <code>AP781</code>.</li> <li>It uses level-break logic (<code>L1</code>) to process records grouped by vendor, ensuring one output record per vendor.</li> <li> <p>Initializes working fields (<code>L1AMT1</code>, <code>L1AMT2</code>, <code>BOX1</code>, <code>BOX2</code>) to zero at the start of each vendor group (<code>L1</code> level) using <code>Z-ADD*ZEROS</code>.</p> <ul> <li>Files:</li> <li><code>APVEND</code>: Primary input file (579 bytes, indexed), containing vendor data.</li> <li><code>AP780S</code>: Secondary input file (30 bytes, indexed by 3-byte key), used to identify vendors for processing.</li> <li><code>AP781</code>: Output file (320 bytes), storing consolidated vendor data.</li> <li>Input Record (APVEND):</li> <li><code>VNDEL</code> (1): Delete code.</li> <li><code>VNCO</code> (2\u20133): Company number.</li> <li><code>VNVENDL1</code> (4\u20138): Vendor number.</li> <li><code>VNNAME</code> (9\u201338): Vendor name.</li> <li><code>VNADD1</code> (39\u201368): Address line 1.</li> <li><code>VNADD2</code> (69\u201398): Address line 2.</li> <li><code>VNADD3</code> (99\u2013128): Address line 3.</li> <li><code>VNADD4</code> (129\u2013158): Address line 4.</li> <li><code>VNZIP5</code> (159\u2013163, zoned): 5-digit ZIP code.</li> <li><code>VNSRT4</code> (168\u2013171): Alpha sort abbreviation.</li> <li><code>VNNOVF</code> (216): Name overflow indicator (<code>Y</code> if address used for name continuation).</li> <li><code>VNYTDP</code> (242\u2013247, packed): Current year-to-date paid amount.</li> <li><code>VNLYDP</code> (248\u2013253, packed): Last year-to-date paid amount.</li> <li><code>VN1099L2</code> (264): 1099 code (<code>D</code>, <code>I</code>, <code>M</code>, <code>N</code>).</li> <li><code>VNID#</code> (265\u2013275): 1099 tax ID.</li> <li><code>VNBOX1</code> (276\u2013277, zoned): First 1099 box number.</li> <li><code>VNBOX2</code> (278\u2013279, zoned): Second 1099 box number.</li> <li><code>VNB2AM</code> (280\u2013285, packed): Second 1099 box amount.</li> <li><code>VNPYN1</code> (300\u2013339): Payee name 1.</li> <li><code>VNPYN2</code> (340\u2013379): Payee name 2.</li> <li><code>VNNMCT</code> (380\u2013383): IRS name control.</li> <li><code>VNFNAM</code> (418\u2013437): First name.</li> <li><code>VNMNAM</code> (438\u2013457): Middle name.</li> <li><code>VNLNAM</code> (458\u2013487): Business/last name.</li> <li><code>VNSUFF</code> (488\u2013491): Name suffix.</li> <li>Data Structures:</li> <li><code>ADD2</code> (30): Temporary field for address processing.</li> <li><code>CITY</code> (1\u201320): Extracted city name.</li> <li><code>CTY</code> (1\u201320): Temporary city field.</li> <li><code>STATE</code> (2): Extracted state code.</li> <li>User Data Structure (UDS):</li> <li><code>ENTAMT</code> (111\u2013118, zoned): Entered amount threshold.</li> <li><code>CURLST</code> (123): Current (<code>C</code>) or last (<code>L</code>) year indicator.</li> <li><code>TOTB</code> (201\u2013208, zoned): Total count of records written.</li> <li>External Description:</li> <li><code>AP780S</code> links to <code>APVEND</code> for matching vendor records.</li> </ul> </li> <li> <p>Extract State and City (GETSTA Subroutine):</p> </li> <li>For each vendor record (<code>L1</code> level), the program calls the <code>GETSTA</code> subroutine to parse the city and state from the vendor\u2019s address fields (<code>VNADD2</code>, <code>VNADD3</code>, or <code>VNADD4</code>).</li> <li>Logic:<ul> <li>Clears <code>STATE</code>, <code>CITY</code>, and <code>ADD2</code> fields to blanks.</li> <li>Checks address fields in reverse priority (<code>VNADD4</code>, <code>VNADD3</code>, <code>VNADD2</code>) for non-blank values, copying the first non-blank field to <code>ADD2</code>.</li> <li>If no address fields are found, skips to <code>ENDSTA</code>.</li> <li>Parses <code>ADD2</code> to extract the state:</li> <li>Reads backward from position 30 to find the first letter (A-Z), which is assumed to be the start of the state code (e.g., \"PA\").</li> <li>Extracts the state (2 characters) into <code>STATE</code>.</li> <li>Parses <code>ADD2</code> to extract the city:</li> <li>Reads backward from the state\u2019s position to find a space or comma, marking the end of the city.</li> <li>Copies characters from the start of <code>ADD2</code> to the delimiter into <code>CTY</code> (city field).</li> </ul> </li> <li> <p>Output: Populates <code>STATE</code> (2 characters) and <code>CITY</code> (20 characters) for use in the output record.</p> </li> <li> <p>Determine Payment Amount Based on CURLST:</p> </li> <li>Checks the <code>CURLST</code> field (from the user data structure <code>UDS</code>, set by <code>AP780P</code> as <code>'C'</code> or <code>'L'</code>):<ul> <li>If <code>CURLST = 'C'</code> (current year), adds <code>VNYTDP</code> (this year\u2019s year-to-date paid, positions 242-247) to <code>L1AMT1</code>.</li> <li>If <code>CURLST = 'L'</code> (last year), adds <code>VNLYDP</code> (last year\u2019s year-to-date paid, positions 248-253) to <code>L1AMT1</code>.</li> </ul> </li> <li> <p>Adds <code>VNB2AM</code> (second 1099 box amount, positions 280-285) to <code>L1AMT2</code>.</p> </li> <li> <p>Assign 1099 Box Numbers:</p> </li> <li>If <code>BOX1</code> is zero, sets it to <code>VNBOX1</code> (first 1099 box number, positions 276-277).</li> <li>If <code>BOX2</code> is zero, sets it to <code>VNBOX2</code> (second 1099 box number, positions 278-279).</li> <li> <p>This ensures the box numbers from the vendor file are used unless already set.</p> </li> <li> <p>Validate and Adjust Payment Amounts:</p> </li> <li>Compares <code>L1AMT1</code> (total payment amount) to <code>ENTAMT</code> (entered amount from <code>UDS</code>, set by <code>AP780P</code>).</li> <li> <p>If <code>L1AMT1</code> is greater than or equal to <code>ENTAMT</code> (indicator 50 on):</p> <ul> <li>If <code>BOX1</code> is zero, sets it to 7 (default IRS box for 1099-MISC nonemployee compensation).</li> <li>If <code>L1AMT2</code> (second box amount) is greater than zero and <code>BOX2</code> is non-zero:</li> <li>Subtracts <code>L1AMT2</code> from <code>L1AMT1</code> to allocate the second box amount separately.</li> <li>Increments <code>TOTB</code> (total count, positions 201-208 in <code>UDS</code>) by 1 to track valid records.</li> <li>Writes the output record to <code>AP781</code> using the <code>L1ADD</code> exception output (<code>EXCPTL1ADD</code>).</li> </ul> </li> <li> <p>Write Output Record to AP781:</p> </li> <li> <p>When a valid record is processed (indicator 50 on), the program writes a record to the <code>AP781</code> file with the following fields:</p> <ul> <li>Record Identification: <code>'A'</code> (position 1, constant).</li> <li><code>VN1099</code> (1099 code, position 2, from <code>APVEND</code>).</li> <li><code>VNVEND</code> (vendor number, positions 4-8, from <code>APVEND</code>).</li> <li><code>VNNAME</code> (vendor name, positions 9-38, from <code>APVEND</code>).</li> <li><code>VNADD1</code> (address line 1, positions 39-68, from <code>APVEND</code>).</li> <li><code>CITY</code> (city, parsed from <code>GETSTA</code>, positions 69-88).</li> <li><code>STATE</code> (state, parsed from <code>GETSTA</code>, positions 89-90).</li> <li><code>VNZIP5</code> (zip code, positions 159-163, from <code>APVEND</code>).</li> <li><code>L1AMT1</code> (adjusted payment amount, positions 94-102, 9 digits, 2 decimals).</li> <li><code>L1AMT2</code> (second box amount, positions 103-111, 9 digits, 2 decimals).</li> <li><code>BOX1</code> (first 1099 box number, positions 112-113).</li> <li><code>BOX2</code> (second 1099 box number, positions 114-115).</li> <li><code>VNID#</code> (tax ID, positions 265-275, from <code>APVEND</code>).</li> <li><code>VNSRT4</code> (sort abbreviation, positions 168-171, from <code>APVEND</code>).</li> <li><code>VNPYN1</code> (payee name 1, positions 300-339, from <code>APVEND</code>, added by JB01).</li> <li><code>VNPYN2</code> (payee name 2, positions 340-379, from <code>APVEND</code>, added by JB01).</li> <li><code>VNADD2</code> (address line 2, positions 211-240, from <code>APVEND</code>, added by JB02).</li> <li><code>VNNOVF</code> (name overflow, position 241, from <code>APVEND</code>, added by JB02).</li> <li><code>VNNMCT</code> (IRS name control, positions 242-245, from <code>APVEND</code>, added by JK01).</li> <li><code>VNFNAM</code> (first name, positions 246-265, from <code>APVEND</code>).</li> <li><code>VNMNAM</code> (middle name, positions 266-285, from <code>APVEND</code>).</li> <li><code>VNLNAM</code> (business/last name, positions 286-315, from <code>APVEND</code>).</li> <li><code>VNSUFF</code> (name suffix, positions 316-320, from <code>APVEND</code>).</li> </ul> </li> <li> <p>Repeat for Each Vendor:</p> </li> <li>The program processes each vendor record from <code>AP780S</code> and <code>APVEND</code>, using level-break logic (<code>L1</code>) to group records by vendor, ensuring one output record per vendor regardless of multiple company entries.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP781</code> program enforces the following business rules for 1099 preprocessing: 1. Single Record per Vendor:    - Consolidates multiple vendor records (potentially across different companies, as indicated by <code>VNCO</code>) into a single record per vendor, using the vendor number (<code>VNVEND</code>) as the key, as processed by the sorted <code>AP780S</code> file.</p> <ol> <li>Payment Amount Allocation:</li> <li>Uses <code>CURLST</code> (<code>'C'</code> for current year, <code>'L'</code> for last year) to select the appropriate year-to-date payment amount (<code>VNYTDP</code> or <code>VNLYDP</code>).</li> <li>Allocates the total payment (<code>L1AMT1</code>) and second box amount (<code>L1AMT2</code>) separately if a second 1099 box (<code>VNBOX2</code>) is specified.</li> <li> <p>Subtracts <code>L1AMT2</code> from <code>L1AMT1</code> when both boxes are used to avoid double-counting.</p> </li> <li> <p>Default 1099 Box:</p> </li> <li>If the first 1099 box (<code>BOX1</code>) is zero and the payment amount meets the threshold (<code>L1AMT1 &gt;= ENTAMT</code>), sets <code>BOX1</code> to 7 (IRS box for nonemployee compensation on 1099-MISC).</li> <li> <p>Retains vendor-specified box numbers (<code>VNBOX1</code>, <code>VNBOX2</code>) when non-zero.</p> </li> <li> <p>Threshold Validation:</p> </li> <li> <p>Only writes output records if the total payment amount (<code>L1AMT1</code>) is greater than or equal to the entered amount (<code>ENTAMT</code>), ensuring only vendors meeting the IRS reporting threshold (e.g., $600 for 1099-MISC) are included.</p> </li> <li> <p>Address Parsing:</p> </li> <li>Extracts state and city from the highest-priority non-blank address field (<code>VNADD4</code>, <code>VNADD3</code>, or <code>VNADD2</code>).</li> <li>Assumes the state is a 2-character code (e.g., \"PA\") located after the zip code, and the city precedes the state, separated by a space or comma.</li> <li> <p>Handles cases where address fields are blank by skipping city/state extraction.</p> </li> <li> <p>IRS Data Inclusion:</p> </li> <li> <p>Includes IRS-specific fields like tax ID (<code>VNID#</code>), payee names (<code>VNPYN1</code>, <code>VNPYN2</code>), name overflow (<code>VNNOVF</code>), IRS name control (<code>VNNMCT</code>), and individual name components (<code>VNFNAM</code>, <code>VNMNAM</code>, <code>VNLNAM</code>, <code>VNSUFF</code>) to comply with IRS 1099 reporting requirements.</p> </li> <li> <p>Record Tracking:</p> </li> <li>Increments <code>TOTB</code> for each valid vendor record written to <code>AP781</code>, likely used for reporting or validation in subsequent steps.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files/tables: 1. APVEND:    - Primary input file (579 bytes, indexed).    - Contains vendor data including payment amounts, 1099 codes, tax IDs, and address fields. 2. AP780S:    - Secondary input file (30 bytes, 3-byte key, indexed).    - Sorted file used to identify unique vendors for consolidation. 3. AP781:    - Output file (320 bytes).    - Stores consolidated vendor data with extracted city/state, amounts, and box numbers.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP781</code> program does not explicitly call any external programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and processes data from <code>APVEND</code> and <code>AP780S</code> to produce <code>AP781</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP781</code> RPG/36 program preprocesses A/P vendor data by: - Consolidating vendor records from <code>APVEND</code> using <code>AP780S</code> to ensure one record per vendor. - Accumulating payment amounts (<code>VNYTDP</code> or <code>VNLYDP</code>) based on <code>CURLST</code>, splitting amounts if a second box (<code>VNB2AM</code>) exists. - Extracting <code>CITY</code> and <code>STATE</code> from address fields using the <code>GETSTA</code> subroutine. - Writing records to <code>AP781</code> only if the total amount meets the <code>ENTAMT</code> threshold, with a default box number of 7 if unspecified. - Including payee names, name overflow, and IRS name control for IRS compliance.</p> <p>The program uses <code>APVEND</code> and <code>AP780S</code> as inputs and <code>AP781</code> as output, with no external program calls, and enforces rules to ensure accurate 1099 data for downstream processing by <code>AP780</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/","title":"Summary AP780 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack, consisting of the OCL program <code>AP780.ocl36.txt</code> and the RPG/36 programs <code>AP780P.rpg36.txt</code>, <code>AP781.rpg36.txt</code>, and <code>AP780.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate IRS 1099 File for Accounts Payable:</li> <li>This use case involves creating an IRS-compliant 1099 file (e.g., <code>AP1099</code>) for vendor payments, supporting 1099-MISC, 1099-NEC, 1099-DIV, and 1099-INT forms. It consolidates vendor data, validates inputs, and produces structured records (Transmitter \"T\", Payer \"A\", Payee \"B\", End of Payer \"C\", and End of Transmission \"F\") for electronic IRS submission.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#function-requirement-document-generate-irs-1099-file","title":"Function Requirement Document: Generate IRS 1099 File","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#purpose","title":"Purpose","text":"<p>To generate an IRS-compliant 1099 file for Accounts Payable vendor payments, supporting 1099-MISC, 1099-NEC, 1099-DIV, and 1099-INT forms, using vendor data, company details, and a specified year.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: Four-digit year for 1099 reporting (e.g., 2012).</li> <li>File Name: Input vendor file name (e.g., <code>APVN2012</code>).</li> <li>Environment Flag: Indicates production (<code>G</code>) or test environment (e.g., <code>TEST</code>).</li> <li>Company Details:</li> <li>Name (30 chars), Address (30 chars), City (29 chars), State (2 chars), ZIP (9 chars).</li> <li>Tax ID (10 chars: 2-digit part1, 7-digit part2).</li> <li>Contact Name (20 chars), Contact Phone (10 chars).</li> <li>Amount Threshold: Minimum payment amount for inclusion (8-digit zoned).</li> <li>Current/Last Indicator: <code>C</code> (current year) or <code>L</code> (last year).</li> <li>Form Type: 1099 form type (e.g., <code>M</code> for MISC, <code>N</code> for NEC, <code>D</code> for DIV, <code>I</code> for INT).</li> <li>Vendor Data File (<code>APVEND</code>):</li> <li>Fields: Vendor Number (5 chars), Name (30 chars), Address Lines 1\u20134 (30 chars each), ZIP (5-digit zoned), 1099 Code (<code>D</code>, <code>I</code>, <code>M</code>, <code>N</code>), Tax ID (11 chars), Current/Last Year Paid (6-digit packed), Box Numbers (2-digit zoned), Second Box Amount (6-digit packed), Payee Names (40 chars each), Name Overflow (<code>Y</code>/<code>N</code>), IRS Name Control (4 chars), First/Middle/Last Names, Suffix.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#outputs","title":"Outputs","text":"<ul> <li>1099 File (<code>AP1099</code> or environment-specific, 750 bytes/record):</li> <li>Transmitter \"T\" Record: Company details, year, tax ID, contact info.</li> <li>Payer \"A\" Record: Form type, company details, tax ID.</li> <li>Payee \"B\" Record: Vendor data, tax ID, payment amounts, box numbers.</li> <li>End of Payer \"C\" Record: Payee count, control totals.</li> <li>End of Transmission \"F\" Record: Payer count.</li> <li>Index File (<code>AP1099I</code> or environment-specific): Indexed by vendor data keys.</li> <li>Copied File (<code>AP10&lt;Year&gt;</code> or environment-specific): Final 1099 data copy.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure year is non-zero, form type exists in <code>GSTABL</code> table, company details (name, address, tax ID) are non-blank, and indicator is <code>C</code> or <code>L</code>.</li> <li>Verify input file (<code>APVN&lt;Year&gt;</code>) exists; else, terminate with error.</li> <li>Consolidate Vendor Data:</li> <li>Read <code>APVEND</code> and sorted <code>AP780S</code> (vendor keys).</li> <li>Group by vendor number, producing one record per vendor in <code>AP781</code>.</li> <li>Extract city/state from address lines (highest non-blank: <code>VNADD4</code>, <code>VNADD3</code>, <code>VNADD2</code>).</li> <li>Accumulate payment amounts based on indicator (<code>C</code>: <code>VNYTDP</code>, <code>L</code>: <code>VNLYDP</code>).</li> <li>If second box amount (<code>VNB2AM</code>) exists, subtract from total for primary box.</li> <li>Generate 1099 Records:</li> <li>Write Transmitter \"T\" record with company details, tax ID, and sequence number.</li> <li>For each vendor group:<ul> <li>Write Payer \"A\" record with form type (<code>1</code>: DIV, <code>6</code>: INT, <code>A</code>: MISC, <code>NE</code>: NEC).</li> <li>Write Payee \"B\" record with vendor data, tax ID (EIN/SSN based on dash), and amounts.</li> <li>Accumulate control totals by form type and box number.</li> <li>Write End of Payer \"C\" record with payee count and totals.</li> </ul> </li> <li>Write End of Transmission \"F\" record with payer count.</li> <li>Build Index and Copy:</li> <li>Create index (<code>AP1099I</code>) for <code>AP1099</code> with vendor keys.</li> <li>Copy <code>AP1099</code> to <code>AP10&lt;Year&gt;</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Single Vendor Record:</li> <li>Consolidate multiple company records into one per vendor using <code>AP780S</code>.</li> <li>Amount Threshold:</li> <li>Include vendors only if total payment (<code>VNYTDP</code> or <code>VNLYDP</code>) meets <code>ENTAMT</code>.</li> <li>Amount Splitting:</li> <li>If <code>VNBOX2</code> exists, assign <code>VNB2AM</code> to second box, subtract from total for primary box.</li> <li>Example: <code>$15,000</code> total, <code>VNBOX1=7</code> (MISC), <code>VNBOX2=1</code> (Rents), <code>VNB2AM=$5,000</code> \u2192 Primary=<code>$10,000</code>, Secondary=<code>$5,000</code>.</li> <li>Default Box:</li> <li>If <code>VNBOX1=0</code> and threshold met, default to box 7 (Nonemployee Compensation).</li> <li>Form Type Mapping:</li> <li><code>VN1099</code>: <code>D</code>\u2192DIV, <code>I</code>\u2192INT, <code>M</code>\u2192MISC, <code>N</code>\u2192NEC.</li> <li>Box assignments: MISC (1=Rents, 3=Other Income, 6=Medical, 7=Nonemployee), NEC (1=Nonemployee), DIV (1=Dividends, 2=Capital Gains), INT (1=Interest).</li> <li>Name Handling:</li> <li>Use <code>VNPYN1</code>/<code>VNPYN2</code> if provided; else, use <code>VNNAME</code>.</li> <li>If <code>VNNOVF=Y</code>, use <code>VNADD1</code> as second name, shift <code>VNADD2</code> to <code>VNADD1</code>.</li> <li>Name control: Use <code>VNNMCT</code> if available, else <code>VNNAM4</code>, or blank if payee names used.</li> <li>Tax ID:</li> <li>If tax ID contains <code>-</code>, use EIN; else, use SSN.</li> <li>Vendor number as account number.</li> <li>City/State Extraction:</li> <li>Extract state (2 chars) and city from highest non-blank address line, assuming state follows ZIP and city precedes a space/comma.</li> <li>IRS Format:</li> <li>Pad records with zeros/blanks per IRS specs (e.g., <code>T</code>/<code>A</code>: 376\u2013748 blank, <code>B</code>: 663\u2013750 blank).</li> <li>Include fixed codes (e.g., <code>28Q01</code> for <code>T</code>, <code>AMER</code> for <code>A</code>, <code>I</code> for in-house software).</li> <li>Increment sequence number (<code>RECSEQ</code>) for each record.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Payment Amounts:</li> <li><code>L1AMT1 = VNYTDP</code> (if <code>CURLST=C</code>) or <code>VNLYDP</code> (if <code>L</code>) \u2013 <code>VNB2AM</code> (if <code>VNBOX2&gt;0</code>).</li> <li><code>L1AMT2 = VNB2AM</code> if second box exists.</li> <li>Control Totals:</li> <li>DIV: <code>TOTGR1</code> (Box 1), <code>TOTGR2</code> (Box 2).</li> <li>INT: <code>TOTGR1</code> (Box 1).</li> <li>MISC: <code>TOTGR1</code> (Box 1/2=1), <code>TOTGR3</code> (Box 1/2=3), <code>TOTGR6</code> (Box 1/2=6).</li> <li>NEC: <code>TOTGR1</code> (Box 1/2=1).</li> <li>Counts:</li> <li><code>COUNT</code>: Payee records per payer.</li> <li><code>TOTA</code>: Payer records.</li> <li><code>TOTB</code>: Written records meetingogels</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/","title":"AP790 OCL","text":"<p>The provided document appears to be an Operation Control Language (OCL) program snippet, typically used in IBM System/3x or AS/400 environments to control job execution, particularly for RPG (Report Program Generator) programs. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and note any tables used based on the provided snippet.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a job control language used to define how programs, such as RPG programs, are executed, including file assignments, printer settings, and conditional logic. Here\u2019s a step-by-step breakdown of the process defined in the provided OCL snippet:</p> <ol> <li>Program Identification and Purpose:</li> <li>The comment lines (<code>// * 'PRINTING 1099 FILE EDIT'</code>) indicate that this OCL program is related to printing or editing a 1099 file, likely for tax reporting purposes (e.g., IRS Form 1099).</li> <li> <p>The <code>// GSY2K</code> comment might refer to a specific system, module, or compliance indicator (e.g., Year 2000 compliance), but it\u2019s not directly actionable in the OCL.</p> </li> <li> <p>Loading the Program:</p> </li> <li> <p><code>// LOAD AP790</code>: This command loads the RPG program named <code>AP790</code>. The <code>LOAD</code> statement initiates the execution of the specified program, which is presumably an RPG program responsible for processing or printing the 1099 file.</p> </li> <li> <p>Conditional File Assignment:</p> </li> <li> <p><code>// IF ?9?/G +</code>: This is a conditional statement checking the value of a substitution variable <code>?9?</code>. In OCL, substitution variables (denoted by <code>?n?</code>) are placeholders for values passed to the job at runtime, often used to determine file names, labels, or other parameters.</p> <ul> <li>If the condition <code>?9?/G</code> is true (e.g., the variable <code>?9?</code> equals 'G'), the program executes the following file assignment:</li> <li><code>FILE NAME-AP1099,LABEL-AP1099,DISP-SHR</code>: Assigns a file named <code>AP1099</code> with the label <code>AP1099</code> and specifies shared disposition (<code>DISP-SHR</code>), meaning the file can be accessed by multiple jobs concurrently.</li> <li>If the condition is false, the program executes:</li> <li><code>FILE NAME-AP1099,LABEL-?9?AP1099,DISP-SHR</code>: Assigns the same file name <code>AP1099</code>, but the label is dynamically constructed by appending the value of <code>?9?</code> to <code>AP1099</code> (e.g., if <code>?9?</code> is <code>2023</code>, the label becomes <code>2023AP1099</code>). The disposition remains shared (<code>DISP-SHR</code>).</li> </ul> </li> <li> <p>Printer Configuration:</p> </li> <li> <p><code>// PRINTER NAME-PRINT,CPI-15</code>: This defines the printer settings for the job.</p> <ul> <li><code>NAME-PRINT</code>: Specifies the printer output queue or device named <code>PRINT</code>.</li> <li><code>CPI-15</code>: Sets the printer to 15 characters per inch, which controls the font density for the printed output, likely to ensure the 1099 forms are formatted correctly.</li> </ul> </li> <li> <p>Program Execution:</p> </li> <li><code>// RUN</code>: This command triggers the execution of the loaded program (<code>AP790</code>) with the specified file and printer configurations. The RPG program <code>AP790</code> would then process the <code>AP1099</code> file, likely performing tasks such as reading, editing, or printing 1099-related data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP790: This is the primary RPG program loaded and executed by the OCL script. It is responsible for the core logic of processing or printing the 1099 file. No other external programs are explicitly called in the provided OCL snippet.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>The OCL snippet does not explicitly reference any tables. In RPG programs, tables are typically defined within the RPG source code (e.g., using <code>TAB</code> definitions or arrays) rather than in the OCL. Since the snippet only covers the OCL portion and not the RPG program (<code>AP790</code>) itself, no tables are identified here.</li> <li>The file <code>AP1099</code> is referenced, but it is a data file, not a table. If <code>AP790</code> uses tables internally (e.g., for lookup or validation purposes), they would be defined in the RPG program\u2019s source code, which is not provided.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variable (<code>?9?</code>): The use of <code>?9?</code> suggests the OCL program is designed to be flexible, allowing the file label to vary based on runtime parameters (e.g., different years or versions of the 1099 file). The condition <code>?9?/G</code> likely checks for a specific value to determine the file label.</li> <li>File Disposition (<code>DISP-SHR</code>): The shared disposition indicates that the <code>AP1099</code> file can be accessed by other jobs, which is common in multi-user environments like AS/400.</li> <li>Limitations of the Snippet: The provided OCL is a partial job control script. The actual processing logic (e.g., calculations, validations, or report formatting) resides in the <code>AP790</code> RPG program, which is not included. To fully understand the tables or additional files used, the RPG source code would need to be analyzed.</li> <li>Environment: This OCL syntax is specific to IBM midrange systems (e.g., System/38 or AS/400). The <code>AP1099</code> file is likely a database file containing 1099 data, and <code>AP790</code> is an RPG program that processes this data for printing or editing.</li> </ul> <p>If you have access to the <code>AP790</code> RPG source code or additional OCL snippets, I can provide a more detailed analysis of the tables or external programs involved. Let me know if you\u2019d like me to search for related information or clarify any specific aspect!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/","title":"Summary AP790 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#list-of-use-cases-implemented-by-the-ap790-program","title":"List of Use Cases Implemented by the AP790 Program","text":"<p>Based on the provided OCL (<code>AP790.ocl36.txt</code>) and RPG/36 (<code>AP790.rpg36.txt</code>) programs, the primary use case implemented is:</p> <ol> <li>Generate 1099 File Edit Report:</li> <li>Description: The program processes an Accounts Payable (A/P) 1099 file (<code>AP1099</code>) to produce a printed edit report for verifying 1099 data (e.g., payee details, payment amounts, and totals) before submission to the IRS. It ensures the data is accurate and compliant with IRS 1099 reporting requirements, supporting forms such as 1099-MISC, 1099-DIV, or 1099-INT.</li> <li>Scope: The program reads structured records (Transmitter, Employer, Payee, End of Payer, State Totals, Company Final), validates key fields (e.g., TINs), accumulates payment totals, and formats a report with payee details and aggregated amounts.</li> <li>Inputs: The <code>AP1099</code> file containing 1099 data and a substitution variable (<code>?9?</code>) for dynamic file labeling.</li> <li>Outputs: A printed report listing payee details (TIN, name, address, payment amounts) and totals, formatted for verification.</li> </ol> <p>No additional use cases are evident from the provided code, as the program focuses solely on generating the edit report for the 1099 file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#function-requirement-document-generate-1099-file-edit-report","title":"Function Requirement Document: Generate 1099 File Edit Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#overview","title":"Overview","text":"<p>The <code>Generate_1099_File_Edit_Report</code> function processes an Accounts Payable (A/P) 1099 file to produce a printed edit report for verifying 1099 data before IRS submission. It supports IRS 1099 forms (e.g., 1099-MISC, 1099-DIV, 1099-INT) by validating and formatting payee details, payment amounts, and totals.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#inputs","title":"Inputs","text":"<ul> <li>1099 Data File (<code>AP1099</code>):</li> <li>Format: Fixed-length (750 bytes) disk file.</li> <li>Record Types:<ul> <li>Transmitter (<code>T</code>): TIN, name, address, contact details.</li> <li>Employer (<code>A</code>): Payer TIN, name, address, phone.</li> <li>Payee (<code>B</code>): Payee TIN (EIN/SSN), name, address, payment amounts (1, 3, 6, 7).</li> <li>End of Payer (<code>C</code>): Total payee count and payment amounts.</li> <li>State Totals (<code>K</code>): State-level payment totals.</li> <li>Company Final (<code>F</code>): Total count of Employer records.</li> </ul> </li> <li>File Label Parameter (<code>label_prefix</code>): String (e.g., year or identifier) to construct file label (<code>label_prefix + \"AP1099\"</code> or <code>\"AP1099\"</code>).</li> <li>Printer Settings:</li> <li>Device: <code>PRINT</code>.</li> <li>Characters Per Inch (CPI): 15.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Edit Report:</li> <li>Header:<ul> <li>Company: \"AMERICAN REFINING GROUP\".</li> <li>Title: \"EDIT OF A/P 1099 FILE\".</li> <li>Program: \"AP790\".</li> <li>Page number and date (MM/DD/YY).</li> <li>Column headings: Record #, Type, Abbreviation, SSN/EIN, Amount 1, Amount 6, Amount 3, Name, Address, City, State, ZIP.</li> </ul> </li> <li>Detail Lines (Payee records):<ul> <li>Record number, TIN type (EIN/SSN), name control, formatted TIN (XX-XXXXXXX for EIN, XXX-XX-XXXX for SSN), payment amounts (1, 3, 6, 7), payee name, address, city, state, ZIP.</li> </ul> </li> <li>Totals (End of Payer records):<ul> <li>Payee count and total payment amounts (1, 3, 6, 7).</li> </ul> </li> <li>Format: 164-character lines, 15 CPI.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Set record counter (<code>REC#</code>) to 0.</li> <li>Set payee counter (<code>COUNT</code>) and payment totals (<code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>) to 0.</li> <li>Assign File:</li> <li>If <code>label_prefix = \"G\"</code>, use file label <code>\"AP1099\"</code>.</li> <li>Else, use file label <code>label_prefix + \"AP1099\"</code>.</li> <li>Open file in shared mode (<code>DISP-SHR</code>).</li> <li>Read 1099 File:</li> <li>Sequentially read records from <code>AP1099</code>.</li> <li>Identify record type using <code>A1REC</code> (position 1): <code>T</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>K</code>, <code>F</code>.</li> <li>Process Payee Records (<code>A1REC = 'B'</code>):</li> <li>Increment <code>REC#</code> and <code>COUNT</code>.</li> <li>If deletion flag (<code>A1DEL</code>) is <code>'D'</code>, skip record.</li> <li>Validate TIN type (<code>A1TTIN</code>): <code>'1'</code> (EIN) or <code>'2'</code> (SSN).</li> <li>Accumulate payment amounts:<ul> <li><code>TAMT1 += A1PAY1</code> (Payment Amount 1).</li> <li><code>TAMT3 += A1PAY3</code> (Payment Amount 3).</li> <li><code>TAMT6 += A1PAY6</code> (Payment Amount 6).</li> <li><code>TAMT7 += A1PAY7</code> (Payment Amount 7).</li> </ul> </li> <li>Output payee details to report (if not deleted):<ul> <li>Record number, TIN type, name control, formatted TIN, payment amounts, name, address, city, state, ZIP.</li> </ul> </li> <li>Process End of Payer Records (<code>A1REC = 'C'</code>):</li> <li>Output totals: <code>COUNT</code>, <code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>.</li> <li>Process Other Records:</li> <li>Read but do not process Transmitter (<code>T</code>), Employer (<code>A</code>), State Totals (<code>K</code>), or Company Final (<code>F</code>) records for calculations.</li> <li>Include relevant fields (e.g., counts, totals) in report if specified.</li> <li>Generate Report:</li> <li>Print header at page start.</li> <li>Print detail lines for each valid Payee record.</li> <li>Print totals for End of Payer records.</li> <li>Format output at 15 CPI to printer device <code>PRINT</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>IRS Compliance:</li> <li>Process 1099 file per IRS specifications (e.g., 1099-MISC, 1099-DIV, 1099-INT).</li> <li>Validate TINs: EIN (<code>'1'</code>, formatted as <code>XX-XXXXXXX</code>) or SSN (<code>'2'</code>, formatted as <code>XXX-XX-XXXX</code>).</li> <li>Include required fields (e.g., payment amounts, payee details, state withholding).</li> <li>Deletion Handling:</li> <li>Skip records with <code>A1DEL = 'D'</code>.</li> <li>Payment Accumulation:</li> <li>Sum payment amounts (1, 3, 6, 7) for Payee records into <code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>.</li> <li>Report totals for verification against End of Payer records.</li> <li>Report Formatting:</li> <li>Ensure payee details (name, address, TIN, payments) are printed clearly for manual review.</li> <li>Suppress leading zeros in counts and format monetary amounts appropriately.</li> <li>File Flexibility:</li> <li>Support dynamic file labeling based on <code>label_prefix</code> for different 1099 file versions (e.g., by year).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Record Counter (<code>REC#</code>): Incremented by 1 for each Payee record processed (<code>REC# += 1</code>).</li> <li>Payee Counter (<code>COUNT</code>): Incremented by 1 for each non-deleted Payee record (<code>COUNT += 1</code>).</li> <li>Payment Totals:</li> <li><code>TAMT1 += A1PAY1</code> (sum of Payment Amount 1).</li> <li><code>TAMT3 += A1PAY3</code> (sum of Payment Amount 3).</li> <li><code>TAMT6 += A1PAY6</code> (sum of Payment Amount 6).</li> <li><code>TAMT7 += A1PAY7</code> (sum of Payment Amount 7).</li> <li>TIN Formatting:</li> <li>If <code>A1TTIN = '1'</code>: Format <code>A1TIN</code> as <code>XX-XXXXXXX</code> (using <code>A1ID21</code>, <code>A1ID22</code>).</li> <li>If <code>A1TTIN = '2'</code>: Format <code>A1TIN</code> as <code>XXX-XX-XXXX</code> (using <code>A1ID11</code>, <code>A1ID12</code>, <code>A1ID13</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The function processes a single 1099 file at a time.</li> <li>Only payment amounts 1, 3, 6, and 7 are relevant for the report (others ignored).</li> <li>The printer is pre-configured and available as <code>PRINT</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#constraints","title":"Constraints","text":"<ul> <li>File format must adhere to IRS 1099 specifications (750-byte records).</li> <li>Program runs on IBM System/36 with RPG/36 and OCL support.</li> <li>No external programs called; all processing is self-contained.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/","title":"AP791 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP791.ocl36.txt</code>, used in IBM AS/400 or System/36 environments to handle operations related to printing 1099 forms. Below is an explanation of the process steps, the external programs called, and the tables/files used in the program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#process-steps-of-the-ap791-ocl-program","title":"Process Steps of the AP791 OCL Program","text":"<ol> <li>Prompt for the Year:</li> <li>The program starts by prompting the user to input a four-digit year for the 1099 forms. This is indicated by the comment:      <pre><code>// * 'WHAT YEAR ARE THESE 1099''S FOR?  PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'\n</code></pre></li> <li> <p>The <code>LOCAL OFFSET-100,DATA-'?10R?'</code> statement suggests that the program reserves a local variable at offset 100 to store the user-entered year, likely as a 4-character input (e.g., \"2025\").</p> </li> <li> <p>Evaluate Parameter:</p> </li> <li> <p>The statement <code>EVALUATE P13='?9?P1099?L'102,2'?</code> evaluates a parameter (<code>P13</code>) to construct a file or label name dynamically. The <code>?9?</code> is a placeholder for a library or prefix, and <code>P1099</code> combined with <code>?L'102,2'?</code> likely incorporates the last two digits of the entered year (e.g., \"25\" for 2025) to form a specific file name or label (e.g., <code>P109925</code>).</p> </li> <li> <p>Clear Physical File:</p> </li> <li> <p>The <code>CLRPFM FILE(?9?PATAX)</code> command clears the physical file <code>PATAX</code> in the library specified by <code>?9?</code>. This ensures that the file is empty before new data is loaded or processed, likely to store 1099-related data.</p> </li> <li> <p>Delete File (Conditional):</p> </li> <li> <p>The commented-out <code>DLTF FILE(?13?)</code> and the conditional <code>IF DATAF1-?13? DLTF FILE(?13?)</code> suggest that the program checks if a file (referenced by <code>?13?</code>, the evaluated file name from step 2) exists. If it does, the file is deleted (<code>DLTF</code>). This step ensures that any existing file with the same name is removed to avoid conflicts when creating a new file.</p> </li> <li> <p>GSY2K Execution:</p> </li> <li> <p>The <code>GSY2K</code> command calls an external program or procedure, likely a system utility or a custom program to handle year 2000 compliance or date-related processing for the 1099 forms. This could involve formatting or validating the year entered by the user.</p> </li> <li> <p>Load and Run AP791:</p> </li> <li>The <code>LOAD AP791</code> statement loads the main program (likely an RPG program named <code>AP791</code>) into memory for execution.</li> <li> <p>The <code>RUN</code> command executes the loaded <code>AP791</code> program.</p> </li> <li> <p>File Definitions:</p> </li> <li>The program specifies two files:<ul> <li><code>FILE NAME-IRSTAX,LABEL-IRSTAX,DISP-SHR</code>: Opens the <code>IRSTAX</code> file (likely a master file containing tax-related data) in shared mode (<code>DISP-SHR</code>), allowing multiple processes to access it.</li> <li><code>FILE NAME-PA1099,LABEL-?9?PATAX,DISP-SHR</code>: Opens the <code>PATAX</code> file in the library <code>?9?</code> (with the label <code>PATAX</code>) in shared mode. This file is likely used to store processed 1099 data.</li> </ul> </li> <li> <p>The commented-out line <code>** FILE NAME-IRSTAX,LABEL-IRSTAX,DISP-SHR</code> suggests a redundant or alternative definition for the <code>IRSTAX</code> file, possibly for documentation or historical purposes.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The <code>PRINTER NAME-PRINT,CPI-15</code> statement configures the printer output for the program, specifying a printer named <code>PRINT</code> with a character-per-inch (CPI) setting of 15, suitable for condensed printing of 1099 forms.</p> </li> <li> <p>Copy File:</p> </li> <li>The <code>CPYF FROMFILE(QS36F/?9?PATAX) TOFILE(QS36F/?13?) CRTFILE(*YES)</code> command copies data from the <code>PATAX</code> file (in library <code>QS36F/?9?</code>) to a target file specified by <code>?13?</code> (the dynamically evaluated file name, e.g., <code>P109925</code>). The <code>CRTFILE(*YES)</code> parameter indicates that the target file will be created if it does not already exist.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#summary-of-process-flow","title":"Summary of Process Flow","text":"<p>The program: - Prompts the user for the 1099 year. - Constructs a dynamic file name based on the year. - Clears the <code>PATAX</code> file to prepare for new data. - Optionally deletes an existing file with the dynamically generated name. - Calls the <code>GSY2K</code> utility for year-related processing. - Loads and runs the <code>AP791</code> program, which processes data using the <code>IRSTAX</code> and <code>PATAX</code> files. - Configures the printer for output. - Copies the processed data from <code>PATAX</code> to a new file (e.g., <code>P109925</code>) for storage or further use.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>GSY2K: A utility or program likely used for year 2000 compliance or date processing.</li> <li>AP791: The main RPG program loaded and executed to process the 1099 data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>IRSTAX:</li> <li>Label: <code>IRSTAX</code></li> <li>Description: Likely a master file containing tax-related data (e.g., vendor or tax information for 1099 forms).</li> <li>Access: Shared mode (<code>DISP-SHR</code>).</li> <li>PATAX:</li> <li>Label: <code>?9?PATAX</code> (in library specified by <code>?9?</code>).</li> <li>Description: A file used to store processed 1099 data, cleared before processing.</li> <li>Access: Shared mode (<code>DISP-SHR</code>).</li> <li>Dynamic File (e.g., P109925):</li> <li>Label: <code>?13?</code> (e.g., <code>P109925</code>, based on the evaluated year).</li> <li>Description: A dynamically named file created to store the output of the <code>PATAX</code> file after processing.</li> <li>Access: Created via <code>CPYF</code> with <code>CRTFILE(*YES)</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#notes","title":"Notes","text":"<ul> <li>The placeholders <code>?9?</code> and <code>?13?</code> are substituted at runtime, typically representing a library name and a dynamically constructed file name, respectively.</li> <li>The program assumes an AS/400 or System/36 environment, where OCL is used to control job execution and file operations.</li> <li>The <code>AP791</code> RPG program likely contains the core logic for processing 1099 data, while the OCL script handles setup, file management, and output configuration.</li> </ul> <p>If you need further clarification or analysis (e.g., the logic inside <code>AP791</code> or specific file structures), please provide additional details or related files!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/","title":"AP791 RPG36","text":"<p>The provided document, <code>AP791.rpg36.txt</code>, is an RPG/36 program (used in IBM System/36 or AS/400 environments) called from the OCL program <code>AP791.ocl36.txt</code>. This program processes and prints a 1099 file for IRS reporting, handling data from the <code>IRSTAX</code> file, outputting to the <code>PA1099</code> file, and generating a printed report. Below, I\u2019ll explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#process-steps-of-the-ap791-rpg-program","title":"Process Steps of the AP791 RPG Program","text":"<p>The RPG program follows a structured flow to read, process, and output 1099-related data. Here\u2019s a breakdown of the process steps based on the RPG/36 code:</p> <ol> <li>File Definitions (Lines 0005-0006):</li> <li>Input File (<code>IRSTAX</code>): Defined as a primary input file (<code>IP</code>) with a record length of 750 bytes. It contains 1099 data, including transmitter \"T\" records and payee \"B\" records. Multiple commented-out definitions suggest possible variations (e.g., <code>IRSTAXSOIS</code> or a 864-byte version), but only the 750-byte <code>IRSTAX</code> is active.</li> <li>Output File (<code>PA1099</code>): Defined as an output file (<code>O</code>) with a record length of 875 bytes, used to store processed 1099 data.</li> <li> <p>Printer File (<code>PRINT</code>): Defined as a printer output file (<code>O</code>) with a record length of 164 bytes, used to generate a formatted 1099 report.</p> </li> <li> <p>Input Specifications (Lines 0007-0122):</p> </li> <li>The program reads records from <code>IRSTAX</code> and identifies them by a record type (<code>A1REC</code>) at position 1:<ul> <li>Transmitter \"T\" Record (Line 0007, <code>NS 01</code>): Identified by <code>A1REC = 'T'</code>, processed differently from payee records.</li> <li>Payee \"B\" Record (Line 0007, <code>NS 02</code>): Default record type for payee data, processed for 1099 reporting.</li> </ul> </li> <li> <p>Fields are mapped from the <code>IRSTAX</code> file, including:</p> <ul> <li>Payment year (<code>A1YR</code>, positions 2-5)</li> <li>Taxpayer ID number (<code>A1TIN#</code>, positions 12-20)</li> <li>Type of TIN (<code>A1TTIN</code>, position 11, <code>1</code> for EIN, <code>2</code> for SSN)</li> <li>Payment amounts (<code>A1PAY1</code> to <code>A1PAYC</code>, positions 55-198, for various payment types)</li> <li>Payee details (name, address, city, state, zip, etc.)</li> <li>Tax withholding (<code>A1SITW</code> for state, <code>A1LITW</code> for local)</li> <li>Other indicators (e.g., <code>A1FCI</code> for foreign country, <code>A1DSI</code> for direct sales).</li> </ul> </li> <li> <p>Calculation Specifications (Lines 0194-0206):</p> </li> <li>Record Processing:<ul> <li>For \"T\" records (<code>NS 01</code>):</li> <li>The program skips processing and jumps to the <code>END</code> tag (Line 0206), bypassing payee calculations.</li> <li>For \"B\" records (<code>NS 02</code>):</li> <li>Increments a record counter (<code>REC#</code>) and a count (<code>COUNT</code>) for tracking (Line 0194, 0199).</li> <li>Accumulates non-zero payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) into totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>) (Lines 0199-0200).</li> <li>Checks the TIN type (<code>A1TTIN</code> = <code>1</code> for EIN or <code>2</code> for SSN) to set indicators <code>21</code> or <code>22</code> (Lines 0203-0204).</li> <li>Writes the processed record to the <code>PA1099</code> file via the <code>IN</code> exception output (Line 0205).</li> </ul> </li> <li> <p>Commented-Out Logic:</p> <ul> <li>Some conditional checks (e.g., <code>A1PYES IFNE 'PA'</code>) and additional accumulations (<code>NPAY1</code>, <code>NPAY2</code>, <code>NPAY7</code>) are commented out, suggesting they were used in prior versions or for specific cases (e.g., filtering by state or additional totals).</li> </ul> </li> <li> <p>Output Specifications (Lines 0207-0251):</p> </li> <li>Printer Output (<code>PRINT</code>):<ul> <li>Header Records (Lines 0207-0231):</li> <li>Prints headers for the report, including:<ul> <li>Company name (\u201cAMERICAN REFINING GROUP, INC\u201d).</li> <li>Program name (\u201cAP791\u201d) and report title (\u201cA/P 1099 FILE\u201d).</li> <li>Page number (<code>PAGE</code>) and date (<code>UDATE</code>).</li> <li>Column headers for record number, TIN type, name control, SSN/EIN, payment amounts, name, address, city, state, and zip.</li> </ul> </li> <li>Headers are printed at the start of the report (<code>1P</code>) or on overflow (<code>OF</code>).</li> <li>Detail Lines (Lines 0232-0251, <code>E IN</code>):</li> <li>For each payee record, prints:<ul> <li>Record number (<code>REC#</code>).</li> <li>TIN type (<code>A1TTIN</code>) and name control (<code>A1NCTL</code>).</li> <li>Formatted TIN (<code>A1ID21</code>, <code>A1ID22</code>, etc., with hyphens for readability).</li> <li>Payment amounts (<code>A1PAY1M</code>, <code>A1PAY2M</code>, <code>A1PAY3M</code>).</li> <li>Payee details (name, address, city, state, zip).</li> </ul> </li> <li>Total Lines (Line 0232, <code>E TOTL</code>):</li> <li>Prints accumulated totals for <code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY7</code> at the end of the report.</li> </ul> </li> <li> <p>File Output (<code>PA1099</code>) (Lines 0232-0251, <code>EADD IN</code>):</p> <ul> <li>Writes records to the <code>PA1099</code> file with:</li> <li>Hard-coded values (e.g., <code>222318612</code> for payer TIN, <code>001</code> for sequence).</li> <li>Payment year (<code>A1YR</code>), TIN (<code>A1TIN#</code>), vendor number (<code>A1VEND</code>), and payee details.</li> <li>Payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>, <code>A1SITW</code>).</li> <li>Company details (\u201cAMERICAN REFINING GROUP, INC\u201d, address, etc.).</li> <li>Combined payment total (<code>DPAY</code>).</li> </ul> </li> <li> <p>End of Program:</p> </li> <li>After processing all records, the program writes final totals to the printer (<code>EXCPTTOTL</code>) and terminates at the <code>END</code> tag (Line 0206).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for 1099 processing: 1. Record Type Handling:    - Skips \u201cT\u201d (Transmitter) records, as they are not relevant for payee reporting.    - Processes \u201cB\u201d (Payee) records for 1099 data.</p> <ol> <li>Payment Accumulation:</li> <li>Only non-zero payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) are added to running totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>).</li> <li> <p>These payments likely correspond to specific 1099 categories (e.g., non-employee compensation, rents, royalties).</p> </li> <li> <p>TIN Formatting:</p> </li> <li> <p>TINs are identified as EIN (<code>A1TTIN = '1'</code>) or SSN (<code>A1TTIN = '2'</code>) and formatted accordingly (e.g., <code>XXX-XXXXXX</code> for EIN, <code>XXX-XX-XXXX</code> for SSN) for the printed report.</p> </li> <li> <p>Payee Filtering:</p> </li> <li> <p>Commented-out logic suggests a prior rule to filter records where the state (<code>A1PYES</code>) is not \u201cPA\u201d (Pennsylvania), but this is not active in the current version.</p> </li> <li> <p>Output Formatting:</p> </li> <li>The <code>PA1099</code> file includes fixed payer details (e.g., TIN <code>222318612</code>, address \u201c77 NORTH KENDALL AVENUE, BRADFORD, PA 16701\u201d) and payee-specific data.</li> <li> <p>The printed report formats TINs with hyphens for readability and aligns payment amounts and payee details in columns.</p> </li> <li> <p>IRS Compliance:</p> </li> <li>The program structures data in the <code>PA1099</code> file to meet IRS 1099 reporting requirements, including payment amounts, withholding, and payee information (name, address, TIN).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>IRSTAX:</li> <li>Type: Input (<code>IP</code>)</li> <li>Record Length: 750 bytes</li> <li> <p>Description: Primary input file containing 1099 data, including transmitter (\u201cT\u201d) and payee (\u201cB\u201d) records. Fields include payment year, TIN, payment amounts, and payee details.</p> </li> <li> <p>PA1099:</p> </li> <li>Type: Output (<code>O</code>)</li> <li>Record Length: 875 bytes</li> <li> <p>Description: Output file storing processed 1099 data for IRS submission, including payer and payee details, payment amounts, and withholding.</p> </li> <li> <p>PRINT:</p> </li> <li>Type: Printer Output (<code>O</code>)</li> <li>Record Length: 164 bytes</li> <li>Description: Printer file for generating a formatted 1099 report with headers, detail lines, and totals.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The RPG program does not explicitly call any external programs. The <code>GSY2K</code> program referenced in the OCL program is executed before <code>AP791</code> is loaded, so it is not called from within the RPG code.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Commented-Out Code: The presence of commented-out definitions (e.g., <code>IRSTAXSOIS</code>, alternate <code>IRSTAX</code> lengths) and logic (e.g., state filtering, additional totals) suggests the program was adapted over time or supports multiple configurations. These could be re-enabled for specific requirements.</li> <li>TIN Formatting: The program formats TINs differently for EIN and SSN, ensuring compliance with IRS reporting standards.</li> <li>Hard-Coded Values: The <code>PA1099</code> output includes fixed payer details (e.g., TIN <code>222318612</code>, address), indicating the program is tailored for \u201cAMERICAN REFINING GROUP, INC.\u201d</li> <li>Environment: The program is designed for the System/36 or AS/400, using RPG/36 syntax and OCL for job control.</li> </ul> <p>If you need further details (e.g., specific field mappings, IRS 1099 form alignment, or analysis of commented-out logic), please let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/","title":"Summary AP791 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#list-of-use-cases-implemented-by-the-ap791-program","title":"List of Use Cases Implemented by the AP791 Program","text":"<p>The <code>AP791</code> program, driven by the OCL script (<code>AP791.ocl36.txt</code>) and the RPG program (<code>AP791.rpg36.txt</code>), implements a single primary use case:</p> <ol> <li>Generate and Print IRS 1099 Forms:</li> <li>Description: The program processes tax-related data to produce 1099 forms for IRS submission and a printed report for record-keeping. It reads input data from the <code>IRSTAX</code> file, processes payee records, accumulates payment totals, and outputs formatted data to the <code>PA1099</code> file and a printer report.</li> <li>Inputs: A four-digit year (provided via user input in the OCL script) and tax data from the <code>IRSTAX</code> file.</li> <li>Outputs: A formatted <code>PA1099</code> file for IRS submission and a printed report summarizing 1099 data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#function-requirement-document-generate-1099-forms","title":"Function Requirement Document: Generate 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#overview","title":"Overview","text":"<p>The <code>Generate_1099_Forms</code> function processes tax data to produce IRS-compliant 1099 forms and a printed summary report for payees. It takes a four-digit year and a tax data file as inputs, generates a formatted output file for IRS submission, and produces a printed report with payment details.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: A four-digit year (e.g., \"2025\") for the 1099 forms.</li> <li>Input File (<code>IRSTAX</code>): A file containing tax records (750 bytes per record), including:</li> <li>Record type (<code>T</code> for transmitter, <code>B</code> for payee).</li> <li>Payment year, taxpayer ID number (TIN), payment amounts, payee details (name, address, city, state, zip), and withholding amounts.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Output File (<code>PA1099</code>): A file (875 bytes per record) containing IRS-compliant 1099 data for payees, including payer details, payee details, payment amounts, and withholding.</li> <li>Printed Report (<code>PRINT</code>): A formatted report (164 bytes per line) with headers, payee details, payment amounts, and totals.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Year Input:</li> <li>Accept a four-digit year to define the reporting period.</li> <li> <p>Construct a dynamic output file name (e.g., <code>P109925</code> for 2025).</p> </li> <li> <p>Clear and Prepare Files:</p> </li> <li>Clear the <code>PATAX</code> file to store processed data.</li> <li>Delete any existing file with the dynamic name (e.g., <code>P109925</code>) to avoid conflicts.</li> <li> <p>Create a new file with the dynamic name for output.</p> </li> <li> <p>Process Tax Records:</p> </li> <li>Read records from the <code>IRSTAX</code> file.</li> <li>Skip transmitter (<code>T</code>) records.</li> <li> <p>For payee (<code>B</code>) records:</p> <ul> <li>Extract TIN (EIN or SSN), payment amounts (e.g., non-employee compensation, rents), payee details, and withholding.</li> <li>Accumulate non-zero payment amounts into category totals (e.g., <code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>).</li> </ul> </li> <li> <p>Generate Output File:</p> </li> <li> <p>Write payee records to the <code>PA1099</code> file, including:</p> <ul> <li>Fixed payer details (TIN: <code>222318612</code>, Name: \"AMERICAN REFINING GROUP, INC.\", Address: \"77 NORTH KENDALL AVENUE, BRADFORD, PA 16701\").</li> <li>Payee details (TIN, name, address, city, state, zip).</li> <li>Payment amounts and withholding (state and local).</li> <li>Combined payment total (<code>DPAY</code>).</li> </ul> </li> <li> <p>Generate Printed Report:</p> </li> <li>Print a header with company name, program name (<code>AP791</code>), report title, page number, and date.</li> <li>For each payee record, print:<ul> <li>Record number, TIN type (EIN/SSN), name control, formatted TIN, payment amounts, name, address, city, state, and zip.</li> </ul> </li> <li> <p>Print totals for payment categories at the end.</p> </li> <li> <p>Copy Output File:</p> </li> <li>Copy the <code>PATAX</code> file to the dynamically named file (e.g., <code>P109925</code>) for storage or submission.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Record Processing:</li> <li>Process only payee (<code>B</code>) records; skip transmitter (<code>T</code>) records.</li> <li> <p>Include only non-zero payment amounts in totals.</p> </li> <li> <p>TIN Handling:</p> </li> <li>Identify TIN as EIN (<code>A1TTIN = '1'</code>) or SSN (<code>A1TTIN = '2'</code>).</li> <li> <p>Format TINs for printing (e.g., <code>XXX-XXXXXX</code> for EIN, <code>XXX-XX-XXXX</code> for SSN).</p> </li> <li> <p>Payment Categories:</p> </li> <li> <p>Accumulate payments for specific 1099 categories (e.g., <code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) and compute a combined total (<code>DPAY</code>).</p> </li> <li> <p>IRS Compliance:</p> </li> <li>Include mandatory fields in <code>PA1099</code> (payer/payee TIN, payment amounts, withholding, address).</li> <li> <p>Use fixed payer details for \"AMERICAN REFINING GROUP, INC.\"</p> </li> <li> <p>Report Formatting:</p> </li> <li>Align printed data in columns with headers for readability.</li> <li>Include running totals for payment categories in the report.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Payment Totals:</li> <li>For each payee record, if <code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, or <code>A1PAY7</code> is non-zero, add to respective totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and combined total (<code>DPAY</code>).</li> <li> <p>Example: <code>TPAY1 += A1PAY1</code>, <code>DPAY += A1PAY1 + A1PAY2 + A1PAY3 + A1PAY7</code>.</p> </li> <li> <p>Record Count:</p> </li> <li>Increment <code>REC#</code> and <code>COUNT</code> for each processed payee record.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The input file (<code>IRSTAX</code>) is pre-populated with valid 1099 data.</li> <li>The printer is configured for 15 CPI (characters per inch) output.</li> <li>The program is executed in an IBM System/36 or AS/400 environment.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li>Input: <code>IRSTAX</code> (750 bytes).</li> <li>Output: <code>PA1099</code> (875 bytes), <code>PRINT</code> (164 bytes).</li> <li>Temporary: <code>PATAX</code> (cleared and used for processing).</li> <li>External Program: <code>GSY2K</code> (called by OCL for year-related processing).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/","title":"AP795 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script, typically used in IBM midrange systems like the AS/400 (now IBM i). This script, named <code>AP795.ocl36.txt</code>, is designed to convert 1099 information as required by government regulations, preparing the <code>IRSTAX</code> file for download to a PC. Below, I\u2019ll explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script performs a series of conditional checks and operations to manage the creation or replacement of the <code>IRSTAX</code> file, potentially in a test or production environment. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Setup and Comments:</li> <li>The script begins with comments (<code>// *</code>) explaining its purpose: converting 1099 information and preparing the <code>IRSTAX</code> file for download to a PC.</li> <li> <p>A specific comment indicates that in a test environment, the file is named <code>?9?IRSTAX</code> (where <code>?9?</code> is a placeholder for a prefix, likely a library or environment identifier, such as <code>TEST</code> or <code>PROD</code>).</p> </li> <li> <p>Environment Check and Pause:</p> </li> <li>The script checks if the environment variable <code>?9?</code> is set to <code>/G</code> (likely indicating a specific environment or mode, such as production or test).</li> <li> <p>A <code>PAUSE</code> statement is executed, prompting the user to interact with the system, possibly to confirm the operation or review the setup before proceeding.</p> </li> <li> <p>Check for Existing <code>IRSTAX</code> File:</p> </li> <li>The script checks if the <code>IRSTAX</code> file exists in the <code>DATAF1</code> library:<ul> <li>If <code>?9?</code> is <code>/G</code> and <code>DATAF1-IRSTAX</code> exists, it displays a message: <code>'IRSTAX ALREADY EXISTS. DO YOU WANT TO DELETE IT'</code>.</li> <li>If <code>?9?</code> is not <code>/G</code> and <code>DATAF1-?9?IRSTAX</code> exists, it displays the same message but for the prefixed file (e.g., <code>TESTIRSTAX</code>).</li> </ul> </li> <li>Further messages ask the user if they want to continue (<code>'AND CONTINUE? IF NO, PRESS \"SYS RQ\" AND TAKE OPTION 3'</code>), suggesting a manual intervention option (e.g., pressing the System Request key to abort or choose an alternative action).</li> <li> <p>If the file exists, another <code>PAUSE</code> statement halts execution, likely to allow the user to confirm whether to proceed with deletion.</p> </li> <li> <p>Delete Existing <code>IRSTAX</code> File:</p> </li> <li>If the <code>IRSTAX</code> file exists:<ul> <li>For <code>?9?=/G</code>, the script deletes <code>IRSTAX</code> from the <code>DATAF1</code> library using <code>DELETE IRSTAX,F1</code>.</li> <li>For <code>?9?!=/G</code>, the script deletes the prefixed file (e.g., <code>?9?IRSTAX</code>) using <code>DELETE ?9?IRSTAX,F1</code>.</li> </ul> </li> <li> <p>This step ensures that any existing <code>IRSTAX</code> file is removed before creating a new one, avoiding conflicts or data duplication.</p> </li> <li> <p>Copy Data to Create New <code>IRSTAX</code> File:</p> </li> <li>The script uses the <code>COPYDATA</code> command to create a new <code>IRSTAX</code> file by copying data from the <code>AP1099</code> file (or <code>?9?AP1099</code> in a test environment):<ul> <li>For <code>?9?=/G</code>, it executes: <code>COPYDATA AP1099,,IRSTAX,,,,,,,750,NE,'D'</code>.</li> <li>For <code>?9?!=/G</code>, it executes: <code>COPYDATA ?9?AP1099,,?9?IRSTAX,,,,,,,750,NE,'D'</code>.</li> </ul> </li> <li> <p>Parameters in the <code>COPYDATA</code> command:</p> <ul> <li>Source file: <code>AP1099</code> or <code>?9?AP1099</code> (the 1099 data source).</li> <li>Target file: <code>IRSTAX</code> or <code>?9?IRSTAX</code> (the output file).</li> <li><code>750</code>: Likely specifies the record length or a processing parameter (common in IBM i for file creation).</li> <li><code>NE</code>: Indicates \"No Error\" handling, meaning the operation will not stop on certain errors.</li> <li><code>'D'</code>: Specifies a disposition or mode, possibly indicating a direct copy or a specific data format.</li> </ul> </li> <li> <p>Environment Handling:</p> </li> <li>The script uses conditional logic (<code>IF ?9?/G</code>) to handle different environments (e.g., production vs. test). The <code>?9?</code> variable allows the script to dynamically adjust file names (e.g., <code>TESTIRSTAX</code> vs. <code>IRSTAX</code>) based on the environment.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external program or command: - COPYDATA: This is an IBM i system command used to copy data from one file to another, with options for formatting, error handling, and record length specification. It is used to create the <code>IRSTAX</code> file from <code>AP1099</code>.</p> <p>No other external programs (e.g., RPG programs) are explicitly called in the script. The <code>GSY2K</code> reference appears to be a label or comment, possibly indicating a system or module context, but it is not a program call.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script interacts with the following files (referred to as \"tables\" in some contexts, though they are physical files in IBM i terminology): 1. AP1099 (or <code>?9?AP1099</code>):    - The source file containing 1099 data.    - In a test environment, it may be prefixed (e.g., <code>TESTAP1099</code>).    - Located in an unspecified library (assumed to be accessible in the job\u2019s library list). 2. IRSTAX (or <code>?9?IRSTAX</code>):    - The target file created or replaced by the script, containing the converted 1099 data formatted for government requirements.    - Located in the <code>DATAF1</code> library (as indicated by <code>DATAF1-IRSTAX</code>).    - In a test environment, it may be prefixed (e.g., <code>TESTIRSTAX</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#summary","title":"Summary","text":"<p>The OCL program <code>AP795.ocl36.txt</code> automates the process of preparing the <code>IRSTAX</code> file for 1099 reporting by: 1. Checking the environment and pausing for user confirmation. 2. Verifying if the <code>IRSTAX</code> file exists and prompting the user to delete it if necessary. 3. Deleting the existing <code>IRSTAX</code> file (if present). 4. Copying data from <code>AP1099</code> to create a new <code>IRSTAX</code> file, formatted for government requirements.</p> <p>External Programs Called: - <code>COPYDATA</code> (IBM i system command).</p> <p>Tables Used: - <code>AP1099</code> (or <code>?9?AP1099</code>): Source 1099 data file. - <code>IRSTAX</code> (or <code>?9?IRSTAX</code>): Target file in the <code>DATAF1</code> library.</p> <p>The script is designed to handle both production and test environments, using the <code>?9?</code> variable to adjust file names dynamically. It includes user interaction points (via <code>PAUSE</code>) to ensure manual oversight before critical operations like file deletion.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/","title":"Summary AP795 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#list-of-use-cases-implemented-by-the-ocl-program-ap795ocl36txt","title":"List of Use Cases Implemented by the OCL Program (AP795.ocl36.txt)","text":"<p>The OCL program <code>AP795.ocl36.txt</code> implements a single primary use case:</p> <ol> <li>Preparation of IRSTAX File for 1099 Reporting:</li> <li>The program converts 1099 data from the <code>AP1099</code> file into the <code>IRSTAX</code> file, formatted as required by government regulations, for download to a PC. It supports both production and test environments by handling file names dynamically (using the <code>?9?</code> variable) and includes checks to avoid overwriting existing files without user confirmation.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#function-requirement-document-irstax-file-preparation","title":"Function Requirement Document: IRSTAX File Preparation","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#purpose","title":"Purpose","text":"<p>To create a function that converts 1099 data from the <code>AP1099</code> file into the <code>IRSTAX</code> file, formatted for government reporting, suitable for download to a PC. The function operates in both production and test environments, ensuring no data conflicts and adhering to business rules.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Source File: <code>AP1099</code> (or <code>?9?AP1099</code> in test environment), containing 1099 data.</li> <li>Target Library: <code>DATAF1</code>, where the <code>IRSTAX</code> file will be created.</li> <li>Environment Prefix: <code>?9?</code> (string, e.g., <code>TEST</code> or empty for production), determines file naming.</li> <li>Record Length: Fixed at 750 bytes, defining the output file format.</li> <li>Error Handling Flag: <code>NE</code> (No Error), allowing the process to continue despite certain errors.</li> <li>Disposition: <code>'D'</code>, specifying the data copy mode (direct copy).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Target File: <code>IRSTAX</code> (or <code>?9?IRSTAX</code> in test environment), created in the <code>DATAF1</code> library, containing formatted 1099 data ready for government submission.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Environment:</li> <li>Determine if the environment is production (<code>?9?</code> is empty or <code>/G</code>) or test (<code>?9?</code> is a prefix like <code>TEST</code>).</li> <li>Check for Existing IRSTAX File:</li> <li>Verify if <code>DATAF1-IRSTAX</code> (or <code>DATAF1-?9?IRSTAX</code>) exists.</li> <li>If the file exists, delete it to prevent data conflicts.</li> <li>Copy Data:</li> <li>Copy data from <code>AP1099</code> (or <code>?9?AP1099</code>) to <code>IRSTAX</code> (or <code>?9?IRSTAX</code>) in the <code>DATAF1</code> library.</li> <li>Use a record length of 750 bytes, <code>NE</code> error handling, and <code>'D'</code> disposition.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>File Overwrite Protection: The function must check for an existing <code>IRSTAX</code> file and delete it only if it exists, ensuring no accidental data loss.</li> <li>Environment Flexibility: Support dynamic file naming based on the <code>?9?</code> prefix to accommodate production (<code>IRSTAX</code>, <code>AP1099</code>) and test (<code>?9?IRSTAX</code>, <code>?9?AP1099</code>) environments.</li> <li>Data Integrity: The output <code>IRSTAX</code> file must conform to a 750-byte record length to meet government reporting standards.</li> <li>Error Handling: Use <code>NE</code> to allow non-critical errors during the copy process, ensuring the function completes unless a critical failure occurs.</li> <li>Disposition: Use <code>'D'</code> mode to ensure direct data copying without additional transformations unless specified by government requirements.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#calculations","title":"Calculations","text":"<ul> <li>No explicit calculations are performed. The function relies on the <code>COPYDATA</code> command to handle data transfer, assuming the <code>AP1099</code> file is pre-formatted with correct 1099 data (e.g., amounts, payee details) and the 750-byte record length ensures compatibility with government submission formats.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The <code>AP1099</code> file contains valid 1099 data, pre-validated and formatted for government requirements.</li> <li>The <code>DATAF1</code> library exists and is accessible for writing the <code>IRSTAX</code> file.</li> <li>The <code>?9?</code> prefix is provided correctly to distinguish between production and test environments.</li> <li>The <code>COPYDATA</code> command handles any internal data formatting required for the 750-byte record structure.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#constraints","title":"Constraints","text":"<ul> <li>The function does not interact with a user interface, relying on input parameters for all decisions.</li> <li>No external file I/O beyond the IBM i system (e.g., no direct PC download within the function).</li> <li>The function assumes the <code>COPYDATA</code> command is available on the IBM i system.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/","title":"AP910 RPGLE","text":"<p>The RPGLE program <code>AP910.rpgle.txt</code> is part of an IBM AS/400 or IBM i accounts payable system, designed for vendor master maintenance and inquiry. It is called from the OCL program <code>AP910P99.ocl36.txt</code> via <code>AP910P</code> and is used to create, update, or display vendor records, with specific support for 1099 form processing. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP910</code> program is a display file-driven application that manages vendor master records through a single-panel interface (<code>fmt01</code>). It supports maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, allowing users to add, update, or view vendor details. The program includes validations for 1099-related fields and integrates with an SQL vendor table for synchronization. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts five parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$co</code> (company code).</li> <li><code>p$vend</code> (vendor number).</li> <li><code>p$mode</code> (3A): Run mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li><code>p$file</code> (10A): Vendor file name for 1099 processing (e.g., <code>APVN2025</code>).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, for file overrides.</li> <li><code>p$flag</code> (1A): Return flag to indicate success (<code>1</code>) or failure.</li> </ul> </li> <li>Sets Up Fields: Initializes display file fields (<code>f$co</code>, <code>f$vend</code>), key lists (<code>klvend</code>, <code>klglms</code>, <code>klcaid</code>, etc.), and message handling fields. Defines data structures for date conversion (<code>d#cymd</code>), time conversion (<code>time12</code>), and vendor record storage (<code>wkds01</code>, <code>svds</code>).</li> <li> <p>Purpose: Prepares the program environment for processing vendor data.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code> using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code>, <code>GGLMAST</code>, <code>GGSTABL</code>, <code>GBBCAID</code>, <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code>, <code>ZGLMAST</code>, <code>ZGSTABL</code>, <code>ZBBCAID</code>, <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2025</code>), uses it for <code>APVEND</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures access to the correct files, especially year-specific vendor files for 1099 processing.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Fetch Company Data: Chains to <code>APCONT</code> using <code>f$co</code> to retrieve the company name (<code>acname</code>) into <code>f$conm</code>. If not found, clears <code>f$conm</code>.</li> <li>Fetch Vendor Data: Chains to <code>APVEND</code> using <code>klvend</code> (<code>f$co</code>, <code>f$vend</code>). If the vendor exists (<code>*in99 = *off</code>), loads the record; otherwise, clears <code>apvendpf</code>.</li> <li>Set Mode and Header: Sets protection indicator <code>*in70</code> (<code>*off</code> for <code>MNT</code>, <code>*on</code> for <code>INQ</code>) and header (<code>c$hdr1</code>) to \u201cVendor Master Maintenance\u201d or \u201cVendor Master Inquiry\u201d based on <code>p$mode</code>.</li> <li> <p>Purpose: Loads existing vendor data or prepares for a new record.</p> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes <code>clrscr</code> to reset the display.</li> <li>Initialize Panel: Calls <code>f01mov</code> to set up fields for <code>fmt01</code> and sets <code>w$fmt = 'FMT01'</code>.</li> <li>Main Loop (<code>fmtagn</code>):<ul> <li>Displays the message subfile if needed (<code>wrtmsg</code>).</li> <li>Displays <code>fmt01</code> using <code>EXFMT</code>.</li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>, <code>*in76</code>\u2013<code>*in79</code>) and message subfile (<code>clrmsg</code>).</li> <li>Processes user input based on the current format (<code>f01sr</code> for <code>fmt01</code>).</li> </ul> </li> <li> <p>Purpose: Manages the interactive display of the vendor maintenance/inquiry panel.</p> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li>Handle Function Keys:<ul> <li>F04: Calls <code>prompt</code> to handle field-level prompting (e.g., lookup for GL account, terms, or 1099 code).</li> <li>F05: Calls <code>AP915P</code> for vendor contact maintenance/inquiry (commented out in this version).</li> <li>F10: Repositions the cursor to the top of the screen.</li> <li>F12: Exits the program (<code>fmtagn = *off</code>).</li> </ul> </li> <li>Inquiry Mode: If <code>p$mode = 'INQ'</code>, calls <code>f01nxt</code> to determine the next format (though only <code>fmt01</code> is active).</li> <li>Enter Key: Validates input (<code>f01edt</code>), updates the database if in <code>MNT</code> mode (<code>upddbf</code>), and processes the next format (<code>f01nxt</code>).</li> <li> <p>Purpose: Handles user interactions with the <code>fmt01</code> panel.</p> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li>If no input changes are detected (<code>*in19 = *off</code>), exits the main loop (<code>fmtagn = *off</code>).</li> <li> <p>Purpose: Controls whether to continue or exit the panel loop (only <code>fmt01</code> is used in this version).</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validates fields in <code>fmt01</code>:<ul> <li>Name (<code>vnname</code>): Must not be blank (<code>ERR0012</code>, <code>*in51</code>).</li> <li>Name Overflow (<code>vnnovf</code>): Must be <code>Y</code> or <code>N</code> (<code>ERR0014</code>, <code>*in52</code>).</li> <li>ACH Fields (commented out): If bank account (<code>vnabk#</code>) is non-blank, validates:</li> <li><code>vnacos</code>: Must be <code>C</code> or <code>S</code> (<code>com(05)</code>, <code>*in77</code>).</li> <li><code>vnacls</code>: Must be <code>CCD</code> (<code>com(06)</code>, <code>*in78</code>).</li> <li><code>vnarte</code>: Must be non-zero (<code>com(07)</code>, <code>*in79</code>).</li> <li>ACH Hold Validation: If <code>vnhold = 'A'</code> and <code>vnabk#</code> is blank, errors (<code>com(08)</code>, <code>*in76</code>\u2013<code>*in79</code>).</li> <li>Sort Field (<code>vnsort</code>): Must not be blank (<code>ERR0012</code>, <code>*in53</code>).</li> <li>Hold (<code>vnhold</code>): Must be <code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>, or blank (<code>com(01)</code>, <code>*in54</code>).</li> <li>Single Payee (<code>vnsngl</code>): Must be <code>S</code> or blank (<code>com(02)</code>, <code>*in55</code>).</li> <li>Expense GL (<code>vnexgl</code>): Must exist in <code>GLMAST</code>, not deleted or inactive (<code>ERR0010</code>, <code>*in56</code>), and not a special account (<code>ERR0015</code>).</li> <li>Carrier (<code>vncaid</code>): Must exist in <code>BBCAID</code> and not be deleted (<code>ERR0010</code>, <code>*in57</code>).</li> <li>Inactive Code (<code>vndel</code>): Sets <code>f$inac</code> to \u201cINACTIVE\u201d if <code>vndel = 'I'</code>.</li> <li>Terms (<code>vnterm</code>): Must exist in <code>GSTABL</code> and not be deleted (<code>ERR0010</code>, <code>*in58</code>).</li> <li>Gal/Rcpts Required (<code>vngrrq</code>): Commented out validation for <code>GSTABL</code> lookup (<code>ERR0010</code>, <code>*in71</code>).</li> <li>Category (<code>vncatg</code>): Must exist in <code>GSTABL</code> (no deleted check, <code>*in62</code> commented out).</li> <li>1099 Code (<code>vn1099</code>):</li> <li>Must not be blank (<code>ERR0010</code>, <code>*in59</code>).</li> <li>Must exist in <code>GSTABL</code> and not be deleted (<code>ERR0010</code>, <code>*in59</code>).</li> <li>If <code>M</code> or <code>N</code>, requires:<ul> <li>IRS Name Control (<code>vnnmct</code>) non-blank (<code>com(04)</code>, <code>*in61</code>).</li> <li>IRS EIN (<code>vnidno</code>) non-blank (<code>com(10)</code>, <code>*in64</code>).</li> <li>IRS Box 1 (<code>vnbox1</code>) non-zero (<code>com(11)</code>, <code>*in65</code>).</li> </ul> </li> <li>Zip Code (<code>vnzip5</code>): Required if <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code> (<code>com(09)</code>, <code>*in63</code>).</li> <li>Payees (<code>vnpyn2</code>): If non-blank, <code>vnpyn1</code> must also be non-blank (<code>com(03)</code>, <code>*in60</code>).</li> </ul> </li> <li>Inquiry Mode: Clears errors and messages if <code>p$mode = 'INQ'</code>.</li> <li> <p>Purpose: Ensures valid input before updating the database.</p> </li> <li> <p>Initialize Format Fields (<code>f01mov</code> Subroutine):</p> </li> <li>Calls <code>f01edt</code> to validate and populate display fields.</li> <li>Clears errors if validation fails.</li> <li>Calls <code>f01pro</code> (empty in this version) for format protection.</li> <li> <p>Purpose: Prepares the <code>fmt01</code> panel with validated data.</p> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> </li> <li>Saves current vendor record (<code>wkds01</code>) to <code>svds</code>.</li> <li>Checks if the vendor exists in <code>APVEND</code> (<code>klvend</code> chain):<ul> <li>If exists (<code>*in80 = *off</code>) and fields changed, restores <code>svds</code> to <code>wkds01</code>, updates <code>apvendpf</code>, sets <code>p$flag = '1'</code>, and calls <code>updSQLvn</code> (commented out).</li> <li>If not exists, clears <code>apvendpf</code>, populates with <code>svds</code>, sets <code>vnco</code> and <code>vnvend</code>, writes a new record, sets <code>p$flag = '1'</code>, and calls <code>updSQLvn</code>.</li> </ul> </li> <li> <p>Purpose: Updates or creates vendor records in <code>APVEND</code>.</p> </li> <li> <p>Update SQL Vendor Master (<code>updSQLvn</code> Subroutine):</p> <ul> <li>Commented out code to call a PC program (<code>UpdateVendor.EXE</code>) via <code>STRPCOCLP</code> and <code>QCMDEXC</code> to synchronize the AS/400 vendor table with an SQL version.</li> <li>Purpose: Intended to keep an external SQL vendor table in sync (disabled per <code>MG01</code>).</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Determines cursor position for window return.</li> <li>For <code>fmt01</code>, handles field lookups:</li> <li>VNEXGL: Calls <code>LGLMAST</code> to select a GL account, updates <code>vnexgl</code> if valid.</li> <li>VNCAID: Calls <code>LBBCAID</code> to select a carrier, updates <code>vncaid</code>.</li> <li>VNTERM: Calls <code>LGSTABL</code> to select terms, updates <code>vnterm</code>.</li> <li>VNGRRQ: Calls <code>LGSTABL</code> for gal/rcpts required (commented out).</li> <li>VNCATG: Calls <code>LGSTABL</code> to select a category, updates <code>vncatg</code>.</li> <li>VN1099: Calls <code>LGSTABL</code> to select a 1099 code, updates <code>vn1099</code>.</li> <li>Sets <code>*in19</code> to indicate a format change.</li> <li>Purpose: Provides interactive lookup for key fields.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>): Sends error or confirmation messages to the program message queue (<code>QMHSNDPM</code>).</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile (<code>QMHRMVPM</code>).</li> <li>Purpose: Manages user feedback for errors and confirmations.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Mode-Based Access:</li> <li>In <code>MNT</code> mode, users can create or update vendor records, with input fields enabled (<code>*in70 = *off</code>).</li> <li> <p>In <code>INQ</code> mode, users can only view vendor details, with input fields protected (<code>*in70 = *on</code>).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>Overrides <code>APVEND</code> to year-specific files (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) to support 1099 processing, as noted in revision <code>JB01</code>.</li> <li> <p>Similarly overrides <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, and <code>BBCAID</code>.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Mandatory Fields:<ul> <li>Vendor name (<code>vnname</code>) and sort field (<code>vnsort</code>) must not be blank (<code>ERR0012</code>).</li> <li>If second payee (<code>vnpyn2</code>) is non-blank, first payee (<code>vnpyn1</code>) must be non-blank (<code>com(03)</code>).</li> </ul> </li> <li>Valid Values:<ul> <li>Name overflow (<code>vnnovf</code>): <code>Y</code> or <code>N</code> (<code>ERR0014</code>).</li> <li>Hold (<code>vnhold</code>): <code>H</code> (check), <code>A</code> (ACH), <code>W</code> (wire), <code>E</code>, <code>U</code> (utility auto-pay, per <code>MG03</code>), or blank (<code>com(01)</code>).</li> <li>Single payee (<code>vnsngl</code>): <code>S</code> or blank (<code>com(02)</code>).</li> <li>ACH fields (commented out): If <code>vnabk#</code> non-blank, <code>vnacos</code> (<code>C</code>/<code>S</code>), <code>vnacls</code> (<code>CCD</code>), and <code>vnarte</code> (non-zero) are required. If <code>vnhold = 'A'</code> and <code>vnabk#</code> blank, errors (<code>com(08)</code>).</li> </ul> </li> <li>Reference File Checks:<ul> <li>Expense GL (<code>vnexgl</code>): Must exist in <code>GLMAST</code>, not deleted or inactive (<code>ERR0010</code>), and not special (<code>ERR0015</code>).</li> <li>Carrier (<code>vncaid</code>): Must exist in <code>BBCAID</code> and not deleted (<code>ERR0010</code>).</li> <li>Terms (<code>vnterm</code>): Must exist in <code>GSTABL</code> and not deleted (<code>ERR0010</code>).</li> <li>Category (<code>vncatg</code>): Must exist in <code>GSTABL</code> (no deleted check).</li> <li>1099 Code (<code>vn1099</code>): Must exist in <code>GSTABL</code>, not deleted, and not blank (<code>ERR0010</code>).</li> </ul> </li> <li> <p>1099-Specific Validations (per <code>MG02</code>, <code>JK01</code>):</p> <ul> <li>If <code>vn1099 = 'M'</code> (MISC) or <code>'N'</code> (NEC):</li> <li>IRS Name Control (<code>vnnmct</code>) must be non-blank (<code>com(04)</code>).</li> <li>IRS EIN (<code>vnidno</code>) must be non-blank (<code>com(10)</code>).</li> <li>IRS Box 1 (<code>vnbox1</code>) must be non-zero (<code>com(11)</code>).</li> <li>If <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code>, zip code (<code>vnzip5</code>) must be non-zero (<code>com(09)</code>).</li> </ul> </li> <li> <p>Database Updates:</p> </li> <li>In <code>MNT</code> mode, updates or creates records in <code>APVEND</code> and sets <code>p$flag = '1'</code> on success.</li> <li> <p>Synchronization with an SQL vendor table is commented out (<code>MG01</code>).</p> </li> <li> <p>User Interface:</p> </li> <li>Supports function keys: F04 (field prompting), F05 (vendor contacts, commented out), F10 (cursor home), F12 (exit), and Enter (process input).</li> <li>Displays a single panel (<code>fmt01</code>) with vendor details and validation messages.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP910D:</li> <li>Display file (CF, <code>workstn</code>) for the vendor maintenance/inquiry interface (<code>fmt01</code>, <code>clrscr</code>, <code>msgctl</code>).</li> <li> <p>Used for user input/output.</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>f$co</code>) and retrieve company name (<code>acname</code>).</p> </li> <li> <p>GLMAST:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for general ledger accounts.</li> <li>Overridden to <code>GGLMAST</code> or <code>ZGLMAST</code>.</li> <li> <p>Used to validate expense GL account (<code>vnexgl</code>).</p> </li> <li> <p>GSTABL:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for reference data (terms, category, 1099 codes).</li> <li>Overridden to <code>GGSTABL</code> or <code>ZGSTABL</code>.</li> <li> <p>Used to validate <code>vnterm</code>, <code>vncatg</code>, <code>vn1099</code>, and commented-out <code>vngrrq</code>.</p> </li> <li> <p>BBCAID:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for carrier data (replaces <code>GSTABL</code> for carrier lookup per <code>JK03</code>).</li> <li>Overridden to <code>GBBCAID</code> or <code>ZBBCAID</code>.</li> <li> <p>Used to validate carrier (<code>vncaid</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Update file (UF, <code>usropn</code>) for vendor master data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li>Used for reading, updating, or creating vendor records.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>LGLMAST:</li> <li>Called in <code>prompt</code> for GL account lookup (<code>VNEXGL</code>).</li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$acct</code> (account), <code>o$sub</code> (sub-account), <code>o$spec</code> (special accounts flag), <code>o$fgrp</code> (file group).</p> </li> <li> <p>LBBCAID:</p> </li> <li>Called in <code>prompt</code> for carrier lookup (<code>VNCAID</code>, per <code>JK03</code>).</li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$caid</code> (carrier ID), <code>o$fgrp</code> (file group).</p> </li> <li> <p>LGSTABL:</p> </li> <li>Called in <code>prompt</code> for lookup of terms (<code>VNTERM</code>), category (<code>VNCATG</code>), and 1099 code (<code>VN1099</code>).</li> <li> <p>Parameters: <code>k$apterm</code>/<code>k$apcatg</code>/<code>k$ap1099</code> (table type), <code>k$term</code>/<code>k$catg</code>/<code>k$1099</code> (code), <code>o$fgrp</code> (file group).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li> <p>System program to clear messages from the message subfile.</p> </li> <li> <p>AP915P (commented out)**:</p> </li> <li>Intended for vendor contact maintenance/inquiry (per <code>JK02</code>).</li> <li> <p>Parameters: <code>o$co#</code> (company), <code>o$vend</code> (vendor), <code>o$mode</code> (MNT/INQ), <code>o$fgrp</code> (file group).</p> </li> <li> <p>STRPCOCLP and UpdateVendor.EXE (commented out)**:</p> </li> <li>Intended to synchronize the AS/400 vendor table with an SQL table (per <code>JB05</code>, disabled per <code>MG01</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP910</code> RPGLE program is a critical component of the accounts payable system, providing an interactive interface for maintaining or viewing vendor master records. It supports creating and updating vendor data in <code>MNT</code> mode and viewing in <code>INQ</code> mode, with robust validations for 1099-related fields (e.g., IRS Name Control, EIN, Box 1, zip code). The program integrates with the OCL program <code>AP910P99</code> and <code>AP910P</code> to manage vendor data for 1099 processing, using year-specific files like <code>APVNYYYY</code>. It includes field lookups and error handling to ensure data integrity.</p> <p>Tables/Files: <code>AP910D</code> (display), <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, <code>APVEND</code> (overridden to <code>GAPCONT</code>, <code>GGLMAST</code>, <code>GGSTABL</code>, <code>GBBCAID</code>, <code>GAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>LGLMAST</code>, <code>LBBCAID</code>, <code>LGSTABL</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>, <code>AP915P</code> (commented out), <code>STRPCOCLP</code>/<code>UpdateVendor.EXE</code> (commented out).</p> <p>If you need further details on related programs (<code>AP9104</code>, <code>LGLMAST</code>, etc.) or file structures, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/","title":"AP9104 RPGLE","text":"<p>The RPGLE program <code>AP9104.rpgle.txt</code> is part of an IBM AS/400 or IBM i accounts payable system, designed to handle the inactivation or reactivation of vendor master records. It is called from the OCL program <code>AP910P99.ocl36.txt</code> via <code>AP910P</code> (specifically for option 4 in the subfile interface) and provides a window-based interface (<code>delwdw</code>) to toggle a vendor's status between active (<code>A</code>) and inactive (<code>I</code>). The program supports 1099 processing by overriding vendor files to year-specific versions (e.g., <code>APVN2012</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP9104</code> program is a display file-driven application that presents a window (<code>delwdw</code>) for users to inactivate or reactivate vendor records. It operates in maintenance mode only, as it updates the vendor file (<code>APVEND</code>) and does not support inquiry mode explicitly. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts five parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$co</code> (company code).</li> <li><code>p$vend</code> (vendor number).</li> <li><code>p$file</code> (10A): Vendor file name for 1099 processing (e.g., <code>APVN2012</code>).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, for file overrides.</li> <li><code>p$flag</code> (1A): Return flag to indicate the result (<code>A</code> for reactivated, <code>D</code> for inactivated).</li> </ul> </li> <li>Sets Up Fields: Initializes display file fields (<code>f$co</code>, <code>f$vend</code>), key list (<code>klvend</code>), and message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>). Defines a date conversion data structure (<code>d#cymd</code>) and a program status data structure (<code>psds##</code>).</li> <li> <p>Purpose: Prepares the program environment by setting initial field values and key lists.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code> using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code>, <code>GAPOPNH</code>, <code>GINFIL4</code>, <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code>, <code>ZAPOPNH</code>, <code>ZINFIL4</code>, <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2012</code>), uses it for <code>APVEND</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures access to the correct files, especially year-specific vendor files for 1099 processing (per revision <code>JB01</code>).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Fetch Company Data: Chains to <code>APCONT</code> using <code>f$co</code> to validate the company code (no action taken if not found, <code>*in99</code> checked).</li> <li>Fetch Vendor Data: Chains to <code>APVEND</code> using <code>klvend</code> (<code>f$co</code>, <code>f$vend</code>). If the vendor exists (<code>*in99 = *off</code>):<ul> <li>If <code>vndel = 'I'</code> (inactive), sets header (<code>f$hdr</code>) to \u201cVendor Master Reactivate\u201d and function key label (<code>f$fkyd</code>) to \u201cF22=Reactivate\u201d (<code>*in72 = *on</code>).</li> <li>Otherwise, sets header to \u201cVendor Master Inactivate\u201d and function key label to \u201cF23=Inactivate\u201d (<code>*in73 = *on</code>).</li> </ul> </li> <li> <p>Purpose: Loads vendor data and configures the window based on the vendor\u2019s current status.</p> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li>Main Loop (<code>winagn</code>):<ul> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears it (<code>msgclr</code>).</li> <li>Displays the <code>delwdw</code> window using <code>EXFMT</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) and error indicators (<code>*in50</code>\u2013<code>*in69</code>).</li> <li>Processes user input based on function keys:</li> <li>F12: Exits the program (<code>winagn = *off</code>).</li> <li>F22 or F23: Validates input (<code>winedt</code>), checks balances if F23 (<code>chkbal</code>), and updates the database if no errors (<code>winupd</code>).</li> <li>Other (Enter): Validates input (<code>winedt</code>) without updating.</li> </ul> </li> <li> <p>Purpose: Manages the interactive window for inactivating or reactivating vendors.</p> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li>If F23 (inactivate) is pressed, calls <code>chkbal</code> to check for outstanding balances or history (though most checks are commented out).</li> <li> <p>Purpose: Ensures valid conditions before allowing database updates.</p> </li> <li> <p>Check Balances (<code>chkbal</code> Subroutine):</p> </li> <li>Commented out checks for:<ul> <li>Open invoices in <code>APOPNH</code> (<code>ERR0000</code>, <code>com(01)</code>: \u201cThis Vendor Has Outstanding Invoices, Cannot Delete\u201d).</li> <li>Non-zero monthly balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>) in <code>APVEND</code> (<code>ERR0000</code>, <code>com(01)</code>).</li> <li>Inventory history in <code>INFIL4</code> (<code>ERR0000</code>, <code>com(02)</code>: \u201cThis Vendor Has Inventory History, Cannot Delete\u201d).</li> </ul> </li> <li> <p>Purpose: Originally intended to prevent inactivation if the vendor has outstanding activity, but currently allows inactivation without checks (noted as \u201cnever allowed to delete a vendor\u201d).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li>Reactivate (F22):<ul> <li>Chains to <code>APVEND</code> using <code>klvend</code>.</li> <li>If the vendor exists (<code>*in99 = *off</code>) and is inactive (<code>vndel = 'I'</code>), sets <code>vndel = 'A'</code>, updates <code>apvendpf</code>, and sets <code>p$flag = 'A'</code>.</li> </ul> </li> <li>Inactivate (F23):<ul> <li>Chains to <code>APVEND</code> using <code>klvend</code>.</li> <li>If the vendor exists (<code>*in99 = *off</code>) and is not inactive (<code>vndel \u2260 'I'</code>), sets <code>vndel = 'I'</code>, updates <code>apvendpf</code>, and sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>Purpose: Updates the vendor\u2019s status in <code>APVEND</code> to active or inactive.</p> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>Add Message (<code>addmsg</code>): Sends error or confirmation messages to the program message queue (<code>QMHSNDPM</code>).</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile (<code>QMHRMVPM</code>).</li> <li> <p>Purpose: Manages user feedback for errors or confirmations.</p> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Vendor Status Toggle:</li> <li>The program toggles the vendor\u2019s deletion flag (<code>vndel</code>) in <code>APVEND</code>:<ul> <li>F22 (Reactivate): Changes <code>vndel</code> from <code>I</code> (inactive) to <code>A</code> (active), sets <code>p$flag = 'A'</code>.</li> <li>F23 (Inactivate): Changes <code>vndel</code> from non-<code>I</code> to <code>I</code> (inactive), sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>The term \u201cdelete\u201d in comments refers to marking a vendor as inactive (<code>I</code>), not physical deletion.</p> </li> <li> <p>Validation (Disabled):</p> </li> <li>Originally, inactivation (F23) was restricted if the vendor had:<ul> <li>Open invoices in <code>APOPNH</code>.</li> <li>Non-zero balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>) in <code>APVEND</code>.</li> <li>Inventory history in <code>INFIL4</code>.</li> </ul> </li> <li> <p>These checks are commented out, allowing inactivation without validation (noted as \u201cnever allowed to delete a vendor\u201d).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>Overrides <code>APVEND</code> to year-specific files (e.g., <code>APVN2012</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) to support 1099 processing (per <code>JB01</code>).</li> <li> <p>Similarly overrides <code>APCONT</code>, <code>APOPNH</code>, and <code>INFIL4</code>.</p> </li> <li> <p>User Interface:</p> </li> <li>Uses a window (<code>delwdw</code>) with dynamic headers (\u201cVendor Master Reactivate\u201d or \u201cVendor Master Inactivate\u201d) and function key labels (<code>F22=Reactivate</code> or <code>F23=Inactivate</code>) based on the vendor\u2019s current status.</li> <li>Supports function keys: F12 (exit), F22 (reactivate), F23 (inactivate), and Enter (validate input).</li> <li> <p>Displays error messages if validation fails (though currently disabled).</p> </li> <li> <p>Database Updates:</p> </li> <li>Updates <code>APVEND</code> only if the vendor exists and meets status conditions.</li> <li>Returns <code>p$flag</code> to indicate the action taken (<code>A</code> or <code>D</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP9104D:</li> <li>Display file (CF, <code>workstn</code>) for the vendor inactivate/reactivate window (<code>delwdw</code>, <code>msgctl</code>, <code>msgclr</code>).</li> <li> <p>Used for user input/output.</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>f$co</code>).</p> </li> <li> <p>APOPNH:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for open invoices.</li> <li>Overridden to <code>GAPOPNH</code> or <code>ZAPOPNH</code>.</li> <li> <p>Used in commented-out balance checks (<code>chkbal</code>).</p> </li> <li> <p>INFIL4:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for inventory history.</li> <li>Overridden to <code>GINFIL4</code> or <code>ZINFIL4</code>.</li> <li> <p>Used in commented-out balance checks (<code>chkbal</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Update file (UF, <code>usropn</code>) for vendor master data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2012</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li>Used to update the vendor\u2019s deletion flag (<code>vndel</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>QCMDEXC:</li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear messages from the message subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP9104</code> RPGLE program is a specialized component of the accounts payable system, called from <code>AP910P99</code> via <code>AP910P</code> to inactivate or reactivate vendor records by toggling the <code>vndel</code> flag in <code>APVEND</code> (<code>A</code> for active, <code>I</code> for inactive). It uses a window interface (<code>delwdw</code>) and supports 1099 processing through year-specific file overrides. Validation checks for outstanding invoices or balances are disabled, allowing unrestricted status changes. The program provides user feedback via a message subfile and integrates with the broader vendor maintenance workflow.</p> <p>Tables/Files: <code>AP9104D</code> (display), <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, <code>APVEND</code> (overridden to <code>GAPCONT</code>, <code>GAPOPNH</code>, <code>GINFIL4</code>, <code>GAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p> <p>If you need further details on related programs, file structures, or the OCL integration, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/","title":"AP910P RPGLE","text":"<p>The RPGLE program <code>AP910P.rpgle.txt</code> is an IBM AS/400 or IBM i program designed for working with vendor records in an accounts payable (AP) system, specifically for maintaining vendor data related to 1099 forms. It is called from the OCL program <code>AP910P99.ocl36.txt</code> and provides an interactive interface for users to manage vendor records. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP910P</code> program is a display file-driven application that manages vendor records through a subfile interface. It supports maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, allowing users to create, update, inactivate/reactivate, or display vendor records. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts three parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$mode</code> (3A): Run mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li><code>p$file</code> (10A): Vendor file name (e.g., <code>APVN2025</code> for 1099 processing).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, to determine file overrides.</li> </ul> </li> <li>Sets Up Fields: Initializes subfile control fields, message handling fields, and headers. Defines key lists (<code>klsfl1</code>, <code>kls1s1</code>, <code>kls1r1</code>) for file access and sets default values for flags and counters.</li> <li> <p>Purpose: Prepares the program environment, including repositioning fields, subfile control, and message queue setup.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to the <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code> files using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code> and <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code> and <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2025</code>), uses it for <code>APVEND</code> and <code>APVENDRD</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures the correct vendor files are accessed, especially for year-specific 1099 files like <code>APVNYYYY</code>.</p> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages and <code>wrtmsg</code> to initialize the message subfile.</li> <li>Initialize Subfile Control: Sets default values for subfile control fields (e.g., <code>c$co</code> = company code, <code>c$dlyn</code> = 'N' for inactive records).</li> <li>Set Protection Mode: If <code>p$mode = 'MNT'</code>, enables input fields (<code>*in70 = *off</code>); otherwise, protects fields for inquiry mode (<code>*in70 = *on</code>).</li> <li>Position File: Calls <code>sf1rep</code> to position the <code>APVENDRD</code> file based on user input (company code, vendor number, or search string).</li> <li>Main Loop (<code>sf1agn</code>):<ul> <li>Displays the command line and message subfile.</li> <li>Checks for subfile records to set display indicators (<code>*in41</code> for <code>SFLDSP</code>).</li> <li>Displays the subfile control record (<code>sflctl1</code>) using <code>EXFMT</code>.</li> <li>Processes user input based on function keys:</li> <li>F3: Exits the program.</li> <li>F4: Calls <code>prompt</code> (empty in this code, likely for future field-level help).</li> <li>F5: Refreshes the subfile, clearing selection fields and repositioning.</li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li>Enter: Processes subfile changes (<code>sf1prc</code>) if records are modified.</li> <li>F10: Repositions the cursor to the control record.</li> <li>Handles direct access (<code>sf1dir</code>) if a specific vendor is selected (<code>d$sel</code> and <code>d$vend</code>).</li> <li>Repositions the subfile if control fields change (<code>sf1rep</code>).</li> </ul> </li> <li> <p>Purpose: Manages the interactive subfile interface, allowing users to view and manipulate vendor records.</p> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes each using <code>sf1chg</code>.</li> <li> <p>Purpose: Handles user selections or modifications made in the subfile.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Copies the selected vendor number (<code>s1vend</code>) to working fields (<code>s$vend</code>, <code>a$vend</code>).</li> <li>Based on the subfile selection option (<code>s1sel</code>):<ul> <li>Option 2: Calls <code>sf1s02</code> (change vendor) if <code>p$mode = 'MNT'</code>.</li> <li>Option 4: Calls <code>sf1s04</code> (inactivate/reactivate vendor) if <code>p$mode = 'MNT'</code>.</li> <li>Option 5: Calls <code>sf1s05</code> (display vendor).</li> </ul> </li> <li>Updates the subfile record after processing by chaining to <code>APVEND</code>, formatting the record (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating <code>sfl1</code>.</li> <li> <p>Purpose: Processes user-selected actions for specific vendor records.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Validates control fields (<code>sf1cte</code>).</li> <li>Positions the <code>APVENDRD</code> file using <code>setll</code> based on the company code (<code>c$co</code>) and vendor number (<code>c$vend</code>).</li> <li>Retains control fields for repositioning and loads new subfile records (<code>sf1lod</code>).</li> <li> <p>Purpose: Refreshes the subfile based on user-specified filters (company, vendor, search string, or inactive flag).</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li>Validates the company code (<code>c$co</code>) by chaining to <code>APCONT</code>. If invalid or blank, sets error message <code>ERR0000</code> and indicators <code>*in50</code>, <code>*in51</code>.</li> <li>Ensures <code>c$dlyn</code> (include inactive) is <code>Y</code> or <code>N</code>; if invalid, sets error message <code>ERR0014</code> and indicators <code>*in50</code>, <code>*in52</code>.</li> <li> <p>Purpose: Validates user input in the subfile control area to ensure correct data filtering.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Loads up to <code>pagsz1</code> (30) records into the subfile.</li> <li>Reads records from <code>APVENDRD</code> using <code>reade</code> with key list <code>kls1r1</code>.</li> <li>Filters records:<ul> <li>Skips inactive records (<code>vndel = 'I'</code>) if <code>c$dlyn = 'N'</code>.</li> <li>Applies search string filter (<code>c$srch</code>) using <code>scan</code> on <code>vnname</code>.</li> </ul> </li> <li>Formats each record (<code>sf1fmt</code>) and applies color coding (<code>sf1col</code>).</li> <li>Writes records to the subfile (<code>sfl1</code>) and updates <code>rrn1</code>.</li> <li> <p>Purpose: Populates the subfile with filtered vendor records for display.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> </li> <li>Clears the subfile record and populates fields:<ul> <li><code>s1del</code>: Vendor deletion flag (<code>vndel</code>).</li> <li><code>s1vend</code>: Vendor number (<code>vnvend</code>).</li> <li><code>s1name</code>: Vendor name (<code>vnname</code>).</li> <li><code>s1tel#</code>: Vendor phone (<code>vnarea</code> + <code>vntele</code>).</li> <li><code>s1lpay</code>: Last payment amount (<code>vnlpay</code>).</li> <li><code>s1lpdt</code>: Last payment date (<code>vnlpd8</code>, converted to MMDDYY).</li> </ul> </li> <li> <p>Purpose: Formats vendor data for display in the subfile.</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets indicator <code>*in71</code> to <code>*on</code> if the vendor is inactive (<code>s1del = 'I'</code>), likely for visual highlighting.</li> <li>Purpose: Visually distinguishes inactive vendors in the subfile.</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Validates direct selection (<code>d$sel</code> and <code>d$vend</code>):</li> <li>For option 1 (create) in <code>MNT</code> mode, ensures <code>d$vend</code> is not zero (<code>ERR0103</code> if zero).</li> <li>Checks if the vendor exists in <code>APVEND</code> (<code>klsfl1 setll</code>):<ul> <li>For non-create options, errors if vendor does not exist (<code>ERR0102</code>).</li> <li>For create, errors if vendor already exists (<code>ERR0101</code>).</li> </ul> </li> <li>Processes valid selections by calling <code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s04</code>, or <code>sf1s05</code>.</li> <li>Clears selection fields after processing.</li> <li>Purpose: Handles direct vendor selection for create, change, inactivate, or display actions.</li> </ul> </li> <li> <p>Clear Subfile (<code>sf1clr</code> Subroutine):</p> <ul> <li>Resets <code>rrn1</code> and <code>rrnsv1</code> to zero and clears the subfile (<code>*in42 = *on</code>, writes <code>sflctl1</code>).</li> <li>Purpose: Prepares the subfile for reloading.</li> </ul> </li> <li> <p>Option Processing Subroutines:</p> <ul> <li>Create (<code>sf1s01</code>):</li> <li>Calls <code>AP910</code> with <code>MNT</code> mode, passing company, vendor, file name, file group, and a return flag.</li> <li>If successful (<code>o$flag = '1'</code> and <code>o$vend</code> non-zero), sends confirmation message (<code>com(02)</code> + vendor number) and triggers subfile repositioning.</li> <li>Change (<code>sf1s02</code>):</li> <li>Ensures the vendor is not deleted (<code>vndel \u2260 'D'</code>); if deleted, sets error <code>com(08)</code>.</li> <li>Calls <code>AP910</code> with <code>MNT</code> mode.</li> <li>If successful (<code>o$flag = '1'</code>), sends confirmation message (<code>com(03)</code> + vendor number).</li> <li>Inactivate/Reactivate (<code>sf1s04</code>):</li> <li>Calls <code>AP9104</code>, passing company, vendor, file name, file group, and return flag.</li> <li>Based on <code>o$flag</code>, sends confirmation message:<ul> <li><code>I</code>: Inactive (<code>com(05)</code> + vendor number).</li> <li><code>A</code>: Active (<code>com(06)</code> + vendor number).</li> </ul> </li> <li>Display (<code>sf1s05</code>):</li> <li>Calls <code>AP910</code> with <code>INQ</code> mode to display vendor details.</li> <li>Purpose: Executes specific vendor actions based on user selection.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>): Sends messages to the program message queue (<code>QMHSNDPM</code>) with error or confirmation text.</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile using <code>QMHRMVPM</code>.</li> <li>Purpose: Manages user feedback for errors and confirmations.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Mode-Based Access:</li> <li>In <code>MNT</code> mode, users can create (option 1), change (option 2), or inactivate/reactivate (option 4) vendor records.</li> <li> <p>In <code>INQ</code> mode, users can only display vendor details (option 5), with input fields protected (<code>*in70 = *on</code>).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>When called from the 1099 process, the program overrides <code>APVEND</code> and <code>APVENDRD</code> to year-specific files (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>).</li> <li> <p>Ensures historical vendor data (from <code>GAPVEND</code>) is accessed correctly.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Company code (<code>c$co</code>) must exist in <code>APCONT</code> (<code>ERR0000</code> if invalid).</li> <li>Inactive flag (<code>c$dlyn</code>) must be <code>Y</code> or <code>N</code> (<code>ERR0014</code> if invalid).</li> <li>For create (option 1), vendor number must be non-zero (<code>ERR0103</code>) and must not already exist (<code>ERR0101</code>).</li> <li>For non-create options, vendor must exist (<code>ERR0102</code>).</li> <li> <p>Deleted vendors (<code>vndel = 'D'</code>) cannot be modified (<code>ERR0000</code>).</p> </li> <li> <p>Subfile Filtering:</p> </li> <li>Users can filter vendors by company code, vendor number, search string (<code>c$srch</code>), or include inactive records (<code>c$dlyn = 'Y'</code>).</li> <li> <p>Inactive vendors are visually highlighted (<code>*in71 = *on</code>).</p> </li> <li> <p>User Interface:</p> </li> <li>Supports function keys: F3 (exit), F4 (prompt, not implemented), F5 (refresh), F10 (position to control), Page Down (load more records), and Enter (process changes).</li> <li>Displays up to 30 records per subfile page (<code>pagsz1</code>).</li> <li> <p>Maintains cursor position and subfile page for redisplay.</p> </li> <li> <p>Confirmation Messages:</p> </li> <li>Provides feedback for successful create (<code>com(02)</code>), change (<code>com(03)</code>), inactivate (<code>com(05)</code>), or reactivate (<code>com(06)</code>) actions.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP910PD:</li> <li>Display file (CF, <code>workstn</code>) with a subfile (<code>sfl1</code>) for interactive vendor management.</li> <li> <p>Used for user interface (input/output via <code>sflctl1</code>, <code>sflcmd1</code>, <code>msgctl</code>, <code>msgclr</code>).</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) containing company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>c$co</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Input-only file (IF, <code>usropn</code>) containing vendor data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li> <p>Used for chaining vendor records during updates.</p> </li> <li> <p>APVENDRD:</p> </li> <li>Input-only file (IF, <code>usropn</code>) with renamed record format (<code>apvendpf</code> to <code>apvendpr</code>).</li> <li>Overridden similarly to <code>APVEND</code>.</li> <li>Used for reading vendor records to populate the subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP910:</li> <li>Called for:<ul> <li>Create (<code>sf1s01</code>, <code>MNT</code> mode): Creates a new vendor record.</li> <li>Change (<code>sf1s02</code>, <code>MNT</code> mode): Updates an existing vendor record.</li> <li>Display (<code>sf1s05</code>, <code>INQ</code> mode): Displays vendor details.</li> </ul> </li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$vend</code> (vendor), <code>o$mode</code> (MNT/INQ), <code>o$file</code> (file name), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).</p> </li> <li> <p>AP9104:</p> </li> <li>Called for inactivate/reactivate (<code>sf1s04</code>, <code>MNT</code> mode): Toggles vendor status between active and inactive.</li> <li> <p>Parameters: <code>o$co</code>, <code>o$vend</code>, <code>o$file</code>, <code>o$fgrp</code>, <code>o$flag</code> (returns <code>I</code> for inactive, <code>A</code> for active).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue for errors or confirmations.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear messages from the message subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP910P</code> RPGLE program is a core component of the accounts payable system, providing an interactive subfile interface for managing vendor records. It supports creating, updating, inactivating/reactivating, and displaying vendors, with specific handling for 1099 processing via year-specific file overrides. The program validates inputs, filters records, and provides user feedback through a message subfile. It integrates with the OCL program <code>AP910P99</code> to allow manual updates to vendor payment totals for 1099 forms.</p> <p>Tables/Files: <code>AP910PD</code> (display), <code>APCONT</code>, <code>APVEND</code>, <code>APVENDRD</code> (overridden to <code>GAPCONT</code>, <code>GAPVEND</code>, <code>ZAPCONT</code>, <code>ZAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>AP910</code>, <code>AP9104</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p> <p>If you need further details on the called programs (<code>AP910</code>, <code>AP9104</code>) or file structures, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/","title":"AP910P99 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP910P99.ocl36.txt</code>, used for vendor file maintenance related to 1099 forms in an IBM AS/400 or IBM i environment. Below, I\u2019ll break down the process steps of the OCL program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG OCL Program","text":"<p>OCL is a control language used on IBM midrange systems to manage job execution, call programs, and handle file operations. The program <code>AP910P99</code> appears to be part of an accounts payable (AP) system for maintaining vendor data related to 1099 forms. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Initialization and Setup:</li> <li><code>// SCPROCP ,,,,,,,,?9?</code>: This likely specifies the procedure name and a parameter <code>?9?</code>, which is a placeholder for a runtime value (possibly a control flag or environment indicator).</li> <li><code>// SWITCH 00000000</code>: Initializes job switches to <code>00000000</code>, resetting any control flags used for conditional logic.</li> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables to blank, ensuring a clean state for the job.</li> <li> <p><code>// GSY2K</code>: Likely invokes a system-level setting or module related to Year 2000 (Y2K) compliance, possibly for date handling.</p> </li> <li> <p>Prompt for Four-Digit Year:</p> </li> <li>The commented message <code>// * 'WHAT YEAR ARE THESE 1099''S FOR?  PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'</code> suggests that the program expects a four-digit year input (e.g., <code>2025</code>) to process 1099 forms for a specific year.</li> <li> <p><code>// IF ?10R?/ * ''</code>: Checks if the input parameter <code>?10?</code> (likely the year) is blank. If blank, the program may skip certain steps or terminate (the exact behavior depends on the condition handling).</p> </li> <li> <p>Conditional Program Calls Based on Parameter <code>?9?</code>:</p> </li> <li>The program checks the value of <code>?9?</code> (a control flag or environment indicator, possibly <code>G</code> for a specific mode like \"Generate\").</li> <li>If <code>?9?</code> equals <code>G</code>:<ul> <li><code>CALL PGM(AP910P) PARM('MNT' 'APVN?10?' '?9?')</code>: Calls the RPG program <code>AP910P</code> with parameters:</li> <li><code>'MNT'</code>: Indicates maintenance mode.</li> <li><code>'APVN?10?'</code>: The file name <code>APVN</code> concatenated with the four-digit year (e.g., <code>APVN2025</code> for year 2025).</li> <li><code>'?9?'</code>: Passes the control flag.</li> <li>Alternatively, <code>CALL PGM(AP910P) PARM('MNT' '?9?VN?10?' '?9?')</code>: Calls the same program but with a different file name format, <code>?9?VN?10?</code> (e.g., <code>GVN2025</code> if <code>?9?</code> is <code>G</code>).</li> </ul> </li> <li> <p>These calls likely perform maintenance tasks on the vendor file for the specified year, such as updating payment totals or preparing data for 1099 reporting.</p> </li> <li> <p>Set File Name for Update:</p> </li> <li>If <code>?9?</code> equals <code>G</code>:<ul> <li><code>EVALUATE P13='APVN?10?'</code>: Sets the variable <code>P13</code> to the file name <code>APVN</code> concatenated with the year (e.g., <code>APVN2025</code>).</li> <li>Alternatively, <code>EVALUATE P13='?9?VN?10?'</code>: Sets <code>P13</code> to a file name like <code>GVN2025</code>.</li> </ul> </li> <li> <p><code>P13</code> is used to specify the file for the subsequent update operation.</p> </li> <li> <p>User Interaction for Payment Updates:</p> </li> <li><code>// * '---------------------------------------------------------------'</code>: Displays a separator line (commented, possibly for debugging or documentation).</li> <li><code>// PAUSE 'THE NEXT SCREEN ALLOWS FOR PAYMENT UPDATES IF NECESSARY'</code>: Pauses the job and displays a message to the user, indicating that the next screen allows manual updates to payment data.</li> <li> <p><code>// UPDDTA ?13?</code>: Invokes the Update Data (<code>UPDDTA</code>) command to allow the user to interactively update records in the file specified by <code>P13</code> (e.g., <code>APVN2025</code>). This is likely a screen-based interface where users can modify vendor payment totals for the 1099 process.</p> </li> <li> <p>Conditional Termination:</p> </li> <li><code>// IF SWITCH1-1 GOTO END</code>: Checks if switch 1 is set to <code>1</code>. If true, the program jumps to the <code>END</code> tag, terminating execution.</li> <li> <p>This switch might be set by the <code>AP910P</code> program or the <code>UPDDTA</code> operation to indicate an error or completion condition.</p> </li> <li> <p>Cleanup and Exit:</p> </li> <li><code>// TAG END</code>: Marks the end of the program.</li> <li><code>// SWITCH 00000000</code>: Resets job switches to <code>00000000</code> for consistency.</li> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables again, ensuring no residual data remains.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external program: - <code>AP910P</code>: An RPG program called with parameters to perform maintenance tasks on the vendor file. It is invoked conditionally based on the value of <code>?9?</code> (e.g., when <code>?9?</code> is <code>G</code>). The parameters passed are:   - <code>'MNT'</code>: Maintenance mode.   - File name (either <code>APVN?10?</code> or <code>?9?VN?10?</code>, e.g., <code>APVN2025</code> or <code>GVN2025</code>).   - Control flag <code>?9?</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (referred to as \"tables\" in the context of AS/400): - <code>APVNYYYY</code>: A vendor file containing data before monthly and yearly totals are cleared, as noted in the programmer\u2019s comment. The <code>YYYY</code> is replaced by the four-digit year input (<code>?10?</code>), e.g., <code>APVN2025</code>. - <code>?9?VN?10?</code>: An alternative file name format (e.g., <code>GVN2025</code> if <code>?9?</code> is <code>G</code>). This may refer to a different version or copy of the vendor file, depending on the environment or mode. - The file name is dynamically set to the variable <code>P13</code> and used in the <code>UPDDTA</code> command for interactive updates.</p> <p>Additionally, the programmer\u2019s note mentions: - <code>GAPVEND</code>: The original vendor file from which <code>APVNYYYY</code> is created during the period-end process (<code>AP300</code>). This file is not directly used in <code>AP910P99</code> but provides context for the origin of <code>APVNYYYY</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#summary","title":"Summary","text":"<p>The <code>AP910P99</code> OCL program facilitates vendor file maintenance for 1099 form processing. It: 1. Initializes the environment and prompts for a four-digit year. 2. Conditionally calls the RPG program <code>AP910P</code> to perform maintenance on the vendor file (<code>APVNYYYY</code> or <code>?9?VN?10?</code>) based on a control flag (<code>?9?</code>). 3. Allows users to manually update payment totals in the specified file using the <code>UPDDTA</code> command. 4. Terminates if a specific switch is set or after completing the update process. 5. Ensures cleanup by resetting switches and variables.</p> <p>External Programs: <code>AP910P</code> Tables/Files: <code>APVNYYYY</code> (e.g., <code>APVN2025</code>), <code>?9?VN?10?</code> (e.g., <code>GVN2025</code>), with <code>GAPVEND</code> as the source file in the period-end process.</p> <p>If you need further analysis of the <code>AP910P</code> program or the file structures, let me know, and I can provide additional insights or search for related information if available!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/","title":"Summary AP910P99 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#list-of-use-cases-implemented-by-the-ap910-program-suite","title":"List of Use Cases Implemented by the AP910 Program Suite","text":"<p>The <code>AP910</code> program suite, comprising <code>AP910.rpgle</code> (vendor master maintenance/inquiry) and <code>AP9104.rpgle</code> (vendor master delete/restore), called via <code>AP910P</code> from the OCL program <code>AP910P99.ocl36.txt</code>, implements the following use cases in the accounts payable system on IBM AS/400 or IBM i:</p> <ol> <li>Vendor Master Maintenance:</li> <li>Description: Allows users to create, update, or view vendor master records in the <code>APVEND</code> file, with support for 1099 processing. Includes validations for mandatory fields, reference data, and 1099-specific requirements (e.g., IRS Name Control, EIN, Box 1).</li> <li>Program: <code>AP910.rpgle</code></li> <li> <p>Details: Supports maintenance (<code>MNT</code>) mode for adding/updating vendor records and inquiry (<code>INQ</code>) mode for viewing. Validates fields like vendor name, sort field, hold status, GL account, carrier, terms, category, and 1099 codes. Optionally synchronizes with an SQL vendor table (commented out).</p> </li> <li> <p>Vendor Master Inactivation/Reactivation:</p> </li> <li>Description: Enables marking a vendor as inactive (<code>I</code>) or reactivating it (<code>A</code>) in the <code>APVEND</code> file, with support for 1099 processing via year-specific file overrides.</li> <li>Program: <code>AP9104.rpgle</code></li> <li>Details: Provides a window interface to toggle the <code>vndel</code> flag. Originally included balance checks (invoices, monthly balances, inventory history) to prevent inactivation, but these are disabled, allowing unrestricted status changes.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#function-requirement-document-vendor-master-management-function","title":"Function Requirement Document: Vendor Master Management Function","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#vendor-master-management-function-requirements","title":"Vendor Master Management Function Requirements","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#overview","title":"Overview","text":"<p>The Vendor Master Management function handles the creation, update, inquiry, inactivation, and reactivation of vendor master records in the accounts payable system. It supports 1099 processing with year-specific file overrides and enforces data integrity through validations.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>p$co</code>): Identifier for the company (numeric).</li> <li>Vendor Number (<code>p$vend</code>): Identifier for the vendor (numeric).</li> <li>Run Mode (<code>p$mode</code>, 3A): <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li>File Name (<code>p$file</code>, 10A): Optional year-specific vendor file (e.g., <code>APVN2025</code>) for 1099 processing.</li> <li>File Group (<code>p$fgrp</code>, 1A): <code>G</code> or <code>Z</code> for file overrides.</li> <li>Vendor Data (for <code>MNT</code> mode, structure mirroring <code>APVEND</code>):</li> <li>Name (<code>vnname</code>): Vendor name (non-blank).</li> <li>Sort Field (<code>vnsort</code>): Short name for sorting (non-blank).</li> <li>Name Overflow (<code>vnnovf</code>): <code>Y</code> or <code>N</code>.</li> <li>Hold (<code>vnhold</code>): <code>H</code> (check), <code>A</code> (ACH), <code>W</code> (wire), <code>E</code>, <code>U</code> (utility auto-pay), or blank.</li> <li>Single Payee (<code>vnsngl</code>): <code>S</code> or blank.</li> <li>Expense GL Account (<code>vnexgl</code>): General ledger account number.</li> <li>Carrier (<code>vncaid</code>): Carrier ID.</li> <li>Terms (<code>vnterm</code>): Payment terms code.</li> <li>Category (<code>vncatg</code>): Vendor category code.</li> <li>1099 Code (<code>vn1099</code>): 1099 reporting code.</li> <li>IRS Name Control (<code>vnnmct</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>IRS EIN (<code>vnidno</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>IRS Box 1 (<code>vnbox1</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>Country (<code>vnctry</code>): Country code (e.g., <code>US</code>).</li> <li>Zip Code (<code>vnzip5</code>): Required if <code>vnctry = 'US'</code>, <code>vn1099 \u2260 'X'</code>, and <code>vnhold \u2260 'E'</code>.</li> <li>Payee 1 (<code>vnpyn1</code>): Primary payee name.</li> <li>Payee 2 (<code>vnpyn2</code>): Secondary payee name (requires <code>vnpyn1</code> if non-blank).</li> <li>ACH Fields (optional, commented out):<ul> <li>Bank Account (<code>vnabk#</code>): Bank account number.</li> <li>Account Type (<code>vnacos</code>): <code>C</code> (checking) or <code>S</code> (savings).</li> <li>ACH Class (<code>vnacls</code>): <code>CCD</code>.</li> <li>Routing Code (<code>vnarte</code>): Bank routing number.</li> </ul> </li> <li>Action (for inactivation/reactivation): <code>REACTIVATE</code> or <code>INACTIVATE</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Vendor Data: Updated or retrieved vendor record (structure mirroring <code>APVEND</code>).</li> <li>Return Flag (<code>p$flag</code>, 1A): Indicates result:</li> <li><code>1</code>: Successful create/update (maintenance).</li> <li><code>A</code>: Successful reactivation.</li> <li><code>D</code>: Successful inactivation.</li> <li>Error Messages: List of validation errors (if any).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>p$co</code> exists in <code>APCONT</code>.</li> <li>For <code>MNT</code> or <code>INQ</code>, check if <code>p$co</code> and <code>p$vend</code> exist in <code>APVEND</code> (optional for <code>MNT</code> if creating new).</li> <li> <p>Apply file overrides for <code>APVEND</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, <code>APOPNH</code>, <code>INFIL4</code> based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) or <code>p$file</code> (e.g., <code>APVN2025</code>).</p> </li> <li> <p>Maintenance Mode (<code>MNT</code>):</p> </li> <li> <p>Create/Update:</p> <ul> <li>Validate input fields:</li> <li>Mandatory: <code>vnname</code>, <code>vnsort</code> non-blank.</li> <li><code>vnnovf</code>: <code>Y</code> or <code>N</code>.</li> <li><code>vnhold</code>: <code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>, or blank.</li> <li><code>vnsngl</code>: <code>S</code> or blank.</li> <li><code>vnexgl</code>: Exists in <code>GLMAST</code>, not deleted or inactive, not special.</li> <li><code>vncaid</code>: Exists in <code>BBCAID</code>, not deleted.</li> <li><code>vnterm</code>: Exists in <code>GSTABL</code>, not deleted.</li> <li><code>vncatg</code>: Exists in <code>GSTABL</code>.</li> <li><code>vn1099</code>: Exists in <code>GSTABL</code>, not deleted, non-blank.</li> <li>If <code>vn1099 = 'M'</code> or <code>'N'</code>:<ul> <li><code>vnnmct</code>, <code>vnidno</code> non-blank.</li> <li><code>vnbox1</code> non-zero.</li> </ul> </li> <li>If <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code>, <code>vnzip5</code> non-zero.</li> <li>If <code>vnpyn2</code> non-blank, <code>vnpyn1</code> non-blank.</li> <li>ACH (if enabled): If <code>vnabk#</code> non-blank, <code>vnacos</code> (<code>C</code>/<code>S</code>), <code>vnacls</code> (<code>CCD</code>), <code>vnarte</code> non-zero; if <code>vnhold = 'A'</code> and <code>vnabk#</code> blank, error.</li> <li>If valid, update or create record in <code>APVEND</code>:</li> <li>If vendor exists, update <code>apvendpf</code> if changed.</li> <li>If vendor does not exist, write new <code>apvendpf</code> with <code>vnco = p$co</code>, <code>vnvend = p$vend</code>.</li> <li>Set <code>p$flag = '1'</code>.</li> <li>(Optional, disabled) Synchronize with SQL vendor table via external call.</li> </ul> </li> <li> <p>Inquiry Mode (<code>INQ</code>):</p> </li> <li>Retrieve vendor record from <code>APVEND</code> using <code>p$co</code> and <code>p$vend</code>.</li> <li> <p>Return vendor data without modifications.</p> </li> <li> <p>Inactivation/Reactivation:</p> </li> <li>Reactivate:<ul> <li>If vendor exists in <code>APVEND</code> and <code>vndel = 'I'</code>, set <code>vndel = 'A'</code>, update <code>apvendpf</code>, set <code>p$flag = 'A'</code>.</li> </ul> </li> <li> <p>Inactivate:</p> <ul> <li>If vendor exists in <code>APVEND</code> and <code>vndel \u2260 'I'</code>, set <code>vndel = 'I'</code>, update <code>apvendpf</code>, set <code>p$flag = 'D'</code>.</li> <li>(Disabled) Prevent inactivation if open invoices (<code>APOPNH</code>), non-zero balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>), or inventory history (<code>INFIL4</code>).</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>Return error messages for validation failures (e.g., \u201cInvalid Response...H or A or W or blank\u201d, \u201cField Cannot be Blank, If Vendor receives a 1099\u201d).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Integrity:</li> <li>Mandatory fields (<code>vnname</code>, <code>vnsort</code>, <code>vn1099</code>) must be non-blank.</li> <li>Reference fields (<code>vnexgl</code>, <code>vncaid</code>, <code>vnterm</code>, <code>vncatg</code>, <code>vn1099</code>) must exist in respective files (<code>GLMAST</code>, <code>BBCAID</code>, <code>GSTABL</code>) and not be deleted (except <code>vncatg</code>).</li> <li>1099-specific fields (<code>vnnmct</code>, <code>vnidno</code>, <code>vnbox1</code>) required for <code>vn1099 = 'M'</code> or <code>'N'</code>.</li> <li>Zip code (<code>vnzip5</code>) required for US vendors unless <code>vn1099 = 'X'</code> or <code>vnhold = 'E'</code>.</li> <li>Payee hierarchy: <code>vnpyn2</code> requires <code>vnpyn1</code>.</li> <li>1099 Processing:</li> <li>Supports year-specific vendor files (e.g., <code>APVN2025</code>) via <code>p$file</code>.</li> <li>File overrides (<code>G</code> or <code>Z</code>) ensure access to correct data sets.</li> <li>Status Management:</li> <li>Inactivation marks <code>vndel = 'I'</code>, reactivation marks <code>vndel = 'A'</code>.</li> <li>(Disabled) Inactivation restricted if vendor has outstanding activity.</li> <li>Mode Restrictions:</li> <li><code>MNT</code> allows create/update, <code>INQ</code> allows view only.</li> <li>Inactivation/reactivation is a maintenance action.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Message Data Length:</li> <li>For error messages, calculate length as <code>%len(%trim(m@data))</code> for <code>QMHSNDPM</code>.</li> <li>No Other Calculations: The function performs validations and status updates without numerical computations.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>APVEND</code>: Vendor master (update).</li> <li><code>APCONT</code>: Company data (input).</li> <li><code>GLMAST</code>: General ledger accounts (input).</li> <li><code>GSTABL</code>: Reference data (terms, category, 1099 codes) (input).</li> <li><code>BBCAID</code>: Carrier data (input).</li> <li><code>APOPNH</code>: Open invoices (input, used in disabled checks).</li> <li><code>INFIL4</code>: Inventory history (input, used in disabled checks).</li> <li>External Programs (for validations):</li> <li><code>LGLMAST</code>: GL account lookup.</li> <li><code>LBBCAID</code>: Carrier lookup.</li> <li><code>LGSTABL</code>: Terms, category, 1099 code lookup.</li> <li>(Disabled) <code>AP915P</code>: Vendor contact maintenance/inquiry.</li> <li>(Disabled) <code>STRPCOCLP</code>/<code>UpdateVendor.EXE</code>: SQL table sync.</li> <li>System Programs:</li> <li><code>QCMDEXC</code>: File overrides.</li> <li><code>QMHSNDPM</code>, <code>QMHRMVPM</code>: Message handling.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for validation failures.</li> <li>Set <code>p$flag</code> to indicate success (<code>1</code>, <code>A</code>, <code>D</code>) or leave unset for errors.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input data conforms to <code>APVEND</code> record format.</li> <li>File overrides are correctly configured for <code>p$fgrp</code> and <code>p$file</code>.</li> <li>Disabled features (ACH validation, balance checks, SQL sync) are not required.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/","title":"AP315 Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#overview","title":"Overview","text":"<p><code>AP315.rpg</code> updates 'C' (Control) and 'T' (Transmitter) records in the <code>AP1099</code> file with payment totals and payee counts based on 'B' (Payee) records.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Defines <code>AP1099I</code> as an update file (750 bytes, indexed).</li> <li> <p>Sets <code>TYPE</code> to 'B' for reading Payee records.</p> </li> <li> <p>Read 'B' Records:</p> </li> <li>Positions to first 'B' record (<code>SETLL</code>).</li> <li>Reads 'B' records (<code>READE</code>) until end-of-file (<code>*IN55</code>).</li> <li>Accumulates payment amounts (<code>A3PAY1\u2013A3PAYC</code>) into <code>W4TAM1\u2013W4TAMC</code> (15 digits, 2 decimals).</li> <li> <p>Increments payee counter (<code>W4CNT</code>).</p> </li> <li> <p>Update 'C' Record:</p> </li> <li>Chains to 'C' record (<code>CHAIN</code>).</li> <li>Sets total payment amounts (<code>A4TAM1\u2013A4TAMC</code>) and payee count (<code>A4CNT</code>) from accumulated values.</li> <li>Clears dummy fields (<code>DUM1\u2013DUM12</code>) to zeros.</li> <li> <p>Updates record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Update 'T' Record:</p> </li> <li>Chains to 'T' record.</li> <li>Sets total payees (<code>A1TPAY</code>) to <code>W4CNT</code>.</li> <li> <p>Updates record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Termination:</p> </li> <li>Sets <code>*INLR</code> to end program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Processes only 'B' records for totaling payments and counting payees.</li> <li>Updates 'C' record with payment totals and payee count.</li> <li>Updates 'T' record with total payees.</li> <li>Ensures IRS 1099 compliance for field positions and formats.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file for reading/updating records, 750 bytes.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/","title":"AP3155 Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#overview","title":"Overview","text":"<p><code>AP3155.rpg</code> updates the sequence number (<code>SEQ#</code>) field in all records of the <code>AP1099</code> file to ensure sequential numbering.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Defines <code>AP1099</code> as an update file (750 bytes, non-indexed).</li> <li> <p>Maps <code>SEQ#</code> field (positions 500\u2013507, 8 digits).</p> </li> <li> <p>Update Sequence Numbers:</p> </li> <li>Increments counter (<code>COUNT</code>, 11 digits) by 1.</li> <li>Assigns counter to <code>SEQ#</code> field.</li> <li> <p>Updates each record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Termination:</p> </li> <li>Ends program after processing all records (implicit single-cycle processing).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Assigns sequential 8-digit numbers (starting from 1) to all records ('T', 'A', 'B', 'C', 'F').</li> <li>Ensures IRS 1099 compliance for sequence number formatting.</li> <li>No record type-specific logic or validation.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Data file for updating sequence numbers, 750 bytes.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/","title":"AP945 (OCL) Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#overview","title":"Overview","text":"<p><code>AP945.ocl36</code> is an S/36 OCL procedure that builds an index file (<code>AP1099I</code> or <code>&lt;&amp;FGRP&gt;AP1099I</code>) for the <code>AP1099</code> file to enable efficient record access.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Check File Group:</li> <li> <p>Evaluates <code>?9?</code> (9th parameter, <code>&amp;FGRP</code> from <code>AP945C</code>).</p> </li> <li> <p>Build Index:</p> </li> <li>If <code>?9? = 'G'</code>, creates <code>AP1099I</code> for <code>AP1099</code> with key at position 1 (length 1), duplicate keys allowed, and fields at positions 7 (length 4) and 12 (length 9).</li> <li>If <code>?9? \u2260 'G'</code>, creates <code>&lt;&amp;FGRP&gt;AP1099I</code> for <code>&lt;&amp;FGRP&gt;AP1099</code> with the same key structure.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Creates index for efficient access by record type (position 1).</li> <li>Supports live (<code>&amp;FGRP = 'G'</code>) and test environments with dynamic file naming.</li> <li>Ensures duplicate keys are allowed for multiple records of the same type (e.g., 'B' records).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Input data file for index creation.</li> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Output index file.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/","title":"AP945 (RPGLE) Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#overview","title":"Overview","text":"<p><code>AP945.rpgle</code> provides a subfile-based user interface for adding, editing, deleting, or inquiring about 'T' (Transmitter), 'A' (Payer), and 'B' (Payee) records in the <code>AP1099</code> file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Accepts <code>MODE</code> parameter ('INQ' or 'MNT').</li> <li>Sets inquiry mode (<code>*IN70</code> on) if <code>MODE = 'INQ'</code>.</li> <li> <p>Positions <code>AP1099I</code> to first 'A' record.</p> </li> <li> <p>Main Loop:</p> </li> <li>Displays subfile control (<code>SFLCTL</code>) with 'A', 'B', 'T' records via <code>@LOAD</code>.</li> <li> <p>Handles function keys:</p> <ul> <li>F03: Exit.</li> <li>F04: Prompt for company number (<code>PROMPT</code>).</li> <li>F06: Add record (<code>SRADD</code>).</li> <li>F12: Clear and reposition subfile (<code>@CLRSF</code>, <code>@REPOS</code>).</li> </ul> </li> <li> <p>Subfile Processing:</p> </li> <li> <p>Processes user selections (<code>SELIO</code>):</p> <ul> <li>Option 2: Edit/add record (<code>SFL02</code>, formats <code>FMT01</code>/'T', <code>FMT02</code>/'B', <code>FMT03</code>/'A').</li> <li>Option 3: Remove delete flag from 'B' records (<code>SFL03</code>, sets <code>A3DEL = ' '</code>).</li> <li>Option 4: Flag 'B' records for deletion (<code>SFL04</code>, sets <code>A3DEL = 'Y'</code>).</li> <li>Option 5: Display record in inquiry mode (<code>SFL05</code>).</li> </ul> </li> <li> <p>Add/Edit:</p> </li> <li>Validates inputs (<code>C$TY</code>, <code>C$CTL</code>, <code>C$TIN</code>) and checks for duplicates (<code>SRADD</code>).</li> <li> <p>Updates/adds records via <code>SRUPDT</code> (<code>UPDREC</code> or <code>ADDREC</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>Displays error messages (e.g., \"Invalid Type Entered\") via <code>ADDMSG</code>, <code>WRTMSG</code>, <code>CLRMSG</code>.</p> </li> <li> <p>Termination:</p> </li> <li>Closes files and ends program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Maintains 'T', 'A', 'B' records; 'C' and 'F' are not editable.</li> <li>Validates non-blank record type, control number, TIN; prevents duplicates.</li> <li>Flags 'B' records for deletion (<code>A3DEL = 'Y'</code>) or unflagging (<code>A3DEL = ' '</code>).</li> <li>Supports inquiry (<code>MODE = 'INQ'</code>) and maintenance (<code>MODE = 'MNT'</code>) modes.</li> <li>Ensures IRS 1099 field compliance (e.g., <code>A3PAY1\u2013A3PAYG</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file for reading/updating records, 824 bytes.</li> <li>AP945D: Display file with subfile (<code>SFL</code>) and formats (<code>SFLCTL</code>, <code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>MSGCTL</code>, <code>MSGCLR</code>).</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/","title":"AP945C Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#overview","title":"Overview","text":"<p><code>AP945C.clp</code> is a CL program that orchestrates the maintenance of the IRS 1099 file (<code>AP1099</code>), ensuring compliance through index creation, user-driven record updates, reorganization, total calculations, and sequence number updates.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Parameters:</li> <li>Accepts <code>&amp;MODE</code> (e.g., 'MNT' for maintenance) and <code>&amp;FGRP</code> (e.g., 'G' for live, 'T' for test).</li> <li> <p>Sets library to <code>QS36F</code> and file names (<code>&amp;FILE</code>, <code>&amp;SAVE</code>, <code>&amp;INDEX</code>) based on <code>&amp;FGRP</code> (e.g., <code>AP1099</code>, <code>AP1099SAV</code>, <code>AP1099I</code> or prefixed with <code>&amp;FGRP</code>).</p> </li> <li> <p>Create Index:</p> </li> <li> <p>Calls <code>AP945</code> (OCL) to create index file <code>&amp;INDEX</code> for <code>&amp;FILE</code>.</p> </li> <li> <p>Maintenance:</p> </li> <li> <p>Overrides <code>AP1099</code> to <code>&amp;FILE</code> and calls <code>AP945</code> (RPGLE) with <code>&amp;MODE</code> for user-driven record maintenance (add/edit/delete/inquire).</p> </li> <li> <p>Backup and Reorganize (if &amp;MODE = 'MNT'):</p> </li> <li>Copies <code>&amp;FILE</code> to <code>&amp;SAVE</code>, replacing existing records.</li> <li> <p>Copies records back to <code>&amp;FILE</code> in order: 'T' (replace), 'A' (add), 'B' (add, excluding position 45 = 'Y'), 'C' (add), 'F' (add).</p> </li> <li> <p>Update Totals:</p> </li> <li> <p>Calls <code>AP315</code> to update 'C' and 'T' record totals based on 'B' records.</p> </li> <li> <p>Update Sequence Numbers:</p> </li> <li> <p>Calls <code>AP3155</code> to assign sequential numbers to all records in <code>&amp;FILE</code>.</p> </li> <li> <p>Clean Up:</p> </li> <li>Deletes index file <code>&amp;INDEX</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#business-rules","title":"Business Rules","text":"<ul> <li>Ensures IRS 1099 compliance with record order and format.</li> <li>Supports live (<code>&amp;FGRP = 'G'</code>) and test environments via dynamic file naming.</li> <li>Maintains data integrity with backup to <code>&amp;SAVE</code>.</li> <li>Excludes deleted 'B' records (position 45 = 'Y') during reorganization.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#external-programs-called","title":"External Programs Called","text":"<ul> <li><code>AP945</code> (OCL Procedure): Creates index file.</li> <li><code>AP945</code> (RPGLE Program): Handles user maintenance/inquiry.</li> <li><code>AP315</code> (RPG Program): Updates totals in 'C' and 'T' records.</li> <li><code>AP3155</code> (RPG Program): Updates sequence numbers.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Main 1099 data file, updated and reorganized.</li> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file, created and deleted.</li> <li>AP1099SAV (or <code>&lt;&amp;FGRP&gt;AP1099SV</code>): Backup file for pre-maintenance data.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/","title":"Summary AP945C","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>Based on the full call stack (<code>AP945C.clp</code>, <code>AP945.ocl36</code>, <code>AP945.rpgle</code>, <code>AP315.rpg</code>, <code>AP3155.rpg</code>), the programs collectively implement a single primary use case:</p> <ol> <li>Maintain IRS 1099 File:</li> <li>This use case involves maintaining the <code>AP1099</code> file to ensure compliance with IRS 1099 tax form requirements. It supports both live and test environments, handles programmatic record updates (add, edit, delete 'T', 'A', and 'B' records), calculates payment totals, resequences records, and preserves data integrity through backup and reorganization.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-requirement-document-irs-1099-file-maintenance","title":"Function Requirement Document: IRS 1099 File Maintenance","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-overview","title":"Function Overview","text":"<p>The <code>Maintain1099File</code> function processes and maintains the <code>AP1099</code> file to ensure compliance with IRS 1099 tax form requirements. It supports live and test environments, updates payment totals, resequences records, and preserves data integrity through backup and reorganization, using programmatic inputs instead of screen interactions.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#inputs","title":"Inputs","text":"<ul> <li>Mode: String (3 characters, e.g., 'MNT' for maintenance, 'INQ' for inquiry).</li> <li>FileGroup: String (1 character, 'G' for live files, other values for test files, e.g., 'T').</li> <li>AP1099Data: File containing 1099 records ('T' for Transmitter, 'A' for Payer, 'B' for Payee, 'C' for Control, 'F' for End) in library <code>QS36F</code>.</li> <li>RecordUpdates: Array of updates for 'T', 'A', 'B' records, including record type, control number, TIN, payment amounts, and other IRS-required fields (e.g., names, addresses).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#outputs","title":"Outputs","text":"<ul> <li>Updated AP1099 File: File with updated records, totals, resequenced records, and maintained data in <code>QS36F</code>.</li> <li>AP1099SAV File: Backup file containing pre-maintenance data (if Mode = 'MNT').</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#process-steps","title":"Process Steps","text":"<ol> <li>Determine File Names:</li> <li>If FileGroup = 'G', use file names: <code>AP1099</code>, <code>AP1099I</code> (index), <code>AP1099SAV</code> (save).</li> <li>If FileGroup \u2260 'G', prefix files with FileGroup (e.g., <code>TAP1099</code>, <code>TAP1099I</code>, <code>TAP1099SV</code>).</li> <li> <p>Set library to <code>QS36F</code>.</p> </li> <li> <p>Create Index File:</p> </li> <li> <p>Build index file (<code>AP1099I</code> or <code>&lt;FileGroup&gt;AP1099I</code>) for <code>AP1099</code> with key at position 1 (length 1), allowing duplicate keys, and additional fields at positions 7 (length 4) and 12 (length 9).</p> </li> <li> <p>Perform Maintenance (if Mode = 'MNT'):</p> </li> <li>Process RecordUpdates array:<ul> <li>Add: Validate record type ('T', 'A', 'B'), control number, and TIN for non-blank values; check for duplicates; add new records to <code>AP1099I</code>.</li> <li>Edit: Update existing 'T', 'A', or 'B' records with provided fields (e.g., payment amounts, names, addresses).</li> <li>Delete: Flag 'B' records with <code>A3DEL = 'Y'</code> (position 45) or unflag (<code>A3DEL = ' '</code>) for removal/restoration.</li> </ul> </li> <li> <p>If Mode = 'INQ', skip updates and return record data.</p> </li> <li> <p>Backup and Reorganize (if Mode = 'MNT'):</p> </li> <li>Copy <code>AP1099</code> to <code>AP1099SAV</code>, replacing existing records.</li> <li> <p>Copy records back to <code>AP1099</code> in order:</p> <ul> <li>'T' records (replace existing).</li> <li>'A' records (add).</li> <li>'B' records where position 45 \u2260 'Y' and record type = 'B' (add).</li> <li>'C' records (add).</li> <li>'F' records (add).</li> </ul> </li> <li> <p>Update Totals:</p> </li> <li>For 'B' records:<ul> <li>Sum payment amounts (<code>A3PAY1</code> to <code>A3PAYG</code>, positions 55\u2013246, 12 digits, 2 decimals).</li> <li>Count total payees.</li> </ul> </li> <li>Update 'C' record:<ul> <li>Set total payment amounts (<code>A4TAM1</code> to <code>A4TAMG</code>, positions 19\u2013303) to sums from 'B' records.</li> <li>Set payee count (<code>A4CNT</code>, positions 2\u20139) to total payee count.</li> </ul> </li> <li> <p>Update 'T' record:</p> <ul> <li>Set total payees (<code>A1TPAY</code>, positions 296\u2013303) to total payee count.</li> </ul> </li> <li> <p>Update Sequence Numbers:</p> </li> <li> <p>Assign sequential numbers (starting from 1) to all records in <code>AP1099</code> at positions 500\u2013507 (8 digits).</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete index file (<code>AP1099I</code> or <code>&lt;FileGroup&gt;AP1099I</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#business-rules","title":"Business Rules","text":"<ul> <li>IRS Compliance: Ensure 'T', 'A', 'B', 'C', 'F' records are in correct order and format per IRS 1099 specifications (e.g., <code>A3PAY1\u2013A3PAYG</code>, <code>A1TIN</code>, <code>A2TIN</code>).</li> <li>Environment Support: Handle live (FileGroup = 'G') and test (FileGroup \u2260 'G') files with dynamic naming.</li> <li>Data Integrity: Back up <code>AP1099</code> to <code>AP1099SAV</code> before changes; copy records in specified order.</li> <li>Record Updates:</li> <li>Validate non-blank record type ('T', 'A', 'B'), control number, and TIN; prevent duplicates.</li> <li>Only 'B' records can be flagged for deletion (<code>A3DEL = 'Y'</code>) or unflagged (<code>A3DEL = ' '</code>).</li> <li>Calculations:</li> <li>Sum 'B' record payment amounts (12 digits, 2 decimals) for 'C' record totals (<code>A4TAM1\u2013A4TAMG</code>).</li> <li>Count 'B' records for payee totals in 'C' (<code>A4CNT</code>) and 'T' (<code>A1TPAY</code>) records.</li> <li>Assign 8-digit sequential numbers to all records.</li> <li>Record Filtering: Exclude 'B' records where position 45 = 'Y' during reorganization.</li> <li>File Management: Use <code>QS36F</code> library; create and delete index file for performance.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#assumptions","title":"Assumptions","text":"<ul> <li>Input <code>AP1099</code> file exists in <code>QS36F</code> with valid IRS 1099 record formats.</li> <li><code>RecordUpdates</code> array contains valid data for 'T', 'A', 'B' records, including required fields.</li> <li>Sufficient disk space for <code>AP1099SAV</code> and index files.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#constraints","title":"Constraints","text":"<ul> <li>Sequence numbers are 8 digits, limiting to 99,999,999 records.</li> <li>Payment amounts are 12 digits with 2 decimals, aligning with IRS field lengths.</li> <li>No validation of input record data beyond record type, control number, TIN, and position 45 checks.</li> <li>'C' and 'F' records are not editable; only updated programmatically by totals and sequence steps.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/","title":"AR190 OCL","text":"<p>The document outlines two related processes in an RPG .OCL (Operation Control Language) program for managing A/R (Accounts Receivable) Salesman Change Transactions: one for adding/updating transactions (AR190) and another for editing transactions (AR191). These processes appear to be part of a legacy system, likely running on an IBM AS/400 or similar platform, given the .OCL syntax and file structure references.</p> <p>Below, I\u2019ll explain the process steps for each section, list the external programs called, and identify the tables (files) used, based on the provided document.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#1-ar-salesman-change-transaction-addupdate-ar190","title":"1. A/R Salesman Change Transaction Add/Update (AR190)","text":"<p>This section describes the process for adding or updating salesman change transactions in the Accounts Receivable system.</p> <p>Process Steps: 1. Initialization and File Setup (BLDFILE):    - The program uses the <code>BLDFILE</code> command to create or prepare a file named <code>?9?ARSLST</code> (likely <code>ARSLST</code> with a system-specific prefix <code>?9?</code>).    - Parameters: <code>I</code> (input mode), <code>RECORDS,500</code> (allocates space for 500 records), <code>256</code> (record length), <code>2,8</code> (key field specifications, likely indicating a key starting at position 2 with a length of 8), <code>DFILE</code> (data file type), and <code>50</code> (possibly a file size or block factor).    - This step ensures the <code>ARSLST</code> file is ready to store salesman change transaction data.</p> <ol> <li>File Definitions:</li> <li>The program specifies four files to be loaded with <code>DISP-SHRMM</code> (shared multiple access mode, allowing concurrent access):<ul> <li><code>ARSLST</code>: The primary file for salesman change transactions.</li> <li><code>ARCONT</code>: Likely a control file containing configuration or control data for the A/R system.</li> <li><code>ARCUST</code>: The customer master file, containing customer-related data.</li> <li><code>GSTABL</code>: A general table file, possibly containing lookup or reference data (e.g., salesman codes, statuses).</li> </ul> </li> <li> <p>These files are labeled with a <code>?9?</code> prefix, indicating a system or library-specific naming convention.</p> </li> <li> <p>Program Execution:</p> </li> <li>The <code>LOAD AR190</code> command loads the RPG program <code>AR190</code>.</li> <li>The <code>RUN</code> command executes the <code>AR190</code> program, which processes the add/update logic for salesman change transactions.</li> <li>The program likely:<ul> <li>Reads input data (e.g., new or updated salesman assignments).</li> <li>Validates the data against <code>ARCUST</code> (customer records) and <code>GSTABL</code> (reference data).</li> <li>Updates or adds records to the <code>ARSLST</code> file, possibly using <code>ARCONT</code> for control parameters.</li> <li>Ensures data integrity and consistency across the files.</li> </ul> </li> </ol> <p>Purpose: - This process allows users to add new salesman change transactions or update existing ones, likely reassigning customers to different salesmen in the A/R system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#2-ar-salesman-change-transaction-edit-ar191","title":"2. A/R Salesman Change Transaction Edit (AR191)","text":"<p>This section describes the process for editing existing salesman change transactions.</p> <p>Process Steps: 1. File Definitions:    - The program specifies three files with <code>DISP-SHRMM</code>:      - <code>ARSLST</code>: The salesman change transaction file (same as in AR190).      - <code>ARCUST</code>: The customer master file.      - <code>GSTABL</code>: The general table file.    - Note: The <code>ARCONT</code> file is not used in this process, suggesting that editing transactions does not require control file data.</p> <ol> <li>Program Execution:</li> <li>The <code>LOAD AR191</code> command loads the RPG program <code>AR191</code>.</li> <li>The <code>RUN</code> command executes the <code>AR191</code> program, which handles the editing of salesman change transactions.</li> <li>The program likely:<ul> <li>Retrieves existing transaction records from <code>ARSLST</code>.</li> <li>Allows users to modify transaction details (e.g., salesman codes, customer assignments).</li> <li>Validates changes against <code>ARCUST</code> (to ensure valid customer data) and <code>GSTABL</code> (for valid reference data).</li> <li>Updates the <code>ARSLST</code> file with the modified records.</li> </ul> </li> </ol> <p>Purpose: - This process enables users to correct or modify existing salesman change transactions, ensuring the A/R system reflects accurate salesman-customer assignments.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The document explicitly references two RPG programs: 1. AR190: Handles the add/update process for salesman change transactions. 2. AR191: Handles the edit process for salesman change transactions.</p> <p>No additional external programs are mentioned in the provided .OCL code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are referenced in the .OCL program: 1. ARSLST: The primary file for storing salesman change transactions. Used in both AR190 and AR191. 2. ARCUST: The customer master file, containing customer data. Used in both AR190 and AR191. 3. GSTABL: A general table file, likely containing reference data such as salesman codes or statuses. Used in both AR190 and AR191. 4. ARCONT: A control file, likely containing configuration or control data for the A/R system. Used only in AR190.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#summary","title":"Summary","text":"<ul> <li>AR190 (Add/Update):</li> <li>Prepares the <code>ARSLST</code> file using <code>BLDFILE</code>.</li> <li>Loads and uses <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, and <code>ARCONT</code> files.</li> <li>Executes the <code>AR190</code> program to add or update salesman change transactions.</li> <li>AR191 (Edit):</li> <li>Loads and uses <code>ARSLST</code>, <code>ARCUST</code>, and <code>GSTABL</code> files.</li> <li>Executes the <code>AR191</code> program to edit existing salesman change transactions.</li> <li>External Programs: <code>AR190</code>, <code>AR191</code>.</li> <li>Tables Used: <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARCONT</code> (only in AR190).</li> </ul> <p>If you have additional details (e.g., the RPG source code for AR190/AR191 or specific transaction formats), I can provide a more detailed explanation of the processing logic. Let me know if you\u2019d like me to search for related information or analyze any uploaded files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/","title":"AR190 RPG36","text":"<p>The RPG program <code>AR190.rpg36.txt</code> is an RPG/36 program (likely for an IBM System/36 or AS/400 environment) that handles the A/R Salesman Change Transaction Add/Update process, as referenced in the previously provided <code>.OCL</code> file (AR190.ocl36.txt). Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called based on the provided RPG code. The program manages the addition and updating of salesman change transactions in an Accounts Receivable (A/R) system, allowing users to assign or reassign salesmen to customers and mark transactions for deletion.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#process-steps-of-rpg-program-ar190","title":"Process Steps of RPG Program AR190","text":"<p>The <code>AR190</code> program is an interactive application that uses a workstation (display) file to manage salesman change transactions. It operates with two primary screens (<code>S1</code> and <code>S2</code>) and performs validation, data retrieval, and file updates. Below is a detailed breakdown of the process steps, derived from the RPG code:</p> <ol> <li>Program Initialization and File Setup:</li> <li>The program defines four files:<ul> <li><code>SCREEN</code>: A workstation file (display device) for user interaction, with a record length of 1000 bytes.</li> <li><code>ARSLST</code>: A disk file (update mode, <code>UF</code>) for salesman change transactions, with a record length of 256 bytes and an 8-byte key starting at position 2.</li> <li><code>ARCONT</code>: A disk file (input mode, <code>IF</code>) for A/R control data, with a 256-byte record length and a 2-byte key.</li> <li><code>ARCUST</code>: A disk file (input mode, <code>IF</code>) for customer master data, with a 384-byte record length and an 8-byte key.</li> <li><code>GSTABL</code>: A disk file (input mode, <code>IF</code>) for general table data (e.g., salesman codes), with a 256-byte record length and a 12-byte key.</li> </ul> </li> <li> <p>The program initializes variables and clears the screen fields for the first display (<code>$SBLK</code> subroutine, lines 0084\u20130105).</p> <ul> <li>Clears arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and sets the initial screen format to <code>S1</code> (<code>@SFNEX = 'S1'</code>).</li> <li>Turns off error indicators and sets display indicators (e.g., 99, 81) to control screen behavior.</li> </ul> </li> <li> <p>Main Processing Loop (<code>$SFNEX DOWNE 'EJ'</code>, lines 0068\u20130079):</p> </li> <li>The program enters a loop that continues until the user presses a command key to exit (<code>@SFNEX = 'EJ'</code>).</li> <li>Based on the screen format identifier (<code>@SFID</code>):<ul> <li>If <code>@SFID</code> is blank, it calls <code>$SBLK</code> to initialize the screen (first-time display).</li> <li>If <code>@SFID = 'S1'</code>, it processes the first screen (<code>$S1</code> subroutine).</li> <li>If <code>@SFID = 'S2'</code>, it processes the second screen (<code>$S2</code> subroutine).</li> </ul> </li> <li> <p>After processing the screen, it calls <code>$XCPT</code> to display the next screen and reads user input from the <code>SCREEN</code> file (<code>READ SCREEN</code>, with or without the Last Record indicator based on <code>@CCNT</code>).</p> </li> <li> <p>Screen 1 Processing (<code>$S1</code>, lines 0108\u20130115):</p> </li> <li>Purpose: Collects the company number (<code>CO</code>) and an optional customer number (<code>SCUS</code>) to filter transactions.</li> <li> <p>Steps:</p> <ul> <li>Reads the <code>S1</code> screen input (<code>AR190S1</code> format, lines 0678\u20130682).</li> <li>Checks the function key pressed (<code>@VKEY</code>):</li> <li>If <code>ENTER</code> (<code>@VKEY = 0</code>), calls <code>$S1ENT</code> to validate and process the input.</li> <li>If a command key is pressed (<code>@VKEY = 2</code>), calls <code>$S1CK</code> to handle command key functions (e.g., exit).</li> <li>Validation (<code>$S1ENT</code>, lines 0118\u20130146):</li> <li>Ensures the company number (<code>CO</code>) is not zero; if it is, displays error message MSG1 (\"COMPANY NUMBER CANNOT BE BLANK\") and sets indicator 90 (error) and 81 (highlight field).</li> <li>Validates <code>CO</code> against the <code>ARCONT</code> file using <code>CHAIN</code>. If not found, displays MSG2 (\"COMPANY NOT IN CONTROL FILE\") and sets error indicators.</li> <li>If valid, sets up keys (<code>FRKEY</code>, <code>TOPKEY</code>, <code>BOTKEY</code>) for accessing <code>ARSLST</code> and moves to screen <code>S2</code> by setting <code>@SFNEX = 'S2'</code>.</li> <li>Calls <code>$S2RFW</code> to populate screen <code>S2</code> with transaction data.</li> <li>Command Keys (<code>$S1CK</code>, lines 0149\u20130154):</li> <li>If command key <code>KG</code> is pressed, sets <code>@SFNEX = 'EJ'</code> to exit the program.</li> </ul> </li> <li> <p>Screen 2 Processing (<code>$S2</code>, lines 0157\u20130166):</p> </li> <li>Purpose: Displays and allows editing of up to 10 salesman change transactions, including customer number (<code>CUS</code>), old salesman code (<code>SLO</code>), new salesman code (<code>SLN</code>), salesman name (<code>SLNM</code>), and delete code (<code>DL</code>).</li> <li> <p>Steps:</p> <ul> <li>Reads the <code>S2</code> screen input (<code>AR190S2</code> format, lines 0683\u20130694).</li> <li>Checks the function key pressed (<code>@VKEY</code>):</li> <li>If <code>ENTER</code> (<code>@VKEY = 0</code>), calls <code>$S2ENT</code> to validate and update transactions.</li> <li>If a command key is pressed (<code>@VKEY = 2</code>), calls <code>$S2CK</code> to handle command keys (e.g., exit or return to <code>S1</code>).</li> <li>If <code>ROLL UP</code> (<code>@VKEY = 01122</code>), calls <code>$S2RFW</code> to display the next set of records.</li> <li>If <code>ROLL DOWN</code> (<code>@VKEY = 01123</code>), calls <code>$S2RBW</code> to display the previous set of records.</li> </ul> </li> <li> <p>Screen 2 Validation and Update (<code>$S2ENT</code>, lines 0169\u20130334):</p> </li> <li>Validation Loop (lines 0173\u20130288):<ul> <li>Iterates through the 10 transaction lines (<code>X = 1 to 10</code>).</li> <li>For each line where <code>DL,X \u2260 'D'</code> (not marked for deletion):</li> <li>Customer Validation:<ul> <li>If a salesman is keyed (<code>SLN,X \u2260 0</code>) but no customer is provided (<code>CUS,X = 0</code>), sets error indicators (70\u201379) and displays MSG3 (\"CUSTOMER CANNOT BE ZERO\") and MSG4 (\"WHEN NEW SALESMAN IS KEYED\").</li> <li>If a customer is keyed (<code>CUS,X \u2260 0</code>), validates it against <code>ARCUST</code> using <code>CHAIN</code>. If not found, sets error indicators (70\u201379) and displays MSG5 (\"INVALID CUSTOMER NUMBER\").</li> <li>If valid, retrieves the customer name (<code>ARNAME</code> to <code>CUNM,X</code>) and old salesman code (<code>ARSLMN</code> to <code>SLO,X</code>).</li> </ul> </li> <li>New Salesman Validation:<ul> <li>If a customer is keyed, validates the new salesman code (<code>SLN,X</code>) against <code>GSTABL</code> using <code>CHAIN</code> with key <code>SLSMAN + SLN,X</code>. If not found, sets error indicators (60\u201369) and displays MSG6 (\"INVALID NEW SALESMAN CODE\").</li> <li>If valid, retrieves the salesman name (<code>TBDESC</code> to <code>SLNM,X</code>).</li> <li>Note: A validation check for <code>SLN,X \u2260 SLO,X</code> (new salesman different from old) was removed on 09/27/17, per the comment on line 0247.</li> </ul> </li> <li>Delete Code Validation:<ul> <li>If a customer is keyed, checks if the delete code (<code>DL,X</code>) is <code>' '</code>, <code>'A'</code>, or <code>'D'</code>. If invalid, sets error indicators (40\u201349) and displays MSG7 (\"DELETE CODE MUST BE ' ',A, OR D\").</li> </ul> </li> <li>If any validation errors occur, jumps to <code>ENDS2E</code> to redisplay the screen with error messages.</li> </ul> </li> <li> <p>Update Transactions (lines 0294\u20130315):</p> <ul> <li>Iterates through the 10 transaction lines again.</li> <li>For each line with a customer number (<code>CUS,X \u2260 0</code>):</li> <li>Builds a key (<code>FRKEY = CO + CUS,X</code>) and checks <code>ARSLST</code> using <code>CHAIN</code>.</li> <li>If <code>DL,X \u2260 'D'</code>:<ul> <li>If the record exists (<code>95 off</code>), updates it (<code>EXCPTUPDREC</code>).</li> <li>If the record doesn\u2019t exist (<code>95 on</code>), adds it (<code>EXCPTADDREC</code>).</li> </ul> </li> <li>If <code>DL,X = 'D'</code> and the record doesn\u2019t exist (<code>95 off</code>), deletes it (<code>EXCPTDELREC</code>).</li> <li>Updates <code>BOTKEY</code> and <code>SVKEY</code> to track the highest key processed.</li> <li>If the last line has a customer (<code>CUS,10 &gt; 0</code>), sets <code>S2FULL = 'Y'</code> to indicate a full screen.</li> <li>If no records are entered (<code>CUS,10 = 0</code> and <code>SLN,10 = 0</code>), returns to screen <code>S1</code> (<code>@SFNEX = 'S1'</code>) and clears fields (<code>CLRFLD</code>).</li> <li>Otherwise, calls <code>$S2RFW</code> to refresh the screen with the next set of records and sets <code>@SFNEX = 'S2'</code>.</li> </ul> </li> <li> <p>Roll Up (Forward) (<code>$S2RFW</code>, lines 0351\u20130484):</p> </li> <li>Populates screen <code>S2</code> with the next set of records from <code>ARSLST</code> starting at <code>BOTKEY</code>.</li> <li>Clears arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and resets indicators.</li> <li>Reads <code>ARSLST</code> sequentially, filtering by company number (<code>ASCO = CO</code>).</li> <li>For each valid record (up to 10):<ul> <li>Copies data to screen arrays (<code>ASCUST</code> to <code>CUS,Y</code>, <code>ASSLSO</code> to <code>SLO,Y</code>, <code>ASSLSN</code> to <code>SLN,Y</code>, <code>ASDEL</code> to <code>DL,Y</code>).</li> <li>Retrieves customer name from <code>ARCUST</code> and salesman name from <code>GSTABL</code>.</li> <li>If the record is marked deleted (<code>ASDEL = 'D'</code>), displays MSG8 (\"THIS RECORD PREVIOUSLY DELETED\").</li> <li>Sets indicators (50\u201359, 60\u201369) to protect fields for existing records.</li> </ul> </li> <li>Updates <code>TOPKEY</code> and <code>BOTKEY</code> to track the range of displayed records.</li> <li>If the end of the file is reached, displays MSG9 (\"END OF FILE HAS BEEN REACHED\") and calls <code>RESET</code> to redisplay the last screen.</li> <li> <p>If fewer than 10 records are read and <code>S2FULL \u2260 'Y'</code>, clears remaining fields.</p> </li> <li> <p>Roll Down (Backward) (<code>$S2RBW</code>, lines 0539\u20130615):</p> </li> <li>Populates screen <code>S2</code> with the previous set of records from <code>ARSLST</code> starting at <code>TOPKEY</code>.</li> <li>Reads <code>ARSLST</code> in reverse (<code>READP</code>) until 10 records are loaded or the beginning of the file is reached.</li> <li>Similar to <code>$S2RFW</code>, copies data to screen arrays, retrieves names, and sets indicators.</li> <li>If the beginning of the file is reached, displays MSG10 (\"BEGINNING OF FILE HAS BEEN REACHED\").</li> <li> <p>Updates <code>TOPKEY</code> and <code>BOTKEY</code> accordingly.</p> </li> <li> <p>Screen 2 Command Keys (<code>$S2CK</code>, lines 0337\u20130348):</p> </li> <li>If command key <code>KA</code> is pressed, clears fields (<code>CLRFLD</code>) and returns to screen <code>S1</code> (<code>@SFNEX = 'S1'</code>).</li> <li> <p>If command key <code>KG</code> is pressed, exits the program (<code>@SFNEX = 'EJ'</code>).</p> </li> <li> <p>Display Next Screen (<code>$XCPT</code>, lines 0618\u20130637):</p> </li> <li>Increments a counter (<code>@CCNT</code>) to track screen displays.</li> <li>Displays the appropriate screen based on <code>@SFNEX</code>:<ul> <li>If <code>@SFNEX = 'S1'</code>, outputs the <code>AR190S1</code> format.</li> <li>If <code>@SFNEX = 'S2'</code>, outputs the <code>AR190S2</code> format.</li> </ul> </li> <li> <p>Calls <code>CLRIND</code> to reset error indicators and clear message fields (<code>MSG1</code>, <code>MSG2</code>).</p> </li> <li> <p>Field and Indicator Clearing:</p> <ul> <li>CLRIND (lines 0640\u20130662): Resets error indicators (40\u201349, 60\u201369, 70\u201379, 90, 91, etc.) and clears message fields.</li> <li>CLRFLD (lines 0665\u20130675): Clears screen arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and <code>S2FULL</code>.</li> </ul> </li> <li> <p>Output Operations:</p> <ul> <li>ADDREC (lines 0696\u20130701): Adds a new record to <code>ARSLST</code> with company number (<code>CO</code>), customer number (<code>CUS,X</code>), old salesman (<code>SLO,X</code>), and new salesman (<code>SLN,X</code>).</li> <li>UPDREC (lines 0703\u20130706): Updates an existing <code>ARSLST</code> record with delete code (<code>DL,X</code>), old salesman (<code>SLO,X</code>), and new salesman (<code>SLN,X</code>).</li> <li>DELREC (line 0708): Deletes a record from <code>ARSLST</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for managing salesman change transactions:</p> <ol> <li>Company Number Validation:</li> <li>The company number (<code>CO</code>) must not be blank/zero (MSG1: \"COMPANY NUMBER CANNOT BE BLANK\").</li> <li> <p>The company number must exist in the <code>ARCONT</code> file (MSG2: \"COMPANY NOT IN CONTROL FILE\").</p> </li> <li> <p>Customer Number Validation:</p> </li> <li>If a new salesman code (<code>SLN,X</code>) is entered, a customer number (<code>CUS,X</code>) must be provided (MSG3: \"CUSTOMER CANNOT BE ZERO\" and MSG4: \"WHEN NEW SALESMAN IS KEYED\").</li> <li> <p>The customer number must exist in the <code>ARCUST</code> file (MSG5: \"INVALID CUSTOMER NUMBER\").</p> </li> <li> <p>Salesman Code Validation:</p> </li> <li>The new salesman code (<code>SLN,X</code>) must exist in the <code>GSTABL</code> file under the <code>SLSMAN</code> table (MSG6: \"INVALID NEW SALESMAN CODE\").</li> <li> <p>A previous rule requiring the new salesman to differ from the old salesman (<code>SLN,X \u2260 SLO,X</code>) was removed on 09/27/17 (lines 0247\u20130264).</p> </li> <li> <p>Delete Code Validation:</p> </li> <li>The delete code (<code>DL,X</code>) must be <code>' '</code> (blank), <code>'A'</code>, or <code>'D'</code> (MSG7: \"DELETE CODE MUST BE ' ',A, OR D\").</li> <li> <p>If <code>DL,X = 'D'</code>, the record is marked for deletion, and if it doesn\u2019t exist in <code>ARSLST</code>, it is deleted via <code>EXCPTDELREC</code>.</p> </li> <li> <p>Transaction Processing:</p> </li> <li>If a customer number is entered:<ul> <li>If the record exists in <code>ARSLST</code> and <code>DL,X \u2260 'D'</code>, it is updated (<code>UPDREC</code>).</li> <li>If the record does not exist and <code>DL,X \u2260 'D'</code>, it is added (<code>ADDREC</code>).</li> <li>If the record does not exist and <code>DL,X = 'D'</code>, it is deleted (<code>DELREC</code>).</li> </ul> </li> <li> <p>Deleted records in <code>ARSLST</code> (<code>ASDEL = 'D'</code>) are flagged with MSG8 (\"THIS RECORD PREVIOUSLY DELETED\").</p> </li> <li> <p>Screen Navigation:</p> </li> <li>Screen <code>S1</code> collects the company number and optional customer number.</li> <li>Screen <code>S2</code> displays up to 10 transactions and supports roll-up/roll-down for navigation.</li> <li>If no records are entered or the end of the file is reached, the program returns to screen <code>S1</code>.</li> <li>The end of the file (<code>ARSLST</code>) triggers MSG9 (\"END OF FILE HAS BEEN REACHED\").</li> <li> <p>The beginning of the file triggers MSG10 (\"BEGINNING OF FILE HAS BEEN REACHED\").</p> </li> <li> <p>Field Protection:</p> </li> <li>Customer numbers for existing records are protected (indicators 50\u201359) to prevent modification.</li> <li> <p>Error indicators (40\u201349, 60\u201369, 70\u201379) highlight invalid fields on screen <code>S2</code>.</p> </li> <li> <p>Data Retrieval:</p> </li> <li>Customer names are retrieved from <code>ARCUST</code> (<code>ARNAME</code>).</li> <li>Salesman names are retrieved from <code>GSTABL</code> (<code>TBDESC</code>) for the <code>SLSMAN</code> table.</li> <li>The old salesman code is retrieved from <code>ARCUST</code> (<code>ARSLMN</code>) or <code>ARSLST</code> (<code>ASSLSO</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are used by the <code>AR190</code> program: 1. SCREEN: Workstation file for user interaction (display/input). 2. ARSLST: Salesman change transaction file (update mode, <code>UF</code>), stores transaction records with fields:    - <code>ASDEL</code> (1 byte, delete code: <code>' '</code>, <code>'A'</code>, or <code>'D'</code>).    - <code>ASCO</code> (company number, positions 2\u20133).    - <code>ASCUST</code> (customer number, positions 4\u20139).    - <code>ASSLSO</code> (old salesman code, positions 10\u201311).    - <code>ASSLSN</code> (new salesman code, positions 12\u201313). 3. ARCONT: A/R control file (input mode, <code>IF</code>), contains company data with fields:    - <code>ACNAME</code> (company name, positions 4\u201333). 4. ARCUST: Customer master file (input mode, <code>IF</code>), contains customer data with fields:    - <code>ARNAME</code> (customer name, positions 10\u201339).    - <code>ARSLMN</code> (salesman code, positions 263\u2013264). 5. GSTABL: General table file (input mode, <code>IF</code>), contains reference data (e.g., salesman codes) with fields:    - <code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR190</code> program does not explicitly call any external programs (e.g., via <code>CALL</code> operations). It operates as a standalone program, handling all logic internally through subroutines.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes files and screen fields.</li> <li>Uses a main loop to process two screens: <code>S1</code> (company/customer input) and <code>S2</code> (transaction display/edit).</li> <li>Validates input on <code>S1</code> (company number) and <code>S2</code> (customer, salesman, delete code).</li> <li>Updates <code>ARSLST</code> with add (<code>ADDREC</code>), update (<code>UPDREC</code>), or delete (<code>DELREC</code>) operations.</li> <li>Supports roll-up/roll-down for browsing transactions.</li> <li> <p>Displays error messages and protects fields as needed.</p> </li> <li> <p>Business Rules:</p> </li> <li>Validates company number, customer number, salesman code, and delete code.</li> <li>Ensures data consistency with <code>ARCONT</code>, <code>ARCUST</code>, and <code>GSTABL</code>.</li> <li>Handles add, update, and delete operations for salesman change transactions.</li> <li> <p>Manages screen navigation and error handling.</p> </li> <li> <p>Tables Used: <code>SCREEN</code>, <code>ARSLST</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>.</p> </li> <li> <p>External Programs: None.</p> </li> </ul> <p>If you have additional details (e.g., the <code>AR191.rpg36</code> code for editing transactions or specific screen layouts), I can provide further analysis or comparisons. Let me know if you\u2019d like me to search for related information or analyze any other uploaded files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/","title":"AR191 RPG36","text":"<p>The RPG program <code>AR191.rpg36.txt</code> is an RPG/36 program (likely for an IBM System/36 or AS/400 environment) that handles the A/R Salesman Change Transaction Edit process, as referenced in the previously provided <code>.OCL</code> file (AR190.ocl36.txt). This program generates a printed report listing salesman change transactions from the <code>ARSLST</code> file, including customer and salesman details, with validation against related files. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called based on the provided RPG code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#process-steps-of-rpg-program-ar191","title":"Process Steps of RPG Program AR191","text":"<p>The <code>AR191</code> program is a batch reporting program that processes records from the <code>ARSLST</code> file and produces a formatted report on a printer file (<code>ARPRINT</code>). It retrieves additional data from the <code>ARCUST</code> and <code>GSTABL</code> files to enrich the report with customer names and salesman descriptions. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>File Definitions and Initialization:</li> <li>Files Defined:<ul> <li><code>ARSLST</code>: Primary input file (<code>IP</code>) for salesman change transactions, with a 256-byte record length and an 8-byte key starting at position 2. Fields include:</li> <li><code>ASDEL</code> (delete code, position 1, <code>'D'</code> for deleted records).</li> <li><code>ASCO</code> (company number, positions 2\u20133).</li> <li><code>ASCUST</code> (customer number, positions 4\u20139).</li> <li><code>ASSLSO</code> (old salesman code, positions 10\u201311).</li> <li><code>ASSLSN</code> (new salesman code, positions 12\u201313).</li> <li><code>ARCUST</code>: Input file (<code>IF</code>) for customer master data, with a 384-byte record length and an 8-byte key. Fields include:</li> <li><code>ARNAME</code> (customer name, positions 10\u201339).</li> <li><code>GSTABL</code>: Input file (<code>IF</code>) for general table data (e.g., salesman codes), with a 256-byte record length and a 12-byte key. Fields include:</li> <li><code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343).</li> <li><code>ARPRINT</code>: Output file (<code>O</code>) for the printed report, with a 132-byte record length.</li> </ul> </li> <li> <p>Initial Setup (lines 0022\u20130029):</p> <ul> <li>The program checks the <code>ONCE</code> variable to ensure initialization occurs only once (<code>ONCE = 0</code>).</li> <li>Sets <code>ONCE = 1</code> to prevent re-execution of initialization.</li> <li>Captures the current time (<code>TIME</code>) into <code>TIMEX</code> (12 digits).</li> <li>Formats the time into <code>TIMEOF</code> (6 characters, likely HHMMSS) and date into <code>DATE</code> (6 characters, likely MMDDYY).</li> <li>This information is used in the report header.</li> </ul> </li> <li> <p>Record Processing Loop:</p> </li> <li>The program implicitly processes each record in <code>ARSLST</code> sequentially, as <code>ARSLST</code> is defined as the primary input file (<code>IP</code>), triggering a level break (<code>L1</code>) on changes in the company number (<code>ASCO</code>).</li> <li> <p>For each <code>ARSLST</code> record (lines 0032\u20130043):</p> <ul> <li>Customer Lookup:</li> <li>Builds a key (<code>ARKEY</code>) by combining <code>ASCO</code> (company number) and <code>ASCUST</code> (customer number).</li> <li>Performs a <code>CHAIN</code> operation on <code>ARCUST</code> to retrieve the customer name (<code>ARNAME</code>).</li> <li>If the customer is not found (indicator 10 on), sets <code>ARNAME</code> to <code>'INVALID'</code>; otherwise, uses the retrieved <code>ARNAME</code>.</li> <li>Salesman Lookup:</li> <li>Builds a key (<code>SLKEY</code>) by combining the literal <code>'SLSMAN'</code> and the new salesman code (<code>ASSLSN</code>).</li> <li>Performs a <code>CHAIN</code> operation on <code>GSTABL</code> to retrieve the salesman description (<code>TBDESC</code>).</li> <li>If the salesman code is not found (indicator 10 on), sets <code>TBDESC</code> to <code>'INVALID'</code>; otherwise, uses the retrieved <code>TBDESC</code>.</li> </ul> </li> <li> <p>Report Generation:</p> </li> <li>The program writes records to the <code>ARPRINT</code> printer file using output specifications (lines 0046\u20130089).</li> <li>Header Output (lines 0046\u20130082):<ul> <li>On a level break (<code>L1</code>, change in <code>ASCO</code>) or overflow (<code>OF</code>), prints the report header:</li> <li>Page number (<code>PAGE</code>) at position 104\u2013108 (e.g., \"PAGE 001\").</li> <li>Date (<code>DATE</code>, formatted as MM/DD/YY) at position 120\u2013129.</li> <li>Report title (\" SALESMAN CHANGE EDIT \") centered at position 75.</li> <li>Time (<code>TIMEOF</code>, formatted as HH.MM.SS) at position 120\u2013129.</li> <li>Decorative lines of asterisks (<code>* * * * * * * * * * * *</code>) across positions 24\u2013131.</li> <li>Column headers:<ul> <li>\"CO\" (company number) at position 2.</li> <li>\"CUSTOMER #\", \"NAME\", \"SALESMAN OLD NEW\" at positions 11, 32, and 58, respectively.</li> </ul> </li> <li>Another set of decorative asterisk lines.</li> </ul> </li> <li> <p>Detail Output (lines 0083\u20130089):</p> <ul> <li>For each <code>ARSLST</code> record (conditioned by <code>01</code>, non-deleted records where <code>ASDEL \u2260 'D'</code>):</li> <li><code>ASCO</code> (company number) at position 2.</li> <li><code>ASCUST</code> (customer number, zero-suppressed) at position 10.</li> <li><code>ARNAME</code> (customer name from <code>ARCUST</code>) at position 45.</li> <li><code>ASSLSO</code> (old salesman code) at position 53.</li> <li><code>ASSLSN</code> (new salesman code) at position 58.</li> <li><code>TBDESC</code> (new salesman description from <code>GSTABL</code>) at position 90.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends automatically after processing all <code>ARSLST</code> records, as is typical for primary input file processing in RPG/36. No explicit loop termination is coded, and the program closes the printer file (<code>ARPRINT</code>) upon completion.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AR191</code> program enforces the following business rules for generating the salesman change edit report:</p> <ol> <li>Record Selection:</li> <li>Only non-deleted records (<code>ASDEL \u2260 'D'</code>) from <code>ARSLST</code> are included in the report (indicator <code>01</code> in output specifications, line 0083).</li> <li> <p>Records are grouped by company number (<code>ASCO</code>), with a level break (<code>L1</code>) triggering header output when the company number changes.</p> </li> <li> <p>Data Validation and Enrichment:</p> </li> <li>Customer Validation:<ul> <li>Each <code>ARSLST</code> record\u2019s customer number (<code>ASCUST</code>) is validated against the <code>ARCUST</code> file using the key <code>ASCO + ASCUST</code>.</li> <li>If the customer is not found, the report displays <code>'INVALID'</code> for the customer name (<code>ARNAME</code>).</li> </ul> </li> <li> <p>Salesman Validation:</p> <ul> <li>The new salesman code (<code>ASSLSN</code>) is validated against the <code>GSTABL</code> file using the key <code>'SLSMAN' + ASSLSN</code>.</li> <li>If the salesman code is not found, the report displays <code>'INVALID'</code> for the salesman description (<code>TBDESC</code>).</li> </ul> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes a header with page number, date, time, and title, printed on each company change (<code>L1</code>) or page overflow (<code>OF</code>).</li> <li>Detail lines show:<ul> <li>Company number (<code>ASCO</code>).</li> <li>Customer number (<code>ASCUST</code>, zero-suppressed).</li> <li>Customer name (<code>ARNAME</code>).</li> <li>Old salesman code (<code>ASSLSO</code>).</li> <li>New salesman code (<code>ASSLSN</code>).</li> <li>New salesman description (<code>TBDESC</code>).</li> </ul> </li> <li> <p>The report is formatted with fixed-position fields and decorative asterisk lines for readability.</p> </li> <li> <p>Date and Time:</p> </li> <li>The report includes the system date and time in the header, formatted as MM/DD/YY and HH.MM.SS, respectively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are used by the <code>AR191</code> program: 1. ARSLST: Primary input file for salesman change transactions (input mode, <code>IP</code>), containing:    - <code>ASDEL</code> (delete code, 1 byte, <code>'D'</code> for deleted records).    - <code>ASCO</code> (company number, positions 2\u20133).    - <code>ASCUST</code> (customer number, positions 4\u20139).    - <code>ASSLSO</code> (old salesman code, positions 10\u201311).    - <code>ASSLSN</code> (new salesman code, positions 12\u201313). 2. ARCUST: Customer master file (input mode, <code>IF</code>), containing:    - <code>ARNAME</code> (customer name, positions 10\u201339). 3. GSTABL: General table file (input mode, <code>IF</code>), containing:    - <code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343). 4. ARPRINT: Printer output file (<code>O</code>), used to generate the report with a 132-byte record length.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR191</code> program does not explicitly call any external programs (e.g., via <code>CALL</code> operations). It operates as a standalone batch program, processing input files and generating output directly to the printer file.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes the program by capturing the system date and time for the report header.</li> <li>Processes each <code>ARSLST</code> record sequentially, grouped by company number (<code>ASCO</code>).</li> <li>Validates customer numbers against <code>ARCUST</code> and salesman codes against <code>GSTABL</code>, marking invalid entries with <code>'INVALID'</code>.</li> <li>Generates a formatted report to <code>ARPRINT</code> with headers (on company change or page overflow) and detail lines for non-deleted records.</li> <li> <p>Terminates after processing all records.</p> </li> <li> <p>Business Rules:</p> </li> <li>Includes only non-deleted <code>ARSLST</code> records (<code>ASDEL \u2260 'D'</code>).</li> <li>Validates customer and salesman data, displaying <code>'INVALID'</code> for missing records.</li> <li>Groups records by company number, with headers printed on company changes or page overflows.</li> <li> <p>Formats the report with fixed-position fields, including date, time, and decorative lines.</p> </li> <li> <p>Tables Used: <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARPRINT</code>.</p> </li> <li> <p>External Programs: None.</p> </li> </ul> <p>This program complements <code>AR190</code> (add/update transactions) by providing a printed edit report to verify salesman change transactions. If you have additional details (e.g., sample data or report output formats), I can provide further analysis. Let me know if you\u2019d like me to search for related information or analyze other files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/","title":"Summary AR190 OCL","text":"<p>Below, I\u2019ll first identify the use cases implemented by the RPG programs <code>AR190</code> and <code>AR191</code>, as called from the provided <code>.OCL</code> program. Then, I\u2019ll provide a Function Requirement Document for a single, consolidated use case, assuming it processes inputs programmatically (without screen interaction) to add, update, or edit salesman change transactions in the Accounts Receivable (A/R) system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>Based on the provided <code>.OCL</code> (AR190.ocl36.txt), <code>AR190.rpg36.txt</code>, and <code>AR191.rpg36.txt</code>, the programs implement the following use cases:</p> <ol> <li>Add/Update Salesman Change Transactions (AR190):</li> <li>Description: Allows users to add new salesman change transactions or update existing ones in the <code>ARSLST</code> file. Users specify a company number, customer number, old and new salesman codes, and a delete code via interactive screens (<code>S1</code> and <code>S2</code>). The program validates inputs against <code>ARCONT</code> (company), <code>ARCUST</code> (customer), and <code>GSTABL</code> (salesman) files, and updates the <code>ARSLST</code> file accordingly.</li> <li> <p>Scope: Interactive data entry and validation, supporting up to 10 transactions per screen, with roll-up/roll-down navigation.</p> </li> <li> <p>Generate Salesman Change Edit Report (AR191):</p> </li> <li>Description: Produces a printed report listing non-deleted salesman change transactions from the <code>ARSLST</code> file, grouped by company number. The report includes customer names (from <code>ARCUST</code>) and salesman descriptions (from <code>GSTABL</code>), with validation to flag invalid entries. It is a batch process triggered by the <code>.OCL</code> file.</li> <li>Scope: Batch reporting for verification of transactions, with no user interaction.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Assuming a single, consolidated use case that programmatically processes salesman change transactions (combining the functionality of <code>AR190</code> and <code>AR191</code> without screen interaction), the following document outlines the requirements for a function that adds, updates, or deletes transactions and generates a report.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#function-requirement-document-salesman-change-transaction-processor","title":"Function Requirement Document: Salesman Change Transaction Processor","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#purpose","title":"Purpose","text":"<p>The <code>SalesmanChangeTransactionProcessor</code> function processes salesman change transactions in the Accounts Receivable (A/R) system. It validates and applies additions, updates, or deletions to the <code>ARSLST</code> file and generates a report summarizing the transactions, without requiring interactive screen input.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CO</code>, 2 digits, numeric): Identifies the company for the transaction.</li> <li>Transaction List: Array of up to 10 transaction records, each containing:</li> <li>Customer Number (<code>CUS</code>, 6 digits, numeric): Identifies the customer.</li> <li>New Salesman Code (<code>SLN</code>, 2 digits, numeric): The new salesman to assign.</li> <li>Delete Code (<code>DL</code>, 1 character): <code>' '</code> (blank), <code>'A'</code> (add/update), or <code>'D'</code> (delete).</li> <li>Reference Files:</li> <li><code>ARCONT</code>: Contains valid company numbers and names.</li> <li><code>ARCUST</code>: Contains customer numbers and names.</li> <li><code>GSTABL</code>: Contains salesman codes and descriptions under the <code>SLSMAN</code> table.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated <code>ARSLST</code> File: Records added, updated, or deleted based on input transactions.</li> <li>Report File (<code>ARPRINT</code>): A text file summarizing processed transactions, including:</li> <li>Company number, customer number, customer name, old salesman code, new salesman code, and salesman description.</li> <li>Header with date, time, and page number, grouped by company.</li> <li>Error List: Array of error messages for invalid inputs (e.g., invalid company, customer, or salesman).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Company Number:</li> <li>Check if <code>CO</code> is non-zero and exists in <code>ARCONT</code>. If invalid, return error: \"Company number cannot be blank\" or \"Company not in control file.\"</li> <li>Process Transactions:</li> <li>For each transaction in the input list (up to 10):<ul> <li>Validate Customer:</li> <li>If <code>SLN \u2260 0</code> and <code>CUS = 0</code>, return error: \"Customer cannot be zero when new salesman is keyed.\"</li> <li>If <code>CUS \u2260 0</code>, validate <code>CUS</code> against <code>ARCUST</code> using key <code>CO + CUS</code>. If not found, return error: \"Invalid customer number.\"</li> <li>Retrieve customer name (<code>ARNAME</code>) and old salesman code (<code>ARSLMN</code>) from <code>ARCUST</code>.</li> <li>Validate Salesman:</li> <li>If <code>CUS \u2260 0</code>, validate <code>SLN</code> against <code>GSTABL</code> using key <code>'SLSMAN' + SLN</code>. If not found, return error: \"Invalid new salesman code.\"</li> <li>Retrieve salesman description (<code>TBDESC</code>) from <code>GSTABL</code>.</li> <li>Validate Delete Code:</li> <li>If <code>CUS \u2260 0</code>, ensure <code>DL</code> is <code>' '</code>, <code>'A'</code>, or <code>'D'</code>. If invalid, return error: \"Delete code must be ' ', A, or D.\"</li> <li>Update <code>ARSLST</code>:</li> <li>Build key <code>CO + CUS</code> to check <code>ARSLST</code>.</li> <li>If <code>CUS \u2260 0</code>:<ul> <li>If <code>DL \u2260 'D'</code> and record exists, update <code>ARSLST</code> with <code>DL</code>, old salesman (<code>ARSLMN</code> or existing <code>ASSLSO</code>), and <code>SLN</code>.</li> <li>If <code>DL \u2260 'D'</code> and record does not exist, add new record to <code>ARSLST</code> with <code>DL</code>, old salesman (<code>ARSLMN</code>), and <code>SLN</code>.</li> <li>If <code>DL = 'D'</code> and record does not exist, delete the record.</li> <li>If record is marked deleted (<code>ASDEL = 'D'</code>), flag with warning: \"This record previously deleted.\"</li> </ul> </li> </ul> </li> <li>Generate Report:</li> <li>For each non-deleted <code>ARSLST</code> record (<code>ASDEL \u2260 'D'</code>), grouped by <code>ASCO</code>:<ul> <li>Retrieve customer name (<code>ARNAME</code>) from <code>ARCUST</code> (or <code>'INVALID'</code> if not found).</li> <li>Retrieve salesman description (<code>TBDESC</code>) from <code>GSTABL</code> (or <code>'INVALID'</code> if not found).</li> <li>Write to <code>ARPRINT</code>:</li> <li>Header (on company change or page overflow): Page number, system date (MM/DD/YY), time (HH.MM.SS), title (\"SALESMAN CHANGE EDIT\"), and column headers (\"CO\", \"CUSTOMER #\", \"NAME\", \"SALESMAN OLD NEW\").</li> <li>Detail: Company number, customer number, customer name, old salesman code, new salesman code, salesman description.</li> </ul> </li> <li>Return Results:</li> <li>Return updated <code>ARSLST</code> file, generated <code>ARPRINT</code> report, and any error messages.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>Company number must be non-zero and exist in <code>ARCONT</code>.</li> <li>Customer and Salesman Requirements:</li> <li>A customer number is required if a new salesman is specified.</li> <li>Customer numbers must exist in <code>ARCUST</code>.</li> <li>New salesman codes must exist in <code>GSTABL</code> under the <code>SLSMAN</code> table.</li> <li>Delete Code Handling:</li> <li>Delete code must be <code>' '</code>, <code>'A'</code>, or <code>'D'</code>.</li> <li><code>'D'</code> marks a record for deletion; other values indicate add/update.</li> <li>Transaction Processing:</li> <li>Update existing records or add new ones in <code>ARSLST</code> based on input.</li> <li>Deleted records are excluded from the report.</li> <li>Report Formatting:</li> <li>Group by company number, with headers on each group or page overflow.</li> <li>Flag invalid customers or salesmen with <code>'INVALID'</code> in the report.</li> <li>Include system date and time in the header.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Key Construction:</li> <li>Customer key: Concatenate <code>CO</code> (2 digits) and <code>CUS</code> (6 digits) for <code>ARSLST</code> and <code>ARCUST</code> lookups.</li> <li>Salesman key: Concatenate <code>'SLSMAN'</code> (literal) and <code>SLN</code> (2 digits) for <code>GSTABL</code> lookups.</li> <li>Date and Time Formatting:</li> <li>System date formatted as MM/DD/YY.</li> <li>System time formatted as HH.MM.SS.</li> <li>Page Numbering:</li> <li>Increment page number (<code>PAGE</code>) for each company change or overflow in the report.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for:</li> <li>Blank or invalid company number.</li> <li>Missing customer number when salesman is keyed.</li> <li>Invalid customer number or salesman code.</li> <li>Invalid delete code.</li> <li>Previously deleted records.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#explanation-of-approach","title":"Explanation of Approach","text":"<ul> <li>Use Cases: The two identified use cases reflect the distinct functionalities of <code>AR190</code> (interactive transaction entry/update) and <code>AR191</code> (batch report generation). These are derived from the <code>.OCL</code> file\u2019s calls to <code>LOAD AR190</code> and <code>LOAD AR191</code> and their respective RPG code.</li> <li>Consolidated Function: The <code>SalesmanChangeTransactionProcessor</code> combines <code>AR190</code>\u2019s transaction processing and <code>AR191</code>\u2019s reporting into a single programmatic function, assuming inputs are provided (e.g., via API or file) rather than through interactive screens. This eliminates the need for <code>SCREEN</code> file interactions in <code>AR190</code>.</li> <li>Conciseness: The document focuses on business requirements (validation, data processing, report formatting) and necessary calculations (key construction, date/time formatting, page numbering), avoiding technical implementation details like RPG-specific operations.</li> <li>File Usage: The function uses the same files as the original programs (<code>ARSLST</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARPRINT</code>), maintaining consistency with the legacy system.</li> </ul> <p>If you need further refinements or additional details (e.g., sample input formats or specific error codes), let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/","title":"AR290A OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR290A.ocl36.txt</code>, used in IBM System/36 environments to manage Accounts Receivable (A/R) salesman change transactions. Below, I\u2019ll explain the process steps of the program, identify any external programs called, and list the tables/files used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program controls the flow of processing A/R salesman change transactions, handling validation, user interaction, and file operations. Here\u2019s a step-by-step explanation of the program\u2019s logic:</p> <ol> <li>Initial Program Identification and Setup:</li> <li>The program starts with metadata or comments identifying it as the \"A/R SALESMAN CHANGE TRANSACTION POST\" process (<code>// * 'A/R SALESMAN CHANGE TRANSACTION POST'</code>).</li> <li> <p>It likely runs under a specific procedure (<code>SCPROCP</code>) and system context (<code>GSY2K</code>).</p> </li> <li> <p>Check for Changes in ARSLST File:</p> </li> <li>The program checks the <code>ARSLST</code> file to determine if there are any salesman change transactions to process (<code>IFF DATAF1-?9?ARSLST</code>).</li> <li>Case 1: No Changes Exist:<ul> <li>If no changes are found (<code>* 'NO CHANGES EXIST TO BE PROCESSED'</code>), the program:</li> <li>Checks if the change table (<code>ARSLST</code>) has no records (<code>IF ?F'A,?9?ARSLST'?/0000000 * 'NO RECORDS EXIST IN THE CHANGE TABLE'</code>).</li> <li>Displays a message indicating the posting process is canceled (<code>* 'THE POSTING PROCESS HAS BEEN CANCELLED'</code>).</li> <li>Prompts the user to press <code>0, ENTER</code> to continue (<code>PAUSE 'TO CONTINUE--PRESS 0, ENTER'</code>).</li> <li>Terminates the program (<code>CANCEL</code>).</li> </ul> </li> <li> <p>Case 2: Changes Exist:</p> <ul> <li>If changes are found (<code>* 'THERE ARE CHANGES TO PROCESS'</code>), the program:</li> <li>Prompts the user with options to either cancel (press <code>SHIFT + ATTN, 2, ENTER</code>) or continue (press <code>0, ENTER</code>) (<code>PAUSE 'TO CANCEL--PRESS SHIFT + ATTN,2,ENTER TO CONTINUE--PRESS 0,ENTER'</code>).</li> </ul> </li> <li> <p>Processing Changes:</p> </li> <li>If changes exist and the user chooses to continue, the program checks for the existence of the <code>SLSCHG</code> file (<code>IFF DATAF1-?9?SLSCHG</code>).</li> <li>It then builds or processes the <code>SLSCHG</code> file (<code>BLDFILE ?9?SLSCHG,S,RECORDS,1,32,,T,,,NDFILE</code>):<ul> <li><code>BLDFILE</code> is an OCL command to create or manipulate a file.</li> <li>Parameters suggest it processes records in the <code>SLSCHG</code> file, starting at record 1, with a block size or increment of 32, and other attributes (e.g., <code>T</code> for temporary file, <code>NDFILE</code> for no direct file).</li> </ul> </li> <li>If the <code>SLSCHG</code> file is successfully processed, it displays a message: <code>* 'THE POSTING PROCESS HAS BEEN ACTIVATED'</code>.</li> <li> <p>If the <code>SLSCHG</code> file processing is canceled or fails, it displays: <code>* 'THE POSTING PROCESS HAS BEEN CANCELLED'</code>, followed by a pause for user acknowledgment (<code>PAUSE 'TO CONTINUE--PRESS 0,ENTER'</code>).</p> </li> <li> <p>User Interaction and Cancellation:</p> </li> <li>Throughout the process, the program uses <code>PAUSE</code> commands to interact with the user, allowing them to confirm continuation or cancel the process.</li> <li>Cancellation can occur at multiple points, either explicitly by the user (via <code>SHIFT + ATTN, 2, ENTER</code>) or implicitly if no records/changes are found.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program itself does not explicitly call external RPG programs in the provided code. The <code>BLDFILE</code> command suggests file manipulation, which may involve system utilities or underlying RPG programs, but no specific program names are mentioned. Typically, in System/36 environments, <code>BLDFILE</code> is a system command that may invoke internal system routines rather than user-defined RPG programs. Therefore, based on the provided code:</p> <ul> <li>External Programs: None explicitly called.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files/tables:</p> <ol> <li>ARSLST:</li> <li>Description: Likely the A/R Salesman List or change table, which stores pending salesman change transactions.</li> <li> <p>Role: The program checks this file to determine if changes exist (<code>DATAF1-?9?ARSLST</code>) and verifies if it contains records (<code>?F'A,?9?ARSLST'?/0000000</code>).</p> </li> <li> <p>SLSCHG:</p> </li> <li>Description: A file used to process or store salesman change transactions, possibly a temporary or working file.</li> <li>Role: The program builds or processes this file (<code>BLDFILE ?9?SLSCHG</code>) if changes are present in <code>ARSLST</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The program checks for salesman change transactions in the <code>ARSLST</code> file. If no changes exist, it informs the user and cancels. If changes are found, it prompts the user to continue or cancel. On continuation, it processes the changes via the <code>SLSCHG</code> file, activating or canceling the posting process based on the outcome.</li> <li>External Programs: None explicitly called.</li> <li>Tables/Files: <code>ARSLST</code> (salesman change table), <code>SLSCHG</code> (processed change file).</li> </ul> <p>If you need further clarification or analysis (e.g., specific RPG program interactions or additional context), please let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/","title":"Summary AR290A OCL","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#list-of-use-cases-implemented-by-ar290aocl36txt","title":"List of Use Cases Implemented by AR290A.ocl36.txt","text":"<p>The <code>AR290A.ocl36.txt</code> OCL program implements a single primary use case:</p> <ol> <li>Post A/R Salesman Change Transactions:</li> <li>This use case involves processing changes to salesman assignments in the Accounts Receivable (A/R) system by validating the existence of changes in the <code>ARSLST</code> file, processing them into the <code>SLSCHG</code> file, and handling user confirmation or cancellation.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#ar-salesman-change-posting-function-requirements","title":"A/R Salesman Change Posting Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#overview","title":"Overview","text":"<p>The <code>post_ar_salesman_changes</code> function processes salesman change transactions in the Accounts Receivable (A/R) system, validating and applying updates from the <code>ARSLST</code> file to the <code>SLSCHG</code> file without user interaction.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#inputs","title":"Inputs","text":"<ul> <li>ARSLST File: A data file containing pending salesman change transactions (e.g., customer ID, old salesman ID, new salesman ID).</li> <li>SLSCHG File: A target file for processed salesman change records.</li> <li>System Parameters: Configuration data specifying file formats and processing rules.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated SLSCHG File: Contains processed salesman change records.</li> <li>Status Code: Indicates success, no changes, or cancellation.</li> <li>Error Message (if applicable): Describes any issues encountered (e.g., no records in <code>ARSLST</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate ARSLST File:</li> <li>Check if <code>ARSLST</code> contains any salesman change records.</li> <li> <p>If no records exist, return status \"No changes to process\" and exit.</p> </li> <li> <p>Process Changes:</p> </li> <li>If records exist in <code>ARSLST</code>, read each record (e.g., customer ID, old salesman ID, new salesman ID).</li> <li>Validate record integrity (e.g., non-null salesman IDs, valid customer references).</li> <li> <p>Write validated records to <code>SLSCHG</code> file with specified format (starting at record 1, block size 32).</p> </li> <li> <p>Complete Posting:</p> </li> <li>If all records are processed successfully, return status \"Posting completed\".</li> <li>If processing fails (e.g., file errors), return status \"Posting cancelled\" with error details.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Validation: Ensure <code>ARSLST</code> records contain valid customer and salesman IDs. Invalid records are skipped, and an error is logged.</li> <li>File Integrity: <code>SLSCHG</code> is created or overwritten only if <code>ARSLST</code> contains valid records.</li> <li>Atomic Processing: All changes are processed as a single transaction; partial updates are not allowed.</li> <li>No User Interaction: The function operates autonomously, assuming all inputs are pre-validated.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#calculations","title":"Calculations","text":"<ul> <li>No explicit calculations are performed. The function primarily involves data validation and file manipulation:</li> <li>Record Count Check: Determines if <code>ARSLST</code> has zero records (<code>record_count == 0</code>).</li> <li>Record Mapping: Maps <code>ARSLST</code> fields (e.g., customer ID, salesman ID) to <code>SLSCHG</code> format without transformation.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>If <code>ARSLST</code> is empty or inaccessible, return \"No records exist in the change table\".</li> <li>If <code>SLSCHG</code> cannot be created or written to, return \"Posting process failed\" with error details.</li> <li>Log all errors for audit purposes.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (<code>ARSLST</code>, <code>SLSCHG</code>) are accessible and formatted per system specifications.</li> <li>No external user input is required; the function processes data autonomously.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/","title":"AR500 RPG36","text":"<p>The provided document is an RPG/36 program, <code>AR500.rpg36.txt</code>, called by the OCL program <code>AR500P.ocl36.txt</code> to generate an Accounts Receivable (A/R) Aged Trial Balance report by customer number. This program processes customer and invoice data, calculates aging buckets, and produces a detailed report. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#process-steps-of-the-rpg36-program","title":"Process Steps of the RPG/36 Program","text":"<p>The <code>AR500</code> RPG program is designed to produce an A/R Aged Trial Balance report, categorizing customer balances into aging buckets based on invoice dates (as revised on 04/13/05 per revision log). It processes data hierarchically by company, customer group, and customer, generating subtotals and totals. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P064</code>: Program identifier.</li> <li>Sets up the program to handle A/R data processing.</li> </ul> </li> <li>File Declarations:<ul> <li>Defines input and output files (see Tables Used section).</li> </ul> </li> <li>Data Structures:<ul> <li><code>DTA</code>: A 5-element array (9,2) to accumulate aging bucket amounts (current, 1-30, 31-60, 61-90, over 90/91-120 days).</li> <li><code>UDS</code>: Defines input parameters like <code>LDATE</code> (aging date), <code>KYOUTS</code> (outstanding invoices), <code>KYREPT</code> (report sequence), <code>KYCLYN</code> (credit limit flag), <code>KYNOD</code> (NOD report flag), and <code>KYCUCL</code> (customer class).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>Uses indicators (e.g., <code>31</code>, <code>41</code>, <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code>, <code>60</code>, <code>61</code>, <code>62</code>, etc.) to control logic, printing, and error handling.</li> </ul> </li> <li> <p>Company-Level Processing (Level 5 - L5):</p> </li> <li>Initialize Company Totals:<ul> <li>Resets company totals (<code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>, <code>L5CDUE</code>, <code>L5CPRE</code>) to zero.</li> <li>Sets <code>PAGE1</code> and <code>PAGE2</code> to zero for pagination.</li> <li>Captures system time (<code>TIMEOF</code>) for report headers.</li> </ul> </li> <li>Retrieve Company Data:<ul> <li>Chains to <code>ARCONT</code> using <code>ARCO</code> (company number) to retrieve company name (<code>CONAME</code>) and aging limits (<code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code>).</li> <li>Adjusts limits (<code>LMT1</code>, <code>LMT2</code>, <code>LMT3</code>, <code>LMT4</code>) by adding 1 to <code>ACLMT1-3</code> for display purposes.</li> <li>If <code>ARCONT</code> record is missing (<code>*IN99</code>), sets <code>CONAME</code> to blank.</li> </ul> </li> <li>Customer Class Processing:<ul> <li>If <code>KYCUCL</code> (customer class) is specified, chains to <code>GSTABL</code> to retrieve class description (<code>TBDESC</code> into <code>CUDESC</code>).</li> <li>Sets <code>*IN66</code> if class is valid.</li> </ul> </li> <li>Outstanding Invoices Check:<ul> <li>If <code>KYOUTS = 'O'</code>, sets <code>*IN50</code> to print only outstanding invoices.</li> </ul> </li> <li>Report Sequence:<ul> <li>If <code>KYREPT = 'C'</code>, sets <code>*IN80</code> for customer sequence subtotals.</li> </ul> </li> <li> <p>Credit Limit and NOD Flags:</p> <ul> <li>Sets <code>*IN72</code> if <code>KYCLYN = 'Y'</code> (print credit limit).</li> <li>Sets <code>*IN73</code> if <code>KYNOD = 'Y'</code> (NOD report only).</li> </ul> </li> <li> <p>Customer Group Processing (Level 4 - L4):</p> </li> <li>Resets group totals (<code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code>) to zero.</li> <li> <p>Sets <code>*IN85</code> and <code>*IN89</code> based on whether <code>ADZERO</code> (grouping customer zero flag) is zero to distinguish petroleum vs. miscellaneous billing customers.</p> </li> <li> <p>Customer Processing (Level 3 - L3):</p> </li> <li>Initialize Customer Totals:<ul> <li>Resets customer totals (<code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>) to zero.</li> <li>Clears <code>*IN62</code> for customer subtotal printing.</li> </ul> </li> <li>Retrieve Customer Data:<ul> <li>Chains to <code>ARCUSP</code> using <code>ARCOCU</code> (company/customer key) to retrieve credit comments (<code>CSCMT1-3</code>) and contact name (<code>CSCNCT</code>).</li> <li>Sets <code>*IN71</code> if comments are non-blank.</li> <li>Chains to <code>GSTABL</code> using <code>ARTERM</code> (terms code) to retrieve terms description (<code>TBDESC</code> into <code>TMDESC</code>).</li> <li>Chains to <code>GSTABL</code> using <code>ARSLS#</code> (salesman number) to retrieve salesman name (<code>TBDESC</code> into <code>SLNAME</code>).</li> </ul> </li> <li> <p>Credit Limit:</p> <ul> <li>If <code>ARCO = ADGCO</code> and <code>ARCUST = ADGCUS</code>, uses <code>ARCLMT</code> as the credit limit (<code>CLMT</code>); otherwise, defaults to zero.</li> </ul> </li> <li> <p>Detail Processing (Level 1 - L1):</p> </li> <li>Initialize Detail Totals:<ul> <li>Resets <code>DTA</code> array, <code>TOTARD</code>, <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code> to zero.</li> <li>Clears indicators <code>31</code>, <code>51</code>, <code>52</code>, <code>53</code> for balance checks.</li> </ul> </li> <li> <p>Process <code>ARCUST</code> Records:</p> <ul> <li>Accumulates totals from <code>ARCUST</code> fields (<code>ARTOTD</code>, <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>) into <code>TOTARD</code>, <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>.</li> <li>If <code>TOTARD \u2260 0</code> and <code>*IN50</code> (outstanding only), sets <code>*IN61</code> and <code>*IN62</code>.</li> <li>Compares <code>ARCLMT</code> to <code>TOTARD</code> to set <code>*IN57</code> if over credit limit.</li> <li>Skips to <code>END</code> if <code>*IN61</code> is set unless processing NOD records.</li> </ul> </li> <li> <p>Detail Record Processing (<code>ARDETL</code>):</p> </li> <li>Match Records:<ul> <li>If no match (<code>NMR</code>), sets <code>*IN26</code>, writes an exception record, and skips to <code>END</code>.</li> </ul> </li> <li>Aging Bucket Assignment:<ul> <li>Converts <code>ADDATE</code> (A/R date) to MMDDYY format (<code>ADMDY</code>).</li> <li>Uses <code>ADAGE</code> (age code) to assign buckets:</li> <li><code>ADAGE = 2</code> sets <code>*IN10</code> or <code>*IN11</code>.</li> <li><code>ADAGE = 4</code> sets <code>*IN15</code>, <code>*IN13</code>, <code>*IN14</code>, and reassigns <code>ADAGE = 5</code>.</li> <li>Sets <code>I</code> to <code>ADAGE</code> for array indexing.</li> </ul> </li> <li>Record Type Processing:<ul> <li>Invoice (<code>ADTYPE = 'I'</code>):</li> <li>If <code>ADPART \u2260 0</code>, marks <code>INVPMO = '*'</code> (prior month activity).</li> <li>If <code>ADNOD = 'Y'</code>, sets <code>INVNOD = 'NOD'</code>.</li> <li>If <code>*IN50</code> (outstanding only), calculates balance (<code>ADBAL = ADAMT - ADPAID</code>).</li> <li>If <code>ADBAL \u2260 0</code>, sets <code>*IN60</code> and <code>*IN62</code>; otherwise, skips to <code>END</code>.</li> <li>If <code>ADINV1 = 9</code> (prepaid cash), adjusts <code>L5CPRE</code> (company prepay).</li> <li>Adds <code>ADAMT - ADPART</code> to <code>DTA(I)</code>.</li> <li>Credit (<code>ADTYPE = 'C'</code>):</li> <li>Adds <code>ADAMT - ADPART</code> to <code>DTA(I)</code>.</li> <li>Adjustment (<code>ADTYPE = 'J'</code>):</li> <li>Adds <code>ADAMT</code> to <code>DTA(I)</code>.</li> <li>Payment (<code>ADTYPE = 'P'</code>):</li> <li>Subtracts <code>ADAMT</code> from <code>DTA(I)</code> and negates <code>ADAMT</code>.</li> <li>Invalid Type:</li> <li>Sets <code>*IN25</code>, writes an exception record, and clears <code>*IN25</code>.</li> </ul> </li> <li> <p>NOD Processing:</p> <ul> <li>If <code>KYNOD = 'Y'</code>, accumulates <code>DTA</code> into <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>, and computes <code>TOTARD</code>.</li> </ul> </li> <li> <p>Balance Validation:</p> </li> <li>Compares <code>DTA</code> array with <code>ARCUST</code> totals (<code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>).<ul> <li>Sets <code>*IN51</code> if any mismatch.</li> </ul> </li> <li>Crossfoots <code>ARCUST</code> aging fields (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30 = ARTOTD</code>).<ul> <li>Sets <code>*IN52</code> if totals mismatch.</li> <li>Sets <code>*IN53</code> if <code>TOT \u2260 0</code> but no detail records exist.</li> </ul> </li> <li> <p>Increments <code>OUTBAL</code> if mismatches occur (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN31</code>).</p> </li> <li> <p>Subtotal and Total Calculations:</p> </li> <li>Customer Subtotals (L3):<ul> <li>Accumulates <code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code> from detail totals.</li> <li>Validates <code>L3TOT</code> against crossfooted totals (<code>L3CUR + L30110 + L31120 + L32130 + L3OV30</code>).</li> <li>Sets <code>*IN54</code> if mismatch and increments <code>OUTBAL</code>.</li> </ul> </li> <li>Group Totals (L4):<ul> <li>Accumulates <code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code> if <code>*IN80</code> (customer sequence).</li> </ul> </li> <li> <p>Company Totals (L5):</p> <ul> <li>Accumulates <code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>.</li> <li>Calculates <code>L5CDUE = L5CUR - L5CPRE</code>.</li> </ul> </li> <li> <p>Report Output:</p> </li> <li>Headers (L5/L4):<ul> <li>Prints company name (<code>CONAME</code>), date (<code>UDATE</code>), time (<code>TIMEOF</code>), page number (<code>PAGE1</code>/<code>PAGE2</code>), and aging date (<code>LDATE</code>).</li> <li>Indicates outstanding invoices (<code>KYOUTS = 'O'</code>), NOD report (<code>KYNOD = 'Y'</code>), or customer class (<code>KYCUCL</code>).</li> <li>Prints aging bucket headers (e.g., <code>0-30</code>, <code>31-60</code>, <code>61-90</code>, <code>91-120</code>, <code>OVER 120</code>).</li> </ul> </li> <li>Detail Lines (L1):<ul> <li>Prints customer number (<code>ARCUST</code>), name (<code>ARNAME</code>), salesman (<code>ARSLS#</code>, <code>SLNAME</code>), totals (<code>L3TOT</code>, <code>L3CUR</code>, etc.), last payment (<code>ARPYMT</code>, <code>ARPDAT</code>), and finance charges (<code>ARFIN$</code>).</li> <li>Prints invoice details (<code>ADINV#</code>, <code>ADMDY</code>, <code>ADAMT</code>, <code>ADRFIV</code>) for invoices, credits, adjustments, or payments.</li> <li>Includes credit limit (<code>CLMT</code>), terms (<code>TMDESC</code>), and contact/comments (<code>CSCNCT</code>, <code>CSCMT1-3</code>) if applicable.</li> </ul> </li> <li>Subtotals and Totals (L3/L4/L5):<ul> <li>Prints customer, group, and company totals with aging buckets.</li> <li>Highlights out-of-balance conditions (<code>OUTBAL</code>) and credit limit violations (<code>*IN57</code>).</li> </ul> </li> <li> <p>Exception Records:</p> <ul> <li>Prints errors for invalid <code>ARDETL</code> type (<code>*IN25</code>), missing <code>ARCUST</code> record (<code>*IN26</code>), or out-of-balance conditions (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>).</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>Writes final out-of-balance message and credit limit warning at last record (<code>LR</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Aging Buckets:</li> <li>Uses invoice date (<code>ADDATE</code>) for aging (revised 04/13/05).</li> <li>Buckets: 0-30, 31-60, 61-90, 91-120, over 120 days from invoice date.</li> <li>Outstanding Invoices:</li> <li>If <code>KYOUTS = 'O'</code>, only processes invoices with outstanding balances (<code>ADAMT - ADPAID \u2260 0</code>).</li> <li>NOD Report:</li> <li>If <code>KYNOD = 'Y'</code>, processes only records with <code>ADNOD = 'Y'</code> (Notification of Difference).</li> <li>Credit Limit:</li> <li>If <code>KYCLYN = 'Y'</code>, prints credit limit (<code>ARCLMT</code>) and flags customers exceeding it (<code>*IN57</code>).</li> <li>Customer Class:</li> <li>If <code>KYCUCL</code> is specified, filters by customer class and retrieves description from <code>GSTABL</code>.</li> <li>Balance Validation:</li> <li>Ensures <code>ARDETL</code> totals match <code>ARCUST</code> totals.</li> <li>Crossfoots <code>ARCUST</code> aging fields to match total due (<code>ARTOTD</code>).</li> <li>Reports out-of-balance conditions (<code>OUTBAL &gt; 0</code>).</li> <li>Record Types:</li> <li>Processes invoices (<code>I</code>), credits (<code>C</code>), adjustments (<code>J</code>), and payments (<code>P</code>).</li> <li>Invalid types trigger exception output.</li> <li>Hierarchy:</li> <li>Processes data by company (<code>L5</code>), customer group (<code>L4</code>), and customer (<code>L3</code>).</li> <li>Accumulates totals at each level for reporting.</li> <li>Report Formatting:</li> <li>Includes headers, detail lines, subtotals, and totals.</li> <li>Supports multiple printers (<code>PRINT</code>, <code>PRINT2</code>, <code>PRINT3</code>) for different output streams.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>ARCUST:</li> <li>Type: Input Primary (<code>IPEA 3840 384 DISK</code>).</li> <li>Purpose: Customer master file with balance and aging data.</li> <li>Key: <code>ARCOCU</code> (company/customer number).</li> <li>Fields: <code>ARDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARCUST</code> (customer number), <code>ARNAME</code> (name), <code>ARADR1-4</code> (address), <code>ARZIP5/9/14</code> (zip codes), <code>ARTOTD</code> (total due), <code>ARCURD</code> (current due), <code>AR0110</code> (1-30 days), <code>AR1120</code> (31-60 days), <code>AR2130</code> (61-90 days), <code>AROV30</code> (over 90 days), <code>ARPYMT</code> (last payment), <code>ARPDAT</code> (payment date), <code>ARPREP</code> (unapplied cash), <code>ARMTD$</code> (MTD sales), <code>ARYTD$</code> (YTD sales), <code>ARSTMT</code> (statements Y/N), <code>ARFIN$</code> (finance charge), <code>ARPBAL</code> (previous balance), <code>ARFINC</code> (finance charge Y/N), <code>ARCLMT</code> (credit limit), <code>ARAREA</code> (area code), <code>ARTELE</code> (phone), <code>ARSLS#</code> (salesman), <code>ARTERM</code> (terms), <code>ADGCO</code> (group company), <code>ADGCUS</code> (group customer), <code>ARPDA8</code> (payment date YMD), <code>ARHID8</code> (recent high date YMD).</li> <li>ARDETL:</li> <li>Type: Input Secondary (<code>IS AF 138 138 DISK</code>).</li> <li>Purpose: A/R detail file with invoice and transaction data.</li> <li>Key: <code>ADCOCU</code> (company/customer number).</li> <li>Fields: <code>ADDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARCUST</code> (customer number), <code>ADINV#</code> (invoice number), <code>ADTYPE</code> (I/J/P/C), <code>ADSEQ#</code> (sequence number), <code>ADDATE</code> (A/R date), <code>ADAMT</code> (amount), <code>ADAGE</code> (age code), <code>ADPART</code> (partial payment), <code>ADPAY</code> (current month paid), <code>ADSLS</code> (salesman), <code>ADPOST</code> (posting code), <code>ADNEXT</code> (next sequence), <code>ADPURG</code> (purge code), <code>ADDUDT</code> (due date), <code>ADTERM</code> (terms), <code>ADJRNL</code> (journal date), <code>ADDUD8</code> (due date YMD), <code>ADJRN8</code> (journal date YMD), <code>ADNOD</code> (NOD flag), <code>ADRFIV</code> (reference invoice), <code>ADGCO</code> (group company), <code>ADGCUS</code> (group customer).</li> <li>ARCUSP:</li> <li>Type: Input (<code>IF F 1344 8AI 2 DISK</code>).</li> <li>Purpose: Customer supplemental file for credit comments and contact info.</li> <li>Key: <code>ARCOCU</code> (company/customer number).</li> <li>Fields: <code>CSCMT1-3</code> (credit comments), <code>CSCNCT</code> (contact name).</li> <li>GSTABL:</li> <li>Type: Input (<code>IF F 256 12AI 2 DISK</code>).</li> <li>Purpose: General system table for terms, salesman, and class descriptions.</li> <li>Key: <code>TBTYPE</code>/<code>TBCODE</code> (e.g., <code>ARTERM</code>, <code>SLSMAN</code>).</li> <li>Fields: <code>TBDEL</code> (delete flag), <code>TBTYPE</code> (table type), <code>TBCODE</code> (code), <code>TBDESC</code> (description).</li> <li>ARCONT:</li> <li>Type: Input (<code>IF F 256 2AI 2 DISK</code>).</li> <li>Purpose: A/R control file for company data and aging limits.</li> <li>Key: <code>ARCO</code> (company number).</li> <li>Fields: <code>CONAME</code> (company name), <code>ACLMT1-4</code> (aging limits).</li> <li>PRINT:</li> <li>Type: Output (<code>O 164 OF PRINTER U8</code>).</li> <li>Purpose: Primary report output.</li> <li>PRINT2:</li> <li>Type: Output (<code>O 164 OA PRINTER</code>).</li> <li>Purpose: Secondary report output for errors or additional copies.</li> <li>PRINT3:</li> <li>Type: Output (<code>O 164 OV PRINTER U7</code>).</li> <li>Purpose: Additional report output, possibly for group or company summaries.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call external programs (e.g., via <code>CALL</code> operation). However, it is called by the OCL program <code>AR500P.ocl36.txt</code>, which passes parameters like <code>?9?</code> and <code>?11?</code> (likely mapped to <code>KYOUTS</code>, <code>KYREPT</code>, etc.).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Revision Log:</li> <li>Modified on 04/13/05 to use invoice date (<code>ADDATE</code>) instead of due date for aging, with buckets changed to 0-30, 31-60, 61-90, 91-120, over 120 days.</li> <li>Error Handling:</li> <li>Reports invalid <code>ARDETL</code> types, missing <code>ARCUST</code> records, and out-of-balance conditions.</li> <li>Hierarchical Processing:</li> <li>Uses RPG cycle levels (<code>L1</code>, <code>L3</code>, <code>L4</code>, <code>L5</code>) for customer, group, and company processing.</li> <li>Output:</li> <li>Produces a detailed report with headers, customer details, aging buckets, and totals, with special handling for NOD and out-of-balance conditions.</li> </ul> <p>If you need further details (e.g., specific field calculations, report layout, or additional file structures), please provide more context or related files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/","title":"AR500P OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AR500P.ocl36.txt</code>, used on IBM midrange systems like the AS/400 (now IBM i) to control job execution and interact with programs and files. This OCL script appears to be part of an Accounts Receivable (A/R) Aged Trial Balance process. Below, I\u2019ll explain the process steps, identify external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to automate job control and program execution on IBM midrange systems. The <code>AR500P</code> OCL script orchestrates the execution of an Accounts Receivable process. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Call to GSGENIEC:</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>The script starts by calling an external program named <code>GSGENIEC</code>. This is likely a utility or initialization program that performs setup tasks, such as setting up the environment or validating parameters.</li> <li>The purpose of <code>GSGENIEC</code> is not specified in the OCL, but it could handle tasks like date validation, user authorization, or library list setup.</li> </ul> </li> <li> <p>Conditional Check on Location 506, Position 3:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This checks the value at memory location 506, position 3 (likely a system or program variable).</li> <li>If the condition evaluates to <code>YES</code> (true), the script executes a <code>RETURN</code>, which terminates the OCL procedure immediately, halting further execution.</li> <li>This acts as an early exit condition, possibly to skip processing if a specific flag or parameter is set.</li> </ul> </li> <li> <p>Procedure Call with Parameter:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code>, passing a parameter referenced as <code>?9?</code>.</li> <li>The commas indicate placeholder parameters (up to 8) that are not used here.</li> <li><code>?9?</code> is a substitution variable, likely representing a dynamic value like a company code, report date, or job parameter.</li> <li>The purpose of <code>SCPROCP</code> is not detailed, but it could be a system procedure for setting up job control or environment variables.</li> </ul> </li> <li> <p>Clear Local Variables:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>This clears all local variables in the job\u2019s memory to a blank state, ensuring no residual data affects subsequent steps.</li> </ul> </li> <li> <p>Call to GSY2K:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This invokes a program or procedure named <code>GSY2K</code>, likely related to Year 2000 (Y2K) date handling or conversion.</li> <li>On IBM midrange systems, <code>GSY2K</code> utilities were common for ensuring date fields were processed correctly (e.g., converting two-digit years to four-digit years).</li> <li>This step ensures date-related data in the A/R process is Y2K-compliant.</li> </ul> </li> <li> <p>Load Program AR500P:</p> </li> <li> <p><code>// LOAD AR500P</code>:</p> <ul> <li>This loads the main program <code>AR500P</code> into memory for execution.</li> <li><code>AR500P</code> is likely an RPG (Report Program Generator) program responsible for generating the A/R Aged Trial Balance report.</li> </ul> </li> <li> <p>File Declaration for ARCONT:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHRMM</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> with a label that includes the substitution variable <code>?9?</code> (e.g., a company or library identifier).</li> <li><code>DISP-SHRMM</code> indicates the file is opened in shared mode, allowing multiple jobs to access it simultaneously (read-only or read/write depending on the program).</li> <li><code>ARCONT</code> is likely the Accounts Receivable control file containing customer balances, aging buckets, or transaction data.</li> </ul> </li> <li> <p>Run the Loaded Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Executes the loaded <code>AR500P</code> program, which processes the A/R data and generates the Aged Trial Balance report.</li> <li>The program likely reads from the <code>ARCONT</code> file and performs calculations to categorize receivables into aging buckets (e.g., current, 30 days, 60 days, etc.).</li> </ul> </li> <li> <p>Conditional Check on Location 124, Position 6:</p> </li> <li> <p><code>// IF ?L'124,6'?/CANCEL GOTO END</code>:</p> <ul> <li>Checks the value at memory location 124, position 6.</li> <li>If the condition evaluates to <code>CANCEL</code> (true), the script jumps to the <code>END</code> tag, terminating the job.</li> <li>This could be a check for an error condition or user-initiated cancellation.</li> </ul> </li> <li> <p>Conditional Job Queue Submission:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR500,,,,,,,,,?9?,,?11?</code>:</li> <li>Checks the value at memory location 120, position 1.</li> <li>If the condition is <code>Y</code> (true), the <code>AR500</code> program is submitted to a job queue specified by <code>?CLIB?</code> (a library or job queue name), with parameters <code>?9?</code> and <code>?11?</code>.</li> <li>This implies the A/R process can run in batch mode, possibly for large datasets or scheduled processing.</li> <li><code>// ELSE AR500 ,,,,,,,,?9?,,?11?</code>:</li> <li>If the condition is false, the <code>AR500</code> program is executed directly (not in a job queue) with the same parameters <code>?9?</code> and <code>?11?</code>.</li> <li>The commas again represent unused parameter positions.</li> <li><code>?11?</code> is another substitution variable, possibly for additional report options or filters.</li> </ul> </li> <li> <p>End Tag:</p> <ul> <li><code>// TAG END</code>:</li> <li>Marks the <code>END</code> label, used as a target for the <code>GOTO END</code> statement in case of cancellation.</li> </ul> </li> <li> <p>Clear Local Variables Again:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Clears all local variables again at the end of the script, ensuring a clean exit.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls or references the following external programs or procedures: 1. GSGENIEC:    - Called at the start, likely a utility for environment setup or validation. 2. SCPROCP:    - A procedure invoked with the <code>?9?</code> parameter, possibly for job control or configuration. 3. GSY2K:    - A program or procedure for Y2K date handling, ensuring proper date processing. 4. AR500P:    - The main RPG program loaded and executed to generate the A/R Aged Trial Balance. 5. AR500:    - Referenced in the job queue or direct execution step, likely the same program as <code>AR500P</code> or a related module.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script explicitly references the following file: 1. ARCONT:    - File name: <code>ARCONT</code>    - Label: <code>?9?ARCONT</code> (dynamic label based on the <code>?9?</code> parameter)    - Disposition: <code>SHRMM</code> (shared mode)    - Purpose: Likely the Accounts Receivable control file containing customer data, balances, or transaction details used for the Aged Trial Balance report.</p> <p>No other files are explicitly mentioned, but the <code>AR500P</code> program may access additional files (e.g., customer master, transaction history) not declared in the OCL.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variables:</li> <li><code>?9?</code> and <code>?11?</code> are placeholders for dynamic values passed to the script, such as company codes, report dates, or job parameters.</li> <li><code>?CLIB?</code> likely represents a library name for the job queue.</li> <li>Conditional Logic:</li> <li>The script uses memory location checks (<code>?L'506,3'?</code>, <code>?L'124,6'?</code>, <code>?L'120,1'?</code>) to control flow, typical in OCL for decision-making based on system or program states.</li> <li>Job Queue vs. Direct Execution:</li> <li>The script supports both batch (via <code>JOBQ</code>) and interactive execution of <code>AR500</code>, providing flexibility for different processing needs.</li> <li>A/R Aged Trial Balance:</li> <li>The process generates a report categorizing receivables by aging periods, commonly used for financial reporting and credit management.</li> </ul> <p>If you have additional details (e.g., the contents of <code>AR500P</code> or the structure of <code>ARCONT</code>), I can provide a more detailed analysis of the RPG program\u2019s logic or file interactions. Let me know if you\u2019d like me to search for related information or analyze specific aspects further!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/","title":"AR500P RPGLE","text":"<p>The provided document is an RPGLE (Report Program Generator Language Extended) program, <code>AR500P.rpgle.txt</code>, which is called by the OCL program <code>AR500P.ocl36.txt</code> to generate an Accounts Receivable (A/R) Aged Trial Balance report. This program handles user input, validates parameters, and prepares data for the report. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR500P</code> RPGLE program is an interactive program that prompts users for input via a workstation display file, validates the input, and sets up parameters for generating the A/R Aged Trial Balance report. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group, allowing better resource management.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>H DFTNAME(AR500P)</code>: Sets the default program name.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li><code>msg</code>: A 40-character array with 19 predefined error messages (loaded via <code>CTDATA</code>).</li> <li><code>dco</code>: A 35-character array to store company names (up to 3 companies).</li> <li><code>uds</code>: A data structure defining user input fields (e.g., <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, etc.) for report parameters like date, company selection, and report options.</li> <li><code>y2kcen</code> and <code>y2kcmp</code>: Variables for Y2K date handling (century and comparison year).</li> </ul> </li> <li> <p>File Declarations:</p> </li> <li>AR500PD (Workstation File):<ul> <li>Defined as <code>CF E WORKSTN</code> with a handler (<code>PROFOUNDUI(HANDLER)</code>), indicating a modernized display file for user interaction, likely using a web-based interface.</li> </ul> </li> <li>ARCONT (Accounts Receivable Control File):<ul> <li>Defined as <code>UF F 256 2AIDISK KEYLOC(2)</code>: A 256-byte file with a 2-byte key (company number <code>acco</code>), used for update (<code>UF</code>) and accessed by key.</li> </ul> </li> <li> <p>GSCONT (General System Control File):</p> <ul> <li>Defined as <code>IF F 512 2AIDISK KEYLOC(2)</code>: A 512-byte input file with a 2-byte key (company number <code>gxcono</code>), likely used for system-wide settings.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>Initial Workstation File Read:<ul> <li>Checks <code>qsctl</code> (control flag). If blank, sets indicators <code>*IN09</code> (initial screen) and <code>*IN01</code> (display screen), and sets <code>qsctl</code> to <code>'R'</code>.</li> <li>Otherwise, reads the display file <code>ar500pfm</code> and returns if the last record indicator (<code>*INLR</code>) is on.</li> </ul> </li> <li>Indicator and Message Initialization:<ul> <li>Clears <code>msg40</code> (error message field) and resets indicators <code>50-62</code>, <code>81</code>, and <code>90</code> to <code>*OFF</code>.</li> </ul> </li> <li>Cancel Check:<ul> <li>If <code>*INKG</code> (cancel key) is on, sets <code>kycanc</code> to <code>'CANCEL'</code>, turns off <code>*IN01</code> and <code>*IN09</code>, sets <code>*INLR</code> to <code>*ON</code>, and exits.</li> </ul> </li> <li>One-Time Setup (Subroutine <code>onetim</code>):<ul> <li>Executed if <code>*IN09</code> is on (initial run).</li> <li>Captures current time and date, stores in <code>kydate</code>.</li> <li>Reads <code>ARCONT</code> to populate <code>dco</code> array with up to three company numbers (<code>acco</code>) and names (<code>acname</code>), skipping deleted records (<code>acdel = 'D'</code>).</li> <li>Initializes default parameters:</li> <li><code>kyds = 'D'</code> (detail report).</li> <li><code>kyalco = 'ALL'</code> or <code>'CO '</code> (based on <code>GSCONT</code> company number <code>gxcono</code>).</li> <li><code>kyalcs = 'ALL'</code> (all customers).</li> <li><code>kyalsl = 'ALL'</code> (all salesmen).</li> <li><code>kyjobq = 'N'</code> (no job queue).</li> <li><code>kycopy = 01</code> (one copy).</li> <li><code>kyouts = 'O'</code> (outstanding invoices).</li> <li><code>kynod = 'N'</code> (no NOD report).</li> <li><code>kyslcy = 'N'</code> (no salesman copies).</li> <li><code>kyrept = 'C'</code> (customer sequence).</li> <li><code>kyclyn = 'N'</code> (no credit limit).</li> <li>Releases any locked <code>ARCONT</code> records using a blank key (<code>nulkey</code>).</li> </ul> </li> <li>Screen Processing (Subroutine <code>screen1</code>):<ul> <li>Executed if <code>*IN01</code> is on and <code>*IN15</code> is off.</li> <li>Validates user input parameters:</li> <li>Date Validation: Calls <code>@dtedt</code> to validate <code>kydate</code> (MMDDYY format).</li> <li>Company Selection:<ul> <li>Ensures <code>kyalco</code> is <code>'ALL'</code> or <code>'CO '</code>.</li> <li>If <code>'CO '</code>, validates <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> against <code>ARCONT</code> (non-zero, non-deleted records).</li> <li>If <code>'ALL'</code>, ensures no company numbers are entered.</li> </ul> </li> <li>Customer Selection:<ul> <li>Ensures <code>kyalcs</code> is <code>'ALL'</code> or <code>'SEL'</code>.</li> <li>If <code>'SEL'</code>, requires non-zero <code>kycs01</code>, <code>kycs02</code>, or <code>kycs03</code>.</li> </ul> </li> <li>Outstanding Invoices:<ul> <li>Ensures <code>kyouts</code> is <code>'O'</code> or blank.</li> </ul> </li> <li>Report Sequence:<ul> <li>Ensures <code>kyrept</code> is <code>'C'</code>, <code>'N'</code>, or <code>'S'</code>.</li> <li>If <code>kyslcy = 'Y'</code>, requires <code>kyrept = 'S'</code>.</li> </ul> </li> <li>Salesmen Selection:<ul> <li>Ensures <code>kyalsl</code> is <code>'ALL'</code> or <code>'SEL'</code>.</li> <li>If <code>'SEL'</code>, requires <code>kyrept = 'S'</code> and valid <code>kyfmsl</code>/<code>kytosl</code> (from/to salesman, where <code>kytosl &gt; kyfmsl</code>).</li> </ul> </li> <li>Job Queue:<ul> <li>Ensures <code>kyjobq</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>Credit Limit:<ul> <li>Ensures <code>kyclyn</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>NOD Report:<ul> <li>Ensures <code>kynod</code> is <code>'Y'</code> or <code>'N'</code>.</li> <li>If <code>kynod = 'Y'</code>, requires <code>kyds = 'D'</code>.</li> </ul> </li> <li>Salesman Copies:<ul> <li>Ensures <code>kyslcy</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>Copy Count:<ul> <li>Ensures <code>kycopy</code> is non-zero (defaults to 1 if zero).</li> </ul> </li> <li>Displays error messages (<code>msg40</code>) from the <code>msg</code> array if validation fails, setting <code>*IN81</code> and appropriate error indicators (<code>50-62</code>, <code>90</code>).</li> <li>Updates <code>ARCONT</code> with <code>kydate</code> for non-deleted records if validations pass.</li> <li>Releases locked records using <code>nulkey</code>.</li> </ul> </li> <li> <p>Date Validation (Subroutine <code>@dtedt</code>):</p> <ul> <li>Validates <code>kydate</code> (MMDDYY format):</li> <li>Breaks down into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Checks month (1-12).</li> <li>Validates day based on month:<ul> <li>February: 29 days for leap years, 28 otherwise.</li> <li>Months 4, 6, 9, 11: 30 days.</li> <li>Others: 31 days.</li> </ul> </li> <li>Handles leap year calculations using <code>y2kcen</code> and <code>y2kcmp</code> for century and year checks.</li> <li>Sets <code>*IN79</code> if the date is invalid.</li> </ul> </li> <li> <p>Output and Termination:</p> </li> <li>Writes to the display file (<code>ar500pfm</code>) if <code>*IN81</code> is on, displaying errors or updated parameters.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> to end the program if no further processing is needed.</li> <li>Updates <code>ARCONT</code> with the ageing date (<code>kydate</code>) for all records.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the A/R Aged Trial Balance report: 1. Date Validation:    - The ageing date (<code>kydate</code>) must be a valid date in MMDDYY format, with proper month, day, and leap year checks. 2. Company Selection:    - Must be <code>'ALL'</code> (all companies) or <code>'CO '</code> (specific companies).    - If <code>'CO '</code>, at least one valid company number (<code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>) must exist in <code>ARCONT</code> and not be deleted (<code>acdel \u2260 'D'</code>).    - If <code>'ALL'</code>, no company numbers should be specified. 3. Customer Selection:    - Must be <code>'ALL'</code> (all customers) or <code>'SEL'</code> (selected customers).    - If <code>'SEL'</code>, at least one customer number (<code>kycs01</code>, <code>kycs02</code>, or <code>kycs03</code>) must be non-zero. 4. Outstanding Invoices:    - Must be <code>'O'</code> (outstanding invoices only) or blank. 5. Report Sequence:    - Must be <code>'C'</code> (customer sequence), <code>'N'</code> (name sequence), or <code>'S'</code> (salesman sequence).    - If salesman copies (<code>kyslcy = 'Y'</code>), report sequence must be <code>'S'</code>. 6. Salesmen Selection:    - Must be <code>'ALL'</code> (all salesmen) or <code>'SEL'</code> (selected salesmen).    - If <code>'SEL'</code>, report sequence must be <code>'S'</code>, and valid from/to salesman numbers (<code>kyfmsl</code>, <code>kytosl</code>) must be provided, with <code>kytosl &gt; kyfmsl</code>. 7. Job Queue:    - Must be <code>'Y'</code> (run in batch) or <code>'N'</code> (run interactively). 8. Credit Limit:    - Must be <code>'Y'</code> (print credit limit) or <code>'N'</code> (don\u2019t print). 9. NOD Report:    - Must be <code>'Y'</code> (include NOD report) or <code>'N'</code> (exclude).    - If <code>'Y'</code>, report type must be detail (<code>kyds = 'D'</code>). 10. Salesman Copies:     - Must be <code>'Y'</code> (print salesman copies) or <code>'N'</code> (don\u2019t print). 11. Copy Count:     - Must be non-zero; defaults to 1 if zero. 12. Report Type:     - Must be <code>'D'</code> (detail) or <code>'S'</code> (summary); defaults to <code>'D'</code> if blank.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR500PD:</li> <li>Type: Workstation file (<code>CF E WORKSTN</code>).</li> <li>Purpose: Display file for user interaction, likely a modernized interface using Profound UI.</li> <li>Fields: Outputs fields like <code>kydate</code>, <code>kyds</code>, <code>kyalco</code>, <code>kyco1-3</code>, <code>dco</code>, <code>kyalcs</code>, <code>kycs01-03</code>, <code>kyouts</code>, <code>kyrept</code>, <code>kyjobq</code>, <code>kycopy</code>, <code>msg40</code>, <code>kyclyn</code>, <code>kyalsl</code>, <code>kyfmsl</code>, <code>kytosl</code>, <code>kynod</code>, <code>kyslcy</code>, <code>kycucl</code>.</li> <li>ARCONT:</li> <li>Type: Disk file (<code>UF F 256 2AIDISK KEYLOC(2)</code>).</li> <li>Purpose: Accounts Receivable control file, storing company and customer data.</li> <li>Key: <code>acco</code> (company number, 2 bytes).</li> <li>Fields:<ul> <li><code>acdel</code> (1 byte): Deletion flag (<code>'D'</code> for deleted).</li> <li><code>acco</code> (2 bytes): Company number.</li> <li><code>acname</code> (30 bytes): Company name.</li> <li><code>acdate</code> (6 bytes): Ageing date.</li> </ul> </li> <li>GSCONT:</li> <li>Type: Disk file (<code>IF F 512 2AIDISK KEYLOC(2)</code>).</li> <li>Purpose: General system control file, likely for system-wide settings like default company number.</li> <li>Key: <code>gxcono</code> (2 bytes).</li> <li>Fields:<ul> <li><code>gxdel</code> (1 byte): Deletion flag.</li> <li><code>gxcono</code> (2 bytes): Company number.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call external programs (e.g., via <code>CALL</code> operation). However, it interacts with: - Profound UI Handler (<code>PROFOUNDUI(HANDLER)</code>): Used by the <code>AR500PD</code> workstation file for rendering the user interface, indicating a modernized front-end. - The OCL program (<code>AR500P.ocl36.txt</code>) that calls this RPGLE program, passing parameters like <code>?9?</code> and <code>?11?</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Y2K Compliance:</li> <li>The program includes Y2K date handling (<code>y2kcen</code>, <code>y2kcmp</code>) to ensure correct century calculations for leap years.</li> <li>Error Handling:</li> <li>Uses a predefined <code>msg</code> array for user-friendly error messages displayed via <code>msg40</code>.</li> <li>Indicators (<code>50-62</code>, <code>79</code>, <code>81</code>, <code>90</code>) control error display and program flow.</li> <li>Record Locking:</li> <li>The program releases locked <code>ARCONT</code> records using a blank key (<code>nulkey</code>) to prevent deadlocks.</li> <li>Conversion Notes:</li> <li>The program was converted using TARGET/400 on 04/11/23, with 221 lines added, 5 modified, and 441 processed, indicating modernization from older RPG/36 or RPG III code.</li> <li>Integration with OCL:</li> <li>The OCL program (<code>AR500P.ocl36.txt</code>) loads and runs <code>AR500P</code>, passing parameters (<code>?9?</code>, <code>?11?</code>) that likely correspond to fields like <code>kyalco</code>, <code>kyco1-3</code>, or <code>kyjobq</code>.</li> </ul> <p>This program sets up and validates parameters for the A/R Aged Trial Balance report, ensuring data integrity before report generation. If you need further analysis (e.g., specific field mappings, report output format, or additional files), please provide more details or related files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/","title":"Summary AR500P OCL","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of three components: the OCL program (<code>AR500P.ocl36.txt</code>), the RPGLE program (<code>AR500P.rpgle.txt</code>), and the RPG/36 program (<code>AR500.rpg36.txt</code>). Together, they implement a single primary use case:</p> <ol> <li>Generate Accounts Receivable (A/R) Aged Trial Balance Report:</li> <li>Description: This use case involves prompting the user for parameters, validating them, and generating a detailed A/R Aged Trial Balance report that categorizes customer balances into aging buckets (0-30, 31-60, 61-90, 91-120, over 120 days from invoice date) by customer number, with options for filtering by company, customer, salesman, and other criteria.</li> <li>Components:<ul> <li>OCL Program (<code>AR500P.ocl36.txt</code>): Orchestrates the process by calling initialization programs (<code>GSGENIEC</code>, <code>GSY2K</code>), loading the RPGLE program, and submitting or running the RPG/36 program.</li> <li>RPGLE Program (<code>AR500P.rpgle.txt</code>): Handles user input via a workstation interface, validates parameters, and updates the A/R control file with the aging date.</li> <li>RPG/36 Program (<code>AR500.rpg36.txt</code>): Processes customer and invoice data, calculates aging buckets, and generates the report output.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#function-requirement-document-ar-aged-trial-balance-report-generation","title":"Function Requirement Document: A/R Aged Trial Balance Report Generation","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#ar-aged-trial-balance-report-generation-function-requirements","title":"A/R Aged Trial Balance Report Generation Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#purpose","title":"Purpose","text":"<p>The function generates an Accounts Receivable (A/R) Aged Trial Balance report, categorizing customer balances into aging buckets based on invoice dates, with flexible filtering and reporting options.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Aging Date (<code>kydate</code>, 6-digit, MMDDYY): Date for aging calculations.</li> <li>Company Selection (<code>kyalco</code>, string): <code>'ALL'</code> or <code>'CO '</code> (specific companies).</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, 2-digit each): Up to three company numbers if <code>kyalco = 'CO '</code>.</li> <li>Customer Selection (<code>kyalcs</code>, string): <code>'ALL'</code> or <code>'SEL'</code> (specific customers).</li> <li>Customer Numbers (<code>kycs01</code>, <code>kycs02</code>, <code>kycs03</code>, 6-digit each): Up to three customer numbers if <code>kyalcs = 'SEL'</code>.</li> <li>Salesmen Selection (<code>kyalsl</code>, string): <code>'ALL'</code> or <code>'SEL'</code> (specific salesmen).</li> <li>Salesmen Range (<code>kyfmsl</code>, <code>kytosl</code>, 2-digit each): From/to salesman numbers if <code>kyalsl = 'SEL'</code>.</li> <li>Report Type (<code>kyds</code>, string): <code>'D'</code> (detail) or <code>'S'</code> (summary).</li> <li>Outstanding Invoices (<code>kyouts</code>, string): <code>'O'</code> (outstanding only) or blank.</li> <li>Report Sequence (<code>kyrept</code>, string): <code>'C'</code> (customer), <code>'N'</code> (name), or <code>'S'</code> (salesman).</li> <li>Credit Limit Flag (<code>kyclyn</code>, string): <code>'Y'</code> (print) or <code>'N'</code> (don\u2019t print).</li> <li>NOD Report Flag (<code>kynod</code>, string): <code>'Y'</code> (NOD only) or <code>'N'</code> (all records).</li> <li>Salesman Copies (<code>kyslcy</code>, string): <code>'Y'</code> (print) or <code>'N'</code> (don\u2019t print).</li> <li>Customer Class (<code>kycucl</code>, string): Customer class code or blank.</li> <li>Copy Count (<code>kycopy</code>, 2-digit): Number of report copies (default: 1).</li> <li>Job Queue Flag (<code>kyjobq</code>, string): <code>'Y'</code> (batch) or <code>'N'</code> (interactive).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>A/R Aged Trial Balance Report:</li> <li>Format: Printed report (to <code>PRINT</code>, <code>PRINT2</code>, or <code>PRINT3</code>).</li> <li>Content: Customer details, aging buckets (0-30, 31-60, 61-90, 91-120, over 120 days), totals, and optional credit limit/comments.</li> <li>Structure: Hierarchical by company, customer group, and customer.</li> <li>Updated <code>ARCONT</code> File: Records updated with aging date (<code>kydate</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Validate <code>kydate</code> (MMDDYY format, valid month/day, leap year check).</li> <li>Ensure <code>kyalco</code> is <code>'ALL'</code> or <code>'CO '</code>; if <code>'CO '</code>, validate <code>kyco1-3</code> against <code>ARCONT</code> (non-deleted, <code>acdel \u2260 'D'</code>); if <code>'ALL'</code>, ensure <code>kyco1-3</code> are zero.</li> <li>Ensure <code>kyalcs</code> is <code>'ALL'</code> or <code>'SEL'</code>; if <code>'SEL'</code>, require non-zero <code>kycs01-3</code>.</li> <li>Ensure <code>kyalsl</code> is <code>'ALL'</code> or <code>'SEL'</code>; if <code>'SEL'</code>, require <code>kyrept = 'S'</code> and <code>kytosl &gt; kyfmsl</code>.</li> <li>Ensure <code>kyds</code> is <code>'D'</code> or <code>'S'</code> (default: <code>'D'</code> if blank).</li> <li>Ensure <code>kyouts</code> is <code>'O'</code> or blank.</li> <li>Ensure <code>kyrept</code> is <code>'C'</code>, <code>'N'</code>, or <code>'S'</code>; if <code>kyslcy = 'Y'</code>, require <code>'S'</code>.</li> <li>Ensure <code>kyclyn</code>, <code>kynod</code>, <code>kyslcy</code> are <code>'Y'</code> or <code>'N'</code>.</li> <li>Ensure <code>kycopy</code> is non-zero (default: 1).</li> <li>If <code>kynod = 'Y'</code>, require <code>kyds = 'D'</code>.</li> <li> <p>Validate <code>kycucl</code> against <code>GSTABL</code> if specified.</p> </li> <li> <p>Initialize Environment:</p> </li> <li>Retrieve company names (<code>CONAME</code>) and aging limits (<code>ACLMT1-4</code>) from <code>ARCONT</code>.</li> <li>Retrieve customer class description from <code>GSTABL</code> if <code>kycucl</code> is specified.</li> <li> <p>Set default parameters if needed (e.g., <code>kycopy = 1</code>, <code>kyds = 'D'</code>).</p> </li> <li> <p>Update Aging Date:</p> </li> <li> <p>Update <code>ARCONT</code> records with <code>kydate</code> for non-deleted records.</p> </li> <li> <p>Process Data:</p> </li> <li>Read <code>ARCUST</code> and <code>ARDETL</code>:<ul> <li>Process hierarchically by company (<code>ARCO</code>), customer group (<code>ADGCO</code>, <code>ADGCUS</code>), and customer (<code>ARCUST</code>).</li> <li>Match <code>ARDETL</code> records to <code>ARCUST</code> using <code>ADCOCU</code>.</li> </ul> </li> <li>Assign Aging Buckets:<ul> <li>Use <code>ADDATE</code> (invoice date) to categorize <code>ADAMT</code> into buckets (0-30, 31-60, 61-90, 91-120, over 120 days) based on <code>kydate</code>.</li> <li>For invoices (<code>ADTYPE = 'I'</code>), calculate balance (<code>ADAMT - ADPART</code>); if <code>kyouts = 'O'</code>, include only if balance \u2260 0.</li> <li>Adjust buckets for credits (<code>C</code>), adjustments (<code>J</code>), and payments (<code>P</code>).</li> <li>If <code>kynod = 'Y'</code>, process only records with <code>ADNOD = 'Y'</code>.</li> </ul> </li> <li>Accumulate Totals:<ul> <li>Customer totals (<code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>).</li> <li>Group totals (<code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code>).</li> <li>Company totals (<code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>).</li> <li>Prepay balance (<code>L5CPRE</code>) for prepaid cash invoices (<code>ADINV1 = 9</code>).</li> </ul> </li> <li> <p>Validate Balances:</p> <ul> <li>Compare <code>ARDETL</code> totals (<code>DTA</code> array) with <code>ARCUST</code> totals (<code>ARTOTD</code>, <code>ARCURD</code>, etc.).</li> <li>Crossfoot <code>ARCUST</code> aging fields (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30 = ARTOTD</code>).</li> <li>Increment <code>OUTBAL</code> for mismatches.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>Headers: Include company name, date, time, aging date, customer class, and bucket ranges (0-30, 31-60, 61-90, 91-120, over 120 days).</li> <li>Details: Print customer number, name, salesman, totals, last payment, finance charges, and invoice details (invoice number, date, amount, reference invoice).</li> <li>Optional Fields: Include credit limit (<code>ARCLMT</code>) if <code>kyclyn = 'Y'</code>, terms, and comments (<code>CSCMT1-3</code>) from <code>ARCUSP</code>.</li> <li>Subtotals/Totals: Print customer, group, and company totals; highlight out-of-balance conditions (<code>OUTBAL &gt; 0</code>) and credit limit violations.</li> <li> <p>Output Streams: Write to <code>PRINT</code>, <code>PRINT2</code>, or <code>PRINT3</code> based on report type and errors.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>kyjobq = 'Y'</code>, submit to batch; otherwise, run interactively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Aging: Use invoice date (<code>ADDATE</code>) for buckets: 0-30, 31-60, 61-90, 91-120, over 120 days.</li> <li>Filters:</li> <li>Company: <code>'ALL'</code> or specific (<code>kyco1-3</code> must exist in <code>ARCONT</code>).</li> <li>Customer: <code>'ALL'</code> or specific (<code>kycs01-3</code> non-zero if <code>'SEL'</code>).</li> <li>Salesmen: <code>'ALL'</code> or range (<code>kytosl &gt; kyfmsl</code> if <code>'SEL'</code>).</li> <li>Outstanding: Include only non-zero balances if <code>kyouts = 'O'</code>.</li> <li>NOD: Process only <code>ADNOD = 'Y'</code> records if <code>kynod = 'Y'</code>, requiring <code>kyds = 'D'</code>.</li> <li>Report Options:</li> <li>Sequence: <code>'C'</code> (customer), <code>'N'</code> (name), or <code>'S'</code> (salesman; required if <code>kyslcy = 'Y'</code>).</li> <li>Type: <code>'D'</code> (detail) or <code>'S'</code> (summary).</li> <li>Copies: Non-zero <code>kycopy</code> (default: 1).</li> <li>Credit Limit: Print if <code>kyclyn = 'Y'</code>.</li> <li>Validations:</li> <li>Ensure valid date, company, customer, salesman, and parameter values.</li> <li>Report out-of-balance conditions between <code>ARDETL</code> and <code>ARCUST</code>.</li> <li>Flag customers exceeding credit limit (<code>ARCLMT &lt; ARTOTD</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Buckets:</li> <li>For each <code>ARDETL</code> record:<ul> <li>Calculate days from <code>ADDATE</code> to <code>kydate</code>.</li> <li>Assign <code>ADAMT</code> to bucket based on <code>ADAGE</code> (1=0-30, 2=31-60, 3=61-90, 4=91-120, 5=over 120).</li> <li>Adjust for partial payments (<code>ADPART</code>) and record type (<code>ADTYPE</code>).</li> </ul> </li> <li>Invoice (<code>I</code>): <code>DTA(I) += ADAMT - ADPART</code> (if <code>ADBAL \u2260 0</code> for <code>kyouts = 'O'</code>).</li> <li>Credit (<code>C</code>)/Adjustment (<code>J</code>): <code>DTA(I) += ADAMT</code>.</li> <li>Payment (<code>P</code>): <code>DTA(I) -= ADAMT</code>.</li> <li>Totals:</li> <li>Customer: Sum <code>DTA</code> into <code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>.</li> <li>Group/Company: Aggregate customer totals into <code>L4*</code> and <code>L5*</code> variables.</li> <li>Prepay: Adjust <code>L5CPRE</code> for prepaid invoices (<code>ADINV1 = 9</code>).</li> <li>Balance Check:</li> <li><code>DTA</code> vs. <code>ARCUST</code> totals; <code>ARTOTD</code> vs. sum of <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>.</li> <li>Increment <code>OUTBAL</code> for mismatches.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCUST: Customer master (balances, aging, credit limit).</li> <li>ARDETL: Invoice details (amount, date, type, NOD).</li> <li>ARCUSP: Credit comments, contact info.</li> <li>GSTABL: Terms, salesman, and class descriptions.</li> <li>ARCONT: Company data, aging limits.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#constraints","title":"Constraints","text":"<ul> <li>Skip deleted records (<code>ARDEL = 'D'</code>, <code>ADDEL = 'D'</code>, <code>TBDEL = 'D'</code>).</li> <li>Release locked <code>ARCONT</code> records after updates.</li> <li>Handle Y2K-compliant dates using century checks.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/","title":"AR890 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR890.ocl36.txt</code>, used on IBM midrange systems (like AS/400 or IBM i) to control the execution of programs and manage file operations. This OCL script is for a \"Customer Master Inquiry\" process, likely part of an accounts receivable (AR) or customer management system. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to automate tasks, call programs, and manage files on IBM midrange systems. The <code>AR890</code> OCL script performs the following steps:</p> <ol> <li>Delete Overrides for All Files (<code>DLTOVR FILE(*ALL)</code>):</li> <li> <p>This command removes any existing file overrides that may have been set in the current job. File overrides allow temporary redirection of file references (e.g., specifying a different library or file). Clearing overrides ensures a clean slate for file assignments in this job.</p> </li> <li> <p>Call Program <code>GSGENIEC</code> (<code>CALL PGM(GSGENIEC)</code>):</p> </li> <li> <p>The OCL script calls an external program named <code>GSGENIEC</code>. This program likely performs some initialization, validation, or setup tasks. The exact functionality depends on the program\u2019s implementation, but it could be related to environment setup or user validation.</p> </li> <li> <p>Conditional Return (<code>IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li> <p>This line checks a condition based on the value at position 506, column 3 in a local data area or screen buffer (likely a flag or status code). If the condition evaluates to <code>YES</code>, the OCL script terminates (<code>RETURN</code>). This acts as an early exit mechanism, possibly for user cancellation or an error state.</p> </li> <li> <p>Call Procedure <code>SCPROCP</code> (<code>SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li> <p>The script invokes a procedure named <code>SCPROCP</code> with parameters, where <code>?9?</code> is a placeholder (likely for a library or specific value passed at runtime). This procedure might handle additional setup or processing related to the customer inquiry.</p> </li> <li> <p>Run Program <code>GSY2K</code> (<code>GSY2K</code>):</p> </li> <li> <p>The script calls another program, <code>GSY2K</code>. This could be a utility program, possibly related to Year 2000 compliance or date handling, given the name. It may perform data validation or transformation before the main inquiry process.</p> </li> <li> <p>Set Local Data Areas:</p> </li> <li><code>LOCAL OFFSET-200,DATA-'        '</code>: Initializes a local data area at offset 200 with 8 blank spaces. This could be used to clear or set a specific field for subsequent processing.</li> <li> <p><code>LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local data area at offset 480 with the value <code>?9?</code> (likely a library or parameter placeholder). This might be used to pass runtime-specific data to programs or files.</p> </li> <li> <p>Load Program <code>AR890</code> (<code>LOAD AR890</code>):</p> </li> <li> <p>The main program <code>AR890</code> is loaded into memory for execution. This is the core program for the Customer Master Inquiry process, likely an RPG (Report Program Generator) program that handles the inquiry logic.</p> </li> <li> <p>File Definitions:</p> </li> <li>The script defines multiple files to be used by the <code>AR890</code> program (and possibly other called programs). Each file is opened in shared mode (<code>DISP-SHR</code>), meaning multiple jobs can access them concurrently. The files are:<ul> <li><code>ARCUST</code> (Customer Master File)</li> <li><code>ARCUSP</code> (Customer Supplemental File)</li> <li><code>ARCUPR</code> (Customer Pricing File)</li> <li><code>ARCONT</code> (Contact File)</li> <li><code>BICONT</code> (Commented out; likely a Billing Contact File)</li> <li><code>GSPROD</code> (Product File)</li> <li><code>GSTABL</code> (Table File, possibly for codes or configurations)</li> <li><code>GSCONT</code> (General Contact File)</li> <li><code>ARCUFM</code> (Customer File Maintenance, for program <code>AR915P</code>)</li> <li><code>ARCUFMX</code> (Customer File Maintenance Extension, for program <code>AR915P</code>)</li> <li><code>ARCUP3</code> (Customer Pricing File, for program <code>BI907</code>)</li> <li><code>SHIPTO</code> (Ship-To Address File)</li> <li><code>SHIPTHS</code> (Ship-To History File)</li> <li><code>ARCUPHS</code> (Customer Pricing History File)</li> </ul> </li> <li> <p>The <code>?9?</code> placeholder in the <code>LABEL</code> parameter likely represents a library or prefix defined at runtime, allowing flexibility in file access (e.g., different libraries for different environments).</p> </li> <li> <p>Execute the Program (<code>RUN</code>):</p> </li> <li> <p>The <code>RUN</code> command executes the loaded <code>AR890</code> program with the defined files. This program likely performs the customer inquiry, retrieving and displaying customer-related data from the specified files.</p> </li> <li> <p>Set Program Switch (<code>SWITCH 00000000</code>):</p> <ul> <li>This sets the program switch (a set of 8 binary flags) to all zeros (<code>00000000</code>). Switches are used to control program behavior or pass status information to the called program (<code>AR890</code> or others).</li> </ul> </li> <li> <p>Clear Local Data Area (<code>LOCAL BLANK-*ALL</code>):</p> <ul> <li>This clears all local data areas used by the job, resetting them to blanks. This ensures no residual data affects subsequent processes.</li> </ul> </li> <li> <p>End of Script (<code>TAG END</code>):</p> <ul> <li>Marks the end of the OCL script. Execution terminates here unless an earlier <code>RETURN</code> was triggered.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls or references the following external programs: 1. <code>GSGENIEC</code>: Called early in the script, likely for initialization or validation. 2. <code>GSY2K</code>: Called after the conditional check, possibly for date-related processing or data validation. 3. <code>AR890</code>: The main program loaded and executed for the Customer Master Inquiry. 4. <code>AR915P</code>: Referenced in comments, indicating it uses the <code>ARCUFM</code> and <code>ARCUFMX</code> files. This program is likely called by <code>AR890</code> for customer file maintenance. 5. <code>BI907</code>: Referenced in comments, indicating it uses the <code>ARCUP3</code>, <code>SHIPTO</code>, <code>SHIPTHS</code>, and <code>ARCUPHS</code> files. This program is likely called by <code>AR890</code> for billing or shipping-related inquiries.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script defines the following files (tables) used by the <code>AR890</code> program and potentially by the referenced programs (<code>AR915P</code> and <code>BI907</code>): 1. <code>ARCUST</code>: Customer Master File (core customer data). 2. <code>ARCUSP</code>: Customer Supplemental File (additional customer details). 3. <code>ARCUPR</code>: Customer Pricing File (pricing information for customers). 4. <code>ARCONT</code>: Contact File (customer contact information). 5. <code>BICONT</code>: Billing Contact File (commented out, not currently used). 6. <code>GSPROD</code>: Product File (product-related data). 7. <code>GSTABL</code>: Table File (likely for lookup tables or configuration codes). 8. <code>GSCONT</code>: General Contact File (possibly for non-customer contacts). 9. <code>ARCUFM</code>: Customer File Maintenance (used by <code>AR915P</code>). 10. <code>ARCUFMX</code>: Customer File Maintenance Extension (used by <code>AR915P</code>). 11. <code>ARCUP3</code>: Customer Pricing File (used by <code>BI907</code>). 12. <code>SHIPTO</code>: Ship-To Address File (customer shipping addresses). 13. <code>SHIPTHS</code>: Ship-To History File (historical shipping data). 14. <code>ARCUPHS</code>: Customer Pricing History File (historical pricing data).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#summary","title":"Summary","text":"<p>The <code>AR890.ocl36</code> script automates the execution of the <code>AR890</code> RPG program for a Customer Master Inquiry process. It: - Initializes the environment by clearing file overrides and calling setup programs (<code>GSGENIEC</code>, <code>GSY2K</code>). - Checks for a condition to exit early. - Defines multiple customer-related files for shared access. - Loads and runs the <code>AR890</code> program, which likely queries and displays customer data. - References additional programs (<code>AR915P</code>, <code>BI907</code>) for specific functions like file maintenance and billing/shipping inquiries.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>GSY2K</code>, <code>AR890</code>, <code>AR915P</code> (referenced), <code>BI907</code> (referenced). Files Used: <code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUPR</code>, <code>ARCONT</code>, <code>BICONT</code> (commented out), <code>GSPROD</code>, <code>GSTABL</code>, <code>GSCONT</code>, <code>ARCUFM</code>, <code>ARCUFMX</code>, <code>ARCUP3</code>, <code>SHIPTO</code>, <code>SHIPTHS</code>, <code>ARCUPHS</code>.</p> <p>If you need further details about the RPG program <code>AR890</code> or the referenced programs, please provide their source code or additional context, as their exact functionality depends on the RPG logic.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/","title":"AR890 RPGLE","text":"<p>The provided <code>AR890.rpgle.txt</code> is an RPGLE (Report Program Generator Language Enhanced) program used for a Customer Master Inquiry system on an IBM midrange platform (e.g., AS/400 or IBM i). It is called by the <code>AR890.ocl36</code> OCL script previously analyzed. The program facilitates inquiry into customer data, including account details, supplemental information, product codes, and contacts, with support for multiple display formats. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the source code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR890</code> RPGLE program is structured to handle interactive customer inquiries through a workstation display file (<code>ar890d</code>). It processes user inputs, retrieves data from various files, and displays results across five screen formats (<code>AR890S01</code> to <code>AR890S05</code>). The main steps are:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Initializes key fields (<code>cocust</code>, <code>ship</code>, <code>o$co</code>, <code>o$cust</code>, <code>o$ship</code>) to zeros, setting up the program for a fresh start.</li> <li> <p>Defines the local data area (<code>*lda</code>) to access runtime parameters (e.g., <code>ldacc</code> for company/customer number, <code>tstprd</code> for library/file group).</p> </li> <li> <p>Read Workstation Input:</p> </li> <li>Checks the control field <code>qsctl</code>. If blank, sets indicator <code>*in09</code> and <code>*in01</code> to <code>1</code>, indicating a new session, and sets <code>qsctl</code> to <code>'R'</code>.</li> <li> <p>Reads input from one of five display formats (<code>AR890S01</code> to <code>AR890S05</code>) based on indicators <code>*in81</code> to <code>*in85</code>. If an invalid read occurs (indicator <code>*in09</code>), it calls the <code>rollky</code> subroutine to handle roll keys.</p> </li> <li> <p>Handle Function Keys:</p> </li> <li>Clear Key (<code>*inka</code>): Clears all fields using the <code>clear</code> subroutine, resets indicators, and displays the initial screen (<code>AR890S01</code>).</li> <li>End of Job (<code>*inkg</code>): Sets the last record indicator (<code>*inlr</code>) to terminate the program and clears relevant indicators.</li> <li>Roll Keys (<code>*in18</code>, <code>*in19</code>): Handles roll forward (up) and roll backward (down) for navigating customer records using <code>rollfw</code> and <code>rollbw</code> subroutines.</li> <li> <p>Command Keys (<code>ke</code>, <code>kf</code>, <code>kh</code>, <code>02</code>, <code>03</code>, <code>04</code>): Trigger specific inquiries:</p> <ul> <li>F2 (<code>ke</code> and <code>02</code>): Customer history inquiry (<code>ARCUST</code> or <code>ARCUSP</code>).</li> <li>F3 (<code>ke</code> and <code>03</code>): Customer form type contacts inquiry (originally called <code>AR915P</code>, now commented out).</li> <li>F4 (<code>kf</code> and <code>04</code>): Customer product code history (originally called <code>GB730P</code>, now commented out; replaced by <code>BI907AC</code> for <code>ARCUPR</code> maintenance).</li> <li>F2 (<code>kh</code> and <code>02</code>): Supplemental file inquiry (<code>ARCUSP</code>).</li> </ul> </li> <li> <p>Screen Processing Subroutines:</p> </li> <li>s1 (Screen 1 - <code>AR890S01</code>):<ul> <li>Validates company number (<code>co</code>) against <code>ARCONT</code>. If invalid, displays error message (<code>msg1</code> = \"INVALID COMPANY NUMBER ENTERED\").</li> <li>Chains to <code>ARCUST</code> and <code>ARCUSP</code> using <code>arkey</code> (company/customer number). If not found, displays \"CUSTOMER NOT FOUND\".</li> <li>Checks for EFT (Electronic Funds Transfer) data and sets <code>*in60</code> if valid.</li> <li>Chains to <code>BICONT</code> to get invoicing style (<code>bcinst</code>) and sets the header (<code>s4head</code>) for screen 4.</li> <li>Calls <code>getcus</code> to retrieve customer data and <code>getsup</code> for supplemental data.</li> <li>Sets <code>*in82</code> to display screen 2 (<code>AR890S02</code>).</li> </ul> </li> <li>s2 (Screen 2 - <code>AR890S02</code>):<ul> <li>Sets <code>*in83</code> to display screen 3 (<code>AR890S03</code>).</li> </ul> </li> <li>s3 (Screen 3 - <code>AR890S03</code>):<ul> <li>Prepares to display customer ship-to products but skips direct <code>ARCUPR</code> processing, instead calling <code>BI907AC</code> (commented out in the code but referenced in comments).</li> <li>Sets <code>*in85</code> to display screen 5 (<code>AR890S05</code>).</li> </ul> </li> <li>s4 (Screen 4 - <code>AR890S04</code>):<ul> <li>Clears arrays for product codes, descriptions, and related fields.</li> <li>If array index <code>x</code> reaches 18, reads previous <code>GSPROD</code> record and fills arrays via <code>filara</code>.</li> <li>If invoicing style (<code>bcinst</code>) is '5', displays screen 5; otherwise, calls <code>s5</code>.</li> </ul> </li> <li> <p>s5 (Screen 5 - <code>AR890S05</code>):</p> <ul> <li>Clears fields using <code>clear</code> and sets <code>*in81</code> to return to screen 1.</li> </ul> </li> <li> <p>Data Retrieval Subroutines:</p> </li> <li>getcus:<ul> <li>Checks if the customer is deleted (<code>ardel = 'D'</code>). If so, displays \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</li> <li>Moves customer data from <code>ARCUST</code> (e.g., name, address, financials) to display fields.</li> <li>Retrieves descriptions for salesman (<code>sls#</code>), terms (<code>term</code>), group (<code>grup</code>), and class (<code>cucl</code>) from <code>GSTABL</code>.</li> </ul> </li> <li>getsup:<ul> <li>Checks if the supplemental record is deleted (<code>csdel = 'D'</code>). If so, displays the deletion message.</li> <li>Converts dates (<code>csstdt</code>, <code>csfsdt</code>, <code>csicdt</code>) to MMDDYY format.</li> <li>Moves supplemental data (e.g., tax codes, comments, freight info) to display fields.</li> </ul> </li> <li> <p>filara:</p> <ul> <li>Fills arrays for screen 4 (<code>prcd</code>, <code>prds</code>, <code>glcd</code>, <code>stno</code>, <code>pfrc</code>, <code>psfr</code>, <code>pcfr</code>) with product data from <code>GSPROD</code> and <code>ARCUPR</code>.</li> <li>Stops when 17 records are filled or end of file is reached (<code>*in70</code>).</li> </ul> </li> <li> <p>Roll Key Handling:</p> </li> <li>rollky: Detects roll forward (<code>status = 01122</code>) or backward (<code>status = 01123</code>) and clears function key indicators.</li> <li>rollfw: Moves to the next customer record in <code>ARCUST</code> and updates <code>arkey</code>.</li> <li> <p>rollbw: Moves to the previous customer record in <code>ARCUST</code> and updates <code>arkey</code>.</p> </li> <li> <p>Write to Display:</p> </li> <li> <p>Writes to the appropriate screen format (<code>AR890S01</code> to <code>AR890S05</code>) based on indicators <code>*in81</code> to <code>*in85</code>.</p> </li> <li> <p>Termination:</p> </li> <li>If <code>*inu8</code> and <code>*in81</code> are on, sets <code>*inlr</code> to terminate the program.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules based on the code and comments:</p> <ol> <li>Customer Validation:</li> <li>Validates company number (<code>co</code>) against <code>ARCONT</code>. If invalid, displays \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Checks if customer exists in <code>ARCUST</code> and <code>ARCUSP</code>. If not found, displays \"CUSTOMER NOT FOUND\".</li> <li> <p>Checks for deletion status (<code>ardel</code> or <code>csdel = 'D'</code>). If deleted, displays \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</p> </li> <li> <p>EFT Validation:</p> </li> <li> <p>If <code>areft = 'Y'</code> (EFT participant), verifies that <code>csarte</code> (ACH bank routing code) and <code>csabk#</code> (ACH bank account number) are non-blank/zero, setting <code>*in60</code> to indicate valid EFT data.</p> </li> <li> <p>Invoicing Style:</p> </li> <li> <p>Uses <code>bcinst</code> from <code>BICONT</code> to determine the header for screen 4 (<code>s4head</code>). If <code>bcinst = '5'</code>, uses alternate header (\"To Bill Gross Gallons Enter 'G'\"); otherwise, uses default (\"To Bill Net Gallons Enter 'N'\").</p> </li> <li> <p>Product Code Handling:</p> </li> <li>Originally processed <code>ARCUPR</code> directly for product codes but now calls <code>BI907AC</code> for maintenance (per revision <code>JB06</code>).</li> <li> <p>Limits array filling to 17 records for product codes (<code>prcd</code>), descriptions (<code>prds</code>), and related fields.</p> </li> <li> <p>Navigation:</p> </li> <li>Supports roll forward/backward to navigate customer records.</li> <li> <p>Command keys (F2, F3, F4) trigger specific inquiries, with F3 and F4 linked to external programs (<code>AR915P</code>, <code>BI907AC</code>) for detailed processing.</p> </li> <li> <p>Data Display:</p> </li> <li>Formats financial data (e.g., <code>artotd</code>, <code>arcurd</code>, <code>arfin$</code>) with specific decimal places.</li> <li>Converts dates (e.g., <code>arhidt</code>, <code>csstdt</code>) from YYMMDD to MMDDYY for display.</li> <li> <p>Retrieves descriptive text for salesman, terms, group, and class codes from <code>GSTABL</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays error messages (<code>msg1</code>, <code>msg2</code>) for invalid inputs or missing records.</li> <li>Sets <code>*in90</code> for error conditions, triggering error message display.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined in the file specifications (<code>F-specs</code>):</p> <ol> <li><code>ar890d</code> (Workstation File):</li> <li>Display file for interactive user interface, using formats <code>AR890S01</code> to <code>AR890S05</code>.</li> <li> <p>Handled by <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</p> </li> <li> <p><code>arcust</code> (Customer Master File):</p> </li> <li>Input file, 384 bytes, keyed by company/customer number (<code>keyloc(2)</code>).</li> <li> <p>Contains core customer data (e.g., name, address, financials, credit limit).</p> </li> <li> <p><code>arcusp</code> (Customer Supplemental File):</p> </li> <li>Input file, 1344 bytes, keyed by company/customer number.</li> <li> <p>Stores supplemental data (e.g., tax codes, comments, freight details).</p> </li> <li> <p><code>arcupr</code> (Customer Product Master):</p> </li> <li>Input file, 80 bytes, keyed by company/customer/ship-to/product.</li> <li> <p>Holds product-specific data (e.g., product code, freight codes).</p> </li> <li> <p><code>gsprod</code> (Product File):</p> </li> <li>Input file, 512 bytes, keyed by company/product code.</li> <li> <p>Contains product codes and descriptions.</p> </li> <li> <p><code>arcont</code> (Contact File):</p> </li> <li>Input file, 256 bytes, keyed by company number.</li> <li> <p>Stores ageing period limits (<code>aclmt1</code> to <code>aclmt4</code>).</p> </li> <li> <p><code>bicont</code> (Billing Contact File):</p> </li> <li>Input file, 256 bytes, keyed by company number.</li> <li> <p>Contains invoicing style (<code>bcinst</code>).</p> </li> <li> <p><code>gstabl</code> (Table File):</p> </li> <li>Input file, 256 bytes, keyed by table type/code.</li> <li> <p>Stores descriptions for salesman, terms, group, and class codes.</p> </li> <li> <p><code>gscont</code> (General Contact File):</p> </li> <li>Input file, externally defined, keyed (assumed by company number).</li> <li>Provides default company number (<code>gxcono</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program references the following external programs, though some calls are commented out, indicating they may be invoked conditionally or replaced:</p> <ol> <li><code>GB730P</code> (Commented Out):</li> <li>Previously called for inquiries on <code>ARCUST</code>, <code>ARCUSP</code>, and <code>ARCUPR</code>.</li> <li> <p>Parameters included <code>parmst</code> (data structure with file, company, customer, ship-to).</p> </li> <li> <p><code>AR915P</code> (Commented Out):</p> </li> <li>Previously called for customer form type contacts inquiry (<code>ARCUFM</code>, <code>ARCUFMX</code>).</li> <li> <p>Parameters included company (<code>a$co</code>), customer (<code>a$cust</code>), mode (<code>'INQ'</code>), and file group (<code>a$fgrp</code>).</p> </li> <li> <p><code>BI907AC</code> (Commented Out but Referenced):</p> </li> <li>Called to maintain <code>ARCUPR</code> records instead of direct processing in <code>s3</code> (per revision <code>JB06</code>).</li> <li>Parameters included company (<code>@cpco</code>), customer (<code>@cpcus</code>), ship-to (<code>@cpshp</code>), mode (<code>'INQ'</code>), and file group (<code>@cpfgr</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR890</code> RPGLE program is an interactive customer inquiry application that retrieves and displays customer data across multiple screens. It: - Validates company and customer data, checks deletion status, and handles EFT data. - Supports navigation through roll keys and command keys for specific inquiries. - Retrieves data from multiple files (<code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUPR</code>, etc.) and formats it for display. - Calls external programs (<code>BI907AC</code>, potentially <code>AR915P</code>, <code>GB730P</code>) for specialized inquiries.</p> <p>Tables Used: <code>ar890d</code>, <code>arcust</code>, <code>arcusp</code>, <code>arcupr</code>, <code>gsprod</code>, <code>arcont</code>, <code>bicont</code>, <code>gstabl</code>, <code>gscont</code>. External Programs Called: <code>GB730P</code> (commented out), <code>AR915P</code> (commented out), <code>BI907AC</code> (commented out but referenced).</p> <p>If you need further analysis of the screen formats, specific field mappings, or the logic of <code>BI907AC</code> or other called programs, please provide additional source code or context.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/","title":"Summary AR890 OCL","text":"<p>The <code>AR890.ocl36</code> OCL script and <code>AR890.rpgle</code> RPGLE program together implement a Customer Master Inquiry system on an IBM midrange platform. Below, I\u2019ll identify the use cases implemented by this program and provide a Function Requirement Document for the primary use case, reimagined as a non-interactive function that processes inputs to produce customer inquiry data.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#list-of-use-cases","title":"List of Use Cases","text":"<p>Based on the OCL and RPGLE code, the program implements the following use cases, all centered around retrieving and presenting customer-related data for inquiry purposes:</p> <ol> <li>Customer Master Inquiry:</li> <li>Description: Allows users to retrieve and view comprehensive customer information, including basic details (name, address), financial data (balances, credit limits), supplemental data (tax codes, comments), product codes, and contact information. Users can navigate through customer records and access specific inquiries (e.g., customer history, product codes, contacts) using command keys.</li> <li>Details: The program supports multiple display formats (<code>AR890S01</code> to <code>AR890S05</code>) for different data views, validates inputs, and integrates with external programs (<code>AR915P</code>, <code>BI907AC</code>) for specific inquiries. It handles navigation (roll forward/backward) and error conditions (e.g., invalid company, deleted customer).</li> </ol> <p>No additional distinct use cases are evident, as the program\u2019s core functionality revolves around this single inquiry process, with variations in data displayed based on user input (e.g., command keys F2, F3, F4).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#customer-master-inquiry-function-requirements","title":"Customer Master Inquiry Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#overview","title":"Overview","text":"<p>The Customer Master Inquiry Function retrieves comprehensive customer information based on provided company and customer numbers, returning data from multiple related files without requiring interactive screen input. The function supports business needs for retrieving customer details, financials, supplemental data, product codes, and contact information for reporting, auditing, or integration purposes.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>): 2-digit numeric (e.g., 01).</li> <li>Customer Number (<code>cust</code>): 6-digit numeric (e.g., 000123).</li> <li>Ship-To Number (<code>ship</code>): 3-digit numeric (optional, default 000 for product inquiries).</li> <li>Inquiry Type (<code>inquiryType</code>): String indicating the type of inquiry:</li> <li>\"CUST\": Customer history (ARCUST).</li> <li>\"SUPP\": Supplemental data (ARCUSP).</li> <li>\"PROD\": Product code history (ARCUPR).</li> <li>\"CONT\": Form type contacts (ARCUFM, via AR915P).</li> <li>File Group (<code>fileGroup</code>): 1-character library prefix (e.g., 'X').</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#outputs","title":"Outputs","text":"<p>A structured data object containing: - Customer Details: Name, address, zip, phone, salesman, terms, credit limit, etc. - Financial Data: Total due, current due, aged balances, sales MTD/YTD, etc. - Supplemental Data: Tax codes, comments, freight details, ACH information, etc. - Product Data: Up to 17 product codes, descriptions, freight codes, etc. - Contact Data: Ageing periods, invoicing style. - Error Messages: Descriptive messages for invalid inputs or missing records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>co</code> exists in <code>ARCONT</code>. If not, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Chain <code>co</code> + <code>cust</code> to <code>ARCUST</code> and <code>ARCUSP</code>. If not found, return error: \"CUSTOMER NOT FOUND\".</li> <li> <p>Check deletion status (<code>ardel</code> or <code>csdel = 'D'</code>). If deleted, return error: \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</p> </li> <li> <p>Retrieve Customer Data (if <code>inquiryType = \"CUST\"</code> or others):</p> </li> <li>From <code>ARCUST</code>, retrieve:<ul> <li>Name (<code>arname</code>), address (<code>aradr1-4</code>), zip (<code>arzip9</code>), phone (<code>ararea</code>, <code>artele</code>).</li> <li>Financials: Total due (<code>artotd</code>), current due (<code>arcurd</code>), aged balances (<code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code>), sales MTD/YTD (<code>armtd$</code>, <code>arytd$</code>), credit limit (<code>arclmt</code>), etc.</li> <li>Other: Salesman (<code>arsls#</code>), terms (<code>arterm</code>), group (<code>argrup</code>), class (<code>arcucl</code>), EFT status (<code>areft</code>), federal EIN (<code>arfein</code>), etc.</li> </ul> </li> <li> <p>Lookup descriptions for salesman, terms, group, and class in <code>GSTABL</code> using <code>tbdesc</code>.</p> </li> <li> <p>Retrieve Supplemental Data (if <code>inquiryType = \"SUPP\"</code> or others):</p> </li> <li>From <code>ARCUSP</code>, retrieve:<ul> <li>Tax codes (<code>tc</code>), tax exemptions (<code>te</code>), start date (<code>csstdt</code>), credit comments (<code>cscmt1-3</code>), contact name (<code>cscnct</code>).</li> <li>Freight details: Freight code (<code>csfrcd</code>), separate freight (<code>cssfrt</code>), freight bill name/address (<code>csfrnm</code>, <code>csfra1-3</code>).</li> <li>Order/invoice marks (<code>csomk1-4</code>, <code>csimk1-2</code>), dispatch info (<code>csdsp1-4</code>), blanket PO (<code>csbkpo</code>), ACH data (<code>csarte</code>, <code>csabk#</code>).</li> </ul> </li> <li> <p>Convert dates (<code>csstdt</code>, <code>csfsdt</code>, <code>csicdt</code>) from YYMMDD to MMDDYY for output.</p> </li> <li> <p>Retrieve Product Data (if <code>inquiryType = \"PROD\"</code>):</p> </li> <li>Call <code>BI907AC</code> with <code>co</code>, <code>cust</code>, <code>ship</code>, <code>inquiryType = \"INQ\"</code>, and <code>fileGroup</code> to retrieve product data from <code>ARCUPR</code>.</li> <li>For each product (up to 17):<ul> <li>From <code>GSPROD</code>, retrieve product code (<code>tpprod</code>), description (<code>tpdes1</code>).</li> <li>From <code>ARCUPR</code>, retrieve gallons to bill (<code>cpglcd</code>), customer stock number (<code>cpcstk</code>), freight code (<code>cpfrcd</code>), separate freight (<code>cpsfrt</code>), calculated freight (<code>cpcafr</code>), container type (<code>cpcnty</code>).</li> </ul> </li> <li> <p>Return error if no products found for <code>co</code> + <code>cust</code> + <code>ship</code>.</p> </li> <li> <p>Retrieve Contact Data (if <code>inquiryType = \"CONT\"</code>):</p> </li> <li>Call <code>AR915P</code> with <code>co</code>, <code>cust</code>, <code>mode = \"INQ\"</code>, and <code>fileGroup</code> to retrieve contact data from <code>ARCUFM</code>/<code>ARCUFMX</code>.</li> <li>From <code>ARCONT</code>, retrieve ageing periods (<code>aclmt1-4</code>).</li> <li> <p>From <code>BICONT</code>, retrieve invoicing style (<code>bcinst</code>).</p> </li> <li> <p>Handle EFT Validation:</p> </li> <li> <p>If <code>areft = 'Y'</code>, validate <code>csarte</code> (ACH routing code) and <code>csabk#</code> (ACH account number) are non-zero/non-blank. Include EFT validity flag in output.</p> </li> <li> <p>Return Results:</p> </li> <li>Combine data from all relevant files into a structured output.</li> <li>Include any error messages from validation steps.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Input Validation:</li> <li>Company number must exist in <code>ARCONT</code>.</li> <li>Customer must exist in <code>ARCUST</code> and <code>ARCUSP</code> and not be marked as deleted.</li> <li>Product inquiry requires valid <code>ship</code> (defaults to 000).</li> <li>Data Access:</li> <li>Only retrieve data for the specified <code>co</code> + <code>cust</code> combination.</li> <li>Limit product data to 17 records to prevent overflow.</li> <li>Use <code>fileGroup</code> to determine library prefix for file access.</li> <li>EFT Processing:</li> <li>EFT is valid only if <code>areft = 'Y'</code> and both <code>csarte</code> and <code>csabk#</code> are populated.</li> <li>Invoicing Style:</li> <li>If <code>bcinst = '5'</code> in <code>BICONT</code>, use header \"To Bill Gross Gallons Enter 'G'\"; otherwise, \"To Bill Net Gallons Enter 'N'\".</li> <li>Date Conversion:</li> <li>Convert YYMMDD dates (e.g., <code>arhidt</code>, <code>csstdt</code>) to MMDDYY using multiplication by 100.0001 (e.g., <code>arhidt * 100.0001</code>).</li> <li>Financial Calculations:</li> <li>Aged balances (<code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code>) are pre-calculated in <code>ARCUST</code> and returned as-is.</li> <li>Ageing periods (<code>aclmt1-4</code>) from <code>ARCONT</code> are formatted for display (e.g., <code>1-10</code>, <code>11-20</code>, <code>21-30</code>, <code>Over 30</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for:</li> <li>Invalid company number.</li> <li>Customer not found.</li> <li>Deleted customer.</li> <li>End of file reached (for product data).</li> <li>Ensure all output fields are initialized to blanks/zeros if data is unavailable.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>ARCUSP</code>: Supplemental customer data.</li> <li><code>ARCUPR</code>: Customer product data.</li> <li><code>GSPROD</code>: Product codes and descriptions.</li> <li><code>ARCONT</code>: Ageing periods.</li> <li><code>BICONT</code>: Invoicing style.</li> <li><code>GSTABL</code>: Descriptions for salesman, terms, group, class.</li> <li><code>GSCONT</code>: Default company number.</li> <li>External Programs:</li> <li><code>BI907AC</code>: Retrieves <code>ARCUPR</code> data for product inquiries.</li> <li><code>AR915P</code>: Retrieves <code>ARCUFM</code>/<code>ARCUFMX</code> data for contact inquiries.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#summary","title":"Summary","text":"<p>The <code>AR890</code> program implements a single primary use case: Customer Master Inquiry, with variations for customer history, supplemental data, product codes, and contacts. The function requirement document reimagines this as a non-interactive function that takes company, customer, ship-to, inquiry type, and file group as inputs, retrieving and validating data from multiple files, applying business rules, and returning structured output with error handling. The document focuses on business requirements (validation, data retrieval, EFT checks) and includes calculations (e.g., date conversions) as needed.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/","title":"AR900 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script, typically used on IBM midrange systems like the IBM System/36 or AS/400 (now IBM i). This script, <code>AR900.ocl36.txt</code>, appears to control a Customer Master Add/Update process, likely written in RPG (Report Program Generator) or a related language. Below, I will explain the process steps of the OCL program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL scripts are used to define the environment, specify files, and control the execution of programs on IBM midrange systems. The steps in this script can be broken down based on the commands and directives present:</p> <ol> <li>Environment Setup and Parameters:</li> <li><code>SCPROCP ,,,,,,,,?9?</code>: This likely specifies the procedure name or parameters for the job, with <code>?9?</code> being a placeholder for a parameter passed at runtime (possibly a library or dataset identifier).</li> <li><code>GSY2K</code>: This might reference a system or configuration setting, possibly related to Y2K compliance or a specific system module.</li> <li><code>LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local variable or parameter at offset 480 with the value of the <code>?9?</code> placeholder.</li> <li><code>LOCAL OFFSET-410,DATA-'?WS?'</code>: Sets another local variable at offset 410 with the value <code>?WS?</code> (possibly a workstation ID or user-specific data).</li> <li> <p><code>LOCAL OFFSET-400,DATA-'?USER?'</code>: Sets a local variable at offset 400 with the value <code>?USER?</code> (likely the user ID running the job).</p> </li> <li> <p>Conditional Logic and Index Building:</p> </li> <li> <p><code>IFF ACTIVE-AR300 IFF DATAF1-?9?CRDETX BLDINDEX ?9?CRDETX,2,8,+ ?9?ARDETL,,DUPKEY,,71,8,10,7</code>:</p> <ul> <li>This is a conditional statement (<code>IFF</code>) that checks if the program <code>AR300</code> is active and if the <code>DATAF1</code> field contains the value <code>?9?CRDETX</code>.</li> <li>If true, it executes <code>BLDINDEX</code> to build an index for the file <code>?9?CRDETX</code>:</li> <li>Key starts at position 2, length 8, in ascending order (<code>+</code>).</li> <li>Another index is built for <code>?9?ARDETL</code> with <code>DUPKEY</code> (allowing duplicate keys), starting at position 71, with key lengths of 8, 10, and 7.</li> <li>This step ensures that the necessary file indexes are created for efficient data access.</li> </ul> </li> <li> <p>Program Loading:</p> </li> <li> <p><code>LOAD AR900</code>: Loads the main RPG program <code>AR900</code>, which handles the core customer master add/update logic.</p> </li> <li> <p>File Definitions:</p> </li> <li> <p>The script defines multiple files with the <code>FILE NAME</code> directive, specifying their labels (e.g., <code>?9?ARCUST</code>) and disposition (<code>DISP-SHR</code> for shared access). These files are used by the <code>AR900</code> program and other called programs for reading or updating customer-related data. The files are listed in the \"Tables Used\" section below.</p> </li> <li> <p>Execution of the Main Program:</p> </li> <li> <p><code>RUN</code>: Executes the loaded <code>AR900</code> program, which likely performs the customer master add/update operations using the defined files.</p> </li> <li> <p>Support for Called Programs:</p> </li> <li> <p>The script specifies additional files for programs called by <code>AR900</code>, including <code>AR9009</code>, <code>AR9006</code>, <code>AR915P</code>, and <code>BI907</code>. These programs likely handle specific sub-tasks, such as additional file processing, validation, or reporting.</p> </li> <li> <p>Additional Procedure:</p> </li> <li><code>ARFX39 ,,,,,,,,?9?</code>: This line might initiate another procedure or job step, possibly a cleanup or follow-up process, with <code>?9?</code> as a parameter.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script references several external programs that are called by the main <code>AR900</code> program or as part of the process:</p> <ol> <li>AR900: The main RPG program responsible for the customer master add/update logic.</li> <li>AR9009: A supporting program, likely handling specific customer data processing or validation.</li> <li>AR9006: Another supporting program, possibly related to updating or processing specific customer records.</li> <li>AR915P: A program that might handle additional customer file maintenance or reporting.</li> <li>BI907: Likely a program related to billing or shipping (based on the <code>SHIPTO</code> file reference).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script lists several files (referred to as \"tables\" in some contexts) used by the programs. These files are defined with the <code>FILE NAME</code> directive and are accessed in shared mode (<code>DISP-SHR</code>). The <code>?9?</code> prefix suggests a library or dataset name provided at runtime. Below is the list of files:</p> <ol> <li>ARCUST (<code>?9?ARCUST</code>): Primary customer master file.</li> <li>ARCUSP (<code>?9?ARCUSP</code>): Possibly a secondary customer file or a suspense file for pending updates.</li> <li>ARCUPR (<code>?9?ARCUPR</code>): Customer pricing or profile data, also referenced as <code>PFARCUPR</code> and <code>PTARCUPR</code> for specific programs.</li> <li>CRDETX (<code>?9?CRDETX</code>): Credit details or transaction file, used for indexing.</li> <li>ARCONT (<code>?9?ARCONT</code>): Customer contact information.</li> <li>BICONT (<code>?9?BICONT</code>): Billing contact information.</li> <li>GSPROD (<code>?9?GSPROD</code>): General system product file, possibly for product-related customer data.</li> <li>GSTABL (<code>?9?GSTABL</code>): General system table, likely containing configuration or reference data.</li> <li>BISLTX (<code>?9?BISLTX</code>): Billing or sales transaction file.</li> <li>ARCLGR (<code>?9?ARCLGR</code>): Customer ledger or accounting file.</li> <li>ARCUST2 (<code>?9?ARCUST</code>): Likely an alias or secondary reference to the customer master file.</li> <li>ARCUSHS (<code>?9?ARCUSHS</code>): Customer history or summary file.</li> <li>ARCUSPH (<code>?9?ARCUSPH</code>): Customer profile history.</li> <li>ARCUPHS (<code>?9?ARCUPHS</code>): Customer pricing history.</li> <li>SA5FIXD (<code>?9?SA5FIXD</code>): Fixed data file for program <code>AR9009</code>, possibly for sales or customer data.</li> <li>SA5FIXM (<code>?9?SA5FIXM</code>): Master fixed data file for <code>AR9009</code>.</li> <li>SA5BCXD (<code>?9?SA5BCXD</code>): Billing or customer detail file for <code>AR9009</code>.</li> <li>SA5BCXM (<code>?9?SA5BCXM</code>): Master billing/customer file for <code>AR9009</code>.</li> <li>SA5DBXD (<code>?9?SA5DBXD</code>): Debit or detail file for <code>AR9009</code>.</li> <li>SA5DBXM (<code>?9?SA5DBXM</code>): Master debit file for <code>AR9009</code>.</li> <li>SA5COXD (<code>?9?SA5COXD</code>): Customer order detail file for <code>AR9009</code>.</li> <li>SA5COXM (<code>?9?SA5COXM</code>): Master customer order file for <code>AR9009</code>.</li> <li>ARCUFM (<code>?9?ARCUFM</code>): Customer file maintenance for <code>AR915P</code>.</li> <li>ARCUFMX (<code>?9?ARCUFMX</code>): Extended customer file maintenance for <code>AR915P</code>.</li> <li>SHIPTO (<code>?9?SHIPTO</code>): Shipping address file for <code>BI907</code>.</li> <li>ARCUP3 (<code>?9?ARCUP3</code>): Additional customer pricing or profile file for <code>BI907</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL script sets up the environment, defines parameters, conditionally builds file indexes, loads the <code>AR900</code> program, specifies files, and executes the program. It also supports additional programs for specific tasks.</li> <li>External Programs Called: <code>AR900</code>, <code>AR9009</code>, <code>AR9006</code>, <code>AR915P</code>, <code>BI907</code>.</li> <li>Tables Used: 26 files, including customer master (<code>ARCUST</code>), credit details (<code>CRDETX</code>), pricing (<code>ARCUPR</code>), contact (<code>ARCONT</code>), and various sales/customer files for supporting programs.</li> </ul> <p>This OCL script orchestrates a complex customer master maintenance process, ensuring proper file access and program execution for updating customer records on an IBM midrange system. If you need further details about specific files or programs, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/","title":"AR900 RPGLE","text":"<p>The provided document is an RPGLE (Report Program Generator Language Enhanced) program named <code>AR900.rpgle.txt</code>, which is called from the OCL script <code>AR900.ocl36.txt</code> for Customer Master Add/Update functionality on an IBM midrange system (likely IBM System/36 or AS/400, now IBM i). Below, I will explain the process steps, business rules, tables used, and external programs called by this RPGLE program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR900</code> RPGLE program manages the maintenance (add, update, delete, reactivate) of customer master records through a workstation display file (<code>AR900D</code>). It interacts with multiple files and performs validations, updates, and history tracking. The process steps are structured around a main loop that displays screen formats and processes user inputs.</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Purpose: Sets up initial variables and constants for the program.</li> <li> <p>Steps:</p> <ul> <li>Initializes zero-filled variables (<code>ZERO5</code>, <code>ZERO6</code>, etc.) for calculations and comparisons.</li> <li>Sets key table lookup values (<code>SLKEY</code> for salesman, <code>TRMKEY</code> for terms, <code>CUCLKY</code> for customer class, <code>GRUPKY</code> for group code).</li> <li>Captures the system date (<code>UDATE</code>) and time (<code>SYSTIM</code>) for history file updates, formatting the date as <code>SYSCYM</code> (e.g., <code>20YYMMDD</code>).</li> <li>Sets default values for company (<code>CO</code>) and customer number (<code>CUSN</code>) to zero and enables the initial screen format (<code>FMT01</code>) by setting indicator <code>81</code>.</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Continuously displays and processes screen formats (<code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>FMT05</code>) until the user exits.</li> <li> <p>Steps:</p> <ul> <li>Enters a <code>DO</code> loop controlled by <code>fmtagn</code> (set to <code>*ON</code> initially).</li> <li>Clears error indicators (<code>01</code>, <code>02</code>, <code>03</code>, <code>05</code>, <code>09</code>) and message fields (<code>MSG1</code>, <code>MSG2</code>).</li> <li>Selects and displays the appropriate screen format based on indicators:</li> <li><code>FMT01</code> (indicator <code>81</code>): Initial customer selection screen.</li> <li><code>FMT02</code> (indicator <code>82</code>): Customer detail entry/update screen.</li> <li><code>FMT03</code> (indicator <code>83</code>): Supplemental data screen.</li> <li><code>FMT05</code> (indicator <code>85</code>): Additional maintenance screen.</li> <li>Processes user input based on the selected screen and command keys (e.g., <code>KA</code>, <code>KD</code>, <code>KG</code>, <code>KJ</code>, <code>KK</code>).</li> </ul> </li> <li> <p>Command Key Processing:</p> </li> <li>KA (Rekey, No Add/Update):<ul> <li>Clears input fields using the <code>CLEAR</code> subroutine.</li> <li>Sets appropriate screen indicators (<code>81</code> for update mode, <code>82</code> for entry mode).</li> <li>Resets error and format indicators.</li> </ul> </li> <li>KD (Delete/Reactivate):<ul> <li>If update mode (<code>07</code>) is active, checks if the customer can be deleted (subroutine <code>DELETE</code>) or reactivated (subroutine <code>REACTI</code>).</li> <li>Prevents deletion if the customer has outstanding invoices (non-zero balance).</li> </ul> </li> <li>KG (End of Job):<ul> <li>Sets the Last Record indicator (<code>LR</code>) to exit the program.</li> <li>Clears format indicators and turns off <code>fmtagn</code> to exit the main loop.</li> </ul> </li> <li>KJ (Entry Mode Selected):<ul> <li>Clears fields, sets entry mode (<code>08</code>), and displays <code>FMT02</code> for new customer entry.</li> </ul> </li> <li> <p>KK (Update Mode Selected):</p> <ul> <li>Clears fields, sets update mode (<code>07</code>), and displays <code>FMT02</code> for editing an existing customer.</li> </ul> </li> <li> <p>Screen Processing Subroutines:</p> </li> <li>S1 (Customer Selection, <code>FMT01</code>):<ul> <li>Validates the company number (<code>CO</code>) against <code>ARCONT</code>. If invalid, displays an error (<code>MSG(1)</code>).</li> <li>Retrieves customer data from <code>ARCUST</code> and <code>ARCUSP</code> using the key <code>ARKEY</code> (company + customer number).</li> <li>Checks for EFT (Electronic Funds Transfer) data if <code>AREFT = 'Y'</code>, ensuring bank routing (<code>CSARTE</code>) and account (<code>CSABK#</code>) are not blank.</li> <li>Retrieves billing instructions from <code>BICONT</code> and sets the screen header (<code>S4HEAD</code>) based on <code>BCINST</code>.</li> <li>Calls <code>GETCUS</code> and <code>GETSUP</code> to populate screen fields with customer and supplemental data.</li> <li>Transitions to <code>FMT02</code> (indicator <code>82</code>).</li> </ul> </li> <li>S2 (Customer Detail Entry/Update, <code>FMT02</code>):<ul> <li>Validates company and customer numbers for new entries (<code>08</code> mode).</li> <li>Ensures customer number is non-zero and not already in use (for new entries).</li> <li>Calls <code>SC2EDT</code> to validate input fields (e.g., sort name, salesman, terms, state, statement code).</li> <li>Transitions to <code>FMT03</code> (indicator <code>83</code>) if validations pass.</li> </ul> </li> <li>S3 (Supplemental Data, <code>FMT03</code>):<ul> <li>Validates and adjusts date fields (<code>STDATE</code>, <code>FSDATE</code>, <code>ICDATE</code>) for century (Y2K compliance).</li> <li>Calls <code>@DTEDT</code> to validate dates (month, day, leap year checks).</li> <li>Calls <code>BI907AC</code> to maintain <code>ARCUPR</code> (customer pricing) data.</li> <li>Transitions to <code>FMT05</code> (indicator <code>85</code>).</li> </ul> </li> <li> <p>S5 (Add/Update Customer, <code>FMT05</code>):</p> <ul> <li>Updates or adds records to <code>ARCUST</code> and <code>ARCUSP</code> based on mode (<code>07</code> for update, <code>08</code> for add).</li> <li>Updates grouped customer records in <code>ARCLGR</code> to reflect credit problem status (<code>ARCLPB</code>).</li> <li>Writes history records to <code>ARCUSHS</code> and <code>ARCUSPH</code>.</li> <li>Clears fields and returns to <code>FMT01</code>.</li> </ul> </li> <li> <p>Data Validation (<code>SC2EDT</code> Subroutine):</p> </li> <li>Validates key fields:<ul> <li>Sort Name (<code>LSTN</code>): Must not be blank.</li> <li>Salesman Number (<code>SLS#</code>): Must exist in <code>GSTABL</code>.</li> <li>Terms Code (<code>TERM</code>): Must exist in <code>GSTABL</code>.</li> <li>State (<code>STAT</code>): Must not be blank.</li> <li>Statement Code (<code>STMT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Separate Freight Code (<code>SFRT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Finance Charge Code (<code>FINC</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Freight Code (<code>FRCD</code>): Must be <code>C</code> (collect), <code>P</code> (prepaid), <code>A</code> (prepaid &amp; add), or blank.</li> <li>EFT Participant (<code>EFT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>EDI Participant (<code>EDI</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Credit Problem Code (<code>CLPB</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Wire Transfer Code (<code>WIRE</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Customer Class (<code>CCLASS</code>): Must exist in <code>GSTABL</code> under table type <code>ARCUCL</code>.</li> <li>Federal EIN (<code>FEIN</code>): Must be non-zero (required field, per <code>JB06</code>).</li> <li>Duplicate Order Match Type (<code>DUPC</code>): Must be <code>A</code> (match on customer, shipto, product), <code>B</code> (match on customer, shipto, product, PO#), or blank.</li> <li>Product Move (<code>PRMV</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> </ul> </li> <li> <p>Sets error indicators and messages if validations fail, preventing progression to the next screen.</p> </li> <li> <p>Delete Processing (<code>DELETE</code> Subroutine):</p> </li> <li>Checks if the customer has outstanding invoices by summing aging fields (<code>AGE</code> array).</li> <li>If the balance is non-zero, displays an error (<code>MSG(9)</code>, <code>MSG(10)</code>) and prevents deletion.</li> <li>Marks the customer as inactive (<code>ARDEL = 'I'</code>, <code>CSDEL = 'I'</code>) in <code>ARCUST</code> and <code>ARCUSP</code> instead of deleting (per revision note).</li> <li> <p>Updates history files (<code>ARCUSHS</code>, <code>ARCUSPH</code>) and displays a success message (<code>MSG(4)</code>).</p> </li> <li> <p>Reactivate Processing (<code>REACTI</code> Subroutine):</p> </li> <li>Changes the delete flag from <code>I</code> (inactive) to <code>A</code> (active) in <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li> <p>Updates history files and displays a success message (<code>MSG(12)</code>).</p> </li> <li> <p>Date Validation (<code>@DTEDT</code> Subroutine):</p> </li> <li>Validates dates (<code>MMDDYY</code>) for month, day, and leap year correctness.</li> <li>Handles Y2K century adjustments and checks for valid months (1-12) and days (1-31, or 1-28/29 for February).</li> <li> <p>Sets error indicator <code>79</code> if the date is invalid.</p> </li> <li> <p>History File Updates:</p> </li> <li>Writes records to <code>ARCUSHS</code> (customer history) and <code>ARCUSPH</code> (supplemental history) during add (<code>89</code> indicator), update (<code>89N91</code>), or delete/reactivate (<code>88</code>) operations.</li> <li> <p>Includes system date (<code>SYSCYM</code>), time (<code>SYSTIM</code>), user ID (<code>USERID</code>), and workstation ID (<code>WSID</code>) in history records.</p> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files, sets the Last Record indicator (<code>LR</code>), and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure data integrity and compliance with customer master maintenance requirements:</p> <ol> <li>Customer Number Validation:</li> <li>Customer number (<code>CUSN</code>) cannot be zero for new entries (<code>MSG(19)</code>).</li> <li>Must not already exist in <code>ARCUST</code> or <code>ARCUSP</code> for new entries (<code>MSG(7)</code>, <code>MSG(26)</code>).</li> <li> <p>Must exist in both <code>ARCUST</code> and <code>ARCUSP</code> for updates.</p> </li> <li> <p>Company Number Validation:</p> </li> <li> <p>Company number (<code>CO</code>) must exist in <code>ARCONT</code> (<code>MSG(1)</code>).</p> </li> <li> <p>Field Validations:</p> </li> <li>Mandatory fields like sort name (<code>LSTN</code>), salesman number (<code>SLS#</code>), terms code (<code>TERM</code>), state (<code>STAT</code>), and Federal EIN (<code>FEIN</code>) must be valid.</li> <li>Codes like <code>STMT</code>, <code>FINC</code>, <code>SFRT</code>, <code>FRCD</code>, <code>EFT</code>, <code>EDI</code>, <code>CLPB</code>, <code>WIRE</code>, and <code>PRMV</code> must match specific values (<code>Y</code>, <code>N</code>, or blank).</li> <li>Freight code (<code>FRCD</code>) must be <code>C</code>, <code>P</code>, <code>A</code>, or blank, with specific rules for separate freight (<code>SFRT</code>) based on freight type.</li> <li> <p>Customer class (<code>CCLASS</code>) and other codes must exist in <code>GSTABL</code> under specific table types (e.g., <code>ARCUCL</code>, <code>SLSMAN</code>, <code>ARTERM</code>).</p> </li> <li> <p>Deletion Rules:</p> </li> <li>Customers with outstanding invoices (non-zero balance in <code>AGE</code>) cannot be deleted (<code>MSG(9)</code>, <code>MSG(10)</code>).</li> <li> <p>Deletion marks records as inactive (<code>ARDEL = 'I'</code>, <code>CSDEL = 'I'</code>) rather than physically deleting them.</p> </li> <li> <p>EFT Validation:</p> </li> <li> <p>If <code>AREFT = 'Y'</code>, bank routing (<code>CSARTE</code>) and account (<code>CSABK#</code>) must be provided.</p> </li> <li> <p>Date Handling:</p> </li> <li>Dates (<code>STDATE</code>, <code>FSDATE</code>, <code>ICDATE</code>) are validated for correctness, including leap year checks.</li> <li> <p>Century is added for Y2K compliance if not provided, using <code>Y2KCEN</code> (19 or 20) based on the year compared to <code>Y2KCMP</code> (80).</p> </li> <li> <p>Group Account Updates:</p> </li> <li> <p>If a customer is part of a group (<code>ARCLGR</code>), the credit problem flag (<code>ARCLPB</code>) is propagated to all grouped accounts.</p> </li> <li> <p>Freight and Billing:</p> </li> <li>Supports special freight scenarios:<ul> <li><code>CNY</code> (calculate freight for freight collect, <code>JB09</code>): For non-Bradford locations (e.g., Anchor).</li> <li><code>CYY</code> (freight collect with service fee, <code>JB10</code>): ARG arranges shipping, customer is billed by the carrier, and a $100 service fee is charged.</li> </ul> </li> <li> <p>Wire transfer instructions are printed on invoices/statements if <code>ARWIRE = 'Y'</code>.</p> </li> <li> <p>History Tracking:</p> </li> <li>All add, update, and delete/reactivate operations are logged to <code>ARCUSHS</code> and <code>ARCUSPH</code> with timestamps and user details.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPGLE program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>AR900D (<code>WORKSTN</code>, Update/Input, <code>CF</code>): Workstation display file for user interaction, externally described with the <code>PROFOUNDUI</code> handler.</li> <li>ARCUST (<code>UF A</code>, Update/Add, 384 bytes, Key at position 2): Primary customer master file.</li> <li>ARCUSP (<code>UF A</code>, Update/Add, 1344 bytes, Key at position 2): Customer supplemental file.</li> <li>GSTABL (<code>IF</code>, Input, 256 bytes, Key at position 2): General system table for validating salesman, terms, customer class, and group codes.</li> <li>ARCONT (<code>IF</code>, Input, 256 bytes, Key at position 2): Customer contact file for company validation.</li> <li>BICONT (<code>IF</code>, Input, 256 bytes, Key at position 2): Billing contact file for invoice styling.</li> <li>ARCLGR (<code>IF</code>, Input, 240 bytes, Key at position 2): Customer group ledger file for grouped account updates.</li> <li>ARCUST2 (<code>UF</code>, Update, 384 bytes, Key at position 2): Secondary reference to <code>ARCUST</code> for group updates.</li> <li>ARCUSHS (<code>O A</code>, Output/Add, 411 bytes, Key at position 2): Customer history file.</li> <li>ARCUSPH (<code>O A</code>, Output/Add, 1371 bytes, Key at position 2): Customer supplemental history file.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs, as indicated in the code (some calls are commented out, reflecting updates in <code>JB11</code> and <code>JB08</code>):</p> <ol> <li>BI907AC:</li> <li>Called in the <code>S3</code> subroutine to maintain <code>ARCUPR</code> (customer pricing) data.</li> <li>Parameters: Company (<code>@CPCO</code>), Customer (<code>@CPCUS</code>), Shipto (<code>@CPSHP</code>, set to <code>'000'</code>), Mode (<code>@CPMI</code>, set to <code>'MNT'</code>), and File Group (<code>@CPFGR</code>, set to <code>' '</code>).</li> <li> <p>Replaced direct <code>ARCUPR</code> processing (per <code>JB08</code>).</p> </li> <li> <p>AR915P (Commented Out, per <code>DC01</code>):</p> </li> <li>Previously called in <code>S3</code> for customer form type contacts maintenance (<code>ARCUFM</code>).</li> <li>Parameters included company (<code>A$CO</code>), customer (<code>A$CUST</code>), mode (<code>A$MODE = 'MNT'</code>), and file group (<code>A$FGRP = 'X'</code>).</li> <li> <p>No longer used due to <code>JB11</code> revisions.</p> </li> <li> <p>GB730P (Commented Out, per <code>JK01</code>):</p> </li> <li>Previously called in <code>S2</code> for history inquiries on <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li>Parameters included file name (<code>O$FILE</code>), file group (<code>O$FGRP</code>), company (<code>O$CO</code>), customer (<code>O$CUST</code>), and shipto (<code>O$SHIP</code>).</li> <li>No longer used due to <code>JB11</code> revisions.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes variables, loops through screen formats (<code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>FMT05</code>) to manage customer data, validates inputs, updates/adds records to <code>ARCUST</code> and <code>ARCUSP</code>, maintains group accounts in <code>ARCLGR</code>, logs history to <code>ARCUSHS</code> and <code>ARCUSPH</code>, and handles deletions/reactivations.</li> <li>Business Rules: Enforces strict validations on customer numbers, mandatory fields, codes, and dates; prevents deletion of customers with outstanding invoices; supports freight and billing scenarios; and maintains history records.</li> <li>Tables Used: <code>AR900D</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>GSTABL</code>, <code>ARCONT</code>, <code>BICONT</code>, <code>ARCLGR</code>, <code>ARCUST2</code>, <code>ARCUSHS</code>, <code>ARCUSPH</code>.</li> <li>External Programs Called: <code>BI907AC</code> (active), <code>AR915P</code> and <code>GB730P</code> (commented out, no longer used).</li> </ul> <p>This RPGLE program is a critical component of the customer master maintenance process, integrating with the OCL script to provide a robust interface for managing customer data. If you need further clarification on specific subroutines or business rules, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/","title":"AR9006 RPG36","text":"<p>The provided document is an RPG/36 program named <code>AR9006.rpg36.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> for the purpose of copying alternate product descriptions from a selected customer to another customer in the Customer Master Add/Update process on an IBM midrange system (likely System/36 or AS/400, now IBM i). Below, I will explain the process steps, business rules, tables used, and external programs called by this RPG program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR9006</code> program is designed to copy alternate product descriptions (<code>FMCPDS</code>) from one customer\u2019s record in the <code>PFARCUPR</code> file to another customer\u2019s record in the <code>PTARCUPR</code> file, based on matching keys. It is invoked from <code>AR900</code> (Customer Master File Maintenance) and <code>BI900</code> (Customer Shipto Master File Maintenance). The program operates in a straightforward manner, focusing on reading, validating, and updating/adding records.</p> <ol> <li>Program Entry and Parameter Handling:</li> <li>Purpose: Receives input parameters to identify the source and target customer records.</li> <li> <p>Steps:</p> <ul> <li>The program defines a parameter list (<code>*ENTRY PLIST</code>) with the following parameters:</li> <li><code>CO</code> (2 bytes): Company number.</li> <li><code>CUST</code> (6 bytes): Target customer number.</li> <li><code>SHIP</code> (3 bytes): Target shipto number.</li> <li><code>KICUST</code> (6 bytes): Source customer number (from which to copy descriptions).</li> <li><code>KISHIP</code> (3 bytes): Source shipto number.</li> <li>These parameters are used to construct keys for accessing records in the <code>PFARCUPR</code> and <code>PTARCUPR</code> files.</li> </ul> </li> <li> <p>Execution of the Main Subroutine (<code>DOCOPY</code>):</p> </li> <li>Purpose: Performs the core logic of copying alternate product descriptions.</li> <li> <p>Steps:</p> <ul> <li>Calls the <code>DOCOPY</code> subroutine to process the copy operation.</li> <li>Sets the Last Record indicator (<code>LR</code>) to terminate the program after processing.</li> <li>Proceeds to the <code>OUT</code> tag to exit.</li> </ul> </li> <li> <p>DOCOPY Subroutine:</p> </li> <li>Purpose: Copies alternate product descriptions from the source customer to the target customer.</li> <li> <p>Steps:</p> <ul> <li>Build Source Key (<code>CPLM16</code>):</li> <li>Constructs an 8-byte key (<code>CPLM8</code>) by combining <code>CO</code> (company) and <code>KICUST</code> (source customer).</li> <li>Extends to an 11-byte key (<code>CPLM11</code>) by appending <code>KISHIP</code> (source shipto).</li> <li>Extends to a 16-byte key (<code>CPLM16</code>) by appending four blank spaces (per <code>JB01</code>, likely for <code>FMCNTY</code> container type compatibility).</li> <li>Uses <code>SETLL</code> to position the file pointer at the first record in <code>PFARCUPR</code> matching <code>CPLM16</code>.</li> <li>Read Source Records:</li> <li>Enters a loop (<code>AGNP</code> tag) to read records from <code>PFARCUPR</code> until end-of-file (<code>EOF</code>, indicator <code>10</code>).</li> <li>Skips records marked as deleted (<code>FMDEL = 'D'</code>).</li> <li>Validates that the record matches the source company (<code>FMCONO = CO</code>), customer (<code>FMCUST = KICUST</code>), and shipto (<code>FMSHIP = KISHIP</code>). If any mismatch occurs, skips to the next record (<code>NOMRP</code> tag).</li> <li>Build Target Key (<code>CPKY16</code>):</li> <li>Constructs an 8-byte key (<code>CPKY8</code>) using <code>CO</code> and <code>CUST</code> (target customer).</li> <li>Extends to an 11-byte key (<code>CPKY11</code>) by appending <code>SHIP</code> (target shipto).</li> <li>Extends to a 15-byte key (<code>CPKY15</code>) by appending <code>FMPROD</code> (product code from the source record).</li> <li>Extends to a 16-byte key (<code>CPKY16</code>) by appending <code>FMCNTY</code> (container type from the source record, per <code>JB01</code>).</li> <li>Check Target Record:</li> <li>Uses <code>CHAIN</code> to locate a matching record in <code>PTARCUPR</code> using <code>CPKY16</code>.</li> <li>If no record exists (indicator <code>90</code> on):<ul> <li>Copies the alternate product description (<code>FMCPDS</code>) to <code>CPCPDS</code>.</li> <li>Writes a new record to <code>PTARCUPR</code> using the <code>ADDREC</code> exception output.</li> </ul> </li> <li>If a record exists (indicator <code>90</code> off):<ul> <li>Checks if the existing alternate description (<code>CPCPDS</code>) is blank.</li> <li>If blank, updates <code>CPCPDS</code> with <code>FMCPDS</code> and writes the updated record to <code>PTARCUPR</code> using the <code>UPDREC</code> exception output.</li> </ul> </li> <li>Loop Continuation:</li> <li>Returns to the <code>AGNP</code> tag to process the next record in <code>PFARCUPR</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>After processing all matching records, the program exits via the <code>OUT</code> tag, setting the <code>LR</code> indicator to close files and terminate.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure accurate copying of alternate product descriptions:</p> <ol> <li>Record Matching:</li> <li>Only non-deleted records (<code>FMDEL \u2260 'D'</code>) from the source file (<code>PFARCUPR</code>) are considered for copying.</li> <li> <p>The source record must match the input parameters: company (<code>FMCONO = CO</code>), customer (<code>FMCUST = KICUST</code>), and shipto (<code>FMSHIP = KISHIP</code>).</p> </li> <li> <p>Target Record Handling:</p> </li> <li>If a matching record does not exist in <code>PTARCUPR</code> (based on company, customer, shipto, product code, and container type), a new record is created with the copied alternate description (<code>FMCPDS</code>).</li> <li>If a matching record exists in <code>PTARCUPR</code> but its alternate description (<code>CPCPDS</code>) is blank, it is updated with the source description (<code>FMCPDS</code>).</li> <li> <p>If the existing <code>CPCPDS</code> is non-blank, no update is performed (preserving the existing description).</p> </li> <li> <p>Key Structure:</p> </li> <li>The key for both files includes company, customer, shipto, product code, and container type (<code>FMCNTY</code>, added in <code>JB01</code>).</li> <li> <p>The container type (<code>FMCNTY</code>) is part of the key to ensure precise matching, reflecting a business requirement to differentiate products by container type.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that only valid, non-deleted source records are copied to maintain data consistency.</li> <li>The alternate description (<code>CPCPDS</code>) is only updated or added if necessary, avoiding unnecessary overwrites.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>PFARCUPR (<code>IF</code>, Input, 80 bytes, Key at position 2, Logical File):</li> <li>Source file containing customer product records with alternate descriptions.</li> <li> <p>Fields include:</p> <ul> <li><code>FMDEL</code> (1 byte): Delete code (<code>D</code> for deleted).</li> <li><code>FMCONO</code> (2 bytes): Company number.</li> <li><code>FMCUST</code> (6 bytes): Customer number.</li> <li><code>FMSHIP</code> (3 bytes): Shipto number.</li> <li><code>FMPROD</code> (4 bytes): Product code.</li> <li><code>FMCPDS</code> (30 bytes): Customer product description (alternate description).</li> <li><code>FMCNTY</code> (1 byte): Container type (added in <code>JB01</code>).</li> </ul> </li> <li> <p>PTARCUPR (<code>UF</code>, Update/Add, 80 bytes, Key at position 2, Physical File):</p> </li> <li>Target file for adding or updating customer product records.</li> <li>Fields include:<ul> <li><code>CPDEL</code> (1 byte): Delete code.</li> <li><code>CPCPDS</code> (30 bytes): Customer product description (target for copying).</li> <li>Other fields (implied by key structure): Company, customer, shipto, product code, and container type.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR9006</code> program does not call any external programs. It operates independently, performing direct file operations on <code>PFARCUPR</code> and <code>PTARCUPR</code> to copy alternate product descriptions.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program receives parameters for source and target customers, reads non-deleted records from <code>PFARCUPR</code>, validates them against input parameters, and either adds new records or updates existing records in <code>PTARCUPR</code> with the alternate product description.</li> <li>Business Rules: Ensures only valid, non-deleted source records are copied; updates target records only if their description is blank; includes container type in the key for precise matching; and preserves existing non-blank descriptions.</li> <li>Tables Used: <code>PFARCUPR</code> (input, source records), <code>PTARCUPR</code> (update/add, target records).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG/36 program is a specialized utility for copying alternate product descriptions, supporting the customer master and shipto maintenance processes by ensuring consistent product descriptions across customer records. If you need further details on specific logic or file structures, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/","title":"AR9009 RPG36","text":"<p>The provided document is an RPG/36 program named <code>AR9009.rpg36.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> to verify whether a customer has activity (e.g., invoices or sales) before allowing deletion in the Customer Master File Maintenance process (<code>AR900</code>) on an IBM midrange system (likely System/36 or AS/400, now IBM i). Below, I explain the process steps, business rules, tables used, and external programs called by this RPG program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR9009</code> program checks for customer activity in specific files to determine if a customer can be deleted. It is invoked from <code>AR900</code> to ensure that customers with active records (e.g., open invoices or sales) are not deleted. The program processes input parameters, checks multiple files for matching records, and returns a flag indicating whether activity was found.</p> <ol> <li>Program Entry and Parameter Handling:</li> <li>Purpose: Receives input parameters to identify the customer and control the verification process.</li> <li> <p>Steps:</p> <ul> <li>Defines a parameter list (<code>*ENTRY PLIST</code>) with:</li> <li><code>ARKEY</code> (8 bytes): Key combining company and customer number (e.g., <code>COCUST</code>).</li> <li><code>BCINST</code> (1 byte): Billing instruction code, used to determine if sales files should be checked.</li> <li><code>FOUND</code> (1 byte): Output parameter set to indicate whether activity was found (<code>'A'</code> for invoices, <code>'S'</code> for sales, or blank if no activity).</li> <li>Calls the <code>EACH</code> subroutine to perform the activity check.</li> <li>Sets the Last Record indicator (<code>LR</code>) and exits via the <code>OUT</code> tag.</li> </ul> </li> <li> <p>EACH Subroutine:</p> </li> <li>Purpose: Checks for customer activity in invoice and sales files.</li> <li>Steps:<ul> <li>Invoice File Check (<code>CRDETX</code>):</li> <li>Moves <code>ARKEY</code> to a 23-byte key (<code>KEY21</code>) for positioning in <code>CRDETX</code> (invoice detail file).</li> <li>Uses <code>SETLL</code> to position the file pointer at the first record matching <code>KEY21</code>.</li> <li>Reads <code>CRDETX</code> records in a loop (<code>RDAGN</code> tag) until end-of-file (indicator <code>10</code>).</li> <li>For each record:<ul> <li>Skips deleted records (<code>ADDEL = 'D'</code>).</li> <li>Compares the record\u2019s key (<code>ARDKEY</code>) with <code>ARKEY</code>. If they match and the record is not deleted, sets <code>FOUND = 'A'</code> (indicating the customer has invoices) and exits to <code>ENDDEL</code>.</li> </ul> </li> <li>Sales File Checks (Conditional on <code>BCINST = '5'</code>):</li> <li>If <code>BCINST = '5'</code>, checks multiple sales files for activity:<ul> <li><code>SA5FIXD</code> and <code>SA5FIXM</code> (fixed sales data, per <code>LT02</code>).</li> <li><code>SA5BCXD</code> and <code>SA5BCXM</code> (billing-related sales data, per <code>JB03</code>).</li> <li><code>SA5DBXD</code> and <code>SA5DBXM</code> (distribution-related sales data, per <code>JB03</code>).</li> <li><code>SA5COXD</code> and <code>SA5COXM</code> (customer order-related sales data, per <code>JB03</code>).</li> </ul> </li> <li>For each file:<ul> <li>Moves <code>ARKEY</code> to a 39-byte key (<code>SAKEY</code>) for positioning.</li> <li>Uses <code>SETLL</code> to position the file pointer.</li> <li>Reads the file and checks if the record\u2019s key (<code>SACOCU</code>) matches <code>ARKEY</code>.</li> <li>If a match is found, sets <code>FOUND = 'S'</code> (indicating the customer has sales activity) and exits to <code>ENDDEL</code>.</li> </ul> </li> <li>Termination:</li> <li>If no activity is found, <code>FOUND</code> remains blank.</li> <li>Exits via <code>ENDDEL</code>, closes files, and terminates the program.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure accurate verification of customer activity before deletion:</p> <ol> <li>Invoice Activity Check:</li> <li>A customer cannot be deleted if they have active (non-deleted, <code>ADDEL \u2260 'D'</code>) invoices in <code>CRDETX</code>.</li> <li> <p>If a matching invoice record is found, <code>FOUND</code> is set to <code>'A'</code>, signaling that deletion is not allowed.</p> </li> <li> <p>Sales Activity Check:</p> </li> <li>Sales activity is checked only if the billing instruction code (<code>BCINST</code>) is <code>'5'</code>.</li> <li>The program checks multiple sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for records matching the customer key (<code>SACOCU = ARKEY</code>).</li> <li> <p>If a matching record is found in any of these files, <code>FOUND</code> is set to <code>'S'</code>, indicating that deletion is not allowed due to sales activity.</p> </li> <li> <p>Key Matching:</p> </li> <li>The customer key (<code>ARKEY</code>) combines company and customer number and is used to match records in both invoice and sales files.</li> <li> <p>Only non-deleted invoice records (<code>ADDEL \u2260 'D'</code>) are considered for activity checks.</p> </li> <li> <p>Sequential File Checking:</p> </li> <li>The program checks <code>CRDETX</code> first for invoices. If no activity is found, it proceeds to check sales files (if <code>BCINST = '5'</code>).</li> <li> <p>Sales files are checked in pairs (e.g., <code>SA5FIXD</code> and <code>SA5FIXM</code>), reflecting different data structures or indexes (per <code>LT02</code> and <code>JB03</code> revisions).</p> </li> <li> <p>Output:</p> </li> <li>The <code>FOUND</code> parameter is set to:<ul> <li><code>'A'</code> if invoice activity is found.</li> <li><code>'S'</code> if sales activity is found.</li> <li>Blank if no activity is found, indicating the customer may be eligible for deletion.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>CRDETX (<code>IF</code>, Input, 128 bytes, Key at position 2, Logical File):</li> <li>Invoice detail file used to check for customer invoices.</li> <li> <p>Fields:</p> <ul> <li><code>ADDEL</code> (1 byte): Delete code (<code>D</code> for deleted).</li> <li><code>ARDKEY</code> (8 bytes): Key combining company and customer number.</li> </ul> </li> <li> <p>SA5FIXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>LT02</code>):</p> </li> <li>Sales file (fixed data, detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5FIXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>LT02</code>):</p> </li> <li>Sales file (fixed data, master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5BCXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Billing-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5BCXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Billing-related sales file (master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5DBXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Distribution-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5DBXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Distribution-related sales file (master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5COXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Customer order-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5COXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Customer order-related sales file (master) for checking customer sales activity.</li> <li>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR9009</code> program does not call any external programs. It performs direct file operations on <code>CRDETX</code> and the sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) to check for customer activity.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: Receives parameters (<code>ARKEY</code>, <code>BCINST</code>, <code>FOUND</code>), checks <code>CRDETX</code> for invoice activity, and, if <code>BCINST = '5'</code>, checks multiple sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for sales activity. Sets <code>FOUND</code> to <code>'A'</code> (invoices), <code>'S'</code> (sales), or blank (no activity).</li> <li>Business Rules: Prevents deletion if the customer has active invoices or sales (when <code>BCINST = '5'</code>); skips deleted invoice records; checks multiple sales files for comprehensive activity verification.</li> <li>Tables Used: <code>CRDETX</code> (invoices), <code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code> (sales data).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG/36 program is a critical validation step in the customer deletion process, ensuring that customers with active invoices or sales are not deleted, maintaining data integrity in the customer master maintenance system. If you need further details on specific logic or file structures, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/","title":"BI907 RPGLE","text":"<p>The provided document is an RPGLE program named <code>BI907.rpgle.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> for Customer &amp; Ship To File Maintenance/Inquiry within the Bradford Order Entry/Invoices system on an IBM midrange system (likely AS/400, now IBM i). This program manages customer and shipto-specific product data, including alternate descriptions, freight codes, and container types, with support for add, update, delete, and reactivate operations. Below, I explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BI907</code> program provides a subfile-based interface (<code>BI907D</code>) for maintaining or inquiring about customer and shipto product data stored in the <code>ARCUPR</code> file. It supports operations such as adding new records, updating existing records, deleting records (marking as inactive), reactivating records, and copying alternate descriptions from other customers or shiptos. The program operates in three modes: Update Mode, All Mode, and Add Mode, controlled by function keys and user input.</p> <ol> <li>Program Initialization (<code>*INZSR</code> Subroutine):</li> <li>Purpose: Sets up initial parameters, opens files, and initializes the program state.</li> <li> <p>Steps:</p> <ul> <li>Receives input parameters: company (<code>p$co</code>), customer (<code>p$cst</code>), shipto (<code>p$shp</code>), mode (<code>p$mode</code>, <code>MNT</code> for maintenance or <code>INQ</code> for inquiry), and file group (<code>p$fgrp</code>, <code>Z</code> or <code>G</code>).</li> <li>Applies file overrides (<code>ovg</code> for <code>G</code> files, <code>ovz</code> for <code>Z</code> files) based on <code>p$fgrp</code> using <code>QCMDEXC</code>.</li> <li>Opens database files: <code>GSTABL</code>, <code>ARCUPR</code>, <code>BICONT</code>, <code>GSPROD</code>, <code>ARCUST</code>, <code>SHIPTO</code>, <code>ARCUPHS</code>, and <code>BI907W</code>.</li> <li>Sets the screen header (<code>c$hdr1</code>) based on mode (<code>MNT</code> or <code>INQ</code>).</li> <li>Initializes subfile control fields (<code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>) from input parameters and sets default container type (<code>c1cnty = 'A'</code>).</li> <li>Checks if records exist in <code>ARCUPR</code> for the company, customer, and shipto:</li> <li>If records exist, sets Update Mode (<code>c1mode = 'Update Mode'</code>, <code>s1updt = *ON</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>If no records exist and inquiry mode is off, sets All Mode (<code>c1mode = 'All Mode'</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>If no records exist and inquiry mode is on, sets All Mode with protected fields.</li> <li>Captures the current date and time (<code>t#time</code>) and formats it as <code>t#cymd</code> (YYYYMMDD) for history records.</li> </ul> </li> <li> <p>Main Subfile Processing (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the subfile (<code>SFL1</code>) display and user interactions in a loop.</li> <li> <p>Steps:</p> <ul> <li>Clears the message subfile and initializes the company number (<code>c1cono = 10</code>).</li> <li>Positions the work file (<code>BI907W</code>) based on user input (<code>sf1rep</code>).</li> <li>Suppresses errors on the first display (<code>w$frst</code>).</li> <li>Enters a loop (<code>sf1agn</code>) to display the subfile control format (<code>SFLCTL1</code>) and process user inputs:</li> <li>Writes the command line (<code>SFLCMD1</code>) and message subfile if needed.</li> <li>Sets cursor position for Add Mode (<code>row1 = 10</code>, <code>col1 = 02</code>).</li> <li>Displays the subfile if records exist (<code>*IN41</code>) and control format (<code>*IN40</code>).</li> <li>Processes function keys and user actions (see below).</li> <li>Updates cursor location (<code>csrloc</code>) and subfile record number (<code>rcdnb1</code>) for redisplay.</li> </ul> </li> <li> <p>Function Key Processing:</p> </li> <li>F03 (Exit): Exits the program by clearing flags (<code>sf1agn</code>, <code>fmtagn</code>) and iterating.</li> <li>F04 (Field Prompting):<ul> <li>For <code>SFLCTL1</code>: Prompts for product code (<code>C1PROD</code>) or container type (<code>C1CNTY</code>) using <code>LGSPROD</code> or <code>LGSTABL</code>.</li> <li>For <code>SFL1</code>: Prompts for product code (<code>S1PROD</code>) or container type (<code>S1CNTY</code>) and updates subfile fields.</li> <li>For <code>SFLCCPY</code>: Prompts for customer (<code>S3CUST</code>) or shipto (<code>S3SHIP</code>) using <code>LARCUST</code> or <code>LCSTSHP</code>.</li> </ul> </li> <li>F05 (Refresh): Clears container type (<code>r$cnty</code>) and repositions the subfile (<code>repsfl</code>).</li> <li>F08 (Copy Alternate Description):<ul> <li>Opens a window (<code>SFLCCPY</code>) to input source customer (<code>s3cust</code>) and shipto (<code>s3ship</code>).</li> <li>Validates inputs against <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Calls <code>BI9078</code> to copy alternate descriptions, updates the message subfile, and repositions the subfile.</li> </ul> </li> <li>F09 (History Inquiry):<ul> <li>Calls <code>GB730P</code> to display history for the selected subfile record (<code>SFL1</code>) using parameters (<code>o$file = 'ARCUPR'</code>, <code>o$fgrp</code>, <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s1prod</code>, <code>s1cnty</code>).</li> </ul> </li> <li>F10 (Toggle Mode):<ul> <li>Toggles between Update Mode, All Mode, and Add Mode:</li> <li>Update Mode: Shows existing <code>ARCUPR</code> records, allows updates (<code>s1updt = *ON</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>All Mode: Shows all products from <code>GSPROD</code>, allows adding new records (<code>s1updt = *OFF</code>, <code>s1f10d = 'F10=Update Mode'</code>).</li> <li>Add Mode: Allows adding new records (<code>s1updt = *ON</code>, <code>s1f10d = 'F10=All Mode'</code>).</li> <li>Repositions the subfile after mode change.</li> </ul> </li> <li>F12 (Cancel): Exits the subfile loop.</li> <li>F22 (Reactivate):<ul> <li>For a selected subfile record (<code>SFL1</code>) marked as deleted (<code>s1del = 'D'</code>, <code>s1exis = 'Y'</code>), opens a window (<code>SFLRST1</code>).</li> <li>Sets <code>cpdel = 'A'</code> in <code>ARCUPR</code>, updates the record, writes to history (<code>ARCUPHS</code>), and clears the subfile record.</li> </ul> </li> <li>F23 (Delete):<ul> <li>For a selected subfile record (<code>SFL1</code>, <code>s1exis = 'Y'</code>, <code>s1del \u2260 'D'</code>), opens a window (<code>SFLDEL1</code>).</li> <li>Sets <code>cpdel = 'D'</code> in <code>ARCUPR</code>, updates the record, writes to history, and clears the subfile record.</li> </ul> </li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li> <p>Enter: Processes subfile changes (<code>sf1prc</code>) or repositions the subfile if control fields (<code>c1prod</code>, <code>c1cnty</code>, <code>c$dlyn</code>) change.</p> </li> <li> <p>Subfile Processing (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc SFL1</code>) and processes them (<code>sf1chg</code>).</li> <li> <p>Sets <code>s1chng</code> if changes are detected.</p> </li> <li> <p>Subfile Change Processing (<code>sf1chg</code> Subroutine):</p> </li> <li>Validates subfile input (<code>sf1edt</code>).</li> <li>If no errors (<code>*IN50 = *OFF</code>) and not in inquiry mode, updates or adds records to <code>ARCUPR</code> (<code>sf1upd</code>).</li> <li> <p>Updates the subfile record (<code>sf1pro</code>) and sets <code>SFLNXTCHG</code> (<code>*IN44</code>) if errors occur.</p> </li> <li> <p>Subfile Input Validation (<code>sf1edt</code> Subroutine):</p> </li> <li>Validates subfile fields:<ul> <li>Product Code (<code>s1prod</code>): Required in Add Mode; must exist in <code>GSPROD</code>.</li> <li>Existing Record (<code>s1exis</code>): In Add Mode, checks if the record already exists in <code>ARCUPR</code>.</li> <li>Container Type (<code>s1cnty</code>): Must exist in <code>GSTABL</code> (<code>CNTRTY</code> table) if not blank.</li> <li>Gallons Billed Code (<code>s1glcd</code>): Must be <code>'G'</code> or blank.</li> <li>Freight Code (<code>s1frcd</code>): Must exist in <code>GSTABL</code> (<code>BBFRCD</code> table) if not blank.</li> <li>Separate Freight Code (<code>s1sfrt</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Calculate Freight Code (<code>s1cafr</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Freight Code Rules:</li> <li>If <code>s1frcd = 'C'</code> (collect), <code>s1sfrt</code> and <code>s1cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank (per <code>JB01</code>, <code>JB02</code>).</li> <li>If <code>s1frcd = 'P'</code> (prepaid), defaults <code>s1sfrt = 'N'</code>, <code>s1cafr = 'Y'</code> if blank.</li> <li>If <code>s1frcd = 'A'</code> (prepaid &amp; add), <code>s1sfrt</code> must be <code>'Y'</code>, defaults <code>s1cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>Sets error indicators (<code>*IN50</code>\u2013<code>*IN57</code>, <code>*IN61</code>, <code>*IN62</code>) and adds error messages to the message subfile if validations fail.</p> </li> <li> <p>Update/Add to Database (<code>sf1upd</code> Subroutine):</p> </li> <li> <p>If <code>s1prod</code> is not blank:</p> <ul> <li>Checks if the record exists in <code>ARCUPR</code> (<code>klsfl1</code>).</li> <li>If it does not exist (<code>*IN99 = *ON</code>) and fields (<code>s1glcd</code>, <code>s1cpds</code>, <code>s1frcd</code>, <code>s1sfrt</code>, <code>s1cafr</code>) are not blank:</li> <li>Clears <code>ARCUPR</code> record, sets <code>cpdel = 'A'</code>, and populates fields from subfile (<code>sf1mov</code>).</li> <li>Writes a new record to <code>ARCUPR</code>.</li> <li>Writes a history record to <code>ARCUPHS</code>.</li> <li>Sets <code>s1exis = 'Y'</code>.</li> <li>If it exists:</li> <li>Updates <code>ARCUPR</code> with subfile values (<code>sf1mov</code>).</li> <li>Writes a history record to <code>ARCUPHS</code>.</li> <li>Sets <code>s1exis = 'Y'</code>.</li> </ul> </li> <li> <p>Move Subfile Values to File (<code>sf1mov</code> Subroutine):</p> </li> <li> <p>Moves subfile fields (<code>s1cpds</code>, <code>s1glcd</code>, <code>s1frcd</code>, <code>s1sfrt</code>, <code>s1cafr</code>) to <code>ARCUPR</code> fields (<code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>).</p> </li> <li> <p>Reactivate Record (<code>sf1rst</code> Subroutine):</p> </li> <li>Displays a window (<code>SFLRST1</code>) to confirm reactivation.</li> <li> <p>If <code>F22</code> is pressed and the record exists in <code>ARCUPR</code>:</p> <ul> <li>Sets <code>cpdel = 'A'</code>, updates <code>ARCUPR</code>, writes to <code>ARCUPHS</code>, and displays a message (<code>err(11)</code>).</li> <li>Clears the subfile record.</li> </ul> </li> <li> <p>Delete Record (<code>sf1del</code> Subroutine):</p> <ul> <li>Displays a window (<code>SFLDEL1</code>) to confirm deletion.</li> <li>If <code>F23</code> is pressed and the record exists in <code>ARCUPR</code>:</li> <li>Sets <code>cpdel = 'D'</code>, updates <code>ARCUPR</code>, writes to <code>ARCUPHS</code>, and displays a message (<code>err(10)</code>).</li> <li>Clears the subfile record.</li> </ul> </li> <li> <p>Copy Alternate Description (<code>sf1cpy</code> Subroutine):</p> <ul> <li>Displays a window (<code>SFLCCPY</code>) to input source customer (<code>s3cust</code>) and shipto (<code>s3ship</code>).</li> <li>Validates inputs against <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Calls <code>BI9078</code> to copy alternate descriptions, passing <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s3cust</code>, <code>s3ship</code>, and <code>p$fgrp</code>.</li> <li>Displays a success message (<code>err(12)</code>).</li> </ul> </li> <li> <p>Load Subfile (<code>sf1lod</code> Subroutine):</p> <ul> <li>Loads up to 12 records (<code>pagsz1</code>) from <code>BI907W</code> into the subfile (<code>SFL1</code>).</li> <li>Filters records based on mode (<code>s1updt</code>), container type (<code>c1cnty</code>), and include deleted flag (<code>c$dlyn</code>).</li> <li>Formats each record (<code>sf1fmt</code>) and writes to the subfile.</li> </ul> </li> <li> <p>Build Work File (<code>ArcuprSrBld</code> and <code>GsprodSrBld</code> Subroutines):</p> <ul> <li>ArcuprSrBld: Builds <code>BI907W</code> from <code>ARCUPR</code> for Update Mode, adding missing container types from <code>GSTABL</code>.</li> <li>GsprodSrBld: Builds <code>BI907W</code> from <code>GSPROD</code> for All Mode, including sellable products (<code>tpsell = 'Y'</code>) and container types, merging with <code>ARCUPR</code> data if available.</li> </ul> </li> <li> <p>Clear Work File (<code>ClrWrkFile</code> Subroutine):</p> <ul> <li>Closes <code>BI907W</code>, calls <code>BI907C2</code> to clear it, and reopens it.</li> </ul> </li> <li> <p>Write History (<code>writehist</code> Subroutine):</p> <ul> <li>Writes a record to <code>ARCUPHS</code> with fields from <code>ARCUPR</code>, current date (<code>t#cymd</code>), time (<code>t#hms</code>), and user ID (<code>ps#usr8</code>).</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files, sets <code>*INLR = *ON</code>, and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure data integrity:</p> <ol> <li>Mode-Based Operations:</li> <li>Update Mode: Displays existing <code>ARCUPR</code> records for the specified company, customer, and shipto; allows updates, deletions, and reactivations.</li> <li>All Mode: Displays all sellable products from <code>GSPROD</code>, allowing new record additions.</li> <li>Add Mode: Enables adding new records to <code>ARCUPR</code> with validated fields.</li> <li> <p>Inquiry mode (<code>p$mode = 'INQ'</code>) protects all input fields (<code>*IN71</code>).</p> </li> <li> <p>Field Validations:</p> </li> <li>Product Code (<code>s1prod</code>): Mandatory in Add Mode; must exist in <code>GSPROD</code>.</li> <li>Container Type (<code>s1cnty</code>): Must exist in <code>GSTABL</code> (<code>CNTRTY</code>) if not blank.</li> <li>Gallons Billed Code (<code>s1glcd</code>): Must be <code>'G'</code> or blank.</li> <li>Freight Code (<code>s1frcd</code>): Must exist in <code>GSTABL</code> (<code>BBFRCD</code>) if not blank (e.g., <code>C</code> for collect, <code>P</code> for prepaid, <code>A</code> for prepaid &amp; add).</li> <li>Separate Freight Code (<code>s1sfrt</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Calculate Freight Code (<code>s1cafr</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li> <p>Freight Code Rules:</p> <ul> <li>For <code>s1frcd = 'C'</code> (collect):</li> <li><code>s1sfrt</code> and <code>s1cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank (per <code>JB01</code>, <code>JB02</code>).</li> <li>Defaults: <code>s1sfrt = 'N'</code>, <code>s1cafr = 'N'</code> if blank.</li> <li>For <code>s1frcd = 'P'</code> (prepaid):</li> <li>Defaults: <code>s1sfrt = 'N'</code>, <code>s1cafr = 'Y'</code> if blank.</li> <li>For <code>s1frcd = 'A'</code> (prepaid &amp; add):</li> <li><code>s1sfrt</code> must be <code>'Y'</code>.</li> <li>Defaults: <code>s1cafr = 'Y'</code> if blank.</li> <li><code>JB01</code>: Allows <code>s1cafr = 'Y'</code> for collect (non-Bradford locations, e.g., Anchor).</li> <li><code>JB02</code>: Allows <code>s1sfrt = 'Y'</code> for collect with a $100 service fee when ARG arranges shipping.</li> </ul> </li> <li> <p>Record Existence:</p> </li> <li>Prevents adding a record if it already exists in <code>ARCUPR</code> or is marked as deleted.</li> <li>Deletion marks records as inactive (<code>cpdel = 'D'</code>) rather than physically deleting.</li> <li> <p>Reactivation changes <code>cpdel</code> from <code>'D'</code> to <code>'A'</code>.</p> </li> <li> <p>Copy Alternate Descriptions:</p> </li> <li>Source customer and shipto must exist in <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li> <p>Copied descriptions are applied via the <code>BI9078</code> program.</p> </li> <li> <p>History Tracking:</p> </li> <li> <p>All add, update, delete, and reactivate operations are logged to <code>ARCUPHS</code> with date, time, and user ID.</p> </li> <li> <p>Subfile Filters:</p> </li> <li>In Update Mode, filters by container type (<code>c1cnty</code>) and excludes deleted records unless <code>c$dlyn = 'Y'</code>.</li> <li>In All Mode, includes all sellable products from <code>GSPROD</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>BI907D (<code>CF</code>, Workstation, Update/Input):</li> <li>Display file with subfile <code>SFL1</code> and control format <code>SFLCTL1</code>, using the <code>PROFOUNDUI</code> handler.</li> <li> <p>Includes formats for reactivation (<code>SFLRST1</code>), deletion (<code>SFLDEL1</code>), and copy (<code>SFLCCPY</code>).</p> </li> <li> <p>GSTABL (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>General system table for validating container types (<code>CNTRTY</code>) and freight codes (<code>BBFRCD</code>).</p> </li> <li> <p>BICONT (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Billing contact file for validating company codes and retrieving company names (<code>bcname</code>).</p> </li> <li> <p>GSPROD (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Product file for validating product codes and retrieving descriptions (<code>tpabds</code>).</p> </li> <li> <p>SHIPTO (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Shipto file for validating shipto codes and retrieving names (<code>csname</code>).</p> </li> <li> <p>ARCUST (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Customer master file for validating customer codes and retrieving names (<code>arname</code>).</p> </li> <li> <p>BI907W (<code>UF</code>, Update/Add, Keyed, User Open):</p> </li> <li> <p>Work file for temporary storage of subfile data, built from <code>ARCUPR</code> or <code>GSPROD</code>.</p> </li> <li> <p>ARCUPR (<code>UF</code>, Update/Add, Keyed, User Open):</p> </li> <li> <p>Customer product file for storing product-specific data (e.g., <code>cpdel</code>, <code>cpcono</code>, <code>cpcust</code>, <code>cpship</code>, <code>cpprod</code>, <code>cpcnty</code>, <code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>).</p> </li> <li> <p>ARCUPHS (<code>O</code>, Output/Add, Keyed, User Open):</p> </li> <li>Customer product history file for logging changes (<code>ahdel</code>, <code>ahcono</code>, <code>ahcust</code>, <code>ahship</code>, <code>ahprod</code>, <code>ahcnty</code>, <code>ahcpds</code>, <code>ahglcd</code>, <code>ahfrcd</code>, <code>ahsfrt</code>, <code>ahcafr</code>, <code>ahchd8</code>, <code>ahchtm</code>, <code>ahuser</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs:</p> <ol> <li>BI9078:</li> <li>Called in <code>sf1cpy</code> to copy alternate product descriptions from a source customer/shipto to the target.</li> <li> <p>Parameters: <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code> (target), <code>s3cust</code>, <code>s3ship</code> (source), <code>p$fgrp</code>.</p> </li> <li> <p>BI907C2:</p> </li> <li>Called in <code>ClrWrkFile</code> to clear the work file <code>BI907W</code>.</li> <li> <p>No parameters specified.</p> </li> <li> <p>GB730P:</p> </li> <li>Called in <code>histinq</code> for history inquiries on <code>ARCUPR</code> records.</li> <li> <p>Parameters: <code>x$arcuprhist</code> (structure with <code>o$file = 'ARCUPR'</code>, <code>o$fgrp</code>, <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s1prod</code>, <code>s1cnty</code>).</p> </li> <li> <p>LGSPROD:</p> </li> <li>Called in <code>prompt</code> for product code prompting.</li> <li> <p>Parameters: <code>c1cono</code>, <code>s1prod</code> or <code>c1prod</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LGSTABL:</p> </li> <li>Called in <code>prompt</code> for container type prompting.</li> <li> <p>Parameters: <code>k$ctyp = 'CNTRTY'</code>, <code>k$cnty</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LARCUST:</p> </li> <li>Called in <code>prompt</code> for customer prompting.</li> <li> <p>Parameters: <code>c1cono</code>, <code>o$cust</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LCSTSHP:</p> </li> <li>Called in <code>prompt</code> for shipto prompting.</li> <li> <p>Parameters: <code>x$cstshp</code> (structure with <code>x$co</code>, <code>x$srch</code>, <code>x$cust</code>, <code>x$ship</code>, <code>x$flag</code>, <code>x$fgrp</code>).</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in <code>opntbl</code> to execute file override commands (<code>ovg</code> or <code>ovz</code>).</li> <li> <p>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (length).</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in <code>addmsg</code> to send error messages to the program message queue.</li> <li> <p>Parameters: <code>m@id</code>, <code>m@msgf</code>, <code>m@data</code>, <code>m@l</code>, <code>m@type</code>, <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@key</code>, <code>m@errc</code>.</p> </li> <li> <p>QMHRMVPM:</p> <ul> <li>Called in <code>clrmsg</code> to clear the message subfile.</li> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initializes parameters and files, displays a subfile (<code>SFL1</code>) for maintenance/inquiry, processes user inputs (F03, F04, F05, F08, F09, F10, F12, F22, F23, Page Down, Enter), validates subfile inputs, adds/updates/deletes/reactivates records in <code>ARCUPR</code>, logs changes to <code>ARCUPHS</code>, and supports copying alternate descriptions via <code>BI9078</code>.</li> <li>Business Rules: Enforces mode-based operations (Update, All, Add, Inquiry); validates product codes, container types, freight codes, and related fields; supports special freight scenarios (<code>JB01</code>, <code>JB02</code>); prevents adding existing/deleted records; logs all changes; and filters subfile data based on user inputs.</li> <li>Tables Used: <code>BI907D</code>, <code>GSTABL</code>, <code>BICONT</code>, <code>GSPROD</code>, <code>SHIPTO</code>, <code>ARCUST</code>, <code>BI907W</code>, <code>ARCUPR</code>, <code>ARCUPHS</code>.</li> <li>External Programs Called: <code>BI9078</code>, <code>BI907C2</code>, <code>GB730P</code>, <code>LGSPROD</code>, <code>LGSTABL</code>, <code>LARCUST</code>, <code>LCSTSHP</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</li> </ul> <p>This RPGLE program is a comprehensive tool for managing customer and shipto product data, integrating with other system components to ensure accurate and validated data maintenance. If you need further details on specific subroutines or validations, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/","title":"Summary AR900 OCL","text":"<p>The call stack involves two RPG programs, <code>AR9009.rpg36.txt</code> and <code>BI907.rpgle.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> within the Bradford Order Entry/Invoices system. Together, these programs support customer master file maintenance, specifically focusing on validating customer deletion (<code>AR9009</code>) and managing customer and shipto product data (<code>BI907</code>). Below, I identify the use cases implemented by these programs and provide a function requirement document for a large function that performs customer and shipto product maintenance without screen interaction, incorporating the process steps and business rules from both programs.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The programs collectively implement the following use cases:</p> <ol> <li>Customer Deletion Validation (<code>AR9009</code>):</li> <li>Validates whether a customer can be deleted from the customer master file by checking for existing activity (invoices or sales) in related files.</li> <li> <p>Ensures data integrity by preventing deletion of customers with active records.</p> </li> <li> <p>Customer and Shipto Product Maintenance (<code>BI907</code>):</p> </li> <li>Manages product-specific data for customers and shiptos, including alternate descriptions, freight codes, gallons billed codes, and container types.</li> <li>Supports adding, updating, deleting (marking as inactive), reactivating, and copying alternate descriptions, with history tracking.</li> <li>Provides inquiry mode to view data without modifications.</li> </ol> <p>Given that <code>AR9009</code> is a validation step within the broader customer maintenance process, and <code>BI907</code> handles detailed product data maintenance, these use cases are interconnected. For the function requirement document, I will focus on a consolidated function that performs Customer and Shipto Product Maintenance, incorporating the deletion validation logic from <code>AR9009</code> as a prerequisite check, assuming the function processes inputs programmatically rather than through a screen.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#customer-and-shipto-product-maintenance-function-requirements","title":"Customer and Shipto Product Maintenance Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#overview","title":"Overview","text":"<p>The Customer and Shipto Product Maintenance function programmatically manages product-specific data for customers and shiptos in the Bradford Order Entry/Invoices system, including validation to prevent deletion of customers with active records. It supports adding, updating, deleting (marking as inactive), reactivating, and copying alternate product descriptions, with history tracking.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>, 2 bytes, numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>, 6 bytes, numeric): Identifies the customer.</li> <li>Shipto Number (<code>ship</code>, 3 bytes, numeric): Identifies the shipto location.</li> <li>Mode (<code>mode</code>, 3 bytes, string): <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li>File Group (<code>fgrp</code>, 1 byte, string): <code>Z</code> or <code>G</code> for file overrides.</li> <li>Billing Instruction Code (<code>bcinst</code>, 1 byte, string): Determines if sales files are checked (<code>'5'</code> for sales check).</li> <li>Operation (<code>operation</code>, string): <code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>, <code>COPY</code>, or <code>INQUIRE</code>.</li> <li>Product Data List (array of records):</li> <li><code>prod</code> (4 bytes, string): Product code.</li> <li><code>cnty</code> (1 byte, string): Container type code.</li> <li><code>cpds</code> (20 bytes, string): Alternate product description.</li> <li><code>glcd</code> (1 byte, string): Gallons billed code (<code>'G'</code> or blank).</li> <li><code>frcd</code> (1 byte, string): Freight code (<code>'C'</code>, <code>'P'</code>, <code>'A'</code>, or blank).</li> <li><code>sfrt</code> (1 byte, string): Separate freight code (<code>'Y'</code>, <code>'N'</code>, or blank).</li> <li><code>cafr</code> (1 byte, string): Calculate freight code (<code>'Y'</code>, <code>'N'</code>, or blank).</li> <li>Copy Source (for <code>COPY</code> operation):</li> <li><code>copy_cust</code> (6 bytes, numeric): Source customer number.</li> <li><code>copy_ship</code> (3 bytes, numeric): Source shipto number.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Result (string): <code>SUCCESS</code>, <code>ERROR</code>, or <code>NO_ACTIVITY</code> (for deletion validation).</li> <li>Found Flag (<code>found</code>, 1 byte, string): <code>'A'</code> (invoices found), <code>'S'</code> (sales found), or blank (no activity, for deletion validation).</li> <li>Error Messages (array of strings): List of validation errors, if any.</li> <li>Processed Records (array of records): Returns updated or inquired records with fields as in input <code>Product Data List</code>, plus:</li> <li><code>exis</code> (1 byte, string): <code>'Y'</code> if record exists, <code>'N'</code> otherwise.</li> <li><code>del</code> (1 byte, string): <code>'D'</code> if deleted, <code>'A'</code> if active.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>co</code> exists in <code>BICONT</code>.</li> <li>Verify <code>cust</code> exists in <code>ARCUST</code>.</li> <li>Verify <code>ship</code> exists in <code>SHIPTO</code> for the given <code>cust</code> and <code>co</code>.</li> <li>If <code>operation = DELETE</code>, validate <code>bcinst</code> is <code>'5'</code> for sales checks.</li> <li> <p>For each record in <code>Product Data List</code>:</p> <ul> <li>Ensure <code>prod</code> exists in <code>GSPROD</code> and is sellable (<code>tpsell = 'Y'</code>).</li> <li>Ensure <code>cnty</code> exists in <code>GSTABL</code> (<code>CNTRTY</code> table) if not blank or <code>'A'</code>.</li> <li>Ensure <code>glcd</code> is <code>'G'</code> or blank.</li> <li>Ensure <code>frcd</code> exists in <code>GSTABL</code> (<code>BBFRCD</code> table) if not blank.</li> <li>Ensure <code>sfrt</code> and <code>cafr</code> are <code>'Y'</code>, <code>'N'</code>, or blank.</li> </ul> </li> <li> <p>Deletion Validation (if <code>operation = DELETE</code>):</p> </li> <li>Check <code>CRDETX</code> for active invoices (<code>ADDEL \u2260 'D'</code>, <code>ARDKEY = co + cust</code>).<ul> <li>If found, set <code>found = 'A'</code> and return <code>ERROR</code> with message \"Customer has active invoices\".</li> </ul> </li> <li>If <code>bcinst = '5'</code>, check sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for records matching <code>SACOCU = co + cust</code>.<ul> <li>If found, set <code>found = 'S'</code> and return <code>ERROR</code> with message \"Customer has sales activity\".</li> </ul> </li> <li> <p>If no activity found, set <code>found = ''</code> and proceed.</p> </li> <li> <p>Process Operation:</p> </li> <li>INQUIRE (<code>mode = 'INQ'</code>):<ul> <li>Retrieve records from <code>ARCUPR</code> for <code>co</code>, <code>cust</code>, <code>ship</code>, optionally filtered by <code>prod</code> and <code>cnty</code>.</li> <li>Include deleted records if specified.</li> <li>Return records with <code>exis = 'Y'</code> and <code>del</code> status.</li> </ul> </li> <li>ADD (<code>mode = 'MNT'</code>):<ul> <li>For each record in <code>Product Data List</code>, check if it exists in <code>ARCUPR</code> (<code>cpcono = co</code>, <code>cpcust = cust</code>, <code>cpship = ship</code>, <code>cpprod = prod</code>, <code>cpcnty = cnty</code>).</li> <li>If exists or marked deleted, return error \"Record already exists or is deleted\".</li> <li>Create new <code>ARCUPR</code> record with <code>cpdel = 'A'</code>, populate fields (<code>cpprod</code>, <code>cpcnty</code>, <code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>), and write.</li> <li>Log to <code>ARCUPHS</code> with current date, time, and user ID.</li> </ul> </li> <li>UPDATE (<code>mode = 'MNT'</code>):<ul> <li>For each record, verify existence in <code>ARCUPR</code>.</li> <li>Update existing record with new values, retaining <code>cpdel = 'A'</code>.</li> <li>Log to <code>ARCUPHS</code>.</li> </ul> </li> <li>DELETE (<code>mode = 'MNT'</code>):<ul> <li>Verify no activity via Step 2.</li> <li>For each record, verify existence in <code>ARCUPR</code> and <code>cpdel \u2260 'D'</code>.</li> <li>Set <code>cpdel = 'D'</code>, update <code>ARCUPR</code>, and log to <code>ARCUPHS</code>.</li> </ul> </li> <li>REACTIVATE (<code>mode = 'MNT'</code>):<ul> <li>For each record, verify existence in <code>ARCUPR</code> and <code>cpdel = 'D'</code>.</li> <li>Set <code>cpdel = 'A'</code>, update <code>ARCUPR</code>, and log to <code>ARCUPHS</code>.</li> </ul> </li> <li> <p>COPY (<code>mode = 'MNT'</code>):</p> <ul> <li>Verify <code>copy_cust</code> and <code>copy_ship</code> exist in <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Copy alternate descriptions (<code>cpcpds</code>) from source <code>ARCUPR</code> records (<code>cpcono = co</code>, <code>cpcust = copy_cust</code>, <code>cpship = copy_ship</code>) to target records.</li> <li>Add or update target <code>ARCUPR</code> records, log to <code>ARCUPHS</code>.</li> </ul> </li> <li> <p>Apply Freight Code Rules:</p> </li> <li>If <code>frcd = 'C'</code> (collect):<ul> <li><code>sfrt</code> and <code>cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Defaults: <code>sfrt = 'N'</code>, <code>cafr = 'N'</code> if blank.</li> <li>If <code>cafr = 'Y'</code>, calculate freight for non-Bradford locations (e.g., Anchor).</li> <li>If <code>sfrt = 'Y'</code>, apply $100 service fee for ARG-arranged shipping.</li> </ul> </li> <li>If <code>frcd = 'P'</code> (prepaid):<ul> <li>Defaults: <code>sfrt = 'N'</code>, <code>cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>If <code>frcd = 'A'</code> (prepaid &amp; add):</p> <ul> <li><code>sfrt</code> must be <code>'Y'</code>.</li> <li>Defaults: <code>cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Return <code>SUCCESS</code> with processed records if no errors.</li> <li>Return <code>ERROR</code> with error messages if validations fail.</li> <li>For <code>DELETE</code>, return <code>NO_ACTIVITY</code> if no invoices or sales found.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company, customer, and shipto must exist in respective files.</li> <li>Product codes must be sellable (<code>GSPROD.tpsell = 'Y'</code>).</li> <li>Container types and freight codes must exist in <code>GSTABL</code>.</li> <li>Gallons billed code must be <code>'G'</code> or blank.</li> <li> <p>Separate and calculate freight codes must be <code>'Y'</code>, <code>'N'</code>, or blank.</p> </li> <li> <p>Freight Code Logic:</p> </li> <li>Collect (<code>frcd = 'C'</code>): Supports non-Bradford locations (<code>cafr = 'Y'</code>) and ARG-arranged shipping with $100 fee (<code>sfrt = 'Y'</code>).</li> <li>Prepaid (<code>frcd = 'P'</code>): Freight included in price.</li> <li> <p>Prepaid &amp; Add (<code>frcd = 'A'</code>): Freight added separately, requires <code>sfrt = 'Y'</code>.</p> </li> <li> <p>Deletion Restrictions:</p> </li> <li>Customers with active invoices (<code>CRDETX</code>) or sales (if <code>bcinst = '5'</code>) cannot be deleted.</li> <li> <p>Deletion marks records as inactive (<code>cpdel = 'D'</code>) rather than physical deletion.</p> </li> <li> <p>Record Management:</p> </li> <li>Prevent adding duplicate or deleted records.</li> <li>Reactivation restores deleted records (<code>cpdel = 'A'</code>).</li> <li> <p>All changes (add, update, delete, reactivate, copy) are logged to <code>ARCUPHS</code>.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>Read-only access, no updates allowed.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Freight Service Fee (if <code>frcd = 'C'</code> and <code>sfrt = 'Y'</code>):</li> <li>Add $100 fee for ARG-arranged shipping (per <code>JB02</code>).</li> <li>Timestamp for History:</li> <li>Use system date and time (YYYYMMDD, HHMMSS) for <code>ARCUPHS</code> records.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files: <code>BICONT</code>, <code>ARCUST</code>, <code>SHIPTO</code>, <code>GSPROD</code>, <code>GSTABL</code>, <code>CRDETX</code>, <code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>, <code>ARCUPR</code>, <code>ARCUPHS</code>.</li> <li>External Logic: Assumes external validation for copying alternate descriptions (similar to <code>BI9078</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for invalid inputs, duplicate records, or deletion restrictions.</li> <li>Log errors in the output <code>Error Messages</code> array.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#explanation","title":"Explanation","text":"<ul> <li>Use Cases: The two programs cover customer deletion validation (<code>AR9009</code>) and comprehensive product data maintenance (<code>BI907</code>). These are treated as distinct but related use cases, with <code>AR9009</code> serving as a prerequisite for deletion in the broader maintenance process.</li> <li>Function Design: The function consolidates both use cases into a single, programmatic process, eliminating screen interactions. It incorporates <code>AR9009</code>\u2019s deletion validation as a step within the <code>DELETE</code> operation and extends <code>BI907</code>\u2019s functionality to handle all operations (add, update, delete, reactivate, copy, inquire) via structured inputs.</li> <li>Conciseness: The document focuses on business requirements (validations, freight rules, deletion restrictions, history tracking) and briefly describes calculations (freight fee, timestamp). Technical details like file structures are implied through dependencies.</li> <li>Assumptions: The function assumes external logic for copying alternate descriptions (akin to <code>BI9078</code>) and omits screen-specific logic (e.g., subfile handling) to focus on data processing.</li> </ul> <p>If you need further refinements or additional details, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/","title":"AR901 RPG36","text":"<p>The provided document, <code>AR901.rpg36.txt</code>, is an RPG II program for the IBM System/36, called from the main OCL program (<code>AR901P.ocl36.txt</code>). It generates a \"Customer Master File List,\" a report listing customer details. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#process-steps-of-the-rpg-ii-program","title":"Process Steps of the RPG II Program","text":"<p>The RPG II program <code>AR901</code> processes customer data from multiple files to produce a formatted printed report. It uses fixed-format specifications (F, I, C, O) typical of RPG II on System/36. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specification:<ul> <li><code>H P014</code>: Specifies program identifier <code>P014</code> for <code>AR901</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>FARCUST IP F 384 384R I DISK</code>: Primary input file <code>ARCUST</code> (customer master file), 384 bytes, indexed.</li> <li><code>FAR901S IR F 30 3 3IT EDISK</code>: Input file <code>AR901S</code>, 30 bytes, likely a selection or parameter file, externally described.</li> <li><code>FARCONT IC F 256 256R 2AI 2 DISK</code>: Input file <code>ARCONT</code> (company master file), 256 bytes, indexed, keyed on position 2 (<code>ARCO</code>, company number).</li> <li><code>FARCUSP IC F 1344 1344R 8AI 2 DISK</code>: Input file <code>ARCUSP</code> (customer supplemental file), 1344 bytes, indexed, keyed on position 2.</li> <li><code>FGSTABL IF F 256 256 12AI 2 DISK</code>: Input file <code>GSTABL</code> (table file), 256 bytes, indexed, keyed on position 2.</li> <li><code>FPRINTER O F 164 164 OF PRINTER</code>: Output file <code>PRINTER</code>, 164 bytes, for generating the printed report.</li> </ul> </li> <li>Extension Specification:<ul> <li><code>E AR901S ARCUST</code>: Links the externally described file <code>AR901S</code> to <code>ARCUST</code> for field definitions.</li> </ul> </li> <li> <p>Input Specifications:</p> <ul> <li><code>IARCUST NS 01</code>: Defines fields for <code>ARCUST</code>:</li> <li><code>ARCOCU</code> (positions 2-9): Customer number.</li> <li><code>ARCO</code> (positions 2-3, level L1): Company number.</li> <li><code>ARCUST</code> (positions 4-9): Customer number (subset of <code>ARCOCU</code>).</li> <li><code>ARNAME</code> (positions 10-39): Customer name.</li> <li><code>ARADR1-4</code> (positions 40-69, 70-99, 100-129, 130-159): Address lines 1-4.</li> <li><code>ARAREA</code> (positions 257-258, packed): Area code.</li> <li><code>ARTELE</code> (positions 259-262, packed): Telephone number.</li> <li><code>ARTERM</code> (positions 265-266): Terms code.</li> <li><code>IARCONT NS 02</code>: Defines fields for <code>ARCONT</code>:</li> <li><code>ACNAME</code> (positions 4-33): Company name.</li> <li><code>IARCUSP NS</code>: Defines fields for <code>ARCUSP</code>:</li> <li><code>CSCNCT</code> (positions 267-291): Contact name.</li> <li><code>IGSTABL NS 01</code>: Defines fields for <code>GSTABL</code>:</li> <li><code>TBDEL</code> (position 1): Deletion flag ('D' for deleted).</li> <li><code>TBTYPE</code> (positions 2-7): Table type.</li> <li><code>TBCODE</code> (positions 8-13): Table code.</li> <li><code>TBDESC</code> (positions 14-43): Table description.</li> </ul> </li> <li> <p>Main Processing Logic (Calculation Specifications):</p> </li> <li> <p>Level 1 (L1) Processing:</p> <ul> <li>Triggered for each <code>ARCUST</code> record matching the company number (<code>ARCO</code>, level indicator L1).</li> <li>Company Lookup:</li> <li><code>ARCO CHAIN ARCONT 99</code>: Chains (looks up) the company number in <code>ARCONT</code>.</li> <li>If not found (<code>*in99 = *on</code>), sets <code>ACNAME</code> to blanks.</li> <li>Time and Date Setup:</li> <li><code>TIME TIME12 120</code>: Retrieves the system time into <code>TIME12</code> (12 digits).</li> <li><code>MOVEL TIME12 TIME 60</code>: Moves the time to a 6-character field.</li> <li><code>MOVE TIME12 DATE 60</code>: Moves the date portion to a 6-character field (formatted as YYMMDD).</li> <li><code>Z-ADD *ZEROS PAGE</code>: Initializes the page number to 0.</li> <li>Customer Data Processing:</li> <li><code>Z-ADD ARAREA AREA 30</code>: Moves the area code to <code>AREA</code> (3 digits, zoned).</li> <li><code>Z-ADD ARTELE TELE 70</code>: Moves the telephone number to <code>TELE</code> (7 digits, zoned).</li> <li><code>ARCOCU CHAIN ARCUSP 97</code>: Chains the customer number to <code>ARCUSP</code> to retrieve contact information.</li> <li>If not found (<code>*in97 = *on</code>), sets <code>CSCNCT</code> to blanks.</li> <li>Terms Code Lookup:<ul> <li><code>MOVEL 'ARTERM' TRMKEY 12</code>: Sets the table key prefix to 'ARTERM'.</li> <li><code>MOVE ARTERM TRMKEY</code>: Appends the terms code to <code>TRMKEY</code>.</li> <li><code>TRMKEY CHAIN GSTABL 99</code>: Chains to <code>GSTABL</code> to retrieve the terms description.</li> <li>If found (<code>*in99 = *off</code>), moves <code>TBDESC</code> to <code>TRMDSC</code> (20 characters); otherwise, sets <code>TRMDSC</code> to blanks.</li> </ul> </li> </ul> </li> <li> <p>Output Processing (Output Specifications):</p> </li> <li>Header Output (H):<ul> <li><code>OPRINTER H 103 L1</code>: Prints header lines at level 1 (for each company).</li> <li>Outputs:</li> <li><code>ACNAME</code> (company name, position 30).</li> <li>Literal 'PAGE' (position 134).</li> <li><code>PAGE</code> (zoned, position 138).</li> <li>Literal 'DATE' (position 150).</li> <li><code>DATE</code> (formatted as YY/MM/DD, position 159).</li> <li><code>H 2 L1</code>: Prints a title line:</li> <li>Literal ' CUSTOMER MASTER LIST ' (position 77).</li> <li>Literal 'TIME' (position 150).</li> <li><code>TIME</code> (formatted as HH.MM.SS, position 159).</li> </ul> </li> <li>Detail Lines (D):<ul> <li><code>D 1 L1</code>: Prints decorative lines (asterisks) for formatting (positions 24, 48, 72, 96, 120, 144, 164).</li> <li><code>D 1 L1</code>: Prints column headers:</li> <li>'CUST#' (position 6).</li> <li>'CUSTOMER NAME' (position 20).</li> <li>'ADDRESS' (position 52).</li> <li>'PHONE' (position 83).</li> <li>'CONTACT' (position 102).</li> <li>'PAYMENT TERMS' (position 137).</li> <li><code>D 2 L1</code>: Prints additional decorative lines for formatting.</li> <li><code>D 2 01</code>: Prints customer details:</li> <li><code>ARCUST</code> (customer number, zoned, position 6).</li> <li><code>ARNAME</code> (customer name, position 37).</li> <li><code>ARADR1</code> (address line 1, position 68).</li> <li><code>AREA</code> (area code, zoned, blank-suppressed, position 74).</li> <li><code>TELE</code> (telephone, blank-suppressed, formatted as XXX-XXXX, position 83).</li> <li><code>CSCNCT</code> (contact name, position 121).</li> <li><code>TRMDSC</code> (terms description, position 144).</li> <li><code>D 1 01</code>: Prints additional address lines:</li> <li><code>ARADR2</code> (address line 2, position 68).</li> <li><code>ARADR3</code> (address line 3, position 68).</li> <li><code>ARADR4</code> (address line 4, position 68, conditional on <code>*in10 = *off</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the customer master list:</p> <ol> <li>Company Validation:</li> <li>For each customer record in <code>ARCUST</code>, the company number (<code>ARCO</code>) is looked up in <code>ARCONT</code> to retrieve the company name (<code>ACNAME</code>).</li> <li> <p>If no matching company is found, the company name is blank.</p> </li> <li> <p>Customer Data Retrieval:</p> </li> <li>Customer number (<code>ARCOCU</code>) is used to retrieve contact information (<code>CSCNCT</code>) from <code>ARCUSP</code>.</li> <li> <p>If no matching record is found, the contact name is blank.</p> </li> <li> <p>Terms Code Lookup:</p> </li> <li>The terms code (<code>ARTERM</code>) is used to look up a description in <code>GSTABL</code> with the key 'ARTERM' + <code>ARTERM</code>.</li> <li> <p>If found, the description (<code>TBDESC</code>) is used; otherwise, the terms description (<code>TRMDSC</code>) is blank.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report is grouped by company (<code>L1</code> level), with headers including company name, page number, date, and time.</li> <li>Customer details include customer number, name, address (up to 4 lines), phone number (formatted as XXX-XXXX), contact name, and payment terms description.</li> <li> <p>Address line 4 is printed only if indicator <code>*in10</code> is off (likely controlled by parameters from <code>AR901P</code>).</p> </li> <li> <p>Data Formatting:</p> </li> <li>Numeric fields like <code>ARAREA</code> and <code>ARTELE</code> are converted to zoned format for printing.</li> <li>The telephone number is formatted with a hyphen (XXX-XXXX).</li> <li>The date is formatted as YY/MM/DD, and the time as HH.MM.SS.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>ARCUST:</li> <li>Type: Primary input file (disk, indexed).</li> <li>Record Length: 384 bytes.</li> <li>Key: Not explicitly defined in the code but implied to be <code>ARCO</code> (company number) for level processing.</li> <li>Fields:<ul> <li><code>ARCOCU</code> (positions 2-9): Customer number (8 characters).</li> <li><code>ARCO</code> (positions 2-3): Company number (2 characters, level L1).</li> <li><code>ARCUST</code> (positions 4-9): Customer number (6 characters).</li> <li><code>ARNAME</code> (positions 10-39): Customer name (30 characters).</li> <li><code>ARADR1-4</code> (positions 40-159): Address lines (30 characters each).</li> <li><code>ARAREA</code> (positions 257-258, packed): Area code (3 digits).</li> <li><code>ARTELE</code> (positions 259-262, packed): Telephone number (7 digits).</li> <li><code>ARTERM</code> (positions 265-266): Terms code (2 digits).</li> </ul> </li> <li> <p>Purpose: Main customer master file containing core customer data.</p> </li> <li> <p>AR901S:</p> </li> <li>Type: Input file (disk, externally described).</li> <li>Record Length: 30 bytes.</li> <li> <p>Purpose: Likely contains selection parameters (e.g., company or customer filters) from <code>AR901P</code>. Linked to <code>ARCUST</code> via the extension specification.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: Position 2 (<code>ARCO</code>, company number).</li> <li>Fields:<ul> <li><code>ACNAME</code> (positions 4-33): Company name (30 characters).</li> </ul> </li> <li> <p>Purpose: Stores company details for the report header.</p> </li> <li> <p>ARCUSP:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 1344 bytes.</li> <li>Key: Position 2 (likely customer number).</li> <li>Fields:<ul> <li><code>CSCNCT</code> (positions 267-291): Contact name (25 characters).</li> </ul> </li> <li> <p>Purpose: Stores supplemental customer data, such as contact information.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: Position 2 (likely <code>TBTYPE</code> + <code>TBCODE</code>).</li> <li>Fields:<ul> <li><code>TBDEL</code> (position 1): Deletion flag ('D' for deleted).</li> <li><code>TBTYPE</code> (positions 2-7): Table type (6 characters).</li> <li><code>TBCODE</code> (positions 8-13): Table code (6 characters).</li> <li><code>TBDESC</code> (positions 14-43): Table description (30 characters).</li> </ul> </li> <li> <p>Purpose: Stores lookup data for terms codes (e.g., payment terms descriptions).</p> </li> <li> <p>PRINTER:</p> </li> <li>Type: Output file (printer).</li> <li>Record Length: 164 bytes.</li> <li>Purpose: Generates the printed customer master list report.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called within <code>AR901.rpg36</code> (e.g., via <code>CALL</code> operations). The program is invoked by the OCL program (<code>AR901P.ocl36.txt</code>), which loads and runs <code>AR901</code> (referenced in the <code>JOBQ</code> or <code>ELSE</code> clause). The RPGLE program <code>AR901P</code> likely passes parameters (e.g., <code>kyalco</code>, <code>kyco1-kyco3</code>, <code>addlst</code>) that control the report\u2019s behavior, but no direct program calls occur within <code>AR901</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Integration with OCL and RPGLE:</li> <li>The OCL program (<code>AR901P.ocl36.txt</code>) sets up the environment, loads <code>AR901P</code>, and optionally queues or runs <code>AR901</code>.</li> <li>The RPGLE program (<code>AR901P.rpgle</code>) collects and validates user input (e.g., company/customer selections, address list flag) and passes parameters to <code>AR901</code> via shared memory or files like <code>AR901S</code>.</li> <li> <p><code>AR901</code> processes these parameters to filter records from <code>ARCUST</code> and generate the report.</p> </li> <li> <p>Indicator Usage:</p> </li> <li><code>*in99</code>: Indicates whether a <code>CHAIN</code> to <code>ARCONT</code> or <code>GSTABL</code> fails.</li> <li><code>*in97</code>: Indicates whether a <code>CHAIN</code> to <code>ARCUSP</code> fails.</li> <li><code>*in10</code>: Controls whether address line 4 (<code>ARADR4</code>) is printed (likely set by <code>addlst</code> from <code>AR901P</code>).</li> <li> <p><code>L1</code>: Level indicator for processing records by company number (<code>ARCO</code>).</p> </li> <li> <p>Report Structure:</p> </li> <li>The report includes a header with company name, page number, date, and time, followed by a formatted customer list with columns for customer number, name, address, phone, contact, and payment terms.</li> <li> <p>Decorative lines (asterisks) separate sections for readability.</p> </li> <li> <p>No Chart Generation:</p> </li> <li>The query does not request a chart, and no numerical data is provided for visualization, so no chart is generated.</li> </ul> <p>If you need further analysis (e.g., specific field mappings, sample report output, or deeper integration details with <code>AR901P</code>), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/","title":"AR901P OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, specifically <code>AR901P.ocl36.txt</code>, used to control job execution in IBM System/36 environments. OCL is a scripting language for managing job steps, file operations, and program execution on System/36. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and list the tables (or files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL programs define job control steps, including program execution, file handling, and conditional logic. Here\u2019s a breakdown of the steps in <code>AR901P.ocl36.txt</code>:</p> <ol> <li>Invoke GSGENIEC Program:</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>This command calls an external program named <code>GSGENIEC</code>.</li> <li>Likely a utility or initialization program, possibly for setting up the environment or validating conditions before proceeding.</li> <li>No parameters are explicitly passed in this call.</li> </ul> </li> <li> <p>Conditional Check on Location 506, Position 3:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This checks the value at memory location 506, position 3 (likely a system switch or flag).</li> <li>If the condition evaluates to <code>YES</code> (true), the job terminates (<code>RETURN</code>).</li> <li>This acts as an early exit condition, possibly to skip execution based on a specific system state.</li> </ul> </li> <li> <p>Set Local Variables to Blank:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>Initializes all local variables to blank (empty).</li> <li>Ensures a clean state for subsequent processing, preventing residual data from affecting the job.</li> </ul> </li> <li> <p>Set Procedure Context:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This command likely sets up a procedure context or scope for the job.</li> <li>The <code>,,,,,,,?9?</code> indicates placeholders for parameters, with <code>?9?</code> possibly referring to a specific library, file, or parameter (context-specific, often a system-defined value).</li> <li>Exact meaning depends on the system configuration, but it\u2019s typically for procedure execution control.</li> </ul> </li> <li> <p>Invoke GSY2K:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls a program or procedure named <code>GSY2K</code>.</li> <li>Likely a utility for Year 2000 compliance or date-related processing, common in legacy systems like System/36.</li> <li>No additional parameters are specified.</li> </ul> </li> <li> <p>Set Switch to 0XXXXXXX:</p> </li> <li> <p><code>// SWITCH 0XXXXXXX</code>:</p> <ul> <li>Sets a system switch to the pattern <code>0XXXXXXX</code> (a binary or bit pattern).</li> <li>In System/36, switches control program flow or behavior. Here, the first bit is set to <code>0</code>, and the remaining bits (<code>XXXXXXX</code>) are unspecified or left unchanged.</li> <li>This configures the environment for the subsequent program load.</li> </ul> </li> <li> <p>Load the AR901P Program:</p> </li> <li> <p><code>// LOAD AR901P</code>:</p> <ul> <li>Loads the main program <code>AR901P</code> into memory for execution.</li> <li>This is likely the core RPG program responsible for generating the \"Customer Master Listing.\"</li> </ul> </li> <li> <p>Define File ARCONT:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> with a label <code>?9?ARCONT</code> (the <code>?9?</code> prefix likely indicates a library or system-specific naming convention).</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple jobs to access it concurrently.</li> <li>This file is likely the customer master file containing data for the listing.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Initiates execution of the loaded program (<code>AR901P</code>).</li> <li>The program processes the <code>ARCONT</code> file to generate the customer master listing.</li> </ul> </li> <li> <p>Check Switch 1 and Cancel if Set:</p> <ul> <li><code>// IF SWITCH1-1 CANCEL</code>:</li> <li>Checks if the first switch (bit) is set to <code>1</code>.</li> <li>If true, the job is canceled, terminating execution.</li> <li>This provides a conditional exit based on runtime conditions (e.g., an error or specific state).</li> </ul> </li> <li> <p>Conditional Job Queue or Direct Execution:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR901,,,,,,,,,?9?</code>:</li> <li>Checks the value at memory location 120, position 1.</li> <li>If true (<code>/Y</code>), the job <code>AR901</code> is submitted to a job queue in the library <code>?CLIB?</code> (a placeholder for a specific library), with <code>?9?</code> indicating additional parameters or a system-specific value.</li> <li>This queues the job for asynchronous execution.</li> <li><code>// ELSE AR901 ,,,,,,,,?9?</code>:</li> <li>If the condition is false, the <code>AR901</code> job is executed directly (synchronously) with placeholder parameters (<code>?9?</code>).</li> <li>This provides flexibility to either queue or run the job based on system state.</li> </ul> </li> <li> <p>Reset Local Variables:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Again, sets all local variables to blank at the end of the job.</li> <li>Ensures cleanup and prevents data leakage for subsequent jobs.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility program for initialization or environment setup. 2. GSY2K:    - Invoked via <code>// GSY2K</code>.    - Possibly a Year 2000 compliance utility or date-processing program. 3. AR901P:    - Loaded and executed via <code>// LOAD AR901P</code> and <code>// RUN</code>.    - The main RPG program that processes the customer master file to produce the listing. 4. AR901:    - Referenced in the conditional job queue or execution step (<code>JOBQ ?CLIB?,AR901</code> or <code>AR901</code>).    - Likely the same as <code>AR901P</code> or a related program/procedure for generating the customer master listing.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following file (table): 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - This is likely the customer master file, containing records such as customer IDs, names, addresses, or other relevant data used by <code>AR901P</code> to generate the listing.    - The <code>?9?</code> prefix in the label suggests a library or system-specific naming convention (e.g., a library like <code>QS36F</code> or a user-defined library).    - Opened in shared mode (<code>DISP-SHR</code>), indicating it can be accessed by multiple jobs.</p> <p>No other files or tables are explicitly mentioned in the OCL code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Placeholder <code>?9?</code>: The <code>?9?</code> appears multiple times (e.g., in <code>SCPROCP</code>, file labels, and job queue parameters). This is likely a system-specific variable or library reference, possibly resolved at runtime based on the System/36 configuration.</li> <li>System/36 Context: The OCL syntax and commands like <code>SWITCH</code>, <code>LOCAL</code>, and <code>JOBQ</code> are specific to IBM System/36, a midrange computer system from the 1980s. The program assumes a legacy environment with RPG II or RPG III for business applications.</li> <li>Conditional Logic: The use of <code>IFF</code> and <code>IF</code> statements with memory locations (<code>?L'506,3'?</code> and <code>?L'120,1'?</code>) suggests dynamic control based on system or job states, typical in batch processing environments.</li> <li>No Chart Generation: Since the query does not explicitly request a chart and no numerical data is provided, no chart is generated.</li> </ul> <p>If you need further clarification or analysis (e.g., details about <code>AR901P</code>\u2019s RPG logic, assuming its code is available), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/","title":"AR901P RPGLE","text":"<p>The provided document, <code>AR901P.rpgle.txt</code>, is an RPGLE (RPG IV) program for IBM System/36 or AS/400 (IBM i) that generates a \"Customer Master Listing.\" It is called from the previously analyzed OCL program (<code>AR901P.ocl36.txt</code>). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program <code>AR901P</code> is designed to prompt for user input, validate parameters, and prepare data for generating a customer master listing. It interacts with a workstation display file (<code>ar901pd</code>) and processes data from customer master files (<code>arcont</code> and <code>gscont</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group, ensuring modern RPG IV behavior.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures numeric fields are handled as zoned or packed decimal during input.</li> <li><code>H DFTNAME(AR901P)</code>: Sets the default program name to <code>AR901P</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>far901pd cf e workstn Handler('PROFOUNDUI(HANDLER)')</code>: Defines a workstation file for interactive display, using a Profound UI handler for modern UI support.</li> <li><code>farcont if f 256 2aidisk keyloc(2)</code>: Defines the customer master file <code>ARCONT</code> as input, with a record length of 256 bytes, indexed (keyed) on field position 2 (<code>acco</code>, company number).</li> <li><code>fgscont if f 512 2aidisk keyloc(2)</code>: Defines another file <code>GSCONT</code>, likely a global or system control file, also keyed on position 2 (<code>gxcono</code>, company number).</li> </ul> </li> <li> <p>Data Structures and Variables:</p> <ul> <li><code>dco</code>: Array of 35-character fields to store company data (up to 3 companies).</li> <li><code>msg</code>: Array of 25-character messages for user feedback (e.g., \"ENTER ALL OR CO\", \"INVALID COMPANY #\").</li> <li><code>uds</code>: User data structure defining input fields like <code>kyalco</code> (all/company selection), <code>kyco1-kyco3</code> (company numbers), <code>kyalcs</code> (all/select customer selection), <code>kycs01-kycs10</code> (customer numbers), <code>addlst</code> (address list flag), <code>dollst</code> (dollar list flag), <code>kyjobq</code> (job queue flag), and <code>kycopy</code> (number of copies).</li> </ul> </li> <li> <p>Workstation File Processing:</p> </li> <li>Initial Screen Check:<ul> <li>If <code>qsctl</code> (control field) is blank, set indicator <code>*in01</code> to '1' and <code>qsctl</code> to 'R' to display the input screen (<code>ar901pfm</code>).</li> <li>Otherwise, read the workstation file (<code>ar901pfm</code>). If the last record is read (<code>lr</code>), the program terminates (<code>return</code>).</li> </ul> </li> <li> <p>Cancel Key Check:</p> <ul> <li>If <code>*inkg</code> (cancel key, e.g., F3) is pressed, set <code>*inu1</code> and <code>*inlr</code> to <code>*on</code>, clear <code>*in01</code>, and jump to the <code>end</code> tag to exit the program.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>Conditional Subroutine Calls:<ul> <li>If <code>*in10</code> is <code>*on</code> (indicating prior initialization), call the <code>edit</code> subroutine if <code>*in11</code> is <code>*off</code>.</li> <li>If <code>*in10</code> is <code>*off</code> (first run), call the <code>onetim</code> subroutine if <code>*in11</code> is <code>*off</code>.</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>If <code>*in11</code> is <code>*off</code>, write to the workstation file (<code>ar901pfm</code>) to display the input screen.</li> <li>If <code>*in11</code> is <code>*on</code>, set <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul> </li> <li> <p>Edit Subroutine (<code>edit</code>):</p> </li> <li>Validates user input parameters for generating the customer master listing.</li> <li> <p>Steps:</p> <ul> <li>Clear error indicators (<code>*in31</code> to <code>*in38</code>) and message output (<code>msgout</code>).</li> <li>Validate <code>kyalco</code> (All/Company Selection):</li> <li>If <code>kyalco</code> is neither 'ALL' nor 'CO ', set <code>*in31</code> and display message \"ENTER ALL OR CO\".</li> <li>Validate Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>):</li> <li>If <code>kyalco</code> is 'CO ' and all company numbers are zero, set <code>*in31</code> and display \"ENTER COMPANY #\".</li> <li>For each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:<ul> <li>Position the file pointer (<code>setll</code>) on <code>arcont</code> using the company number.</li> <li>Read the record. If no record exists (<code>*in20</code> is <code>*on</code>) or the record is deleted (<code>acdel = 'D'</code>) or the company number doesn\u2019t match, set <code>*in32</code>, <code>*in33</code>, or <code>*in34</code> and display \"INVALID COMPANY #\".</li> </ul> </li> <li>Validate <code>kyalcs</code> (All/Select Customer Selection):</li> <li>If <code>kyalcs</code> is neither 'ALL' nor 'SEL', set <code>*in35</code> and display \"ENTER ALL OR SEL\".</li> <li>If <code>kyalcs</code> is 'SEL' and all customer numbers (<code>kycs01</code> to <code>kycs10</code>) are zero, set <code>*in39</code> and display \"ENTER CUSTOMER #\".</li> <li>Validate <code>addlst</code> (Address List Flag):</li> <li>If <code>addlst</code> is not 'Y', 'N', or blank, set <code>*in36</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Validate <code>dollst</code> (Dollar List Flag):</li> <li>If <code>dollst</code> is not 'Y', 'N', or blank, set <code>*in37</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Validate <code>kyjobq</code> (Job Queue Flag):</li> <li>If <code>kyjobq</code> is not 'Y', 'N', or blank, set <code>*in38</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Set Default for <code>kycopy</code>:</li> <li>If <code>kycopy</code> (number of copies) is zero, set it to 1.</li> <li>Set Default for <code>addlst</code> and <code>dollst</code>:</li> <li>If both <code>addlst</code> and <code>dollst</code> are not 'Y', set <code>addlst</code> to 'Y'.</li> <li>End of Validation:</li> <li>Set <code>*in11</code> to <code>*on</code> to indicate validation is complete and return to the main loop.</li> </ul> </li> <li> <p>One-Time Subroutine (<code>onetim</code>):</p> </li> <li>Performs initial setup for the program.</li> <li> <p>Steps:</p> <ul> <li>Clear the <code>dco</code> array and initialize variables (<code>x = 1</code>, <code>arlim = 00</code>).</li> <li>Position the file pointer (<code>setll</code>) on <code>arcont</code> using <code>arlim</code> (likely to read from the start).</li> <li>Read <code>arcont</code> records in a loop (<code>agnco</code>):</li> <li>Skip deleted records (<code>acdel = 'D'</code>).</li> <li>Store company number (<code>acco</code>) and name (<code>acname</code>) in the <code>dco</code> array.</li> <li>Increment <code>x</code> until 3 records are processed or end of file (<code>*in20</code> is <code>*on</code>).</li> <li>Move <code>dco(1)</code>, <code>dco(2)</code>, and <code>dco(3)</code> to output fields <code>dco1</code>, <code>dco2</code>, and <code>dco3</code> for display.</li> <li>Check <code>gscont</code> File:</li> <li>Chain (lookup) to <code>gscont</code> using key '00'.</li> <li>If found (<code>*in99</code> is <code>*off</code>) and <code>gxcono</code> is non-zero, set <code>kyalco</code> to 'CO ' and <code>kyco1</code> to <code>gxcono</code>.</li> <li>Otherwise, set <code>kyalco</code> to 'ALL'.</li> <li>Set Defaults:</li> <li>Set <code>kyalcs</code> to 'ALL', <code>addlst</code> to 'Y', <code>dollst</code> to blank, <code>kyjobq</code> to 'N', and <code>kycopy</code> to 1.</li> <li>Set <code>*in10</code> to <code>*on</code> to indicate initialization is complete and clear <code>*in20</code>.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Write to <code>ar901pfm</code> (workstation file) if <code>*in11</code> is <code>*off</code>, outputting fields like <code>kyalco</code>, <code>kyco1-kyco3</code>, <code>dco</code>, <code>kyalcs</code>, <code>kycs01-kycs10</code>, <code>addlst</code>, <code>dollst</code>, <code>kyjobq</code>, <code>kycopy</code>, and <code>msgout</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the customer master listing:</p> <ol> <li>Company Selection (<code>kyalco</code>):</li> <li>Must be 'ALL' (all companies) or 'CO ' (specific companies).</li> <li> <p>If 'CO ', at least one valid company number (<code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>) must be provided and must exist in <code>arcont</code> without being deleted (<code>acdel \u2260 'D'</code>).</p> </li> <li> <p>Customer Selection (<code>kyalcs</code>):</p> </li> <li>Must be 'ALL' (all customers) or 'SEL' (selected customers).</li> <li> <p>If 'SEL', at least one customer number (<code>kycs01</code> to <code>kycs10</code>) must be non-zero.</p> </li> <li> <p>Address and Dollar List Flags (<code>addlst</code>, <code>dollst</code>):</p> </li> <li>Must be 'Y' (yes), 'N' (no), or blank.</li> <li> <p>If both are not 'Y', <code>addlst</code> defaults to 'Y' to ensure at least one report type is generated.</p> </li> <li> <p>Job Queue Flag (<code>kyjobq</code>):</p> </li> <li> <p>Must be 'Y' (queue the job), 'N' (run interactively), or blank.</p> </li> <li> <p>Number of Copies (<code>kycopy</code>):</p> </li> <li> <p>Defaults to 1 if zero is entered.</p> </li> <li> <p>Data Validation:</p> </li> <li>Company numbers must exist in <code>arcont</code> and not be marked as deleted.</li> <li> <p>Invalid inputs result in error messages displayed to the user, prompting correction.</p> </li> <li> <p>Initialization:</p> </li> <li>The <code>onetim</code> subroutine populates default values and retrieves up to three company records from <code>arcont</code> for display.</li> <li>The <code>gscont</code> file provides a default company number if available; otherwise, 'ALL' is used.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR901PD:</li> <li>Type: Workstation file (display file).</li> <li>Purpose: Handles interactive user input/output via the <code>ar901pfm</code> format.</li> <li> <p>Handler: Uses Profound UI (<code>PROFOUNDUI(HANDLER)</code>) for modern UI rendering.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: <code>acco</code> (company number, position 2).</li> <li>Fields:<ul> <li><code>acdel</code> (position 1, 1 byte): Deletion flag ('D' for deleted).</li> <li><code>acco</code> (position 2-3, 2 bytes, numeric): Company number.</li> <li><code>acname</code> (position 4-33, 30 bytes): Company name.</li> </ul> </li> <li> <p>Purpose: Stores customer master data (company details).</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 512 bytes.</li> <li>Key: Position 2 (likely <code>gxcono</code>, company number).</li> <li>Fields:<ul> <li><code>gxdel</code> (position 1, 1 byte): Deletion flag.</li> <li><code>gxcono</code> (position 77-78, 2 bytes, numeric): Company number.</li> </ul> </li> <li>Purpose: Likely a system control file storing default or global company settings.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called (e.g., via <code>CALL</code> operation) within <code>AR901P.rpgle</code>. The program interacts with the OCL program (<code>AR901P.ocl36.txt</code>) that loads and runs it, and it uses the Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) for workstation file processing, but this is a system-level interface, not a program call.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Conversion Notes:</li> <li>The program was converted on 04/08/23 using TARGET/400, with 161 lines added (<code>T4A</code>), 5 modified (<code>T4M</code>), and original lines (<code>T4O</code>) retained from an older RPG source.</li> <li> <p>Conversion likely modernized the program from RPG II/III to RPGLE, adding features like <code>EVAL</code> and modern file handling.</p> </li> <li> <p>Indicators:</p> </li> <li>Uses indicators (<code>*in01</code>, <code>*in10</code>, <code>*in11</code>, <code>*in20</code>, <code>*in31</code> to <code>*in39</code>, etc.) for flow control and error handling, typical in legacy RPG.</li> <li> <p>Modernized with <code>EVAL</code> for setting indicators (e.g., <code>eval *in31 = *on</code> instead of <code>SETON 31</code>).</p> </li> <li> <p>OCL Integration:</p> </li> <li>The OCL program (<code>AR901P.ocl36.txt</code>) sets up the environment, loads <code>AR901P</code>, and passes parameters via memory locations (e.g., <code>kyjobq</code> at position 120).</li> <li> <p>The RPGLE program uses these parameters (e.g., <code>kyjobq</code>, <code>kycopy</code>) to control job execution (interactive or queued).</p> </li> <li> <p>No Chart Generation:</p> </li> <li>The query does not request a chart, and no numerical data is provided for visualization, so no chart is generated.</li> </ul> <p>If you need further details (e.g., specific field mappings, sample output format, or integration with other programs), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/","title":"Summary AR901P OCL","text":"<p>The call stack consists of three programs: the OCL program (<code>AR901P.ocl36.txt</code>), the RPGLE program (<code>AR901P.rpgle.txt</code>), and the RPG II program (<code>AR901.rpg36.txt</code>). These programs work together to generate a \"Customer Master File List\" report on the IBM System/36. Below, I\u2019ll identify the use cases implemented by this program suite and provide a concise function requirements document for a non-interactive version of the primary use case, assuming inputs are provided programmatically rather than via a screen.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The program suite implements a single primary use case:</p> <ol> <li>Generate Customer Master File List Report:</li> <li>Description: Produces a printed report listing customer details, including customer number, name, address, phone number, contact name, and payment terms, grouped by company. The report can be filtered by company number(s) or customer number(s), with options to include address details, run interactively or in batch, and specify the number of copies.</li> <li>Components:<ul> <li>OCL Program (<code>AR901P.ocl36.txt</code>): Sets up the job environment, calls initialization utilities (<code>GSGENIEC</code>, <code>GSY2K</code>), loads the RPGLE program (<code>AR901P</code>), and conditionally queues or runs the RPG II program (<code>AR901</code>).</li> <li>RPGLE Program (<code>AR901P.rpgle</code>): Collects and validates user inputs (company/customer selections, address list flag, job queue flag, number of copies) and prepares parameters for the report generation.</li> <li>RPG II Program (<code>AR901.rpg36</code>): Processes customer data from files (<code>ARCUST</code>, <code>ARCONT</code>, <code>ARCUSP</code>, <code>GSTABL</code>) and generates the printed report.</li> </ul> </li> </ol> <p>No additional distinct use cases are evident, as the programs focus on a single workflow: generating a customer master list report with configurable parameters.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#function-requirements-document","title":"Function Requirements Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#customer-master-list-function-requirements","title":"Customer Master List Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#overview","title":"Overview","text":"<p>The <code>GenerateCustomerMasterList</code> function generates a customer master file list report, listing customer details (customer number, name, address, phone, contact, payment terms) grouped by company. It accepts input parameters programmatically (no screen interaction) and produces a printed report, supporting filtering by company/customer and configuration options.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection (<code>kyalco</code>, string):</li> <li>Values: 'ALL' (all companies) or 'CO ' (specific companies).</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, numeric, 2 digits each):</li> <li>Required if <code>kyalco = 'CO '</code>. Must exist in <code>ARCONT</code> and not be deleted (<code>acdel \u2260 'D'</code>).</li> <li>Customer Selection (<code>kyalcs</code>, string):</li> <li>Values: 'ALL' (all customers) or 'SEL' (selected customers).</li> <li>Customer Numbers (<code>kycs01</code> to <code>kycs10</code>, numeric, 6 digits each):</li> <li>Required if <code>kyalcs = 'SEL'</code>. At least one non-zero value.</li> <li>Address List Flag (<code>addlst</code>, string):</li> <li>Values: 'Y' (include address line 4), 'N' (exclude), or blank.</li> <li>Dollar List Flag (<code>dollst</code>, string):</li> <li>Values: 'Y', 'N', or blank (not used in report generation but validated).</li> <li>Job Queue Flag (<code>kyjobq</code>, string):</li> <li>Values: 'Y' (queue report job), 'N' (run interactively), or blank.</li> <li>Number of Copies (<code>kycopy</code>, numeric, 2 digits):</li> <li>Number of report copies (default: 1 if zero).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Report (<code>PRINTER</code> file):</li> <li>Format: 164-character lines, grouped by company.</li> <li>Header: Company name, page number, date (YY/MM/DD), time (HH.MM.SS).</li> <li>Columns: Customer number (6 digits), name (30 chars), address (4 lines, 30 chars each, line 4 conditional on <code>addlst = 'Y'</code>), phone (XXX-XXXX), contact name (25 chars), payment terms (20 chars).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Check <code>kyalco</code> is 'ALL' or 'CO '; else return error \"ENTER ALL OR CO\".</li> <li>If <code>kyalco = 'CO '</code>, verify <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code> are non-zero, exist in <code>ARCONT</code>, and not deleted; else return \"ENTER COMPANY #\" or \"INVALID COMPANY #\".</li> <li>Check <code>kyalcs</code> is 'ALL' or 'SEL'; else return \"ENTER ALL OR SEL\".</li> <li>If <code>kyalcs = 'SEL'</code>, ensure at least one <code>kycs01</code> to <code>kycs10</code> is non-zero; else return \"ENTER CUSTOMER #\".</li> <li>Check <code>addlst</code>, <code>dollst</code>, <code>kyjobq</code> are 'Y', 'N', or blank; else return \"ENTER Y, N OR BLANK\".</li> <li>Set <code>kycopy</code> to 1 if zero.</li> <li> <p>If <code>addlst \u2260 'Y'</code> and <code>dollst \u2260 'Y'</code>, set <code>addlst = 'Y'</code>.</p> </li> <li> <p>Initialize Data:</p> </li> <li>Retrieve up to three company records from <code>ARCONT</code> (company number, name) for filtering.</li> <li>Check <code>GSCONT</code> for default company number (<code>gxcono</code>); set <code>kyalco = 'CO '</code> and <code>kyco1 = gxcono</code> if found, else <code>kyalco = 'ALL'</code>.</li> <li> <p>Set defaults: <code>kyalcs = 'ALL'</code>, <code>addlst = 'Y'</code>, <code>dollst = ' '</code>, <code>kyjobq = 'N'</code>, <code>kycopy = 1</code>.</p> </li> <li> <p>Process Customer Records:</p> </li> <li>Read <code>ARCUST</code> records, filtered by:<ul> <li><code>kyalco = 'ALL'</code>: All records.</li> <li><code>kyalco = 'CO '</code>: Records matching <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>.</li> <li><code>kyalcs = 'ALL'</code>: All customers per company.</li> <li><code>kyalcs = 'SEL'</code>: Customers matching <code>kycs01</code> to <code>kycs10</code>.</li> </ul> </li> <li> <p>For each record:</p> <ul> <li>Chain <code>ARCO</code> to <code>ARCONT</code> for company name (<code>ACNAME</code>); set to blanks if not found.</li> <li>Chain <code>ARCOCU</code> to <code>ARCUSP</code> for contact name (<code>CSCNCT</code>); set to blanks if not found.</li> <li>Chain <code>ARTERM</code> (prefixed with 'ARTERM') to <code>GSTABL</code> for terms description (<code>TBDESC</code>); set to blanks if not found.</li> <li>Convert <code>ARAREA</code> (3 digits) and <code>ARTELE</code> (7 digits) to zoned format; format phone as XXX-XXXX.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>For each company (<code>ARCO</code>):<ul> <li>Print header: <code>ACNAME</code>, page number, date (from system time), time (HH.MM.SS).</li> <li>Print title: \" CUSTOMER MASTER LIST \".</li> <li>Print column headers: \"CUST#\", \"CUSTOMER NAME\", \"ADDRESS\", \"PHONE\", \"CONTACT\", \"PAYMENT TERMS\".</li> <li>Print decorative lines (asterisks).</li> </ul> </li> <li>For each customer:<ul> <li>Print: <code>ARCUST</code> (customer number), <code>ARNAME</code>, <code>ARADR1-3</code>, <code>ARADR4</code> (if <code>addlst = 'Y'</code>), <code>AREA-TELE</code>, <code>CSCNCT</code>, <code>TRMDSC</code>.</li> </ul> </li> <li>Repeat for <code>kycopy</code> copies, either interactively or queued based on <code>kyjobq</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Filtering:</li> <li>If <code>kyalco = 'CO '</code>, include only customers with company numbers matching <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>, validated against <code>ARCONT</code> (non-deleted).</li> <li> <p>If <code>kyalco = 'ALL'</code>, include all companies.</p> </li> <li> <p>Customer Filtering:</p> </li> <li>If <code>kyalcs = 'SEL'</code>, include only customers matching <code>kycs01</code> to <code>kycs10</code>.</li> <li> <p>If <code>kyalcs = 'ALL'</code>, include all customers per company.</p> </li> <li> <p>Address Inclusion:</p> </li> <li>Include address line 4 only if <code>addlst = 'Y'</code>.</li> <li> <p>Default to <code>addlst = 'Y'</code> if both <code>addlst</code> and <code>dollst</code> are not 'Y'.</p> </li> <li> <p>Validation:</p> </li> <li>Invalid inputs (e.g., <code>kyalco \u2260 'ALL' or 'CO '</code>, non-existent company numbers, zero customer numbers for <code>kyalcs = 'SEL'</code>) return specific error messages.</li> <li> <p><code>kycopy</code> defaults to 1 if zero.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>kyjobq = 'Y'</code>, queue the report job; if 'N' or blank, run interactively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date and Time:</li> <li>Retrieve system time (12 digits) and extract date (YYMMDD, formatted as YY/MM/DD) and time (HHMMSS, formatted as HH.MM.SS).</li> <li>Page Number:</li> <li>Initialize to 0, increment per company group.</li> <li>Phone Number:</li> <li>Combine <code>ARAREA</code> (3 digits) and <code>ARTELE</code> (7 digits) into XXX-XXXX format.</li> <li>Default Values:</li> <li>Set <code>kycopy = 1</code> if zero.</li> <li>Set <code>addlst = 'Y'</code> if both <code>addlst</code> and <code>dollst \u2260 'Y'</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCUST: Customer master (customer number, name, address, phone, terms).</li> <li>ARCONT: Company master (company name).</li> <li>ARCUSP: Customer supplemental (contact name).</li> <li>GSTABL: Table file (terms descriptions).</li> <li>GSCONT: System control (default company number).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return error messages for invalid inputs (e.g., \"INVALID COMPANY #\", \"ENTER CUSTOMER #\").</li> <li>Skip deleted records (<code>acdel = 'D'</code> in <code>ARCONT</code>, <code>tbdel = 'D'</code> in <code>GSTABL</code>).</li> <li>Set blank values for missing data (e.g., <code>ACNAME</code>, <code>CSCNCT</code>, <code>TRMDSC</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Non-Interactive Design: The function assumes inputs are provided programmatically (e.g., via API or parameter list) rather than through the interactive workstation file (<code>AR901PD</code>) used in <code>AR901P.rpgle</code>. This eliminates the need for screen handling logic (e.g., <code>read ar901pfm</code>, <code>*in01</code>).</li> <li>Dollst Flag: The <code>dollst</code> flag is validated but not used in <code>AR901.rpg36</code> for report generation, suggesting it may be a legacy parameter or used in related programs not provided.</li> <li>UUID Choice: A new UUID (<code>e8e616e0-d894-4936-a3f5-391682ee794d</code>) is used as this is a new artifact, unrelated to previous artifacts in the conversation.</li> <li>Conciseness: The document focuses on business requirements and key calculations, omitting low-level RPG II/LE/OCL syntax details while preserving the core logic and rules.</li> </ul> <p>If you need further refinements (e.g., specific input formats, output report layout, or additional use cases), please provide additional details.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/","title":"AR915 RPGLE","text":"<p>The RPGLE program <code>AR915</code> is a customer form type contacts maintenance and inquiry program within the Customer Master Information system. It is called from the main program <code>AR915P</code> (as seen in the previous document) to handle the creation, updating, or displaying of individual customer form type contact records. The program supports both maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, providing a user interface to manage contact details such as form type, contact name, email, and various flags. Below is a detailed explanation of the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#process-steps-of-the-ar915-program","title":"Process Steps of the AR915 Program","text":"<p>The <code>AR915</code> program follows a structured flow to manage a single customer form type contact record through a display file interface. The process steps are organized by the main subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Initializes variables, defines key lists, and processes input parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>p$cono</code> (company), <code>p$seq#</code> (sequence number), <code>p$cust</code> (customer), <code>p$mode</code> (run mode: 'MNT' or 'INQ'), <code>p$fgrp</code> (file group: 'Z' or 'G'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to display file fields (<code>f$cono</code>, <code>f$seq#</code>) and initializes output parameters (<code>o$fgrp</code>, <code>o$mode</code>, <code>o$flag</code>).</li> <li>Defines key lists (<code>klcufm</code>, <code>klcust</code>, <code>klfrmtyp</code>) for database operations.</li> <li>Initializes work fields, message handling fields, and date validation parameters.</li> <li>Sets up the display file fields and headers based on the mode (<code>MNT</code> or <code>INQ</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, and <code>bicont</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Retrieve Data for Passed Parameters (<code>rtvdta</code>):</p> </li> <li>Purpose: Retrieves data for the provided company, sequence number, and customer to populate the display file fields.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>arcufm</code> using <code>klcufm</code> (company, sequence number) to retrieve the contact record; if not found (<code>*in99</code>), clears the record and sets <code>fmcust</code> to <code>p$cust</code>.</li> <li>Sets <code>w$exists</code> to indicate whether the record exists.</li> <li>Chains to <code>bicont</code> to validate the company code (<code>f$cono</code>); clears <code>bcname</code> if not found.</li> <li>Chains to <code>arcust</code> to validate the customer code (<code>fmcust</code>); clears <code>arname</code> if not found.</li> <li>Sets the display header (<code>c$hdr1</code>) and protection indicator (<code>*in70</code>) based on <code>p$mode</code> ('MNT' for maintenance, 'INQ' for inquiry).</li> </ul> </li> <li> <p>Process Panel Formats (<code>srfmt</code>):</p> </li> <li>Purpose: Manages the main loop for displaying and processing the panel format (<code>fmt01</code>).</li> <li> <p>Actions:</p> <ul> <li>Clears the screen (<code>clrscr</code>).</li> <li>Initializes the panel format (<code>f01mov</code>) and sets the format name to <code>FMT01</code>.</li> <li>Enters a loop (<code>fmtagn</code>) that:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears the screen.</li> <li>Displays the <code>fmt01</code> format using <code>exfmt</code> and clears error indicators (<code>*in50</code>-<code>*in69</code>).</li> <li>Processes user input via <code>f01sr</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Continues until <code>fmtagn</code> is turned off (e.g., via F12 or inquiry mode completion).</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code>):</p> </li> <li>Purpose: Handles user input for the <code>fmt01</code> format based on function keys or ENTER.</li> <li> <p>Actions:</p> <ul> <li>Processes function keys:</li> <li>F04: Calls the <code>prompt</code> subroutine for field prompting.</li> <li>F10: Resets the cursor position (<code>row</code>, <code>col</code>) to home.</li> <li>F12: Exits the program by setting <code>fmtagn</code> to off.</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), determines the next format (<code>f01nxt</code>) and exits.</li> <li>For ENTER, validates input (<code>f01edt</code>) and, if no errors (<code>*in50 = *off</code>), updates the database (<code>upddbf</code>) in maintenance mode and determines the next format (<code>f01nxt</code>).</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code>):</p> </li> <li>Purpose: Decides whether to continue or exit the panel loop.</li> <li> <p>Actions:</p> <ul> <li>If no input change occurred (<code>*in19 = *off</code>), sets <code>fmtagn</code> to off to exit the loop.</li> <li>Note: The subroutine is prepared to handle a second format (<code>FMT02</code>), but it is commented out, so the program only uses <code>FMT01</code>.</li> </ul> </li> <li> <p>Edit Format Input (<code>f01edt</code>):</p> </li> <li>Purpose: Validates user input fields in maintenance mode.</li> <li> <p>Actions:</p> <ul> <li>Validates form type code (<code>fmfmty</code>) by chaining to <code>gstabl</code> using <code>klfrmtyp</code>; if valid and not deleted, sets <code>f$fmty</code> to the description; else, adds error message <code>ERR0010</code> and sets <code>*in50</code>, <code>*in51</code>.</li> <li>Checks if contact name (<code>fmcntc</code>) is non-blank; if blank, adds error message <code>ERR0012</code> and sets <code>*in50</code>, <code>*in52</code>.</li> <li>Validates send original flag (<code>fmfmyn</code>), reprint flag (<code>fmrpyn</code>), mail flag (<code>fmmlyn</code>), and back terms flag (<code>fmbkyn</code>); each must be 'Y' or 'N', else adds error message <code>ERR0014</code> and sets <code>*in50</code>, <code>*in55</code>-<code>*in58</code> as appropriate.</li> <li>Validates email address (<code>fmemla</code>):</li> <li>As of the 08/30/22 revision (JK01), fax number validation is removed.</li> <li>If <code>fmemla</code> is non-blank, calls <code>VALMAILID</code> to validate the email; if invalid (<code>p$valid = 'N'</code>), adds error message <code>ERR0000</code> with <code>com(02)</code> (\"Invalid Email Address Entered\") and sets <code>*in50</code>, <code>*in53</code>.</li> <li>Allows blank email if <code>fmfmyn = 'N'</code> (no original sent).</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), clears error indicators and messages.</li> </ul> </li> <li> <p>Initialize Format Field Values (<code>f01mov</code>):</p> </li> <li>Purpose: Initializes the <code>fmt01</code> format fields and clears any prior errors.</li> <li> <p>Actions:</p> <ul> <li>Calls <code>f01edt</code> to validate fields.</li> <li>If errors exist (<code>*in50</code>), clears error indicators and messages (<code>clrmsg</code>).</li> </ul> </li> <li> <p>Format Protection Schemes (<code>f01pro</code>):</p> </li> <li>Purpose: Sets field protection indicators based on the mode.</li> <li> <p>Actions:</p> <ul> <li>Clears protection indicators (<code>*in70</code>-<code>*in74</code>).</li> <li>In inquiry mode (<code>p$mode != 'MNT'</code>), sets <code>*in70</code>-<code>*in73</code> to protect fields.</li> <li>Note: Protection for existing records (<code>w$exists</code>) is commented out, so key fields are not protected based on record existence.</li> </ul> </li> <li> <p>Update Database Files (<code>upddbf</code>):</p> <ul> <li>Purpose: Updates or creates a record in <code>arcufm</code> in maintenance mode.</li> <li>Actions:</li> <li>If <code>f$seq#</code> is zero, retrieves the next sequence number (<code>rtvnxtseq</code>).</li> <li>Saves the current <code>arcufm</code> record fields to <code>svds</code>.</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>:<ul> <li>If found (<code>*in80 = *off</code>), updates the record if changes exist (<code>svds != wkds01</code>) and sets <code>p$flag = '1'</code>.</li> <li>If not found, creates a new record with <code>f$cono</code> and <code>f$seq#</code>, writes to <code>arcufm</code>, and sets <code>p$flag = '1'</code>.</li> </ul> </li> <li>Sets <code>w$exists</code> to indicate the record now exists.</li> </ul> </li> <li> <p>Retrieve Next Sequence Number (<code>rtvnxtseq</code>):</p> <ul> <li>Purpose: Generates the next sequence number for a new <code>arcufm</code> record.</li> <li>Actions:</li> <li>Chains to <code>bicont</code> to get the current sequence number (<code>bcseqn</code>).</li> <li>Increments <code>f$seq#</code> until a unique value is found by checking <code>arcufm</code> with <code>klcufm</code>.</li> <li>Increments <code>bcseqn</code> in <code>bicont</code> and updates the record.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code>):</p> <ul> <li>Purpose: Provides lookup functionality for the form type field.</li> <li>Actions:</li> <li>If the cursor is on <code>FMFMTY</code> and input is not protected (<code>*in70</code>), calls <code>LGSTABL</code> to prompt for a form type code.</li> <li>Updates <code>fmfmty</code> with the selected value if non-blank.</li> <li>Sets <code>*in19</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> <ul> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li>Actions:</li> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code> and restores the current record format and page number.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Purpose: Closes files and exits.</li> <li>Actions:</li> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program (<code>AR915P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during input validation and processing: 1. Form Type Code (<code>fmfmty</code>):    - Must exist in the <code>gstabl</code> file with type <code>FRMTYP</code> and not be marked deleted (<code>tbdel != 'D'</code>).    - If invalid, displays error <code>ERR0010</code> and sets error indicators.</p> <ol> <li>Contact Name (<code>fmcntc</code>):</li> <li>Must be non-blank.</li> <li> <p>If blank, displays error <code>ERR0012</code> and sets error indicators.</p> </li> <li> <p>Email Address (<code>fmemla</code>):</p> </li> <li>As of the 08/30/22 revision, fax number validation is removed, and email is the primary contact method.</li> <li>If non-blank, must be valid as determined by the <code>VALMAILID</code> program (<code>p$valid = 'Y'</code>).</li> <li>If invalid, displays error <code>ERR0000</code> with message \"Invalid Email Address Entered\".</li> <li> <p>Can be blank if <code>fmfmyn = 'N'</code> (no original sent); otherwise, a non-blank email is required if <code>fmfmyn</code> is 'Y' or blank.</p> </li> <li> <p>Flags (<code>fmfmyn</code>, <code>fmrpyn</code>, <code>fmmlyn</code>, <code>fmbkyn</code>):</p> </li> <li>Each flag (send original, reprint, mail, back terms) must be 'Y' or 'N'.</li> <li> <p>If invalid, displays error <code>ERR0014</code> and sets corresponding error indicators (<code>*in55</code>-<code>*in58</code>).</p> </li> <li> <p>Mode-Based Behavior:</p> </li> <li>In maintenance mode (<code>p$mode = 'MNT'</code>), fields are editable, and updates are written to <code>arcufm</code>.</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), fields are protected (<code>*in70</code>-<code>*in73</code>), errors are cleared, and no database updates occur.</li> <li> <p>The display header changes based on the mode: \"Customer Form Type Contacts Maintenance\" for <code>MNT</code>, \"Customer Form Type Contacts Inquiry\" for <code>INQ</code>.</p> </li> <li> <p>Sequence Number Generation:</p> </li> <li>For new records (<code>f$seq# = 0</code>), the next sequence number is retrieved from <code>bicont</code> (<code>bcseqn</code>) and incremented until a unique value is found in <code>arcufm</code>.</li> <li> <p>The <code>bicont</code> record is updated with the new sequence number.</p> </li> <li> <p>Database Updates:</p> </li> <li>In maintenance mode, updates or creates records in <code>arcufm</code> only if input validation passes.</li> <li> <p>Sets <code>p$flag = '1'</code> to indicate a successful update or creation.</p> </li> <li> <p>Field Prompting:</p> </li> <li>The form type code (<code>fmfmty</code>) can be prompted via F04, calling <code>LGSTABL</code> to select a valid value.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code>: 1. arcust:    - Purpose: Customer master file for validating customer codes.    - Usage: Chained to using <code>klcust</code> (company, customer) to retrieve <code>arname</code> (customer name).    - Access: Input only, keyed (<code>k disk</code>).    - Override: <code>garcust</code> (for 'G' file group) or <code>zarcust</code> (for 'Z' file group).</p> <ol> <li>gstabl:</li> <li>Purpose: General table file for validating form type codes.</li> <li>Usage: Chained to using <code>klfrmtyp</code> (type <code>FRMTYP</code>, code <code>fmfmty</code>) to retrieve <code>tbdesc</code> (description).</li> <li>Access: Input only, keyed (<code>k disk</code>).</li> <li> <p>Override: <code>ggstabl</code> (for 'G') or <code>zgstabl</code> (for 'Z').</p> </li> <li> <p>arcufm:</p> </li> <li>Purpose: Primary file for customer form type contact records.</li> <li>Usage: Chained to for retrieving records (<code>klcufm</code>), updated, or written to in maintenance mode.</li> <li>Access: Update and add, keyed (<code>uf a e k disk</code>).</li> <li> <p>Override: <code>garcufm</code> (for 'G') or <code>zarcufm</code> (for 'Z').</p> </li> <li> <p>bicont:</p> </li> <li>Purpose: Company master file for validating company codes and managing sequence numbers.</li> <li>Usage: Chained to for validating <code>f$cono</code> and retrieving <code>bcname</code>; updated to increment <code>bcseqn</code> for new records.</li> <li>Access: Update, keyed (<code>uf e k disk</code>).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>ar915d:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains the <code>fmt01</code> format and message subfile control (<code>msgctl</code>) for interactive display and input.</li> <li>Access: Work station file (<code>cf e workstn</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. LGSTABL:    - Called in subroutine <code>prompt</code>.    - Parameters: <code>k$ft</code> (table type, set to <code>FRMTYP</code>), <code>k$fmty</code> (form type code), <code>o$fgrp</code> (file group).    - Purpose: Provides a lookup window for selecting a valid form type code.</p> <ol> <li>VALMAILID:</li> <li>Called in subroutine <code>f01edt</code> (added in 08/30/22 revision).</li> <li>Parameters: <code>p$email</code> (email address, 100 characters), <code>p$valid</code> (validity flag, 'Y' or 'N').</li> <li> <p>Purpose: Validates the email address entered in <code>fmemla</code>.</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in subroutine <code>opntbl</code>.</li> <li>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).</li> <li> <p>Purpose: Executes file override commands for <code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, and <code>bicont</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR915</code> program, called by <code>AR915P</code>, provides a detailed interface for maintaining or inquiring about customer form type contact records. It supports creating new records, updating existing ones, and displaying details in a single-panel format (<code>fmt01</code>). The program enforces strict validation rules for form type, contact name, email, and flags, with email validation introduced in the 08/30/22 revision. It uses four database files (<code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, <code>bicont</code>) with dynamic overrides and interacts with external programs for field prompting and email validation. The program ensures data integrity through comprehensive input validation and provides user feedback via a message subfile.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/","title":"AR9154 RPGLE","text":"<p>The RPGLE program <code>AR9154</code> is a specialized program within the Customer Master Information system, designed to handle the deletion or restoration of customer form type contact records. It is called from the main program <code>AR915P</code> to process the delete (option 4) functionality for a specific contact record. The program presents a confirmation window (<code>delwdw</code>) to the user, allowing them to either restore a previously deleted record (F22) or mark an active record as deleted (F23). Below is a detailed explanation of the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#process-steps-of-the-ar9154-program","title":"Process Steps of the AR9154 Program","text":"<p>The <code>AR9154</code> program follows a structured flow to manage the deletion or restoration of a customer form type contact record through a display file window. The process steps are organized by the main subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Initializes variables, defines key lists, and processes input parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>p$cono</code> (company), <code>p$seq#</code> (sequence number), <code>p$fgrp</code> (file group: 'Z' or 'G'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to display file fields (<code>f$cono</code>, <code>f$seq#</code>).</li> <li>Initializes message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>) and date validation parameters (<code>pld010</code>).</li> <li>Defines key lists (<code>klcufm</code> for <code>arcufm</code>, <code>klcust</code> for <code>arcust</code>) for database operations.</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcust</code>, <code>bicont</code>, and <code>arcufm</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Retrieve Data (<code>rtvdta</code>):</p> </li> <li>Purpose: Retrieves data for the provided company and sequence number to populate the display file fields.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>arcufm</code> using <code>klcufm</code> (company, sequence number) to retrieve the contact record.</li> <li>If the record exists (<code>*in99 = *off</code>):</li> <li>Checks the deletion status (<code>fmdel</code>):<ul> <li>If deleted (<code>fmdel = 'D'</code>), sets the header to \"Customer Form Type Contacts Restore\" (<code>hdr(01)</code>), function key label to \"F22=Restore\" (<code>fky(01)</code>), and enables F22 (<code>*in72</code>).</li> <li>If not deleted, sets the header to \"Customer Form Type Contacts Delete\" (<code>hdr(02)</code>), function key label to \"F23=Delete\" (<code>fky(02)</code>), and enables F23 (<code>*in73</code>).</li> </ul> </li> <li>Chains to <code>bicont</code> to retrieve the company name (<code>bcname</code>) into <code>f$conm</code>; clears if not found.</li> <li>Chains to <code>arcust</code> to retrieve the customer name (<code>arname</code>) into <code>f$csnm</code>; clears if not found.</li> <li>Moves the contact name (<code>fmcntc</code>) to the display field <code>s1cntc</code>.</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code>):</p> </li> <li>Purpose: Manages the main loop for displaying and processing the deletion/restoration confirmation window (<code>delwdw</code>).</li> <li> <p>Actions:</p> <ul> <li>Enters a loop (<code>winagn</code>) that:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears it (<code>msgclr</code>).</li> <li>Displays the <code>delwdw</code> format using <code>exfmt</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Clears error indicators (<code>*in50</code>-<code>*in69</code>).</li> <li>Processes user input:<ul> <li>F12: Exits the window by setting <code>winagn</code> to off.</li> <li>F22 or F23: Validates input (<code>winedt</code>), and if no errors (<code>*in50 = *off</code>), updates the database (<code>winupd</code>) and exits the loop.</li> <li>Other (e.g., ENTER): Validates input (<code>winedt</code>) and redisplays the window.</li> </ul> </li> <li>Continues until <code>winagn</code> is turned off.</li> </ul> </li> <li> <p>Edit Window Input (<code>winedt</code>):</p> </li> <li>Purpose: Validates user input, specifically checking for activity before deletion.</li> <li> <p>Actions:</p> <ul> <li>If F23 (delete) is pressed, calls <code>chkact</code> to check for activity (e.g., open orders).</li> <li>Note: The <code>chkact</code> subroutine has commented-out logic for checking open orders, so no validation currently occurs.</li> </ul> </li> <li> <p>Check Activity Prior to Deleting (<code>chkact</code>):</p> </li> <li>Purpose: Intended to verify if the record can be deleted (e.g., no open orders).</li> <li> <p>Actions:</p> <ul> <li>Currently, the logic is commented out, so no checks are performed, and deletion proceeds without validation.</li> <li>Commented logic would check <code>arcust</code> for open orders and display an error (<code>ERR0000</code> with <code>com(01)</code>: \"This Company Has Assigned Customers, Cannot Delete\") if found.</li> </ul> </li> <li> <p>Update Database from Window Input (<code>winupd</code>):</p> </li> <li>Purpose: Updates the <code>arcufm</code> record to mark it as deleted or restored.</li> <li> <p>Actions:</p> <ul> <li>For F22 (Restore):</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>.</li> <li>If the record exists and is deleted (<code>fmdel = 'D'</code>), sets <code>fmdel</code> to 'A' (active), updates the record, and sets <code>p$flag = 'A'</code>.</li> <li>For F23 (Delete):</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>.</li> <li>If the record exists and is not deleted (<code>fmdel != 'D'</code>), sets <code>fmdel</code> to 'D', updates the record, and sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> </li> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li> <p>Actions:</p> <ul> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Closes files and exits.</li> <li>Actions:<ul> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program (<code>AR915P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Deletion:    - A record can be marked as deleted (<code>fmdel = 'D'</code>) using F23 if it is currently active (<code>fmdel != 'D'</code>).    - The <code>p$flag</code> is set to 'D' to indicate successful deletion.    - Note: The check for open orders or other activity that might prevent deletion is commented out, so deletion is unrestricted.</p> <ol> <li>Record Restoration:</li> <li>A deleted record (<code>fmdel = 'D'</code>) can be restored to active status (<code>fmdel = 'A'</code>) using F22.</li> <li> <p>The <code>p$flag</code> is set to 'A' to indicate successful restoration.</p> </li> <li> <p>Display Logic:</p> </li> <li>If the record is deleted, the window displays \"Customer Form Type Contacts Restore\" with F22 enabled.</li> <li>If the record is active, the window displays \"Customer Form Type Contacts Delete\" with F23 enabled.</li> <li> <p>Company and customer names are retrieved for display, but the operation proceeds even if they are not found.</p> </li> <li> <p>Input Validation:</p> </li> <li>No additional input validation is performed beyond checking the record's deletion status, as <code>chkact</code> logic is disabled.</li> <li> <p>The program assumes the provided company and sequence number are valid, relying on <code>AR915P</code> for prior validation.</p> </li> <li> <p>Return Flag:</p> </li> <li>The <code>p$flag</code> is set to 'D' for deletion or 'A' for restoration, which <code>AR915P</code> uses to display confirmation messages (<code>com(05)</code> for deletion, <code>com(06)</code> for reactivation).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code>: 1. arcust:    - Purpose: Customer master file for retrieving customer names.    - Usage: Chained to using <code>klcust</code> (company, customer) to retrieve <code>arname</code> (customer name) for display.    - Access: Input only, keyed (<code>if e k disk</code>).    - Override: <code>garcust</code> (for 'G' file group) or <code>zarcust</code> (for 'Z' file group).</p> <ol> <li>bicont:</li> <li>Purpose: Company master file for retrieving company names.</li> <li>Usage: Chained to using <code>f$cono</code> to retrieve <code>bcname</code> (company name) for display.</li> <li>Access: Input only, keyed (<code>if e k disk</code>).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>arcufm:</p> </li> <li>Purpose: Primary file for customer form type contact records.</li> <li>Usage: Chained to using <code>klcufm</code> (company, sequence number) to retrieve and update the record\u2019s deletion status (<code>fmdel</code>).</li> <li>Access: Update, keyed (<code>uf e k disk</code>).</li> <li> <p>Override: <code>garcufm</code> (for 'G') or <code>zarcufm</code> (for 'Z').</p> </li> <li> <p>ar9154d:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains the <code>delwdw</code> format and message subfile control (<code>msgctl</code>) for displaying the confirmation window.</li> <li>Access: Work station file (<code>cf e workstn</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. QCMDEXC:    - Called in subroutine <code>opntbl</code>.    - Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).    - Purpose: Executes file override commands for <code>arcust</code>, <code>bicont</code>, and <code>arcufm</code>.</p> <ol> <li>QMHSNDPM:</li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR9154</code> program, called by <code>AR915P</code>, provides a simple confirmation window for deleting or restoring customer form type contact records. It updates the <code>arcufm</code> file by setting the <code>fmdel</code> field to 'D' (deleted) or 'A' (active) based on user input (F23 or F22). The program retrieves company and customer names for display but does not currently enforce activity checks (e.g., open orders) due to commented-out logic. It uses three database files (<code>arcust</code>, <code>bicont</code>, <code>arcufm</code>) with dynamic overrides and relies on system programs for message handling and file overrides. The program ensures a straightforward user interaction with clear feedback via the <code>p$flag</code> return value.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/","title":"AR915P RPGLE","text":"<p>The RPGLE program <code>AR915P</code> is designed to manage customer form type contacts within a Customer Master Information system. It provides an interactive interface to display, create, update, and delete contact records in a subfile (SFL). Below is a detailed explanation of the process steps, external programs called, and database tables used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#process-steps-of-the-ar915p-program","title":"Process Steps of the AR915P Program","text":"<p>The program follows a structured flow to handle customer form type contacts using a subfile interface. Here are the key process steps, organized by the main subroutines and their purposes:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Sets up initial variables, defines key lists, and processes entry parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>a$cono</code> (company), <code>a$cust</code> (customer), <code>p$mode</code> (run mode: maintenance or inquiry), and <code>p$fgrp</code> (file group: 'Z' or 'G').</li> <li>Initializes subfile control fields (e.g., <code>rrn1</code> for relative record number, <code>pagsz1</code> for page size set to 28).</li> <li>Sets up message handling fields and key lists (<code>klsfl1</code>, <code>kls1s1</code>, <code>kls1r1</code>, <code>klcust</code>) for database operations.</li> <li>Captures the current date and time into <code>t#time</code> and converts it to a <code>CYMD</code> format for use in the program.</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcufm</code>, <code>arcufmx</code>, <code>arcust</code>, and <code>bicont</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Error Handling (<code>*pssr</code>):</p> </li> <li>Purpose: Handles errors, particularly related to parameter passing.</li> <li> <p>Actions:</p> <ul> <li>Checks for error code 221 (invalid number of parameters) and sets a return code if detected.</li> <li>Returns control to the calling program if an error occurs.</li> </ul> </li> <li> <p>Process Parameters (<code>@parms</code>):</p> </li> <li>Purpose: Validates and processes input parameters passed to the program.</li> <li> <p>Actions:</p> <ul> <li>If parameters are provided (<code>ps#prm &gt;= 1</code>), moves <code>a$cono</code> to <code>c1cono</code> (company) and <code>a$cust</code> to <code>c1cust</code> (customer) if they are non-blank and non-zero.</li> <li>Sets indicator <code>*in71</code> to indicate valid parameters were passed.</li> <li>Includes commented-out test values for <code>c1cono</code> and <code>c1cust</code> (not used in production).</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code>):</p> </li> <li>Purpose: Manages the main logic for displaying and interacting with the subfile.</li> <li> <p>Actions:</p> <ul> <li>Calls <code>*pssr</code> for error handling.</li> <li>Processes parameters via <code>@parms</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) and writes it (<code>wrtmsg</code>).</li> <li>Initializes subfile mode (<code>sfmod1</code>) to folded (<code>'1'</code>) and sets <code>*in45</code> for folded display.</li> <li>Sets global protection mode (<code>*in70</code>) based on <code>p$mode</code> ('MNT' for maintenance, else inquiry).</li> <li>Repositions the subfile (<code>sf1rep</code>) to the first record.</li> <li>Enters a main loop (<code>sf1agn</code>) that:</li> <li>Handles repositioning if requested (<code>repsfl</code>).</li> <li>Displays the command line and message subfile.</li> <li>Checks for existing subfile records to enable/disable display (<code>*in41</code>).</li> <li>Sets folded/unfolded mode (<code>*in45</code>) based on <code>sfmod1</code>.</li> <li>Displays the subfile control (<code>sflctl1</code>) using <code>exfmt</code>.</li> <li>Processes user input based on function keys:<ul> <li>F03: Exits the program.</li> <li>F04: Calls the <code>prompt</code> subroutine for field prompting.</li> <li>F05: Refreshes the subfile by clearing <code>r$fmty</code> and triggering repositioning.</li> <li>F08: Toggles include/exclude deleted records (<code>w$del</code>) and updates the display label (<code>s1f08d</code>).</li> <li>PAGEDN: Loads additional subfile records (<code>sf1lod</code>).</li> <li>ENTER: Processes subfile changes (<code>sf1prc</code>).</li> <li>F06: Creates a new contact record (<code>sf1f06</code>).</li> <li>F10: Positions the cursor to the control record.</li> </ul> </li> <li>Repositions the subfile if user input changes (<code>c1cono</code>, <code>c1cust</code>, <code>c1fmty</code> differ from retained values).</li> <li>Clears format indicators and updates cursor location (<code>row1</code>, <code>col1</code>) and subfile record number (<code>rcdnb1</code>).</li> </ul> </li> <li> <p>Process Subfile on ENTER (<code>sf1prc</code>):</p> </li> <li>Purpose: Processes user selections in the subfile when the ENTER key is pressed.</li> <li> <p>Actions:</p> <ul> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes each record via <code>sf1chg</code> if the subfile is not empty.</li> </ul> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code>):</p> </li> <li>Purpose: Handles user-selected options (2, 4, 5) for subfile records.</li> <li> <p>Actions:</p> <ul> <li>For option 2 (Change, maintenance mode, not deleted): Calls <code>sf1s02</code>.</li> <li>For option 4 (Delete, maintenance mode): Calls <code>sf1s04</code>.</li> <li>For option 5 (Display): Calls <code>sf1s05</code>.</li> <li>Updates the subfile record after processing by chaining to <code>arcufm</code>, formatting (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating the subfile (<code>sfl1</code>).</li> </ul> </li> <li> <p>Reposition Subfile (<code>sf1rep</code>):</p> </li> <li>Purpose: Clears and repositions the subfile based on user input.</li> <li> <p>Actions:</p> <ul> <li>Clears the subfile (<code>sf1clr</code>).</li> <li>Validates control input (<code>sf1cte</code>).</li> <li>If no errors, positions the file (<code>arcufmx</code>) using <code>kls1s1</code> and loads subfile records (<code>sf1lod</code>).</li> <li>Retains control fields (<code>c1cono</code>, <code>c1cust</code>, <code>c1fmty</code>) for future repositioning.</li> </ul> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code>):</p> </li> <li>Purpose: Validates company (<code>c1cono</code>) and customer (<code>c1cust</code>) input.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>bicont</code> to validate company code; if valid and not deleted, sets <code>c1conm</code> (company name); else, adds an error message.</li> <li>Chains to <code>arcust</code> to validate customer code; if valid and not deleted, sets <code>c1csnm</code> (customer name); else, adds an error message.</li> <li>Sets error indicators (<code>*in50</code>, <code>*in51</code>, <code>*in52</code>) if validation fails.</li> </ul> </li> <li> <p>Load Subfile Records (<code>sf1lod</code>):</p> <ul> <li>Purpose: Loads records into the subfile up to the page size (<code>pagsz1</code>).</li> <li>Actions:</li> <li>Sets the relative record number (<code>rrn1</code>) to the last saved value (<code>rrnsv1</code>).</li> <li>Reads records from <code>arcufmx</code> using <code>kls1r1</code> (company/customer key).</li> <li>Skips deleted records if <code>w$del</code> is off.</li> <li>Formats each record (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes to the subfile (<code>sfl1</code>).</li> <li>Updates <code>rrn1</code> and saves it to <code>rrnsv1</code>.</li> </ul> </li> <li> <p>Format Subfile Detail Line (<code>sf1fmt</code>):</p> <ul> <li>Purpose: Populates subfile fields for display.</li> <li>Actions:</li> <li>Clears the subfile record.</li> <li>Moves fields from <code>arcufmx</code> (<code>fmseq#</code>, <code>fmfmty</code>, <code>fmcntc</code>, etc.) to subfile fields (<code>s1seq#</code>, <code>s1fmty</code>, etc.).</li> <li>Sets <code>s1emfx</code> and <code>s1note</code> based on whether email (<code>fmemla</code>) or fax (<code>fmfax#</code>) is present.</li> <li>Sets <code>s1del</code> if the record is marked deleted.</li> </ul> </li> <li> <p>Subfile Color Coding (<code>sf1col</code>):</p> <ul> <li>Purpose: Applies color to subfile records based on their status.</li> <li>Actions:</li> <li>Sets <code>*in76</code> (blue color) if the record is marked deleted (<code>s1del = 'D'</code>).</li> </ul> </li> <li> <p>Clear Subfile (<code>sf1clr</code>):</p> <ul> <li>Purpose: Clears the subfile and resets control indicators.</li> <li>Actions:</li> <li>Resets <code>rrn1</code> and <code>rrnsv1</code> to zero.</li> <li>Sets <code>*in42</code> (SFLCLR) on, writes <code>sflctl1</code>, and turns <code>*in42</code> off.</li> <li>Disables subfile display (<code>*in41</code>) and control (<code>*in40</code>).</li> </ul> </li> <li> <p>Create Contact (<code>sf1f06</code>):</p> <ul> <li>Purpose: Initiates creation of a new contact record.</li> <li>Actions:</li> <li>Calls program <code>AR915</code> with parameters for company, sequence number (zero), customer, mode ('MNT'), file group, and return flag.</li> <li>If the return flag is '1', adds a confirmation message and triggers subfile repositioning.</li> </ul> </li> <li> <p>Change Contact (<code>sf1s02</code>):</p> <ul> <li>Purpose: Updates an existing contact record.</li> <li>Actions:</li> <li>Validates that the record is not deleted; if deleted, adds an error message.</li> <li>If valid, calls <code>AR915</code> with parameters for company, sequence number, customer, mode ('MNT'), file group, and return flag.</li> <li>If the return flag is '1', adds a confirmation message.</li> </ul> </li> <li> <p>Delete Contact (<code>sf1s04</code>):</p> <ul> <li>Purpose: Marks a contact record as deleted or reactivated.</li> <li>Actions:</li> <li>Calls <code>AR9154</code> with parameters for company, sequence number, file group, and return flag.</li> <li>Based on the return flag ('D' for deleted, 'A' for reactivated), adds the appropriate confirmation message.</li> </ul> </li> <li> <p>Display Customer Order (<code>sf1s05</code>):</p> <ul> <li>Purpose: Displays contact details in inquiry mode.</li> <li>Actions:</li> <li>Calls <code>AR915</code> with parameters for company, sequence number, customer, mode ('INQ'), file group, and return flag.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code>):</p> <ul> <li>Purpose: Provides lookup functionality for company and customer fields.</li> <li>Actions:</li> <li>If the cursor is on <code>C1CONO</code> and input is not protected (<code>*in71</code>), calls <code>LBICONT</code> to prompt for a company code.</li> <li>If the cursor is on <code>C1CUST</code> and input is not protected, calls <code>LARCUST</code> to prompt for a customer code.</li> <li>Sets <code>*in19</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> <ul> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li>Actions:</li> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code> and restores the current record format and page number.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Purpose: Closes files and exits.</li> <li>Actions:</li> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. AR915:    - Called in subroutines <code>sf1f06</code> (create), <code>sf1s02</code> (change), and <code>sf1s05</code> (display).    - Parameters: <code>o$cono</code> (company), <code>o$seq#</code> (sequence number), <code>o$cust</code> (customer), <code>o$mode</code> ('MNT' or 'INQ'), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).    - Purpose: Manages creation, updating, or displaying of contact records.</p> <ol> <li>AR9154:</li> <li>Called in subroutine <code>sf1s04</code> (delete).</li> <li>Parameters: <code>o$cono</code> (company), <code>o$seq#</code> (sequence number), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).</li> <li> <p>Purpose: Handles deletion or reactivation of contact records.</p> </li> <li> <p>LBICONT:</p> </li> <li>Called in subroutine <code>prompt</code> for company code lookup.</li> <li>Parameters: <code>o$cono</code> (company), <code>o$fgrp</code> (file group).</li> <li> <p>Purpose: Provides a lookup window for valid company codes.</p> </li> <li> <p>LARCUST:</p> </li> <li>Called in subroutine <code>prompt</code> for customer code lookup.</li> <li>Parameters: <code>o$cono</code> (company), <code>o$cust</code> (customer), <code>o$fgrp</code> (file group).</li> <li> <p>Purpose: Provides a lookup window for valid customer codes.</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in subroutine <code>opntbl</code>.</li> <li>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).</li> <li> <p>Purpose: Executes file override commands for <code>arcufm</code>, <code>arcufmx</code>, <code>arcust</code>, and <code>bicont</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code> and keyed access (<code>k disk</code>): 1. arcufm:    - Purpose: Primary file for customer form type contact records.    - Usage: Read and chained to for subfile data and updates.    - Override: <code>garcufm</code> (for 'G' file group) or <code>zarcufm</code> (for 'Z' file group).</p> <ol> <li>arcufmx:</li> <li>Purpose: Same as <code>arcufm</code> but with a renamed record format (<code>arcufmhx</code>).</li> <li>Usage: Used for reading records to populate the subfile.</li> <li> <p>Override: <code>garcufmx</code> (for 'G') or <code>zarcufmx</code> (for 'Z').</p> </li> <li> <p>arcust:</p> </li> <li>Purpose: Customer master file for validating customer codes.</li> <li>Usage: Chained to for validating <code>c1cust</code> and retrieving <code>arname</code> (customer name).</li> <li> <p>Override: <code>garcust</code> (for 'G') or <code>zarcust</code> (for 'Z').</p> </li> <li> <p>bicont:</p> </li> <li>Purpose: Company master file for validating company codes.</li> <li>Usage: Chained to for validating <code>c1cono</code> and retrieving <code>bcname</code> (company name).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>ar915pd:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains subfile <code>sfl1</code> and control format <code>sflctl1</code> for interactive display and input.</li> <li>Handler: Uses <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR915P</code> program is a robust RPGLE application for managing customer form type contacts. It uses a subfile to display records, supports create, update, delete, and display operations, and includes field prompting and error handling. The program interacts with external programs for specific actions and uses multiple database files with dynamic overrides based on the file group. The process is highly interactive, driven by function keys and user input, with comprehensive message handling for user feedback.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/","title":"Summary AR915P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#list-of-use-cases-implemented-by-the-ar915p-call-stack","title":"List of Use Cases Implemented by the AR915P Call Stack","text":"<p>The <code>AR915P</code> program, along with its called programs <code>AR915</code> and <code>AR9154</code>, implements the following use case within the Customer Master Information system:</p> <ol> <li>Manage Customer Form Type Contacts:</li> <li>Description: This use case allows users to view, create, update, delete, or restore customer form type contact records. It provides an interactive interface to manage contact details (e.g., form type, contact name, email, flags) for a specific company and customer, supporting both maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes.</li> <li>Components:<ul> <li><code>AR915P</code>: Displays a subfile listing contact records, allowing users to select records for viewing, updating, deleting, or creating new ones.</li> <li><code>AR915</code>: Handles the creation or update of a single contact record, with validation of form type, contact name, email, and flags.</li> <li><code>AR9154</code>: Manages the deletion or restoration of a contact record via a confirmation window.</li> </ul> </li> </ol> <p>This is the primary use case, as the programs are tightly integrated to manage customer form type contacts comprehensively.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#function-requirement-document-manage-customer-form-type-contacts","title":"Function Requirement Document: Manage Customer Form Type Contacts","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#function-requirement-document-manage-customer-form-type-contacts_1","title":"Function Requirement Document: Manage Customer Form Type Contacts","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#purpose","title":"Purpose","text":"<p>The <code>Manage Customer Form Type Contacts</code> function allows the system to retrieve, create, update, delete, or restore customer form type contact records for a specified company and customer without interactive screen input. It processes input parameters to perform the requested operation and returns a status flag to indicate success or failure.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>cono</code>): 2-character code identifying the company (required).</li> <li>Customer Code (<code>cust</code>): Customer identifier (required).</li> <li>Sequence Number (<code>seq#</code>): Numeric identifier for the contact record; 0 for new records (required).</li> <li>Mode (<code>mode</code>): Operation mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry) (required).</li> <li>File Group (<code>fgrp</code>): File group identifier, <code>Z</code> or <code>G</code>, for database overrides (required).</li> <li>Operation (<code>oper</code>): Action to perform: <code>CREATE</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>RESTORE</code>, or <code>VIEW</code> (required).</li> <li>Form Type Code (<code>fmty</code>): Code for the form type (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Contact Name (<code>cntc</code>): Name of the contact person (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Email Address (<code>emla</code>): Email address for the contact (optional for <code>CREATE</code>, <code>UPDATE</code> if <code>fmyn = 'N'</code>).</li> <li>Send Original Flag (<code>fmyn</code>): <code>Y</code> or <code>N</code>, indicates if the original form is sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send Reprint Flag (<code>rpyn</code>): <code>Y</code> or <code>N</code>, indicates if reprints are sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send by Mail Flag (<code>mlyn</code>): <code>Y</code> or <code>N</code>, indicates if sent by mail (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send Back Terms Flag (<code>bkyn</code>): <code>Y</code> or <code>N</code>, indicates if back terms are sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Return Flag (<code>flag</code>): Status indicator:</li> <li><code>1</code>: Successful creation or update.</li> <li><code>D</code>: Successful deletion.</li> <li><code>A</code>: Successful restoration.</li> <li><code>E</code>: Error (e.g., validation failure or record not found).</li> <li>Error Message (<code>errmsg</code>): Description of any error encountered (e.g., \"Invalid form type code\").</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>cono</code> exists in <code>bicont</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid company code\"</code>.</li> <li>Verify <code>cust</code> exists in <code>arcust</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid customer code\"</code>.</li> <li>For <code>CREATE</code>, <code>UPDATE</code>:<ul> <li>Verify <code>fmty</code> exists in <code>gstabl</code> with type <code>FRMTYP</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid form type code\"</code>.</li> <li>Verify <code>cntc</code> is non-blank; else, return <code>flag = 'E'</code>, <code>errmsg = \"Contact name required\"</code>.</li> <li>If <code>emla</code> is non-blank, validate via <code>VALMAILID</code>; if invalid, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid email address\"</code>.</li> <li>If <code>fmyn = 'Y'</code> or blank, <code>emla</code> must be non-blank; else, return <code>flag = 'E'</code>, <code>errmsg = \"Email address required\"</code>.</li> <li>Verify <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code> are <code>Y</code> or <code>N</code>; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid flag value\"</code>.</li> </ul> </li> <li> <p>For <code>UPDATE</code>, <code>DELETE</code>, <code>RESTORE</code>, <code>VIEW</code>, verify <code>seq#</code> exists in <code>arcufm</code> using <code>cono</code> and <code>seq#</code>; else, return <code>flag = 'E'</code>, <code>errmsg = \"Record not found\"</code>.</p> </li> <li> <p>Apply File Overrides:</p> </li> <li> <p>Use <code>fgrp</code> (<code>Z</code> or <code>G</code>) to override database files (<code>arcust</code>, <code>bicont</code>, <code>arcufm</code>, <code>gstabl</code>) to the appropriate library (e.g., <code>garcust</code> or <code>zarcust</code>).</p> </li> <li> <p>Process Operation:</p> </li> <li>VIEW:<ul> <li>Retrieve record from <code>arcufm</code> using <code>cono</code> and <code>seq#</code>.</li> <li>Return record fields (<code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, <code>del</code>) and <code>flag = '1'</code>.</li> </ul> </li> <li>CREATE:<ul> <li>If <code>seq# = 0</code>, retrieve next sequence number from <code>bicont.bcseqn</code>, increment until unique in <code>arcufm</code>, and update <code>bicont.bcseqn</code>.</li> <li>Create new <code>arcufm</code> record with <code>cono</code>, <code>seq#</code>, <code>cust</code>, <code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, and <code>del = 'A'</code>.</li> <li>Set <code>flag = '1'</code>.</li> </ul> </li> <li>UPDATE:<ul> <li>Update existing <code>arcufm</code> record with provided <code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, retaining <code>del</code> status.</li> <li>Set <code>flag = '1'</code>.</li> </ul> </li> <li>DELETE:<ul> <li>If <code>del != 'D'</code>, update <code>arcufm</code> record to set <code>del = 'D'</code>.</li> <li>Set <code>flag = 'D'</code>.</li> </ul> </li> <li> <p>RESTORE:</p> <ul> <li>If <code>del = 'D'</code>, update <code>arcufm</code> record to set <code>del = 'A'</code>.</li> <li>Set <code>flag = 'A'</code>.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Return <code>flag</code> and <code>errmsg</code> (if applicable).</li> <li>For <code>VIEW</code>, include retrieved record fields.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Customer Validation:</li> <li><code>cono</code> must exist in <code>bicont</code> and not be deleted.</li> <li> <p><code>cust</code> must exist in <code>arcust</code> and not be deleted.</p> </li> <li> <p>Form Type Validation:</p> </li> <li> <p><code>fmty</code> must exist in <code>gstabl</code> with type <code>FRMTYP</code> and not be deleted.</p> </li> <li> <p>Contact Name:</p> </li> <li> <p><code>cntc</code> must be non-blank for <code>CREATE</code> and <code>UPDATE</code>.</p> </li> <li> <p>Email Validation:</p> </li> <li>If <code>emla</code> is provided, it must be valid per <code>VALMAILID</code>.</li> <li> <p><code>emla</code> is optional if <code>fmyn = 'N'</code>; otherwise, it is required for <code>CREATE</code> and <code>UPDATE</code>.</p> </li> <li> <p>Flag Validation:</p> </li> <li> <p><code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code> must be <code>Y</code> or <code>N</code>.</p> </li> <li> <p>Sequence Number for CREATE:</p> </li> <li> <p>If <code>seq# = 0</code>, generate a unique sequence number by incrementing <code>bicont.bcseqn</code> until no conflict exists in <code>arcufm</code>.</p> </li> <li> <p>Deletion and Restoration:</p> </li> <li>Deletion sets <code>del = 'D'</code> only if the record is active (<code>del != 'D'</code>).</li> <li> <p>Restoration sets <code>del = 'A'</code> only if the record is deleted (<code>del = 'D'</code>).</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>In <code>INQ</code> mode, only <code>VIEW</code> operation is allowed; no database updates occur.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Sequence Number Generation:</li> <li>Retrieve <code>bcseqn</code> from <code>bicont</code> for the given <code>cono</code>.</li> <li>Increment <code>bcseqn</code> and check <code>arcufm</code> for uniqueness using <code>cono</code> and <code>seq#</code>.</li> <li>Repeat until a unique <code>seq#</code> is found, then update <code>bicont.bcseqn</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#database-tables","title":"Database Tables","text":"<ul> <li>arcust: Validates customer code (<code>cust</code>) and retrieves customer name.</li> <li>bicont: Validates company code (<code>cono</code>), retrieves company name, and manages sequence numbers (<code>bcseqn</code>).</li> <li>arcufm: Stores contact records; used for retrieval, creation, update, deletion, or restoration.</li> <li>gstabl: Validates form type code (<code>fmty</code>) with type <code>FRMTYP</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#external-programs","title":"External Programs","text":"<ul> <li>VALMAILID: Validates email addresses for <code>CREATE</code> and <code>UPDATE</code> operations.</li> <li>QCMDEXC: Applies file overrides based on <code>fgrp</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/","title":"AR932 OCL","text":"<p>Let\u2019s break down the provided A/R Fuels Customer Maintenance program, which is written in Operation Control Language (OCL), commonly used on IBM midrange systems like the IBM System/36. OCL is a job control language used to define and execute programs, manage files, and control job flow. The program snippet provided appears to be part of a batch process for maintaining customer data in an Accounts Receivable (A/R) system for a fuels-related application.</p> <p>Below, I\u2019ll explain the process steps of the OCL program, identify the external programs called, and list the tables (files) used, based on the provided code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL code provided is a control script that sets up the environment and executes a program, likely written in RPG (Report Program Generator), a language commonly used with OCL on IBM systems. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The <code>CALL</code> statement initiates the execution of a program named <code>GSGENIEC</code>.</li> <li>This is likely a utility or initialization program that sets up the environment or performs a prerequisite task for the A/R Fuels Customer Maintenance process.</li> <li> <p>The exact functionality of <code>GSGENIEC</code> is not specified in the code, but it could handle tasks like validating the environment, checking user permissions, or preparing data for subsequent steps.</p> </li> <li> <p>Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> (If) statement checks a condition using a system variable or parameter <code>?L'506,3'?</code>.</li> <li>The <code>L</code> likely refers to a local data area or a system variable at position 506, with a length of 3 characters.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes the <code>RETURN</code> command, which terminates the OCL procedure immediately.</li> <li> <p>This acts as a gatekeeper, ensuring that the rest of the program only runs if the condition is false (e.g., a specific status or flag is not set).</p> </li> <li> <p>Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command appears to invoke a system procedure or a subroutine, passing parameters.</li> <li>The commas (<code>,,,,,,,,</code>) indicate placeholder parameters, and <code>?9?</code> is a substitution variable (likely a parameter passed to the procedure, such as a library or file identifier).</li> <li> <p>The exact purpose of <code>SCPROCP</code> is unclear without more context, but it might set up additional environment settings, call a subroutine, or perform a system-level operation.</p> </li> <li> <p>Environment Setup (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command is likely a custom or system-specific command related to Year 2000 (Y2K) compliance or date handling.</li> <li>It may initialize date-related settings or ensure that the system handles dates correctly (e.g., using a four-digit year format).</li> <li> <p>This step ensures the program operates in a Y2K-compliant environment, which was critical for older systems processing dates.</p> </li> <li> <p>Program Load (<code>// LOAD AR932</code>):</p> </li> <li>The <code>LOAD</code> statement loads the main program, <code>AR932</code>, into memory for execution.</li> <li><code>AR932</code> is likely an RPG program responsible for the core A/R Fuels Customer Maintenance logic, such as updating customer records, processing fuel-related transactions, or generating reports.</li> <li> <p>This step prepares the system to run the actual business logic.</p> </li> <li> <p>File Definitions:</p> </li> <li>The <code>FILE</code> statements define the files (tables) that the <code>AR932</code> program will use. Each file is associated with a specific dataset and access mode:<ul> <li><code>FILE NAME-ARFUEL,LABEL-?9?ARFUEL,DISP-SHR</code>:</li> <li>Defines a file named <code>ARFUEL</code> (likely the A/R Fuels file).</li> <li>The <code>LABEL-?9?ARFUEL</code> specifies the file\u2019s label, where <code>?9?</code> is a substitution variable (e.g., a library or prefix like <code>QSYS/</code> or a specific library name).</li> <li><code>DISP-SHR</code> indicates the file is opened in shared mode, allowing multiple programs or users to access it concurrently.</li> <li><code>FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR</code>:</li> <li>Defines a file named <code>ARCUST</code> (likely the A/R Customer file).</li> <li>Similar to <code>ARFUEL</code>, it uses a substitution variable for the label and is opened in shared mode.</li> <li><code>FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</li> <li>Defines a file named <code>ARCONT</code> (likely the A/R Control file, which may store configuration or summary data).</li> <li>Also uses a substitution variable and shared mode.</li> </ul> </li> <li> <p>These files are critical for the <code>AR932</code> program to read or update customer and fuel-related data.</p> </li> <li> <p>Program Execution (<code>// RUN</code>):</p> </li> <li>The <code>RUN</code> statement executes the loaded <code>AR932</code> program.</li> <li>This is where the actual customer maintenance logic is performed, using the files defined above (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>).</li> <li>The program likely performs tasks like adding, updating, or deleting customer records, processing fuel transactions, or generating maintenance reports.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external program: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility or initialization program that performs setup tasks before the main logic.</p> <p>Additionally, the main program executed is: 2. AR932:    - Loaded and run via <code>// LOAD AR932</code> and <code>// RUN</code>.    - This is the core RPG program responsible for A/R Fuels Customer Maintenance.</p> <p>The <code>SCPROCP</code> command may also invoke a system procedure or subroutine, but it\u2019s unclear whether this is a distinct program or a system function. Without further context, I\u2019ll treat it as a system-level operation rather than a named external program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (tables), as defined in the <code>FILE</code> statements: 1. ARFUEL:    - Likely contains fuel-specific accounts receivable data, such as fuel purchase records, transaction details, or billing information for fuel customers.    - Label: <code>?9?ARFUEL</code> (with <code>?9?</code> as a substitution variable for the library or prefix).    - Access mode: Shared (<code>DISP-SHR</code>).</p> <ol> <li>ARCUST:</li> <li>Likely the customer master file, storing customer details such as account numbers, names, addresses, and credit information.</li> <li>Label: <code>?9?ARCUST</code>.</li> <li> <p>Access mode: Shared (<code>DISP-SHR</code>).</p> </li> <li> <p>ARCONT:</p> </li> <li>Likely a control file containing configuration data, summary totals, or control parameters for the A/R system (e.g., batch numbers, processing flags, or system settings).</li> <li>Label: <code>?9?ARCONT</code>.</li> <li>Access mode: Shared (<code>DISP-SHR</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Calls <code>GSGENIEC</code> to initialize or validate the environment.</li> <li>Checks a condition (<code>?L'506,3'?</code>) and returns if true, halting further execution.</li> <li>Invokes <code>SCPROCP</code> with a parameter (<code>?9?</code>), possibly for system setup.</li> <li>Sets up Y2K compliance with <code>GSY2K</code>.</li> <li>Loads the main program <code>AR932</code>.</li> <li>Defines three files (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>) for use by <code>AR932</code>.</li> <li> <p>Runs <code>AR932</code> to perform customer maintenance tasks.</p> </li> <li> <p>External Programs Called:</p> </li> <li><code>GSGENIEC</code> (initialization utility).</li> <li> <p><code>AR932</code> (main RPG program for A/R Fuels Customer Maintenance).</p> </li> <li> <p>Tables (Files) Used:</p> </li> <li><code>ARFUEL</code> (fuel transaction data).</li> <li><code>ARCUST</code> (customer master data).</li> <li><code>ARCONT</code> (control or configuration data).</li> </ul> <p>If you have additional details about the system (e.g., IBM System/36 specifics, the purpose of <code>GSGENIEC</code>, or the <code>SCPROCP</code> command), I can refine the explanation further. Let me know if you need more analysis or clarification!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/","title":"AR932 RPGLE","text":"<p>The provided AR932.rpgle.txt is an RPGLE (RPG IV) program, converted from an earlier RPG version (as indicated by the TARGET/400 source conversion comments), used for Accounts Receivable Fuels Customer Maintenance. This program is called from the OCL program (<code>AR932.ocl36.txt</code>) and provides an interactive screen-based interface for maintaining customer records in an A/R fuels system on an IBM midrange platform (likely IBM System/36 or AS/400). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program (<code>AR932</code>) is designed to manage customer records for fuel-related accounts receivable, allowing users to add, update, delete, or reactivate records through a workstation interface. The program uses multiple files and handles user interactions via screens (<code>AR932S1</code> and <code>AR932S2</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications (<code>H</code> specs):<ul> <li><code>DFTACTGRP(*NO)</code>: Runs in a named activation group, typical for ILE programs.</li> <li><code>DFTNAME(AR932)</code>: Specifies the default program name.</li> <li><code>FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> </ul> </li> <li>File Declarations (<code>F</code> specs):<ul> <li>Defines files (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>, <code>GSCONT</code>, <code>PRINT</code>, and workstation file <code>AR932D</code>).</li> <li>Initializes the workstation file with a handler (<code>PROFOUNDUI(HANDLER)</code>) for modern UI integration and an information data structure (<code>INFDS</code>) for screen status.</li> </ul> </li> <li> <p>Data Structures and Arrays:</p> <ul> <li>Defines arrays <code>SEP</code> and <code>SEP2</code> for formatting output (likely separators for reports).</li> <li>Defines <code>MSG</code> array with 12 predefined messages for user feedback (e.g., \"THIS RECORD PREVIOUSLY DELETED\", \"RECORD NOT FOUND\").</li> <li>Defines <code>INFDS</code> to capture workstation status (e.g., function key presses).</li> </ul> </li> <li> <p>Initial Setup and Screen Control:</p> </li> <li>Checks <code>QSCTL</code> (likely a control variable) to determine the initial screen mode:<ul> <li>If <code>QSCTL</code> is blank, sets <code>*IN09</code> and <code>*IN01</code> to '1' (on), indicating initial screen display (<code>AR932S1</code>), and sets <code>QSCTL</code> to 'R'.</li> <li>Otherwise, clears <code>*IN09</code>, <code>*IN01</code>, and <code>*IN02</code>, and attempts to read from screen formats <code>AR932S1</code> (indicator 81) or <code>AR932S2</code> (indicator 82).</li> </ul> </li> <li>If <code>*IN09</code> is on (error or initial state), calls the <code>ROLLSR</code> subroutine to handle screen navigation and clears function key indicators (<code>*INKA</code>, <code>*INKD</code>, etc.).</li> <li>Initializes flags (<code>*IN15</code>, <code>*IN75</code>) and sets up time/date fields (<code>TIMDAT</code>, <code>TIME</code>, <code>DATE</code>) for display or reporting.</li> <li> <p>Chains to <code>ARCONT</code> to retrieve control data, setting <code>*IN75</code> and <code>*IN15</code> if successful.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program operates in a loop, handling user inputs via function keys (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>) and screen formats (<code>AR932S1</code>, <code>AR932S2</code>).</li> <li>Function Key Handling:<ul> <li><code>*INKA</code> (Bypass Entry): Clears fields (<code>CLEAR</code> subroutine), sets <code>*IN81</code> and <code>*IN11</code> (update mode), and skips to the end of the loop.</li> <li><code>*INKD</code> (Delete Record): Checks mode (<code>*IN10</code> for entry, <code>*IN11</code> for update) and deletion status (<code>*IN21</code>):</li> <li>If <code>*IN21</code> is off, calls <code>DELETE</code> subroutine to mark a record for deletion.</li> <li>If <code>*IN21</code> is on, calls <code>REACTI</code> subroutine to reactivate a deleted record.</li> <li><code>*INKG</code> (End of Screen): Clears screen indicators (<code>*IN81</code>, <code>*IN82</code>) and sets <code>*INLR</code> (last record) to exit the program.</li> <li><code>*INKJ</code> (Switch to Entry Mode): Clears fields, sets <code>*IN82</code> and <code>*IN10</code> (entry mode), and clears other indicators.</li> <li><code>*INKK</code> (Switch to Update Mode): Clears fields, sets <code>*IN81</code> and <code>*IN11</code> (update mode), and clears other indicators.</li> </ul> </li> <li>Screen Processing:<ul> <li>If <code>*IN01</code> is on, executes <code>S1</code> subroutine (processes <code>AR932S1</code> screen).</li> <li>If <code>*IN02</code> is on, executes <code>S2</code> subroutine (processes <code>AR932S2</code> screen).</li> </ul> </li> <li> <p>Writes to screen formats <code>AR932S1</code> or <code>AR932S2</code> based on indicators <code>*IN81</code> or <code>*IN82</code>.</p> </li> <li> <p>Subroutine Execution:</p> </li> <li>S1 Subroutine (Screen 1 Processing):<ul> <li>Chains to <code>ARCONT</code> using company number (<code>CO</code>) to validate the company.</li> <li>If not found (<code>*IN92</code> on), displays error message 6 (\"RECORD NOT FOUND\").</li> <li>Chains to <code>ARCUST</code> using <code>CO</code> and <code>CUST</code> (customer number) to validate the customer.</li> <li>If not found, displays error message 11 (\"INVALID CUSTOMER NUMBER ENTERED\").</li> <li>Chains to <code>ARFUEL</code> to check if a fuel record exists.</li> <li>If not found, displays messages 6 and 7 (\"RECORD NOT FOUND\", \"PRESS F10 TO ADD\").</li> <li>If the fuel record is marked deleted (<code>AFDEL = 'D'</code>), sets <code>*IN21</code> and displays messages 1 and 10 (\"THIS RECORD PREVIOUSLY DELETED\", \"PRESS F4 TO REACTIVATE\").</li> <li>If valid, moves data to screen fields (<code>MOVE</code> subroutine) and sets update mode (<code>*IN11</code>, <code>*IN62</code>, <code>*IN82</code>).</li> </ul> </li> <li>S2 Subroutine (Screen 2 Processing):<ul> <li>Validates company and customer numbers similar to <code>S1</code>.</li> <li>In entry mode (<code>*IN10</code>):</li> <li>Checks if <code>CO</code> is zero (displays message 4: \"COMPANY CAN'T BE ZERO\").</li> <li>Checks if a fuel record already exists (displays messages 8 and 9: \"CANNOT ADD - THIS RECORD EXISTS\", \"PRES F11 TO UPDATE\").</li> <li>Sets appropriate mode indicators (<code>*IN82</code> for entry, <code>*IN81</code> for update) and writes to the output file if needed.</li> </ul> </li> <li>CLEAR Subroutine:<ul> <li>Resets <code>CUST</code> and <code>NAME</code> fields to zeros or blanks.</li> </ul> </li> <li>MOVE Subroutine:<ul> <li>Moves <code>AFCO</code> (company number) and <code>AFCUST</code> (customer number) from <code>ARFUEL</code> to screen fields <code>CO</code> and <code>CUST</code>.</li> </ul> </li> <li>ROLLSR Subroutine:<ul> <li>Clears function key indicators (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>).</li> <li>Checks workstation status for roll-up (<code>01122</code>, <code>*IN54</code>) or roll-down (<code>01123</code>, <code>*IN55</code>) events, triggering <code>ROLLFW</code> or <code>ROLLBW</code> subroutines.</li> </ul> </li> <li>ROLLFW Subroutine (Roll Forward):<ul> <li>Chains to <code>ARFUEL</code> using <code>CO</code> and <code>CUST</code>, then reads the next record.</li> <li>Updates screen fields with new <code>AFCO</code> and <code>AFCUST</code> values or displays message 2 (\"END OF FILE HAS BEEN REACHED\") if no more records.</li> </ul> </li> <li>ROLLBW Subroutine (Roll Backward):<ul> <li>Chains to <code>ARFUEL</code>, then reads the previous record (<code>READP</code>).</li> <li>Updates screen fields or displays message 3 (\"BEGINNING OF FILE REACHED\") if at the start.</li> </ul> </li> <li>DELETE Subroutine:<ul> <li>Sets deletion message 5 (\"PREVIOUS RECORD DELETED\") and indicators (<code>*IN88</code>, <code>*IN90</code>, <code>*IN81</code>, <code>*IN72</code>).</li> <li>Writes to the output file and clears screen indicators.</li> </ul> </li> <li> <p>REACTI Subroutine:</p> <ul> <li>Sets reactivation message 12 (\"PREVIOUS RECORD WAS REACTIVATED\") and indicators (<code>*IN88</code>, <code>*IN90</code>, <code>*IN81</code>, <code>*IN73</code>).</li> <li>Writes to the output file and clears screen indicators.</li> </ul> </li> <li> <p>Output and Reporting:</p> </li> <li>Writes to the <code>PRINT</code> file for a customer maintenance listing, including:<ul> <li>Company name (<code>ACNAME</code>), page number, date, time, and headers (\"FUELS CUSTOMER MAINTENANCE LISTING\").</li> <li>Details for each record (<code>AFCO</code>, <code>AFCUST</code>, <code>NAME</code>, and action: \"NO ACTION TAKEN\", \"RECORD ADDED\", \"RECORD DELETED\", \"RECORD REACTIVATED\").</li> </ul> </li> <li> <p>Uses indicators <code>*IN15</code> (report header) and <code>*INOF</code> (overflow) to control report formatting.</p> </li> <li> <p>Program Termination:</p> </li> <li>If neither <code>*IN81</code> nor <code>*IN82</code> is on, sets <code>*INLR</code> (last record) to exit the program.</li> <li>The program loops back to handle additional user inputs until <code>*INKG</code> or another exit condition is met.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R fuels customer maintenance:</p> <ol> <li>Company and Customer Validation:</li> <li>A valid company number (<code>CO</code>) must exist in <code>ARCONT</code> before processing.</li> <li>A valid customer number (<code>CUST</code>) must exist in <code>ARCUST</code> for updates or deletions.</li> <li> <p>Company number cannot be zero in entry mode (message 4: \"COMPANY CAN'T BE ZERO\").</p> </li> <li> <p>Record Existence:</p> </li> <li>In entry mode (<code>*IN10</code>), a new fuel record cannot be added if it already exists in <code>ARFUEL</code> (messages 8 and 9).</li> <li> <p>In update mode (<code>*IN11</code>), the record must exist in <code>ARFUEL</code> for updates or deletions (message 6: \"RECORD NOT FOUND\").</p> </li> <li> <p>Deletion and Reactivation:</p> </li> <li>Records marked as deleted (<code>AFDEL = 'D'</code>) can be reactivated using F4 (<code>*INKD</code> with <code>*IN21</code> on, message 10: \"PRESS F4 TO REACTIVATE\").</li> <li>Deletion is only allowed if the record exists and is not already deleted (<code>*IN21</code> off, message 5: \"PREVIOUS RECORD DELETED\").</li> <li> <p>Reactivation updates the record to remove the deletion flag (message 12: \"PREVIOUS RECORD WAS REACTIVATED\").</p> </li> <li> <p>Screen Modes:</p> </li> <li>Entry Mode (<code>*IN10</code>): Allows adding new records (F10 key, <code>*INKJ</code>).</li> <li>Update Mode (<code>*IN11</code>): Allows updating or deleting existing records (F11 key, <code>*INKK</code>).</li> <li>Bypass Entry (<code>*INKA</code>): Skips data entry and returns to update mode.</li> <li> <p>End of Screen (<code>*INKG</code>): Exits the program.</p> </li> <li> <p>Navigation:</p> </li> <li> <p>Roll-up (<code>*IN54</code>) and roll-down (<code>*IN55</code>) allow browsing through <code>ARFUEL</code> records, with messages for end-of-file (message 2) or beginning-of-file (message 3).</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays appropriate error messages for invalid inputs (e.g., message 11: \"INVALID CUSTOMER NUMBER ENTERED\").</li> <li> <p>Prevents actions on deleted records unless reactivating.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a printed report listing actions taken (add, delete, reactivate, or no action) for each customer record, including company and customer numbers, names, and timestamps.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the <code>F</code> specifications:</p> <ol> <li>AR932D:</li> <li>Type: Workstation file (CF, combined file).</li> <li>Purpose: Handles interactive screen input/output for formats <code>AR932S1</code> and <code>AR932S2</code>.</li> <li>Handler: <code>PROFOUNDUI(HANDLER)</code> for modern UI integration.</li> <li> <p>Information Data Structure: <code>INFDS</code> captures screen status (e.g., function key codes).</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (IF, fixed-length 256 bytes, key length 2).</li> <li>Purpose: Stores control data (e.g., company details).</li> <li>Fields: <code>ACDEL</code> (delete flag), <code>ACCO</code> (company number), <code>ACNAME</code> (company name).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>ARFUEL:</p> </li> <li>Type: Update file (UF, fixed-length 9 bytes, key length 8).</li> <li>Purpose: Stores fuel-specific A/R data (e.g., customer fuel transactions).</li> <li>Fields: <code>AFDEL</code> (delete flag), <code>AFCO</code> (company number), <code>AFCUST</code> (customer number).</li> <li> <p>Access: Keyed access starting at position 2, supports add (<code>EADD</code>) and delete (<code>EDEL</code>) operations.</p> </li> <li> <p>ARCUST:</p> </li> <li>Type: Input file (IF, fixed-length 384 bytes, key length 8).</li> <li>Purpose: Stores customer master data.</li> <li>Fields: <code>ARDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARNAME</code> (customer name).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (IF, fixed-length 512 bytes, key length 2).</li> <li>Purpose: Likely a general system control file, possibly for cross-module data.</li> <li>Fields: <code>GXDEL</code> (delete flag), <code>GXCONO</code> (company number).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>PRINT:</p> </li> <li>Type: Output file (O, fixed-length 160 bytes).</li> <li>Purpose: Generates a printed report for customer maintenance actions.</li> <li>Fields: Includes <code>ACNAME</code>, <code>AFCO</code>, <code>AFCUST</code>, <code>NAME</code>, <code>PAGE</code>, <code>DATE</code>, <code>TIME</code>, and action descriptions.</li> <li>Overflow Indicator: <code>*INOF</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs via <code>CALL</code> operations. All processing is handled within the program using subroutines (<code>S1</code>, <code>S2</code>, <code>CLEAR</code>, <code>MOVE</code>, <code>ROLLSR</code>, <code>ROLLFW</code>, <code>ROLLBW</code>, <code>DELETE</code>, <code>REACTI</code>). However, the program is called from the OCL program (<code>AR932.ocl36.txt</code>), which also invokes <code>GSGENIEC</code> as part of the job setup. Thus, no additional external programs are called directly by <code>AR932</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes the program, files, and screen environment.</li> <li>Sets up initial screen mode based on <code>QSCTL</code> and reads screen input (<code>AR932S1</code> or <code>AR932S2</code>).</li> <li>Processes user inputs via function keys (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>) to manage modes (entry/update), delete, or reactivate records.</li> <li>Executes subroutines for screen processing (<code>S1</code>, <code>S2</code>), navigation (<code>ROLLFW</code>, <code>ROLLBW</code>), and record actions (<code>DELETE</code>, <code>REACTI</code>).</li> <li>Generates a printed report of customer maintenance actions.</li> <li> <p>Loops until an exit condition (<code>*INKG</code> or no active screen indicators) sets <code>*INLR</code> to terminate.</p> </li> <li> <p>Business Rules:</p> </li> <li>Validates company and customer numbers.</li> <li>Prevents adding duplicate records or invalid actions (e.g., zero company number).</li> <li>Manages deletion and reactivation with appropriate flags and messages.</li> <li>Supports entry and update modes with distinct screen behaviors.</li> <li>Provides navigation for browsing records and detailed error messaging.</li> <li> <p>Produces a formatted report of actions taken.</p> </li> <li> <p>Tables (Files) Used:</p> </li> <li><code>AR932D</code> (workstation, screen I/O).</li> <li><code>ARCONT</code> (control data).</li> <li><code>ARFUEL</code> (fuel A/R data).</li> <li><code>ARCUST</code> (customer master data).</li> <li><code>GSCONT</code> (system control data).</li> <li> <p><code>PRINT</code> (report output).</p> </li> <li> <p>External Programs Called:</p> </li> <li>None directly called by <code>AR932.rpgle</code>. The OCL program calls <code>AR932</code> and <code>GSGENIEC</code>.</li> </ul> <p>If you have additional details (e.g., the content of <code>AR932S1</code>/<code>AR932S2</code> screen formats, the purpose of <code>GSCONT</code>, or specific business requirements), I can provide a more detailed analysis. Let me know if you need further clarification or specific aspects explored!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/","title":"Summary AR932 OCL","text":"<p>Based on the provided AR932.ocl36.txt (OCL program) and AR932.rpgle.txt (RPGLE program), I\u2019ve analyzed the call stack and program logic to identify the use cases implemented and to create a function requirement document for a non-interactive version of the primary use case. The OCL program sets up the environment and calls the RPGLE program <code>AR932</code>, which handles the core functionality of Accounts Receivable Fuels Customer Maintenance. Below, I\u2019ll list the use cases and provide a concise function requirement document, assuming the process is driven by input parameters rather than screen interactions.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The program implements a single primary use case, with sub-functions handled through different modes and actions. The use case is:</p> <ol> <li>Maintain Accounts Receivable Fuels Customer Records:</li> <li>Description: Allows maintenance of customer records in the A/R fuels system, including adding new fuel records, updating existing records, deleting records (marking as deleted), and reactivating previously deleted records.</li> <li>Sub-functions:<ul> <li>Add Record: Create a new fuel record for a valid company and customer.</li> <li>Update Record: Modify details of an existing fuel record.</li> <li>Delete Record: Mark a fuel record as deleted (<code>AFDEL = 'D'</code>).</li> <li>Reactivate Record: Remove the deletion flag from a previously deleted record.</li> <li>Browse Records: Navigate through fuel records (forward/backward) to review existing data.</li> <li>Generate Report: Produce a printed report of maintenance actions (add, delete, reactivate, or no action).</li> </ul> </li> <li>Inputs: Company number (<code>CO</code>), customer number (<code>CUST</code>), and action type (add, update, delete, reactivate).</li> <li>Outputs: Updated <code>ARFUEL</code> file, error messages, and a printed report in the <code>PRINT</code> file.</li> <li>Context: The program validates inputs against <code>ARCONT</code> (control file), <code>ARCUST</code> (customer master), and <code>GSCONT</code> (system control), ensuring data integrity and compliance with business rules.</li> </ol> <p>No additional use cases are implemented, as the program focuses solely on customer maintenance for the A/R fuels system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#ar-fuels-customer-maintenance-function-requirements","title":"A/R Fuels Customer Maintenance Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#overview","title":"Overview","text":"<p>This function maintains customer records in the Accounts Receivable (A/R) Fuels system by processing actions (add, update, delete, reactivate) on fuel-related customer data. It validates inputs, updates the <code>ARFUEL</code> file, and generates a report of actions taken. The function accepts input parameters instead of interactive screen inputs, ensuring batch or API-driven execution.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CO</code>): Numeric (2 digits), identifies the company.</li> <li>Customer Number (<code>CUST</code>): Numeric (6 digits), identifies the customer.</li> <li>Action Type: String, one of:</li> <li><code>ADD</code>: Create a new fuel record.</li> <li><code>UPDATE</code>: Modify an existing fuel record.</li> <li><code>DELETE</code>: Mark a fuel record as deleted.</li> <li><code>REACTIVATE</code>: Remove deletion flag from a deleted record.</li> <li>Customer Name (<code>NAME</code>): String (30 characters), required for <code>ADD</code> and <code>UPDATE</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated <code>ARFUEL</code> File: Modified fuel record (added, updated, deleted, or reactivated).</li> <li>Report Output (<code>PRINT</code>): Listing of actions taken, including company number, customer number, customer name, and action description.</li> <li>Error Message: String indicating success or failure (e.g., \"RECORD NOT FOUND\", \"INVALID CUSTOMER NUMBER\").</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Check if <code>CO</code> exists in <code>ARCONT</code>. If not, return error: \"RECORD NOT FOUND\".</li> <li>Check if <code>CUST</code> exists in <code>ARCUST</code>. If not, return error: \"INVALID CUSTOMER NUMBER ENTERED\".</li> <li>For <code>ADD</code>, ensure <code>CO</code> is not zero. If zero, return error: \"COMPANY CAN'T BE ZERO\".</li> <li>Check Record Existence:</li> <li>For <code>ADD</code>, verify no existing record in <code>ARFUEL</code> for <code>CO</code> and <code>CUST</code>. If found, return error: \"CANNOT ADD - THIS RECORD EXISTS\".</li> <li>For <code>UPDATE</code>, <code>DELETE</code>, or <code>REACTIVATE</code>, verify record exists in <code>ARFUEL</code>. If not, return error: \"RECORD NOT FOUND\".</li> <li>Perform Action:</li> <li>ADD: Create new <code>ARFUEL</code> record with <code>CO</code>, <code>CUST</code>, <code>NAME</code>, and <code>AFDEL = ' '</code> (not deleted).</li> <li>UPDATE: Update existing <code>ARFUEL</code> record with new <code>NAME</code>.</li> <li>DELETE: Set <code>AFDEL = 'D'</code> in <code>ARFUEL</code> record. Return message: \"PREVIOUS RECORD DELETED\".</li> <li>REACTIVATE: If <code>AFDEL = 'D'</code>, set <code>AFDEL = ' '</code>. Return message: \"PREVIOUS RECORD WAS REACTIVATED\".</li> <li>Generate Report:</li> <li>Write to <code>PRINT</code> file with:<ul> <li>Header: Company name (<code>ACNAME</code> from <code>ARCONT</code>), date, time, \"FUELS CUSTOMER MAINTENANCE LISTING\".</li> <li>Detail: <code>CO</code>, <code>CUST</code>, <code>NAME</code>, and action (\"RECORD ADDED\", \"RECORD DELETED\", \"RECORD REACTIVATED\", or \"NO ACTION TAKEN\").</li> </ul> </li> <li>Return Result:</li> <li>Return success message or error message based on validation and action outcome.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Validation:</li> <li>Company number must exist in <code>ARCONT</code>.</li> <li>Customer number must exist in <code>ARCUST</code>.</li> <li>Company number cannot be zero for <code>ADD</code>.</li> <li>Record Management:</li> <li><code>ADD</code> fails if a record already exists in <code>ARFUEL</code> for the same <code>CO</code> and <code>CUST</code>.</li> <li><code>UPDATE</code> and <code>DELETE</code> require an existing <code>ARFUEL</code> record.</li> <li><code>REACTIVATE</code> only applies to records with <code>AFDEL = 'D'</code>.</li> <li>Deletion:</li> <li>Deletion sets <code>AFDEL = 'D'</code> (soft delete) rather than removing the record.</li> <li>Reactivation clears <code>AFDEL</code> to restore the record.</li> <li>Reporting:</li> <li>All actions are logged in the <code>PRINT</code> file with timestamps and action details.</li> <li>System Control:</li> <li>Validates against <code>GSCONT</code> for system-wide settings (e.g., company number consistency).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date and Time: Retrieved from system clock and formatted as <code>MMDDYY</code> (6 digits) for <code>DATE</code> and <code>HHMMSS</code> (6 digits) for <code>TIME</code> in the report.</li> <li>Key Construction: Combines <code>CO</code> (2 digits) and <code>CUST</code> (6 digits) into an 8-digit key (<code>MASKEY</code>) for <code>ARFUEL</code> and <code>ARCUST</code> lookups.</li> <li>Page Number: Increments for each report page, included in <code>PRINT</code> output.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: Control data (company details).</li> <li><code>ARFUEL</code>: Fuel A/R data (updateable).</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>GSCONT</code>: System control data.</li> <li><code>PRINT</code>: Output file for reports.</li> <li>External Programs: None directly called by the function (OCL calls <code>GSGENIEC</code> for setup, but not required in non-interactive mode).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Returns specific error messages for validation failures (e.g., \"RECORD NOT FOUND\", \"CANNOT ADD - THIS RECORD EXISTS\").</li> <li>Ensures no action is taken if validations fail, preserving data integrity.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#notes","title":"Notes","text":"<ul> <li>The function requirement document assumes a non-interactive process, replacing screen inputs (<code>AR932S1</code>, <code>AR932S2</code>) with direct parameter inputs (<code>CO</code>, <code>CUST</code>, <code>ACTION</code>, <code>NAME</code>).</li> <li>The business rules and process steps are derived from the RPGLE program\u2019s logic, focusing on core functionality and validation.</li> <li>No calculations beyond simple key construction and date/time formatting are required, as the program primarily manages record states and reporting.</li> <li>The document is concise, focusing on business requirements while including necessary technical details (e.g., file dependencies, error messages).</li> </ul> <p>If you need further refinements, additional use cases, or specific details (e.g., sample input/output formats), please let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/","title":"BB928 RPGLE","text":"<p>The RPGLE program <code>BB928</code> is a component of a billing and invoicing system designed to handle the maintenance and inquiry of salesman ID entries. It is called by the main program <code>BB928P</code> (as referenced in the previous document) to perform specific operations such as creating, updating, or displaying salesman ID records. Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#process-steps-of-the-bb928-program","title":"Process Steps of the BB928 Program","text":"<p>The program is structured to interact with a display file (<code>bb928d</code>) and manage salesman ID records through a single panel format (<code>fmt01</code>). It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, based on input parameters. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>p$co</code>: Company number.</li> <li><code>p$smid</code>: Salesman ID.</li> <li><code>p$mode</code>: Run mode (<code>MNT</code> for maintenance, <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>).</li> <li><code>p$flag</code>: Return flag to indicate success or failure.</li> </ul> </li> <li>Field Setup: Moves input parameters <code>p$co</code> and <code>p$smid</code> to display file fields (<code>f$co</code>, <code>f$smid</code>). Initializes output parameters (<code>o$co</code>, <code>o$smid</code>, <code>o$mode</code>, <code>o$fgrp</code>, <code>o$flag</code>) and miscellaneous fields (<code>fmtagn</code>, <code>delagn</code>, <code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li> <p>Keylist: Defines <code>klslsm</code> keylist using <code>f$co</code> and <code>f$smid</code> for database access.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies database overrides from <code>ovg</code> or <code>ovz</code> arrays to point to the correct files (<code>gbbslsm</code> or <code>zbbslsm</code>, <code>gbicont</code> or <code>zbicont</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> (update/add mode) and <code>bicont</code> (input mode) with <code>usropn</code>. Chains to <code>bicont</code> using <code>f$co</code> to validate the company number.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Record Retrieval: Chains to <code>bbslsm</code> using <code>klslsm</code> (company and salesman ID) to check if the record exists.<ul> <li>If the record is not found (<code>*in99 = *on</code>), clears the record buffer (<code>bbslsmpf</code>) and sets <code>w$exists</code> to <code>*off</code>.</li> <li>If found, sets <code>w$exists</code> to <code>*on</code>.</li> </ul> </li> <li> <p>Header and Protection: Sets the display header (<code>c$hdr1</code>) to \"Salesman Id Entry Maintenance\" or \"Salesman Id Inquiry\" based on <code>p$mode</code>. Sets <code>*in70</code> to <code>*on</code> for inquiry mode (protecting input fields) or <code>*off</code> for maintenance mode.</p> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes the <code>clrscr</code> format to clear the display.</li> <li>Initial Setup: Calls <code>f01mov</code> to initialize format fields and sets <code>w$fmt</code> to <code>FMT01</code>.</li> <li> <p>Main Loop:</p> <ul> <li>Displays the message subfile if <code>dspmsg</code> is <code>*on</code> (via <code>wrtmsg</code>) or clears the screen.</li> <li>Sets <code>*in19</code> to <code>*off</code> to indicate no format change.</li> <li>Displays <code>fmt01</code> using <code>exfmt</code> (other formats like <code>fmt02</code> are commented out, indicating only <code>fmt01</code> is currently used).</li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>) and cursor position (<code>row</code>, <code>col</code>).</li> <li>Clears the message subfile if <code>dspmsg</code> is <code>*on</code> (via <code>clrmsg</code>).</li> <li>Processes the current format (<code>fmt01</code>) by calling <code>f01sr</code>.</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li> <p>Handles user input for <code>fmt01</code>:</p> <ul> <li>F4 (Field Prompting): Calls <code>prompt</code> to set <code>*in19</code> for cursor positioning.</li> <li>F10 (Position Cursor Home): Clears cursor position (<code>row</code>, <code>col</code>).</li> <li>F12 (Exit): Sets <code>fmtagn</code> to <code>*off</code> to exit the loop.</li> <li>Inquiry Mode: If <code>p$mode = 'INQ'</code>, calls <code>f01nxt</code> to determine the next format (though it currently exits the loop).</li> <li>Enter Key:</li> <li>Validates input fields via <code>f01edt</code>.</li> <li>If no errors (<code>*in50 = *off</code>) and in maintenance mode (<code>p$mode = 'MNT'</code>), updates the database via <code>upddbf</code>.</li> <li>Calls <code>f01nxt</code> to determine the next format or exit.</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li> <p>If <code>*in19</code> is <code>*off</code>, sets <code>fmtagn</code> to <code>*off</code> to exit the main loop (no additional formats like <code>fmt02</code> are used).</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validates input fields in <code>fmt01</code>:<ul> <li>Checks if <code>smsmnm</code> (salesman name) is blank, setting <code>m@id</code> to <code>ERR0012</code>, <code>*in50</code>, and <code>*in51</code> if true.</li> <li>Checks if <code>smemal</code> (email address) is blank, setting <code>m@id</code> to <code>ERR0012</code>, <code>*in50</code>, and <code>*in52</code> if true.</li> </ul> </li> <li> <p>In inquiry mode (<code>p$mode = 'INQ'</code>), clears error indicators and messages to prevent validation errors.</p> </li> <li> <p>Initialize Format Fields (<code>f01mov</code> Subroutine):</p> </li> <li> <p>Calls <code>f01edt</code> to validate fields and clears error indicators and messages if validation fails.</p> </li> <li> <p>Format Protection Schemes (<code>f01pro</code> Subroutine):</p> </li> <li> <p>Sets protection indicators:</p> <ul> <li>Clears <code>*in70</code>\u2013<code>*in74</code> by default.</li> <li>In inquiry mode (<code>p$mode \u2260 'MNT'</code>), sets <code>*in70</code>\u2013<code>*in73</code> to <code>*on</code> to protect input fields.</li> <li>In maintenance mode, if the record exists (<code>w$exists = *on</code>), sets <code>*in71</code> to protect key fields (<code>f$co</code>, <code>f$smid</code>).</li> </ul> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> <ul> <li>Saves current field values to <code>svds</code>.</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>:</li> <li>If the record exists (<code>*in80 = *off</code>):<ul> <li>If fields have changed (<code>svds \u2260 wkds01</code>), restores <code>svds</code> to <code>wkds01</code> and updates the record (<code>bbslsmpf</code>).</li> <li>Sets <code>p$flag</code> to <code>1</code> to indicate success.</li> <li>If no changes, forces end-of-data (<code>feod</code>) to reset the file pointer.</li> </ul> </li> <li>If the record does not exist:<ul> <li>Clears the record buffer, sets <code>smco</code> (company), <code>smsmid</code> (salesman ID), and <code>smdel</code> to <code>A</code> (active), and writes a new record to <code>bbslsmpf</code>.</li> <li>Sets <code>p$flag</code> to <code>1</code>.</li> </ul> </li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Determines cursor location (<code>row</code>, <code>col</code>) from <code>csrloc</code> and sets <code>*in19</code> to indicate a format change.</li> </ul> </li> <li> <p>Message Handling:</p> <ul> <li>addmsg: Sends error messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>, preserving the current record format and <code>pagrrn</code>.</li> </ul> </li> <li> <p>Program Exit:</p> <ul> <li>Closes all files, sets <code>*inlr</code> to <code>*on</code>, and returns to the calling program (<code>BB928P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Input Validation:    - Salesman name (<code>smsmnm</code>) and email address (<code>smemal</code>) are mandatory fields. If either is blank, an <code>ERR0012</code> message is displayed, and error indicators (<code>*in50</code>, <code>*in51</code>, <code>*in52</code>) are set.    - In inquiry mode, validation errors are cleared to allow read-only access. 2. Mode-Based Access:    - Maintenance Mode (<code>MNT</code>):      - Allows creation or update of salesman ID records.      - Protects key fields (<code>f$co</code>, <code>f$smid</code>) if the record exists (<code>w$exists = *on</code>) to prevent changes to the company or salesman ID.      - Updates or creates records in <code>bbslsm</code> and sets <code>p$flag</code> to <code>1</code> on success.    - Inquiry Mode (<code>INQ</code>):      - Protects all input fields (<code>*in70</code>\u2013<code>*in73</code>) to prevent modifications.      - Displays existing records without allowing changes. 3. Record Existence:    - Checks if the salesman ID record exists in <code>bbslsm</code> before displaying or updating.    - Creates a new record with <code>smdel = 'A'</code> (active) if it does not exist. 4. Company Validation:    - Validates the company number (<code>f$co</code>) against <code>bicont</code> during file open. 5. Message Handling:    - Displays error messages for invalid input and clears them after display or in inquiry mode. 6. Database Integrity:    - Uses file overrides to select the correct database files based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>).    - Ensures only changed records are updated, and new records are written with appropriate default values.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files: 1. bbslsm: Primary file for salesman ID records, opened in update/add mode (<code>uf a</code>) with <code>usropn</code>. Used for reading, updating, and creating records. 2. bicont: Input file for company records, opened with <code>usropn</code>. Used to validate the company number (<code>f$co</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. QCMDEXC: Executes file override commands for <code>bbslsm</code> and <code>bicont</code>. 2. QMHSNDPM: Sends messages to the program message queue for error display. 3. QMHRMVPM: Removes messages from the program message queue.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb928d</code> is a workstation file using the <code>PROFOUNDUI(HANDLER)</code> for the user interface, with a single active format (<code>fmt01</code>). References to <code>fmt02</code> are commented out, suggesting it was planned but not implemented.</li> <li>Indicators: Uses indicators (19, 21\u201379, 90\u201399) for screen control, error handling, and field protection, consistent with <code>BB928P</code>.</li> <li>Field Prefixes: Follows the same naming conventions as <code>BB928P</code> (e.g., <code>f$</code> for display fields, <code>p$</code> for input parameters, <code>o$</code> for output parameters).</li> <li>Integration with BB928P: <code>BB928</code> is called by <code>BB928P</code> for options 1 (create), 2 (change), and 5 (display) to handle individual record operations, returning a flag (<code>p$flag</code>) to indicate success.</li> </ul> <p>This program is a focused module for maintaining or viewing salesman ID records, complementing the subfile-based interface of <code>BB928P</code> by providing detailed record manipulation functionality.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/","title":"BB9284 RPGLE","text":"<p>The RPGLE program <code>BB9284</code> is a specialized module within a billing and invoicing system, designed to handle the inactivation and reactivation of salesman ID entries. It is called by the main program <code>BB928P</code> (as referenced in the earlier document) to perform these specific operations. The program uses a display file (<code>bb9284d</code>) to present a window (<code>actwdw</code>) for user interaction and updates the salesman ID record status in the database. Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#process-steps-of-the-bb9284-program","title":"Process Steps of the BB9284 Program","text":"<p>The program is structured to display a window for confirming the inactivation or reactivation of a salesman ID record and update the database accordingly. It operates in a single mode, focusing on toggling the record\u2019s status (<code>smdel</code>) between active (<code>A</code>) and inactive (<code>I</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>p$co</code>: Company number.</li> <li><code>p$smid</code>: Salesman ID.</li> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>).</li> <li><code>p$flag</code>: Return flag to indicate the outcome (e.g., <code>I</code> for inactivated, <code>A</code> for reactivated).</li> </ul> </li> <li>Field Setup: Moves input parameters <code>p$co</code> and <code>p$smid</code> to display file fields (<code>f$co</code>, <code>f$smid</code>). Initializes <code>winagn</code> to <code>*on</code> to control the window processing loop, and sets up message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li>Keylist: Defines <code>klslsm</code> keylist using <code>f$co</code> and <code>f$smid</code> for database access.</li> <li> <p>Date Validation: Defines a parameter list (<code>pld010</code>) for a potential date validation module (<code>dtp010r</code>), though it is not used in the provided code.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies a database override from <code>ovg</code> or <code>ovz</code> arrays to point to the correct file (<code>gbbslsm</code> or <code>zbbslsm</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> in update/add mode (<code>uf a</code>) with <code>usropn</code>.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li> <p>Record Retrieval: Chains to <code>bbslsm</code> using <code>klslsm</code> (company and salesman ID) to retrieve the record.</p> <ul> <li>If the record exists (<code>*in99 = *off</code>):</li> <li>If <code>smdel = 'I'</code> (inactive), sets the display header (<code>f$hdr</code>) to \"Salesman Id Entry ReActivate\" (<code>hdr(01)</code>), function key label (<code>f$fkyd</code>) to \"F22=ReActivate\" (<code>fky(01)</code>), and <code>*in72</code> to <code>*on</code> (indicating reactivation is available).</li> <li>Otherwise, sets <code>f$hdr</code> to \"Salesman Id Entry InActivate\" (<code>hdr(02)</code>), <code>f$fkyd</code> to \"F23=InActivate\" (<code>fky(02)</code>), and <code>*in73</code> to <code>*on</code> (indicating inactivation is available).</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li>Main Loop: Runs while <code>winagn = *on</code>:<ul> <li>Display Messages: If <code>dspmsg = *on</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>msgclr</code> to clear the message area.</li> <li>Display Window: Displays the <code>actwdw</code> window using <code>exfmt</code>.</li> <li>Clear Messages: If <code>dspmsg = *on</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Indicators: Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>) using <code>zero20</code>.</li> <li>Process User Input:</li> <li>F12 (Exit): Sets <code>winagn</code> to <code>*off</code> to exit the loop without changes.</li> <li>F22 (ReActivate) or F23 (InActivate):<ul> <li>Calls <code>winedt</code> to validate input (which calls <code>chkact</code>).</li> <li>If no errors (<code>*in50 = *off</code>), calls <code>winupd</code> to update the database and sets <code>winagn</code> to <code>*off</code> to exit.</li> </ul> </li> <li>Other (e.g., Enter): Calls <code>winedt</code> to validate input but does not update the database.</li> </ul> </li> <li> <p>Cursor Positioning: Commented-out code suggests cursor location (<code>row</code>, <code>col</code>) could be calculated from <code>csrloc</code>, but it is not currently used.</p> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li> <p>Calls <code>chkact</code> to perform validation, though <code>chkact</code> is currently empty, indicating no specific input validation is implemented.</p> </li> <li> <p>Check Activity (<code>chkact</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for future validation of the salesman ID\u2019s activity (e.g., checking if the record is linked to other data preventing inactivation).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li> <p>Processes based on the function key:</p> <ul> <li>F22 (ReActivate):</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is inactive (<code>smdel = 'I'</code>), sets <code>smdel</code> to <code>A</code> (active), updates the record (<code>bbslsmpf</code>), and sets <code>p$flag</code> to <code>A</code>.</li> <li>F23 (InActivate):</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is not already inactive (<code>smdel \u2260 'I'</code>), sets <code>smdel</code> to <code>I</code> (inactive), updates the record (<code>bbslsmpf</code>), and sets <code>p$flag</code> to <code>I</code>.</li> </ul> </li> <li> <p>Message Handling:</p> </li> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li> <p>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>. Commented-out code for saving/restoring <code>rcdnam</code> and <code>pagrrn</code> suggests it was planned but not needed for the window format.</p> </li> <li> <p>Program Exit:</p> </li> <li>Closes all files, sets <code>*inlr</code> to <code>*on</code>, and returns to the calling program (<code>BB928P</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Status Toggle:    - A salesman ID record can be toggled between active (<code>smdel = 'A'</code>) and inactive (<code>smdel = 'I'</code>) states.    - Only inactive records can be reactivated (F22), and only non-inactive records can be inactivated (F23). 2. Record Existence:    - The program checks if the salesman ID record exists in <code>bbslsm</code> before allowing status changes.    - If the record does not exist or is in an invalid state (e.g., already inactive for F23), no update occurs. 3. User Interface:    - The window (<code>actwdw</code>) displays a header and function key label based on the record\u2019s current status:      - Inactive records show \"Salesman Id Entry ReActivate\" with F22 enabled.      - Active records show \"Salesman Id Entry InActivate\" with F23 enabled.    - F12 allows the user to exit without changes. 4. Database Integrity:    - Uses file overrides to select the correct database file (<code>gbbslsm</code> or <code>zbbslsm</code>) based on <code>p$fgrp</code>.    - Updates only the <code>smdel</code> field in the <code>bbslsm</code> record, preserving other fields. 5. Return Flag:    - Sets <code>p$flag</code> to <code>A</code> for reactivation or <code>I</code> for inactivation to inform the calling program (<code>BB928P</code>) of the outcome.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. bbslsm: Primary file for salesman ID records, opened in update/add mode (<code>uf a</code>) with <code>usropn</code>. Used for reading and updating the record status (<code>smdel</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes the file override command for <code>bbslsm</code>. 2. QMHSNDPM: Sends messages to the program message queue for error or confirmation display. 3. QMHRMVPM: Removes messages from the program message queue.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb9284d</code> is a workstation file using the <code>PROFOUNDUI(HANDLER)</code> for the user interface, with a single window format (<code>actwdw</code>) for inactivation/reactivation.</li> <li>Indicators: Uses indicators (19, 21\u201379, 90\u201399) for screen control and message handling, consistent with <code>BB928P</code> and <code>BB928</code>. Notably, <code>*in72</code> and <code>*in73</code> control the display of reactivation/inactivation options.</li> <li>Field Prefixes: Follows the same naming conventions as <code>BB928P</code> and <code>BB928</code> (e.g., <code>f$</code> for display fields, <code>p$</code> for input parameters, <code>o$</code> for output parameters).</li> <li>Integration with BB928P: <code>BB9284</code> is called by <code>BB928P</code> for option 4 (inactivate/reactivate) to toggle the status of a salesman ID record, returning a flag (<code>p$flag</code>) to indicate the result.</li> <li>Empty Subroutine: The <code>chkact</code> subroutine is empty, suggesting that additional validation (e.g., checking for dependencies like vendor links in <code>BB928P</code>) was planned but not implemented.</li> </ul> <p>This program is a focused module for toggling the active/inactive status of salesman ID records, complementing the broader functionality of <code>BB928P</code> and <code>BB928</code> by providing a simple, user-driven interface for status changes.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/","title":"BB9285 RPGLE","text":"<p>The RPGLE program <code>BB9285</code> is a component of a billing and invoicing system designed to generate a printed listing of salesman ID records. It is called by the main program <code>BB928P</code> (as referenced in earlier documents) to produce a report of salesman ID data. The program reads records from a database file, formats them, and outputs them to a printer file (<code>qsysprt</code>). Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#process-steps-of-the-bb9285-program","title":"Process Steps of the BB9285 Program","text":"<p>The program is structured to open files, read salesman ID records sequentially, and print a formatted report with headers and details. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives one input parameter:<ul> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>), determining which database file to use.</li> </ul> </li> <li>Header Setup: Sets the report header (<code>c$hdr1</code>) to \"Salesman Id Listing By Co#/Salesman Id\" from the <code>hdr</code> array.</li> <li>Initial State: Sets <code>prtovr</code> to <code>*on</code> to trigger printing of the report header on the first page.</li> <li> <p>File Open: Calls <code>opntbl</code> to open the database file.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies database overrides from <code>ovg</code> or <code>ovz</code> arrays to point to the correct file (<code>gbbslsm</code> or <code>zbbslsm</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> in input mode (<code>if</code>) with <code>usropn</code>.</p> </li> <li> <p>Print Listing (<code>prtlist</code> Subroutine):</p> </li> <li>Open Printer File: Calls <code>openprtf</code> to set up and open the printer file (<code>qsysprt</code>).</li> <li>Read Records: Reads <code>bbslsm</code> sequentially until the last record (<code>*inlr = *on</code>):<ul> <li>For each record, calls <code>ovrflo</code> to handle page overflow and print headers if needed.</li> <li>Prints the detail line (<code>dtl01</code>) containing the salesman ID record fields.</li> </ul> </li> <li> <p>Close Printer File: Calls <code>closprtf</code> to close <code>qsysprt</code> and clean up overrides.</p> </li> <li> <p>Handle Overflow (<code>ovrflo</code> Subroutine):</p> </li> <li>Checks if the printer file overflow indicator (<code>*inof</code>) is <code>*on</code>.<ul> <li>If true, sets <code>prtovr</code> to <code>*on</code> and sets indicators <code>*in81</code>\u2013<code>*in85</code> to <code>*on</code> for header printing.</li> </ul> </li> <li> <p>If <code>prtovr = *on</code>, prints the report header (<code>hdr01</code>) and resets <code>prtovr</code> to <code>*off</code>.</p> </li> <li> <p>Open Printer File (<code>openprtf</code> Subroutine):</p> </li> <li>Constructs a printer override command by combining <code>ovr(01)</code> and <code>ovr(02)</code> (defining page size, lines per inch, characters per inch, overflow line, output queue, form type, hold, and save options).</li> <li>Executes the override using <code>QCMDEXC</code>.</li> <li> <p>Opens the printer file <code>qsysprt</code>.</p> </li> <li> <p>Close Printer File (<code>closprtf</code> Subroutine):</p> </li> <li>Closes <code>qsysprt</code>.</li> <li> <p>Applies the delete override command (<code>ovr(03)</code>) using <code>QCMDEXC</code> to remove the printer file override.</p> </li> <li> <p>Program Exit:</p> </li> <li>Closes all files and returns to the calling program (<code>BB928P</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Report Content:    - The report lists all salesman ID records from <code>bbslsm</code>, sorted by company number (<code>smco</code>) and salesman ID (<code>smsmid</code>).    - Each detail line includes:      - <code>smco</code>: Company number (position 2).      - <code>smsmid</code>: Salesman ID (position 8).      - <code>smsmnm</code>: Salesman name (position 44).      - <code>smemal</code>: Email address (position 95).      - <code>smdel</code>: Deletion status (position 100, e.g., <code>A</code> for active, <code>I</code> for inactive, <code>D</code> for deleted). 2. Report Format:    - The report header (<code>hdr01</code>) includes:      - Company name (\"American Refining Group\") at position 24.      - Report title (<code>c$hdr1</code>) at position 65.      - Page number at position 154.      - Job name and program name at position 10/23.      - Date (<code>t#mdcy</code>) at position 154 in <code>MM/DD/YYYY</code> format.      - User ID (<code>ps#usr</code>) and file group (<code>p$fgrp</code>) at position 10/20.      - Time (<code>t#hms</code>) at position 154 in <code>HH:MM:SS</code> format.      - Column headers (\"Co\", \"Slsm Id\", \"Salesman Name\", \"Email Address\", \"Del\") at positions 2, 10, 27, 58, and 100.    - Headers are printed at the start of the report and on overflow (line 62, as specified in <code>ovr(01)</code>). 3. Printer Configuration:    - The printer file uses a page size of 68 lines and 164 characters, 8 lines per inch, 15 characters per inch, with overflow at line 62.    - The output is sent to the job\u2019s output queue (<code>OUTQ(*JOB)</code>), with the spool file held (<code>HOLD(*YES)</code>) and saved (<code>SAVE(*YES)</code>). 4. Database Selection:    - Uses file overrides to select <code>gbbslsm</code> or <code>zbbslsm</code> based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>). 5. Record Inclusion:    - Includes all records from <code>bbslsm</code>, regardless of status (<code>smdel</code>), unlike <code>BB928P</code>, which can filter inactive records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. bbslsm: Input file for salesman ID records, opened with <code>usropn</code>. Read sequentially to generate the report.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes file override commands for <code>bbslsm</code> and <code>qsysprt</code>, and deletes the printer file override after printing.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Printer File: <code>qsysprt</code> is a standard IBM i printer file, opened with <code>usropn</code> and configured for a 164-character wide report with overflow handling.</li> <li>Indicators: Uses <code>*inof</code> for printer overflow and <code>*in81</code>\u2013<code>*in85</code> for header printing control, but does not use display-related indicators (e.g., 19, 21\u201379) since it is a print-only program.</li> <li>Field Prefixes: Uses <code>c$</code> for the report header, <code>p$</code> for the input parameter, and standard database fields (<code>smco</code>, <code>smsmid</code>, etc.) without additional prefixes like <code>f$</code> or <code>s1</code> used in <code>BB928P</code> and <code>BB928</code>.</li> <li>Integration with BB928P: Called by <code>BB928P</code> for option 15 (F15) to print a salesman ID listing, passing the file group (<code>p$fgrp</code>) to determine the database file.</li> <li>Data Structures: Includes time (<code>t#</code>) and date (<code>d#</code>) conversion structures, used to format the report\u2019s date (<code>t#mdcy</code>) and time (<code>t#hms</code>) fields.</li> </ul> <p>This program is a straightforward report generator, complementing the interactive maintenance and inquiry functions of <code>BB928P</code>, <code>BB928</code>, and <code>BB9284</code> by providing a printed summary of all salesman ID records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/","title":"BB928P RPGLE","text":"<p>The provided RPGLE program, <code>BB928P</code>, is designed to manage salesman IDs within a billing and invoicing system. It uses a display file with a subfile to interact with users, allowing them to view, create, update, inactivate, reactivate, or print salesman ID records. Below, I\u2019ll explain the process steps, list the external programs called, and identify the database tables used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#process-steps-of-the-bb928p-program","title":"Process Steps of the BB928P Program","text":"<p>The program follows a structured flow, primarily driven by user interaction with a subfile (SFL1) displayed on a workstation. Here\u2019s a breakdown of the key process steps based on the program\u2019s logic:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters <code>p$mode</code> (run mode: 'MNT' for maintenance or 'INQ' for inquiry) and <code>p$fgrp</code> (file group: 'Z' or 'G').</li> <li>Genie Check: Calls <code>GSGENIE2C</code> to verify if the program is running in a Genie environment. If <code>genievar</code> is not 'YES', the program closes all files and exits.</li> <li>Field Setup: Initializes subfile control fields, message handling fields, and key lists (<code>klsfl1</code>, <code>kls1s1</code>) for database access. Sets up date/time fields using the system timestamp.</li> <li> <p>Headers: Sets the display header (<code>c$hdr1</code>) from the <code>hdr</code> array.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> ('G' or 'Z'), applies database overrides using <code>ovg</code> or <code>ovz</code> arrays to point to the correct files (<code>gbbslsm</code>, <code>zbbslsm</code>, <code>gbicont</code>, <code>zbicont</code>).</li> <li> <p>File Open: Opens the database files <code>bbslsm</code>, <code>bbslsmrd</code> (renamed record format), and <code>bicont</code> for input.</p> </li> <li> <p>Subfile Processing (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages in the message subfile and <code>wrtmsg</code> to write the message subfile control.</li> <li>Subfile Initialization: Sets the subfile mode (<code>sfmod1</code>) to folded (<code>#fold = '0'</code>, <code>*in45 = *on</code>) and initializes control fields (<code>c1co</code>, <code>c1smid</code>) to zeros or blanks.</li> <li>Inactive Records Filter: Sets <code>w$inact</code> to <code>*on</code> (include inactive records) due to the <code>jb01</code> revision, which removed the F8 toggle functionality.</li> <li>Protection Mode: Sets <code>*in70</code> based on <code>p$mode</code> (<code>*off</code> for 'MNT', <code>*on</code> for 'INQ' to protect input fields in inquiry mode).</li> <li>Initial Positioning: Calls <code>sf1rep</code> to position the file and load the subfile initially.</li> <li> <p>Main Loop:</p> <ul> <li>Display: Writes the command line (<code>sflcmd1</code>) and message subfile if needed, checks if subfile records exist to set <code>*in41</code> (SFLDSP), and determines folded/unfolded mode (<code>*in45</code>).</li> <li>User Input: Displays the subfile control (<code>sflctl1</code>) using <code>exfmt</code> and processes user input based on function keys and direct input:</li> <li>F3 (Exit): Sets <code>sf1agn</code> to <code>*off</code> to exit the loop.</li> <li>F4 (Field Prompting): Calls <code>prompt</code> to set <code>*in19</code> for cursor positioning.</li> <li>F5 (Refresh): Clears positioning fields (<code>r$co</code>, <code>r$smid</code>) and sets <code>repsfl</code> to reposition the subfile.</li> <li>F8 (Toggle Inactive): Previously toggled <code>w$inact</code> to include/exclude inactive records, but <code>jb01</code> revision defaults to include all records.</li> <li>F15 (Print Listing): Calls <code>BB9285</code> to print a salesman ID listing, passing <code>p$fgrp</code> as a parameter, and displays a confirmation message.</li> <li>Direct Access: If <code>d1opt</code>, <code>d1co</code>, or <code>d1smid</code> are non-zero, calls <code>sf1dir</code> for direct processing (create, change, inactivate, or display).</li> <li>Page Down: Calls <code>sf1lod</code> to load more subfile records.</li> <li>Enter Key: Calls <code>sf1prc</code> to process subfile changes.</li> <li>Repositioning: If <code>c1co</code> or <code>c1smid</code> are non-zero, calls <code>sf1rep</code> to reposition the subfile. F10 clears cursor positioning (<code>row1</code>, <code>col1</code>).</li> <li>Cursor and Record Number: Updates cursor location (<code>row1</code>, <code>col1</code>) and sets the subfile record number (<code>rcdnb1</code>) based on <code>pagrrn</code>.</li> </ul> </li> <li> <p>Subfile Record Processing (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads subfile records (<code>sfl1</code>) using <code>readc</code> until no more changed records (<code>*in81</code>).</li> <li> <p>For each changed record, calls <code>sf1chg</code> to process user-selected options.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Stores selected values (<code>s1co</code>, <code>s1smid</code>) in <code>s$co</code>, <code>s$smid</code>.</li> <li>Processes options based on <code>s1opt</code>:<ul> <li>Option 2 (Change): If in maintenance mode (<code>p$mode = 'MNT'</code>) and the record is not deleted/inactive, calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): If in maintenance mode, calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> </ul> </li> <li> <p>Updates the subfile record after processing by chaining to <code>bbslsm</code>, clearing <code>s1opt</code>, formatting (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating <code>sfl1</code>.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets <code>rrn1</code>.</li> <li>Validates control input (<code>sf1cte</code>).</li> <li>Positions the file using <code>kls1s1</code> (based on <code>c1co</code>, <code>c1smid</code>) and loads the subfile (<code>sf1lod</code>).</li> <li> <p>Retains control fields (<code>r$co</code>, <code>r$smid</code>) for future repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for future input validation.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Sets <code>rrn1</code> to the last saved record number (<code>rrnsv1</code>) and <code>rcdnb1</code> to the next record number for display.</li> <li>Loads up to <code>pagsz1</code> (14) records:<ul> <li>Reads the next record from <code>bbslsmrd</code>.</li> <li>Skips deleted/inactive records if <code>w$inact = *off</code>.</li> <li>Formats the subfile line (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes to <code>sfl1</code>.</li> </ul> </li> <li> <p>Updates <code>rrnsv1</code> with the last <code>rrn1</code>.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> </li> <li> <p>Clears the subfile record and populates fields (<code>s1co</code>, <code>s1smid</code>, <code>s1smnm</code>, <code>s1emal</code>, <code>s1del</code>) from the database record.</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets <code>*in72</code> (blue color) for deleted (<code>s1del = 'D'</code>) or inactive (<code>s1del = 'I'</code>) records.</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Validates direct input (<code>d1opt</code>, <code>d1co</code>, <code>d1smid</code>):</li> <li>For option 1 (create), ensures <code>d1co</code> and <code>d1smid</code> are non-zero and checks if the company number exists in <code>bicont</code>.</li> <li>Checks if the record exists in <code>bbslsm</code> to prevent duplicate creation or invalid updates.</li> <li>Processes valid options (1, 2, 4, 5) by calling <code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s04</code>, or <code>sf1s05</code>.</li> <li>Clears input fields upon successful processing.</li> </ul> </li> <li> <p>Subfile Options:</p> <ul> <li>sf1s01 (Create): Calls <code>BB928</code> in maintenance mode, passing <code>s$co</code>, <code>s$smid</code>, <code>p$fgrp</code>, and mode 'MNT'. Displays a confirmation message if successful (<code>o$flag = '1'</code>).</li> <li>sf1s02 (Change): Checks if the record is not deleted/inactive, calls <code>BB928</code> in maintenance mode, and displays a confirmation message if successful.</li> <li>sf1s04 (Inactivate/Reactivate): Calls <code>BB9284</code>, processes the return flag ('I' for inactivated, 'A' for reactivated, 'E' for vendor-linked error), and displays a message.</li> <li>sf1s05 (Display): Calls <code>BB928</code> in inquiry mode to display the record.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Sets <code>*in19</code> to indicate a panel format change for cursor positioning.</li> </ul> </li> <li> <p>Message Handling:</p> <ul> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>, preserving the current record format and <code>pagrrn</code>.</li> </ul> </li> <li> <p>Program Exit:</p> <ul> <li>Closes all files, sets <code>*inlr = *on</code>, and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. GSGENIE2C: Checks if the program is running in a Genie environment, returning <code>genievar</code> ('YES' or not). 2. QCMDEXC: Executes file override commands for <code>bbslsm</code>, <code>bbslsmrd</code>, and <code>bicont</code>. 3. QMHSNDPM: Sends messages to the program message queue. 4. QMHRMVPM: Removes messages from the program message queue. 5. BB928: Handles create, change, and display operations for salesman ID records, called with parameters for company, salesman ID, mode, file group, and return flag. 6. BB9284: Manages inactivate/reactivate operations for salesman ID records. 7. BB9285: Prints a salesman ID listing, called with the file group parameter.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files: 1. bbslsm: Primary input file for salesman ID records, opened with <code>usropn</code>. 2. bbslsmrd: Input file with a renamed record format (<code>bbslsmpr</code>) for salesman ID records, opened with <code>usropn</code>. 3. bicont: Input file for company records, used for validation, opened with <code>usropn</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb928pd</code> is a workstation file with a subfile (<code>sfl1</code>) and uses the <code>PROFOUNDUI(HANDLER)</code> for the user interface.</li> <li>Indicators: The program uses indicators (19, 21\u201379, 90\u201399) to control display behavior, error handling, and subfile operations.</li> <li>Field Prefixes: Uses prefixes like <code>f$</code>, <code>c1</code>, <code>s1</code>, <code>p$</code>, etc., to organize fields for display, control, and parameters.</li> <li>Revisions: The <code>jb01</code> revision (10/10/2023) modified the program to default to displaying all records (active and inactive) due to issues with Profound UI\u2019s F8 functionality.</li> </ul> <p>This program is a typical IBM i RPG application for interactive data management, leveraging subfiles for user interaction and database operations for data retrieval and manipulation.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/","title":"Summary BB928P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The RPGLE program call stack, consisting of <code>BB928P</code>, <code>BB928</code>, <code>BB9284</code>, and <code>BB9285</code>, implements a set of functionalities for managing salesman ID records within a billing and invoicing system on IBM i. These programs collectively support the following use cases:</p> <ol> <li>View Salesman ID Records:</li> <li> <p>Allows users to view a list of salesman ID records in a subfile, with options to filter by company number and salesman ID, and display all records (active and inactive) in inquiry mode.</p> </li> <li> <p>Create a Salesman ID Record:</p> </li> <li> <p>Enables users to create a new salesman ID record, specifying company number, salesman ID, name, and email address, ensuring the company exists and the record does not already exist.</p> </li> <li> <p>Update a Salesman ID Record:</p> </li> <li> <p>Permits users to modify existing salesman ID records (name and email address), protecting key fields (company number and salesman ID) to maintain data integrity.</p> </li> <li> <p>Inactivate/Reactivate a Salesman ID Record:</p> </li> <li> <p>Allows users to toggle the status of a salesman ID record between active (<code>A</code>) and inactive (<code>I</code>), ensuring the record exists and is in the appropriate state for the action.</p> </li> <li> <p>Print a Salesman ID Listing:</p> </li> <li>Generates a printed report of all salesman ID records, including company number, salesman ID, name, email address, and status, sorted by company and salesman ID.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#function-requirement-document-manage-salesman-id-records","title":"Function Requirement Document: Manage Salesman ID Records","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#salesman-id-management-function-requirements","title":"Salesman ID Management Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#purpose","title":"Purpose","text":"<p>The <code>ManageSalesmanID</code> function manages salesman ID records in a billing and invoicing system, supporting creation, update, inactivation/reactivation, and printing of records without interactive screen handling. It processes inputs directly and applies business rules to maintain data integrity.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>): Numeric, identifies the company (validated against <code>bicont</code>).</li> <li>Salesman ID (<code>smid</code>): Alphanumeric, unique identifier for the salesman.</li> <li>Salesman Name (<code>smnm</code>): Alphanumeric, required for create/update.</li> <li>Email Address (<code>emal</code>): Alphanumeric, required for create/update.</li> <li>File Group (<code>fgrp</code>): <code>G</code> or <code>Z</code>, selects database file (<code>gbbslsm</code> or <code>zbbslsm</code>).</li> <li>Operation (<code>op</code>): Enum (<code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, <code>REACTIVATE</code>, <code>PRINT</code>).</li> <li>Output Flag (<code>flag</code>): Output parameter, indicates success (<code>1</code>, <code>A</code>, <code>I</code>) or failure (<code>E</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>co</code> exists in <code>bicont</code>.</li> <li>For <code>CREATE</code>, verify <code>co</code> and <code>smid</code> do not exist in <code>bbslsm</code>.</li> <li>For <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>, verify <code>co</code> and <code>smid</code> exist in <code>bbslsm</code>.</li> <li>For <code>CREATE</code> and <code>UPDATE</code>, ensure <code>smnm</code> and <code>emal</code> are non-blank.</li> <li>For <code>INACTIVATE</code>, ensure the record is not already inactive (<code>smdel \u2260 'I'</code>).</li> <li> <p>For <code>REACTIVATE</code>, ensure the record is inactive (<code>smdel = 'I'</code>).</p> </li> <li> <p>Select Database File:</p> </li> <li> <p>Apply file override to use <code>gbbslsm</code> (if <code>fgrp = 'G'</code>) or <code>zbbslsm</code> (if <code>fgrp = 'Z'</code>).</p> </li> <li> <p>Execute Operation:</p> </li> <li>CREATE:<ul> <li>Write a new record to <code>bbslsm</code> with <code>co</code>, <code>smid</code>, <code>smnm</code>, <code>emal</code>, and <code>smdel = 'A'</code> (active).</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li>UPDATE:<ul> <li>Update the existing record in <code>bbslsm</code> with new <code>smnm</code> and <code>emal</code>, preserving <code>co</code>, <code>smid</code>, and <code>smdel</code>.</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li>INACTIVATE:<ul> <li>Update the record in <code>bbslsm</code>, setting <code>smdel = 'I'</code>.</li> <li>Set <code>flag = 'I'</code> on success.</li> </ul> </li> <li>REACTIVATE:<ul> <li>Update the record in <code>bbslsm</code>, setting <code>smdel = 'A'</code>.</li> <li>Set <code>flag = 'A'</code> on success.</li> </ul> </li> <li> <p>PRINT:</p> <ul> <li>Read all records from <code>bbslsm</code> sequentially.</li> <li>Generate a report to <code>qsysprt</code> with:</li> <li>Header: Company name, report title (\"Salesman Id Listing By Co#/Salesman Id\"), page number, job name, program name, user ID, file group, date (MM/DD/YYYY), time (HH:MM:SS), and column headers (\"Co\", \"Slsm Id\", \"Salesman Name\", \"Email Address\", \"Del\").</li> <li>Detail: For each record, print <code>smco</code>, <code>smsmid</code>, <code>smsmnm</code>, <code>smemal</code>, <code>smdel</code>.</li> <li>Format: 68 lines, 164 characters wide, 8 LPI, 15 CPI, overflow at line 62, held and saved in the job\u2019s output queue.</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li> <p>Handle Errors:</p> </li> <li>If <code>co</code> is invalid, set <code>flag = 'E'</code> and return error message \"Invalid company number.\"</li> <li>If <code>smnm</code> or <code>emal</code> is blank for <code>CREATE</code> or <code>UPDATE</code>, set <code>flag = 'E'</code> and return error message \"Salesman name and email required.\"</li> <li>If record exists for <code>CREATE</code> or does not exist for <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>, set <code>flag = 'E'</code> and return appropriate error message.</li> <li> <p>If status is invalid for <code>INACTIVATE</code> or <code>REACTIVATE</code>, set <code>flag = 'E'</code> and return error message \"Invalid record status.\"</p> </li> <li> <p>Clean Up:</p> </li> <li>Close all files and remove overrides.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Data Integrity:</li> <li>Company number must exist in <code>bicont</code>.</li> <li>Salesman ID must be unique for <code>CREATE</code> and exist for <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>.</li> <li>Salesman name and email address are mandatory for <code>CREATE</code> and <code>UPDATE</code>.</li> <li>Status Management:</li> <li>Records can be active (<code>A</code>), inactive (<code>I</code>), or deleted (<code>D</code>).</li> <li>Only non-inactive records can be inactivated; only inactive records can be reactivated.</li> <li>Report Generation:</li> <li>The <code>PRINT</code> operation includes all records, regardless of status, sorted by company number and salesman ID.</li> <li>The report is formatted with fixed positions and includes metadata (job, user, date, time).</li> <li>Database Selection:</li> <li>File group (<code>G</code> or <code>Z</code>) determines the database file (<code>gbbslsm</code> or <code>zbbslsm</code>).</li> <li>Error Handling:</li> <li>Invalid inputs or operations result in <code>flag = 'E'</code> with a descriptive error message.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Date and Time Formatting (for <code>PRINT</code>):</li> <li>Date: Converted to <code>MM/DD/YYYY</code> format using system timestamp (<code>ps#mdy</code>) and time conversion structure (<code>t#mdcy</code>).</li> <li>Time: Converted to <code>HH:MM:SS</code> format using system timestamp (<code>ps#hms</code>) and time conversion structure (<code>t#hms</code>).</li> <li>Page Overflow (for <code>PRINT</code>):</li> <li>Triggers header printing when the printer file reaches line 62, as defined in the printer override.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Database Updates: Modified <code>bbslsm</code> records for <code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>.</li> <li>Report: Printed listing to <code>qsysprt</code> for <code>PRINT</code>.</li> <li>Flag: Returns <code>1</code> (success for <code>CREATE</code>, <code>UPDATE</code>, <code>PRINT</code>), <code>A</code> (success for <code>REACTIVATE</code>), <code>I</code> (success for <code>INACTIVATE</code>), or <code>E</code> (error).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#dependencies","title":"Dependencies","text":"<ul> <li>Database Files:</li> <li><code>bbslsm</code>: Salesman ID records (input for <code>PRINT</code>, update/add for others).</li> <li><code>bicont</code>: Company records (input for validation).</li> <li>External Programs:</li> <li><code>QCMDEXC</code>: Executes file overrides for <code>bbslsm</code> and <code>qsysprt</code>.</li> <li><code>QMHSNDPM</code>: Sends error messages to the program message queue.</li> <li><code>QMHRMVPM</code>: Removes messages from the program message queue.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/","title":"BB929 RPGLE","text":"<p>The <code>BB929</code> RPGLE program is part of the Billing and Invoicing system and is designed for CSR (Customer Service Representative) ID Entry Maintenance and Inquiry. It is called by the main program <code>BB929P</code> to handle the creation, modification, or inquiry of individual CSR records. Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#process-steps-of-the-rpgle-program-bb929","title":"Process Steps of the RPGLE Program (<code>BB929</code>)","text":"<p>The program is an interactive workstation-based application that uses a display file (<code>bb929d</code>) to present a single record format (<code>FMT01</code>) for maintaining or inquiring CSR ID records. It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, allowing users to create or update CSR records or view them without modification. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives five parameters:<ul> <li><code>p$co</code>: Company number (input).</li> <li><code>p$crid</code>: CSR ID (input).</li> <li><code>p$mode</code> (3 characters): Run mode (<code>MNT</code> for maintenance, <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> <li><code>p$flag</code> (1 character): Return flag (output, set to <code>1</code> on successful update/create).</li> </ul> </li> <li>Field Initialization:<ul> <li>Moves input parameters <code>p$co</code> and <code>p$crid</code> to display file fields <code>f$co</code> and <code>f$crid</code>.</li> <li>Initializes output parameters (<code>o$co</code>, <code>o$crid</code>, <code>o$mode</code>, <code>o$fgrp</code>, <code>o$flag</code>) to blanks or zeros.</li> <li>Sets up message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li>Defines key list <code>klcsr</code> for accessing the <code>bbcsr</code> file using <code>f$co</code> and <code>f$crid</code>.</li> <li>Initializes flags (<code>fmtagn</code>, <code>delagn</code>, <code>winagn</code>) to <code>*OFF</code>.</li> </ul> </li> <li> <p>Commented Test Code: Includes commented-out code for testing with hardcoded values (e.g., <code>p$mode = 'MNT'</code>).</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>Z</code> or <code>G</code>), applies database overrides using the <code>QCMDEXC</code> API to redirect file access to the appropriate library (<code>gbbcsr</code> or <code>zbcsr</code> for <code>bbcsr</code>, <code>gbicont</code> or <code>zbicont</code> for <code>bicont</code>).</li> <li>File Opening: Opens two files:<ul> <li><code>bbcsr</code> (update/add, keyed access).</li> <li><code>bicont</code> (input-only, keyed access).</li> </ul> </li> <li> <p>Company Validation: Chains to <code>bicont</code> using <code>f$co</code> to validate the company number (no specific error handling is implemented here).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Record Retrieval: Chains to <code>bbcsr</code> using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>) to check if the record exists.<ul> <li>If <code>*IN99</code> is <code>*ON</code> (record not found), clears the <code>bbcsrpf</code> record format and sets <code>w$exists</code> to <code>*OFF</code>.</li> <li>If <code>*IN99</code> is <code>*OFF</code> (record found), sets <code>w$exists</code> to <code>*ON</code>.</li> </ul> </li> <li> <p>Header and Protection Setup:</p> <ul> <li>If <code>p$mode</code> is <code>MNT</code>, sets <code>*IN70</code> to <code>*OFF</code> (no global protection) and sets the header <code>c$hdr1</code> to \"CSR Id Entry Maintenance\".</li> <li>If <code>p$mode</code> is <code>INQ</code>, sets <code>*IN70</code> to <code>*ON</code> (global protection) and sets <code>c$hdr1</code> to \"CSR Id Inquiry\".</li> </ul> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes the <code>clrscr</code> format to clear the display.</li> <li>Initialize Format: Calls <code>f01mov</code> to initialize fields for the <code>FMT01</code> format and sets <code>w$fmt</code> to <code>FMT01</code>.</li> <li> <p>Main Loop (<code>fmtagn</code>):</p> <ul> <li>Display Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>clrscr</code>.</li> <li>Clear Format Change Indicator: Sets <code>*IN19</code> to <code>*OFF</code>.</li> <li>Display Format: </li> <li>If <code>w$fmt</code> is <code>FMT01</code>, calls <code>f01pro</code> to set protection indicators and executes <code>exfmt fmt01</code> to display the format and accept user input.</li> <li>If <code>w$fmt</code> is not <code>FMT01</code>, defaults to processing <code>FMT01</code> (note: <code>FMT02</code> is commented out, indicating it may not be used).</li> <li>Clear Error Indicators: Resets indicators <code>*IN50</code> to <code>*IN69</code> to zero.</li> <li>Clear Cursor Position: Clears <code>row</code> and <code>col</code>.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Process Format Input: If the current format is <code>FMT01</code>, calls <code>f01sr</code> to process user input.</li> <li>The loop continues until <code>fmtagn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li> <p>Handle User Input:</p> <ul> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting.</li> <li>F10 (Position Cursor Home): Clears <code>row</code> and <code>col</code> to reposition the cursor.</li> <li>F12 (Exit): Sets <code>fmtagn</code> to <code>*OFF</code> to exit the loop.</li> <li>Inquiry Mode: If <code>p$mode</code> is <code>INQ</code>, calls <code>f01nxt</code> to determine the next format (which terminates the loop since <code>*IN19</code> is <code>*OFF</code>).</li> <li>Enter Key:</li> <li>Calls <code>f01edt</code> to validate input fields.</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>) and in <code>MNT</code> mode, calls <code>upddbf</code> to update the database.</li> <li>Calls <code>f01nxt</code> to determine the next format (terminates the loop if <code>*IN19</code> is <code>*OFF</code>).</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li>If <code>*IN19</code> is <code>*OFF</code>, sets <code>fmtagn</code> to <code>*OFF</code> to exit the main loop.</li> <li> <p>(Note: Code for <code>FMT02</code> is commented out, suggesting only <code>FMT01</code> is used.)</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validate CSR Name: If <code>crcrnm</code> (CSR name) is blank, sets error <code>ERR0012</code>, sets <code>*IN50</code> and <code>*IN51</code> to <code>*ON</code>, and calls <code>addmsg</code>.</li> <li>Validate Email Address: If <code>cremal</code> (email address) is blank, sets error <code>ERR0012</code>, sets <code>*IN50</code> and <code>*IN52</code> to <code>*ON</code>, and calls <code>addmsg</code>.</li> <li> <p>Inquiry Mode: If <code>p$mode</code> is <code>INQ</code>, clears error indicators (<code>*IN50</code> to <code>*IN69</code>) and clears messages using <code>clrmsg</code>.</p> </li> <li> <p>Initialize Format Field Values (<code>f01mov</code> Subroutine):</p> </li> <li>Calls <code>f01edt</code> to validate fields.</li> <li> <p>If errors exist (<code>*IN50</code> is <code>*ON</code>), clears error indicators and messages.</p> </li> <li> <p>Format Protection Schemes (<code>f01pro</code> Subroutine):</p> </li> <li>Clears protection indicators <code>*IN70</code> to <code>*IN74</code> to <code>0</code>.</li> <li>If <code>p$mode</code> is not <code>MNT</code> (i.e., <code>INQ</code>), sets <code>*IN70</code> to <code>*IN73</code> to <code>1</code> for global input protection.</li> <li> <p>If in <code>MNT</code> mode and the record exists (<code>w$exists</code> is <code>*ON</code>), sets <code>*IN71</code> to <code>*ON</code> to protect key fields (<code>f$co</code>, <code>f$crid</code>).</p> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> <ul> <li>Saves the current <code>wkds01</code> (external data structure for <code>bbcsr</code>) to <code>svds</code>.</li> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>:</li> <li>If the record exists (<code>*IN80</code> is <code>*OFF</code>):<ul> <li>If <code>svds</code> differs from <code>wkds01</code> (indicating changes), restores <code>svds</code> to <code>wkds01</code>, updates the <code>bbcsrpf</code> record, and sets <code>p$flag</code> to <code>1</code>.</li> <li>If no changes, forces end-of-data (<code>feod</code>) on <code>bbcsr</code>.</li> </ul> </li> <li>If the record does not exist (<code>*IN80</code> is <code>*ON</code>):<ul> <li>Clears <code>bbcsrpf</code>, restores <code>svds</code> to <code>wkds01</code>, sets <code>crco</code> (company), <code>crcrid</code> (CSR ID), and <code>crdel</code> to <code>A</code> (active), writes the new record, and sets <code>p$flag</code> to <code>1</code>.</li> </ul> </li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Calculates cursor position (<code>row</code>, <code>col</code>) using <code>csrloc</code>.</li> <li>Checks the current format (<code>rcdnam</code> = <code>FMT01</code>) but has no specific logic implemented (likely a placeholder for field-specific prompting).</li> <li>Sets <code>*IN19</code> to <code>*ON</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> <li>Write Message Subfile (<code>wrtmsg</code>):</li> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> <li>Clear Message Subfile (<code>clrmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Saves and restores <code>rcdnam</code> and <code>pagrrn</code>.</li> <li>Clears messages using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB929</code> program enforces the following business rules for managing CSR ID records:</p> <ol> <li>Operational Modes:</li> <li>Maintenance Mode (<code>MNT</code>): Allows creation and updating of CSR records. Key fields (<code>f$co</code>, <code>f$crid</code>) are protected if the record already exists (<code>w$exists</code> is <code>*ON</code>). Input validation is performed, and the database is updated if no errors occur.</li> <li> <p>Inquiry Mode (<code>INQ</code>): Displays CSR records in read-only mode, with all input fields protected (<code>*IN70</code> to <code>*IN73</code> set to <code>1</code>). No database updates are performed.</p> </li> <li> <p>Input Validation:</p> </li> <li>CSR Name (<code>crcrnm</code>): Must not be blank; otherwise, error <code>ERR0012</code> is displayed, and <code>*IN51</code> is set.</li> <li>Email Address (<code>cremal</code>): Must not be blank; otherwise, error <code>ERR0012</code> is displayed, and <code>*IN52</code> is set.</li> <li> <p>In inquiry mode, validation errors are cleared, and no updates are attempted.</p> </li> <li> <p>Database Operations:</p> </li> <li>Create Record: If the record does not exist (<code>*IN80</code> is <code>*ON</code>), a new record is written to <code>bbcsr</code> with <code>crdel</code> set to <code>A</code> (active).</li> <li>Update Record: If the record exists and changes are detected (<code>svds</code> differs from <code>wkds01</code>), the record is updated.</li> <li>No Changes: If no changes are detected, the file is set to end-of-data (<code>feod</code>).</li> <li> <p>Success Flag: Sets <code>p$flag</code> to <code>1</code> on successful create or update.</p> </li> <li> <p>Field Protection:</p> </li> <li>In maintenance mode, key fields (<code>f$co</code>, <code>f$crid</code>) are protected for existing records to prevent modification.</li> <li> <p>In inquiry mode, all input fields are protected to prevent any changes.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>The program uses the <code>p$fgrp</code> parameter to determine the file library (<code>Z</code> or <code>G</code>) and applies overrides to access <code>gbbcsr</code> or <code>zbcsr</code> for <code>bbcsr</code>, and <code>gbicont</code> or <code>zbicont</code> for <code>bicont</code>.</p> </li> <li> <p>User Interface:</p> </li> <li>Displays a single format (<code>FMT01</code>) for entering or viewing CSR data.</li> <li>Supports function keys:<ul> <li>F04: Initiates field prompting (logic not fully implemented).</li> <li>F10: Repositions the cursor to the home position.</li> <li>F12: Exits the program.</li> </ul> </li> <li> <p>Provides message feedback for validation errors and successful operations.</p> </li> <li> <p>Message Handling:</p> </li> <li>Uses the <code>GSMSGF</code> message file in <code>*LIBL</code> for error messages (e.g., <code>ERR0012</code> for blank fields).</li> <li>Displays messages in a message subfile (<code>msgctl</code>) and clears them as needed.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb929d:    - Type: Workstation file (display file).    - Usage: Contains the <code>FMT01</code> format (and possibly <code>FMT02</code>, commented out) for user interaction, along with a message subfile (<code>msgctl</code>) and clear screen format (<code>clrscr</code>).    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (update/add, keyed access).    - Usage: Stores CSR records, used for creating, updating, and retrieving records. Accessed using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 3. bicont:    - Type: Physical file (input-only, keyed access).    - Usage: Used to validate the company number (<code>f$co</code>).    - Override: Redirected to <code>gbicont</code> or <code>zbicont</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs (all IBM i APIs): 1. QCMDEXC:    - Purpose: Executes file override commands to redirect <code>bbcsr</code> and <code>bicont</code> to the appropriate library.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 2. QMHSNDPM:    - Purpose: Sends messages (e.g., error <code>ERR0012</code>) to the program message queue for display in the message subfile.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 3. QMHRMVPM:    - Purpose: Clears messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB929</code> RPGLE program, called by <code>BB929P</code>, is responsible for the maintenance and inquiry of individual CSR ID records in the Billing and Invoicing system. It operates in <code>MNT</code> or <code>INQ</code> mode, allowing users to create or update CSR records (with validation for non-blank name and email fields) or view them in read-only mode. The program uses a single display format (<code>FMT01</code>) with Profound UI integration, enforces field protection based on mode and record existence, and updates the <code>bbcsr</code> file accordingly. It validates the company number against <code>bicont</code> and uses file overrides to access the correct library (<code>Z</code> or <code>G</code>). The program relies on IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) for file overrides and message handling, and interacts with three files: <code>bb929d</code> (display), <code>bbcsr</code> (CSR data), and <code>bicont</code> (company validation).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/","title":"BB9294 RPGLE","text":"<p>The <code>BB9294</code> RPGLE program is part of the Billing and Invoicing system and is designed to handle the Inactivation and Reactivation of Customer Service Representative (CSR) IDs. It is called by the main program <code>BB929P</code> to toggle the status of a CSR record between active (<code>A</code>) and inactive (<code>I</code>). Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#process-steps-of-the-rpgle-program-bb9294","title":"Process Steps of the RPGLE Program (<code>BB9294</code>)","text":"<p>The program is an interactive workstation-based application that uses a display file (<code>bb9294d</code>) to present a window format (<code>actwdw</code>) for confirming the inactivation or reactivation of a CSR record. It updates the <code>crdel</code> field in the <code>bbcsr</code> file to reflect the status change. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives four parameters:<ul> <li><code>p$co</code>: Company number (input).</li> <li><code>p$crid</code>: CSR ID (input).</li> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> <li><code>p$flag</code> (1 character): Return flag (output, set to <code>A</code> for reactivation or <code>I</code> for inactivation).</li> </ul> </li> <li>Field Initialization:<ul> <li>Moves input parameters <code>p$co</code> and <code>p$crid</code> to display file fields <code>f$co</code> and <code>f$crid</code>.</li> <li>Defines key list <code>klcsr</code> for accessing the <code>bbcsr</code> file using <code>f$co</code> and <code>f$crid</code>.</li> <li>Sets <code>winagn</code> to <code>*ON</code> to control the window processing loop.</li> <li>Initializes message handling fields (<code>dspmsg</code> to blank, <code>m@pgmq</code> to <code>*</code>, <code>m@key</code> to blanks).</li> <li>Defines a parameter list (<code>pld010</code>) for date validation (not used in the provided code).</li> </ul> </li> <li> <p>Commented Test Code: Includes commented-out code for testing with hardcoded values (e.g., <code>p$co = '10'</code>, <code>p$crid = 'JGK'</code>).</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>Z</code> or <code>G</code>), applies a database override using the <code>QCMDEXC</code> API to redirect access to the <code>bbcsr</code> file to either <code>gbbcsr</code> or <code>zbcsr</code>.</li> <li> <p>File Opening: Opens the <code>bbcsr</code> file (update/add, keyed access).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Chains to <code>bbcsr</code> using <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>) to retrieve the CSR record.</li> <li> <p>If the record exists (<code>*IN99</code> is <code>*OFF</code>):</p> <ul> <li>If <code>crdel</code> is <code>I</code> (inactive):</li> <li>Sets the header <code>f$hdr</code> to \"CSR Id Entry ReActivate\" (<code>hdr(01)</code>).</li> <li>Sets the function key label <code>f$fkyd</code> to \"F22=ReActivate\" (<code>fky(01)</code>).</li> <li>Sets <code>*IN72</code> to <code>*ON</code> (likely for display formatting, e.g., color).</li> <li>If <code>crdel</code> is not <code>I</code> (active or other status):</li> <li>Sets <code>f$hdr</code> to \"CSR Id Entry InActivate\" (<code>hdr(02)</code>).</li> <li>Sets <code>f$fkyd</code> to \"F23=InActivate\" (<code>fky(02)</code>).</li> <li>Sets <code>*IN73</code> to <code>*ON</code>.</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li> <p>Main Loop (<code>winagn</code>):</p> <ul> <li>Display Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>msgclr</code> to clear messages.</li> <li>Display Window: Executes <code>exfmt actwdw</code> to display the window format and accept user input.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Error Indicators: Resets indicators <code>*IN50</code> to <code>*IN69</code> to zero.</li> <li>Cursor Positioning: Contains commented-out code for calculating cursor position (<code>row</code>, <code>col</code>) using <code>csrloc</code>.</li> <li>Process User Input:</li> <li>F12 (Exit): Sets <code>winagn</code> to <code>*OFF</code> to exit the loop.</li> <li>F22 or F23 (ReActivate/InActivate):<ul> <li>Calls <code>winedt</code> to validate input (which calls <code>chkact</code>).</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), calls <code>winupd</code> to update the database and sets <code>winagn</code> to <code>*OFF</code> to exit.</li> </ul> </li> <li>Other (e.g., Enter): Calls <code>winedt</code> to validate input (no further action unless F22/F23 is pressed).</li> <li>The loop continues until <code>winagn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li> <p>Calls <code>chkact</code> to check activity prior to status change (no logic implemented in <code>chkact</code>).</p> </li> <li> <p>Check Activity (<code>chkact</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended as a placeholder for checking if the CSR ID is used in other tables (e.g., vendor table, as indicated by the <code>E</code> flag in <code>BB929P</code>).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li>ReActivate (F22):<ul> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>.</li> <li>If the record exists (<code>*IN99</code> is <code>*OFF</code>) and <code>crdel</code> is <code>I</code> (inactive):</li> <li>Sets <code>crdel</code> to <code>A</code> (active).</li> <li>Updates the <code>bbcsrpf</code> record.</li> <li>Sets <code>p$flag</code> to <code>A</code> to indicate successful reactivation.</li> </ul> </li> <li> <p>InActivate (F23):</p> <ul> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>.</li> <li>If the record exists (<code>*IN99</code> is <code>*OFF</code>) and <code>crdel</code> is not <code>I</code> (e.g., active):</li> <li>Sets <code>crdel</code> to <code>I</code> (inactive).</li> <li>Updates the <code>bbcsrpf</code> record.</li> <li>Sets <code>p$flag</code> to <code>I</code> to indicate successful inactivation.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>Add Message (<code>addmsg</code>):<ul> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> </ul> </li> <li>Write Message Subfile (<code>wrtmsg</code>):<ul> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> </ul> </li> <li> <p>Clear Message Subfile (<code>clrmsg</code>):</p> <ul> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Calls <code>QMHRMVPM</code> to clear messages (note: saving/restoring <code>rcdnam</code> and <code>pagrrn</code> is commented out, suggesting a simplified message clearing process).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB9294</code> program enforces the following business rules for inactivating or reactivating CSR IDs:</p> <ol> <li>Purpose:</li> <li> <p>The program toggles the status of a CSR record in the <code>bbcsr</code> file by updating the <code>crdel</code> field between <code>A</code> (active) and <code>I</code> (inactive).</p> </li> <li> <p>Input Parameters:</p> </li> <li>Requires <code>p$co</code> (company number) and <code>p$crid</code> (CSR ID) to identify the record.</li> <li>Uses <code>p$fgrp</code> to determine the file library (<code>Z</code> or <code>G</code>).</li> <li> <p>Returns <code>p$flag</code> as <code>A</code> (reactivated), <code>I</code> (inactivated), or unchanged if no action is taken.</p> </li> <li> <p>Status Toggle:</p> </li> <li>ReActivate (F22): Only allowed if the record exists and <code>crdel</code> is <code>I</code>. Sets <code>crdel</code> to <code>A</code> and updates the record.</li> <li>InActivate (F23): Only allowed if the record exists and <code>crdel</code> is not <code>I</code>. Sets <code>crdel</code> to <code>I</code> and updates the record.</li> <li> <p>If the record does not exist (<code>*IN99</code> is <code>*ON</code>), no update is performed, and <code>p$flag</code> remains unchanged.</p> </li> <li> <p>Activity Check:</p> </li> <li> <p>The <code>chkact</code> subroutine is a placeholder, suggesting a business rule to check for dependencies (e.g., CSR ID used in a vendor table, as indicated by the <code>E</code> flag in <code>BB929P</code>). However, no logic is implemented, so no validation occurs.</p> </li> <li> <p>User Interface:</p> </li> <li>Displays a window (<code>actwdw</code>) with a header and function key label that reflect the current record status:<ul> <li>If inactive (<code>crdel = 'I'</code>), shows \"CSR Id Entry ReActivate\" and \"F22=ReActivate\".</li> <li>If active, shows \"CSR Id Entry InActivate\" and \"F23=InActivate\".</li> </ul> </li> <li>Supports function keys:<ul> <li>F12: Exits the program without changes.</li> <li>F22: Triggers reactivation.</li> <li>F23: Triggers inactivation.</li> </ul> </li> <li> <p>Provides message feedback using the <code>GSMSGF</code> message file (though no specific error messages are used in the provided code).</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>Uses <code>p$fgrp</code> to apply overrides, redirecting <code>bbcsr</code> to <code>gbbcsr</code> or <code>zbcsr</code> based on the file group.</p> </li> <li> <p>Message Handling:</p> </li> <li>Displays messages in a message subfile (<code>msgctl</code>) and clears them as needed. The <code>com</code> array includes a placeholder error message, but it is not used in the code.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb9294d:    - Type: Workstation file (display file).    - Usage: Contains the <code>actwdw</code> format for the inactivation/reactivation window, along with a message subfile (<code>msgctl</code>) and clear message format (<code>msgclr</code>).    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (update/add, keyed access).    - Usage: Stores CSR records, used to retrieve and update the <code>crdel</code> field for status changes. Accessed using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program (an IBM i API): 1. QCMDEXC:    - Purpose: Executes the file override command to redirect <code>bbcsr</code> to the appropriate library.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 2. QMHSNDPM:    - Purpose: Sends messages to the program message queue for display in the message subfile.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 3. QMHRMVPM:    - Purpose: Clears messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB9294</code> RPGLE program, called by <code>BB929P</code>, is responsible for toggling the status of CSR ID records between active (<code>A</code>) and inactive (<code>I</code>) in the <code>bbcsr</code> file. It presents a confirmation window (<code>actwdw</code>) with dynamic headers and function key labels based on the current record status, allowing users to reactivate (F22) or inactivate (F23) a record. The program enforces rules to ensure status changes are only applied to existing records with the appropriate current status, and it uses file overrides to access the correct library (<code>Z</code> or <code>G</code>). It interacts with two files: <code>bb9294d</code> (display) and <code>bbcsr</code> (CSR data), and relies on IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) for file overrides and message handling. The <code>chkact</code> subroutine suggests a potential business rule for dependency checking, but it is not implemented in the provided code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/","title":"BB9295 RPGLE","text":"<p>The <code>BB9295</code> RPGLE program is part of the Billing and Invoicing system and is designed to generate a printed listing of Customer Service Representative (CSR) IDs from the <code>bbcsr</code> file. It is called by the main program <code>BB929P</code> when the user presses F15 to produce a report. Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#process-steps-of-the-rpgle-program-bb9295","title":"Process Steps of the RPGLE Program (<code>BB9295</code>)","text":"<p>The program is a batch-style printing application that reads all records from the <code>bbcsr</code> file and outputs them to a printer file (<code>qsysprt</code>) in a formatted report. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives one parameter:<ul> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> </ul> </li> <li>Field Initialization:<ul> <li>Sets the report header <code>c$hdr1</code> to \"CSR Id Listing By Co#/Cust Service Rep Id\" from the <code>hdr</code> array.</li> <li>Sets <code>prtovr</code> to <code>*ON</code> to trigger printing the report header initially.</li> <li>Calls <code>opntbl</code> to open the database file with the appropriate override.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li>Initializes time (<code>t#time</code>, <code>t#hms</code>, etc.) and date (<code>d#cymd</code>, <code>d#mdy</code>, etc.) conversion data structures for formatting the report header.</li> <li>Uses the program status data structure (<code>psds##</code>) to retrieve environment details like job name (<code>ps#jobn</code>), user (<code>ps#usr</code>), and current date/time (<code>ps#mdy</code>, <code>ps#hms</code>).</li> <li>Uses the printer file data structure (<code>prtf_opn</code>) to access printer file details like file name (<code>prtf_name</code>) and spool file number (<code>prtf_spl#</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: If <code>p$fgrp</code> is <code>G</code> or <code>Z</code>, applies database overrides using the <code>QCMDEXC</code> API to redirect the <code>bbcsr</code> file to either <code>gbbcsr</code> or <code>zbcsr</code>.<ul> <li>Iterates twice to apply overrides from the <code>ovg</code> or <code>ovz</code> arrays (though only one override is needed for <code>bbcsr</code>).</li> <li>Calls <code>QCMDEXC</code> with the override command (<code>dbov##</code>) and length (<code>dbol## = 80</code>).</li> </ul> </li> <li> <p>File Opening: Opens the <code>bbcsr</code> file (input-only, keyed access).</p> </li> <li> <p>Print Listing (<code>prtlist</code> Subroutine):</p> </li> <li>Open Printer File: Calls <code>openprtf</code> to set up and open the printer file.</li> <li>Read and Print Loop:<ul> <li>Reads the <code>bbcsr</code> file sequentially until the last record (<code>*INLR</code> is <code>*ON</code>).</li> <li>For each record:</li> <li>Calls <code>ovrflo</code> to handle page overflow and print headers as needed.</li> <li>Prints the detail line (<code>dtl01</code>) containing <code>crco</code> (company), <code>crcrid</code> (CSR ID), <code>crcrnm</code> (CSR name), <code>cremal</code> (email address), and <code>crdel</code> (delete flag).</li> </ul> </li> <li> <p>Close Printer File: Calls <code>closprtf</code> to close the printer file and clean up overrides.</p> </li> <li> <p>Process Overflow (<code>ovrflo</code> Subroutine):</p> </li> <li>Checks if the printer file has reached overflow (<code>*INOF</code> is <code>*ON</code>).<ul> <li>If true, sets <code>prtovr</code> to <code>*ON</code> and sets indicators <code>*IN81</code> to <code>*IN85</code> to <code>1</code>.</li> </ul> </li> <li> <p>If <code>prtovr</code> is <code>*ON</code>:</p> <ul> <li>Prints the report header (<code>hdr01</code>).</li> <li>Sets <code>prtovr</code> to <code>*OFF</code>.</li> </ul> </li> <li> <p>Open Printer File (<code>openprtf</code> Subroutine):</p> </li> <li>Constructs a printer override command by concatenating <code>ovr(01)</code> and <code>ovr(02)</code> (specifying page size, lines per inch, characters per inch, overflow line, output queue, form type, hold, and save options).</li> <li>Calls <code>QCMDEXC</code> to execute the override command.</li> <li> <p>Opens the <code>qsysprt</code> printer file.</p> </li> <li> <p>Close Printer File (<code>closprtf</code> Subroutine):</p> </li> <li>Closes the <code>qsysprt</code> printer file.</li> <li> <p>Executes a delete override command (<code>ovr(03) = DLTOVR FILE(QSYSPRT)</code>) using <code>QCMDEXC</code> to clean up the printer file override.</p> </li> <li> <p>Program Termination:</p> </li> <li>The mainline logic does not explicitly close files or set <code>*INLR</code>, as this is handled in the <code>prtlist</code> and <code>closprtf</code> subroutines. The program returns after completing the print job.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB9295</code> program enforces the following business rules for generating the CSR ID listing:</p> <ol> <li>Purpose:</li> <li> <p>Produces a printed report listing all CSR records from the <code>bbcsr</code> file, including company number (<code>crco</code>), CSR ID (<code>crcrid</code>), CSR name (<code>crcrnm</code>), email address (<code>cremal</code>), and delete flag (<code>crdel</code>).</p> </li> <li> <p>Report Format:</p> </li> <li>Header:<ul> <li>Includes the company name (\"American Refining Group\"), report title (<code>c$hdr1</code>), page number, job details (name, program, user), file group (<code>p$fgrp</code>), date (<code>t#mdcy</code>), and time (<code>t#hms</code>).</li> <li>Prints column headings: \"Co\", \"CSR Id\", \"CSR Name\", \"Email Address\", and \"Del\".</li> <li>Uses a fixed-width format (164 characters, as specified in the printer file definition).</li> </ul> </li> <li>Detail Lines:<ul> <li>Each record is printed with fields aligned at specific positions: <code>crco</code> (position 2), <code>crcrid</code> (position 8), <code>crcrnm</code> (position 44), <code>cremal</code> (position 95), <code>crdel</code> (position 100).</li> </ul> </li> <li> <p>Page Layout:</p> <ul> <li>Page size is 68 lines by 164 characters, with 8 lines per inch (LPI), 15 characters per inch (CPI), and overflow at line 62.</li> <li>The report is held (<code>HOLD(*YES)</code>) and saved (<code>SAVE(*YES)</code>) in the job\u2019s output queue (<code>OUTQ(*JOB)</code>).</li> </ul> </li> <li> <p>File Overrides:</p> </li> <li>Uses <code>p$fgrp</code> to redirect <code>bbcsr</code> to <code>gbbcsr</code> (for <code>G</code>) or <code>zbcsr</code> (for <code>Z</code>).</li> <li> <p>Applies printer file overrides to configure <code>qsysprt</code> with specific formatting and output options.</p> </li> <li> <p>Data Inclusion:</p> </li> <li> <p>Reads all records from <code>bbcsr</code> sequentially, including active, inactive, or deleted records (no filtering based on <code>crdel</code>).</p> </li> <li> <p>Output Handling:</p> </li> <li>The report is sent to the system printer file (<code>qsysprt</code>) and spooled for later retrieval.</li> <li>Overflow is managed by printing headers when the page limit (line 62) is reached.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bbcsr:    - Type: Physical file (input-only, keyed access).    - Usage: Source of CSR records for the report, containing fields <code>crco</code> (company), <code>crcrid</code> (CSR ID), <code>crcrnm</code> (CSR name), <code>cremal</code> (email address), and <code>crdel</code> (delete flag).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 2. qsysprt:    - Type: Printer file (output, 164 characters wide).    - Usage: Outputs the formatted report with headers (<code>hdr01</code>) and detail lines (<code>dtl01</code>).    - Override: Configured with <code>OVRPRTF</code> to set page size (68x164), LPI (8), CPI (15), overflow (line 62), and output queue options (hold and save).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program (an IBM i API): 1. QCMDEXC:    - Purpose: Executes file override commands for <code>bbcsr</code> (to <code>gbbcsr</code> or <code>zbcsr</code>) and printer file overrides for <code>qsysprt</code> (including <code>OVRPRTF</code> and <code>DLTOVR</code>).    - Parameters:      - <code>dbov##</code> (160 characters for printer overrides, 80 for database overrides, containing the override command).      - <code>dbol##</code> (15.5, command length, set to 160 for printer overrides, 80 for database overrides).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB9295</code> RPGLE program, called by <code>BB929P</code> when F15 is pressed, generates a printed report of all CSR ID records from the <code>bbcsr</code> file. It reads records sequentially, formats them into a 164-character-wide report with headers and detail lines, and outputs to the <code>qsysprt</code> printer file. The report includes company number, CSR ID, name, email, and status, with headers showing job details, date, time, and file group. The program uses file overrides to access the correct <code>bbcsr</code> library (<code>Z</code> or <code>G</code>) and configures the printer file with specific formatting options. It relies on the <code>QCMDEXC</code> API for overrides and manages page overflow to ensure proper pagination. The program interacts with two files: <code>bbcsr</code> (data source) and <code>qsysprt</code> (output).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/","title":"BB929P RPGLE","text":"<p>The provided document is an RPGLE program named <code>BB929P</code>, part of a Billing and Invoicing system, designed to manage Customer Service Representative (CSR) IDs. Below, I will explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#process-steps-of-the-rpgle-program-bb929p","title":"Process Steps of the RPGLE Program (<code>BB929P</code>)","text":"<p>The program is a workstation-based interactive application that uses a subfile (SFL) to display and manage CSR IDs. It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, with functionality to create, change, inactivate/reactivate, and display CSR records. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives two input parameters:<ul> <li><code>p$mode</code> (3 characters): Specifies the run mode (<code>MNT</code> for maintenance or <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code> (1 character): Specifies the file group (<code>Z</code> or <code>G</code>) for database overrides.</li> </ul> </li> <li>Genie Check: The program checks if it is being called from the Genie environment by calling <code>GSGENIE2C</code>. If <code>genievar</code> is not <code>YES</code>, the program closes all files and terminates.</li> <li>Field Initialization: Initializes various fields, including:<ul> <li>Subfile control fields (e.g., <code>rrn1</code>, <code>rrnsv1</code>, <code>pagsz1</code> set to 14 for page size).</li> <li>Message handling fields (e.g., <code>dspmsg</code>, <code>m@pgmq</code>).</li> <li>Current date and time (<code>t#time</code>, <code>t#cymd</code>).</li> <li>Key lists (<code>klsfl1</code>, <code>kls1s1</code>) for file access.</li> </ul> </li> <li> <p>Header Setup: Sets the display header (<code>c$hdr1</code>) from the <code>hdr</code> array.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on the <code>p$fgrp</code> parameter (<code>Z</code> or <code>G</code>), applies database overrides using the <code>QCMDEXC</code> API to redirect file access to the appropriate library (<code>gbbcsr</code>, <code>zbcsr</code>, <code>gbicont</code>, <code>zbicont</code>).</li> <li> <p>File Opening: Opens three files:</p> <ul> <li><code>bbcsr</code> (CSR master file, input-only).</li> <li><code>bbcsrrd</code> (CSR master file with renamed record format, input-only).</li> <li><code>bicont</code> (control file, input-only).</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages and <code>wrtmsg</code> to display the message subfile.</li> <li>Subfile Mode Initialization:<ul> <li>Sets <code>sfmod1</code> to <code>'1'</code> and <code>#fold</code> to <code>'0'</code> to control folded/unfolded display mode.</li> <li>Initializes subfile control fields (<code>c1co</code>, <code>c1crid</code>) to zeros or blanks.</li> <li>Sets <code>w$inact</code> to <code>*ON</code> (display all records, including inactive ones, per revision <code>jb01</code>).</li> </ul> </li> <li>Global Protection: Sets indicator <code>*IN70</code> based on <code>p$mode</code>:<ul> <li><code>*OFF</code> for maintenance mode (<code>MNT</code>).</li> <li><code>*ON</code> for inquiry mode (<code>INQ</code>), protecting input fields.</li> </ul> </li> <li>Subfile Repositioning: Calls <code>sf1rep</code> to position the file and load the subfile initially.</li> <li> <p>Main Loop (<code>sf1agn</code>):</p> <ul> <li>Reposition Subfile: If <code>repsfl</code> is <code>*ON</code>, updates control fields (<code>c1co</code>, <code>c1crid</code>) and calls <code>sf1rep</code> to reposition the subfile.</li> <li>Display Command Line: Writes the <code>sflcmd1</code> format (command line).</li> <li>Display Message Subfile: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code>; otherwise, writes <code>msgclr</code> to clear messages.</li> <li>Subfile Display Check: Sets <code>*IN41</code> (SFLDSP) based on whether <code>rrn1</code> (relative record number) is greater than zero.</li> <li>Folded/Unfolded Mode: Sets <code>*IN45</code> based on <code>sfmod1</code> and <code>#fold</code> to control subfile display mode.</li> <li>Display Subfile Control: Sets <code>*IN40</code> (SFLDSPCTL) to <code>*ON</code> and executes <code>exfmt sflctl1</code> to display the subfile control format and accept user input.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Indicators: Resets screen error indicators (<code>*IN21</code> to <code>*IN39</code>, <code>*IN50</code> to <code>*IN69</code>) to zero.</li> <li>Cursor Positioning: Calculates row (<code>row1</code>) and column (<code>col1</code>) for the cursor using <code>csrloc</code>.</li> <li>Set Record Number: Sets <code>rcdnb1</code> to <code>pagrrn</code> to ensure the correct subfile page is displayed.</li> <li>Process User Input (Before Subfile Read):</li> <li>F03 (Exit): Sets <code>sf1agn</code> to <code>*OFF</code> to exit the loop.</li> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting and iterates.</li> <li>F05 (Refresh): Clears <code>r$co</code>, sets <code>repsfl</code> to <code>*ON</code>, and iterates to refresh the subfile.</li> <li>F08 (Toggle Inactive Filter): Toggles <code>w$inact</code> between <code>*ON</code> and <code>*OFF</code> to include/exclude inactive records, sets <code>repsfl</code> to <code>*ON</code>, and iterates. (Note: F8 functionality is commented out for Profound UI, defaulting to include all records.)</li> <li>F15 (Print Listing): Calls <code>BB9295</code> with parameters to print a CSR ID listing, sends a confirmation message, and iterates.</li> <li>Direct Access: If <code>d1opt</code>, <code>d1co</code>, or <code>d1crid</code> is non-blank/zero, calls <code>sf1dir</code> to process direct access options.</li> <li>Page Down: If the <code>PAGEDN</code> key is pressed, calls <code>sf1lod</code> to load the next page of subfile records.</li> <li>Process Subfile on Enter: If the <code>ENTER</code> key is pressed, calls <code>sf1prc</code> to process subfile changes.</li> <li>Process User Input (After Subfile Read):</li> <li>Position Request: If <code>c1co</code> or <code>c1crid</code> is non-blank/zero, calls <code>sf1rep</code> to reposition the subfile.</li> <li>F10 (Position Cursor): Clears <code>row1</code> and <code>col1</code> to reposition the cursor to the control record.</li> <li>The loop continues until <code>sf1agn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records using <code>readc sfl1</code> (indicator <code>*IN81</code>).</li> <li> <p>For each changed record, calls <code>sf1chg</code> to process the selected option.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Retains selected values (<code>s1co</code>, <code>s1crid</code>) in <code>s$co</code> and <code>s$crid</code>.</li> <li>Processes based on the subfile option (<code>s1opt</code>):<ul> <li>Option 2 (Change): If in <code>MNT</code> mode and the record is not deleted (<code>s1del</code> is not <code>D</code> or <code>I</code>), calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): If in <code>MNT</code> mode, calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> </ul> </li> <li> <p>Updates the subfile record by chaining to <code>bbcsr</code> and <code>sfl1</code>, clearing <code>s1opt</code>, formatting the record (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating the subfile.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets <code>rrn1</code>.</li> <li>Edits subfile control input (<code>sf1cte</code>).</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), positions the file using <code>setll</code> on <code>bbcsrrd</code> and loads the subfile (<code>sf1lod</code>).</li> <li> <p>Retains control fields (<code>c1co</code>, <code>c1crid</code>) in <code>r$co</code> and <code>r$crid</code> for repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for input validation (not implemented in the provided code).</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Sets <code>rrn1</code> to the last saved relative record number (<code>rrnsv1</code>).</li> <li>Sets <code>rcdnb1</code> to <code>rrn1 + 1</code> to ensure the new page is displayed.</li> <li>Loads up to <code>pagsz1</code> (14) records:<ul> <li>Reads the next record from <code>bbcsrrd</code> (indicator <code>*IN43</code> for end-of-file).</li> <li>Skips deleted or inactive records (<code>crdel</code> = <code>D</code> or <code>I</code>) if <code>w$inact</code> is <code>*OFF</code>.</li> <li>Formats the subfile line (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes the record to <code>sfl1</code>.</li> <li>Increments <code>rrn1</code>.</li> </ul> </li> <li> <p>Saves the last <code>rrn1</code> in <code>rrnsv1</code>.</p> </li> <li> <p>Format Subfile Detail Line (<code>sf1fmt</code> Subroutine):</p> </li> <li>Clears the subfile record (<code>sfl1</code>).</li> <li> <p>Moves fields from the file record (<code>crco</code>, <code>crcrid</code>, <code>crcrnm</code>, <code>cremal</code>, <code>crdel</code>) to subfile fields (<code>s1co</code>, <code>s1crid</code>, <code>s1crnm</code>, <code>s1emal</code>, <code>s1del</code>).</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets <code>*IN72</code> to <code>*ON</code> (blue color) if the record is deleted or inactive (<code>s1del</code> = <code>D</code> or <code>I</code>).</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Retains direct input values (<code>d1co</code>, <code>d1crid</code>) in <code>s$co</code> and <code>s$crid</code>.</li> <li>Validates input:</li> <li>For option 1 (Create), ensures <code>d1co</code> and <code>d1crid</code> are not blank/zero; otherwise, sets error <code>ERR0103</code>.</li> <li>For option 1, checks if <code>d1co</code> exists in <code>bicont</code>; if not, sets error <code>ERR0021</code>.</li> <li>Checks if the record exists in <code>bbcsr</code> using <code>setll</code>:<ul> <li>For non-create options, if the record exists, proceeds; otherwise, sets error <code>ERR0102</code>.</li> <li>For create, if the record exists, sets error <code>ERR0101</code> (cannot create duplicate).</li> </ul> </li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), processes the option:</li> <li>Option 1 (Create): Calls <code>sf1s01</code>.</li> <li>Option 2 (Change): Calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): Calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> <li>Clears input fields and cursor position if no errors.</li> </ul> </li> <li> <p>Subfile Option 01 - Create (<code>sf1s01</code> Subroutine):</p> <ul> <li>Calls <code>BB929</code> with parameters:</li> <li><code>s$co</code>, <code>s$crid</code> (key fields).</li> <li><code>o$mode</code> set to <code>MNT</code>.</li> <li><code>p$fgrp</code> (file group).</li> <li><code>o$flag</code> (return flag).</li> <li>If <code>o$flag</code> is <code>1</code>, sends a confirmation message (<code>Code &lt;crid&gt; has been created</code>), sets <code>c1co</code> and <code>c1crid</code>, and sets <code>repsfl</code> to <code>*ON</code> to reposition the subfile.</li> </ul> </li> <li> <p>Subfile Option 02 - Change (<code>sf1s02</code> Subroutine):</p> <ul> <li>Chains to <code>bbcsr</code> to check if the record is deleted or inactive (<code>crdel</code> = <code>D</code> or <code>I</code>). If so, sends error message <code>Cannot Modify An Inactive Record</code>.</li> <li>If valid, calls <code>BB929</code> with parameters similar to <code>sf1s01</code>.</li> <li>If <code>o$flag</code> is <code>1</code>, sends a confirmation message (<code>Code &lt;crid&gt; has been changed</code>).</li> </ul> </li> <li> <p>Subfile Option 04 - Inactivate/Reactivate (<code>sf1s04</code> Subroutine):</p> <ul> <li>Calls <code>BB9294</code> with parameters:</li> <li><code>s$co</code>, <code>s$crid</code> (key fields).</li> <li><code>p$fgrp</code> (file group).</li> <li><code>o$flag</code> (return flag).</li> <li>Processes the return flag:</li> <li><code>I</code>: Sends message <code>Code &lt;crid&gt; has been InActivated</code>.</li> <li><code>A</code>: Sends message <code>Code &lt;crid&gt; has been ReActivated</code>.</li> <li><code>E</code>: Sends message <code>Code &lt;crid&gt; &lt;vendor table error&gt;</code>.</li> <li>Stores <code>o$co</code> in <code>a$co</code>.</li> </ul> </li> <li> <p>Subfile Option 05 - Display Customer Order (<code>sf1s05</code> Subroutine):</p> <ul> <li>Calls <code>BB929</code> with parameters, setting <code>o$mode</code> to <code>INQ</code> for inquiry mode.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Sets <code>*IN19</code> to <code>*ON</code> to indicate panel format input change.</li> <li>(Note: Cursor positioning code is commented out.)</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> <li>Write Message Subfile (<code>wrtmsg</code>):</li> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> <li>Clear Message Subfile (<code>clrmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Saves and restores the current record format (<code>rcdnam</code>) and <code>pagrrn</code>.</li> <li>Clears messages using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. GSGENIE2C:    - Called during initialization to check if the program is running in the Genie environment.    - Parameter: <code>genievar</code> (3 characters, returns <code>YES</code> if in Genie). 2. BB929:    - Called for options 1 (Create), 2 (Change), and 5 (Display).    - Parameters:      - <code>o$co</code> (company number, output).      - <code>o$crid</code> (CSR ID, output).      - <code>o$mode</code> (<code>MNT</code> or <code>INQ</code>, output).      - <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output).      - <code>o$flag</code> (return flag, output). 3. BB9294:    - Called for option 4 (Inactivate/Reactivate).    - Parameters:      - <code>o$co</code> (company number, output).      - <code>o$crid</code> (CSR ID, output).      - <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output).      - <code>o$flag</code> (return flag: <code>I</code>, <code>A</code>, or <code>E</code>, output). 4. BB9295:    - Called for F15 (Print Listing).    - Parameter: <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output). 5. QCMDEXC:    - IBM i API called to execute file override commands.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 6. QMHSNDPM:    - IBM i API called to send messages to the program message queue.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 7. QMHRMVPM:    - IBM i API called to clear messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb929pd:    - Type: Workstation file (display file).    - Usage: Contains the subfile <code>sfl1</code> and control format <code>sflctl1</code> for the user interface.    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (input-only).    - Usage: Master file for CSR records, accessed using key list <code>klsfl1</code>.    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 3. bbcsrrd:    - Type: Physical file (input-only) with renamed record format (<code>bbcsrpf</code> to <code>bbcsrpr</code>).    - Usage: Used for sequential reading and positioning, accessed using key list <code>kls1s1</code>.    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 4. bicont:    - Type: Physical file (input-only).    - Usage: Control file to validate company numbers (<code>d1co</code>).    - Override: Redirected to <code>gbicont</code> or <code>zbicont</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB929P</code> program is an interactive RPGLE application that manages CSR IDs using a subfile-based interface. It supports creating, changing, inactivating/reactivating, and displaying records, with options to filter inactive records (though modified to always include them per <code>jb01</code>). The program uses database overrides to access files in different libraries (<code>Z</code> or <code>G</code>), integrates with Profound UI, and provides message handling for user feedback. It calls external programs (<code>BB929</code>, <code>BB9294</code>, <code>BB9295</code>, <code>GSGENIE2C</code>) and IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) to perform its functions, and interacts with three database files (<code>bbcsr</code>, <code>bbcsrrd</code>, <code>bicont</code>) and one display file (<code>bb929pd</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/","title":"Summary BB929P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The RPGLE programs (<code>BB929P</code>, <code>BB929</code>, <code>BB9294</code>, <code>BB9295</code>) collectively form an interactive application for managing Customer Service Representative (CSR) IDs within the Billing and Invoicing system. The following use cases are implemented:</p> <ol> <li>List and Select CSR Records:</li> <li>Description: Users can view a subfile list of CSR records, filtered to include all records (active and inactive), and select records for further actions (create, change, inactivate/reactivate, display, or print).</li> <li>Program: <code>BB929P</code></li> <li> <p>Details: Displays a subfile with company number, CSR ID, name, email, and status. Users can position the list by company or CSR ID, refresh the list, or toggle between folded/unfolded views (though F8 is disabled in Profound UI). Supports direct access to create or modify records.</p> </li> <li> <p>Create a New CSR Record:</p> </li> <li>Description: Users can create a new CSR record by specifying company number, CSR ID, name, and email address.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 1)</li> <li> <p>Details: Validates that the company exists and the record does not already exist, then writes a new record with status <code>A</code> (active).</p> </li> <li> <p>Modify an Existing CSR Record:</p> </li> <li>Description: Users can update the name or email address of an existing, active CSR record.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 2)</li> <li> <p>Details: Ensures the record is not inactive or deleted before allowing changes. Key fields (company, CSR ID) are protected.</p> </li> <li> <p>Inactivate or Reactivate a CSR Record:</p> </li> <li>Description: Users can toggle a CSR record's status between active (<code>A</code>) and inactive (<code>I</code>).</li> <li>Program: <code>BB9294</code> (called by <code>BB929P</code> with option 4)</li> <li> <p>Details: Allows reactivation (F22) if the record is inactive or inactivation (F23) if the record is active. Includes a placeholder for checking dependencies (e.g., vendor table), but no validation is implemented.</p> </li> <li> <p>Display a CSR Record:</p> </li> <li>Description: Users can view the details of a CSR record in read-only mode.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 5)</li> <li> <p>Details: Displays record details without allowing modifications.</p> </li> <li> <p>Print a CSR ID Listing:</p> </li> <li>Description: Users can generate a printed report of all CSR records, including company, CSR ID, name, email, and status.</li> <li>Program: <code>BB9295</code> (called by <code>BB929P</code> with F15)</li> <li>Details: Produces a formatted report with headers and detail lines, sent to a spooled printer file.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#function-requirement-document-csr-record-management-function","title":"Function Requirement Document: CSR Record Management Function","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#csr-record-management-function-requirements","title":"CSR Record Management Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#overview","title":"Overview","text":"<p>The <code>manageCSRRecord</code> function handles the creation, modification, inactivation, reactivation, and retrieval of Customer Service Representative (CSR) records in the Billing and Invoicing system. It processes inputs programmatically without screen interaction, updating or retrieving data from the <code>bbcsr</code> file and validating against the <code>bicont</code> file.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>company (numeric): Company number.</li> <li>csrId (string): CSR ID.</li> <li>mode (string, enum: <code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, <code>REACTIVATE</code>, <code>RETRIEVE</code>): Operation mode.</li> <li>fileGroup (string, enum: <code>Z</code>, <code>G</code>): File group for database library selection.</li> <li>csrName (string, optional): CSR name (required for <code>CREATE</code> and <code>UPDATE</code>).</li> <li>email (string, optional): Email address (required for <code>CREATE</code> and <code>UPDATE</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>status (string, enum: <code>SUCCESS</code>, <code>ERROR</code>): Operation outcome.</li> <li>flag (string, enum: <code>1</code>, <code>A</code>, <code>I</code>, <code>E</code>, null): Return flag (<code>1</code> for create/update success, <code>A</code> for reactivation, <code>I</code> for inactivation, <code>E</code> for error, null for retrieval or failure).</li> <li>message (string): Success or error message.</li> <li>record (object, optional): Retrieved CSR record details (for <code>RETRIEVE</code> mode).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate File Group:</li> <li> <p>Ensure <code>fileGroup</code> is <code>Z</code> or <code>G</code>. If invalid, return <code>status=ERROR</code>, <code>message=\"Invalid file group\"</code>.</p> </li> <li> <p>Apply Database Overrides:</p> </li> <li>Redirect <code>bbcsr</code> to <code>gbbcsr</code> (if <code>fileGroup=G</code>) or <code>zbcsr</code> (if <code>fileGroup=Z</code>).</li> <li> <p>Redirect <code>bicont</code> to <code>gbicont</code> or <code>zbicont</code> accordingly.</p> </li> <li> <p>Validate Company:</p> </li> <li> <p>Check if <code>company</code> exists in <code>bicont</code>. If not, return <code>status=ERROR</code>, <code>message=\"Invalid company number\"</code>.</p> </li> <li> <p>Process by Mode:</p> </li> <li>CREATE:<ul> <li>Validate <code>csrName</code> and <code>email</code> are non-blank. If blank, return <code>status=ERROR</code>, <code>message=\"CSR name and email required\"</code>.</li> <li>Check if record (<code>company</code>, <code>csrId</code>) exists in <code>bbcsr</code>. If exists, return <code>status=ERROR</code>, <code>message=\"CSR ID already exists\"</code>.</li> <li>Write new record to <code>bbcsr</code> with <code>crdel=A</code> (active), <code>crco=company</code>, <code>crcrid=csrId</code>, <code>crcrnm=csrName</code>, <code>cremal=email</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=1</code>, <code>message=\"CSR &lt;csrId&gt; created\"</code>.</li> </ul> </li> <li>UPDATE:<ul> <li>Validate <code>csrName</code> and <code>email</code> are non-blank. If blank, return <code>status=ERROR</code>, <code>message=\"CSR name and email required\"</code>.</li> <li>Chain to <code>bbcsr</code> using <code>company</code>, <code>csrId</code>. If not found or <code>crdel</code> is <code>D</code> or <code>I</code>, return <code>status=ERROR</code>, <code>message=\"Cannot modify inactive or deleted record\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crcrnm=csrName</code>, <code>cremal=email</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=1</code>, <code>message=\"CSR &lt;csrId&gt; updated\"</code>.</li> </ul> </li> <li>INACTIVATE:<ul> <li>Chain to <code>bbcsr</code>. If not found or <code>crdel=I</code>, return <code>status=ERROR</code>, <code>message=\"Record not found or already inactive\"</code>.</li> <li>Check for dependencies (placeholder, not implemented). If dependencies exist, return <code>status=ERROR</code>, <code>flag=E</code>, <code>message=\"CSR &lt;csrId&gt; cannot be inactivated due to dependencies\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crdel=I</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=I</code>, <code>message=\"CSR &lt;csrId&gt; inactivated\"</code>.</li> </ul> </li> <li>REACTIVATE:<ul> <li>Chain to <code>bbcsr</code>. If not found or <code>crdel&lt;&gt;I</code>, return <code>status=ERROR</code>, <code>message=\"Record not found or not inactive\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crdel=A</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=A</code>, <code>message=\"CSR &lt;csrId&gt; reactivated\"</code>.</li> </ul> </li> <li>RETRIEVE:<ul> <li>Chain to <code>bbcsr</code>. If not found, return <code>status=ERROR</code>, <code>message=\"Record not found\"</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>record={company, csrId, csrName, email, status}</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company number must exist in <code>bicont</code>.</li> <li>CSR name and email must be non-blank for <code>CREATE</code> and <code>UPDATE</code>.</li> <li>CSR record must not exist for <code>CREATE</code>.</li> <li>CSR record must be active (<code>crdel=A</code>) for <code>UPDATE</code> or <code>INACTIVATE</code>.</li> <li> <p>CSR record must be inactive (<code>crdel=I</code>) for <code>REACTIVATE</code>.</p> </li> <li> <p>Status Management:</p> </li> <li>New records are created with <code>crdel=A</code> (active).</li> <li>Inactivation sets <code>crdel=I</code>. Reactivation sets <code>crdel=A</code>.</li> <li> <p>Deleted records (<code>crdel=D</code>) cannot be modified.</p> </li> <li> <p>File Group:</p> </li> <li> <p><code>fileGroup</code> determines the database library (<code>Z</code> for <code>zbcsr</code>/<code>zbicont</code>, <code>G</code> for <code>gbbcsr</code>/<code>gbicont</code>).</p> </li> <li> <p>Dependency Check:</p> </li> <li> <p>Inactivation should check for dependencies (e.g., vendor table usage), but this is not implemented (returns <code>flag=E</code> if added).</p> </li> <li> <p>Error Handling:</p> </li> <li>Returns descriptive error messages for invalid inputs, non-existent records, or invalid status changes.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>No complex calculations are performed. The function primarily manages data validation, record retrieval, and updates to the <code>crdel</code> field.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#notes","title":"Notes","text":"<ul> <li>The function assumes programmatic input instead of interactive screen input, consolidating the logic of <code>BB929</code>, <code>BB9294</code>, and part of <code>BB929P</code>.</li> <li>The printing use case (<code>BB9295</code>) is excluded, as it requires a separate function for report generation.</li> <li>The placeholder dependency check in <code>INACTIVATE</code> mode should be implemented to validate against related tables (e.g., vendor table).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/","title":"AR415 OCL","text":"<p>The provided document, <code>AR415.ocl36.txt</code>, is an Operation Control Language (OCL) program used on IBM midrange systems like the AS/400 (now IBM i). OCL is a scripting language used to control job execution, manage files, and invoke programs. The program appears to generate a Customer Credit Report by performing a series of steps involving file overrides, sorting, and report generation. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates a sequence of operations to produce the Customer Credit Report. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Delete All Overrides (DLTOVR *ALL):</li> <li> <p>The <code>DLTOVR *ALL</code> command clears all existing file overrides in the job to ensure no unintended file mappings interfere with the program\u2019s execution.</p> </li> <li> <p>Commented-Out Program Call (GSGENIEC):</p> </li> <li>The line <code>// CALL PGM(GSGENIEC)</code> is commented out (preceded by <code>//</code>), so it is not executed. If uncommented, it would call the program <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li> <p>The conditional logic <code>// IFF ?L'506,3'?/YES RETURN</code> is also commented out. If active, it would check a condition (likely a data area or variable at location <code>L'506,3'</code>) and terminate the job (<code>RETURN</code>) if the condition is met.</p> </li> <li> <p>SCPROCP Command:</p> </li> <li> <p>The line <code>// SCPROCP ,,,,,,,,?9?</code> invokes a procedure or command named <code>SCPROCP</code> with placeholder <code>?9?</code> for a parameter (likely a library or file prefix). The eight commas indicate empty parameters, suggesting <code>SCPROCP</code> may use default values or only require the ninth parameter.</p> </li> <li> <p>Set Local Variables (LOCAL BLANK-*ALL):</p> </li> <li> <p>The <code>LOCAL BLANK-*ALL</code> command clears all local variables in the job, ensuring a clean state for subsequent operations.</p> </li> <li> <p>GSY2K Command:</p> </li> <li> <p>The <code>GSY2K</code> command is executed, likely a utility to handle Year 2000 (Y2K) date conversions or system settings, ensuring date fields are processed correctly.</p> </li> <li> <p>Override Database File (OVRDBF):</p> </li> <li> <p>The command <code>OVRDBF FILE(BICONT) TOFILE(QS36F/?9?BICONT)</code> overrides the file <code>BICONT</code> to point to <code>QS36F/?9?BICONT</code> (a file in the <code>QS36F</code> library with a prefix <code>?9?</code>). This ensures the program uses the correct version of the <code>BICONT</code> file.</p> </li> <li> <p>Load and Run AR415P:</p> </li> <li>The <code>// LOAD AR415P</code> command loads the program <code>AR415P</code>, and the <code>// RUN</code> command executes it.</li> <li>The file specification <code>FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHR</code> indicates that <code>AR415P</code> uses the <code>BICONT</code> file (with prefix <code>?9?</code>) in shared mode (<code>DISP-SHR</code>), allowing multiple jobs to access it concurrently.</li> <li> <p>This program likely performs initial processing or validation on the <code>BICONT</code> file, preparing data for the report.</p> </li> <li> <p>Load and Run #GSORT for Sorting:</p> </li> <li>The <code>// LOAD #GSORT</code> command loads the <code>#GSORT</code> utility, a general-purpose sort program.</li> <li>Input and Output Files:<ul> <li>Input file: <code>ARCUST</code> (labeled <code>?9?ARCUST</code>, shared mode).</li> <li>Output file: <code>AR415S</code> (labeled <code>?9?AR415S</code>, with a capacity of 999,000 records, extendable by 999,000, and retained as a job file <code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTR 8A 3X 384 N</code>: Defines the sort header with an 8-character key, 3 fields, 384 bytes per record, and no sequence checking (<code>N</code>).</li> <li><code>I C 1 1NECD</code>: Includes records where position 1 (1 byte) is not equal to a specific condition (<code>NECD</code>, possibly \"not equal to customer delete\").</li> <li><code>IAC 2 3EQC?L'101,2'?</code>: Includes records where positions 2\u20133 equal a value at location <code>L'101,2'</code> (likely a data area or variable).</li> <li><code>FNC 2 9 KEY</code>: Specifies positions 2\u20139 as the sort key (ascending order by default).</li> <li><code>FDC 1 256 RECORD</code>: Includes positions 1\u2013256 in the output record.</li> <li><code>FDC 257 384 RECORD</code>: Includes positions 257\u2013384 in the output record.</li> </ul> </li> <li> <p>Purpose: This step sorts the <code>ARCUST</code> file based on a key (positions 2\u20139) and filters records based on conditions, writing the sorted output to <code>AR415S</code>.</p> </li> <li> <p>Load and Run AR415:</p> </li> <li>The <code>// LOAD AR415</code> command loads the main report program <code>AR415</code>, and <code>// RUN</code> executes it.</li> <li>Files Used:<ul> <li><code>ARCUST</code> (labeled <code>?9?AR415S</code>, the sorted output from <code>#GSORT</code>, shared mode).</li> <li><code>ARCUSA</code> (labeled <code>?9?ARCUST</code>, shared mode).</li> <li><code>ARCLGR</code> (labeled <code>?9?ARCLGR</code>, shared mode).</li> <li><code>BBORCL</code> (labeled <code>?9?BBORCL</code>, shared mode).</li> <li><code>BICONT</code> (labeled <code>?9?BICONT</code>, shared mode).</li> </ul> </li> <li> <p>Purpose: The <code>AR415</code> program processes the sorted <code>AR415S</code> file and other input files (<code>ARCUSA</code>, <code>ARCLGR</code>, <code>BBORCL</code>, <code>BICONT</code>) to generate the final Customer Credit Report, likely formatting and printing the data.</p> </li> <li> <p>End of Program:</p> <ul> <li>The <code>// END</code> statement marks the end of the <code>#GSORT</code> section, though it appears after the <code>AR415</code> section, possibly indicating a structured block for <code>#GSORT</code> or a minor formatting issue in the OCL.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. GSGENIEC: Commented out, so not executed. If active, it would be called as a utility or initialization program. 2. AR415P: A program that processes the <code>BICONT</code> file, likely for data preparation or validation. 3. #GSORT: A sort utility that sorts the <code>ARCUST</code> file and produces the <code>AR415S</code> file. 4. AR415: The main report program that generates the Customer Credit Report using multiple input files.</p> <p>Additionally, the <code>SCPROCP</code> command is executed, which may be a system command or procedure rather than a program, depending on its definition.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables) in the IBM i environment: 1. BICONT (<code>QS36F/?9?BICONT</code>): Used by <code>AR415P</code> and <code>AR415</code>, likely a control or configuration file. 2. ARCUST (<code>?9?ARCUST</code>): The input customer file used by <code>#GSORT</code> and <code>AR415</code> (as <code>ARCUSA</code>). 3. AR415S (<code>?9?AR415S</code>): The sorted output file created by <code>#GSORT</code> and used as input by <code>AR415</code>. 4. ARCUSA (<code>?9?ARCUST</code>): An alias or alternate reference to the <code>ARCUST</code> file, used by <code>AR415</code>. 5. ARCLGR (<code>?9?ARCLGR</code>): A ledger or transaction file used by <code>AR415</code>, likely containing customer credit data. 6. BBORCL (<code>?9?BBORCL</code>): Another file used by <code>AR415</code>, possibly containing billing or order data related to credit.</p> <p>The <code>?9?</code> placeholder in file labels likely represents a library or prefix dynamically substituted at runtime.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#summary","title":"Summary","text":"<p>The OCL program <code>AR415.ocl36.txt</code> orchestrates the generation of a Customer Credit Report through the following steps: - Clears overrides and local variables. - Executes a Y2K utility and overrides the <code>BICONT</code> file. - Runs <code>AR415P</code> to process <code>BICONT</code>. - Uses <code>#GSORT</code> to sort the <code>ARCUST</code> file into <code>AR415S</code> based on specific keys and conditions. - Runs <code>AR415</code> to generate the final report using sorted and additional files.</p> <p>External Programs: <code>GSGENIEC</code> (commented out), <code>AR415P</code>, <code>#GSORT</code>, <code>AR415</code>, and possibly <code>SCPROCP</code> (if a program). Files Used: <code>BICONT</code>, <code>ARCUST</code>, <code>AR415S</code>, <code>ARCUSA</code>, <code>ARCLGR</code>, <code>BBORCL</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/","title":"AR415 RPG36","text":"<p>The provided document, <code>AR415.rpg36.txt</code>, is an RPG III program (RPG/400) on the IBM i (AS/400) platform, called by the OCL program <code>AR415.ocl36.txt</code>. This program generates a Customers Over Credit Report, processing customer data to identify and report customers whose total due amounts exceed their credit limits. It uses multiple files to gather customer, order, and ledger data, producing two printed reports: one for all customers and another for orders exceeding credit limits. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#process-steps-of-the-ar415-rpg-program","title":"Process Steps of the AR415 RPG Program","text":"<p>The <code>AR415</code> program processes customer data by company, calculates credit-related metrics, and generates two printed reports (<code>ARLIST</code> and <code>ARLIS2</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines files:<ul> <li><code>ARCUST</code> (input primary, 384 bytes, sorted input from <code>#GSORT</code>).</li> <li><code>ARCUSA</code> (input chained, 384 bytes, keyed at position 2).</li> <li><code>BBORCL</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>BICONT</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>ARCLGR</code> (input chained, 240 bytes, keyed at position 2).</li> <li><code>ARLIST</code> (output, 164 bytes, primary printer file).</li> <li><code>ARLIS2</code> (output, 164 bytes, secondary printer file for over-limit orders).</li> </ul> </li> <li>Defines arrays and data structures:<ul> <li><code>SEP</code> (2-element array for separator lines).</li> <li><code>ARC</code> (25-element array, 6 bytes each, for customer numbers from <code>ARCLGR</code>).</li> <li>Data structure <code>UDS</code> with <code>CO</code> (company code, 2 digits) and <code>KYCANC</code> (cancel key, 6 characters).</li> </ul> </li> <li>Input specifications define fields for each file (e.g., <code>ARKEY</code>, <code>ARCO</code>, <code>ARCUST</code>, <code>ARNAME</code>, <code>ARTOTD</code>, <code>ARCLMT</code>, etc.).</li> <li> <p>Initializes variables like <code>TIMDAT</code>, <code>SYTIME</code>, and <code>SYDATE</code> for report headers.</p> </li> <li> <p>Company-Level Processing (<code>L2</code> Loop):</p> </li> <li> <p>For each company (<code>L2</code> control break on <code>ARCO</code>):</p> <ul> <li>Chains to <code>BICONT</code> using <code>CO</code> to retrieve company name (<code>BCNAME</code>).</li> <li>Sets separator line (<code>SEP = '* '</code>) and captures system time (<code>SYTIME</code>) and date (<code>SYDATE</code>) using the <code>TIME</code> operation.</li> <li>Prints company-level headings on both <code>ARLIST</code> (via <code>PRTL2</code>) and <code>ARLIS2</code> (via <code>PRTL22</code>) output files.</li> </ul> </li> <li> <p>Customer-Level Processing (<code>L1</code> Loop):</p> </li> <li> <p>For each customer (<code>L1</code> control break on <code>ARCUST</code>):</p> <ul> <li>Initializes variables: <code>OVER</code>, <code>LIMIT</code>, <code>OWED</code>, <code>ORDVAL</code>, <code>TRXVAL</code> to zero, and clears indicator <code>93</code>.</li> <li>Chains to <code>ARCLGR</code> using <code>ARKEY</code> (positions 2\u20139) to retrieve customer numbers in the <code>ARC</code> array.</li> <li>If <code>ARCLGR</code> is found (<code>*IN95 = *OFF</code>) and not deleted (<code>CGDEL &lt;&gt; 'D'</code>):</li> <li>Loops through the <code>ARC</code> array (up to 25 customer numbers):<ul> <li>Constructs <code>CUSKEY</code> (company + customer number).</li> <li>Chains to <code>ARCUSA</code> using <code>CUSKEY</code> to get customer data (<code>AXCLMT</code>, <code>AXTOTD</code>).</li> <li>If found (<code>*IN93 = *OFF</code>) and <code>AXCLMT &lt;&gt; 0</code>, adds <code>AXCLMT</code> to <code>LIMIT</code>.</li> <li>Adds <code>AXTOTD</code> to <code>OWED</code>.</li> <li>Processes <code>BBORCL</code> records for the customer (using <code>BCLKEY</code> = <code>HLD8</code>):</li> <li>Sets lower limit (<code>SETLL</code>) and reads <code>BBORCL</code> until EOF (<code>*IN66</code>) or customer mismatch (<code>*IN79</code>).</li> <li>Skips deleted records (<code>BLDEL = 'D'</code>).</li> <li>Adds <code>BLTAMT</code> (unposted amount) to <code>TRXVAL</code> and <code>OWED</code> if non-zero.</li> <li>Adds <code>BLOAMT</code> (order amount) to <code>ORDVAL</code> and <code>OWED</code> if non-zero.</li> </ul> </li> </ul> </li> <li> <p>Primary Customer Processing:</p> </li> <li> <p>After the <code>ARCLGR</code> loop, processes the primary <code>ARCUST</code> record:</p> <ul> <li>If <code>LIMIT = 0</code>, sets <code>LIMIT = ARCLMT</code> (from <code>ARCUST</code>).</li> <li>Adds <code>ARTOTD</code> to <code>OWED</code>.</li> <li>Processes <code>BBORCL</code> records again for the customer (using <code>BCLKEY = ARKEY</code>):</li> <li>Similar logic to above: skips deleted records, adds <code>BLTAMT</code> to <code>TRXVAL</code> and <code>OWED</code>, adds <code>BLOAMT</code> to <code>ORDVAL</code> and <code>OWED</code>.</li> <li>If <code>BLOVCL = 'Y'</code> (over credit limit), prints an over-limit line (<code>OVRLNE</code>) to <code>ARLIS2</code> with order details (<code>BLORDR</code>, <code>BLTAMT</code>, <code>BLBTCH</code>).</li> </ul> </li> <li> <p>Credit Limit Check and Output:</p> </li> <li>Calculates <code>OVER = LIMIT - OWED</code>.</li> <li>If <code>OVER &lt; 0</code>, sets indicator <code>44</code> to indicate the customer is over their credit limit.</li> <li> <p>Prints customer details to <code>ARLIST</code> (via <code>PRTL2</code>):</p> <ul> <li>Includes <code>ARCUST</code>, <code>ARNAME</code>, <code>ARCLMT</code>, <code>ARTOTD</code>, <code>ORDVAL</code>, <code>TRXVAL</code>, and <code>OVER</code> (with \u201cOVER CREDIT LIMIT\u201d if <code>*IN44 = *ON</code>).</li> </ul> </li> <li> <p>Report Output:</p> </li> <li><code>ARLIST</code> report:<ul> <li>Prints company name (<code>BCNAME</code>), date (<code>SYDATE</code>), time (<code>SYTIME</code>), and page number.</li> <li>Includes headers for \u201cCREDIT LIMIT\u201d, \u201cTOTAL DUE\u201d, \u201cOPEN ORDERS TOTAL\u201d, \u201cUNPOSTED AMOUNT\u201d, and \u201cAVAIL CREDIT\u201d.</li> <li>Lists customer data with over-limit indication.</li> </ul> </li> <li> <p><code>ARLIS2</code> report:</p> <ul> <li>Prints similar headers but focuses on \u201cORDERS OVER CREDIT LIMIT\u201d.</li> <li>Lists orders exceeding credit limits with <code>BLORDR</code>, <code>BLTAMT</code>, and <code>BLBTCH</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends after processing all <code>ARCUST</code> records, triggered by the end of the input file.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>The program processes data for a specific company (<code>CO</code>), retrieving the company name from <code>BICONT</code>.</li> <li> <p>If the company is not found in <code>BICONT</code>, processing continues with default values.</p> </li> <li> <p>Customer Credit Calculation:</p> </li> <li>Aggregates credit limit (<code>LIMIT</code>) from <code>ARCUSA</code> (<code>AXCLMT</code>) or <code>ARCUST</code> (<code>ARCLMT</code>).</li> <li>Calculates total owed (<code>OWED</code>) by summing:<ul> <li><code>ARTOTD</code> (total due from <code>ARCUST</code>).</li> <li><code>AXTOTD</code> (total due from <code>ARCUSA</code> for customers in <code>ARCLGR</code>).</li> <li><code>BLTAMT</code> (unposted amounts from <code>BBORCL</code>).</li> <li><code>BLOAMT</code> (order amounts from <code>BBORCL</code>).</li> </ul> </li> <li> <p>Tracks <code>TRXVAL</code> (unposted amounts) and <code>ORDVAL</code> (order amounts) separately.</p> </li> <li> <p>Over Credit Limit Detection:</p> </li> <li>A customer is over their credit limit if <code>OVER = LIMIT - OWED &lt; 0</code>.</li> <li> <p>Orders marked as over credit limit (<code>BLOVCL = 'Y'</code>) in <code>BBORCL</code> are printed in the <code>ARLIS2</code> report.</p> </li> <li> <p>Data Filtering:</p> </li> <li>Skips deleted customers (<code>CGDEL = 'D'</code> in <code>ARCLGR</code>) and deleted orders (<code>BLDEL = 'D'</code> in <code>BBORCL</code>).</li> <li> <p>Only processes non-zero amounts (<code>BLTAMT</code>, <code>BLOAMT</code>, <code>AXCLMT</code>, <code>AXTOTD</code>).</p> </li> <li> <p>Report Formatting:</p> </li> <li>Produces two reports:<ul> <li><code>ARLIST</code>: Lists all customers with credit limit, total due, open orders, unposted amounts, and available credit.</li> <li><code>ARLIS2</code>: Lists specific orders exceeding credit limits with order number, unposted amount, and batch number.</li> </ul> </li> <li>Includes company name, date, time, and page numbers in headers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ARCUST (<code>IP</code>, input primary, 384 bytes):    - Sorted input file (from <code>#GSORT</code> in the OCL).    - Fields: <code>ARKEY</code> (2\u20139, key), <code>ARCO</code> (2\u20133, company), <code>ARCUST</code> (4\u20139, customer), <code>ARNAME</code> (10\u201339, customer name), <code>ARTOTD</code> (174\u2013179, packed total due), <code>ARCLMT</code> (252\u2013256, packed credit limit). 2. ARCUSA (<code>IC</code>, input chained, 384 bytes, keyed at 2):    - Alternate customer file.    - Fields: <code>AXCUST</code> (4\u20139, customer), <code>AXTOTD</code> (174\u2013179, packed total due), <code>AXCLMT</code> (252\u2013256, packed credit limit). 3. BBORCL (<code>IF</code>, input file, 256 bytes, keyed at 2):    - Order file.    - Fields: <code>BLCOCU</code> (2\u20139, company/customer key), <code>BLDEL</code> (1, delete code), <code>BLCONO</code> (2\u20133, company), <code>BLCUST</code> (4\u20139, customer), <code>BLORDR</code> (10\u201315, order number), <code>BLBTCH</code> (16\u201317, batch number), <code>BLTAMT</code> (18\u201326, unposted amount), <code>BLOAMT</code> (27\u201335, order amount), <code>BLOVCL</code> (36, over limit Y/N), <code>BLAUIN</code> (37\u201339, authorization initials), <code>BLUSID</code> (40\u201347, user ID). 4. BICONT (<code>IF</code>, input file, 256 bytes, keyed at 2):    - Company control file.    - Fields: <code>BCNAME</code> (4\u201333, company name), <code>BCINST</code> (92, invoicing style). 5. ARCLGR (<code>IC</code>, input chained, 240 bytes, keyed at 2):    - Ledger file with customer numbers.    - Fields: <code>CGDEL</code> (1, delete code), <code>ARC</code> (10\u2013159, array of 25 customer numbers, 6 bytes each). 6. ARLIST (<code>O</code>, output, 164 bytes, printer):    - Primary report file for customer credit data. 7. ARLIS2 (<code>O</code>, output, 164 bytes, printer):    - Secondary report file for over-limit orders.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR415</code> program does not call any external programs. It performs all processing internally, relying on file I/O and printer output operations.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#summary","title":"Summary","text":"<p>Process Steps: - Initializes files, arrays, and variables. - Processes each company (<code>L2</code>), retrieving company name and printing headers. - For each customer (<code>L1</code>):   - Aggregates credit limits and amounts owed from <code>ARCUST</code>, <code>ARCUSA</code>, and <code>BBORCL</code>.   - Processes <code>ARCLGR</code> to include additional customer data.   - Calculates over-credit status and prints to <code>ARLIST</code> (all customers) and <code>ARLIS2</code> (over-limit orders). - Terminates after processing all records.</p> <p>Business Rules: - Validates company and skips deleted customers/orders. - Aggregates total owed from multiple sources (<code>ARTOTD</code>, <code>AXTOTD</code>, <code>BLTAMT</code>, <code>BLOAMT</code>). - Identifies customers over credit limits (<code>OVER &lt; 0</code>) and orders marked as over limit (<code>BLOVCL = 'Y'</code>). - Produces formatted reports with headers and detailed data.</p> <p>Files Used: <code>ARCUST</code>, <code>ARCUSA</code>, <code>BBORCL</code>, <code>BICONT</code>, <code>ARCLGR</code>, <code>ARLIST</code>, <code>ARLIS2</code>. External Programs: None.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/","title":"AR415P RPGLE","text":"<p>The provided document, <code>AR415P.rpgle.txt</code>, is an RPGLE (RPG IV) program on the IBM i (AS/400) platform, called by the OCL program <code>AR415.ocl36.txt</code>. The program appears to handle the initial screen processing for the Customer Credit Report, allowing the user to select a company code (<code>co</code>) and validating it against the <code>BICONT</code> and <code>GSCONT</code> files. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#process-steps-of-the-ar415p-rpgle-program","title":"Process Steps of the AR415P RPGLE Program","text":"<p>The <code>AR415P</code> program is a workstation-based interactive program that displays a screen to capture a company code, validates it, and sets up conditions for the subsequent report generation. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program uses the <code>DFTACTGRP(*NO)</code> directive, indicating it runs in a named activation group, and <code>DFTNAME(AR415P)</code> sets the default program name.</li> <li>The <code>FIXNBR(*ZONED:*INPUTPACKED)</code> option ensures zoned decimal and packed decimal fields are handled correctly during input.</li> <li>Files are defined:<ul> <li><code>AR415PD</code> (workstation file, likely a display file for screen interaction, using the Profound UI handler).</li> <li><code>BICONT</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>GSCONT</code> (input file, 512 bytes, keyed at position 2).</li> </ul> </li> <li> <p>Data structures and variables are defined:</p> <ul> <li><code>msg</code> array for error messages.</li> <li><code>@infds</code> for workstation file information (e.g., function key status).</li> <li><code>uds</code> data structure with <code>co</code> (company code, 2-digit numeric) and <code>kycanc</code> (cancel key status, 6 characters).</li> <li>Input specifications for <code>BICONT</code> (field <code>bcdel</code> at position 1) and <code>GSCONT</code> (fields <code>GXDEL</code> at position 1, <code>GXCONO</code> at positions 77\u201378).</li> </ul> </li> <li> <p>Main Processing Loop (<code>dow @sfnex &lt;&gt; 'EJ'</code>)</p> </li> <li>The program enters a <code>DO</code> loop that continues until <code>@sfnex</code> (screen exit flag) equals <code>'EJ'</code> (end job).</li> <li>The loop processes the screen based on the <code>@sfid</code> (screen format ID) value:<ul> <li>If <code>@sfid</code> is blank, execute subroutine <code>$sblk</code> (initial blank screen).</li> <li>If <code>@sfid</code> is <code>'S1'</code>, execute subroutine <code>$s1</code> (process screen input).</li> </ul> </li> <li>The <code>$xcpt</code> subroutine is called to handle screen display.</li> <li>The program reads the <code>AR415S1</code> format (from <code>AR415PD</code> display file) with indicators <code>50</code> (error) or <code>LR</code> (last record), depending on whether it\u2019s the first screen (<code>@ccnt = 1</code>) or subsequent iterations.</li> <li> <p>The loop ends when <code>@sfnex = 'EJ'</code> (set in <code>$s1ent</code> or <code>$s1ck</code>), triggering the <code>endit</code> tag and setting <code>*INLR</code> to <code>*ON</code> to end the program.</p> </li> <li> <p>Subroutine <code>$sblk</code>: Initial Blank Screen</p> </li> <li>Executed when <code>@sfid</code> is blank (first time only).</li> <li>Sets indicator <code>*IN99</code> to <code>*ON</code> to display the blank screen.</li> <li>Retrieves the company code (<code>GXCONO</code>) from the <code>GSCONT</code> file using a <code>CHAIN</code> operation (keyed on <code>'00'</code>).<ul> <li>If found (<code>*IN95 = *OFF</code>) and <code>GXCONO</code> is non-zero, sets <code>co = GXCONO</code>.</li> </ul> </li> <li> <p>Sets <code>@sfnex</code> and <code>@sfid</code> to <code>'S1'</code> to display the <code>AR415S1</code> screen format next.</p> </li> <li> <p>Subroutine <code>$s1</code>: Process Screen Input</p> </li> <li>Handles input from the <code>AR415S1</code> screen format.</li> <li> <p>Checks the function key pressed (via <code>@vkey</code> in <code>@infds</code>):</p> <ul> <li>If <code>@vkey = 0</code> (Enter key), calls <code>$s1ent</code> to validate the entered company code.</li> <li>If <code>@vkey = 2</code> (Command key, likely F3 or Cancel), calls <code>$s1ck</code> to handle cancellation.</li> </ul> </li> <li> <p>Subroutine <code>$s1ent</code>: Validate Company Code</p> </li> <li>Validates the <code>co</code> field entered by the user:<ul> <li>If <code>co = 0</code>, sets error message <code>msg(1)</code> (\u201cINVALID COMPANY\u201d) and indicator <code>*IN90</code> to <code>*ON</code>, then jumps to <code>ends1e</code> to redisplay the screen.</li> <li>Performs a <code>CHAIN</code> to <code>BICONT</code> using <code>co</code> as the key:</li> <li>If not found (<code>*IN96 = *ON</code>), sets error message <code>msg(1)</code> (\u201cINVALID COMPANY\u201d) and <code>*IN90</code> to <code>*ON</code>.</li> <li>If found but <code>bcdel = 'D'</code> (deleted company), sets error message <code>msg(2)</code> (\u201cCOMPANY HAS BEEN DELETED\u201d) and <code>*IN90</code> to <code>*ON</code>.</li> <li>If validation passes (valid, non-deleted company), sets <code>@sfnex = 'EJ'</code> to exit the program.</li> </ul> </li> <li> <p>The <code>ends1e</code> label ensures the screen is redisplayed with error messages if validation fails.</p> </li> <li> <p>Subroutine <code>$s1ck</code>: Handle Command Key</p> </li> <li>Processes command key actions (e.g., F3 for Cancel).</li> <li>If <code>*INKG</code> (F3 key) is <code>*ON</code>, sets <code>@sfnex = 'EJ'</code> to exit the program and <code>kycanc = 'CANCEL'</code> to indicate cancellation.</li> <li> <p>Ends with the <code>ends1c</code> label.</p> </li> <li> <p>Subroutine <code>$xcpt</code>: Display Screen</p> </li> <li>Increments <code>@ccnt</code> (screen counter).</li> <li>If <code>@sfnex = @sfid</code>, sets <code>*IN98</code> to <code>*ON</code> to indicate the same screen is being redisplayed.</li> <li>If <code>@sfnex = 'S1'</code>, writes the <code>AR415S1</code> format to the display file to show the screen.</li> <li> <p>Calls <code>clrind</code> to clear indicators and error messages.</p> </li> <li> <p>Subroutine <code>clrind</code>: Clear Indicators</p> </li> <li>Resets indicators <code>*IN90</code>, <code>*IN81</code>, <code>*IN82</code>, <code>*IN12</code>, <code>*IN13</code>, <code>*IN14</code>, and <code>*IN15</code> to <code>*OFF</code>.</li> <li> <p>Clears the <code>msg1</code> field to ensure no residual error messages are displayed.</p> </li> <li> <p>Program Termination:</p> </li> <li>When <code>@sfnex = 'EJ'</code>, the program jumps to the <code>endit</code> tag, sets <code>*INLR = *ON</code>, and terminates.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Company Code Validation:    - The user must enter a valid company code (<code>co</code>) that exists in the <code>BICONT</code> file.    - The company code must not be zero (invalid company).    - The company must not be marked as deleted (<code>bcdel &lt;&gt; 'D'</code> in <code>BICONT</code>). 2. Default Company Code:    - If available, the program retrieves a default company code (<code>GXCONO</code>) from the <code>GSCONT</code> file (key <code>'00'</code>) for the initial screen. 3. Error Handling:    - Displays \u201cINVALID COMPANY\u201d if the entered <code>co</code> is zero or not found in <code>BICONT</code>.    - Displays \u201cCOMPANY HAS BEEN DELETED\u201d if the company exists but is marked deleted.    - Errors cause the screen to be redisplayed with the appropriate message. 4. Cancellation:    - The user can cancel the program using a command key (F3, <code>*INKG</code>), setting <code>kycanc = 'CANCEL'</code> and exiting the program. 5. Screen Flow:    - Starts with a blank screen, then displays the <code>AR415S1</code> format for company code input.    - Exits only when a valid company code is entered or the user cancels.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. AR415PD (<code>cf</code>, workstation file):    - A display file for screen interaction, using the <code>AR415S1</code> format to capture the company code and display error messages.    - Managed by the Profound UI handler for modernized UI. 2. BICONT (<code>if</code>, input file):    - A 256-byte file, keyed at position 2, containing company data.    - Field: <code>bcdel</code> (position 1, 1 byte, indicates if the company is deleted with <code>'D'</code>). 3. GSCONT (<code>if</code>, input file):    - A 512-byte file, keyed at position 2, containing control data.    - Fields: <code>GXDEL</code> (position 1, 1 byte), <code>GXCONO</code> (positions 77\u201378, 2-digit numeric company code).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR415P</code> program does not explicitly call any external programs. It is an interactive program that processes user input and validates data using file I/O operations. The Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) is used for the workstation file, but this is a runtime component, not a separate program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#summary","title":"Summary","text":"<p>Process Steps: - Initializes the program and displays a blank screen. - Retrieves a default company code from <code>GSCONT</code>. - Displays the <code>AR415S1</code> screen for user input. - Validates the entered company code against <code>BICONT</code>, checking for existence and deletion status. - Handles errors by redisplaying the screen with messages or exits on valid input/cancellation. - Terminates when a valid company code is entered or the user cancels.</p> <p>Business Rules: - Ensures a non-zero, non-deleted company code is entered. - Provides default company code from <code>GSCONT</code>. - Supports cancellation via F3. - Displays error messages for invalid or deleted companies.</p> <p>Files Used: <code>AR415PD</code> (display), <code>BICONT</code> (company data), <code>GSCONT</code> (control data). External Programs: None.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/","title":"Summary AR415 OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of three components: 1. AR415.ocl36.txt: An OCL program that orchestrates the process by invoking <code>AR415P</code> and <code>AR415</code> programs and sorting data with <code>#GSORT</code>. 2. AR415P.rpgle.txt: An RPGLE program that handles interactive company code input and validation. 3. AR415.rpg36.txt: An RPG III program that generates the Customer Credit Report.</p> <p>Use Case Identified: - Generate Customer Credit Report: The primary use case is to produce a report listing customers' credit status, including those exceeding their credit limits, for a specified company. The report details credit limits, total amounts due, open orders, unposted amounts, and available credit, with a secondary report listing specific orders that exceed credit limits.</p> <p>Only one use case is implemented, as the programs collectively focus on generating this report, with <code>AR415P</code> validating the company code and <code>AR415</code> processing and printing the report data.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#customer-credit-report-function-requirements","title":"Customer Credit Report Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#overview","title":"Overview","text":"<p>The <code>generateCustomerCreditReport</code> function produces a Customer Credit Report for a specified company, listing customers' credit details and identifying those over their credit limits. A secondary report lists specific orders exceeding credit limits. The function takes input parameters and processes data from predefined files without interactive screen input.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>co</code>, 2-digit numeric): Identifies the company for which the report is generated.</li> <li>Cancel Flag (<code>kycanc</code>, 6-character): Indicates if the process should be canceled (\"CANCEL\").</li> <li>Input Files:</li> <li><code>BICONT</code>: Company control file (company name, deletion status).</li> <li><code>ARCUST</code>: Sorted customer file (customer number, name, total due, credit limit).</li> <li><code>ARCUSA</code>: Alternate customer file (customer number, total due, credit limit).</li> <li><code>ARCLGR</code>: Ledger file (customer numbers array).</li> <li><code>BBORCL</code>: Order file (order details, amounts, over-limit status).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#outputs","title":"Outputs","text":"<ul> <li>ARLIST Report: Primary report listing all customers with:</li> <li>Customer number, name, credit limit, total due, open orders total, unposted amount, available credit.</li> <li>Indicates customers over their credit limit.</li> <li>ARLIS2 Report: Secondary report listing orders exceeding credit limits with:</li> <li>Customer number, name, credit limit, total due, order number, unposted amount, batch number.</li> <li>Return Status: Success, invalid company, deleted company, or canceled.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Company Code:</li> <li>Check if <code>co</code> is non-zero and exists in <code>BICONT</code>.</li> <li>Verify <code>co</code> is not marked as deleted (<code>bcdel &lt;&gt; 'D'</code>).</li> <li>If invalid or deleted, return error status.</li> <li>Sort Customer Data:</li> <li>Use sorted <code>ARCUST</code> file (pre-sorted by <code>#GSORT</code> on positions 2\u20139, filtering non-deleted customers and specific conditions).</li> <li>Process Company Data:</li> <li>Retrieve company name (<code>BCNAME</code>) from <code>BICONT</code> for report headers.</li> <li>Capture system date and time for report headers.</li> <li>Process Customer Data:</li> <li>For each customer in <code>ARCUST</code> (control break on customer number):<ul> <li>Initialize <code>LIMIT</code>, <code>OWED</code>, <code>ORDVAL</code>, <code>TRXVAL</code>, <code>OVER</code> to zero.</li> <li>Retrieve additional customer numbers from <code>ARCLGR</code> (up to 25, skipping deleted entries).</li> <li>For each customer (from <code>ARCLGR</code> and <code>ARCUST</code>):</li> <li>Chain to <code>ARCUSA</code> to get <code>AXCLMT</code> (credit limit) and <code>AXTOTD</code> (total due).</li> <li>Add <code>AXCLMT</code> to <code>LIMIT</code> if non-zero; add <code>AXTOTD</code> to <code>OWED</code>.</li> <li>Process <code>BBORCL</code> for matching orders (skip deleted, <code>BLDEL = 'D'</code>):<ul> <li>Add <code>BLTAMT</code> (unposted amount) to <code>TRXVAL</code> and <code>OWED</code>.</li> <li>Add <code>BLOAMT</code> (order amount) to <code>ORDVAL</code> and <code>OWED</code>.</li> <li>If <code>BLOVCL = 'Y'</code>, output order details to <code>ARLIS2</code>.</li> </ul> </li> <li>Set <code>LIMIT = ARCLMT</code> from <code>ARCUST</code> if <code>LIMIT = 0</code>.</li> <li>Add <code>ARTOTD</code> to <code>OWED</code>.</li> </ul> </li> <li>Calculate <code>OVER = LIMIT - OWED</code>.</li> <li>Generate Reports:</li> <li>ARLIST: Print for each customer:<ul> <li>Customer number (<code>ARCUST</code>), name (<code>ARNAME</code>), credit limit (<code>ARCLMT</code>), total due (<code>ARTOTD</code>), open orders (<code>ORDVAL</code>), unposted amount (<code>TRXVAL</code>), available credit (<code>OVER</code>).</li> <li>Mark \"OVER CREDIT LIMIT\" if <code>OVER &lt; 0</code>.</li> </ul> </li> <li>ARLIS2: Print for orders with <code>BLOVCL = 'Y'</code>:<ul> <li>Customer number, name, credit limit, total due, order number (<code>BLORDR</code>), unposted amount (<code>BLTAMT</code>), batch number (<code>BLBTCH</code>).</li> </ul> </li> <li>Include headers with company name, date, time, and page numbers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>Company code must be non-zero, exist in <code>BICONT</code>, and not be deleted (<code>bcdel &lt;&gt; 'D'</code>).</li> <li>Cancel process if <code>kycanc = 'CANCEL'</code>.</li> <li>Customer Filtering:</li> <li>Skip deleted customers (<code>CGDEL = 'D'</code> in <code>ARCLGR</code>) and orders (<code>BLDEL = 'D'</code> in <code>BBORCL</code>).</li> <li>Process only non-zero amounts (<code>AXCLMT</code>, <code>AXTOTD</code>, <code>BLTAMT</code>, <code>BLOAMT</code>).</li> <li>Credit Calculations:</li> <li><code>LIMIT = AXCLMT</code> (from <code>ARCUSA</code>) or <code>ARCLMT</code> (from <code>ARCUST</code> if <code>AXCLMT = 0</code>).</li> <li><code>OWED = ARTOTD + AXTOTD + BLTAMT + BLOAMT</code>.</li> <li><code>TRXVAL = sum(BLTAMT)</code> (unposted amounts).</li> <li><code>ORDVAL = sum(BLOAMT)</code> (open order amounts).</li> <li><code>OVER = LIMIT - OWED</code>; negative <code>OVER</code> indicates over credit limit.</li> <li>Report Output:</li> <li><code>ARLIST</code>: Lists all customers with credit details, marking over-limit cases.</li> <li><code>ARLIS2</code>: Lists orders exceeding credit limits (<code>BLOVCL = 'Y'</code>).</li> <li>Reports include company name, date, time, and page numbers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Credit Limit (<code>LIMIT</code>): Sum of <code>AXCLMT</code> from <code>ARCUSA</code> for valid customers; defaults to <code>ARCLMT</code> from <code>ARCUST</code> if zero.</li> <li>Total Owed (<code>OWED</code>): Sum of <code>ARTOTD</code> (from <code>ARCUST</code>), <code>AXTOTD</code> (from <code>ARCUSA</code>), <code>BLTAMT</code> (unposted from <code>BBORCL</code>), and <code>BLOAMT</code> (orders from <code>BBORCL</code>).</li> <li>Unposted Amount (<code>TRXVAL</code>): Sum of <code>BLTAMT</code> from <code>BBORCL</code>.</li> <li>Open Orders (<code>ORDVAL</code>): Sum of <code>BLOAMT</code> from <code>BBORCL</code>.</li> <li>Available Credit (<code>OVER</code>): <code>LIMIT - OWED</code>; negative values trigger \"OVER CREDIT LIMIT\" in <code>ARLIST</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return \"Invalid Company\" if <code>co = 0</code> or not found in <code>BICONT</code>.</li> <li>Return \"Company Deleted\" if <code>bcdel = 'D'</code> in <code>BICONT</code>.</li> <li>Return \"Canceled\" if <code>kycanc = 'CANCEL'</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/","title":"AR489 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program snippet, typically used in IBM midrange systems like the IBM System/36 or AS/400 to control job execution and file operations. Below, I\u2019ll explain the process steps of the RPG .OCL program, identify external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to define job control steps, such as loading programs, specifying files, and controlling execution flow. Here\u2019s a breakdown of the steps in the provided OCL program:</p> <ol> <li>Comment Section:</li> <li> <p>The lines starting with <code>**</code> are comments, providing metadata about the program:</p> <ul> <li><code>CREDIT LIMIT GROUPING MAINTENANCE</code> indicates the program\u2019s purpose, likely related to maintaining credit limit groupings in an accounts receivable (AR) system.</li> </ul> </li> <li> <p>Call External Program (<code>GSGENIEC</code>):</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>This step invokes an external program named <code>GSGENIEC</code>. This program is likely a utility or initialization program that performs setup or validation tasks before the main program execution.</li> <li>The specific functionality of <code>GSGENIEC</code> is not detailed in the snippet, but it\u2019s a prerequisite step.</li> </ul> </li> <li> <p>Conditional Check (<code>IFF</code> Statement):</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This is a conditional statement checking a system variable or parameter at location <code>L'506,3'</code>. The <code>?L'506,3'?</code> syntax refers to a specific memory location or indicator in the system\u2019s Local Data Area (LDA) or a similar mechanism.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes a <code>RETURN</code>, which terminates the OCL procedure without proceeding further.</li> <li>This acts as a gatekeeper, allowing the program to proceed only if the condition is false.</li> </ul> </li> <li> <p>Procedure Call (<code>SCPROCP</code>):</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code> with placeholder parameters (indicated by commas and <code>?9?</code>).</li> <li>The <code>?9?</code> likely represents a parameter or library reference (e.g., a library name or a specific value passed to the procedure).</li> <li>The exact purpose of <code>SCPROCP</code> is unclear from the snippet, but it could be a system procedure for setting up the environment or processing data.</li> </ul> </li> <li> <p>GSY2K Execution:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This step calls a program or proceduremechanism named <code>GSY2K</code>, likely related to Year 2000 (Y2K) compliance or date handling, which is common in legacy RPG systems.</li> <li>This program may perform date-related validations or transformations, ensuring compatibility with two-digit year formats.</li> </ul> </li> <li> <p>Load Program (<code>AR489</code>):</p> </li> <li> <p><code>// LOAD AR489</code>:</p> <ul> <li>This loads the main RPG program named <code>AR489</code>, which is the core program for the credit limit grouping maintenance functionality.</li> <li><code>AR489</code> is likely an RPG (Report Program Generator) program responsible for the business logic, such as updating or querying credit limit groupings.</li> </ul> </li> <li> <p>File Definitions:</p> </li> <li><code>// FILE NAME-ARCLGR,LABEL-?9?ARCLGR,DISP-SHR</code>:<ul> <li>Declares a file named <code>ARCLGR</code> (likely \u201cAccounts Receivable Credit Limit Grouping\u201d) with a label prefixed by <code>?9?</code> (indicating a library or system-specific prefix).</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple processes to access it concurrently.</li> </ul> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares another file named <code>ARCONT</code> (likely \u201cAccounts Receivable Control\u201d), also with a <code>?9?</code> prefix and shared access.</li> <li>These files are likely database files containing data for credit limit groupings and control information.</li> </ul> </li> <li> <p>Run the Program:</p> </li> <li><code>// RUN</code>:<ul> <li>Executes the loaded <code>AR489</code> program, which processes the data in the <code>ARCLGR</code> and <code>ARCONT</code> files to perform the credit limit grouping maintenance tasks.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. GSGENIEC:    - Likely a utility or initialization program for setup or validation. 2. GSY2K:    - A program handling Year 2000 date-related logic. 3. AR489:    - The main RPG program for credit limit grouping maintenance. 4. SCPROCP:    - A procedure, possibly for system setup or parameter processing, though its exact role is unclear.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files (equivalent to tables in modern database terminology): 1. ARCLGR:    - Likely stores data related to credit limit groupings, such as customer credit limits or group assignments. 2. ARCONT:    - Likely a control file containing configuration or control data for the accounts receivable system.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#summary","title":"Summary","text":"<p>The OCL program orchestrates the execution of the <code>AR489</code> RPG program for maintaining credit limit groupings. It performs the following steps: - Calls <code>GSGENIEC</code> for initialization. - Checks a condition to decide whether to proceed or terminate. - Invokes <code>SCPROCP</code> for additional setup or processing. - Runs <code>GSY2K</code> for date-related processing. - Loads and executes <code>AR489</code>, using the <code>ARCLGR</code> and <code>ARCONT</code> files for data access.</p> <p>The program relies on two database files (<code>ARCLGR</code> and <code>ARCONT</code>) and calls four external programs/procedures (<code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR489</code>) to complete its tasks. The <code>?9?</code> placeholders suggest dynamic library or parameter references, typical in System/36 environments.</p> <p>If you need further details or clarification (e.g., specific RPG logic or file structures), please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/","title":"AR489 RPGLE","text":"<p>The provided RPGLE program (<code>AR489.rpgle.txt</code>) is an RPG IV program, converted from an earlier RPG version (likely RPG/400 or RPG III) for IBM midrange systems (e.g., AS/400 or IBM i). It is invoked by the OCL program (<code>AR489.ocl36.txt</code>) and handles the Credit Limit Grouping Maintenance functionality. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program manages a workstation (interactive screen) application for maintaining credit limit groupings, allowing users to add, update, or delete customer records associated with credit limit groups. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Code:       <pre><code>c     *inzsr        begsr\nc                   z-add     0             cono\nc                   z-add     0             cust\nc                   endsr\n</code></pre></li> <li> <p>Description: </p> <ul> <li>The initialization subroutine (<code>*inzsr</code>) sets the company number (<code>cono</code>) and customer number (<code>cust</code>) to zero.</li> <li>This ensures a clean state for variables used in the program.</li> </ul> </li> <li> <p>Main Routine Execution:</p> </li> <li>Code:      <pre><code>c                   if        qsctl = ' '\nc                   move      '1'           *in09\nc                   move      'R'           qsctl             1\nc                   else\nc                   move      '0'           *in09\nc                   move      '0'           *in01\nc                   move      '0'           *in02\nc   lr              return\nc                   end\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Checks the control variable <code>qsctl</code> (likely a system or session control flag).</li> <li>If <code>qsctl</code> is blank, sets indicator <code>*in09</code> to <code>'1'</code> (on) and <code>qsctl</code> to <code>'R'</code>, indicating the program is ready to process.</li> <li>If <code>qsctl</code> is not blank, clears indicators <code>*in09</code>, <code>*in01</code>, <code>*in02</code>, and sets <code>*inlr</code> (last record) to terminate the program.</li> <li>Indicators <code>*in01</code> and <code>*in02</code> control screen formats (<code>AR489S1</code> and <code>AR489S2</code>).</li> </ul> </li> <li> <p>Read Workstation File:</p> </li> <li>Code:      <pre><code>c   81              read      ar489s1                                lr\nc   82              read      ar489s2                                lr\nc   81              move      *on           *in01\nc   82              move      *on           *in02\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Reads the workstation file formats <code>AR489S1</code> (first screen) and <code>AR489S2</code> (second screen) based on indicators <code>*in81</code> and <code>*in82</code>.</li> <li>Sets <code>*in01</code> and <code>*in02</code> to control which screen format is active for display or input.</li> <li>Clears message fields (<code>msg1</code>, <code>msg2</code>) and indicators (<code>*in81</code>, <code>*in82</code>, <code>*in90</code>) to prepare for user interaction.</li> </ul> </li> <li> <p>Handle Function Keys:</p> </li> <li>Code:      <pre><code>c                   if        (*inka = *on)\nc                   eval      *in01 = *off\nc                   eval      *in02 = *off\nc                   eval      *in81 = *on\nc                   endif\nc                   if        (*inkg = *on)\nc                   eval      *inlr = *on\nc                   eval      *in01 = *off\nc                   eval      *in02 = *off\nc                   endif\n</code></pre></li> <li> <p>Description:</p> <ul> <li>If function key F10 (<code>*inka</code>) is pressed, clears <code>*in01</code> and <code>*in02</code> (disables screen formats) and sets <code>*in81</code> to display the first screen (<code>AR489S1</code>).</li> <li>If function key F3 or F12 (<code>*inkg</code>) is pressed, sets <code>*inlr</code> to terminate the program and clears <code>*in01</code> and <code>*in02</code>.</li> </ul> </li> <li> <p>Validate Company Number:</p> </li> <li>Code:      <pre><code>c   09              do\nc     '00'          chain     gscont                             99\nc  n99gxcono        ifne      *zeros\nc  n99              z-add     gxcono        cono\nc                   endif\nc                   end\n</code></pre></li> <li> <p>Description:</p> <ul> <li>When indicator <code>*in09</code> is on (initial program entry), the program reads the <code>GSCONT</code> file using key <code>'00'</code> to retrieve a company number (<code>gxcono</code>).</li> <li>If found (<code>*in99</code> off) and <code>gxcono</code> is non-zero, it sets the <code>cono</code> variable to <code>gxcono</code>.</li> <li>This validates or sets the company number for subsequent processing.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>Code:      <pre><code>c  n09              if        (*in01 = *on)\nc                   exsr      s1\nc                   endif\nc                   if        (*in02 = *on)\nc                   exsr      s2\nc                   endif\nc   81              write     ar489s1\nc   82              write     ar489s2\n</code></pre></li> <li> <p>Description:</p> <ul> <li>If <code>*inchelle01</code> is on, executes subroutine <code>s1</code> (processes first screen for company/customer validation).</li> <li>If <code>*in02</code> is on, executes subroutine <code>s2</code> (processes second screen for group maintenance).</li> <li>Writes the appropriate screen formats (<code>AR489S1</code> or <code>AR489S2</code>) to the workstation based on indicators <code>*in81</code> and <code>*in82</code>.</li> </ul> </li> <li> <p>Subroutine <code>s1</code> (First Screen Processing):</p> </li> <li>Code:      <pre><code>csr   s1            begsr\nc     cono          chain     arcont                             99\nc                   if        (*in99 = *on)\nc                   movel     msg(1)        msg2\nc                   eval      *in81 = *on\nc                   eval      *in90 = *on\nc                   goto      ends1\nc                   endif\nc                   if        cust = *zero\nc                   movel     msg(2)        msg2\nc                   eval      *in81 = *on\nc                   eval      *in90 = *on\nc                   goto      ends1\nc                   end\nc     clgrky        chain     arclgr                             99\nc                   move      cgdel         del\nc                   movea     arc           ars\nc                   eval      *in82 = *on\ncsr   ends1         endsr\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Validate Company: Uses <code>cono</code> to chain (read) the <code>ARCONT</code> file. If not found (<code>*in99</code> on), sets error message <code>msg(1)</code> (\"INVALID COMPANY NUMBER ENTERED\") in <code>msg2</code>, sets <code>*in81</code> and <code>*in90</code> (error indicator), and exits the subroutine.</li> <li>Validate Customer: Checks if <code>cust</code> is zero. If true, sets error message <code>msg(2)</code> (\"INVALID CUSTOMER\") in <code>msg2</code>, sets <code>*in81</code> and <code>*in90</code>, and exits.</li> <li>Retrieve Group Data: Uses the key <code>clgrky</code> (concatenation of <code>cono</code> and <code>cust</code>) to chain the <code>ARCLGR</code> file. If found, moves the delete code (<code>cgdel</code>) to <code>del</code> and the customer array (<code>arc</code>) to <code>ars</code>. Sets <code>*in82</code> to display the second screen.</li> <li>This subroutine validates input and retrieves existing group data for editing.</li> </ul> </li> <li> <p>Subroutine <code>s2</code> (Second Screen Processing):</p> </li> <li>Code:      <pre><code>csr   s2            begsr\nc                   z-add     0             y                 2 0\nc                   dou       y = 25\nc                   add       1             y\nc     clgrky        chain     arclgr                             99\nc                   if        (*in99 = *on)\nc                   except    addclg\nc                   else\nc                   except    updclg\nc                   endif\nc                   end\nc                   eval      *in81 = *on\ncsr   ends2         endsr\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Iterates through the <code>ars</code> array (25 elements) to process customer group assignments.</li> <li>For each iteration, uses <code>clgrky</code> to chain the <code>ARCLGR</code> file:</li> <li>If not found (<code>*in99</code> on), executes the <code>addclg</code> exception to add a new record to <code>ARCLGR</code> with <code>del = 'A'</code>, <code>cono</code>, <code>cust</code>, and <code>ars</code> values.</li> <li>If found, executes the <code>updclg</code> exception to update the existing <code>ARCLGR</code> record with <code>del</code> and <code>ars</code> values.</li> <li>Sets <code>*in81</code> to return to the first screen after processing.</li> </ul> </li> <li> <p>Exception Outputs:</p> </li> <li>Code:      <pre><code>oarclgr    e            updclg\no                       del                  1\no                       ars                159\noarclgr    eadd         addclg\no                                            1 'A'\no                       cono                 3\no                       cust                 9\no                       ars                159\n</code></pre></li> <li>Description:<ul> <li><code>updclg</code>: Updates an existing <code>ARCLGR</code> record with the delete code (<code>del</code>) and customer array (<code>ars</code>).</li> <li><code>addclg</code>: Adds a new <code>ARCLGR</code> record with <code>del = 'A'</code> (active), <code>cono</code>, <code>cust</code>, and <code>ars</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for credit limit grouping maintenance: 1. Company Number Validation:    - The company number (<code>cono</code>) must exist in the <code>ARCONT</code> file. If not, an \"INVALID COMPANY NUMBER ENTERED\" error is displayed, and the user is prompted to correct the input. 2. Customer Number Validation:    - The customer number (<code>cust</code>) must be non-zero. If zero, an \"INVALID CUSTOMER\" error is displayed. 3. Credit Limit Group Management:    - A group is identified by a composite key (<code>clgrky</code>, combining <code>cono</code> and <code>cust</code>).    - The program allows adding new group records (if not found in <code>ARCLGR</code>) or updating existing ones.    - The <code>ars</code> array stores up to 25 customer numbers associated with a group.    - The <code>del</code> field indicates the record\u2019s status (e.g., <code>'A'</code> for active, or other codes for deletion). 4. Interactive Processing:    - The first screen (<code>AR489S1</code>) accepts <code>cono</code> and <code>cust</code> for validation and retrieves group data.    - The second screen (<code>AR489S2</code>) displays group details (<code>arname</code>, <code>ars</code>, <code>del</code>) for editing or adding customers.    - Function keys (F10, F3/F12) control navigation and program termination. 5. Error Handling:    - Errors (invalid company or customer) are displayed via <code>msg1</code> and <code>msg2</code> fields, with indicator <code>*in90</code> enabling error highlighting. 6. Data Persistence:    - Changes to group assignments are saved to the <code>ARCLGR</code> file via <code>addclg</code> (add) or <code>updclg</code> (update) operations.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (equivalent to tables in modern database terminology): 1. ARCLGR:    - Description: Stores credit limit grouping data.    - Attributes: Update file (<code>uf</code>), 240 bytes, keyed on position 2 (likely <code>clgrky</code>, a composite of <code>cgcono</code> and <code>cgcust</code>).    - Fields:      - <code>cgdel</code> (1 byte): Delete code (e.g., 'A' for active).      - <code>cgcono</code> (2 bytes): Company number.      - <code>cgcust</code> (6 bytes): Customer number.      - <code>arc</code> (150 bytes): Array of customer numbers in the group. 2. ARCONT:    - Description: Accounts receivable control file, storing company information.    - Attributes: Input file (<code>if</code>), 256 bytes, keyed on position 2.    - Fields:      - <code>arname</code> (30 bytes): Company name. 3. GSCONT:    - Description: General system control file, likely for system-wide settings or defaults.    - Attributes: Input file (<code>if</code>), 512 bytes, keyed on position 2.    - Fields:      - <code>gxdel</code> (1 byte): Delete code.      - <code>gxcono</code> (2 bytes): Company number. 4. AR489D (Workstation File):    - Description: Display file for the interactive screens (<code>AR489S1</code> and <code>AR489S2</code>), handled by <code>PROFOUNDUI(HANDLER)</code>.    - Formats:      - <code>AR489S1</code>: Accepts <code>cono</code>, <code>cust</code>, and displays messages (<code>msg1</code>, <code>msg2</code>).      - <code>AR489S2</code>: Displays <code>cono</code>, <code>arname</code>, <code>cust</code>, <code>ars</code> (group customers), <code>del</code>, and messages.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs via <code>CALL</code> operations. All processing is handled within the program, using subroutines (<code>s1</code>, <code>s2</code>, <code>*inzsr</code>) and file I/O operations. However, the program is invoked by the OCL program (<code>AR489.ocl36.txt</code>), which calls <code>GSGENIEC</code>, <code>SCPROCP</code>, and <code>GSY2K</code> before loading <code>AR489</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR489</code> RPGLE program manages credit limit groupings through an interactive workstation interface: - Process Steps: Initializes variables, validates company and customer inputs, retrieves group data, and allows users to add or update group assignments via two screens. - Business Rules: Enforces valid company and customer numbers, manages up to 25 customers per group, and handles add/update/delete operations with error messaging. - Files Used: <code>ARCLGR</code> (group data), <code>ARCONT</code> (company data), <code>GSCONT</code> (system control), and <code>AR489D</code> (display file). - External Programs: None called directly within the RPGLE code, but the OCL program invokes <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR489</code>.</p> <p>If you need further details, such as specific field mappings, screen layouts, or additional context about the OCL integration, please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/","title":"Summary AR489 OCL","text":"<p>The RPGLE program <code>AR489</code> and its associated OCL program (<code>AR489.ocl36.txt</code>) implement a Credit Limit Grouping Maintenance system for managing customer credit limit groups in an accounts receivable system on an IBM midrange platform. Below, I\u2019ll identify the use cases implemented by the program and then provide a concise function requirement document for a non-interactive version of the primary use case, assuming inputs are provided programmatically rather than via a screen.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#list-of-use-cases-implemented","title":"List of Use Cases Implemented","text":"<p>Based on the analysis of the OCL and RPGLE programs, the primary use case implemented is:</p> <ol> <li>Maintain Customer Credit Limit Groups:</li> <li>Description: Allows users to add, update, or delete customer records associated with a credit limit group, identified by a company number and customer number. The program validates inputs, retrieves existing group data, and persists changes to the database.</li> <li>Details:<ul> <li>Validates the company number against the <code>ARCONT</code> file and ensures the customer number is non-zero.</li> <li>Manages a group of up to 25 customers (<code>ars</code> array) with a delete code (<code>del</code>) to indicate active or deleted status.</li> <li>Provides interactive screens (<code>AR489S1</code> and <code>AR489S2</code>) for input validation and group maintenance, with error handling for invalid inputs.</li> <li>Supports navigation via function keys (F10 to switch screens, F3/F12 to exit).</li> </ul> </li> </ol> <p>No additional distinct use cases are explicitly implemented, as the program focuses on the single function of maintaining credit limit groups. The OCL program\u2019s calls to <code>GSGENIEC</code>, <code>SCPROCP</code>, and <code>GSY2K</code> are preparatory steps (e.g., initialization, Y2K compliance) rather than separate use cases.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Below is a function requirement document for a non-interactive version of the Maintain Customer Credit Limit Groups use case, assuming inputs are provided programmatically (e.g., via function parameters) rather than through interactive screens. The document outlines the business requirements, process steps, and calculations concisely.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#function-requirement-document-maintain-customer-credit-limit-groups","title":"Function Requirement Document: Maintain Customer Credit Limit Groups","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#purpose","title":"Purpose","text":"<p>The <code>MaintainCustomerCreditLimitGroups</code> function manages customer credit limit groups by adding, updating, or deleting customer assignments for a specified company and customer group, ensuring valid inputs and persisting changes to the database.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cono</code>: 2-digit numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>: 6-digit numeric): Identifies the primary customer for the group.</li> <li>Customer Array (<code>ars</code>: Array of 25 6-digit numeric): List of customer numbers in the group.</li> <li>Delete Code (<code>del</code>: 1-character): Status of the group record ('A' for active, other values for deletion).</li> <li>System Control Key (<code>control_key</code>: 2-character): Key for accessing system control data (e.g., '00').</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Success Indicator: Boolean indicating successful processing.</li> <li>Error Message: String describing any validation or processing errors (e.g., \"INVALID COMPANY NUMBER ENTERED\").</li> <li>Updated Group Data: Updated customer array and delete code if applicable.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>The company number (<code>cono</code>) must exist in the <code>ARCONT</code> file.</li> <li>If invalid, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Customer Validation:</li> <li>The primary customer number (<code>cust</code>) must be non-zero.</li> <li>If zero, return error: \"INVALID CUSTOMER\".</li> <li>Group Management:</li> <li>A group is uniquely identified by a composite key (<code>clgrky</code>: <code>cono</code> + <code>cust</code>).</li> <li>The customer array (<code>ars</code>) can hold up to 25 customer numbers.</li> <li>The delete code (<code>del</code>) indicates the group\u2019s status ('A' for active, other values for deletion).</li> <li>Data Persistence:</li> <li>Add a new group record if no existing record is found for <code>clgrky</code>.</li> <li>Update an existing group record if found.</li> <li>Ensure all changes are saved to the <code>ARCLGR</code> file.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Set default values for <code>cono</code> and <code>cust</code> to 0 if not provided.</li> <li>Validate System Control:</li> <li>Read the <code>GSCONT</code> file using <code>control_key</code> (e.g., '00').</li> <li>If found and <code>gxcono</code> is non-zero, set <code>cono</code> to <code>gxcono</code>.</li> <li>Validate Company:</li> <li>Read the <code>ARCONT</code> file using <code>cono</code>.</li> <li>If not found, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Validate Customer:</li> <li>Check if <code>cust</code> is non-zero.</li> <li>If zero, return error: \"INVALID CUSTOMER\".</li> <li>Process Group:</li> <li>Form composite key <code>clgrky</code> (<code>cono</code> + <code>cust</code>).</li> <li>Read the <code>ARCLGR</code> file using <code>clgrky</code>:<ul> <li>If not found, create a new record with <code>del = 'A'</code>, <code>cono</code>, <code>cust</code>, and <code>ars</code>.</li> <li>If found, update the existing record with provided <code>del</code> and <code>ars</code>.</li> </ul> </li> <li>Write changes to the <code>ARCLGR</code> file.</li> <li>Return Results:</li> <li>Return success indicator and any error messages.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Composite Key Creation:</li> <li><code>clgrky</code> = Concatenate(<code>cono</code>, <code>cust</code>) as a 10-character field (2 bytes for <code>cono</code>, 6 bytes for <code>cust</code>).</li> <li>Array Processing:</li> <li>Iterate through the <code>ars</code> array (25 elements) to validate or update customer numbers.</li> <li>Ensure each <code>ars</code> element is a valid 6-digit numeric value.</li> <li>Record Status:</li> <li>Set <code>del = 'A'</code> for new records; use provided <code>del</code> for updates.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#database-files","title":"Database Files","text":"<ul> <li>ARCLGR (Update File):</li> <li>Stores group data: <code>cgdel</code> (1 byte), <code>cgcono</code> (2 bytes), <code>cgcust</code> (6 bytes), <code>arc</code> (150 bytes for 25 customers).</li> <li>ARCONT (Input File):</li> <li>Stores company data: <code>arname</code> (30 bytes).</li> <li>GSCONT (Input File):</li> <li>Stores system control data: <code>gxdel</code> (1 byte), <code>gxcono</code> (2 bytes).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for invalid inputs (company or customer).</li> <li>Ensure database operations (read/write) handle record-not-found conditions gracefully.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Inputs are provided programmatically (e.g., via API or batch process).</li> <li>No interactive screen processing is required.</li> <li>The <code>GSCONT</code> file provides default company data if needed.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#notes","title":"Notes","text":"<ul> <li>The function requirement document assumes a non-interactive implementation, replacing the interactive workstation screens (<code>AR489S1</code>, <code>AR489S2</code>) with direct input parameters.</li> <li>The business rules and process steps are derived from the RPGLE program\u2019s logic, focusing on validation, data retrieval, and persistence.</li> <li>No external programs are called in the non-interactive version, as the OCL program\u2019s calls (<code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>) are assumed to be handled externally or unnecessary in a programmatic context.</li> </ul> <p>If you need further refinements, such as specific input formats, additional calculations, or a different structure for the requirements, please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/","title":"AR490 OCL","text":"<p>The provided document, <code>AR490.ocl36.txt</code>, is an Operation Control Language (OCL) program used on IBM midrange systems (e.g., System/36 or AS/400) to control job execution and invoke an RPG program for generating a credit limit grouping list. This OCL program is likely called by the <code>AR490P.rpgle.txt</code> program or the earlier <code>AR490P.ocl36.txt</code> based on user input (e.g., <code>KYJOBQ</code> or conditional logic). Below, I explain the process steps, list the external programs called, and identify the tables/files used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program orchestrates the sorting of data and the execution of the <code>AR490</code> RPG program to produce a credit limit grouping list. The steps are as follows:</p> <ol> <li>Invoke Year 2000 Utility (<code>GSY2K</code>):</li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls the <code>GSY2K</code> utility to handle Year 2000 date conversions or validations, ensuring the program processes dates correctly in a legacy system environment.</li> </ul> </li> <li> <p>Set Local Variable Based on Company Selection:</p> </li> <li><code>// IF ?L'111,3'?/CO LOCAL OFFSET-1,DATA-'IAC'</code>:<ul> <li>Checks the value at location 111 (likely <code>KYALCO</code> from <code>AR490P.rpgle.txt</code>) for 3 characters equal to <code>'CO'</code>.</li> <li>If true, sets a local variable at <code>OFFSET-1</code> to <code>'IAC'</code>, indicating specific company processing.</li> </ul> </li> <li> <p><code>// ELSE LOCAL OFFSET-1,DATA-'I*C'</code>:</p> <ul> <li>If false (e.g., <code>KYALCO = 'ALL'</code>), sets the variable to <code>'I*C'</code>, indicating all companies.</li> <li>This variable likely controls the behavior of the sorting or RPG program.</li> </ul> </li> <li> <p>Load and Run Sort Program (<code>#GSORT</code>):</p> </li> <li><code>// LOAD #GSORT</code>:<ul> <li>Loads the <code>#GSORT</code> program, a system utility for sorting data.</li> </ul> </li> <li><code>// FILE NAME-INPUT,LABEL-?9?ARCLGR,DISP-SHR</code>:<ul> <li>Opens the input file <code>ARCLGR</code> (label prefixed with parameter <code>?9?</code>, likely a library name) in shared mode (<code>DISP-SHR</code>).</li> <li>This file likely contains raw data for credit limit grouping.</li> </ul> </li> <li><code>// FILE NAME-OUTPUT,LABEL-?9?AR490,RECORDS-999000,EXTEND-999000,RETAIN-J</code>:<ul> <li>Defines the output file <code>AR490</code> (label prefixed with <code>?9?</code>) with a capacity of 999,000 records, extendable by 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> <li>This file will store the sorted data.</li> </ul> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Executes the <code>#GSORT</code> program with the following sort specifications:</li> <li><code>HSORTR 8A 3X 240 N</code>:<ul> <li>Defines a header sort record with an 8-byte ascending key, 3-byte exclusion, 240-byte record length, and no sequence checking (<code>N</code>).</li> </ul> </li> <li><code>I C 1NECD ?L'1,3'? 2 3EQC?L'114,2'?</code>:<ul> <li>Includes records where positions 2-3 equal the value at location 114 (likely <code>KYCO1</code>, a company number).</li> <li><code>1NECD</code> indicates no exclusion for deleted records (or a specific condition).</li> </ul> </li> <li><code>I*</code> (repeated twice):<ul> <li>Additional include conditions for company numbers at locations 116 (<code>KYCO2</code>) and 118 (<code>KYCO3</code>).</li> </ul> </li> <li><code>FNC 2 3 CO #</code>:<ul> <li>Defines a sort field for company number (positions 2-3, numeric).</li> </ul> </li> <li><code>FNC 4 9 CUST</code>:<ul> <li>Defines a sort field for customer number (positions 4-9, numeric).</li> </ul> </li> <li><code>FDC 1 240</code>:<ul> <li>Includes the entire record (positions 1-240) in the output.</li> </ul> </li> <li>Purpose: Sorts the <code>ARCLGR</code> file by company and customer number, filtering by up to three company numbers specified by the user (from <code>AR490P</code>).</li> </ul> </li> <li> <p>Load and Run RPG Program (<code>AR490</code>):</p> </li> <li><code>// LOAD AR490</code>:<ul> <li>Loads the RPG program <code>AR490</code>, which processes the sorted data to generate the credit limit grouping list.</li> </ul> </li> <li>File Definitions:<ul> <li><code>// FILE NAME-ARCLGR,LABEL-?9?AR490</code>:</li> <li>Opens the sorted file <code>AR490</code> (previously created by <code>#GSORT</code>) as <code>ARCLGR</code>.</li> <li><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</li> <li>Opens the <code>ARCONT</code> file (company control file) in shared mode.</li> <li><code>// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR</code>:</li> <li>Opens the <code>ARCUST</code> file (customer file) in shared mode.</li> <li><code>// FILE NAME-GSTABL,LABEL-?9?GSTABL,DISP-SHR</code>:</li> <li>Opens the <code>GSTABL</code> file (likely a general table or configuration file) in shared mode.</li> </ul> </li> <li><code>// RUN</code>:<ul> <li>Executes the <code>AR490</code> program, which uses the sorted <code>ARCLGR</code> file and references <code>ARCONT</code>, <code>ARCUST</code>, and <code>GSTABL</code> to produce the final report.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A Year 2000 utility for date handling. 2. #GSORT:    - Loaded via <code>// LOAD #GSORT</code>.    - A system sort utility that sorts the <code>ARCLGR</code> file by company and customer number. 3. AR490:    - Loaded via <code>// LOAD AR490</code>.    - The main RPG program that processes the sorted data to generate the credit limit grouping list.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following files: 1. ARCLGR:    - Input file for <code>#GSORT</code> (label <code>?9?ARCLGR</code>, shared mode).    - Also used as the input file <code>ARCLGR</code> (label <code>?9?AR490</code>) for the <code>AR490</code> program after sorting.    - Likely contains raw credit limit grouping data (e.g., company and customer numbers). 2. AR490:    - Output file from <code>#GSORT</code> (label <code>?9?AR490</code>).    - Becomes the sorted input file for the <code>AR490</code> program. 3. ARCONT:    - Used by <code>AR490</code> (label <code>?9?ARCONT</code>, shared mode).    - Contains company data (e.g., company number, name). 4. ARCUST:    - Used by <code>AR490</code> (label <code>?9?ARCUST</code>, shared mode).    - Contains customer data (e.g., customer number, details). 5. GSTABL:    - Used by <code>AR490</code> (label <code>?9?GSTABL</code>, shared mode).    - Likely a general table file containing configuration or reference data.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment with <code>GSY2K</code>, sets a local variable based on company selection (<code>'CO'</code> or <code>'ALL'</code>), sorts the <code>ARCLGR</code> file by company and customer number using <code>#GSORT</code> (filtered by user-specified companies), and runs the <code>AR490</code> RPG program to generate the credit limit grouping list using the sorted <code>AR490</code> file and supporting files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>).</li> <li>External Programs: <code>GSY2K</code> (date utility), <code>#GSORT</code> (sort utility), <code>AR490</code> (main RPG program).</li> <li>Tables/Files: <code>ARCLGR</code> (input/output for sorting), <code>AR490</code> (sorted output/input), <code>ARCONT</code> (company data), <code>ARCUST</code> (customer data), <code>GSTABL</code> (configuration data).</li> </ul> <p>If you need further analysis (e.g., details of the <code>AR490</code> RPG program or the structure of the files), please provide the RPG source code for <code>AR490</code> or additional file definitions.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/","title":"AR490 RPG36","text":"<p>The provided document, <code>AR490.rpg36.txt</code>, is an RPG III (RPG/36) program used on IBM midrange systems (e.g., System/36 or AS/400) to generate a credit limit grouping list. This program is called by the OCL program <code>AR490.ocl36.txt</code> after sorting data with <code>#GSORT</code>. Below, I explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR490</code> RPG program processes sorted input data from the <code>ARCLGR</code> file, retrieves additional data from <code>ARCONT</code> and <code>ARCUST</code>, and produces a formatted report on the printer file <code>PRINT</code>. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>Header Specification:<ul> <li><code>H P064 B AR490</code>: Specifies program name <code>AR490</code> with a program identifier <code>P064</code> and batch mode (<code>B</code>).</li> </ul> </li> <li>File Declarations:<ul> <li><code>ARCLGR</code>: Primary input file (240 bytes, disk, no key).</li> <li><code>ARCONT</code>: Input file (256 bytes, indexed, key at position 2, record length 256).</li> <li><code>ARCUST</code>: Input file (384 bytes, indexed, key at position 8, record length 384).</li> <li><code>PRINT</code>: Output printer file (165 bytes, with overflow indicator <code>OF</code>).</li> </ul> </li> <li>Data Structures:<ul> <li><code>SEP</code>: Array of 82 elements (2 bytes each) for separator lines in the report.</li> <li><code>ARC</code>: Array of 25 elements (6 bytes each, numeric) to store credit limit group numbers (<code>CGCL01</code> to <code>CGCL25</code>).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>TIMDAT</code> (12 bytes): Stores system time and date.</li> <li><code>TIME</code> (6 bytes): Formatted time.</li> <li><code>DATE</code> (6 bytes): Formatted date.</li> <li><code>PAGE</code> (implied): Page number for the report.</li> </ul> </li> <li> <p>Read Primary File (<code>ARCLGR</code>):</p> </li> <li>The program reads records from <code>ARCLGR</code> sequentially (primary file, level <code>L1</code>).</li> <li>Each record contains:<ul> <li><code>CGDEL</code> (position 1): Delete code ('D' for deleted).</li> <li><code>CGCONO</code> (positions 2-3): Company number.</li> <li><code>CGCUST</code> (positions 4-9): Customer number.</li> <li><code>CGCL01</code> to <code>CGCL25</code> (positions 10-159): Up to 25 credit limit group numbers.</li> <li><code>ARKEY</code> (positions 2-9): Composite key (company number + customer number) for chaining to <code>ARCUST</code>.</li> </ul> </li> <li> <p>Records marked with <code>CGDEL = 'D'</code> are processed but not explicitly filtered out in the code (business rule may assume sorting excluded them).</p> </li> <li> <p>Retrieve Company Name (<code>ARCONT</code>):</p> </li> <li>Logic:<ul> <li>At level <code>L1</code> (for each <code>ARCLGR</code> record), chain to <code>ARCONT</code> using <code>CGCONO</code> (company number) as the key (line 0048).</li> <li>If the record is not found (indicator <code>44</code> on), set <code>ACNAME</code> to blanks (line 0049).</li> </ul> </li> <li> <p>Fields:</p> <ul> <li><code>ACNAME</code> (positions 4-33): Company name retrieved from <code>ARCONT</code>.</li> </ul> </li> <li> <p>Retrieve Customer Name (<code>ARCUST</code>):</p> </li> <li>Logic:<ul> <li>Chain to <code>ARCUST</code> using <code>ARKEY</code> (company number + customer number, positions 2-9) as the key (line 0057).</li> <li>If the record is not found (indicator <code>99</code> on), set <code>ARNAME</code> to blanks (line 0058).</li> </ul> </li> <li> <p>Fields:</p> <ul> <li><code>ARCO</code> (positions 2-3): Company number (for validation, not used here).</li> <li><code>ARNAME</code> (positions 10-39): Customer name.</li> </ul> </li> <li> <p>Report Header Processing:</p> </li> <li>Logic (lines 0051-0055):<ul> <li>If not already processed (indicator <code>11</code> off):</li> <li>Set <code>SEP</code> to <code>'* '</code> (separator line).</li> <li>Capture system time and date into <code>TIMDAT</code> (12 bytes).</li> <li>Move <code>TIMDAT</code> to <code>TIME</code> (first 6 bytes) and <code>DATE</code> (last 6 bytes).</li> <li>Set indicator <code>11</code> on to prevent reprocessing.</li> </ul> </li> <li> <p>Output (lines 0061-0083, detail lines at <code>L1</code>):</p> <ul> <li>Write header lines when overflow (<code>OF</code>) or at level <code>L1</code>:</li> <li>Line 1: <code>ACNAME</code> (company name, 30 characters), \"PAGE\", and page number (<code>PAGE</code>, zero-suppressed).</li> <li>Line 2: \"CREDIT LIMIT GROUPING LIST\", \"TIME\", and formatted time (<code>TIME</code>).</li> <li>Line 3: Separator line (<code>SEP</code>).</li> <li>Line 4: \"CUSTOMER\" and \"GROUPING\" labels.</li> <li>Line 5: Separator line (<code>SEP</code>).</li> </ul> </li> <li> <p>Detail Line Processing:</p> </li> <li>Logic (lines 0084-0104, detail lines at level <code>01</code>):<ul> <li>For each <code>ARCLGR</code> record:</li> <li>Write detail line 1:<ul> <li><code>CGCUST</code> (customer number, zero-suppressed, 6 characters).</li> <li><code>ARNAME</code> (customer name, 40 characters, left-justified).</li> </ul> </li> <li>Write detail line 2:<ul> <li>Credit limit group numbers (<code>ARC,1</code> to <code>ARC,15</code>, corresponding to <code>CGCL01</code> to <code>CGCL15</code>, zero-suppressed, 9-character spacing).</li> </ul> </li> </ul> </li> <li> <p>Output:</p> <ul> <li>Lists customer number, name, and up to 15 credit limit group numbers per customer (though <code>ARCLGR</code> supports up to 25, only 15 are printed).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends when <code>ARCLGR</code> reaches end-of-file, closing all files and terminating.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the credit limit grouping list:</p> <ol> <li>Data Source:</li> <li>Processes sorted records from <code>ARCLGR</code>, which contains company numbers, customer numbers, and up to 25 credit limit group numbers per customer.</li> <li> <p>Assumes <code>ARCLGR</code> is pre-sorted by company and customer number (handled by <code>#GSORT</code> in <code>AR490.ocl36.txt</code>).</p> </li> <li> <p>Company Validation:</p> </li> <li>Retrieves company name (<code>ACNAME</code>) from <code>ARCONT</code> using <code>CGCONO</code>.</li> <li> <p>If the company is not found, prints a blank company name.</p> </li> <li> <p>Customer Validation:</p> </li> <li>Retrieves customer name (<code>ARNAME</code>) from <code>ARCUST</code> using <code>ARKEY</code> (company + customer number).</li> <li> <p>If the customer is not found, prints a blank customer name.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Groups output by company, printing the company name in the header.</li> <li>Lists each customer\u2019s number, name, and up to 15 credit limit group numbers.</li> <li>Includes page number, date, and time in the header.</li> <li> <p>Uses separator lines (<code>* * *</code>) for readability.</p> </li> <li> <p>Deletion Handling:</p> </li> <li> <p>Processes records with <code>CGDEL</code> (delete code), but does not explicitly filter out deleted records (<code>CGDEL = 'D'</code>). The sorting step in <code>AR490.ocl36.txt</code> likely excludes deleted records.</p> </li> <li> <p>Output Limitation:</p> </li> <li>Prints only the first 15 credit limit groups (<code>CGCL01</code> to <code>CGCL15</code>) out of 25 possible groups in <code>ARCLGR</code>, potentially omitting data if more than 15 groups exist.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. ARCLGR:    - Primary input file (240 bytes, disk).    - Contains:      - <code>CGDEL</code> (1 byte): Delete code.      - <code>CGCONO</code> (2 bytes): Company number.      - <code>CGCUST</code> (6 bytes): Customer number.      - <code>CGCL01</code> to <code>CGCL25</code> (6 bytes each): Credit limit group numbers.      - <code>ARKEY</code> (8 bytes): Composite key (company + customer).    - Sorted by company and customer number by <code>#GSORT</code>. 2. ARCONT:    - Input file (256 bytes, indexed, key at position 2).    - Contains:      - <code>ACNAME</code> (30 bytes, positions 4-33): Company name.    - Used to retrieve company names. 3. ARCUST:    - Input file (384 bytes, indexed, key at position 8).    - Contains:      - <code>ARCO</code> (2 bytes, positions 2-3): Company number.      - <code>ARNAME</code> (30 bytes, positions 10-39): Customer name.    - Used to retrieve customer names. 4. PRINT:    - Output printer file (165 bytes).    - Used to generate the report with headers and detail lines.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs using <code>CALL</code> or similar operations. It is invoked by the OCL program <code>AR490.ocl36.txt</code> and relies on the sorted input from <code>#GSORT</code>, but no additional programs are called within the RPG code.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program reads sorted records from <code>ARCLGR</code>, retrieves company names from <code>ARCONT</code> and customer names from <code>ARCUST</code>, and generates a printer report (<code>PRINT</code>) with headers (company name, date, time, page) and detail lines (customer number, name, up to 15 credit limit group numbers). It formats the report with separator lines and handles missing data by printing blanks.</li> <li>Business Rules: Processes sorted <code>ARCLGR</code> data, validates company and customer numbers, prints up to 15 credit limit groups per customer, and formats the report with headers and separators. Assumes pre-filtered data (e.g., non-deleted records) from sorting.</li> <li>Tables/Files: <code>ARCLGR</code> (input data), <code>ARCONT</code> (company names), <code>ARCUST</code> (customer names), <code>PRINT</code> (report output).</li> <li>External Programs: None called within the RPG program.</li> </ul> <p>If you need further details (e.g., sample report output or file record layouts), please provide additional information or requirements.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/","title":"AR490P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, <code>AR490P.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400 or System/36) to control job execution and interact with RPG programs. Below, I explain the process steps of the OCL program, list the external programs called, and identify the tables/files used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL programs are used to define job control procedures, including loading programs, opening files, setting parameters, and controlling program flow. The steps in <code>AR490P.ocl36.txt</code> are as follows:</p> <ol> <li>Invoke a Program (<code>GSGENIEC</code>):</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>Calls the program <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li>This step may perform environment setup or validation before proceeding.</li> </ul> </li> <li> <p>Conditional Check on Location 506 (<code>?L'506,3'?/YES RETURN</code>):</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>Checks the value at location 506 (likely a system or program variable) for a length of 3 characters.</li> <li>If the condition is true (<code>YES</code>), the program terminates early with a <code>RETURN</code> statement, halting further execution.</li> <li>This acts as a gatekeeper to prevent unnecessary processing.</li> </ul> </li> <li> <p>Set Procedure Parameter (<code>SCPROCP</code>):</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>Sets a procedure parameter, passing the value from parameter <code>?9?</code> (a placeholder for a runtime parameter, likely a library or file name).</li> <li>The commas indicate unused parameter positions (up to 8 parameters are skipped).</li> <li>This step prepares the environment for subsequent steps.</li> </ul> </li> <li> <p>Clear Local Variables:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>Initializes all local variables to blanks, ensuring a clean state for the program.</li> <li>This prevents residual data from affecting execution.</li> </ul> </li> <li> <p>Invoke Year 2000 Utility (<code>GSY2K</code>):</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls a Year 2000 (Y2K) compliance utility, likely to handle date-related conversions or validations.</li> <li>This ensures the program handles dates correctly, especially for legacy systems.</li> </ul> </li> <li> <p>Load the Main Program (<code>AR490P</code>):</p> </li> <li> <p><code>// LOAD AR490P</code>:</p> <ul> <li>Loads the RPG program <code>AR490P</code> into memory for execution.</li> <li>This is the core program responsible for the business logic (e.g., credit limit grouping).</li> </ul> </li> <li> <p>Open File (<code>ARCONT</code>):</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Opens the file <code>ARCONT</code> with the label derived from parameter <code>?9?</code> concatenated with <code>ARCONT</code>.</li> <li><code>DISP-SHR</code> indicates the file is opened in shared mode, allowing concurrent access by other jobs.</li> <li>This file is likely a customer or accounts receivable control file used by <code>AR490P</code>.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Initiates execution of the loaded program <code>AR490P</code>.</li> <li>The program processes data using the opened <code>ARCONT</code> file.</li> </ul> </li> <li> <p>Conditional Check on Location 129 (<code>?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li> <p><code>// IF ?L'129,6'?/CANCEL GOTO END</code>:</p> <ul> <li>Checks the value at location 129 (likely a status or error code) for a length of 6 characters.</li> <li>If the condition is true (<code>CANCEL</code>), the program jumps to the <code>END</code> tag, terminating execution.</li> <li>This acts as an error or cancellation check after <code>AR490P</code> runs.</li> </ul> </li> <li> <p>Conditional Job Submission Based on Location 120:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ 5,?CLIB?,AR490,,,,,,,,,?9?</code>:</li> <li>Checks the value at location 120 for a length of 1 character.</li> <li>If true (<code>Y</code>), submits a job to job queue <code>5</code> with:<ul> <li>Library name from <code>?CLIB?</code> (a runtime parameter).</li> <li>Program <code>AR490</code> (likely a related RPG program).</li> <li>Parameter <code>?9?</code> passed to the job.</li> </ul> </li> <li>The commas indicate unused parameters.</li> <li><code>// ELSE AR490 ,,,,,,,,?9?</code>:</li> <li>If the condition is false, runs <code>AR490</code> directly (not in a job queue) with parameter <code>?9?</code>.</li> <li>This provides an alternate execution path for <code>AR490</code>.</li> </ul> </li> <li> <p>End of Program (<code>TAG END</code>):</p> <ul> <li><code>// TAG END</code>:</li> <li>Marks the end of the program or a jump target for the <code>GOTO END</code> statement.</li> <li>Execution stops here if the <code>CANCEL</code> condition is met.</li> </ul> </li> <li> <p>Clear Local Variables Again:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Resets all local variables to blanks, cleaning up after execution.</li> <li>This ensures no residual data persists for subsequent runs.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility for initialization or environment setup. 2. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A Year 2000 utility for date handling. 3. AR490P:    - Loaded and executed via <code>// LOAD AR490P</code> and <code>// RUN</code>.    - The main RPG program for credit limit grouping. 4. AR490:    - Referenced in the conditional job submission (<code>JOBQ</code>) or direct execution (<code>ELSE</code>).    - Likely a related RPG program, possibly a variant or wrapper for <code>AR490P</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following file: 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - A file (likely a database table or physical file) used by <code>AR490P</code>.    - The label includes the parameter <code>?9?</code>, suggesting the file resides in a library specified at runtime.    - Likely contains customer or accounts receivable data for credit limit grouping.</p> <p>No other files or tables are explicitly mentioned in the OCL program. However, <code>AR490P</code> (the RPG program) may internally reference additional files, which are not visible in the OCL.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment, checks conditions, loads and runs the <code>AR490P</code> RPG program with the <code>ARCONT</code> file, handles errors, and conditionally submits or runs <code>AR490</code> based on runtime parameters. It ensures proper setup, execution, and cleanup.</li> <li>External Programs: <code>GSGENIEC</code>, <code>GSY2K</code>, <code>AR490P</code>, <code>AR490</code>.</li> <li>Tables/Files: <code>ARCONT</code>.</li> </ul> <p>If you need further analysis (e.g., details about <code>AR490P</code>\u2019s RPG logic or additional context about <code>ARCONT</code>), please provide the RPG source code or more details about the system environment.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/","title":"AR490P RPGLE","text":"<p>The provided RPGLE program, <code>AR490P.rpgle.txt</code>, is an RPG IV program converted from an earlier RPG version (likely RPG/400) using the TARGET/400 tool, as indicated by the conversion comments. This program handles the user interface and validation logic for a credit limit grouping list, interacting with a workstation file and database files. It is called by the OCL program <code>AR490P.ocl36.txt</code> previously analyzed. Below, I explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The program is designed to prompt the user for input via a workstation display file, validate selections for company codes and job queue options, and prepare data for a credit limit grouping report. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a non-default activation group, allowing for modern RPG IV features.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>H DFTNAME(AR490P)</code>: Specifies the default program name as <code>AR490P</code>.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>COM</code>: A compile-time array with 5 error messages (40 characters each) for validation feedback.</li> <li><code>DCO</code>: A data structure with 10 subfields (<code>DC01</code> to <code>DC10</code>, each 35 characters) to store company numbers and names.</li> <li><code>UDS</code>: A data structure for passing parameters (e.g., <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCANC</code>) to/from the OCL program.</li> </ul> </li> <li> <p>File Declarations:</p> <ul> <li><code>AR490PD</code>: A workstation file (display file) for user interaction, using the <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</li> <li><code>ARCONT</code>: A disk file (256 bytes, indexed, key at position 2) containing company data.</li> <li><code>GSCONT</code>: Another disk file (512 bytes, indexed, key at position 2) for company validation.</li> </ul> </li> <li> <p>Workstation File Processing:</p> </li> <li>Initial Check (<code>QSCTL</code>):<ul> <li>If <code>QSCTL</code> (control field) is blank:</li> <li>Set <code>*IN09 = '1'</code> and <code>*IN01 = '0'</code> to indicate initial screen display.</li> <li>Set <code>QSCTL = 'R'</code> to mark the screen as ready.</li> <li>Else:</li> <li>Set <code>*IN09 = '0'</code> and <code>*IN01 = '1'</code>.</li> <li>Read the <code>AR490S1</code> format from <code>AR490PD</code>.</li> <li>If the last record is read (<code>LR</code> indicator), exit the program (<code>RETURN</code>).</li> </ul> </li> <li> <p>Clear Indicators and Message:</p> <ul> <li>Reset message field <code>MSG</code> to blanks.</li> <li>Turn off indicators <code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code> to clear error states.</li> </ul> </li> <li> <p>Handle Cancel Key (<code>*INKG</code>):</p> </li> <li> <p>If the cancel key is pressed (<code>*INKG = *ON</code>):</p> <ul> <li>Turn off <code>*IN01</code> and <code>*IN09</code>.</li> <li>Set <code>*INLR = *ON</code> to end the program.</li> <li>Set <code>KYCANC = 'CANCEL'</code> to signal cancellation to the OCL program.</li> <li>This allows the user to exit the program gracefully.</li> </ul> </li> <li> <p>Initial Setup (<code>*IN09</code>):</p> </li> <li> <p>If <code>*IN09 = *ON</code> (initial screen display):</p> <ul> <li>Set <code>*IN81 = *ON</code> to indicate screen output.</li> <li>Execute the <code>ONETIM</code> subroutine to populate company data.</li> </ul> </li> <li> <p>Screen Processing (<code>*IN01</code>):</p> </li> <li> <p>If <code>*IN01 = *ON</code> (user input received):</p> <ul> <li>Execute the <code>SCREEN1</code> subroutine to validate user input.</li> </ul> </li> <li> <p>Main Loop Control:</p> </li> <li>If <code>*IN81 = *OFF</code>, set <code>*INLR = *ON</code> to end the program.</li> <li> <p>If <code>*IN81 = *ON</code>, write the <code>AR490S1</code> format to the display file to show the screen (with errors or data).</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Populate the company selection dropdown (<code>DCO</code> array) and initialize parameters.</li> <li> <p>Steps:</p> <ul> <li>Clear the <code>DCO</code> array.</li> <li>Initialize counter <code>X = 1</code> and credit limit <code>ACLIM = 00</code>.</li> <li>Set the lower limit for <code>ARCONT</code> file using <code>ACLIM</code> (<code>SETLL</code>).</li> <li>Read <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10 = *ON</code>) or 10 companies are loaded:</li> <li>Skip records marked as deleted (<code>ACDEL = 'D'</code>).</li> <li>Store company number (<code>ACCO</code>) and name (<code>ACNAME</code>) in <code>DCO(X)</code>.</li> <li>Increment <code>X</code>; stop if <code>X = 10</code>.</li> <li>Move <code>DCO(1)</code> to <code>DCO(10)</code> into individual fields (<code>DCO1</code> to <code>DCO10</code>) for display.</li> <li>Check <code>GSCONT</code> file for a company number (<code>GXCONO</code>):</li> <li>If found and non-zero, set <code>KYALCO = 'CO '</code> and <code>KYCO1 = GXCONO</code>.</li> <li>Else, set <code>KYALCO = 'ALL'</code>.</li> <li>Set <code>KYJOBQ = 'N'</code> (default job queue selection).</li> <li>Set <code>KYCOPY = 01</code> (default number of copies).</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validate user input for company selection and job queue.</li> <li>Steps:<ul> <li>Validate Company Selection:</li> <li>Check if <code>KYALCO</code> is <code>'ALL'</code> or <code>'CO '</code>; if not, set error indicators <code>*IN81</code>, <code>*IN90</code>, display error message <code>COM(1)</code> (\"COMPANY SELECTION MUST BE 'CO' or 'ALL'\"), and exit.</li> <li>If <code>KYALCO = 'CO'</code> and all company fields (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are zero, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>, display <code>COM(2)</code> (\"IF CO, THEN ENTER VALID COMPANIES\"), and exit.</li> <li>If <code>KYALCO = 'ALL'</code> and any company field is non-zero, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>, display <code>COM(3)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\"), and exit.</li> <li>If <code>KYALCO = 'CO'</code>, validate each company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) using <code>CHAIN</code> to <code>ARCONT</code>:<ul> <li>If any company number is invalid (<code>*IN10 = *ON</code>), set error indicators <code>*IN81</code>, <code>*IN90</code>, and <code>*IN51</code>, <code>*IN52</code>, or <code>*IN53</code> (depending on the field), display <code>COM(4)</code> (\"INVALID COMPANY NUMBER\"), and exit.</li> </ul> </li> <li>Validate Job Queue Selection:</li> <li>Check if <code>KYJOBQ</code> is <code>'Y'</code> or <code>'N'</code>; if not, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN54</code>, display <code>COM(5)</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\"), and exit.</li> <li>Validate Copies:</li> <li>If <code>KYCOPY = 00</code>, set it to <code>01</code> to ensure at least one copy.</li> <li>Exit the subroutine (<code>ENDS1</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating a credit limit grouping list:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies) via <code>KYALCO</code>.</li> <li>If <code>'CO'</code> is selected, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided.</li> <li>If <code>'ALL'</code> is selected, no company numbers should be entered.</li> <li>Company numbers must exist in the <code>ARCONT</code> file and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</li> <li> <p>Invalid company selections trigger error messages and prevent further processing.</p> </li> <li> <p>Job Queue Selection:</p> </li> <li>The user must specify whether the report runs in a job queue (<code>KYJOBQ = 'Y'</code>) or interactively (<code>KYJOBQ = 'N'</code>).</li> <li> <p>Invalid job queue entries trigger an error message.</p> </li> <li> <p>Number of Copies:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be at least 1. If zero is entered, it is set to 1.</p> </li> <li> <p>Cancellation:</p> </li> <li> <p>If the user presses the cancel key, the program sets <code>KYCANC = 'CANCEL'</code> and exits, signaling the OCL program to terminate.</p> </li> <li> <p>Company Data Population:</p> </li> <li>Up to 10 active companies (non-deleted) from <code>ARCONT</code> are loaded into the <code>DCO</code> array for display in a dropdown.</li> <li>The program checks <code>GSCONT</code> to determine if a specific company number should be preselected (<code>KYALCO = 'CO '</code>) or if all companies are selected (<code>KYALCO = 'ALL'</code>).</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. AR490PD:    - A workstation file (display file) for user interaction.    - Contains the <code>AR490S1</code> format for input/output.    - Uses <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering. 2. ARCONT:    - A disk file (256 bytes, indexed, key at position 2).    - Contains company data with fields:      - <code>ACDEL</code> (1 byte): Delete flag ('D' for deleted).      - <code>ACCO</code> (2 bytes, numeric): Company number.      - <code>ACNAME</code> (30 bytes): Company name.    - Used to validate company numbers and populate the dropdown. 3. GSCONT:    - A disk file (512 bytes, indexed, key at position 2).    - Contains company data with fields:      - <code>GXDEL</code> (1 byte): Delete flag.      - <code>GXCONO</code> (2 bytes, numeric): Company number.    - Used to determine the default company selection.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs using <code>CALL</code> or similar operations. However: - It interacts with the <code>PROFOUNDUI(HANDLER)</code> for the <code>AR490PD</code> display file, which is a UI handler, not a program. - The OCL program (<code>AR490P.ocl36.txt</code>) that calls this RPG program references <code>AR490</code>, which may be invoked based on user input (<code>KYJOBQ</code>), but this is handled outside the RPG program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes, displays a screen to prompt for company selection (<code>ALL</code> or specific companies), job queue option (<code>Y</code> or <code>N</code>), and number of copies. It populates a company dropdown from <code>ARCONT</code>, validates user input, and sets parameters for the OCL program to proceed (or cancel). The <code>ONETIM</code> subroutine loads company data, and <code>SCREEN1</code> validates input.</li> <li>Business Rules: Enforces valid company selection (<code>ALL</code> or <code>CO</code> with valid company numbers), job queue selection (<code>Y</code> or <code>N</code>), and ensures at least one copy. Invalid inputs trigger error messages, and cancellation is supported.</li> <li>Tables/Files: <code>AR490PD</code> (workstation), <code>ARCONT</code> (company data), <code>GSCONT</code> (company validation).</li> <li>External Programs: None explicitly called within the RPG program.</li> </ul> <p>If you need further details (e.g., the display file format <code>AR490S1</code> or additional context about <code>AR490</code>), please provide relevant files or information.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/","title":"Summary AR490P OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>Based on the provided call stack (<code>AR490P.ocl36.txt</code>, <code>AR490P.rpgle.txt</code>, <code>AR490.ocl36.txt</code>, <code>AR490.rpg36.txt</code>), the program implements a single primary use case:</p> <ol> <li>Generate Credit Limit Grouping List:</li> <li>This use case allows users to generate a printed report listing customers grouped by company with their associated credit limit group numbers. The user can select either all companies or specific companies, choose whether to run the report interactively or in a job queue, and specify the number of report copies. The report includes company names, customer numbers, customer names, and up to 15 credit limit group numbers per customer.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#credit-limit-grouping-list-function-requirements","title":"Credit Limit Grouping List Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#overview","title":"Overview","text":"<p>The <code>GenerateCreditLimitGroupingList</code> function generates a report listing customers by company, including customer names and up to 15 credit limit group numbers per customer. It accepts inputs for company selection, job queue preference, and number of copies, processes data from company and customer files, and produces a sorted, formatted report.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection (<code>companySelection</code>): String, either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies).</li> <li>Company Numbers (<code>companyNumbers</code>): Array of up to 3 numeric company numbers (2 digits each). Required if <code>companySelection = 'CO'</code>, otherwise empty.</li> <li>Job Queue (<code>jobQueue</code>): String, <code>'Y'</code> (run in job queue) or <code>'N'</code> (run interactively).</li> <li>Copies (<code>copies</code>): Numeric, number of report copies (default 1 if 0).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Report: A formatted text file or printer output containing:</li> <li>Header: Company name, report title (\"CREDIT LIMIT GROUPING LIST\"), date, time, page number.</li> <li>Detail: Customer number, customer name, up to 15 credit limit group numbers per customer.</li> <li>Status: Success or error message (e.g., \"Invalid company number\").</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>companySelection</code> is <code>'ALL'</code> or <code>'CO'</code>. If invalid, return error: \"Company selection must be 'CO' or 'ALL'\".</li> <li>If <code>companySelection = 'CO'</code>, validate <code>companyNumbers</code>:<ul> <li>At least one company number must be non-zero.</li> <li>Each company number must exist in <code>ARCONT</code> and not be marked deleted (<code>ACDEL \u2260 'D'</code>). If invalid, return error: \"Invalid company number\".</li> </ul> </li> <li>If <code>companySelection = 'ALL'</code>, ensure <code>companyNumbers</code> is empty. If not, return error: \"If ALL, do not enter companies\".</li> <li>Ensure <code>jobQueue</code> is <code>'Y'</code> or <code>'N'</code>. If invalid, return error: \"Job queue entry must be 'Y' or 'N'\".</li> <li> <p>If <code>copies = 0</code>, set to 1.</p> </li> <li> <p>Retrieve Default Company:</p> </li> <li>Query <code>GSCONT</code> for a default company number (<code>GXCONO</code>).</li> <li> <p>If non-zero, set <code>companySelection = 'CO'</code> and include <code>GXCONO</code> in <code>companyNumbers</code>. Otherwise, use <code>companySelection = 'ALL'</code>.</p> </li> <li> <p>Sort Input Data:</p> </li> <li>Read <code>ARCLGR</code> file (credit limit grouping data).</li> <li>Filter records where <code>CGDEL \u2260 'D'</code> (non-deleted).</li> <li>If <code>companySelection = 'CO'</code>, include only records where <code>CGCONO</code> matches a value in <code>companyNumbers</code>.</li> <li>Sort by <code>CGCONO</code> (company number, positions 2-3) and <code>CGCUST</code> (customer number, positions 4-9).</li> <li> <p>Output sorted data to temporary file <code>AR490</code>.</p> </li> <li> <p>Generate Report:</p> </li> <li>Read sorted <code>AR490</code> file.</li> <li>For each record:<ul> <li>Retrieve company name (<code>ACNAME</code>) from <code>ARCONT</code> using <code>CGCONO</code>. If not found, use blank.</li> <li>Retrieve customer name (<code>ARNAME</code>) from <code>ARCUST</code> using <code>ARKEY</code> (company + customer number). If not found, use blank.</li> <li>Extract credit limit group numbers (<code>CGCL01</code> to <code>CGCL15</code>, positions 10-99).</li> <li>Write to report:</li> <li>Header (per company): <code>ACNAME</code>, \"CREDIT LIMIT GROUPING LIST\", date, time, page number, separator lines.</li> <li>Detail (per customer): <code>CGCUST</code> (zero-suppressed), <code>ARNAME</code>, <code>CGCL01</code> to <code>CGCL15</code> (zero-suppressed, 9-character spacing).</li> </ul> </li> <li> <p>Repeat for <code>copies</code> iterations.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>jobQueue = 'Y'</code>, submit report generation to job queue.</li> <li>If <code>jobQueue = 'N'</code>, run interactively.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Selection:</li> <li><code>'ALL'</code> includes all non-deleted companies; <code>'CO'</code> requires 1-3 valid company numbers.</li> <li>Company numbers must exist in <code>ARCONT</code> and be active (<code>ACDEL \u2260 'D'</code>).</li> <li>Customer Data:</li> <li>Only non-deleted customers (<code>CGDEL \u2260 'D'</code>) from <code>ARCLGR</code> are included.</li> <li>Customer names are retrieved from <code>ARCUST</code>; missing names are blank.</li> <li>Report Content:</li> <li>Lists up to 15 credit limit group numbers per customer (out of 25 possible in <code>ARCLGR</code>).</li> <li>Groups customers by company, with headers per company.</li> <li>Copies:</li> <li>Minimum 1 copy; 0 is corrected to 1.</li> <li>Error Handling:</li> <li>Invalid inputs halt processing with specific error messages.</li> <li>Date Handling:</li> <li>Uses system date/time, formatted as MMDDYY and HHMMSS, with Y2K compliance.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Sorting: Performed on <code>CGCONO</code> (numeric, 2 digits) and <code>CGCUST</code> (numeric, 6 digits).</li> <li>Page Numbering: Increments per page, zero-suppressed.</li> <li>Field Formatting:</li> <li><code>CGCUST</code>, <code>CGCL01</code> to <code>CGCL15</code>: Zero-suppressed numeric output.</li> <li><code>ARNAME</code>, <code>ACNAME</code>: Left-justified text.</li> <li>Separator Lines: Generated as repeating <code>'* '</code> for 164 characters.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCLGR</code>: Input data (company, customer, credit limit groups).</li> <li><code>ARCONT</code>: Company data (company number, name).</li> <li><code>ARCUST</code>: Customer data (company number, customer number, name).</li> <li><code>GSCONT</code>: Default company configuration.</li> <li><code>GSTABL</code>: Configuration table (purpose unspecified, likely report formatting).</li> <li>Utilities:</li> <li>Year 2000 date handling (GSY2K).</li> <li>Sort utility (#GSORT).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#execution-context","title":"Execution Context","text":"<ul> <li>Runs on IBM midrange system (System/36 or AS/400).</li> <li>Supports batch (<code>jobQueue = 'Y'</code>) or interactive (<code>jobQueue = 'N'</code>) execution.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/","title":"AR880 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR880.ocl36.txt</code>, used on IBM AS/400 or iSeries systems to manage operations for a Customer Credit Limit Authorization Inquiry. OCL is a scripting language used to control program execution, file handling, and system operations on these systems. Below, I\u2019ll explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates the execution of a credit limit authorization inquiry by setting up the environment, overriding database files, loading files, and calling a program. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Delete Overrides for All Files:</li> <li> <p><code>// DLTOVR FILE(*ALL)</code>: Deletes all existing file overrides to ensure a clean slate for file redirections. This prevents conflicts from prior overrides.</p> </li> <li> <p>Call Initial Program:</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>: Calls the program <code>GSGENIEC</code>. This is likely a general-purpose initialization or environment setup program. It may perform tasks like setting up user-specific parameters or validating the environment.</p> </li> <li> <p>Conditional Return Based on Screen Input:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>: Checks a specific screen location (likely a field at line 506, position 3) for a value of <code>YES</code>. If true, the program terminates immediately with a <code>RETURN</code> statement, halting further execution.</p> </li> <li> <p>Procedure Call with Parameter:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>: Invokes a stored procedure or command with a parameter <code>?9?</code>. The commas indicate placeholder parameters, and <code>?9?</code> is likely a dynamic value (e.g., a company code or environment identifier) passed to the procedure. The exact purpose depends on the system configuration.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li> <p><code>// GSY2K</code>: Executes a command or program related to Year 2000 compliance, ensuring date-related operations are handled correctly. This was common in legacy systems to address Y2K issues.</p> </li> <li> <p>Set Local Variables:</p> </li> <li><code>// LOCAL OFFSET-200,DATA-'        '</code>: Initializes a local variable at offset 200 with 8 blank spaces. This could be used to clear a specific data area or memory location.</li> <li> <p><code>// LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local variable at offset 480 with the value of <code>?9?</code>, likely a dynamic parameter like a company code or environment identifier.</p> </li> <li> <p>Set User Information:</p> </li> <li> <p><code>// LOCAL OFFSET-103,DATA-'?USER?'</code>: Stores the current user ID at offset 103, likely for audit or display purposes in the inquiry process.</p> </li> <li> <p>Override Database Files:</p> </li> <li><code>OVRDBF FILE(BBCSR) TOFILE(QS36F/GBBCSR)</code>: Overrides the logical file <code>BBCSR</code> to point to the physical file <code>QS36F/GBBCSR</code>. This ensures the program uses the correct physical file in the <code>QS36F</code> library.</li> <li> <p><code>OVRDBF FILE(BBSLSM) TOFILE(QS36F/GBBSLSM)</code>: Similarly, overrides the logical file <code>BBSLSM</code> to <code>QS36F/GBBSLSM</code>.</p> </li> <li> <p>Load Database Files:</p> </li> <li> <p>The program loads several files with the <code>DISP-SHRMM</code> (shared, multiple-member) disposition, allowing shared access to the files:</p> <ul> <li><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHRMM</code>: Loads the <code>ARCONT</code> file (likely accounts receivable control file) with a label prefixed by <code>?9?</code>.</li> <li><code>// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHRMM</code>: Loads the <code>ARCUST</code> file (customer master file).</li> <li><code>// FILE NAME-ARCUSP,LABEL-?9?ARCUSP,DISP-SHRMM</code>: Loads the <code>ARCUSP</code> file (possibly customer-specific data or preferences).</li> <li><code>// FILE NAME-BBORCL,LABEL-?9?BBORCL,DISP-SHRMM</code>: Loads the <code>BBORCL</code> file (credit limit or order control file).</li> <li><code>// FILE NAME-ARCLGR,LABEL-?9?ARCLGR,DISP-SHRMM</code>: Loads the <code>ARCLGR</code> file (accounts receivable ledger or general ledger interface).</li> <li><code>// FILE NAME-BBORCLAU,LABEL-?9?BBORCL,DISP-SHRMM</code>: Loads the <code>BBORCLAU</code> file, pointing to the same physical file as <code>BBORCL</code>.</li> </ul> </li> <li> <p>Printer Configuration (Commented Out):</p> <ul> <li><code>** PRINTER NAME-JBLIST,DEVICE-PJ,FORMSNO-JBCL,PRIORITY-0</code>: This commented line suggests a printer setup for a report named <code>JBLIST</code>, but it\u2019s not active in this version.</li> </ul> </li> <li> <p>Override Printer Files (Conditional):</p> <ul> <li><code>// IF ?9?/G OVRPRTF FILE(CREMAL) OUTQ(CSROUTQ)</code>: If <code>?9?</code> equals <code>G</code>, overrides the <code>CREMAL</code> printer file to output to the <code>CSROUTQ</code> queue.</li> <li><code>// IF ?9?/G OVRPRTF FILE(SMEMAL) OUTQ(SLMNOUTQ)</code>: Similarly, overrides the <code>SMEMAL</code> printer file to <code>SLMNOUTQ</code>.</li> <li><code>// IFF ?9?/G OVRPRTF FILE(CREMAL) OUTQ(TESTOUTQ)</code>: If <code>?9?</code> equals <code>G</code>, overrides <code>CREMAL</code> to <code>TESTOUTQ</code> (for testing purposes).</li> <li><code>// IFF ?9?/G OVRPRTF FILE(SMEMAL) OUTQ(TESTOUTQ)</code>: Similarly, overrides <code>SMEMAL</code> to <code>TESTOUTQ</code>.</li> </ul> </li> <li> <p>Run the Program:</p> <ul> <li><code>// RUN</code>: Executes the main program (likely <code>AR880</code>, implied by the file name). This program performs the core credit limit authorization inquiry logic using the loaded files.</li> </ul> </li> <li> <p>Commented Goto Statement:</p> <ul> <li><code>***GOTO AGN</code>: A commented-out line that would loop back to a label <code>AGN</code> if active, suggesting a potential loop for repeated processing (not used here).</li> </ul> </li> <li> <p>End Tag:</p> <ul> <li><code>// TAG END</code>: Marks the end of the main processing block.</li> </ul> </li> <li> <p>Clear Local Variables:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables, resetting the data areas used during execution.</li> </ul> </li> <li> <p>Reset Switches:</p> <ul> <li><code>// SWITCH 00000000</code>: Resets all system switches to <code>0</code>, ensuring a clean state for subsequent operations.</li> </ul> </li> <li> <p>Conditional Call to Test Program:</p> <ul> <li><code>// IF ?9?/G CALL AR880TC</code>: If <code>?9?</code> equals <code>G</code>, calls the program <code>AR880TC</code>, likely a test version of the credit limit authorization program.</li> </ul> </li> <li> <p>Exit Tag:</p> <ul> <li><code>// TAG OUT</code>: Marks the exit point of the program, indicating completion.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. GSGENIEC: Likely an initialization or environment setup program, called at the start. 2. AR880TC: A test version of the credit limit authorization program, called conditionally if <code>?9?</code> equals <code>G</code>.</p> <p>Additionally, the <code>// RUN</code> statement implies the execution of a program named <code>AR880</code> (based on the file name <code>AR880.ocl36.txt</code>), though it\u2019s not explicitly listed in a <code>CALL</code> statement.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following database files (tables), all loaded with a <code>DISP-SHRMM</code> disposition, indicating shared access to multi-member files: 1. ARCONT: Accounts receivable control file, prefixed with <code>?9?</code>. 2. ARCUST: Customer master file, prefixed with <code>?9?</code>. 3. ARCUSP: Customer-specific data or preferences file, prefixed with <code>?9?</code>. 4. BBORCL: Credit limit or order control file, prefixed with <code>?9?</code>. 5. ARCLGR: Accounts receivable ledger or general ledger interface file, prefixed with <code>?9?</code>. 6. BBORCLAU: Likely an alias for <code>BBORCL</code>, pointing to the same physical file, prefixed with <code>?9?</code>. 7. BBCSR: Customer service representative file, overridden to <code>QS36F/GBBCSR</code>. 8. BBSLSM: Salesman file, overridden to <code>QS36F/GBBSLSM</code>.</p> <p>Additionally, two printer files are referenced for output: 1. CREMAL: Output queue overridden to <code>CSROUTQ</code> or <code>TESTOUTQ</code> (conditional on <code>?9?</code>). 2. SMEMAL: Output queue overridden to <code>SLMNOUTQ</code> or <code>TESTOUTQ</code> (conditional on <code>?9?</code>).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#summary","title":"Summary","text":"<p>The <code>AR880.ocl36.txt</code> OCL program manages a Customer Credit Limit Authorization Inquiry by: - Initializing the environment (<code>GSGENIEC</code>). - Setting up dynamic parameters and user data. - Overriding and loading necessary database files for customer and credit data. - Conditionally configuring output queues for reports. - Executing the main inquiry logic (<code>AR880</code>) and, if in a specific environment (<code>?9?=G</code>), a test program (<code>AR880TC</code>). - Cleaning up variables and switches after execution.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>AR880TC</code> (conditional), and implicitly <code>AR880</code>. Tables Used: <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBORCLAU</code>, <code>BBCSR</code>, <code>BBSLSM</code>, with printer files <code>CREMAL</code> and <code>SMEMAL</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/","title":"AR880 RPGLE","text":"<p>The provided RPGLE program, <code>AR880.rpgle.txt</code>, is an RPG IV program designed for a Customer Credit Limit Authorization Inquiry on an IBM AS/400 or iSeries system. It is called from the OCL program <code>AR880.ocl36.txt</code> and handles the interactive process of displaying customer credit information, managing order authorizations, and generating email notifications for credit status changes. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The program is structured to handle customer credit limit inquiries, display order details, and allow users to authorize or unauthorize orders that exceed credit limits. It uses a workstation file with subfiles for user interaction and updates files to reflect authorization changes. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications: The program uses <code>DFTACTGRP(*NO)</code> to run in a named activation group and <code>DFTNAME(AR880)</code> to set the default program name. The <code>FIXNBR(*ZONED:*INPUTPACKED)</code> option ensures proper handling of numeric fields.</li> <li>File Declarations: Defines input files (<code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>), an update file (<code>BBORCLAU</code>), and printer files (<code>CREMAL</code>, <code>SMEMAL</code>) for output. The workstation file <code>AR880D</code> uses a subfile (<code>SFL1</code>) for displaying order details.</li> <li>Data Structures and Variables: Defines data structures for message handling, display file information, and customer/order data. Arrays and fields store customer credit details, order amounts, and messages.</li> <li> <p>Initial Setup:</p> <ul> <li>Checks if the control field <code>qsctl</code> is blank to set indicators for screen display (<code>*IN01</code>, <code>*IN09</code>, <code>*IN02</code>).</li> <li>If <code>qsctl</code> is not blank, reads the customer selection screen (<code>AR880S1</code>) and sets indicators accordingly.</li> <li>Initializes message handling fields and sets the default company number from <code>GSCONT</code> if available.</li> </ul> </li> <li> <p>Main Logic Flow:</p> </li> <li>Check for End of Job: If the F3 key (<code>*INKG</code>) is pressed, the program sets the last record indicator (<code>*INLR</code>) and exits.</li> <li>Customer Selection Mode:<ul> <li>If <code>U8</code> is off (<code>*INU8 = *OFF</code>), the program uses Screen 1 (<code>AR880S1</code>) for customer selection. If the F12 key (<code>*IN88</code>) is pressed, it redisplays Screen 1.</li> <li>If <code>U8</code> is on (<code>*INU8 = *ON</code>), the program bypasses Screen 1, using customer data from <code>AR800</code> (stored in <code>ldacc</code>), and proceeds directly to Screen 2.</li> </ul> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine):</p> <ul> <li>Retrieves customer data from <code>ARCONT</code> and <code>ARCUST</code> using the company/customer number (<code>cocust</code>).</li> <li>Validates the customer exists and is not deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li>Populates Screen 2 fields with customer details (name, address, credit limit, aging buckets, etc.) from <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li>Checks authorization initials (<code>aauin</code>) against valid values (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). If invalid, displays an error message.</li> <li>Calls <code>S2FILL</code> to preprocess order credit limits and calculate totals.</li> <li>Reads the credit limit group file (<code>ARCLGR</code>) to accumulate totals for related customers.</li> <li>Sets up the subfile for order display by calling <code>READFW</code>.</li> </ul> </li> <li> <p>Subfile Processing (Screen 2):</p> </li> <li>Clear Subfile (<code>SF1CLR</code> Subroutine): Clears the subfile (<code>SFL1</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Load Subfile (<code>SF1LOD</code> Subroutine): Loads order details (customer, order number, batch, amount, status) into the subfile from <code>BBORCL</code>.</li> <li>Read Forward (<code>READFW</code> Subroutine): Reads orders from <code>BBORCL</code> for the selected customer or group, filtering out deleted records (<code>bldel = 'D'</code>) and non-over-limit orders (<code>blovcl &lt;&gt; 'Y'</code>). Populates the subfile with up to 9 records per page.</li> <li> <p>Display Subfile: Writes the subfile control record (<code>SFLCTL1</code>) and displays the subfile if records exist (<code>*IN41</code>). Handles user input via the <code>EXFMT</code> operation.</p> </li> <li> <p>Order Authorization Processing:</p> </li> <li>Process Subfile (<code>SF1PRC</code> Subroutine): Reads subfile records to process user selections (<code>A</code> for authorize, <code>U</code> for unauthorize).</li> <li> <p>Authorize/UnAuthorize (<code>S2AUTH</code> Subroutine):</p> <ul> <li>Validates the selected order exists in <code>BBORCLAU</code> and is not deleted (<code>bxdel &lt;&gt; 'D'</code>).</li> <li>Checks if the order needs authorization (<code>bxovcl = 'Y'</code> and <code>aunau &lt;&gt; 'Y'</code>) or unauthorization (<code>aunau = 'Y'</code> and <code>bxauin &lt;&gt; *BLANKS</code>).</li> <li>Validates authorization initials (<code>aauin</code>) against allowed values.</li> <li>If authorizing, updates <code>BBORCLAU</code> with the initials and user ID (<code>auser</code>) via the <code>AUTH</code> exception output.</li> <li>If unauthorizing, clears the authorization fields in <code>BBORCLAU</code> via the <code>UNAU</code> exception output.</li> <li>Generates email notifications via printer files <code>CREMAL</code> (CSR/A/R copy) and <code>SMEMAL</code> (salesman copy) with order details, customer info, and credit status.</li> <li>Sends error messages for invalid cases (e.g., order not found, already authorized, invalid initials).</li> </ul> </li> <li> <p>Message Handling:</p> </li> <li>Add Message (<code>ADDMSG</code> Subroutine): Sends error or status messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>Write Message (<code>WRTMSG</code> Subroutine): Displays messages in the message subfile.</li> <li> <p>Clear Message (<code>CLRMSG</code> Subroutine): Clears the message subfile using <code>QMHRMVPM</code>.</p> </li> <li> <p>Subfile Edit (<code>EDITSFL</code> Subroutine):</p> </li> <li> <p>Validates subfile selections to ensure no invalid options are entered when a customer/order is keyed manually.</p> </li> <li> <p>Output Generation:</p> </li> <li> <p>Generates spool files for <code>CREMAL</code> and <code>SMEMAL</code> when an order is authorized or unauthorized, containing details like order number, customer info, credit limit, aging buckets, and notification recipients (CSR, salesman, A/R clerk).</p> </li> <li> <p>Program Exit:</p> </li> <li>Exits when the user presses F3 (<code>*INKG</code>) or completes processing, setting <code>*INLR</code> and returning.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Customer Selection:</li> <li>If <code>U8</code> is off, users must select a customer via Screen 1 (<code>AR880S1</code>).</li> <li>If <code>U8</code> is on, customer data is passed from <code>AR800</code>, bypassing Screen 1.</li> <li> <p>The customer must exist in <code>ARCUST</code> and not be marked as deleted (<code>ardel &lt;&gt; 'D'</code>).</p> </li> <li> <p>Authorization Validation:</p> </li> <li>Orders are only displayed if they exceed the credit limit (<code>blovcl = 'Y'</code>).</li> <li>Authorization requires valid initials (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). Invalid initials trigger an error.</li> <li>An order cannot be authorized if it\u2019s already authorized (<code>bxauin &lt;&gt; *BLANKS</code>) or doesn\u2019t need authorization (<code>bxovcl &lt;&gt; 'Y'</code>).</li> <li> <p>An order cannot be unauthorized if it\u2019s not authorized (<code>bxauin = *BLANKS</code>).</p> </li> <li> <p>Credit Limit and Aging:</p> </li> <li>Credit limits and aging buckets (current, 1-30, 31-60, 61-90, over 90 days) are retrieved from <code>ARCUST</code>.</li> <li>Totals for related customers in a credit limit group (<code>ARCLGR</code>) are accumulated for display.</li> <li> <p>Available credit is calculated as <code>s2clmt - s2totd - s2orap</code>.</p> </li> <li> <p>Order Processing:</p> </li> <li>Orders are read from <code>BBORCL</code> and updated in <code>BBORCLAU</code>.</li> <li> <p>The program accumulates approved (<code>s2orap</code>) and unapproved (<code>s2onap</code>) order amounts for display.</p> </li> <li> <p>Email Notifications:</p> </li> <li>When an order is authorized or unauthorized, notifications are sent via <code>CREMAL</code> (to CSR/A/R) and <code>SMEMAL</code> (to salesman).</li> <li> <p>Notifications include order details, customer info, credit limit, aging buckets, and timestamps.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors (e.g., invalid customer, order not found, invalid initials) are displayed via the message subfile.</li> <li> <p>The program prevents invalid subfile selections when manual customer/order input is provided.</p> </li> <li> <p>Modifications (per comments):</p> </li> <li>MG02 (11/09/2017): Added email notifications via spool files for CSR and salesman when order status changes.</li> <li>MG03 (03/21/2022): Removed beep for successful changes due to user annoyance.</li> <li>MG04 (04/08/2022): Removed <code>JBLIST</code> printer file output, no longer needed.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. AR880D: Workstation file (display file) with subfile <code>SFL1</code> for interactive user interface. 2. ARCONT: Input file for accounts receivable control data (credit limit ranges). 3. ARCUST: Input file for customer master data (name, address, credit limit, aging buckets). 4. ARCUSP: Input file for customer-specific data (contact name). 5. BBORCL: Input file for order credit limit data. 6. ARCLGR: Input file for credit limit group data (related customers). 7. BBORCLAU: Update file for order authorization data. 8. BBCSR: Input file for customer service representative data (CSR ID, name, email). 9. BBSLSM: Input file for salesman data (salesman ID, name, email). 10. GSCONT: Input file for system control data (default company number). 11. CREMAL: Printer file for CSR and A/R email notifications. 12. SMEMAL: Printer file for salesman email notifications.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program explicitly calls two external programs for message handling: 1. QMHSNDPM: Sends messages to the program message queue for error/status display. 2. QMHRMVPM: Removes messages from the program message queue to clear the message subfile.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR880.rpgle</code> program is a customer credit limit authorization inquiry tool that: - Allows users to select customers and view credit details (via Screen 1 or <code>AR800</code>). - Displays orders exceeding credit limits in a subfile, allowing authorization or unauthorization. - Validates inputs (e.g., initials) and updates order authorization data in <code>BBORCLAU</code>. - Generates email notifications for CSR, A/R, and salesmen when order status changes. - Handles errors and user interactions via a message subfile.</p> <p>Tables Used: <code>AR880D</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBORCLAU</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>, <code>CREMAL</code>, <code>SMEMAL</code>. External Programs Called: <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/","title":"AR880TC CLP","text":"<p>The provided CLP (Control Language Program) file, <code>AR880TC.clp.txt</code>, is a program executed on an IBM AS/400 or iSeries system, called conditionally from the main OCL program <code>AR880.ocl36.txt</code> when the environment parameter <code>?9?</code> equals <code>G</code>. Its primary purpose is to send email notifications to Customer Service Representatives (CSRs) and salesmen when the credit hold status of an order changes. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#process-steps-of-the-clp-program","title":"Process Steps of the CLP Program","text":"<p>The <code>AR880TC</code> program uses commands from a third-party tool (likely SpoolFlex or a similar product) to process and distribute spool files generated by the RPG program <code>AR880.rpgle</code> (specifically, the <code>CREMAL</code> and <code>SMEMAL</code> printer files). The steps are as follows:</p> <ol> <li>Program Declaration:</li> <li> <p><code>PGM</code>: Declares the start of the CLP program. No parameters are specified, indicating it does not expect input parameters.</p> </li> <li> <p>Process Spool File for CSR Notification (CREMAL):</p> </li> <li><code>SFASPLIT RSPNM('ORDER CREDIT STATUS') OUTQ(CSROUTQ) MVTOOUTQ(*DELETE)</code>:<ul> <li>Command: <code>SFASPLIT</code> is a third-party command (likely from SpoolFlex) that splits or processes a spool file.</li> <li>Parameters:</li> <li><code>RSPNM('ORDER CREDIT STATUS')</code>: Specifies the report/spool file name to process, likely corresponding to the <code>CREMAL</code> printer file generated by the RPG program for CSR and Accounts Receivable (A/R) notifications.</li> <li><code>OUTQ(CSROUTQ)</code>: Directs the processed spool file to the <code>CSROUTQ</code> output queue, which is likely configured to send emails to CSRs.</li> <li><code>MVTOOUTQ(*DELETE)</code>: Deletes the original spool file after processing, preventing duplicate processing or storage.</li> <li>Purpose: Converts the <code>CREMAL</code> spool file into an email format and sends it to the CSR/A/R recipients.</li> </ul> </li> <li> <p><code>MONMSG MSGID(SF00136)</code>: Monitors for the error message <code>SF00136</code> (likely a SpoolFlex-specific error, e.g., spool file not found or processing failure) and ignores it, allowing the program to continue execution.</p> </li> <li> <p>Distribute Spool File for CSR Notification:</p> </li> <li> <p><code>SFARDST RDSNM('ORDER CREDIT STATUS')</code>:</p> <ul> <li>Command: <code>SFARDST</code> is another third-party command for distributing spool files, likely as emails.</li> <li>Parameters:</li> <li><code>RDSNM('ORDER CREDIT STATUS')</code>: Specifies the report name (<code>CREMAL</code>) to distribute.</li> <li>Purpose: Ensures the processed spool file is emailed to the intended CSR recipients.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores any errors during distribution (e.g., if the spool file is missing).</li> </ul> </li> <li> <p>Distribute Additional Spool File for CSR Notification:</p> </li> <li> <p><code>SFARDST RDSNM('ORDER CREDIT STATUS3') MVTOOUTQ(DLTOUTQ)</code>:</p> <ul> <li>Parameters:</li> <li><code>RDSNM('ORDER CREDIT STATUS3')</code>: Processes a secondary report, possibly an additional copy or variant of the <code>CREMAL</code> spool file.</li> <li><code>MVTOOUTQ(DLTOUTQ)</code>: Moves the spool file to the <code>DLTOUTQ</code> output queue, which is likely configured to delete or archive the file after distribution.</li> <li>Purpose: Distributes an additional notification or copy, potentially to a different recipient or system, and cleans up the spool file.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores distribution errors.</li> </ul> </li> <li> <p>Process Spool File for Salesman Notification (SMEMAL):</p> </li> <li> <p><code>SFASPLIT RSPNM('ORDER CREDIT STATUS2') OUTQ(SLMNOUTQ) MVTOOUTQ(*DELETE)</code>:</p> <ul> <li>Parameters:</li> <li><code>RSPNM('ORDER CREDIT STATUS2')</code>: Specifies the report name for the <code>SMEMAL</code> printer file, which contains salesman notifications.</li> <li><code>OUTQ(SLMNOUTQ)</code>: Directs the processed spool file to the <code>SLMNOUTQ</code> output queue, likely configured for salesman email delivery.</li> <li><code>MVTOOUTQ(*DELETE)</code>: Deletes the original spool file after processing.</li> <li>Purpose: Converts the <code>SMEMAL</code> spool file into an email format and sends it to the salesman.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores processing errors.</li> </ul> </li> <li> <p>Commented-Out Distribution for Salesman Notification:</p> </li> <li> <p><code>/* SFARDST RDSNM('ORDER CREDIT STATUS2') MVTOOUTQ(JUNKOUTQ) */</code>:</p> <ul> <li>This line is commented out, indicating it is not currently active.</li> <li>If enabled, it would distribute the <code>SMEMAL</code> spool file to the <code>JUNKOUTQ</code> output queue, possibly for testing or archiving, with error monitoring for <code>SF00136</code>.</li> <li>Purpose: Likely a deprecated or test configuration that was disabled to streamline the process.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li><code>ENDPGM</code>: Marks the end of the CLP program, completing the execution.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#business-rules","title":"Business Rules","text":"<ol> <li>Email Notification Trigger:</li> <li>The program is executed when an order\u2019s credit hold status changes (authorized or unauthorized), as indicated by the spool files generated by the RPG program (<code>CREMAL</code> for CSR/A/R, <code>SMEMAL</code> for salesman).</li> <li> <p>It is only called when the environment parameter <code>?9?</code> equals <code>G</code> in the OCL program, suggesting it is specific to a test or specific operational environment.</p> </li> <li> <p>Spool File Processing:</p> </li> <li>Spool files (<code>CREMAL</code> and <code>SMEMAL</code>) are processed using <code>SFASPLIT</code> to convert them into email-compatible formats.</li> <li>The processed spool files are sent to specific output queues (<code>CSROUTQ</code> for CSR/A/R, <code>SLMNOUTQ</code> for salesman) configured for email delivery.</li> <li> <p>Original spool files are deleted after processing (<code>MVTOOUTQ(*DELETE)</code>) to prevent duplication and reduce storage.</p> </li> <li> <p>Additional Notification Handling:</p> </li> <li>A secondary spool file (<code>ORDER CREDIT STATUS3</code>) is distributed to <code>DLTOUTQ</code>, possibly for additional recipients or archival purposes.</li> <li> <p>The commented-out distribution to <code>JUNKOUTQ</code> suggests flexibility in routing salesman notifications, though it is currently disabled.</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>The program ignores errors (<code>SF00136</code>) during spool file processing or distribution, ensuring it completes even if a spool file is missing or processing fails. This prevents the program from halting due to minor issues.</p> </li> <li> <p>Purpose:</p> </li> <li>The program ensures timely communication to CSRs and salesmen about order credit status changes, supporting the business process of credit management by automating notifications.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#tables-files-used","title":"Tables (Files) Used","text":"<p>The CLP program does not directly reference database files or tables. Instead, it processes spool files generated by the RPG program <code>AR880.rpgle</code>. The relevant spool files are: 1. CREMAL: Printer file containing CSR and A/R notifications, processed as <code>ORDER CREDIT STATUS</code> and <code>ORDER CREDIT STATUS3</code>. 2. SMEMAL: Printer file containing salesman notifications, processed as <code>ORDER CREDIT STATUS2</code>.</p> <p>No database files (tables) are directly accessed by this CLP program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#external-programs-called","title":"External Programs Called","text":"<p>The program uses two third-party commands, likely from a tool like SpoolFlex, which are treated as external programs: 1. SFASPLIT: Splits or processes spool files into email-compatible formats and directs them to specified output queues. 2. SFARDST: Distributes processed spool files, likely as emails, to recipients based on the output queue configuration.</p> <p>These commands are not part of the standard IBM i command set and indicate the use of a third-party spool file management or email distribution tool.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#summary","title":"Summary","text":"<p>The <code>AR880TC.clp</code> program automates email notifications for CSR and salesman when an order\u2019s credit hold status changes, processing spool files generated by the RPG program. It: - Uses <code>SFASPLIT</code> to process <code>CREMAL</code> and <code>SMEMAL</code> spool files into email formats, directing them to <code>CSROUTQ</code> and <code>SLMNOUTQ</code>. - Distributes a secondary <code>CREMAL</code> copy (<code>ORDER CREDIT STATUS3</code>) to <code>DLTOUTQ</code>. - Deletes original spool files after processing to maintain system efficiency. - Ignores errors to ensure robust execution. - Is conditionally called in a specific environment (<code>?9?=G</code>).</p> <p>Tables Used: None (only spool files <code>CREMAL</code> and <code>SMEMAL</code>). External Programs Called: <code>SFASPLIT</code>, <code>SFARDST</code> (third-party commands, likely from SpoolFlex).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/","title":"Summary AR880 OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The call stack consists of three programs: <code>AR880.ocl36.txt</code> (OCL), <code>AR880.rpgle.txt</code> (RPGLE), and <code>AR880TC.clp.txt</code> (CLP). Together, they implement a single primary use case for the Customer Credit Limit Authorization Inquiry system on an IBM AS/400 or iSeries platform. The use case is:</p> <ol> <li>Customer Credit Limit Authorization Inquiry and Order Status Management:</li> <li>This use case allows users to inquire about a customer\u2019s credit status, view orders exceeding credit limits, authorize or unauthorize those orders, and send email notifications to Customer Service Representatives (CSRs), Accounts Receivable (A/R) clerks, and salesmen when an order\u2019s credit hold status changes. The system supports interactive customer selection (via a screen or pre-selected from another program, <code>AR800</code>) and manages credit-related data retrieval, validation, and updates.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#customer-credit-limit-authorization-function-requirements","title":"Customer Credit Limit Authorization Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#overview","title":"Overview","text":"<p>The Customer Credit Limit Authorization Function processes customer credit inquiries and manages order authorization for orders exceeding credit limits. It retrieves customer and order data, validates authorization actions, updates order status, and sends email notifications to relevant parties (CSRs, A/R clerks, salesmen). The function assumes all inputs are provided programmatically (no interactive screen) and operates in an IBM AS/400 or iSeries environment.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cono</code>, 2-digit numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>, 6-digit numeric): Identifies the customer.</li> <li>Order Number (<code>aord</code>, 6-digit numeric): Identifies the order to authorize/unauthorize (optional, for specific order processing).</li> <li>Authorization Initials (<code>aauin</code>, 3-character string): Initials of the authorizer (e.g., <code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>).</li> <li>Authorization Action (<code>aunau</code>, 1-character string): <code>Y</code> to unauthorize, blank to authorize.</li> <li>Environment Code (<code>env</code>, 1-character string): Environment identifier (e.g., <code>G</code> for test environment).</li> <li>User ID (<code>auser</code>, 8-character string): ID of the user performing the action.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Customer Credit Details:</li> <li>Customer name, address, contact name, phone number.</li> <li>Credit limit, total due, aging buckets (current, 1-30, 31-60, 61-90, over 90 days).</li> <li>Available credit, approved/unapproved order amounts.</li> <li>Order Details (for orders exceeding credit limits):</li> <li>Order number, batch number, amount, authorization status, user ID.</li> <li>Email Notifications:</li> <li>Spool files (<code>CREMAL</code>, <code>SMEMAL</code>) for CSR/A/R and salesman, containing order and customer details.</li> <li>Status Messages: Success or error messages (e.g., invalid customer, order not found).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Delete existing file overrides.</li> <li>Set up environment using <code>GSGENIEC</code> (initialization program).</li> <li>Override database files (<code>BBCSR</code>, <code>BBSLSM</code>) to point to <code>QS36F</code> library.</li> <li> <p>Load files: <code>ARCONT</code> (control), <code>ARCUST</code> (customer), <code>ARCUSP</code> (customer preferences), <code>BBORCL</code> (orders), <code>ARCLGR</code> (credit group), <code>BBORCLAU</code> (order authorization).</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Verify company (<code>cono</code>) and customer (<code>cust</code>) exist in <code>ARCUST</code> and are not deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li>If order number (<code>aord</code>) is provided, ensure it exists in <code>BBORCLAU</code> and is not deleted (<code>bxdel &lt;&gt; 'D'</code>).</li> <li>Validate authorization initials (<code>aauin</code>) against allowed values (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>).</li> <li> <p>Check if order requires authorization (<code>bxovcl = 'Y'</code> for over credit limit) or unauthorization (<code>bxauin &lt;&gt; *BLANKS</code>).</p> </li> <li> <p>Retrieve Customer Credit Data:</p> </li> <li>Fetch customer details (name, address, credit limit, aging buckets) from <code>ARCUST</code>.</li> <li>Get contact name from <code>ARCUSP</code>.</li> <li>Retrieve credit limit ranges from <code>ARCONT</code> (e.g., 1-10, 11-20, 21-30, over 30 days).</li> <li> <p>Aggregate totals for related customers in credit group (<code>ARCLGR</code>).</p> </li> <li> <p>Calculate Credit Metrics:</p> </li> <li>Total Due (<code>s2totd</code>): Sum of <code>artotd</code> from <code>ARCUST</code> for all customers in the credit group.</li> <li>Aging Buckets:<ul> <li>Current Due (<code>s2curd</code>): Sum of <code>arcurd</code>.</li> <li>1-30 Days (<code>s20110</code>): Sum of <code>ar0110</code>.</li> <li>31-60 Days (<code>s21120</code>): Sum of <code>ar1120</code>.</li> <li>61-90 Days (<code>s22130</code>): Sum of <code>ar2130</code>.</li> <li>Over 90 Days (<code>s2ov30</code>): Sum of <code>arov30</code>.</li> </ul> </li> <li>Order Amounts:<ul> <li>Approved Orders (<code>s2orap</code>): Sum of <code>bltamt</code> or <code>bloamt</code> from <code>BBORCL</code> where <code>blovcl &lt;&gt; 'Y'</code> or <code>blauin &lt;&gt; *BLANKS</code>.</li> <li>Unapproved Orders (<code>s2onap</code>): Sum of <code>bltamt</code> or <code>bloamt</code> where <code>blovcl = 'Y'</code> and <code>blauin = *BLANKS</code>.</li> </ul> </li> <li> <p>Available Credit (<code>s2avcl</code>): <code>s2clmt - s2totd - s2orap</code>.</p> </li> <li> <p>Process Order Authorization:</p> </li> <li>If <code>aord</code> is provided:<ul> <li>Authorize: If <code>aunau &lt;&gt; 'Y'</code>, update <code>BBORCLAU</code> with <code>aauin</code> and <code>auser</code> for the order.</li> <li>Unauthorize: If <code>aunau = 'Y'</code>, clear authorization fields in <code>BBORCLAU</code>.</li> </ul> </li> <li> <p>If no <code>aord</code>, retrieve all orders from <code>BBORCL</code> where <code>blovcl = 'Y'</code> for display.</p> </li> <li> <p>Generate Notifications:</p> </li> <li>Create spool files (<code>CREMAL</code>, <code>SMEMAL</code>) with order details (number, customer, amount, status), customer details, and credit metrics.</li> <li> <p>If <code>env = 'G'</code>, call <code>AR880TC</code> to process spool files:</p> <ul> <li><code>CREMAL</code> to <code>CSROUTQ</code> (CSR/A/R) and <code>DLTOUTQ</code> (additional copy).</li> <li><code>SMEMAL</code> to <code>SLMNOUTQ</code> (salesman).</li> <li>Delete original spool files after processing.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Output customer credit details, order details, and status messages.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Customer Validation:</li> <li>Customer must exist in <code>ARCUST</code> and not be deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li> <p>Invalid customer returns error: \"INVALID CUSTOMER\".</p> </li> <li> <p>Order Validation:</p> </li> <li>Order must exist in <code>BBORCLAU</code>, not be deleted (<code>bxdel &lt;&gt; 'D'</code>), and exceed credit limit (<code>bxovcl = 'Y'</code>).</li> <li> <p>Errors:</p> <ul> <li>Order not found: \"Order# [order] NOT FOUND FOR THIS CUSTOMER\".</li> <li>Order deleted: \"Order# [order] HAS BEEN DELETED FROM FILE\".</li> <li>No authorization needed: \"Order# [order] DOES NOT NEED AUTHORIZATION\".</li> <li>Already authorized: \"Order# [order] HAS ALREADY BEEN AUTHORIZED\".</li> <li>No unauthorization needed: \"Order# [order] DOES NOT NEED TO BE UNAUTHORIZED\".</li> </ul> </li> <li> <p>Authorization Rules:</p> </li> <li>Authorization requires valid initials (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). Invalid initials return error: \"INVALID AUTHORIZATION INITIALS USED\".</li> <li>Authorization updates <code>BBORCLAU</code> with initials and user ID.</li> <li> <p>Unauthorization clears authorization fields.</p> </li> <li> <p>Notification Rules:</p> </li> <li>Notifications are sent for each authorization/unauthorization action.</li> <li><code>CREMAL</code> notifies CSR/A/R; <code>SMEMAL</code> notifies salesman.</li> <li> <p>Notifications include order number, customer details, credit limit, aging buckets, and timestamp.</p> </li> <li> <p>Environment-Specific Processing:</p> </li> <li>If <code>env = 'G'</code>, spool files are processed by <code>AR880TC</code> for email distribution.</li> <li>Spool files are deleted after processing to avoid duplication.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Total Due: <code>s2totd = \u03a3(artotd)</code> for all customers in credit group (<code>ARCLGR</code>).</li> <li>Aging Buckets: Sum <code>arcurd</code>, <code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code> across credit group customers.</li> <li>Order Amounts:</li> <li>Approved: <code>s2orap = \u03a3(bltamt or bloamt)</code> where <code>blovcl &lt;&gt; 'Y'</code> or <code>blauin &lt;&gt; *BLANKS</code>.</li> <li>Unapproved: <code>s2onap = \u03a3(bltamt or bloamt)</code> where <code>blovcl = 'Y'</code> and <code>blauin = *BLANKS</code>.</li> <li>Available Credit: <code>s2avcl = s2clmt - s2totd - s2orap</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for invalid inputs or failed validations.</li> <li>Ignore spool file processing errors (<code>SF00136</code>) to ensure completion.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs Called:</li> <li><code>GSGENIEC</code>: Initializes environment.</li> <li><code>AR880TC</code>: Processes spool files for email (if <code>env = 'G'</code>).</li> <li><code>QMHSNDPM</code>, <code>QMHRMVPM</code>: Handle message queue operations.</li> <li><code>SFASPLIT</code>, <code>SFARDST</code>: Third-party commands for spool file processing.</li> <li>Files:</li> <li>Input: <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>.</li> <li>Update: <code>BBORCLAU</code>.</li> <li>Output: <code>CREMAL</code>, <code>SMEMAL</code> (spool files).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/","title":"AR101 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR101.ocl36.txt</code>, which appears to be a script for an IBM System/36 environment used to manage Accounts Receivable (A/R) processes. Below, I will explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#process-steps-of-the-ar101-ocl-program","title":"Process Steps of the AR101 OCL Program","text":"<p>The OCL program is designed to handle A/R transactions, specifically for editing invoices and adjustments. It includes conditional logic, file operations, sorting, and program execution. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Program Call and Conditional Check:</li> <li>The program starts by calling <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li>A condition checks the value at memory location <code>L'506,3'</code>. If the condition is met (<code>/YES</code>), the program returns immediately, halting further execution.</li> <li> <p>If the condition is not met, the program proceeds.</p> </li> <li> <p>SCPROCP and GSY2K Execution:</p> </li> <li>The <code>SCPROCP</code> command is executed with placeholder parameters (<code>?9?</code>), which may resolve to a specific library or file name at runtime.</li> <li> <p><code>GSY2K</code> is called, likely a program to handle Year 2000 compliance or date-related processing.</p> </li> <li> <p>Conditional Branching for Editing:</p> </li> <li> <p>The program checks if the first parameter (<code>?1?</code>) is set to <code>EDIT</code>. If true, it branches to the <code>EDIT</code> tag to process invoice and adjustment edits. If false, it continues with the next steps.</p> </li> <li> <p>File Creation for A/R Transactions:</p> </li> <li> <p>If the file <code>?9?ARTRGG</code> exists in <code>DATAF1</code>, the program builds a new file named <code>?9?ARTRGG</code> with the following attributes:</p> <ul> <li>Type: <code>A</code> (alternate index or sequential file).</li> <li>Record size: 500 bytes, 256 records.</li> <li>File type: Permanent (<code>P</code>), with 2 keys and a key length of 5.</li> </ul> </li> <li> <p>Load and Run AR101:</p> </li> <li>The program loads <code>AR101</code>, the main A/R processing program.</li> <li>It defines several files with <code>DISP-SHR</code> (shared disposition) and specific labels:<ul> <li><code>ARTRAN</code>: A/R transaction file (<code>?9?ARTRGG</code>), with an extension of 100 records.</li> <li><code>ARTRANR</code>: A read-only version of the A/R transaction file (<code>?9?ARTRGG</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>).</li> <li><code>ARCUSTX</code>: Customer index file (<code>?9?ARCUSX</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>).</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>).</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>).</li> <li><code>GSTABL</code>: General system table (<code>?9?GSTABL</code>).</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AR101</code> to process A/R transactions.</p> </li> <li> <p>Edit Invoices and Adjustments (EDIT Tag):</p> </li> <li>If the <code>EDIT</code> condition is met, the program branches to the <code>EDIT</code> tag.</li> <li>Delete Temporary File:<ul> <li>Loads <code>$DELET</code>, a utility program to delete files.</li> <li>If <code>?9?AR111S</code> exists in <code>DATAF1</code>, it scratches (deletes) the file labeled <code>?9?AR111S</code>.</li> </ul> </li> <li> <p>Sort Transactions:</p> <ul> <li>Loads <code>#GSORT</code>, a sorting utility.</li> <li>Defines input and output files:</li> <li>Input: <code>?9?ARTRGG</code> (A/R transaction file).</li> <li>Output: <code>?9?AR111S</code> (sorted output file, with 999,000 records and extendable by 999,000).</li> <li>Executes a sort operation (<code>HSORTA</code>) with the following parameters:</li> <li>Sort field: 15 bytes, ascending (<code>A</code>), starting at position 3, numeric (<code>N</code>).</li> <li>Condition: <code>1NECD</code> (possibly a flag or condition code).</li> <li>Fields to sort: Positions 7 to 21 (likely company/customer/invoice number).</li> <li>The sorted output is written to <code>?9?AR111S</code>.</li> </ul> </li> <li> <p>Check for Sorted File Existence:</p> </li> <li> <p>The program checks if the file <code>?9?AR111S</code> has zero records (<code>/00000000</code>). If true, it branches to the <code>END</code> tag, skipping further processing.</p> </li> <li> <p>Load and Run AR111:</p> </li> <li>If the sorted file exists and has records, the program loads <code>AR111</code>, a program for editing invoices and adjustments.</li> <li>Defines the following files (all shared):<ul> <li><code>AR111S</code>: Sorted transaction file (<code>?9?AR111S</code>).</li> <li><code>ARTRAN</code>: A/R transaction file (<code>?9?ARTRGG</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>).</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>).</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>).</li> <li><code>GSTABL</code>: General system table (<code>?9?GSTABL</code>).</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AR111</code> to process the sorted transactions.</p> </li> <li> <p>Final Cleanup (END Tag):</p> </li> <li>The program branches to the <code>END</code> tag.</li> <li>Loads <code>$DELET</code> again to delete the temporary sorted file.</li> <li>If <code>?9?AR111S</code> exists in <code>DATAF1</code>, it scratches the file.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs: 1. GSGENIEC: Likely a general initialization or utility program. 2. GSY2K: A program for Year 2000 compliance or date processing. 3. AR101: The main A/R transaction processing program. 4. $DELET: A system utility for deleting files. 5. #GSORT: A system utility for sorting files. 6. AR111: A program for editing invoices and adjustments.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (referred to as \"tables\" in the context of System/36): 1. ARTRAN (<code>?9?ARTRGG</code>): A/R transaction file, used for reading and writing transaction data. 2. ARTRANR (<code>?9?ARTRGG</code>): A read-only version of the A/R transaction file. 3. ARCUST (<code>?9?ARCUST</code>): Customer master file, containing customer information. 4. ARCUSTX (<code>?9?ARCUSX</code>): Customer index file, likely used for quick lookups. 5. ARDETL (<code>?9?ARDETL</code>): A/R detail file, containing detailed transaction records. 6. GLMAST (<code>?9?GLMAST</code>): General ledger master file, used for financial integration. 7. ARCONT (<code>?9?ARCONT</code>): A/R control file, containing control parameters for A/R processing. 8. GSTABL (<code>?9?GSTABL</code>): General system table, containing system-wide configuration data. 9. AR111S (<code>?9?AR111S</code>): Temporary sorted transaction file, created and deleted during execution.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#summary","title":"Summary","text":"<p>The <code>AR101.ocl36.txt</code> program manages A/R transactions by: - Initializing with <code>GSGENIEC</code> and <code>GSY2K</code>. - Conditionally building and processing A/R transaction files. - Sorting transactions and editing invoices/adjustments using <code>AR111</code>. - Performing cleanup by deleting temporary files. - Interacting with multiple A/R and general ledger files to ensure data integrity.</p> <p>The program uses a combination of conditional logic, file operations, and sorting to prepare and process A/R data, with a focus on invoice and adjustment editing. The external programs and files listed above are critical to its operation.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/","title":"AR101 RPGLE","text":"<p>The provided document, <code>AR101.rpgle.txt</code>, is an RPGLE (RPG IV) program for the IBM AS/400 (iSeries) platform, converted from a System/36 RPG program using the TARGET/400 tool. It is called from the main OCL program (<code>AR101.ocl36.txt</code>) to handle Accounts Receivable (A/R) transaction entry. Below, I will explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#process-steps-of-the-ar101-rpgle-program","title":"Process Steps of the AR101 RPGLE Program","text":"<p>The <code>AR101</code> program is designed to facilitate A/R transaction entry through a workstation interface, allowing users to add or update transactions such as invoices (<code>I</code>) or adjustments (<code>J</code>). It performs validations, interacts with multiple files, and supports date calculations for Y2K compliance. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization:</li> <li>The program initializes key variables (e.g., <code>axcust</code>, <code>co</code>, <code>cust</code>, <code>inv#</code>) to zero in the <code>*inzsr</code> subroutine.</li> <li>It sets up the workstation file (<code>ar101d</code>) for screen interaction, using the Profound UI handler for modernized UI rendering.</li> <li> <p>Data structures and arrays (e.g., <code>msg</code>, <code>tabmon</code>, <code>tabdys</code>) are defined for messages, month/day validations, and customer data.</p> </li> <li> <p>Workstation File Read and Mode Determination:</p> </li> <li>The program checks the control field <code>qsctl</code>. If blank, it sets indicator <code>*in09</code> to initiate a read operation; otherwise, it reads one of three screen formats (<code>ar101s1</code>, <code>ar101s2</code>, <code>ar101s3</code>) based on indicators <code>*in81</code>, <code>*in82</code>, or <code>*in83</code>.</li> <li>Two modes are supported:<ul> <li>Entry Mode (<code>*in10</code>): For adding new transactions.</li> <li>Update Mode (<code>*in11</code>): For updating existing transactions.</li> </ul> </li> <li> <p>Indicators <code>*in81</code>, <code>*in82</code>, and <code>*in83</code> control which screen format is displayed (<code>AR101S1</code>, <code>AR101S2</code>, <code>AR101S3</code>).</p> </li> <li> <p>Command Key Processing:</p> </li> <li> <p>The program processes function keys (<code>*inka</code> to <code>*inkk</code>):</p> <ul> <li>F1 (<code>*inka</code>): Switches to Update Mode (<code>*in11</code>).</li> <li>F2 (<code>*inkb</code>): Calls the <code>totals</code> subroutine to calculate and display total amounts, then displays screen <code>AR101S3</code>.</li> <li>F7 (<code>*inkg</code>): Sets <code>*inlr</code> to terminate the program.</li> <li>F10 (<code>*inkj</code>): Initiates Entry Mode (<code>*in10</code>), sets transaction type to <code>I</code> (invoice), and calls <code>rdtran</code> to get the next sequence number.</li> <li>F11 (<code>*inkk</code>): Switches to Update Mode, resets sequence number, and displays screen <code>AR101S1</code>.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>Screen 1 (<code>AR101S1</code>, <code>*in01</code> and <code>*in11</code>):<ul> <li>Executes the <code>s1</code> subroutine to retrieve and validate a transaction by sequence number (<code>seq</code>) from <code>artran</code>.</li> <li>If the record is not found (<code>*in90</code>), it clears fields and displays error messages (<code>msg(1)</code>, <code>msg(2)</code>).</li> <li>If the record is marked as deleted (<code>atdel = 'D'</code>), it sets <code>*in91</code> and displays <code>msg(5)</code>.</li> <li>Calls <code>move</code> to populate screen fields and <code>s2edit</code> for validations, then displays screen <code>AR101S2</code>.</li> </ul> </li> <li>Screen 2 (<code>AR101S2</code>, <code>*in02</code>):<ul> <li>In Entry Mode (<code>*in10</code>): Executes <code>s2add</code> to validate and add a new transaction. If valid, it writes to <code>artran</code> with <code>*in50</code>, increments the sequence number, clears fields, and redisplays <code>AR101S2</code>.</li> <li>In Update Mode (<code>*in11</code>): Executes <code>s2upd</code> to validate and update an existing transaction. If valid, it updates <code>artran</code> with <code>*in51</code>, resets the sequence number, and displays <code>AR101S1</code>.</li> </ul> </li> <li> <p>Screen 3 (<code>AR101S3</code>, <code>*in03</code>): Displays total amounts calculated by the <code>totals</code> subroutine.</p> </li> <li> <p>Transaction Validation (<code>s2edit</code> Subroutine):</p> </li> <li>Validates input fields for both entry and update modes:<ul> <li>Sequence Number: Ensures the sequence number is unique (<code>*in31</code>).</li> <li>Transaction Type: Must be <code>I</code> (invoice) or <code>J</code> (adjustment) (<code>*in31</code>).</li> <li>Company Number: Validates against <code>arcont</code> (<code>*in32</code>) and retrieves company name.</li> <li>Customer Number: Validates against <code>arcust</code> (<code>*in33</code>, <code>*in47</code>) and checks for deletion status.</li> <li>Invoice Number: Ensures it\u2019s non-zero (<code>*in34</code>) and checks for existence in <code>ardetl</code> for invoices (<code>I</code>) or non-existence for adjustments (<code>J</code>).</li> <li>Amount: Must be non-zero (<code>*in35</code>).</li> <li>Transaction Date: Validates format and sets to current date if zero (<code>*in36</code>). Calls <code>dtedit</code> for date validation.</li> <li>Due Date: For invoices, calculates due date using <code>clcdue</code> based on terms code (<code>*in37</code>, <code>*in38</code>).</li> <li>Salesman: Validates against <code>gstabl</code> (<code>*in39</code>) or defaults from <code>arcust</code>.</li> <li>G/L Accounts: Validates debit (<code>gldr</code>, <code>*in41</code>) and credit (<code>glcr</code>, <code>*in43</code>) accounts against <code>glmast</code>, checking for deletion or inactive status (<code>'D'</code> or <code>'I'</code>).</li> <li>Debit/Credit Companies: Validates against <code>arcont</code> (<code>*in40</code>, <code>*in42</code>).</li> </ul> </li> <li> <p>If any validation fails, sets <code>*in90</code>, displays an error message, and redisplays <code>AR101S2</code>.</p> </li> <li> <p>Due Date Calculation (<code>clcdue</code> Subroutine):</p> </li> <li>If terms code is zero, uses customer\u2019s terms code (<code>arterm</code>) or defaults to 30 days.</li> <li>Validates terms code against <code>gstabl</code> (<code>*in38</code>).</li> <li>Calculates due date based on net days (<code>tbnetd</code>) or prox days (<code>tbprxd</code>) using <code>tmdatn</code> or <code>tmdatp</code> subroutines.</li> <li> <p>Ensures due date is not earlier than transaction date (<code>*in37</code>).</p> </li> <li> <p>G/L Account Defaults (<code>invgl</code> Subroutine):</p> </li> <li> <p>Sets default G/L accounts if not provided:</p> <ul> <li>Debit account (<code>gldr</code>): Uses <code>acargl</code> (A/R G/L) or inter-company number (<code>arintr</code>).</li> <li>Credit account (<code>glcr</code>): Uses <code>acslgl</code> (sales G/L) or inter-company number.</li> <li>Sets debit/credit company numbers (<code>codr</code>, <code>cocr</code>) to transaction company (<code>co</code>) if not specified.</li> </ul> </li> <li> <p>Sequence Number Retrieval (<code>rdtran</code> Subroutine):</p> </li> <li> <p>Reads <code>artranr</code> to find the last sequence number, adds 10 to it, and clears fields for a new transaction.</p> </li> <li> <p>Total Calculation (<code>totals</code> Subroutine):</p> </li> <li> <p>Reads <code>artranr</code> sequentially, summing non-deleted transaction amounts (<code>atamtr</code>) to display on <code>AR101S3</code>.</p> </li> <li> <p>Date Handling:</p> <ul> <li>The program handles Y2K compliance using <code>y2kcen</code> (century) and <code>y2kcmp</code> (comparison year).</li> <li>Subroutines <code>@dte1</code> and <code>@dte2</code> convert between Gregorian and Julian dates for due date calculations.</li> <li>The <code>dtedit</code> subroutine validates dates, checking for valid months, days, and leap years.</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>New transactions are added to <code>artran</code> (<code>*in50</code>).</li> <li>Existing transactions are updated in <code>artran</code> (<code>*in51</code>).</li> <li>Deleted records are marked with <code>atdel = 'D'</code> or cleared (<code>' '</code>).</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>Writes to <code>ar101s1</code>, <code>ar101s2</code>, or <code>ar101s3</code> based on the active screen and mode, displaying fields like sequence number, company, customer, invoice number, amount, dates, and G/L accounts.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R transaction entry:</p> <ol> <li>Transaction Types:</li> <li> <p>Transactions must be either invoices (<code>I</code>) or adjustments (<code>J</code>). Invalid types trigger error <code>msg(3)</code>.</p> </li> <li> <p>Sequence Number:</p> </li> <li>Each transaction requires a unique sequence number. Duplicates trigger <code>msg(7)</code>.</li> <li> <p>Sequence numbers increment by 10 for new transactions.</p> </li> <li> <p>Company Validation:</p> </li> <li>Company number (<code>co</code>) must exist in <code>arcont</code>. Invalid companies trigger <code>msg(9)</code>.</li> <li> <p>Debit (<code>codr</code>) and credit (<code>cocr</code>) companies must also exist in <code>arcont</code> (<code>msg(22)</code>, <code>msg(21)</code>).</p> </li> <li> <p>Customer Validation:</p> </li> <li>Customer number (<code>cust</code>) must exist in <code>arcust</code> and not be deleted (<code>ardel = 'D'</code>). Invalid customers trigger <code>msg(10)</code>.</li> <li>If customer is zero, displays <code>msg(25)</code> (\"MISCELLANEOUS CASH\").</li> <li> <p>Inter-company customers are flagged with <code>iccd = 'IC'</code>.</p> </li> <li> <p>Invoice Number:</p> </li> <li>Invoice number (<code>inv#</code>) must be non-zero (<code>msg(27)</code>).</li> <li>For invoices (<code>I</code>), the invoice must not already exist in <code>ardetl</code> (<code>msg(6)</code>).</li> <li> <p>For adjustments (<code>J</code>), the referenced invoice must exist in <code>ardetl</code> (<code>msg(23)</code>).</p> </li> <li> <p>Amount:</p> </li> <li> <p>Transaction amount (<code>amt</code>) must be non-zero (<code>msg(11)</code>).</p> </li> <li> <p>Transaction Date:</p> </li> <li>Must be valid (checked by <code>dtedit</code>). Invalid dates trigger <code>msg(13)</code>.</li> <li> <p>If zero, defaults to the current date (<code>udate</code>).</p> </li> <li> <p>Due Date:</p> </li> <li>For invoices, due date (<code>dudt</code>) is calculated based on terms code (<code>term</code>) or defaults to 30 days.</li> <li>Must be valid and not earlier than the transaction date (<code>msg(16)</code>).</li> <li> <p>Terms code must exist in <code>gstabl</code> (<code>msg(17)</code>).</p> </li> <li> <p>Salesman:</p> </li> <li>Salesman number (<code>sls</code>) defaults from <code>arcust</code> (<code>arsls#</code>) if not provided.</li> <li> <p>Must exist in <code>gstabl</code> (<code>msg(18)</code>).</p> </li> <li> <p>G/L Accounts:</p> <ul> <li>Debit (<code>gldr</code>) and credit (<code>glcr</code>) accounts must exist in <code>glmast</code> and not be deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>) (<code>msg(15)</code>, <code>msg(14)</code>).</li> <li>Defaults are set from <code>arcont</code> (<code>acargl</code>, <code>acslgl</code>) or inter-company number (<code>arintr</code>).</li> </ul> </li> <li> <p>Y2K Compliance:</p> <ul> <li>Dates are adjusted for century using <code>y2kcen</code> and <code>y2kcmp</code>.</li> <li>Julian date conversions ensure accurate due date calculations.</li> </ul> </li> <li> <p>Deletion Handling:</p> <ul> <li>Deleted transactions are marked with <code>atdel = 'D'</code> and flagged with <code>msg(5)</code>.</li> <li>Inactive G/L accounts are treated as deleted (per modification <code>JB01</code>).</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Validation errors set <code>*in90</code>, display an error message, and redisplay <code>AR101S2</code> for correction.</li> <li>Messages are stored in the <code>msg</code> array (e.g., <code>msg(1)</code> to <code>msg(44)</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>ar101d (Workstation File):</li> <li>Screen file for user interaction, with formats <code>AR101S1</code>, <code>AR101S2</code>, and <code>AR101S3</code>.</li> <li> <p>Uses Profound UI handler for rendering.</p> </li> <li> <p>artran (Update File, <code>UF A</code>):</p> </li> <li>A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li>Stores transaction details (e.g., <code>atco</code>, <code>atcust</code>, <code>atinv#</code>, <code>atamt</code>, <code>atdate</code>).</li> <li> <p>Used for adding (<code>*in50</code>) and updating (<code>*in51</code>) transactions.</p> </li> <li> <p>artranr (Input File, <code>IF</code>):</p> </li> <li>Read-only A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li> <p>Used to retrieve sequence numbers and calculate totals.</p> </li> <li> <p>arcust (Input File, <code>IF</code>):</p> </li> <li>Customer master file (384 bytes, 8-byte key at position 2).</li> <li> <p>Contains customer data (e.g., <code>arname</code>, <code>arsls#</code>, <code>arterm</code>, <code>arintr</code>).</p> </li> <li> <p>arcont (Input File, <code>IF</code>):</p> </li> <li>A/R control file (256 bytes, 2-byte key at position 2).</li> <li> <p>Stores company details (e.g., <code>acname</code>, <code>acargl</code>, <code>acslgl</code>, <code>acdsgl</code>, <code>accsgl</code>).</p> </li> <li> <p>glmast (Input File, <code>IF</code>):</p> </li> <li>General ledger master file (256 bytes, 11-byte key at position 2).</li> <li> <p>Contains G/L account details (e.g., <code>gldesc</code>, <code>gldel</code>).</p> </li> <li> <p>ardetl (Input File, <code>IF</code>):</p> </li> <li>A/R detail file (128 bytes, 18-byte key at position 2).</li> <li> <p>Stores detailed A/R records (e.g., <code>adamt</code>, <code>addudt</code>, <code>adterm</code>, <code>adrfiv</code>).</p> </li> <li> <p>gstabl (Input File, <code>IF</code>):</p> </li> <li>General system table (256 bytes, 12-byte key at position 2).</li> <li>Contains terms and salesman data (e.g., <code>tbnetd</code>, <code>tbprxd</code>).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR101</code> RPGLE program does not explicitly call any external programs. All processing is handled within the program using subroutines (e.g., <code>s1</code>, <code>s2add</code>, <code>s2upd</code>, <code>s2edit</code>, <code>clcdue</code>, <code>invgl</code>, <code>rdtran</code>, <code>totals</code>, <code>dtedit</code>, <code>@dte1</code>, <code>@dte2</code>, <code>rdcust</code>, <code>tmdatp</code>, <code>tmdatn</code>).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR101</code> RPGLE program, called from the OCL program, provides a user interface for entering and updating A/R transactions (invoices and adjustments). It enforces strict business rules for data validation, including checks on company, customer, invoice, amount, dates, salesman, and G/L accounts. The program uses multiple files (<code>artran</code>, <code>artranr</code>, <code>arcust</code>, <code>arcont</code>, <code>glmast</code>, <code>ardetl</code>, <code>gstabl</code>) to retrieve and store data, and handles Y2K-compliant date calculations. No external programs are called, and all logic is contained within subroutines. The program\u2019s robust error handling ensures data integrity, with clear error messages guiding users to correct invalid inputs.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/","title":"AR111 RPG36","text":"<p>The provided document, <code>AR111.rpg36.txt</code>, is an RPG II program for the IBM System/36 environment, called from the main OCL program (<code>AR101.ocl36.txt</code>) to edit and validate Accounts Receivable (A/R) transactions. It processes sorted transactions from the <code>AR111S</code> file, validates them against various master files, and produces a printed report detailing the results, including errors and totals. Below, I will explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#process-steps-of-the-ar111-rpg-program","title":"Process Steps of the AR111 RPG Program","text":"<p>The <code>AR111</code> program validates A/R transactions (invoices and adjustments) and generates a report to highlight valid transactions, errors, and totals. It operates in a batch mode, reading from the sorted transaction file <code>AR111S</code> and updating the <code>ARTRAN</code> file. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Level 2 - L2):</li> <li>At the start of processing for each company (<code>ATCO</code>, Level 2 control break), the program:<ul> <li>Captures the current date and time using <code>TIME</code> and <code>MOVELTIMDAT</code> operations, storing them in <code>TIMDAT</code>, <code>TIME</code>, and <code>DATE</code>.</li> <li>Resets the page number (<code>PAGE</code>) to zero.</li> <li>Chains to the <code>ARCONT</code> file using <code>ATCO</code> to retrieve company details (e.g., <code>ACNAME</code>). If not found, sets indicator <code>99</code>.</li> </ul> </li> <li> <p>Prints report headers, including company name, date, time, and column headings for the transaction edit report.</p> </li> <li> <p>Read and Process Transactions:</p> </li> <li>Reads records from the sorted input file <code>AR111S</code> (300 bytes, 3-byte key).</li> <li>For each transaction record in <code>ARTRAN</code> (matched with <code>AR111S</code> via <code>E AR111S ARTRAN</code>), performs validations and calculations.</li> <li> <p>If the record is marked as deleted (<code>ATDEL = 'D'</code>), it skips further processing.</p> </li> <li> <p>Validation Subroutines:</p> </li> <li>Customer Validation:<ul> <li>Chains to <code>ARCUST</code> using the customer key (<code>ATCOCU</code>, company + customer number). If not found, sets indicator <code>21</code> and marks an error (<code>*in29</code>).</li> <li>Compares salesman number (<code>ATSLS</code>) with the customer\u2019s salesman (<code>ARSLS#</code>). If different, sets indicator <code>63</code>.</li> </ul> </li> <li>Credit G/L Account Validation:<ul> <li>If the credit G/L account (<code>ATGLCR</code>) is non-zero, constructs a G/L key (<code>ATGL</code>) using the credit company (<code>ATCOCR</code>) and account number.</li> <li>Calls the <code>GETGL</code> subroutine to validate against <code>GLMAST</code>. If the account is not found, deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets indicator <code>22</code> and marks an error (<code>*in29</code>).</li> <li>Compares <code>ATGLCR</code> with the sales G/L account (<code>ACSLGL</code>) from <code>ARCONT</code>. If equal, sets indicator <code>60</code>.</li> </ul> </li> <li>Debit G/L Account Validation:<ul> <li>If the debit G/L account (<code>ATGLDR</code>) is non-zero, constructs a G/L key using the debit company (<code>ATCODR</code>) and account number.</li> <li>Calls <code>GETGL</code> to validate against <code>GLMAST</code>. If not found, deleted, or inactive, sets indicator <code>22</code> and marks an error (<code>*in29</code>).</li> <li>Compares <code>ATGLDR</code> with the A/R G/L account (<code>ACARGL</code>) from <code>ARCONT</code>. If equal, sets indicator <code>61</code>.</li> </ul> </li> <li>Terms Code Validation:<ul> <li>If the terms code (<code>ATTERM</code>) is non-zero, constructs a key (<code>TRMKEY</code>) using <code>'ARTERM'</code> and the terms code.</li> <li>Chains to <code>GSTABL</code>. If not found, sets indicator <code>26</code> and marks an error (<code>*in29</code>).</li> </ul> </li> <li> <p>Invoice/Adjustment Validation:</p> <ul> <li>Builds an A/R detail key (<code>KEY18</code>) using company, customer, invoice number (<code>ATINV#</code>), and type (<code>'I00'</code> for invoices).</li> <li>Chains to <code>ARDETL</code>. If found, calculates the invoice date (<code>INVDAT</code>) and checks the transaction type:</li> <li>For invoices (<code>ATTYPE = 'I'</code>), if the invoice exists and the amount is non-zero, sets indicators <code>27</code> and <code>29</code> (duplicate invoice error).</li> <li>For adjustments (<code>ATTYPE = 'J'</code>), if the invoice does not exist, sets indicator <code>30</code> (invoice not found warning).</li> <li>Validates transaction type. If not <code>I</code> or <code>J</code>, sets indicators <code>25</code> and <code>29</code> (invalid type error).</li> <li>Checks if the transaction amount (<code>ATAMT</code>) is zero, setting indicator <code>73</code>.</li> </ul> </li> <li> <p>Transaction Processing:</p> </li> <li>Invoice Processing (<code>ATTYPE = 'I'</code>):<ul> <li>If the transaction is an invoice and no errors exist (<code>*in27</code> off), processes it as valid.</li> <li>If errors exist, skips to the <code>END</code> tag.</li> </ul> </li> <li>Adjustment Processing (<code>ATTYPE = 'J'</code>):<ul> <li>Validates that the type is <code>J</code>. If not <code>I</code> or <code>J</code>, sets error indicators <code>25</code> and <code>29</code> and skips to <code>END</code>.</li> </ul> </li> <li> <p>Updates the <code>ARTRAN</code> file with an error flag (<code>'E'</code>) if any validation errors occur (<code>*in29</code>), otherwise clears the flag.</p> </li> <li> <p>Totals Calculation:</p> </li> <li>For A/R detail records (<code>*in34</code> on):<ul> <li>Calculates prior month balance (<code>ADAMT - ADPART</code>).</li> <li>Calculates current month balance (<code>ARLEFT = ADAMT - ADPAY</code>).</li> <li>Adds <code>ARLEFT</code> to total invoices (<code>TOTINV</code>).</li> </ul> </li> <li>Adds transaction amount (<code>ATAMT</code>) to total A/R (<code>TOTAR</code>).</li> <li> <p>Accumulates net change to A/R (<code>NETCHG</code>) by adding <code>ATAMT</code>.</p> </li> <li> <p>Report Generation:</p> </li> <li>Prints transaction details for each record, including:<ul> <li>Sequence number (<code>ATKEY</code>), customer number (<code>ATCUST</code>), customer name (<code>ARNAME</code>), invoice number (<code>ATINV#</code>), invoice amount (<code>ARLEFT</code>), invoice date (<code>INVDAT</code>), transaction amount (<code>ATAMT</code>), transaction date (<code>ATDATE</code>), type (<code>INVOICE</code>, <code>ADJUST</code>, or <code>CREDIT</code>), description (<code>ATDESC</code>), reference invoice (<code>ATRFIV</code>), G/L debit/credit accounts, terms, due date, and salesman.</li> </ul> </li> <li>Prints error messages for specific conditions:<ul> <li>Customer not found (<code>*in21</code>): \"CUSTOMER REC. NOT FOUND\".</li> <li>G/L account not found/deleted/inactive (<code>*in22</code>): \"GL ACCOUNT NOT FOUND\".</li> <li>Duplicate invoice (<code>*in27</code>): \"DUPLICATE INVOICE\".</li> <li>Invoice not found for adjustment (<code>*in30</code>): \"INVOICE REC. NOT FOUND\".</li> <li>Invalid transaction type (<code>*in25</code>): \"INVALID TRANS TYPE\".</li> <li>Invalid terms code (<code>*in26</code>): \"INVALID TERMS CODE\".</li> </ul> </li> <li> <p>At the end of processing (<code>LR</code> indicator), prints totals:</p> <ul> <li>Total invoices (<code>TOTINV</code>) for invoices only (<code>*in33</code> off).</li> <li>Total A/R transactions (<code>TOTAR</code>).</li> <li>Net change to A/R (<code>NETCHG</code>).</li> </ul> </li> <li> <p>End of Processing:</p> </li> <li>Updates the <code>ARTRAN</code> file with validated records, marking errors where applicable.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R transaction editing:</p> <ol> <li>Customer Validation:</li> <li>Customer number (<code>ATCUST</code>) combined with company (<code>ATCO</code>) must exist in <code>ARCUST</code>. If not, an error is reported.</li> <li> <p>Salesman number (<code>ATSLS</code>) is compared with the customer\u2019s salesman (<code>ARSLS#</code>) for consistency.</p> </li> <li> <p>G/L Account Validation:</p> </li> <li>Credit G/L account (<code>ATGLCR</code>) and debit G/L account (<code>ATGLDR</code>) must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL = 'D'</code>) or inactive (<code>GLDEL = 'I'</code>). Invalid accounts trigger an error.</li> <li> <p>Credit account is compared with the sales G/L account (<code>ACSLGL</code>), and debit account with the A/R G/L account (<code>ACARGL</code>) for default validation.</p> </li> <li> <p>Terms Code Validation:</p> </li> <li> <p>Terms code (<code>ATTERM</code>) must exist in <code>GSTABL</code> under the <code>ARTERM</code> key. Invalid terms trigger an error.</p> </li> <li> <p>Transaction Type:</p> </li> <li>Transaction type (<code>ATTYPE</code>) must be <code>I</code> (invoice) or <code>J</code> (adjustment). Invalid types trigger an error.</li> <li> <p>Invoices require a non-zero amount (<code>ATAMT</code>).</p> </li> <li> <p>Invoice Validation:</p> </li> <li>For invoices (<code>I</code>), the invoice must not already exist in <code>ARDETL</code> (duplicate check). If it exists and the amount is non-zero, an error is reported.</li> <li> <p>For adjustments (<code>J</code>), the referenced invoice must exist in <code>ARDETL</code>. If not, a warning is issued.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors (e.g., invalid customer, G/L account, terms, or duplicate invoice) set indicator <code>29</code>, mark the <code>ARTRAN</code> record with <code>'E'</code>, and print an error message.</li> <li> <p>Warnings (e.g., invoice not found for adjustments) are printed but do not mark the record as an error.</p> </li> <li> <p>Totals:</p> </li> <li>Tracks total invoices (<code>TOTINV</code>), total A/R transactions (<code>TOTAR</code>), and net change to A/R (<code>NETCHG</code>).</li> <li> <p>Prior and current month balances are calculated for A/R detail records.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces a detailed report with headers, transaction details, errors/warnings, and final totals.</li> <li>Errors and warnings are clearly marked with <code>****</code> and descriptive messages.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>AR111S (Input File, <code>IR</code>):</li> <li>Sorted A/R transaction file (300 bytes, 3-byte key).</li> <li> <p>Provides input transactions for validation.</p> </li> <li> <p>ARTRAN (Update File, <code>UP</code>):</p> </li> <li>A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li>Stores transaction details (e.g., <code>ATCO</code>, <code>ATCUST</code>, <code>ATINV#</code>, <code>ATAMT</code>, <code>ATDATE</code>).</li> <li> <p>Updated with error flags (<code>'E'</code>) for invalid records.</p> </li> <li> <p>ARCUST (Input File, <code>IC</code>):</p> </li> <li>Customer master file (384 bytes, 8-byte key at position 2).</li> <li> <p>Contains customer data (e.g., <code>ARNAME</code>, <code>ARSLS#</code>, <code>ARTERM</code>).</p> </li> <li> <p>ARDETL (Input File, <code>IC</code>):</p> </li> <li>A/R detail file (128 bytes, 18-byte key at position 2).</li> <li> <p>Stores detailed A/R records (e.g., <code>ADAMT</code>, <code>ADDUDT</code>, <code>ADTERM</code>, <code>ADINV#</code>).</p> </li> <li> <p>GLMAST (Input File, <code>IC</code>):</p> </li> <li>General ledger master file (256 bytes, 11-byte key at position 2).</li> <li> <p>Contains G/L account details (e.g., <code>GLDEL</code>).</p> </li> <li> <p>ARCONT (Input File, <code>IC</code>):</p> </li> <li>A/R control file (256 bytes, 2-byte key at position 2).</li> <li> <p>Stores company details (e.g., <code>ACNAME</code>, <code>ACARGL</code>, <code>ACSLGL</code>, <code>ACCSGL</code>).</p> </li> <li> <p>GSTABL (Input File, <code>IC</code>):</p> </li> <li>General system table (256 bytes, 12-byte key at position 2).</li> <li> <p>Contains terms data (e.g., <code>TERMSD</code>).</p> </li> <li> <p>PRINT (Output File, <code>O</code>):</p> </li> <li>Printer file (164 bytes).</li> <li>Generates the transaction edit report.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR111</code> RPG program does not explicitly call any external programs. All processing is handled within the program, primarily through the <code>GETGL</code> subroutine for G/L account validation.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#summary","title":"Summary","text":"<p>The <code>AR111</code> RPG program, called from the main OCL program, validates sorted A/R transactions from <code>AR111S</code>, ensuring compliance with business rules for customers, G/L accounts, terms, and invoice/adjustment data. It updates the <code>ARTRAN</code> file with error flags for invalid records and produces a detailed printed report listing transactions, errors, warnings, and totals. The program uses eight files (<code>AR111S</code>, <code>ARTRAN</code>, <code>ARCUST</code>, <code>ARDETL</code>, <code>GLMAST</code>, <code>ARCONT</code>, <code>GSTABL</code>, <code>PRINT</code>) and relies on the <code>GETGL</code> subroutine for G/L validation. No external programs are called, and the program enforces strict validation to maintain A/R data integrity.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/","title":"Summary AR101 OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#list-of-use-cases-implemented-by-the-ar101ar111-program-call-stack","title":"List of Use Cases Implemented by the AR101/AR111 Program Call Stack","text":"<p>The call stack, consisting of <code>AR101.ocl36.txt</code> (OCL script), <code>AR101.rpgle.txt</code> (RPGLE program for transaction entry), and <code>AR111.rpg36.txt</code> (RPG II program for transaction editing), implements the following primary use case:</p> <ol> <li>Accounts Receivable Transaction Entry and Validation:</li> <li>This use case encompasses the entry, validation, and reporting of A/R transactions (invoices and adjustments). The OCL script orchestrates the process by initializing the environment, sorting transactions, and calling <code>AR101</code> for interactive entry and <code>AR111</code> for batch validation and reporting. Users can add or update transactions via a workstation interface, with validations ensuring data integrity, followed by a printed edit report summarizing transactions and errors.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#function-requirement-document-ar-transaction-processing-function","title":"Function Requirement Document: A/R Transaction Processing Function","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#ar-transaction-processing-function-requirements","title":"A/R Transaction Processing Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#purpose","title":"Purpose","text":"<p>The A/R Transaction Processing function enables the entry, validation, and reporting of Accounts Receivable (A/R) transactions (invoices and adjustments) in a batch environment, replacing the interactive screen-based input of <code>AR101.rpgle</code> with programmatic input handling. It processes input data, validates it against business rules, updates transaction records, and generates a report summarizing valid transactions, errors, and totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Transaction Data:</li> <li>Sequence number (<code>seq</code>, numeric)</li> <li>Company number (<code>co</code>, 2-digit numeric)</li> <li>Customer number (<code>cust</code>, 6-digit numeric)</li> <li>Invoice number (<code>inv#</code>, 7-digit numeric)</li> <li>Transaction type (<code>type</code>, 1-character, <code>I</code> for invoice, <code>J</code> for adjustment)</li> <li>Transaction amount (<code>amt</code>, 9.2 decimal)</li> <li>Transaction date (<code>date</code>, 6-digit MMDDYY)</li> <li>Due date (<code>dudt</code>, 6-digit MMDDYY)</li> <li>Terms code (<code>term</code>, 2-digit numeric)</li> <li>Salesman number (<code>sls</code>, 2-digit numeric)</li> <li>Debit G/L account (<code>gldr</code>, 8-digit numeric)</li> <li>Credit G/L account (<code>glcr</code>, 8-digit numeric)</li> <li>Debit company (<code>codr</code>, 2-digit numeric)</li> <li>Credit company (<code>cocr</code>, 2-digit numeric)</li> <li>Transaction description (<code>desc</code>, 25-character)</li> <li>Reference invoice number (<code>rfiv</code>, 7-digit numeric, for adjustments)</li> <li>Files:</li> <li>Customer master (<code>ARCUST</code>): Customer data (name, salesman, terms, inter-company number).</li> <li>A/R control (<code>ARCONT</code>): Company data (name, A/R G/L, sales G/L, cash G/L).</li> <li>General ledger master (<code>GLMAST</code>): G/L account details (description, deletion/inactive status).</li> <li>A/R detail (<code>ARDETL</code>): A/R records (amount, due date, terms, salesman).</li> <li>General system table (<code>GSTABL</code>): Terms and salesman data.</li> <li>A/R transaction file (<code>ARTRAN</code>): Transaction storage.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated ARTRAN File: Transactions marked as valid or with error flag (<code>'E'</code>).</li> <li>Transaction Edit Report: Lists transactions with details (sequence, customer, invoice, amount, date, type, etc.), errors, warnings, and totals (total invoices, total A/R, net change to A/R).</li> <li>Error/Warning Messages: Array of validation errors (e.g., invalid customer, duplicate invoice).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Retrieve current date/time for reporting.</li> <li>Initialize counters (<code>PAGE</code>, <code>TOTINV</code>, <code>TOTAR</code>, <code>NETCHG</code>) to zero.</li> <li> <p>Validate company number (<code>co</code>) against <code>ARCONT</code> to retrieve company name.</p> </li> <li> <p>Transaction Validation:</p> </li> <li> <p>For each transaction record:</p> <ul> <li>Sequence Number: Ensure unique (<code>ARTRAN</code> chain). If duplicate, return error.</li> <li>Customer: Validate <code>co</code> + <code>cust</code> exists in <code>ARCUST</code>, not deleted. If zero, treat as miscellaneous cash.</li> <li>Invoice Number: Non-zero. For invoices (<code>I</code>), check non-existence in <code>ARDETL</code> (duplicate check). For adjustments (<code>J</code>), check existence in <code>ARDETL</code>.</li> <li>Transaction Type: Must be <code>I</code> (invoice) or <code>J</code> (adjustment).</li> <li>Amount: Non-zero.</li> <li>Transaction Date: Validate format (MMDDYY). If zero, default to current date. Adjust for Y2K compliance (century calculation).</li> <li>Due Date (Invoices): If provided, validate format and ensure not earlier than transaction date. If terms provided, calculate due date (see calculations). If neither, default to 30 days.</li> <li>Terms Code: If non-zero, validate against <code>GSTABL</code>.</li> <li>Salesman: If non-zero, validate against <code>GSTABL</code>. Default from <code>ARCUST</code> if zero.</li> <li>G/L Accounts: Validate <code>gldr</code> and <code>glcr</code> against <code>GLMAST</code> (not deleted/inactive). Default to <code>ACARGL</code> (A/R G/L) or <code>ACSLGL</code> (sales G/L) if zero, or inter-company number if applicable.</li> <li>Debit/Credit Companies: Validate <code>codr</code> and <code>cocr</code> against <code>ARCONT</code>.</li> </ul> </li> <li> <p>Calculations:</p> </li> <li>Due Date (Invoices):<ul> <li>If terms code exists, retrieve net days (<code>tbnetd</code>) or prox days (<code>tbprxd</code>) from <code>GSTABL</code>.</li> <li>For net days: Add <code>tbnetd</code> to transaction date (Julian conversion: add days, convert back to Gregorian).</li> <li>For prox days: Set due date to <code>tbprxd</code> of the next month.</li> <li>If no terms, use customer\u2019s terms (<code>ARTERM</code>) or default to 30 days.</li> </ul> </li> <li>Y2K Date Handling:<ul> <li>If year &lt; comparison year (<code>y2kcmp</code>), add 1 to century (<code>y2kcen</code>). Otherwise, use <code>y2kcen</code>.</li> <li>Convert dates to 8-digit format (CCYYMMDD) for storage.</li> </ul> </li> <li> <p>Totals:</p> <ul> <li>For A/R detail records: Prior month balance = <code>ADAMT - ADPART</code>, Current month balance (<code>ARLEFT</code>) = <code>ADAMT - ADPAY</code>.</li> <li>Total invoices (<code>TOTINV</code>) += <code>ARLEFT</code> (invoices only).</li> <li>Total A/R (<code>TOTAR</code>) += <code>ATAMT</code>.</li> <li>Net change to A/R (<code>NETCHG</code>) += <code>ATAMT</code>.</li> </ul> </li> <li> <p>Transaction Update:</p> </li> <li>If no errors, write/update <code>ARTRAN</code> with transaction data.</li> <li> <p>If errors, mark <code>ARTRAN</code> record with <code>'E'</code> flag.</p> </li> <li> <p>Report Generation:</p> </li> <li>Generate report with headers (company, date, time, page).</li> <li>For each transaction, print: sequence, customer number/name, invoice number, amount, date, type (invoice/adjustment/credit), description, reference invoice, G/L accounts, terms, due date, salesman.</li> <li>Print errors/warnings: customer not found, G/L not found, duplicate invoice, invoice not found (adjustments), invalid type, invalid terms.</li> <li>At end, print totals: total invoices, total A/R, net change to A/R.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types: Must be <code>I</code> (invoice) or <code>J</code> (adjustment).</li> <li>Sequence Number: Must be unique in <code>ARTRAN</code>.</li> <li>Company: Must exist in <code>ARCONT</code>. Debit/credit companies (<code>codr</code>, <code>cocr</code>) must also exist.</li> <li>Customer: Must exist in <code>ARCUST</code>, not deleted. Zero allowed for miscellaneous cash.</li> <li>Invoice Number: Non-zero. Invoices must not exist in <code>ARDETL</code>; adjustments must reference existing invoices.</li> <li>Amount: Non-zero.</li> <li>Transaction Date: Valid MMDDYY format, defaults to current date if zero.</li> <li>Due Date: For invoices, valid and not earlier than transaction date. Calculated from terms or defaults to 30 days.</li> <li>Terms Code: If non-zero, must exist in <code>GSTABL</code>.</li> <li>Salesman: If non-zero, must exist in <code>GSTABL</code>. Defaults from <code>ARCUST</code>.</li> <li>G/L Accounts: Must exist in <code>GLMAST</code>, not deleted (<code>'D'</code>) or inactive (<code>'I'</code>). Defaults from <code>ARCONT</code> or inter-company number.</li> <li>Error Handling: Invalid data marks <code>ARTRAN</code> with <code>'E'</code> and includes error message in report.</li> <li>Reporting: Detailed transaction report with errors/warnings and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files: <code>ARTRAN</code> (update), <code>AR111S</code> (sorted input), <code>ARCUST</code>, <code>ARDETL</code>, <code>GLMAST</code>, <code>ARCONT</code>, <code>GSTABL</code> (input), <code>PRINT</code> (output).</li> <li>No External Programs: All logic is self-contained.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#notes","title":"Notes","text":"<ul> <li>Replaces interactive screen input (<code>AR101D</code>) with programmatic input.</li> <li>Maintains Y2K compliance for date handling.</li> <li>Report format mirrors <code>AR111</code> output for consistency.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/","title":"AR200 RPG36","text":"<p>The provided document, <code>AR200.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. It processes accounts receivable (A/R) transactions, updates customer and detail files, generates journal entries, and prints a transaction posting register. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#process-steps-of-the-rpg-program-ar200","title":"Process Steps of the RPG Program (AR200)","text":"<p>The <code>AR200</code> program processes A/R transactions (invoices, adjustments, payments, and miscellaneous cash) from a sorted transaction file, updates relevant files, and produces a detailed posting register. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARTRAN</code> (transactions), <code>ARDETL</code> (A/R details), <code>ARCUST</code> (customer master), <code>ARCONT</code> (A/R control).</li> <li>Output: <code>ARHIST</code> (A/R history), <code>ARDIST</code> (distribution for journal entries), <code>REPORT</code> (primary posting register), <code>REPORTP</code> (Pittsburgh copy).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure for journal date (<code>JRNLDT</code>, positions 100\u2013105), user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), journal type (<code>SJTYPE</code>), journal number (<code>SJ##</code>), and Y2K variables (<code>Y2KCEN</code>, <code>Y2KCMP</code>).</li> <li><code>AGE</code>: Array for aged customer balances (5 periods, 9.2 format).</li> <li><code>MN</code>: Month names array (January\u2013December).</li> </ul> </li> <li> <p>Initialization (Level L3):</p> <ul> <li>Clears accumulators (<code>Z2</code>, <code>ZERO6</code>, <code>ZERO7</code>, <code>ZERO9</code>) and sets constants (<code>ONE1</code>, <code>ONE2</code>).</li> <li>Initializes page counters (<code>PAGE</code>, <code>PAGE2</code>, <code>PAGE4</code>) to 0.</li> <li>Chains to <code>ARCONT</code> by company (<code>ATCO</code>) to retrieve journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>). If found (<code>N91</code>), sets <code>AR#</code> and <code>SL#</code>; if <code>SJ##</code> is non-zero, uses it for <code>SL#</code>.</li> <li>Clears indicators <code>05</code>, <code>06</code>.</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARTRAN</code> records sequentially, controlled by level breaks (<code>L1</code>, <code>L2</code>, <code>L3</code>):<ul> <li>L3 (Company Change): Resets accumulators and retrieves journal numbers.</li> <li>L2 (Inter-Company Change): Checks if <code>ATICCD = 'IC'</code> (indicator <code>92</code> for inter-company customers).</li> <li>L1 (Transaction Type Change): Resets transaction accumulators (<code>NETCHG</code>, <code>INVAMT</code>, <code>ADJAMT</code>, <code>TOTREC</code>, <code>TOTMIS</code>, <code>TOTINV</code>) and clears indicators <code>71</code>, <code>72</code>, <code>73</code>.</li> </ul> </li> <li> <p>Executes one-time setup (<code>ONETIM</code>) if not already done (<code>N90</code>).</p> </li> <li> <p>One-Time Setup (<code>ONETIM</code>):</p> </li> <li>Captures system time (<code>TIMEOF</code>) and date (<code>TIMDAT</code>).</li> <li>Converts journal date (<code>JRNLDT</code>) to YMD format (<code>JYMD</code>) with Y2K compliance:<ul> <li>If <code>JYR &gt;= Y2KCMP (80)</code>, uses <code>Y2KCEN (19)</code>; otherwise, increments <code>Y2KCEN</code> by 1.</li> <li>Builds 8-digit date (<code>JRNLD8</code>) in CCYYMMDD format.</li> </ul> </li> <li>Converts system date to YMD (<code>SYSDT8</code>) for reporting.</li> <li> <p>Sets indicator <code>90</code> to mark setup completion.</p> </li> <li> <p>Transaction Type Determination (<code>TRNSID</code>):</p> </li> <li>Clears indicators for transaction types (<code>10</code>, <code>20</code>, <code>30</code>, <code>40</code>, <code>50</code>, <code>31</code>, <code>32</code>, <code>37</code>, <code>15</code>, <code>81</code>, <code>12</code>).</li> <li>Converts transaction date (<code>ATDATE</code>) and due date (<code>ATDUDT</code>) to YMD format (<code>ATDAT8</code>, <code>ATDUD8</code>) with Y2K compliance.</li> <li>Compares invoice date to journal date if <code>LDRETL = 'R'</code> (sets indicator <code>65</code> if different).</li> <li>Identifies transaction type:<ul> <li><code>ATCOD = 'Y'</code> sets indicator <code>25</code> (COD invoice).</li> <li><code>ATTYPE = 'I'</code> sets <code>10</code> (invoice).</li> <li><code>ATTYPE = 'J'</code> sets <code>20</code> (adjustment).</li> <li><code>ATTYPE = 'P'</code> sets <code>30</code> (payment).</li> </ul> </li> <li>Sets journal type (<code>JRNTYP</code>): <code>SJ</code> for invoices/adjustments, <code>CR</code> for payments.</li> <li> <p>For COD invoices (<code>25</code>), skips further processing (<code>GOTO ENDTR</code>).</p> </li> <li> <p>Transaction Processing:</p> </li> <li>Invoice (<code>10</code>):<ul> <li>If miscellaneous billing (<code>16</code> and <code>86</code>), sets indicators <code>15</code>, <code>17</code>, clears <code>10</code>.</li> <li>If not already an adjustment (<code>N12</code>), executes <code>INVSUM</code>.</li> <li>If an adjustment (<code>12</code>), executes <code>ADJUST</code>.</li> </ul> </li> <li>Adjustment (<code>20</code>):<ul> <li>Executes <code>ADJUST</code>.</li> </ul> </li> <li>Payment (<code>30</code>):<ul> <li>If not miscellaneous (<code>N80</code>), executes <code>PAYMNT</code>.</li> <li>If miscellaneous (<code>80</code>), executes <code>MISC$$</code>.</li> </ul> </li> <li>Inter-Company Check:<ul> <li>If <code>ATICCD = 'IC'</code> (<code>92</code>), skips updates to <code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code> (only generates journal entries).</li> </ul> </li> <li>Checks <code>ARDETL</code> for existing invoice (<code>KEY18 = ATCOCU + ATINV# + 'I00'</code>):<ul> <li>If found (<code>39</code>) and payment (<code>30</code> or <code>20</code>), executes <code>PPDADD</code> and loops back (<code>GOTO AGNX</code>).</li> <li>If not found or invoice (<code>10</code>), proceeds to <code>UNIQUE</code>.</li> </ul> </li> <li> <p>Sets adjustment flag (<code>12</code>) if invoice starts with <code>9</code> (<code>ATINV1 = '9'</code>, indicator <code>31</code>).</p> </li> <li> <p>Invoice Summary (<code>INVSUM</code>):</p> </li> <li>Increments invoice count (<code>TOTINV</code>).</li> <li>Adds transaction amount (<code>ATAMT</code>) to <code>INVAMT</code>.</li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If found (<code>N99</code>), updates aged balance (<code>AGE,P</code>), total due (<code>ARTOTD</code>), month-to-date (<code>ARMTD$</code>), year-to-date (<code>ARYTD$</code>).</li> <li>Sets indicator <code>40</code> for customer update.</li> </ul> </li> <li> <p>Writes to <code>ARDETL</code> and <code>ARHIST</code> (see output specs).</p> </li> <li> <p>Prepaid Invoice Add (<code>PPDADD</code>):</p> </li> <li>Creates an empty invoice record for prepaid transactions (indicator <code>61</code>).</li> <li> <p>Writes to <code>ARDETL</code> and <code>ARHIST</code> with zero amounts.</p> </li> <li> <p>Adjustment Processing (<code>ADJUST</code>):</p> </li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If not found or exists (<code>N39</code>, <code>N99</code>), sets indicators <code>40</code>, <code>50</code>.</li> <li>Updates <code>AGE,P</code>, <code>ARTOTD</code>, <code>ARMTD$</code>, <code>ARYTD$</code>.</li> </ul> </li> <li>Updates <code>ARDETL</code>:<ul> <li>Subtracts <code>ATAMT</code> from current month paid (<code>ADPAY</code>).</li> <li>Increments next sequence number (<code>ADNEXT</code>).</li> <li>Adds sales amount (<code>ATDSAL</code> to <code>ADDSAL</code>).</li> <li>Updates notification of difference (<code>ADNOD</code>) and reference invoice (<code>ADRFIV</code>) if blank/zero.</li> </ul> </li> <li>Writes to <code>ARDETL</code> and <code>ARHIST</code> (indicator <code>60</code>).</li> <li> <p>Increments <code>TOTINV</code>, adds <code>ATAMT</code> to <code>ADJAMT</code>.</p> </li> <li> <p>Payment Processing (<code>PAYMNT</code>):</p> </li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If not found or exists (<code>N39</code>, <code>N99</code>), updates <code>AGE,P</code>, <code>ARTOTD</code>, month-to-date paid (<code>ARM$PD</code>), year-to-date paid (<code>ARY$PD</code>), payment amount (<code>ARPYMT</code>), payment date (<code>ARPDAT</code>, <code>ARPDA8</code>).</li> </ul> </li> <li>Updates <code>ARDETL</code>:<ul> <li>Increments <code>ADNEXT</code>, adds <code>ATAMT</code> to <code>ADPAY</code>, updates <code>ADNOD</code>, <code>ADRFIV</code>.</li> </ul> </li> <li>Writes to <code>ARDETL</code> and <code>ARHIST</code> (indicator <code>60</code>).</li> <li>Increments <code>TOTINV</code>, accumulates totals:<ul> <li><code>TOTREC</code> (received), <code>TOTDIS</code> (discount), <code>ATCASH</code> (net cash = <code>ATAMT - ATDISC</code>), <code>TOTCAS</code> (total cash), <code>TOTARC</code> (A/R cash).</li> </ul> </li> <li> <p>Compares <code>ATAMT</code> to remaining balance (<code>ARLEFT</code>, sets <code>32</code>, <code>37</code>).</p> </li> <li> <p>Miscellaneous Cash (<code>MISC$$</code>):</p> <ul> <li>If finance charge (<code>ATDSFC = 'FIN CHG'</code>), chains to <code>ARCUST</code> and subtracts <code>ATAMT</code> from finance charges (<code>ARFIN$</code>).</li> <li>Adds <code>ATAMT</code> to <code>TOTCAS</code> (total cash) and <code>TOTMIS</code> (miscellaneous cash).</li> <li>Sets <code>ATCASH</code> to <code>ATAMT</code>.</li> </ul> </li> <li> <p>Final Totals (<code>FINTOT</code>):</p> <ul> <li>Calculates net change to A/R (<code>NETCHG = INVAMT + ADJAMT - TOTREC</code>).</li> <li>Writes final totals to <code>REPORT</code> and <code>REPORTP</code>.</li> </ul> </li> <li> <p>Output Operations:</p> <ul> <li>ARDIST: Writes journal entries for invoices (<code>I</code>), adjustments (<code>J</code>), payments (<code>P</code>), COD invoices (<code>I</code>), including customer, amount, G/L accounts, and dates.</li> <li>ARTRAN: Marks processed transactions with <code>P</code> (position 54).</li> <li>ARCUST: Updates customer balances, payment info, and aged amounts (indicator <code>40</code>).</li> <li>ARDETL: Adds/updates invoice, adjustment, payment, or prepaid records.</li> <li>ARHIST: Logs transaction history for invoices, adjustments, payments, and prepaids.</li> <li>ARCONT: Updates journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>) at company level break (L3).</li> <li>REPORT/REPORTP: Prints posting register with headers, invoice, adjustment, payment details, and totals.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices (<code>ATTYPE = 'I'</code>): Update customer balances, A/R details, and history; generate sales journal (<code>SJ</code>) entries.</li> <li>Adjustments (<code>ATTYPE = 'J'</code>): Adjust customer balances and A/R details; generate <code>SJ</code> entries.</li> <li>Payments (<code>ATTYPE = 'P'</code>): Reduce customer balances, update payment info, and generate cash receipts (<code>CR</code>) entries.</li> <li>COD Invoices (<code>ATCOD = 'Y'</code>): Skip standard processing, generate journal entries only.</li> <li> <p>Miscellaneous Cash (<code>80</code>): If finance charge (<code>FIN CHG</code>), reduce <code>ARFIN$</code>; otherwise, record as miscellaneous cash.</p> </li> <li> <p>Inter-Company Customers (<code>ATICCD = 'IC'</code>):</p> </li> <li> <p>Do not update <code>ARCUST</code>, <code>ARDETL</code>, or <code>ARHIST</code>; only generate journal entries in <code>ARDIST</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li>Converts transaction and due dates to YMD format (CCYYMMDD) with Y2K compliance (<code>Y2KCEN</code>, <code>Y2KCMP</code>).</li> <li> <p>Compares invoice date to journal date if <code>LDRETL = 'R'</code> to flag discrepancies (indicator <code>65</code>).</p> </li> <li> <p>Journal Numbers:</p> </li> <li>Increments <code>ACSLJ#</code> for invoices/adjustments (<code>10</code> or <code>20</code>, indicator <code>05</code>) if <code>SJ##</code> is zero.</li> <li>Increments <code>ACARJ#</code> for payments (<code>30</code>, indicator <code>06</code>).</li> <li> <p>Updates <code>ARCONT</code> with new journal numbers at company level break.</p> </li> <li> <p>Customer Updates:</p> </li> <li>Updates <code>ARCUST</code> for non-inter-company transactions: aged balances (<code>AGE</code>), total due (<code>ARTOTD</code>), payment info (<code>ARPYMT</code>, <code>ARPDAT</code>), and period totals (<code>ARMTD$</code>, <code>ARYTD$</code>, <code>ARM$PD</code>, <code>ARY$PD</code>).</li> <li> <p>Reduces finance charges (<code>ARFIN$</code>) for miscellaneous cash payments.</p> </li> <li> <p>A/R Detail Updates:</p> </li> <li>Adds new records for invoices, adjustments, payments, or prepaids.</li> <li> <p>Updates existing records with payments (<code>ADPAY</code>), sequence numbers (<code>ADNEXT</code>), sales amounts (<code>ADDSAL</code>), notification of difference (<code>ADNOD</code>), and reference invoice (<code>ADRFIV</code>).</p> </li> <li> <p>History Logging:</p> </li> <li> <p>Records all transactions (except inter-company) in <code>ARHIST</code> with details like company, customer, invoice, amount, and dates.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces two copies of the posting register (<code>REPORT</code>, <code>REPORTP</code>) with sections for invoices, adjustments, and payments, including totals for A/R applied, discounts, cash, and net change.</li> <li> <p>Includes headers with company name, date, time, user ID, workstation ID, and journal date.</p> </li> <li> <p>Prepaid Invoices:</p> </li> <li> <p>Creates empty invoice records in <code>ARDETL</code> and <code>ARHIST</code> for prepaid transactions with zero amounts.</p> </li> <li> <p>Error Handling:</p> <ul> <li>Chains to <code>ARCUST</code> and <code>ARDETL</code> to validate customer and invoice existence.</li> <li>Uses indicators (<code>39</code>, <code>99</code>, <code>50</code>) to handle missing or existing records.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARTRAN</code> (F-spec 0014): Transaction file (256 bytes, update mode), sorted input from <code>?9?AR201S</code>.    - <code>ARDETL</code> (0015): A/R detail file (128 bytes, update mode, keyed by company/customer/invoice, shared access).    - <code>ARCUST</code> (0016): Customer master file (384 bytes, update mode, keyed by company/customer, shared access).    - <code>ARCONT</code> (0017): A/R control file (256 bytes, update mode, keyed by company, shared access).</p> <ol> <li>Output Files:</li> <li><code>ARHIST</code> (0018): A/R history file (128 bytes, output mode).</li> <li><code>ARDIST</code> (0019): Distribution file (161 bytes, output mode) for journal entries.</li> <li><code>REPORT</code> (0020): Primary transaction posting register (164 bytes, printer file).</li> <li> <p><code>REPORTP</code> (0021): Pittsburgh copy of the register (164 bytes, printer file).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>ONETIM</code>: One-time setup for dates and system info. - <code>TRNSID</code>: Determines transaction type and converts dates. - <code>INVSUM</code>: Processes invoice summaries. - <code>PPDADD</code>: Adds prepaid invoice records. - <code>ADJUST</code>: Processes adjustments. - <code>PAYMNT</code>: Processes payments. - <code>MISC$$</code>: Handles miscellaneous cash. - <code>FINTOT</code>: Calculates final totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#notes","title":"Notes","text":"<ul> <li>Y2K Compliance: Uses <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) to handle century in dates, ensuring CCYYMMDD format.</li> <li>Inter-Company Logic: Explicitly skips A/R updates for <code>ATICCD = 'IC'</code>, focusing on journal entries.</li> <li>Modifications:</li> <li>4/20/05: Enhanced description field handling for cash receipts in <code>TEMGEN</code>.</li> <li>8/06/14: Changed printer names for paperless reporting, removed W. Conshohocken copy.</li> <li>Journal Types: <code>SJ</code> (sales journal) for invoices/adjustments, <code>CR</code> (cash receipts) for payments.</li> <li>File Access: Shared access (<code>DISP-SHR</code>) for <code>ARDETL</code>, <code>ARCUST</code>, <code>ARCONT</code> allows concurrent processing.</li> </ul> <p>If you have additional details (e.g., source for <code>AR210</code>, <code>AR211</code>, or file layouts), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/","title":"AR200P RPGLE","text":"<p>The provided document, <code>AR200P.rpgle.txt</code>, is an RPGLE (RPG IV) program used in an IBM AS/400 or iSeries environment, called from the OCL script <code>AR201P.ocl36.txt</code>. It handles the journal date prompt for accounts receivable (A/R) transaction posting, interacting with a workstation display file to collect and validate user input. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#process-steps-of-the-rpg-program-ar200p","title":"Process Steps of the RPG Program (AR200P)","text":"<p>The program <code>AR200P</code> is designed to prompt the user for a journal date, validate it, and confirm the input before allowing A/R transaction posting to proceed. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines a workstation display file <code>AR200PD</code> (renamed from <code>SCREEN</code> during conversion) as a <code>CF</code> (combined file) with a handler for a graphical interface (<code>PROFOUNDUI(HANDLER)</code>).</li> <li>Data structures and variables are initialized, including <code>kyjrdt</code> (journal date), <code>y2kcen</code> (century), <code>y2kcmp</code> (comparison year), and <code>msg</code> (error message array).</li> <li> <p>The program uses an information data structure (<code>@infds</code>) to capture screen status, such as function keys (<code>@vkey</code>).</p> </li> <li> <p>Main Loop (Screen Processing):</p> </li> <li>The program enters a <code>DO</code> loop (<code>dow @sfnex &lt;&gt; 'EJ'</code>) that continues until the exit condition (<code>EJ</code>) is met, indicating the user has completed or canceled the process.</li> <li> <p>The loop processes user interactions with two screen formats: <code>AR200PS1</code> (for entering the journal date) and <code>AR200PS2</code> (for confirming the date).</p> </li> <li> <p>Screen Selection Logic:</p> </li> <li> <p>The program uses a <code>CASEQ</code> structure to determine which screen to process based on <code>@sfid</code> (screen format identifier):</p> <ul> <li><code>@sfid = *blank</code>: Calls subroutine <code>$sblk</code> (initial blank screen setup).</li> <li><code>@sfid = 'S1'</code>: Calls subroutine <code>$s1</code> (processes journal date input screen).</li> <li><code>@sfid = 'S2'</code>: Calls subroutine <code>$s2</code> (processes confirmation screen).</li> </ul> </li> <li> <p>Initial Screen Setup (<code>$sblk</code>):</p> </li> <li>Clears variables (<code>kyjrdt</code>, <code>kyyn</code>, <code>msgout</code>) to initialize the process.</li> <li> <p>Sets <code>@sfnex</code> to <code>'S1'</code>, indicating the next screen to display is <code>AR200PS1</code> (journal date input).</p> </li> <li> <p>Display and Read Screen (<code>$xcpt</code> and Main Loop):</p> </li> <li>The <code>$xcpt</code> subroutine displays the next screen based on <code>@sfnex</code>:<ul> <li>If <code>@sfnex = 'S1'</code>, writes <code>AR200PS1</code>.</li> <li>If <code>@sfnex = 'S2'</code>, writes <code>AR200PS2</code>.</li> <li>Increments <code>@ccnt</code> (screen counter) and sets indicator <code>*in98</code> if the same screen is redisplayed (error condition).</li> </ul> </li> <li> <p>The main loop reads the screen:</p> <ul> <li>For <code>AR200PS1</code>, reads the journal date (<code>jrdate</code>) and sets <code>@sfid = 'S1'</code>.</li> <li>For <code>AR200PS2</code>, reads the confirmation flag (<code>yn</code>) and sets <code>@sfid = 'S2'</code>.</li> </ul> </li> <li> <p>Process Screen <code>AR200PS1</code> (<code>$s1</code>):</p> </li> <li>Checks the function key (<code>@vkey</code>):<ul> <li>If <code>0</code> (Enter key), calls <code>$s1ent</code> to validate the journal date.</li> <li>If <code>2</code> (command key, e.g., F3), calls <code>$s1ck</code> to handle exit.</li> </ul> </li> <li><code>$s1ent</code> (Enter key processing):<ul> <li>Moves <code>kyjrdt</code> to <code>mmddyy</code> and calls <code>@dtedt</code> to validate the date.</li> <li>If date is invalid (<code>*in79 = *on</code>), displays error message (<code>msgout = 'INVALID DATE'</code>) and redisplays <code>AR200PS1</code> (<code>*in50 = *on</code>).</li> <li>If valid, clears indicators (<code>clrind</code>), sets <code>@sfnex = 'S2'</code>, and moves to the confirmation screen.</li> </ul> </li> <li> <p><code>$s1ck</code> (Command key processing):</p> <ul> <li>If F3 (<code>*inkg = *on</code>), sets exit indicators (<code>*inu1</code>, <code>*inlr</code>) and <code>@sfnex = 'EJ'</code> to terminate the program.</li> </ul> </li> <li> <p>Process Screen <code>AR200PS2</code> (<code>$s2</code>):</p> </li> <li>Checks the function key (<code>@vkey</code>):<ul> <li>If <code>0</code> (Enter key), calls <code>$s2ent</code> to process confirmation.</li> <li>If <code>2</code> (command key), calls <code>$s2ck</code> to handle navigation or exit.</li> </ul> </li> <li><code>$s2ent</code> (Enter key processing):<ul> <li>If <code>kyyn &lt;&gt; 'Y'</code>, clears fields (<code>clrfld</code>) and returns to <code>AR200PS1</code> (<code>@sfnex = 'S1'</code>).</li> <li>If <code>kyyn = 'Y'</code>, sets <code>@sfnex = 'EJ'</code> to exit the program, indicating confirmation.</li> </ul> </li> <li> <p><code>$s2ck</code> (Command key processing):</p> <ul> <li>If F3 (<code>*inkg = *on</code>), sets exit indicators and <code>@sfnex = 'EJ'</code>.</li> <li>If another command key (e.g., F12, <code>ka</code>), returns to <code>AR200PS1</code> (<code>@sfnex = 'S1'</code>).</li> </ul> </li> <li> <p>Date Validation (<code>@dtedt</code>):</p> </li> <li> <p>Validates the journal date (<code>mmddyy</code>) in MMDDYY format:</p> <ul> <li>Breaks down the date into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Validates month (1\u201312).</li> <li>For February, checks leap year:</li> <li>Non-zero year: Divides year by 4 (multiply by 0.25) to check leap year.</li> <li>Century year: Combines century (<code>y2kcen</code>) and year, divides by 400 (multiply by 0.0025).</li> <li>Leap year allows up to 29 days; non-leap year allows 28.</li> <li>For other months, checks 30 or 31 days based on month (e.g., April, June, September, November = 30; others = 31).</li> <li>Sets <code>*in79</code> if the date is invalid.</li> </ul> </li> <li> <p>Clear Fields and Indicators:</p> </li> <li><code>clrfld</code>: Resets <code>kyjrdt</code>, <code>kyyn</code>, and <code>msgout</code>, and sets <code>@sfnex = 'S1'</code> for redisplay.</li> <li> <p><code>clrind</code>: Clears error and display indicators (<code>*in50</code>, <code>*in81</code>\u2013<code>*in86</code>, <code>*in59</code>).</p> </li> <li> <p>Program Termination:</p> <ul> <li>When <code>@sfnex = 'EJ'</code>, the program exits the main loop, sets <code>*inlr = *on</code> (last record indicator), and terminates, returning control to the calling OCL script.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Date Validation:</li> <li>The user must enter a valid journal date in MMDDYY format.</li> <li>The date is validated for:<ul> <li>Valid month (1\u201312).</li> <li>Valid day based on month (30 or 31 days) and leap year for February (28 or 29 days).</li> <li>Leap year logic accounts for century (Y2K compliance using <code>y2kcen</code> and <code>y2kcmp</code>).</li> </ul> </li> <li> <p>Invalid dates trigger an error message (<code>INVALID DATE</code>) and prompt redisplay.</p> </li> <li> <p>Two-Step Input Process:</p> </li> <li>Screen <code>AR200PS1</code> collects the journal date.</li> <li>Screen <code>AR200PS2</code> requires confirmation (<code>yn = 'Y'</code>) to proceed.</li> <li> <p>If confirmation is not <code>Y</code>, the user is returned to <code>AR200PS1</code>.</p> </li> <li> <p>Exit Conditions:</p> </li> <li>Pressing F3 (<code>*inkg</code>) on either screen exits the program, setting <code>*inu1</code> and <code>*inlr</code>.</li> <li> <p>Other command keys (e.g., F12, <code>ka</code>) on <code>AR200PS2</code> return to <code>AR200PS1</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Invalid dates set <code>*in79</code> and display an error message.</li> <li>Indicators (<code>*in50</code>, <code>*in81</code>\u2013<code>*in86</code>, <code>*in59</code>) control error display and screen behavior.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program uses no database files (physical or logical files) directly. Instead, it interacts with: - Workstation Display File: <code>AR200PD</code> (originally <code>SCREEN</code>), defined as a <code>CF</code> (combined file) with formats <code>AR200PS1</code> and <code>AR200PS2</code>. This file handles user input/output via the screen. - Compile-Time Data: A single message array (<code>msg</code>) with one entry (<code>INVALID DATE</code>) defined in the <code>CTDATA</code> section.</p> <p>No traditional database tables (e.g., A/R master file or journal file) are referenced, suggesting this program\u2019s sole purpose is to collect and validate the journal date, passing it to subsequent programs (e.g., <code>AR201</code>) for actual transaction posting.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is internal, with subroutines handling specific tasks: - <code>$sblk</code>: Initializes the blank screen. - <code>$s1</code>, <code>$s1ent</code>, <code>$s1ck</code>: Process the journal date input screen. - <code>$s2</code>, <code>$s2ent</code>, <code>$s2ck</code>: Process the confirmation screen. - <code>$xcpt</code>: Manages screen display. - <code>clrind</code>, <code>clrfld</code>: Clear indicators and fields. - <code>@dtedt</code>: Validates the journal date.</p> <p>The program is called by the OCL script (<code>AR201P.ocl36.txt</code>) and likely passes the validated journal date (<code>kyjrdt</code>) to subsequent programs (e.g., <code>AR201</code>) via parameters or data areas.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#notes","title":"Notes","text":"<ul> <li>Y2K Compliance: The program includes logic for century handling (<code>y2kcen</code>, <code>y2kcmp</code>) to ensure proper date validation, reflecting its conversion date (04/11/23) and Y2K considerations.</li> <li>Conversion Notes: The <code>T4</code> prefixes indicate a TARGET/400 source conversion, with 33 added lines, 8 modified lines, and 279 total lines processed. Changes include modernized syntax (e.g., <code>EVAL</code> instead of <code>MOVE</code>, <code>READ</code> instead of <code>READ SCREEN</code>).</li> <li>Screen Formats:</li> <li><code>AR200PS1</code>: Captures <code>jrdate</code> (journal date, positions 3\u20138) and displays <code>msgout</code> (error message, position 41).</li> <li><code>AR200PS2</code>: Displays <code>jrdate</code> (position 6), captures <code>yn</code> (confirmation, position 7), and displays <code>msgout</code> (position 42).</li> <li>Parameters: The program receives the journal date as a parameter (likely <code>?9?</code> from the OCL) and stores it in <code>kyjrdt</code> (data area, positions 100\u2013105).</li> </ul> <p>If you have additional details (e.g., the source for <code>AR201</code> or related database files), I can provide further analysis. Let me know if you need clarification or additional information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/","title":"AR201 OCL","text":"<p>The provided document, <code>AR201.ocl36.txt</code>, is an OCL (Operation Control Language) script used in an IBM AS/400 or iSeries environment, called from the main OCL script <code>AR201P.ocl36.txt</code>. It orchestrates the posting of accounts receivable (A/R) invoices and adjustments, including sorting transactions, updating files, generating journals, and producing reports. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#process-steps-of-the-ocl-program-ar201","title":"Process Steps of the OCL Program (AR201)","text":"<p>The <code>AR201.ocl36.txt</code> script automates the A/R transaction posting process, leveraging multiple programs and file operations. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Call Program <code>GSY2K</code>:</li> <li> <p>The line <code>// GSY2K</code> invokes the program <code>GSY2K</code>, likely a Year 2000 compliance utility to ensure proper date handling for the journal date (passed as <code>?9?</code> from the main OCL). This ensures dates are formatted correctly for downstream processing.</p> </li> <li> <p>Sort A/R Transactions (<code>#GSORT</code>):</p> </li> <li>Loads and runs the sort utility <code>#GSORT</code> to sort the A/R transaction file:<ul> <li>Input File: <code>?9?ARTRGG</code> (likely a temporary transaction file, e.g., <code>GGARTRGG</code> if <code>?9? = 'GG'</code>).</li> <li>Output File: <code>?9?AR201S</code> (sorted transaction file, e.g., <code>GGAR201S</code>), with 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> <li>Sort Specifications (<code>HSORTR</code>):</li> <li>Sort by:<ul> <li><code>CE</code> (Customer Code, position 1) in ascending order (<code>A</code>), not equal to blank (<code>NECD</code>).</li> <li><code>CE</code> (likely another code, position 54) in ascending order, not equal to blank (<code>NECE</code>).</li> <li><code>TRCO</code> (Company Code, positions 7\u20138).</li> <li><code>TRICCD</code> (Invoice/Credit Code, positions 191\u2013192).</li> <li><code>TRTYPE</code> (Transaction Type, position 31).</li> <li><code>TRCUST/TRINV#</code> (Customer Number/Invoice Number, positions 9\u201321).</li> </ul> </li> <li>Includes the entire record (positions 1\u2013256) in the output (<code>FDC 1 256</code>).</li> </ul> </li> <li> <p>Purpose: Organizes transactions for efficient processing by customer, company, and transaction details.</p> </li> <li> <p>Post Transactions and Generate Register (<code>AR200</code>):</p> </li> <li>Loads and runs the program <code>AR200</code> to post A/R transactions and produce a transaction register:<ul> <li>Input Files:</li> <li><code>ARTRAN</code>: Sorted transaction file (<code>?9?AR201S</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>), shared access (<code>DISP-SHR</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>), shared access.</li> <li><code>ARHIST</code>: A/R history file (<code>?9?ARHIST</code>), shared access.</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>), shared access.</li> <li>Output File:</li> <li><code>ARDIST</code>: Distribution file (<code>?9?ARDIGG</code>), 999,000 records, extendable by 100, retained as a job file.</li> <li>Printers:</li> <li><code>REPORTP1</code>: Device <code>P1</code>, priority 0.</li> <li><code>REPORTP4</code>: Device <code>P3</code>, priority 0.</li> <li>Conditional Output Queue:</li> <li>If <code>?9? = 'G'</code>, overrides printer file <code>REPORT</code> to output queue <code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Purpose: Updates customer balances, records transaction history, and generates a transaction register report.</p> </li> <li> <p>Generate S/J or C/R Journal (<code>AR210</code>):</p> </li> <li>Loads and runs the program <code>AR210</code> to create a sales journal (S/J) or cash receipts journal (C/R):<ul> <li>Input Files:</li> <li><code>ARDIST</code>: Distribution file (<code>?9?ARDIGG</code>) from <code>AR200</code>.</li> <li><code>ARCONT</code>: A/R control file, shared access.</li> <li>Output File:</li> <li><code>ARTEMG</code>: Temporary general ledger file (<code>?9?ARTGGG</code>), 999,000 records, extendable by 100, retained as a job file.</li> </ul> </li> <li> <p>Purpose: Prepares journal entries for general ledger integration based on A/R distributions.</p> </li> <li> <p>Sort Journal Entries (<code>#GSORT</code>):</p> </li> <li>Loads and runs <code>#GSORT</code> again to sort the temporary general ledger file:<ul> <li>Input File: <code>?9?ARTGGG</code>.</li> <li>Output File: <code>?9?AR211S</code>, 1,000 records, extendable by 100, retained as a job file.</li> <li>Sort Specifications (<code>HSORTA</code>):</li> <li>Sort by:<ul> <li><code>GDCO</code> (Company Code, positions 2\u20133).</li> <li><code>JRNL/REF</code> (Journal/Reference, positions 4\u20137).</li> <li><code>S</code> (Summarize flag, position 96).</li> <li><code>ACCOUNT #</code> (Account Number, positions 13\u201320).</li> <li><code>CR/DB CODE</code> (Credit/Debit Code, position 12).</li> </ul> </li> </ul> </li> <li> <p>Purpose: Organizes journal entries for posting to the general ledger.</p> </li> <li> <p>Create Daily File if Needed:</p> </li> <li>The line <code>// IFF DATAF1-?9?ARDALY BLDFILE ?9?ARDALY,S,RECORDS,1000,96,,T,,,DFILE</code> checks if the daily file <code>?9?ARDALY</code> exists on unit <code>F1</code>. If not, it creates it with 1,000 records, 96 bytes each, as a temporary file (<code>T</code>).</li> <li> <p>Purpose: Ensures a daily transaction file is available for general ledger posting.</p> </li> <li> <p>Post to General Ledger (<code>AR211</code>):</p> </li> <li>Loads and runs the program <code>AR211</code> to post journal entries to the general ledger:<ul> <li>Input Files:</li> <li><code>ARTEMG</code>: Temporary general ledger file (<code>?9?ARTGGG</code>).</li> <li><code>AR211S</code>: Sorted journal file (<code>?9?AR211S</code>).</li> <li><code>TEMGEN</code>: General ledger temporary file (<code>?9?TEMGEN</code>), shared access.</li> <li><code>ARCONT</code>: A/R control file, shared access.</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>), shared access.</li> <li><code>ARDALY</code>: Daily transaction file (<code>?9?ARDALY</code>), shared access.</li> <li>Printers:</li> <li><code>PRINT</code>, <code>PRINTP1</code>: Device <code>P1</code>, priority 0.</li> <li>Conditional Output Queue:</li> <li>If <code>?9? = 'G'</code>, overrides printer file <code>REPORT</code> to <code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Purpose: Updates the general ledger with A/R journal entries and generates related reports.</p> </li> <li> <p>Clean Up Temporary File (<code>$DELET</code>):</p> </li> <li>Loads and runs <code>$DELET</code> to perform cleanup.</li> <li>Checks if the transaction file <code>?9?ARTRGG</code> exists on unit <code>F1</code> and, if so, deletes it using <code>SCRATCH</code>.</li> <li>Purpose: Removes temporary transaction file to free disk space.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Sorting:</li> <li>Transactions are sorted by customer code, company, invoice/credit code, transaction type, and customer/invoice number to ensure consistent processing order.</li> <li> <p>Journal entries are sorted by company, journal/reference, account number, and credit/debit code, with summarization for general ledger posting.</p> </li> <li> <p>File Sharing:</p> </li> <li> <p>Master files (<code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code>, <code>ARCONT</code>, <code>TEMGEN</code>, <code>GLMAST</code>, <code>ARDALY</code>) are accessed in shared mode (<code>DISP-SHR</code>) to allow concurrent access by other processes.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files (<code>?9?AR201S</code>, <code>?9?ARDIGG</code>, <code>?9?ARTGGG</code>, <code>?9?AR211S</code>, <code>?9?ARDALY</code>) are created with large record capacities (e.g., 999,000) and retained as job files (<code>RETAIN-J</code>) to persist during the job\u2019s execution.</li> <li> <p>The transaction file <code>?9?ARTRGG</code> is deleted at the end to clean up.</p> </li> <li> <p>Output Queue Selection:</p> </li> <li> <p>If the parameter <code>?9? = 'G'</code>, reports are directed to specific output queues (<code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>), likely for production or testing environments.</p> </li> <li> <p>Daily File Creation:</p> </li> <li> <p>The daily file <code>?9?ARDALY</code> is created only if it doesn\u2019t exist, ensuring availability for general ledger updates.</p> </li> <li> <p>Journal Date Integration:</p> </li> <li>The parameter <code>?9?</code> (likely the journal date from <code>AR200P</code>) is embedded in file labels (e.g., <code>?9?ARTRGG</code>, <code>?9?AR201S</code>), ensuring all files are tied to the same posting period.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#tables-used","title":"Tables Used","text":"<p>The OCL script references the following files (tables): 1. Input Files:    - <code>?9?ARTRGG</code>: Temporary A/R transaction file (input to first sort).    - <code>?9?AR201S</code>: Sorted A/R transaction file (output from first sort, input to <code>AR200</code>).    - <code>?9?ARCUST</code>: A/R customer master file (shared).    - <code>?9?ARDETL</code>: A/R detail file (shared).    - <code>?9?ARHIST</code>: A/R history file (shared).    - <code>?9?ARCONT</code>: A/R control file (shared).    - <code>?9?ARDIGG</code>: A/R distribution file (output from <code>AR200</code>, input to <code>AR210</code>).    - <code>?9?ARTGGG</code>: Temporary general ledger file (output from <code>AR210</code>, input to second sort).    - <code>?9?AR211S</code>: Sorted general ledger file (output from second sort, input to <code>AR211</code>).    - <code>?9?TEMGEN</code>: General ledger temporary file (shared).    - <code>?9?GLMAST</code>: General ledger master file (shared).    - <code>?9?ARDALY</code>: Daily transaction file (shared, created if needed).</p> <ol> <li>Output Files:</li> <li><code>?9?AR201S</code>: Sorted transaction file.</li> <li><code>?9?ARDIGG</code>: A/R distribution file.</li> <li><code>?9?ARTGGG</code>: Temporary general ledger file.</li> <li><code>?9?AR211S</code>: Sorted general ledger file.</li> <li><code>?9?ARDALY</code>: Daily transaction file (if created).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following programs: 1. GSY2K: Year 2000 compliance utility for date handling. 2. #GSORT: Sort utility, called twice for sorting transactions and journal entries. 3. AR200: Posts A/R transactions and generates a transaction register. 4. AR210: Generates sales or cash receipts journal entries. 5. AR211: Posts journal entries to the general ledger. 6. $DELET: Deletes the temporary transaction file <code>?9?ARTRGG</code>.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#notes","title":"Notes","text":"<ul> <li>Parameter <code>?9?</code>: Likely the journal date or a prefix (e.g., <code>GG</code> as noted in the comment about Atrium compatibility), used consistently in file labels to tie files to the posting period.</li> <li>Atrium Compatibility: The comment indicates a change to use <code>GG</code> as the workstation ID (<code>?WS?</code>) to support running in the Atrium environment.</li> <li>File Retention: Temporary files are marked <code>RETAIN-J</code> to persist during the job, except for <code>?9?ARTRGG</code>, which is deleted at the end.</li> <li>Output Queues: Conditional overrides suggest support for production (<code>ARPOST</code>) and testing (<code>TESTOUTQ</code>) environments.</li> </ul> <p>If you have additional details (e.g., source code for <code>AR200</code>, <code>AR210</code>, or <code>AR211</code>, or specific file layouts), I can provide a deeper analysis. Let me know if you need further clarification or additional information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/","title":"AR210 RPG36","text":"<p>The provided document, <code>AR210.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. Its primary function is to create journal entries for accounts receivable (A/R) transactions (invoices, adjustments, payments, and miscellaneous amounts) in the temporary general ledger file (<code>ARTEMG</code>) for further processing by the general ledger system. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#process-steps-of-the-rpg-program-ar210","title":"Process Steps of the RPG Program (AR210)","text":"<p>The <code>AR210</code> program processes records from the A/R distribution file (<code>ARDIST</code>), generates debit and credit journal entries for the temporary general ledger file (<code>ARTEMG</code>), and handles discounts and inter-company transactions. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARDIST</code> (primary input, 161 bytes), <code>ARCONT</code> (A/R control, 256 bytes, keyed by company, shared access).</li> <li>Output: <code>ARTEMG</code> (temporary general ledger file, 128 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure with fields for user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), sales journal number (<code>SJ##</code>), ledger retention flag (<code>LDRETL</code>), and Y2K variables (<code>Y2KCEN</code> = 19, <code>Y2KCMP</code> = 80).</li> </ul> </li> <li> <p>Initial Setup:</p> <ul> <li>Clears discount amount (<code>DISAMT</code>) and indicator <code>82</code> (discount &lt; 0).</li> <li>Executes one-time setup (<code>ONETIM</code>) if not already done (<code>N98</code>).</li> </ul> </li> <li> <p>One-Time Setup (<code>ONETIM</code>):</p> </li> <li>Captures system time (<code>TIMEOF</code>).</li> <li>Chains to <code>ARCONT</code> using company code (<code>ADCO</code>) to retrieve control data (e.g., <code>ACTRGL</code>, G/L account for inter-company transactions).</li> <li>Sets transaction type indicators:<ul> <li><code>01</code> (invoice): Sets <code>61</code>.</li> <li><code>02</code> (adjustment): Sets <code>61</code>.</li> <li><code>03</code> (payment): Sets <code>63</code>.</li> </ul> </li> <li> <p>Sets indicator <code>98</code> to mark setup completion.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARDIST</code> records sequentially, identified by record type:<ul> <li><code>01</code> (invoice, <code>CI</code>).</li> <li><code>02</code> (adjustment, <code>CJ</code>).</li> <li><code>03</code> (payment, <code>CP</code>).</li> </ul> </li> <li>Adjusts transaction amount (<code>ADAMT</code>):<ul> <li>If miscellaneous amount exists (<code>86</code>) and not zero (<code>N16</code>), subtracts <code>ADMISC</code> from <code>ADAMT</code> (sets <code>81</code> if negative).</li> <li>If miscellaneous and zero amount (<code>16</code>, <code>86</code>), sets <code>ADAMT</code> to <code>ADMISC</code> (sets <code>81</code> if negative).</li> </ul> </li> <li> <p>Handles discount amount:</p> <ul> <li>If discount exists (<code>51</code>), sets <code>DISAMT</code> to <code>ADDISC</code>.</li> <li>If <code>DISAMT</code> is negative (<code>82</code>), multiplies by -1 to make positive.</li> </ul> </li> <li> <p>Transaction Processing:</p> </li> <li>Case Selection:<ul> <li>If amount is non-negative (<code>N81</code>), executes <code>CASE01</code> (standard debit/credit entries).</li> <li>If amount is negative (<code>81</code>), executes <code>CASE02</code> (reversed debit/credit entries).</li> <li>If company codes differ (<code>ADCODR \u2260 ADCO</code> or <code>ADCOCR \u2260 ADCO</code>, indicator <code>54</code>), executes <code>CASE03</code> (inter-company entries) and adjusts <code>ADAMT</code> if negative.</li> </ul> </li> <li> <p>Discount Processing:</p> <ul> <li>If discount exists (<code>51</code>), sets <code>ADCODR</code> to <code>ADCODI</code> (cash invoice company) and executes <code>GLDISC</code> to create a discount journal entry.</li> <li>Adds <code>DISAMT</code> to debit total (<code>DBTOT</code>, if <code>N82</code>) or credit total (<code>CRTOT</code>, if <code>82</code>).</li> </ul> </li> <li> <p>Standard Entries (<code>CASE01</code>):</p> </li> <li>For payments (<code>63</code>):<ul> <li>If discount non-negative (<code>N82</code>), debit amount = <code>ADAMT - DISAMT</code>.</li> <li>If discount negative (<code>82</code>), debit amount = <code>ADAMT + DISAMT</code>.</li> </ul> </li> <li>For invoices/adjustments (<code>N63</code>), debit amount = <code>ADAMT</code>.</li> <li>Writes debit entry to <code>ARTEMG</code>:<ul> <li>Company: <code>DRCO</code> (<code>ADCODR</code>).</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>D</code> (debit).</li> <li>Account: <code>DRACCT</code> (<code>ADGLDR</code>).</li> <li>Customer: <code>ADNAME</code>.</li> <li>Invoice: <code>ADINV#</code>.</li> <li>Date: <code>ADJRDT</code>.</li> <li>Amount: <code>DRAMT</code>.</li> <li>Description: <code>ADDESC</code>.</li> </ul> </li> <li>Sets indicator <code>30</code>, writes, then clears <code>30</code>.</li> <li>Adds <code>DRAMT</code> to <code>DBTOT</code>.</li> <li> <p>Writes credit entry:</p> <ul> <li>Company: <code>CRCO</code> (<code>ADCOCR</code>).</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>C</code> (credit).</li> <li>Account: <code>CRACCT</code> (<code>ADGLCR</code>).</li> <li>Amount: <code>CRAMT</code> (<code>ADAMT</code>).</li> <li>Sets indicator <code>31</code>, writes, then clears <code>31</code>.</li> <li>Adds <code>CRAMT</code> to <code>CRTOT</code>.</li> </ul> </li> <li> <p>Negative Amount Entries (<code>CASE02</code>):</p> </li> <li>Writes debit entry:<ul> <li>Amount: <code>DRAMT</code> = <code>-ADAMT</code>.</li> <li>Account: <code>DRACCT</code> (<code>ADGLCR</code>).</li> <li>Company: <code>DRCO</code> (<code>ADCOCR</code>).</li> <li>Type: <code>D</code>.</li> <li>Sets indicator <code>32</code>, writes, then clears <code>32</code>.</li> <li>Adds <code>DRAMT</code> to <code>DBTOT</code>.</li> </ul> </li> <li> <p>Writes credit entry:</p> <ul> <li>For payments (<code>63</code>):</li> <li>If discount non-negative (<code>N82</code>), <code>CRAMT</code> = <code>-ADAMT + DISAMT</code>.</li> <li>If discount negative (<code>82</code>), <code>CRAMT</code> = <code>-ADAMT - DISAMT</code>.</li> <li>For invoices/adjustments (<code>N63</code>), <code>CRAMT</code> = <code>-ADAMT</code>.</li> <li>Account: <code>CRACCT</code> (<code>ADGLDR</code>).</li> <li>Company: <code>CRCO</code> (<code>ADCODR</code>).</li> <li>Type: <code>C</code>.</li> <li>Sets indicator <code>33</code>, writes, then clears <code>33</code>.</li> <li>Adds <code>CRAMT</code> to <code>CRTOT</code>.</li> </ul> </li> <li> <p>Inter-Company Entries (<code>CASE03</code>):</p> </li> <li> <p>Writes two entries to <code>ARTEMG</code>:</p> <ul> <li>Credit Entry:</li> <li>Amount: <code>ICRAMT</code> = <code>ADAMT \u00b1 DISAMT</code> (subtract if <code>N82</code>, add if <code>82</code>).</li> <li>Company: <code>ICRCO</code> (<code>ADCODR</code>).</li> <li>Account: <code>ICRGL8</code> (<code>ACTRGL</code> + <code>ADCOCR</code>).</li> <li>Type: <code>C</code> if <code>N81</code>, <code>D</code> if <code>81</code>.</li> <li>Debit Entry:</li> <li>Amount: <code>IDRAMT</code> = <code>ADAMT \u00b1 DISAMT</code>.</li> <li>Company: <code>IDRCO</code> (<code>ADCOCR</code>).</li> <li>Account: <code>IDRGL8</code> (<code>ACTRGL</code> + <code>ADCODR</code>).</li> <li>Type: <code>D</code> if <code>N81</code>, <code>C</code> if <code>81</code>.</li> <li>Both entries include <code>ADJRNL</code>, <code>ADNAME</code>, <code>ADINV#</code>, <code>ADJRDT</code>, <code>ADDESC</code>.</li> <li>Sets indicator <code>34</code>, writes, then clears <code>34</code>.</li> </ul> </li> <li> <p>Discount Entry (<code>GLDISC</code>):</p> </li> <li>Writes discount entry to <code>ARTEMG</code>:<ul> <li>Company: <code>ADCODI</code>.</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>D</code> if <code>N82</code>, <code>C</code> if <code>82</code>.</li> <li>Account: <code>ADGLDI</code>.</li> <li>Amount: <code>DISC11</code> (<code>DISAMT</code>).</li> <li>Customer: <code>ADNAME</code>.</li> <li>Invoice: <code>ADINV#</code>.</li> <li>Date: <code>ADJRDT</code>.</li> <li>Description: <code>ADDESC</code>.</li> </ul> </li> <li>Sets indicator <code>35</code>, writes, then clears <code>35</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices (<code>01</code>, <code>CI</code>) and adjustments (<code>02</code>, <code>CJ</code>): Generate debit (<code>ADGLDR</code>) and credit (<code>ADGLCR</code>) entries.</li> <li>Payments (<code>03</code>, <code>CP</code>): Generate debit and credit entries, adjusted for discounts.</li> <li> <p>Miscellaneous amounts (<code>86</code>): Adjust <code>ADAMT</code> by subtracting <code>ADMISC</code> (if non-zero) or setting to <code>ADMISC</code> (if zero).</p> </li> <li> <p>Discount Handling:</p> </li> <li>Discounts (<code>ADDISC</code>, indicator <code>51</code>) are recorded as separate entries with <code>ADCODI</code> (company) and <code>ADGLDI</code> (account).</li> <li>Negative discounts (<code>82</code>) are converted to positive for journal entries.</li> <li> <p>Discounts adjust debit/credit amounts in payment entries.</p> </li> <li> <p>Inter-Company Transactions:</p> </li> <li>If company codes differ (<code>ADCODR \u2260 ADCO</code> or <code>ADCOCR \u2260 ADCO</code>, <code>54</code>), generates entries using inter-company G/L account (<code>ACTRGL</code>) from <code>ARCONT</code>.</li> <li> <p>Debit and credit types are swapped based on amount sign (<code>81</code>).</p> </li> <li> <p>Amount Sign Handling:</p> </li> <li>Positive amounts (<code>N81</code>): Standard debit/credit entries.</li> <li> <p>Negative amounts (<code>81</code>): Reverses debit/credit accounts and adjusts amounts.</p> </li> <li> <p>Journal Entry Structure:</p> </li> <li>Entries include company, journal number, debit/credit type, G/L account, customer name, invoice number, journal date, amount, and description.</li> <li> <p>Description field (<code>ADDESC</code>) retains full 25 characters from cash receipts, with date moved to the second description field in <code>ARTEMG</code> (per 4/20/05 change).</p> </li> <li> <p>Accumulation:</p> </li> <li> <p>Tracks debit (<code>DBTOT</code>) and credit (<code>CRTOT</code>) totals for balancing.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li>Uses <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) for date handling, though no explicit date conversion occurs in this program (dates are pre-converted in <code>AR200</code>).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARDIST</code> (F-spec 0007): A/R distribution file (161 bytes, primary input) from <code>AR200</code> (<code>?9?ARDIGG</code>).    - <code>ARCONT</code> (0009): A/R control file (256 bytes, input mode, keyed by company, shared access).</p> <ol> <li>Output Files:</li> <li> <p><code>ARTEMG</code> (0008): Temporary general ledger file (128 bytes, output mode) for journal entries (<code>?9?ARTGGG</code>).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li>None defined.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>ONETIM</code>: One-time setup for system time and control file access. - <code>CASE01</code>: Processes standard debit/credit entries for non-negative amounts. - <code>CASE02</code>: Processes reversed debit/credit entries for negative amounts. - <code>CASE03</code>: Handles inter-company entries. - <code>GLDISC</code>: Creates discount journal entries.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#notes","title":"Notes","text":"<ul> <li>Modification (4/20/05): Enhanced description field handling to retain 25 characters from cash receipts, with the date moved to the second description field in <code>ARTEMG</code>.</li> <li>Indicators:</li> <li><code>16</code>: Zero amount.</li> <li><code>51</code>: Non-zero discount.</li> <li><code>52</code>: Non-zero G/L credit account.</li> <li><code>53</code>: Non-zero G/L debit account.</li> <li><code>61</code>: Invoice or adjustment.</li> <li><code>63</code>: Payment.</li> <li><code>81</code>: Negative amount.</li> <li><code>82</code>: Negative discount.</li> <li><code>86</code>: Non-zero miscellaneous amount.</li> <li>File Access: <code>ARCONT</code> is shared (<code>DISP-SHR</code>) for concurrent access.</li> <li>Output: <code>ARTEMG</code> entries are formatted for sorting and posting by <code>AR211</code>.</li> </ul> <p>If you have additional details (e.g., source for <code>AR211</code> or file layouts), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/","title":"AR211 RPG36","text":"<p>The provided document, <code>AR211.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. Its primary function is to process sorted journal entries from the temporary general ledger file (<code>ARTEMG</code> and <code>AR211S</code>), summarize them by account number if required, post them to the general ledger temporary file (<code>TEMGEN</code>) and daily transaction file (<code>ARDALY</code>), and print sales and cash receipts journals. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#process-steps-of-the-rpg-program-ar211","title":"Process Steps of the RPG Program (AR211)","text":"<p>The <code>AR211</code> program processes journal entries, accumulates totals, and generates reports for sales (<code>SJ</code>) and cash receipts (<code>CR</code>) journals. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARTEMG</code> (primary input, 128 bytes), <code>AR211S</code> (sorted journal entries, 300 bytes, indexed), <code>GLMAST</code> (G/L master, 256 bytes, keyed, shared), <code>ARCONT</code> (A/R control, 256 bytes, keyed, shared).</li> <li>Output: <code>TEMGEN</code> (G/L temporary file, 128 bytes), <code>ARDALY</code> (daily transaction file, 96 bytes), <code>REPORT</code> (primary journal report, 132 bytes), <code>REPORTP</code> (Indianola copy, 132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure with journal date (<code>JRNLDT</code>), user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), ledger journal type (<code>LDJTYP</code>), journal number (<code>LDJRN#</code>), ledger retention flag (<code>LDRETL</code>), and Y2K variables (<code>Y2KCEN</code> = 19, <code>Y2KCMP</code> = 80).</li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ul> </li> <li> <p>Subroutines:</p> <ul> <li><code>L4DET</code>: Initializes for each journal date/month.</li> <li><code>JRNL</code>: Writes journal entries.</li> <li><code>L4TOT</code>: Writes journal totals.</li> </ul> </li> <li> <p>Detail Processing (<code>L4DET</code>):</p> </li> <li>Executes at level break <code>L4</code> (change in journal year <code>GDYR</code> or month <code>GDMO</code>).</li> <li>Captures system time (<code>TIMEOF</code>) and date (<code>TIMDAT</code>), converts to YMD format (<code>SYSDT8</code>, CCYYMMDD).</li> <li>Resets page counter (<code>PAGE</code>) to 0.</li> <li>Applies Y2K compliance to journal year (<code>GDYY</code>):<ul> <li>If <code>GDYY &gt;= Y2KCMP (80)</code>, sets century (<code>GCN</code>) to <code>Y2KCEN (19)</code>; otherwise, increments <code>Y2KCEN</code> by 1.</li> </ul> </li> <li>Chains to <code>ARCONT</code> using company code (<code>GDCO</code>) to retrieve control data (e.g., <code>ACARJ#</code>, <code>ACSLJ#</code>, G/L accounts).</li> <li>Sets journal type (<code>JRNTYP</code>) and number (<code>JRN#</code>) based on <code>GDJTYP</code> (<code>SJ</code> or <code>CR</code>) and <code>GDJRN#</code>.</li> <li>Sets indicators <code>61</code> (sales journal) or <code>63</code> (cash receipts journal).</li> <li>Writes report header (indicator <code>11</code>), clears <code>11</code>.</li> <li> <p>Resets level 4 totals (<code>L4CR$</code>, <code>L4DB$</code>) to 0.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARTEMG</code> records sequentially, with level breaks:<ul> <li>L6 (Company Change): Not explicitly handled but triggers <code>L4</code>.</li> <li>L5 (Journal Type/Number Change): Not explicitly handled but triggers <code>L4</code>.</li> <li>L4 (Year/Month Change): Executes <code>L4DET</code> and <code>L4TOT</code>.</li> <li>L3 (Summarization Flag Change): Checks if <code>GDSUMM = 'S'</code> (indicator <code>20</code> for summarized entries).</li> <li>L2 (Account Change): Resets level 2 totals (<code>L2CR$</code>, <code>L2DB$</code>, <code>L2TOT$</code>).</li> <li>L1 (Detail Record): Accumulates amount (<code>GDAMT</code>) to <code>L1TOT$</code>.</li> </ul> </li> <li> <p>Converts journal date (<code>GDDATE</code>) to YMD format (<code>CYMD</code>, CCYYMMDD) with Y2K compliance.</p> </li> <li> <p>Non-Summarized Entries (<code>N20</code>):</p> </li> <li>Checks if entry is credit (<code>GDCRDB = 'C'</code>, indicator <code>15</code>).</li> <li>Adds <code>L1TOT$</code> to <code>L2CR$</code> (credit) or <code>L2DB$</code> (debit).</li> <li>Executes <code>JRNL</code> to write the entry.</li> <li> <p>Resets <code>L1TOT$</code>, <code>L2CR$</code>, <code>L2DB$</code>, <code>L2TOT$</code>.</p> </li> <li> <p>Summarized Entries (<code>20</code>):</p> </li> <li>At <code>L1</code>, accumulates <code>L1TOT$</code> to <code>L2CR$</code> (credit, <code>15</code>) or <code>L2DB$</code> (debit, <code>N15</code>).</li> <li> <p>At <code>L2</code>, executes <code>JRNL</code> to write summarized entry.</p> </li> <li> <p>Journal Entry Writing (<code>JRNL</code>):</p> </li> <li>Builds G/L key (<code>KEY11 = GDCO + GDACCT + 'C'</code>) and chains to <code>GLMAST</code> to retrieve account description (<code>GLDESC</code>).</li> <li>Calculates net total (<code>L2TOT$ = L2CR$ - L2DB$</code> if <code>15</code>, or <code>L2DB$ - L2CR$</code> if <code>N15</code>).</li> <li>If non-zero (<code>N40</code>), increments journal sequence (<code>JRNSEQ</code>) and writes to <code>TEMGEN</code> and <code>ARDALY</code> (indicator <code>WRITIT</code>).</li> <li> <p>Adds <code>L2TOT$</code> to <code>L4CR$</code> (credit) or <code>L4DB$</code> (debit).</p> </li> <li> <p>Totals Processing (<code>L4TOT</code>):</p> </li> <li>If records were read (<code>GDCO \u2260 0</code>) and no entries written (<code>JRNSEQ = 0</code>), increments <code>JRNSEQ</code> and writes a journal entry.</li> <li> <p>Writes journal totals to <code>REPORT</code> and <code>REPORTP</code> with <code>L4DB$</code> and <code>L4CR$</code>.</p> </li> <li> <p>Output Operations:</p> </li> <li>TEMGEN: Writes G/L entries with company (<code>GDCO</code>), account (<code>GDACCT</code>), journal type (<code>JRNTYP</code>), number (<code>JRN#</code>), sequence (<code>JRNSEQ</code>), debit/credit type, description, date, and amount (<code>L2TOT$</code>).</li> <li>ARDALY: Writes daily transactions with similar fields.</li> <li>REPORT/REPORTP: Prints sales or cash receipts journal with headers (company, date, time, user ID, journal type), detail lines (journal number, date, description, debit/credit amounts), and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Types:</li> <li>Sales Journal (<code>SJ</code>, indicator <code>61</code>): Processes invoices and adjustments.</li> <li>Cash Receipts Journal (<code>CR</code>, indicator <code>63</code>): Processes payments and miscellaneous cash.</li> <li> <p>Determined by <code>GDJTYP</code> from <code>ARTEMG</code>.</p> </li> <li> <p>Summarization:</p> </li> <li>If <code>GDSUMM = 'S'</code> (<code>20</code>), accumulates amounts by account (<code>GDACCT</code>) at <code>L2</code> and writes a single entry.</li> <li> <p>If <code>N20</code>, writes individual entries without summarization.</p> </li> <li> <p>Debit/Credit Handling:</p> </li> <li>Credit entries (<code>GDCRDB = 'C'</code>, <code>15</code>): Accumulate to <code>L2CR$</code>, <code>L4CR$</code>.</li> <li>Debit entries (<code>N15</code>): Accumulate to <code>L2DB$</code>, <code>L4DB$</code>.</li> <li> <p>Net total (<code>L2TOT$</code>) determines if entry is written (<code>N40</code>).</p> </li> <li> <p>Y2K Compliance:</p> </li> <li> <p>Converts journal date (<code>GDDATE</code>) to CCYYMMDD format (<code>CYMD</code>) using <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80).</p> </li> <li> <p>G/L Validation:</p> </li> <li> <p>Chains to <code>GLMAST</code> to retrieve account description (<code>GLDESC</code>) for reporting.</p> </li> <li> <p>Journal Sequence:</p> </li> <li> <p>Increments <code>JRNSEQ</code> for each non-zero entry or at totals if no entries were written.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces two journal reports (<code>REPORT</code>, <code>REPORTP</code>) with headers, detail lines (journal number, date, G/L account, description, debit/credit amounts), and totals.</li> <li> <p>Includes company name (<code>ACNAME</code>), user ID, workstation ID, and system date/time.</p> </li> <li> <p>ARCONT Update (Removed):</p> </li> <li> <p>Per 8/06/14 change, <code>ARCONT</code> is no longer updated (previously updated journal numbers <code>ACARJ#</code>, <code>ACSLJ#</code>).</p> </li> <li> <p>Description Handling:</p> </li> <li>Per 4/20/05 change, retains full 25-character description (<code>GDDESC</code>) from cash receipts, with date in the second description field in <code>TEMGEN</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARTEMG</code> (F-spec 0009): Temporary general ledger file (128 bytes, primary input) from <code>AR210</code> (<code>?9?ARTGGG</code>).    - <code>AR211S</code> (0010): Sorted journal entries (300 bytes, indexed, extension of <code>ARTEMG</code>, <code>?9?AR211S</code>).    - <code>GLMAST</code> (0011): General ledger master file (256 bytes, keyed by company/account, shared access, <code>?9?GLMAST</code>).    - <code>ARCONT</code> (0014): A/R control file (256 bytes, keyed by company, shared access, <code>?9?ARCONT</code>).</p> <ol> <li>Output Files:</li> <li><code>TEMGEN</code> (0012): General ledger temporary file (128 bytes, <code>?9?TEMGEN</code>).</li> <li><code>ARDALY</code> (0013): Daily transaction file (96 bytes, <code>?9?ARDALY</code>).</li> <li><code>REPORT</code> (0015): Primary journal report (132 bytes, printer file).</li> <li> <p><code>REPORTP</code> (0016): Indianola copy of journal report (132 bytes, printer file).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>L4DET</code>: Initializes for journal date/month changes. - <code>JRNL</code>: Writes journal entries to <code>TEMGEN</code> and <code>ARDALY</code>. - <code>L4TOT</code>: Writes journal totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#notes","title":"Notes","text":"<ul> <li>Modifications:</li> <li>4/20/05: Enhanced description field handling to retain 25 characters from cash receipts, with date in second description field in <code>TEMGEN</code>.</li> <li>8/06/14: Removed <code>ARCONT</code> updates and changed printer names for paperless reporting, with output still printing in Bradford.</li> <li>Indicators:</li> <li><code>61</code>: Sales journal.</li> <li><code>63</code>: Cash receipts journal.</li> <li><code>15</code>: Credit entry.</li> <li><code>20</code>: Summarized entry.</li> <li><code>40</code>: Non-zero net total.</li> <li>File Access: <code>GLMAST</code> and <code>ARCONT</code> are shared (<code>DISP-SHR</code>) for concurrent access.</li> <li>Output: Reports are formatted for clarity, with separate sections for sales and cash receipts journals.</li> </ul> <p>If you have additional details (e.g., file layouts or related programs), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/","title":"Summary AR201 OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#list-of-use-cases-implemented-by-the-ar201-call-stack","title":"List of Use Cases Implemented by the AR201 Call Stack","text":"<p>The call stack (<code>AR201.ocl36.txt</code>, <code>AR200.rpg36.txt</code>, <code>AR210.rpg36.txt</code>, <code>AR211.rpg36.txt</code>) implements a single primary use case in the IBM AS/400 or iSeries environment:</p> <ol> <li>Accounts Receivable (A/R) Transaction Posting and Journal Entry Generation:</li> <li>This use case processes A/R transactions (invoices, adjustments, payments, and miscellaneous cash) from a sorted transaction file, updates customer and A/R detail files, generates journal entries for the general ledger, and produces sales and cash receipts journals along with a transaction posting register.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#ar-transaction-posting-and-journal-entry-generation","title":"A/R Transaction Posting and Journal Entry Generation","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#overview","title":"Overview","text":"<p>This function processes accounts receivable transactions (invoices, adjustments, payments, miscellaneous cash) to update customer balances, A/R details, and history, generate general ledger journal entries, and produce sales/cash receipts journals and a transaction posting register.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Transaction File (ARTRAN): Sorted records with company code, customer number, invoice number, transaction type (I=invoice, J=adjustment, P=payment), amount, discount, G/L accounts, dates, and description.</li> <li>Customer Master (ARCUST): Customer data including balances, payment info, and aged amounts.</li> <li>A/R Detail (ARDETL): Invoice-level details with payment and adjustment history.</li> <li>A/R Control (ARCONT): Company-level control data (journal numbers, G/L accounts).</li> <li>G/L Master (GLMAST): G/L account descriptions.</li> <li>System Parameters: Journal date, user ID, workstation ID, Y2K century settings.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>ARCUST</code>: Updated customer balances, payment info, aged amounts.</li> <li><code>ARDETL</code>: Updated or new invoice, adjustment, payment records.</li> <li><code>ARHIST</code>: Transaction history records.</li> <li><code>ARCONT</code>: Updated journal numbers (pre-8/06/14).</li> <li><code>TEMGEN</code>: G/L journal entries.</li> <li><code>ARDALY</code>: Daily transaction records.</li> <li>Reports:</li> <li>Transaction Posting Register (<code>REPORT</code>, <code>REPORTP</code>): Lists invoices, adjustments, payments, totals.</li> <li>Sales/Cash Receipts Journals (<code>REPORT</code>, <code>REPORTP</code>): Summarized or detailed journal entries.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date, time, user ID, workstation ID.</li> <li>Chain to <code>ARCONT</code> for journal numbers and G/L accounts.</li> <li> <p>Convert dates to CCYYMMDD format with Y2K compliance (century = 19 if year \u2265 80, else 20).</p> </li> <li> <p>Process Transactions:</p> </li> <li>Read <code>ARTRAN</code> records sequentially, grouped by company, transaction type.</li> <li>Determine transaction type:<ul> <li>Invoice (I): Update customer balances, A/R details, history; generate sales journal (SJ) entries.</li> <li>Adjustment (J): Adjust balances, details, history; generate SJ entries.</li> <li>Payment (P): Reduce balances, update payment info, details, history; generate cash receipts (CR) entries.</li> <li>COD Invoice (Y): Generate SJ entries, skip A/R updates.</li> <li>Miscellaneous Cash: Adjust finance charges or record as cash; generate CR entries.</li> </ul> </li> <li> <p>Skip A/R updates for inter-company customers (<code>ATICCD = 'IC'</code>), generate journal entries only.</p> </li> <li> <p>Update Files:</p> </li> <li>ARCUST: Update total due, aged balances, period totals (month-to-date, year-to-date), payment info.</li> <li>ARDETL: Add/update invoice, adjustment, payment, or prepaid records (sequence number, paid amount, sales).</li> <li>ARHIST: Log transaction details (except inter-company).</li> <li> <p>ARCONT: Increment journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>) for payments, invoices/adjustments (pre-8/06/14).</p> </li> <li> <p>Generate Journal Entries:</p> </li> <li>Create debit/credit entries in <code>ARDIST</code> (from <code>AR200</code>):<ul> <li>Invoices/Adjustments: Debit A/R (<code>ADGLDR</code>), credit sales (<code>ADGLCR</code>).</li> <li>Payments: Debit cash (<code>ADGLCR</code>), credit A/R (<code>ADGLDR</code>).</li> <li>Discounts: Debit/credit discount account (<code>ADGLDI</code>).</li> <li>Inter-Company: Use inter-company G/L account (<code>ACTRGL</code>).</li> </ul> </li> <li>Process <code>ARDIST</code> to <code>ARTEMG</code> (from <code>AR210</code>):<ul> <li>Adjust amounts for miscellaneous cash, discounts.</li> <li>Handle negative amounts by reversing debit/credit.</li> <li>Write inter-company entries with swapped debit/credit types.</li> </ul> </li> <li> <p>Summarize entries in <code>TEMGEN</code>/<code>ARDALY</code> (from <code>AR211</code>):</p> <ul> <li>Summarize by account if <code>GDSUMM = 'S'</code>, else write individual entries.</li> <li>Include company, account, journal type, number, sequence, date, amount, description.</li> </ul> </li> <li> <p>Produce Reports:</p> </li> <li>Transaction Posting Register: List invoices, adjustments, payments, totals (net change, cash, discounts).</li> <li>Sales/Cash Receipts Journals: List journal entries (detailed or summarized) with G/L accounts, amounts, descriptions, and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices/adjustments increase A/R balances, generate SJ entries.</li> <li>Payments reduce A/R balances, generate CR entries.</li> <li>COD invoices skip A/R updates, generate SJ entries.</li> <li> <p>Miscellaneous cash reduces finance charges or records as cash.</p> </li> <li> <p>Inter-Company:</p> </li> <li> <p>Skip <code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code> updates; generate journal entries with inter-company G/L account.</p> </li> <li> <p>Calculations:</p> </li> <li>Aged Balances: Update <code>AGE</code> array (5 periods) based on transaction date and amount.</li> <li>Net Change: <code>NETCHG = INVAMT + ADJAMT - TOTREC</code>.</li> <li>Payment Amount: <code>ATCASH = ATAMT - ATDISC</code> for payments.</li> <li> <p>Journal Entries:</p> <ul> <li>Standard: Debit A/R, credit sales/cash.</li> <li>Negative amounts: Reverse debit/credit accounts.</li> <li>Discounts: Separate entry with <code>ADGLDI</code>.</li> <li>Inter-Company: Use <code>ACTRGL</code> with swapped debit/credit based on amount sign.</li> </ul> </li> <li> <p>Date Handling:</p> </li> <li>Convert dates to CCYYMMDD using Y2K logic (century = 19 if year \u2265 80, else 20).</li> <li> <p>Compare invoice date to journal date if <code>LDRETL = 'R'</code> for discrepancy flagging.</p> </li> <li> <p>Summarization:</p> </li> <li> <p>Summarize journal entries by account if <code>GDSUMM = 'S'</code>; otherwise, write individual entries.</p> </li> <li> <p>Description:</p> </li> <li> <p>Retain 25-character description from cash receipts, with date in second field (per 4/20/05 change).</p> </li> <li> <p>Journal Numbers:</p> </li> <li>Increment <code>ACARJ#</code> (A/R journal) for payments, <code>ACSLJ#</code> (sales journal) for invoices/adjustments (pre-8/06/14).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input files are pre-sorted by company, transaction type.</li> <li>G/L accounts in <code>ARCONT</code>, <code>GLMAST</code> are valid.</li> <li>Shared file access (<code>DISP-SHR</code>) allows concurrent processing.</li> <li>No external program calls; all logic is internal via subroutines.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/","title":"Summary AR201P OCL","text":"<p>The provided call stack consists of three programs: <code>AR201P.ocl36.txt</code> (main OCL program), <code>AR200P.rpgle.txt</code> (RPGLE program for journal date input and validation), and <code>AR201.ocl36.txt</code> (OCL program for A/R transaction posting). Together, these programs implement a process for posting Accounts Receivable (A/R) transactions, including invoices and adjustments, to customer and general ledger files. Below, I\u2019ll identify the use case(s) implemented by this call stack and then provide a function requirement document for a non-interactive version of the process, assuming inputs are provided programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The call stack implements a single primary use case: 1. Post A/R Transactions (Invoices and Adjustments):    - Description: This use case allows the system to accept a journal date, validate it, sort A/R transactions, post them to customer, detail, history, and distribution files, generate journal entries (sales or cash receipts), post to the general ledger, and produce reports (transaction register and general ledger posting reports).    - Scope: The process starts with user input for a journal date (<code>AR200P</code>), validates it, and proceeds to process transactions (<code>AR201</code>) based on the provided date, updating relevant files and generating reports.    - Inputs: Journal date (from user or system), A/R transaction data (from <code>?9?ARTRGG</code> file).    - Outputs: Updated customer, detail, history, distribution, and general ledger files; transaction register and general ledger posting reports.</p> <p>No additional distinct use cases are evident, as the programs focus on a single end-to-end process for A/R transaction posting.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>The following document reimagines the interactive A/R transaction posting process as a non-interactive function that accepts inputs programmatically and completes the process without screen interaction.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#ar-transaction-posting-function-requirements","title":"A/R Transaction Posting Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#overview","title":"Overview","text":"<p>The <code>PostARTransactions</code> function processes Accounts Receivable (A/R) transactions (invoices and adjustments) by validating a provided journal date, sorting transactions, posting them to customer and general ledger files, generating journal entries, and producing reports. The function operates non-interactively, receiving all inputs programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Journal Date: A 6-digit numeric value in <code>MMDDYY</code> format (e.g., 073025 for July 30, 2025).</li> <li>Environment Prefix: A 1-character code (e.g., 'G' for production, other for test) to determine output queue and file naming.</li> <li>Transaction File (<code>?prefix?ARTRGG</code>): A file containing A/R transactions with fields:</li> <li>Position 1: Record type (exclude 'C' or 'D').</li> <li>Position 54: Additional type (exclude 'C' or 'E').</li> <li>Positions 7\u20138: Company code (<code>TRCO</code>).</li> <li>Positions 191\u2013192: Invoice class code (<code>TRICCD</code>).</li> <li>Position 31: Transaction type (<code>TRTYPE</code>).</li> <li>Positions 9\u201321: Customer number and invoice number (<code>TRCUST/TRINV#</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>?prefix?ARCUST</code>: Customer master file (balances, status).</li> <li><code>?prefix?ARDETL</code>: A/R detail file (transaction details).</li> <li><code>?prefix?ARHIST</code>: A/R history file (transaction records).</li> <li><code>?prefix?ARDIGG</code>: A/R distribution file (accounting distributions).</li> <li><code>?prefix?ARCONT</code>: A/R control file (control totals).</li> <li><code>?prefix?TEMGEN</code>: General ledger temporary file.</li> <li><code>?prefix?GLMAST</code>: General ledger master file (posted journal entries).</li> <li><code>?prefix?ARDALY</code> (optional): A/R daily file, if created.</li> <li>Reports:</li> <li>Transaction Register: Details of posted A/R transactions.</li> <li>General Ledger Posting Report: Summarizes journal entries.</li> <li>Temporary Files (Deleted Post-Process):</li> <li><code>?prefix?AR201S</code>: Sorted transaction file.</li> <li><code>?prefix?ARTGGG</code>: Temporary journal file.</li> <li><code>?prefix?AR211S</code>: Sorted journal file.</li> <li><code>?prefix?ARTRGG</code>: Input transaction file (scratched after processing).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Validate the environment prefix and set file labels using the prefix and journal date (e.g., <code>G073025ARTRGG</code>).</li> <li> <p>Ensure Y2K-compliant date handling for all operations.</p> </li> <li> <p>Validate Journal Date:</p> </li> <li> <p>Check that the input journal date is in <code>MMDDYY</code> format and valid:</p> <ul> <li>Month: 1\u201312.</li> <li>Day: \u2264 31 (or \u2264 30 for April, June, September, November; \u2264 28 or 29 for February, based on leap year).</li> <li>Leap Year Calculation:</li> <li>If year \u2260 00, year is divisible by 4.</li> <li>If year = 00, combine with century (e.g., <code>y2kcen</code>) and check if divisible by 400.</li> <li>If invalid, return error code with message \"INVALID DATE\" and abort.</li> </ul> </li> <li> <p>Sort A/R Transactions:</p> </li> <li>Read input file <code>?prefix?ARTRGG</code>.</li> <li>Filter records: Exclude where position 1 = 'C' or 'D' or position 54 = 'C' or 'E'.</li> <li>Sort by:<ul> <li>Company code (<code>TRCO</code>, positions 7\u20138).</li> <li>Invoice class code (<code>TRICCD</code>, positions 191\u2013192).</li> <li>Transaction type (<code>TRTYPE</code>, position 31).</li> <li>Customer/invoice number (<code>TRCUST/TRINV#</code>, positions 9\u201321).</li> </ul> </li> <li> <p>Output sorted records to <code>?prefix?AR201S</code>.</p> </li> <li> <p>Post A/R Transactions:</p> </li> <li>Process sorted transactions from <code>?prefix?AR201S</code>.</li> <li>Update:<ul> <li><code>?prefix?ARCUST</code>: Customer balances and status.</li> <li><code>?prefix?ARDETL</code>: Transaction details (e.g., invoice amounts, dates).</li> <li><code>?prefix?ARHIST</code>: Transaction history records.</li> <li><code>?prefix?ARDIGG</code>: Accounting distributions (e.g., debit/credit accounts).</li> <li><code>?prefix?ARCONT</code>: Control totals or parameters.</li> </ul> </li> <li> <p>Generate Transaction Register report, routed to:</p> <ul> <li><code>QUSRSYS/ARPOST</code> if prefix = 'G'.</li> <li><code>QUSRSYS/TESTOUTQ</code> otherwise.</li> </ul> </li> <li> <p>Generate Journal Entries:</p> </li> <li>Process <code>?prefix?ARDIGG</code> to create sales journal (S/J) or cash receipt (C/R) entries.</li> <li>Output journal entries to <code>?prefix?ARTGGG</code>.</li> <li> <p>Update <code>?prefix?ARCONT</code> with journal control data.</p> </li> <li> <p>Sort Journal Entries:</p> </li> <li>Read <code>?prefix?ARTGGG</code>.</li> <li>Sort by:<ul> <li>Company code (<code>GDCO</code>, positions 2\u20133).</li> <li>Journal/reference number (<code>JRNL/REF</code>, positions 4\u20137).</li> <li>Summary flag (position 96).</li> <li>Account number (positions 13\u201320).</li> <li>Credit/debit code (position 12).</li> </ul> </li> <li> <p>Output sorted entries to <code>?prefix?AR211S</code>.</p> </li> <li> <p>Post to General Ledger:</p> </li> <li>Process <code>?prefix?AR211S</code> and <code>?prefix?ARTGGG</code>.</li> <li>Update:<ul> <li><code>?prefix?TEMGEN</code>: Temporary general ledger entries.</li> <li><code>?prefix?GLMAST</code>: General ledger accounts (e.g., debits/credits).</li> <li><code>?prefix?ARDALY</code> (if exists): Daily A/R summary.</li> <li><code>?prefix?ARCONT</code>: Control totals.</li> </ul> </li> <li> <p>Generate General Ledger Posting Report, routed as per step 4.</p> </li> <li> <p>Cleanup:</p> </li> <li>Delete temporary files (<code>?prefix?ARTRGG</code>, <code>?prefix?AR201S</code>, <code>?prefix?ARTGGG</code>, <code>?prefix?AR211S</code>).</li> <li>If <code>?prefix?ARDALY</code> exists, create it with 1,000 records (96 bytes each) before general ledger posting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Date Validation:</li> <li>Must be a valid date in <code>MMDDYY</code> format.</li> <li> <p>Invalid dates abort the process with an error message.</p> </li> <li> <p>Transaction Filtering:</p> </li> <li> <p>Exclude records where position 1 = 'C' or 'D' or position 54 = 'C' or 'E' to ensure only valid A/R transactions are processed.</p> </li> <li> <p>Sorting:</p> </li> <li>Transactions sorted by company, invoice class, transaction type, and customer/invoice number.</li> <li> <p>Journal entries sorted by company, journal/reference, summary flag, account number, and credit/debit code.</p> </li> <li> <p>File Updates:</p> </li> <li>Update customer, detail, history, distribution, and general ledger files with accurate transaction and journal data.</li> <li> <p>Maintain control totals in <code>?prefix?ARCONT</code>.</p> </li> <li> <p>Reporting:</p> </li> <li> <p>Generate transaction register and general ledger reports, routed to production (<code>ARPOST</code>) or test (<code>TESTOUTQ</code>) queue based on environment prefix.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Temporary files are retained for the job duration and deleted afterward.</li> <li> <p>Daily file (<code>?prefix?ARDALY</code>) is optional and built only if required.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li>Use century data (<code>y2kcen</code>, <code>y2kcmp</code>) for accurate date and leap year calculations.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid Journal Date: Return error code and message \"INVALID DATE\".</li> <li>File Access Errors: Abort if any required file (<code>?prefix?ARTRGG</code>, <code>?prefix?ARCUST</code>, etc.) is unavailable.</li> <li>Sort Failures: Abort if sorting fails due to invalid data or resource limits.</li> <li>Report Output: Ensure reports are generated even if partial processing occurs, with errors noted.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input transaction file (<code>?prefix?ARTRGG</code>) is pre-populated with valid A/R data.</li> <li>All database files (<code>?prefix?ARCUST</code>, <code>?prefix?ARDETL</code>, etc.) are accessible and correctly formatted.</li> <li>Environment prefix determines file naming and output queue, defaulting to test if not 'G'.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#notes","title":"Notes","text":"<ul> <li>Non-Interactive Design: The function replaces the interactive screen prompts (<code>AR200P</code>) with programmatic input for the journal date, streamlining the process for batch or automated execution.</li> <li>Calculations: The primary calculation is the journal date validation, including leap year checks using century data. Other calculations (e.g., transaction amounts, ledger postings) are assumed to occur within <code>AR200</code>, <code>AR210</code>, and <code>AR211</code>, but specific details require their source code.</li> <li>File Prefixing: The <code>?prefix?</code> (e.g., <code>G073025</code>) combines the environment prefix and journal date, ensuring unique file labels per run.</li> <li>Extensibility: The function can be adapted for API integration or scheduled batch jobs by passing inputs via parameters.</li> </ul> <p>If you need further refinements, additional use cases, or analysis of related programs (e.g., <code>AR200</code>, <code>AR210</code>, <code>AR211</code>), please provide their source or let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/","title":"AR300 RPG36","text":"<p>The provided document is an RPG/36 program, <code>AR300.rpg36.txt</code>, called from the OCL program <code>AR300P.ocl36.txt</code>. This program generates monthly accounts receivable (A/R) statements and prepares the <code>ARDETL</code> file for purging. It processes customer and transaction data, calculates finance charges, and produces multiple output reports with different formats. Below, I\u2019ll explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#process-steps-of-the-ar300-rpg36-program","title":"Process Steps of the AR300 RPG/36 Program","text":"<ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P064</code>: Program identifier for <code>AR300</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>ARDETL UP F 128 128R I DISK</code>: Accounts receivable detail file, update mode, 128-byte records, indexed.</li> <li><code>AR300S IR F 30 3 3IT EDISK</code>: Input file for statement parameters, 30-byte records, indexed, externally described.</li> <li><code>ARCUST UC 384 384R 8AI 2 DISK</code>: Customer master file, update mode, 384-byte records, keyed on company/customer number.</li> <li><code>ARCONT IC F 256 256R 2AI 2 DISK</code>: A/R control file, input mode, 256-byte records, keyed on company number.</li> <li><code>BICONT IC F 256 256R 2AI 2 DISK</code>: Billing control file, input mode, 256-byte records, keyed on company number.</li> <li><code>REPORT O 132 132 OF LPRINTER</code>: Primary statement output file, 132 characters, overflow indicator <code>OF</code>.</li> <li><code>REPRT2 O 132 132 OV LPRINTER</code>: Remittance stub output, overflow indicator <code>OV</code>.</li> <li><code>REPRT3 O 132 132 OA LPRINTER</code>: Statement copy for saving (e.g., to <code>PITT-FS/SHARED/AR STATEMENTS</code>), overflow indicator <code>OA</code>.</li> <li><code>REPRT4 O 132 132 OB LPRINTER</code>: Alternate statement format, overflow indicator <code>OB</code>.</li> <li><code>REPRT5 O 132 132 OC LPRINTER</code>: Wire transfer statement format, overflow indicator <code>OC</code>.</li> </ul> </li> <li>Arrays and Data Structures:<ul> <li><code>AGE</code>: Array of 5 elements (9 digits, 2 decimals) for aging buckets (current, 01-10, 11-20, 21-30, over 30 days).</li> <li><code>MSG</code>: Array of 15 elements (70 characters) for auditor\u2019s messages (e.g., \u201cPLEASE EXAMINE THIS STATEMENT CAREFULLY\u201d).</li> <li><code>UDS</code>: Data structure for job parameters:</li> <li><code>KYALCO</code> (ALL/CO), <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (company numbers), <code>KYJOBQ</code> (job queue), <code>KYCOPY</code> (number of copies), <code>KYDATE</code> (statement date), <code>STMO</code>, <code>STDAY</code>, <code>STYR</code>, <code>DATE4</code> (date fields).</li> </ul> </li> <li> <p>Line Counter Specifications:</p> <ul> <li><code>LREPORT</code>, <code>LREPRT2</code>, <code>LREPRT3</code>, <code>LREPRT4</code>, <code>LREPRT5</code>: Define 66 lines per page, 61 lines before overflow.</li> </ul> </li> <li> <p>One-Time Initialization (<code>ONETIM</code> Subroutine):</p> </li> <li>Sets indicator <code>98</code> on to mark completion.</li> <li>Initializes <code>ZERO9</code> (9-digit, 0 decimals) to 0 for use in output calculations.</li> <li> <p>Executed only if indicator <code>98</code> is off (<code>N98</code>).</p> </li> <li> <p>Company Loop (Level Break <code>L2</code>):</p> </li> <li>Control File Access:<ul> <li>Chains to <code>ARCONT</code> using <code>ADCO</code> (company number from <code>ARDETL</code>).</li> <li>If not found (<code>95</code> on), skips further processing for the company.</li> <li>Calculates <code>LFMO</code> (last fiscal month) by subtracting 1 from <code>ACFFMO</code> (first fiscal month). If <code>LFMO &lt;= 0</code>, sets <code>LFMO = 12</code>.</li> <li>Compares <code>STMO</code> (statement month) with <code>LFMO</code>. If equal, sets <code>92</code> (last fiscal month indicator).</li> <li>Chains to <code>BICONT</code> using <code>ADCO</code>. If not found (<code>97</code> on), sets <code>64</code> (default invoicing style).</li> <li>Checks <code>BCINST</code> (invoicing style) in <code>BICONT</code>:</li> <li><code>1</code>: Sets <code>61</code> (style 1).</li> <li><code>2</code>: Sets <code>62</code> (style 2).</li> <li><code>5</code>: Sets <code>63</code> (style 5, likely wire transfer format).</li> <li>Other: Sets <code>64</code> (default format).</li> </ul> </li> <li> <p>Loop Control:</p> <ul> <li>Continues processing for each company (<code>DO</code> at <code>L2</code>).</li> </ul> </li> <li> <p>Customer Processing (<code>ARCUST</code> Subroutine):</p> </li> <li>Chains to <code>ARCUST</code> using <code>ADCOCU</code> (company/customer number from <code>ARDETL</code>).</li> <li>If not found (<code>20</code> on), sets <code>ARFIN$</code> (finance charge) to 0.</li> <li>Resets <code>PAGE</code> to 0 and indicators <code>10</code> (print statement) and <code>82</code> (finance charge calculation).</li> <li>Checks if statements are required (<code>ARSTMT \u2260 'N'</code> and indicator <code>11</code> on) to set <code>10</code>.</li> <li>Checks if wire transfer is used (<code>ARWIRE = 'Y'</code>) to set <code>49</code>.</li> <li>Validates total due (<code>ARTOTD</code>) against sum of aging buckets (<code>XFOOT AGE</code>). If unequal, sets <code>40</code>.</li> <li>Calculates finance charge balance (<code>FCBAL</code>) by summing <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>.</li> <li> <p>Sets previous balance (<code>ARPBAL = ARTOTD</code>).</p> </li> <li> <p>Transaction Processing (<code>TRANS</code> Subroutine):</p> </li> <li>Resets indicators <code>39</code>, <code>44</code>, <code>73</code> (credit transaction).</li> <li>Converts <code>ADDATE</code> (A/R date, YMD) to <code>ADMDY</code> (MDY) by multiplying by 100.0001.</li> <li>Determines transaction type (<code>ADTYPE</code>):<ul> <li><code>I</code>: Sets <code>35</code> (invoice).</li> <li><code>J</code>: Sets <code>37</code> (journal).</li> <li><code>P</code>: Sets <code>38</code> (payment).</li> </ul> </li> <li>Sets <code>44</code> (print transaction line).</li> <li>If not an invoice (<code>N35</code>), skips to <code>NOINV</code>.</li> <li>Calculates remaining amount (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Adds current month payment (<code>ADPAY</code>) to partial payment (<code>ADPART</code>).</li> <li>Recalculates remaining amount (<code>LEFTAR = ADAMT - ADPART</code>). If equal, sets <code>41</code> (paid in full).</li> <li>Checks if <code>PPINV#</code> (partial payment invoice) is 9 to set <code>15</code> (miscellaneous cash).</li> <li> <p>Checks <code>ADAGE</code> (aging code) for 1 to set <code>13</code> (past due invoice).</p> </li> <li> <p>Finance Charge Calculation (<code>L1CALC</code> Subroutine):</p> </li> <li>Resets indicators <code>80</code>, <code>83</code>, <code>85</code>.</li> <li>If finance charges apply (<code>ARFINC = 'Y'</code>), sets <code>80</code>.</li> <li>Calculates finance charge (<code>FCAMT = FCBAL * ACFINC</code>). If <code>FCAMT &gt; 0</code>, sets <code>83</code>.</li> <li>If <code>FCAMT &lt; 0.50</code>, sets <code>FCAMT = 0.50</code> and <code>85</code>.</li> <li>Adds <code>FCAMT</code> to <code>ARFIN$</code> and current due (<code>CURPRT = ARCURD + FCAMT</code>).</li> <li> <p>Moves aging amounts to print fields: <code>AR0110</code> to <code>X10PRT</code>, <code>AR1120</code> to <code>X11PRT</code>, <code>AR2130</code> to <code>X21PRT</code>, <code>AROV30</code> to <code>X31PRT</code>, <code>ARTOTD</code> to <code>TOTPRT</code>.</p> </li> <li> <p>Output Processing:</p> </li> <li>Detail Records (<code>ARDETL</code>):<ul> <li>For non-invoice transactions (<code>N35</code>), writes <code>P</code> (payment) at position 48.</li> <li>For invoices (<code>35</code>), writes <code>ADAMT</code>, <code>ADPART</code>, <code>ZERO9</code>, and <code>P</code> (paid, if <code>41</code>) or <code>S</code> (statement, if <code>N41</code>) at position 48.</li> </ul> </li> <li>Customer Totals (<code>ARCUST</code>):<ul> <li>At level break <code>L1</code>, if <code>40</code> (total mismatch) or <code>80</code> (finance charge), writes <code>ARFIN$</code> and <code>ARPBAL</code>.</li> </ul> </li> <li>REPORT (Primary Statement):<ul> <li>Prints headers (company address, date, customer info) and transaction details.</li> <li>Includes aging totals, finance charges, and \u201cCONTINUED ON NEXT PAGE\u201d if overflow (<code>OF</code>).</li> </ul> </li> <li>REPRT2 (Remittance Stub):<ul> <li>Prints remittance details (e.g., \u201cREMIT TO: COMM*PLAN DIVISION\u201d).</li> </ul> </li> <li>REPRT3 (Saved Copy):<ul> <li>Similar to <code>REPORT</code> but includes wire transfer details if <code>63</code> is on (e.g., PNC Bank info).</li> <li>Added 6/21/13 for saving to <code>PITT-FS/SHARED/AR STATEMENTS</code>.</li> </ul> </li> <li>REPRT4 (Alternate Format):<ul> <li>Prints minimal remittance info, used if <code>64</code> (default style).</li> </ul> </li> <li>REPRT5 (Wire Transfer Format):<ul> <li>Includes bank details (e.g., ABA# 031207607) for wire transfer customers (<code>63</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Statement Generation:</li> <li>Statements are printed only if <code>ARSTMT \u2260 'N'</code> and total due is non-zero (<code>11</code> on).</li> <li>Supports multiple companies (<code>KYALCO = 'ALL'</code> or specific <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>).</li> <li>Finance Charges:</li> <li>Applied if <code>ARFINC = 'Y'</code> in <code>ARCUST</code>.</li> <li>Calculated as <code>FCBAL * ACFINC</code> (from <code>ARCONT</code>), with a minimum of $0.50.</li> <li>Added to <code>ARFIN$</code> and current due (<code>ARCURD</code>).</li> <li>Aging Validation:</li> <li>Total due (<code>ARTOTD</code>) must equal sum of aging buckets (<code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>).</li> <li>Transaction Processing:</li> <li>Supports invoices (<code>I</code>), journals (<code>J</code>), and payments (<code>P</code>).</li> <li>Calculates remaining balance (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Flags paid-in-full invoices (<code>ADAMT = ADPART</code>).</li> <li>Identifies miscellaneous cash payments (<code>PPINV# = 9</code>).</li> <li>Invoicing Styles:</li> <li>Determined by <code>BCINST</code> in <code>BICONT</code>:<ul> <li><code>1</code>: Style 1 (<code>61</code>).</li> <li><code>2</code>: Style 2 (<code>62</code>).</li> <li><code>5</code>: Wire transfer format (<code>63</code>).</li> <li>Other: Default format (<code>64</code>).</li> </ul> </li> <li>Output Formats:</li> <li>Multiple reports (<code>REPORT</code>, <code>REPRT2</code>, <code>REPRT3</code>, <code>REPRT4</code>, <code>REPRT5</code>) for different purposes (primary, remittance, saved copy, wire transfer).</li> <li>Includes auditor\u2019s messages for verification.</li> <li>Purge Preparation:</li> <li>Updates <code>ARDETL</code> with payment status (<code>P</code> or <code>S</code>) to facilitate purging of paid records.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>ARDETL:</li> <li>A/R detail file (128 bytes, indexed, update mode).</li> <li>Fields: <code>ADCO</code> (company), <code>ADCUST</code> (customer), <code>ADINV#</code> (invoice), <code>ADTYPE</code> (I/J/P), <code>ADDATE</code> (YMD), <code>ADAMT</code> (amount), <code>ADAGE</code> (aging code), <code>ADPART</code> (partial payment), <code>ADPAY</code> (current month paid), <code>PPINV#</code> (partial payment invoice).</li> <li>AR300S:</li> <li>Statement parameter file (30 bytes, indexed, externally described).</li> <li>ARCUST:</li> <li>Customer master file (384 bytes, keyed on company/customer, update mode).</li> <li>Fields: <code>ARCO</code> (company), <code>ARCUST</code> (customer), <code>ARNAME</code>, <code>ARADR1</code>\u2013<code>ARADR4</code> (address), <code>ARTOTD</code> (total due), <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code> (aging), <code>ARPYMT</code> (last payment), <code>ARSTMT</code> (statements Y/N), <code>ARFIN$</code> (finance charge), <code>ARPBAL</code> (previous balance), <code>ARFINC</code> (finance charge Y/N), <code>ARM$PD</code>, <code>ARWIRE</code> (wire transfer Y/N).</li> <li>ARCONT:</li> <li>A/R control file (256 bytes, keyed on company, input mode).</li> <li>Fields: <code>ACFINC</code> (finance charge %), <code>ACFFMO</code> (first fiscal month).</li> <li>BICONT:</li> <li>Billing control file (256 bytes, keyed on company, input mode).</li> <li>Field: <code>BCINST</code> (invoicing style).</li> <li>REPORT, REPRT2, REPRT3, REPRT4, REPRT5:</li> <li>Printer files (132 characters) for statement outputs.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The program does not explicitly call external programs (e.g., via <code>CALL</code>).</li> <li>It is invoked by the OCL program (<code>AR300P.ocl36.txt</code>) as the <code>AR300</code> procedure but does not call other programs itself.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Purpose: Generates detailed A/R statements with customer, transaction, and aging information, and prepares <code>ARDETL</code> for purging by marking paid records.</li> <li>Output Variants: Multiple printer files support different statement formats, including a saved copy (<code>REPRT3</code>) and wire transfer details (<code>REPRT5</code>).</li> <li>Integration with OCL: Called as <code>AR300</code> in the OCL, using parameters like <code>?9?</code> for file labels and <code>KY</code> fields for input.</li> <li>Modification: Addition of <code>REPRT5</code> (6/21/13) for wire transfer format enhances functionality for specific customers.</li> </ul> <p>If you need further analysis or specific details (e.g., output format specifics or purge logic), let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/","title":"AR300P OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR300P.ocl36.txt</code>, which is used on IBM midrange systems (like AS/400 or IBM i) to control the execution of programs and manage file operations. OCL is typically used to define job steps, invoke programs, and handle file processing in RPG (Report Program Generator) applications. Below, I\u2019ll explain the process steps of this OCL program, identify the external programs called, and list any tables or files referenced.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#process-steps-of-the-ar300p-ocl-program","title":"Process Steps of the AR300P OCL Program","text":"<ol> <li>Comment Block:</li> <li> <p><code>** MONTHLY STATEMENTS **</code>:</p> <ul> <li>This is a comment indicating the purpose of the program, likely related to generating monthly statements for accounts receivable (AR).</li> </ul> </li> <li> <p>Program Invocation:</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>The OCL script starts by calling an external program named <code>GSGENIEC</code>. This program is likely a utility or initialization program, possibly for setting up the environment or performing prerequisite checks before the main processing begins.</li> <li>No parameters are explicitly passed to <code>GSGENIEC</code> in this call.</li> </ul> </li> <li> <p>Conditional Check:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This is a conditional statement checking the value of a substitution expression <code>?L'506,3'?</code>. This likely refers to a system or job variable (e.g., a local data area or parameter) at position 506 for 3 characters.</li> <li>If the condition evaluates to <code>YES</code> (true), the OCL script executes a <code>RETURN</code>, which terminates the OCL procedure immediately, preventing further execution.</li> <li>This acts as a gatekeeper to ensure certain conditions are met before proceeding.</li> </ul> </li> <li> <p>Procedure Invocation:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code>. The commas indicate placeholders for parameters, and <code>?9?</code> is a substitution variable, likely representing a parameter such as a library, file, or job-specific value.</li> <li>The exact purpose of <code>SCPROCP</code> is not clear from the OCL alone, but it could be a system procedure for setting up the environment or preparing data for the main program.</li> </ul> </li> <li> <p>Local Variable Initialization:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>This command initializes all local data areas (used for passing data between programs or jobs) to blanks. This ensures a clean slate for any variables used in subsequent steps.</li> </ul> </li> <li> <p>Date Conversion Utility:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This invokes a system utility or command named <code>GSY2K</code>, likely related to Year 2000 (Y2K) date handling. It may convert or validate dates to ensure compatibility with two-digit or four-digit year formats, which was a common requirement in older systems.</li> </ul> </li> <li> <p>Switch Setting:</p> </li> <li> <p><code>// SWITCH 0XXXXXXX</code>:</p> <ul> <li>This sets a job switch (a set of 8 binary flags) to <code>0XXXXXXX</code>. The first switch is set to <code>0</code>, and the remaining switches (2\u20138) are unspecified (<code>X</code>), meaning their values are not explicitly set here and may retain their previous state or default to a system-defined value.</li> <li>Job switches are used to control program flow or conditional logic in RPG or OCL.</li> </ul> </li> <li> <p>Program Load:</p> </li> <li> <p><code>// LOAD AR300P</code>:</p> <ul> <li>This loads the main RPG program named <code>AR300P</code> into memory for execution. This is likely the core program responsible for generating the monthly statements.</li> </ul> </li> <li> <p>File Declaration:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> to be used by the program.</li> <li><code>LABEL-?9?ARCONT</code> indicates that the file\u2019s label (or dataset name) is constructed using the substitution variable <code>?9?</code> concatenated with <code>ARCONT</code>. For example, if <code>?9?</code> is a library name like <code>PROD</code>, the file might be <code>PROD.ARCONT</code>.</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple jobs or programs to access it concurrently (read-only or with appropriate locking).</li> <li>This file is likely the accounts receivable control file containing data needed for statement generation.</li> </ul> </li> <li> <p>Program Execution:</p> <ul> <li><code>// RUN</code>:</li> <li>Executes the loaded program (<code>AR300P</code>). This is where the main processing for monthly statements occurs, using the <code>ARCONT</code> file.</li> </ul> </li> <li> <p>Switch Check and Cancellation:</p> <ul> <li><code>// IF SWITCH1-1 CANCEL</code>:</li> <li>Checks the state of the first job switch (set earlier to <code>0</code> in <code>SWITCH 0XXXXXXX</code>).</li> <li>If the first switch is <code>1</code> (which would indicate an error or specific condition set by <code>AR300P</code> or a prior step), the job is canceled, terminating the OCL procedure.</li> <li>Since the switch was initially set to <code>0</code>, cancellation would only occur if <code>AR300P</code> or another step modifies the switch.</li> </ul> </li> <li> <p>Second Procedure Invocation:</p> <ul> <li><code>// AR300 ,,,,,,,,?9?</code>:</li> <li>Invokes another procedure named <code>AR300</code>, again with <code>?9?</code> as a parameter.</li> <li>This could be a follow-up procedure to handle post-processing tasks (e.g., cleanup, logging, or additional report generation).</li> <li>The commas indicate placeholders for parameters that are either unused or defaulted.</li> </ul> </li> <li> <p>Final Local Variable Initialization:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Resets all local data areas to blanks again, likely to clear any residual data before the job ends or before invoking the <code>AR300</code> procedure.</li> </ul> </li> <li> <p>Final Switch Setting:</p> <ul> <li><code>// SWITCH 00000000</code>:</li> <li>Resets all job switches to <code>0</code>, ensuring a clean state for the end of the job or for any subsequent processing.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs or procedures: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility program for environment setup or validation. 2. SCPROCP:    - Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.    - A system or custom procedure, possibly for job setup or data preparation. 3. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A date-handling utility, likely for Y2K compliance or date conversions. 4. AR300P:    - Loaded and executed via <code>// LOAD AR300P</code> and <code>// RUN</code>.    - The main RPG program responsible for generating monthly statements. 5. AR300:    - Invoked via <code>// AR300 ,,,,,,,,?9?</code>.    - A procedure, possibly for post-processing or additional tasks related to <code>AR300P</code>.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following file: 1. ARCONT:    - Declared via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - Likely an accounts receivable control file containing data such as customer balances, transaction details, or statement information.    - The <code>?9?</code> substitution variable suggests the file resides in a library or location specified at runtime.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variable <code>?9?</code>: This variable is used multiple times (<code>SCPROCP</code>, <code>ARCONT</code>, <code>AR300</code>). It likely represents a dynamic value, such as a library name, job parameter, or environment-specific setting, passed to the OCL at runtime.</li> <li>Switches: The use of job switches (<code>SWITCH 0XXXXXXX</code>, <code>IF SWITCH1-1</code>) indicates conditional logic to control job flow, likely for error handling or branching based on the outcome of <code>AR300P</code>.</li> <li>Environment: The OCL syntax and commands (e.g., <code>LOAD</code>, <code>FILE</code>, <code>SWITCH</code>) are specific to IBM midrange systems, suggesting this program runs on an AS/400 or IBM i system.</li> <li>Limitations: Without the RPG source code for <code>AR300P</code> or documentation for <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR300</code>, the exact functionality of these components is inferred based on typical OCL and RPG patterns. Similarly, no explicit tables (e.g., database tables) are mentioned beyond the <code>ARCONT</code> file.</li> </ul> <p>If you have additional context, such as the RPG source code for <code>AR300P</code> or details about the <code>?9?</code> parameter, I can provide a more detailed analysis. Let me know if you need further clarification!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/","title":"AR300P RPGLE","text":"<p>The provided document is an RPGLE (RPG IV) program, <code>AR300P.rpgle.txt</code>, which is called from the OCL program <code>AR300P.ocl36.txt</code>. This RPG program is designed to prompt users for input parameters to generate monthly statements for accounts receivable (AR). It validates user input, checks data against files, and displays error messages if validation fails. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#process-steps-of-the-ar300p-rpgle-program","title":"Process Steps of the AR300P RPGLE Program","text":"<ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group (not the default), allowing better control over resources.</li> <li><code>H DFTNAME(AR300P)</code>: Specifies the default program name as <code>AR300P</code>.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Handles numeric fields with zoned or packed decimal formats during conversion.</li> </ul> </li> <li>File Declarations:<ul> <li><code>AR300PD CF E WORKSTN</code>: Defines a workstation file (<code>AR300PD</code>) for interactive screen input/output, using Profound UI (<code>Handler('PROFOUNDUI(HANDLER)')</code>) for the user interface.</li> <li><code>ARCONT IF F 256 2AIDISK KEYLOC(2)</code>: Defines an input file (<code>ARCONT</code>) with a record length of 256 bytes, keyed on position 2 (company number, <code>acco</code>), used for accounts receivable control data.</li> <li><code>GSCONT IF F 512 2AIDISK KEYLOC(2)</code>: Defines another input file (<code>GSCONT</code>) with a record length of 512 bytes, also keyed on position 2 (company number, <code>gxcono</code>), likely for global system control data.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>dco</code>: A 35-character array (10 elements) to store company numbers and names.</li> <li><code>com</code>: A 40-character array (7 elements) initialized with compile-time data (<code>CTDATA</code>) for error messages (e.g., \"INVALID STATEMENT DATE\").</li> <li><code>uds</code>: A data structure for job parameters, including:</li> <li><code>kyalco</code> (ALL/CO selection), <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> (company numbers), <code>kydate</code> (statement date), <code>kycmtd</code> (month-to-date flag), <code>kycytd</code> (year-to-date flag), <code>kycopy</code> (number of copies), <code>y2kcen</code> (Y2K century), <code>y2kcmp</code> (Y2K comparison year).</li> </ul> </li> <li> <p>Indicators: Used extensively for controlling program flow and screen output (e.g., <code>*IN01</code>, <code>*IN09</code>, <code>*IN81</code>, <code>*IN90</code>).</p> </li> <li> <p>Main Processing Logic:</p> </li> <li>Workstation File Read:<ul> <li>Checks <code>qsctl</code> (a control field, likely from the screen or job).</li> <li>If <code>qsctl</code> is blank, sets <code>*IN09</code> (initial screen display) and <code>qsctl</code> to 'R', then proceeds.</li> <li>Otherwise, sets <code>*IN01</code> (process input), reads the screen file (<code>AR300PD</code>), and returns if the last record indicator (<code>LR</code>) is set.</li> </ul> </li> <li>Indicator Setup:<ul> <li>Resets indicators (<code>*IN20</code>, <code>*IN81</code>, <code>*IN90</code>, <code>*IN30</code>\u2013<code>*IN37</code>) to ensure a clean state.</li> <li>Clears the <code>msg</code> field (40 characters) for error messages.</li> </ul> </li> <li>F3 Key Handling:<ul> <li>If <code>*INKG</code> (F3 key) is pressed, sets <code>*INU1</code> and <code>*INLR</code> (program termination), clears <code>*IN01</code> and <code>*IN09</code>, and jumps to the <code>end</code> tag to exit.</li> </ul> </li> <li>Initial Screen Display:<ul> <li>If <code>*IN09</code> is on, sets <code>*IN81</code> (write screen) and executes the <code>onetim</code> subroutine for one-time initialization.</li> </ul> </li> <li>Input Processing:<ul> <li>If <code>*IN01</code> is on, executes the <code>edit</code> subroutine to validate user input.</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>If <code>*IN81</code> is off, sets <code>*INLR</code> to terminate the program.</li> <li>Writes to the <code>AR300PD</code> screen file if <code>*IN81</code> is on, displaying the input prompt or error messages.</li> </ul> </li> <li> <p>Edit Subroutine (<code>edit</code>):</p> </li> <li>Security Code Validation:<ul> <li>Chains to <code>ARCONT</code> using key <code>01</code> (company number).</li> <li>Compares <code>kysec</code> (input security code) with <code>acsecr</code> (security code in <code>ARCONT</code>).</li> <li>If mismatched, sets <code>*IN30</code>, <code>*IN81</code>, <code>*IN90</code>, and displays error message <code>com(7)</code> (\"INVALID SECURITY CODE\").</li> </ul> </li> <li>Date Validation:<ul> <li>Moves <code>kydate</code> to <code>mmddyy</code> and calls <code>@dtedt</code> to validate the date.</li> <li>If <code>*IN79</code> (date error) is set, displays <code>com(1)</code> (\"INVALID STATEMENT DATE\") and sets <code>*IN31</code>, <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>ALL/CO Selection Validation:<ul> <li>Checks if <code>kyalco</code> is 'ALL' or 'CO '.</li> <li>If <code>kyalco</code> is 'ALL' or 'CO ', validates further:</li> <li>If <code>kyalco</code> is neither 'ALL' nor 'CO', displays <code>com(2)</code> (\"ENTER ALL OR CO\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Company Number Validation:<ul> <li>If <code>kyalco</code> is 'CO', checks <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:</li> <li>If all are zero, displays <code>com(3)</code> (\"IF CO, THEN ENTER VALID COMPANIES\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> <li>If <code>kyalco</code> is 'ALL' and any company numbers are non-zero, displays <code>com(4)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> <li>For each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:</li> <li>Positions the <code>ARCONT</code> file using <code>SETLL</code>.</li> <li>Reads the record and checks if it\u2019s deleted (<code>acdel = 'D'</code>) or if the company number (<code>acco</code>) matches.</li> <li>If no valid record is found, displays <code>com(5)</code> (\"INVALID COMPANY NUMBER\") and sets <code>*IN33</code>, <code>*IN34</code>, or <code>*IN35</code> (for <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>) plus <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Month-to-Date/Year-to-Date Flags:<ul> <li>Validates <code>kycmtd</code> and <code>kycytd</code> (must be 'Y', 'N', or blank).</li> <li>If invalid, displays <code>com(6)</code> (\"INVALID PARAMETER\") and sets <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Number of Copies:<ul> <li>If <code>kycopy</code> is zero, sets it to 1.</li> </ul> </li> <li> <p>Final Setup:</p> <ul> <li>Sets <code>*IN11</code> to indicate successful validation.</li> </ul> </li> <li> <p>One-Time Subroutine (<code>onetim</code>):</p> </li> <li>Initialize Company Array:<ul> <li>Clears the <code>dco</code> array and sets index <code>x</code> to 1.</li> <li>Positions <code>ARCONT</code> at the beginning (<code>aclim = 00</code>).</li> <li>Reads <code>ARCONT</code> records, skipping deleted records (<code>acdel = 'D'</code>).</li> <li>Stores company number (<code>acco</code>) and name (<code>acname</code>) in <code>dco(x)</code> until 10 companies are loaded or end of file is reached.</li> <li>Moves <code>dco</code> elements to individual fields (<code>DCO1</code>\u2013<code>DCO10</code>) for screen display.</li> </ul> </li> <li> <p>Default Parameters:</p> <ul> <li>Chains to <code>GSCONT</code> with key <code>00</code>.</li> <li>If a record is found and <code>gxcono</code> is non-zero, sets <code>kyalco</code> to 'CO ' and <code>kyco1</code> to <code>gxcono</code>.</li> <li>Otherwise, sets <code>kyalco</code> to 'ALL'.</li> <li>Sets defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 01</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3 = 0</code>.</li> <li>Sets <code>*IN10</code> to indicate completion.</li> </ul> </li> <li> <p>Date Edit Subroutine (<code>@dtedt</code>):</p> </li> <li> <p>Validates the input date (<code>mmddyy</code>):</p> <ul> <li>Breaks down into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Checks if month is valid (1\u201312).</li> <li>For February, validates days (28 or 29 for leap years) using century (<code>y2kcen</code>) and year calculations.</li> <li>For other months, checks days (30 or 31 based on month).</li> <li>Sets <code>*IN79</code> if any validation fails.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Writes to <code>AR300PD</code> if <code>*IN81</code> is on, outputting fields like <code>kysec</code>, <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, <code>dco</code>, <code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>, and <code>msg</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Security Code:</li> <li>The input security code (<code>kysec</code>) must match the security code (<code>acsecr</code>) in the <code>ARCONT</code> file for the company.</li> <li>Statement Date:</li> <li>The date (<code>kydate</code>) must be valid (checked via <code>@dtedt</code> for month, day, and leap year).</li> <li>ALL/CO Selection:</li> <li><code>kyalco</code> must be 'ALL' (process all companies) or 'CO ' (specific companies).</li> <li>If 'CO ', at least one of <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must be non-zero.</li> <li>If 'ALL', <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must be zero.</li> <li>Company Numbers:</li> <li>Each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must exist in <code>ARCONT</code>, not be deleted (<code>acdel \u2260 'D'</code>), and match the company number (<code>acco</code>).</li> <li>Month-to-Date/Year-to-Date:</li> <li><code>kycmtd</code> and <code>kycytd</code> must be 'Y', 'N', or blank.</li> <li>Number of Copies:</li> <li><code>kycopy</code> defaults to 1 if zero.</li> <li>Error Handling:</li> <li>Displays specific error messages (<code>com(1)</code>\u2013<code>com(7)</code>) for validation failures.</li> <li>Returns to the screen for correction if errors occur.</li> <li>Initialization:</li> <li>Defaults are set based on <code>GSCONT</code> (company number or 'ALL') and hardcoded values (<code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>).</li> <li>Up to 10 companies are loaded for display.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AR300PD:</li> <li>Workstation file (display file) for user interaction via Profound UI.</li> <li>Contains fields like <code>kysec</code>, <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, <code>dco</code>, <code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>, <code>msg</code>.</li> <li>ARCONT:</li> <li>Accounts receivable control file (256 bytes, keyed on company number at position 2).</li> <li>Fields:<ul> <li><code>acdel</code> (1): Delete flag ('D' for deleted).</li> <li><code>acco</code> (2\u20133): Company number.</li> <li><code>acname</code> (4\u201333): Company name.</li> <li><code>acsecr</code> (84\u201391): Security code for statements.</li> </ul> </li> <li>GSCONT:</li> <li>Global system control file (512 bytes, keyed on company number at position 2).</li> <li>Fields:<ul> <li><code>gxdel</code> (1): Delete flag.</li> <li><code>gxcono</code> (77\u201378): Company number.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPG program does not explicitly call external programs (e.g., via <code>CALL</code> or <code>QCMDEXC</code>).</li> <li>It interacts with the Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) for screen processing, but this is a runtime environment, not a program call.</li> <li>The OCL program (<code>AR300P.ocl36.txt</code>) calls <code>AR300P</code>, but within <code>AR300P.rpgle</code>, no further programs are invoked.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Conversion Context: The program was converted on 04/07/23 using TARGET/400, with 161 lines added, 5 modified, and 297 processed. Prefixes (<code>T4A</code>, <code>T4M</code>, <code>T4O</code>) indicate added, modified, or original lines.</li> <li>Y2K Handling: The <code>@dtedt</code> subroutine and fields like <code>y2kcen</code>, <code>y2kcmp</code> address Year 2000 date issues, ensuring correct leap year calculations.</li> <li>Profound UI: The use of <code>Handler('PROFOUNDUI(HANDLER)')</code> indicates a modernized user interface, likely a web-based front-end for the AS/400.</li> <li>Error Messages: The <code>com</code> array provides clear, user-friendly error messages, enhancing usability.</li> <li>Integration with OCL: The OCL program loads <code>AR300P</code> and provides the <code>ARCONT</code> file with a dynamic label (<code>?9?ARCONT</code>). The RPG program uses this file for validation.</li> </ul> <p>If you need further details, such as a deeper dive into specific validations or integration with other system components, let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/","title":"Summary AR300P OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#list-of-use-cases-implemented-by-the-program-stack","title":"List of Use Cases Implemented by the Program Stack","text":"<p>The program stack, consisting of <code>AR300P.ocl36.txt</code>, <code>AR300P.rpgle.txt</code>, and <code>AR300.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate Monthly Accounts Receivable (A/R) Statements:</li> <li>This use case involves prompting the user for input parameters (via <code>AR300P.rpgle</code>), validating those inputs, and generating A/R statements for selected companies or all companies, including transaction details, aging information, and finance charges (via <code>AR300.rpg36</code>). It also prepares the <code>ARDETL</code> file for purging by marking paid transactions.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#ar-statement-generation-function-requirements","title":"A/R Statement Generation Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#overview","title":"Overview","text":"<p>The <code>generateARStatements</code> function generates monthly accounts receivable (A/R) statements for specified companies or all companies, calculates finance charges, and prepares the A/R detail file for purging. It processes input parameters, validates them, and produces formatted statement outputs with transaction details, aging buckets, and auditor instructions.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Security Code (<code>kysec</code>, 8 chars): Validates access to company data.</li> <li>Statement Date (<code>kydate</code>, 6 digits, MMDDYY): Date for statements.</li> <li>Company Selection (<code>kyalco</code>, 3 chars): 'ALL' for all companies or 'CO ' for specific companies.</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, 2 digits each): Specific company numbers if <code>kyalco = 'CO '</code>.</li> <li>Month-to-Date Flag (<code>kycmtd</code>, 1 char): 'Y', 'N', or blank for month-to-date reporting.</li> <li>Year-to-Date Flag (<code>kycytd</code>, 1 char): 'Y', 'N', or blank for year-to-date reporting.</li> <li>Number of Copies (<code>kycopy</code>, 2 digits): Number of statement copies (defaults to 1 if 0).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Statement Reports:</li> <li>Primary statement (<code>REPORT</code>): Customer details, transactions, aging, finance charges.</li> <li>Remittance stub (<code>REPRT2</code>): Payment submission details.</li> <li>Saved copy (<code>REPRT3</code>): For archival to <code>PITT-FS/SHARED/AR STATEMENTS</code>.</li> <li>Alternate format (<code>REPRT4</code>): Minimal remittance info.</li> <li>Wire transfer format (<code>REPRT5</code>): Includes bank details for wire transfer customers.</li> <li>Updated <code>ARDETL</code> File: Marks transactions as paid ('P') or statement ('S') for purging.</li> <li>Error Messages: Returned if validation fails (e.g., \"INVALID STATEMENT DATE\").</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Call <code>GSGENIEC</code> to set up the job environment.</li> <li>Check job variable (<code>L'506,3'</code>) to determine if processing should proceed; exit if condition met.</li> <li>Execute <code>SCPROCP</code> with library parameter (<code>?9?</code>) for setup.</li> <li>Run <code>GSY2K</code> for date format handling.</li> <li> <p>Reset local data areas and job switches.</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Verify security code (<code>kysec</code>) against <code>acsecr</code> in <code>ARCONT</code> for the company.</li> <li>Validate <code>kydate</code> (MMDDYY) for correct month (1\u201312), day (1\u201331, or 28/29 for February with leap year check), and year (using <code>y2kcen</code>).</li> <li>Ensure <code>kyalco</code> is 'ALL' or 'CO '.</li> <li>If <code>kyalco = 'CO '</code>, validate <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> exist in <code>ARCONT</code>, are not deleted (<code>acdel \u2260 'D'</code>), and match <code>acco</code>.</li> <li>If <code>kyalco = 'ALL'</code>, ensure <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> are 0.</li> <li>Validate <code>kycmtd</code> and <code>kycytd</code> are 'Y', 'N', or blank.</li> <li>Set <code>kycopy</code> to 1 if 0.</li> <li> <p>Return error messages for any validation failure and halt processing.</p> </li> <li> <p>Load Company Data:</p> </li> <li>Retrieve up to 10 companies from <code>ARCONT</code> (non-deleted records) for display or processing.</li> <li>If <code>GSCONT</code> has a valid company number (<code>gxcono</code>), set <code>kyalco = 'CO '</code> and <code>kyco1 = gxcono</code>; otherwise, set <code>kyalco = 'ALL'</code>.</li> <li> <p>Set defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 1</code>.</p> </li> <li> <p>Process Companies and Customers:</p> </li> <li> <p>For each company (<code>ADCO</code> from <code>ARDETL</code>, filtered by <code>kyalco</code> and <code>kyco1\u20133</code>):</p> <ul> <li>Validate fiscal month (<code>ACFFMO</code> from <code>ARCONT</code>) against statement month (<code>STMO</code>).</li> <li>Determine invoicing style (<code>BCINST</code> from <code>BICONT</code>): '1' (style 1), '2' (style 2), '5' (wire transfer), or default.</li> <li>For each customer (<code>ADCUST</code> from <code>ARDETL</code>):</li> <li>Retrieve customer data from <code>ARCUST</code> (<code>ARNAME</code>, <code>ARADR1\u20134</code>, <code>ARTOTD</code>, <code>ARCURD</code>, <code>AR0110\u2013AROV30</code>, <code>ARSTMT</code>, <code>ARFINC</code>, <code>ARWIRE</code>).</li> <li>Skip if <code>ARSTMT = 'N'</code> or total due is 0.</li> </ul> </li> <li> <p>Process Transactions:</p> </li> <li> <p>For each transaction in <code>ARDETL</code>:</p> <ul> <li>Identify type (<code>ADTYPE</code>): 'I' (invoice), 'J' (journal), 'P' (payment).</li> <li>Calculate remaining amount (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Add current month payment (<code>ADPAY</code>) to <code>ADPART</code>.</li> <li>Flag as paid (<code>P</code>) if <code>ADAMT = ADPART</code>, else statement (<code>S</code>).</li> <li>Mark miscellaneous cash if <code>PPINV# = 9</code>.</li> <li>Note past due invoices (<code>ADAGE = 1</code>).</li> </ul> </li> <li> <p>Calculate Finance Charges:</p> </li> <li>If <code>ARFINC = 'Y'</code> in <code>ARCUST</code>, calculate <code>FCAMT = (AR0110 + AR1120 + AR2130 + AROV30) * ACFINC</code> (from <code>ARCONT</code>).</li> <li>Set <code>FCAMT = 0.50</code> if less than 0.50.</li> <li> <p>Add <code>FCAMT</code> to <code>ARFIN$</code> and <code>ARCURD</code>.</p> </li> <li> <p>Generate Statements:</p> </li> <li>Produce statements based on invoicing style:<ul> <li>Style 1 (<code>61</code>): Standard format (<code>REPORT</code>).</li> <li>Style 2 (<code>62</code>): Remittance stub (<code>REPRT2</code>).</li> <li>Style 5 (<code>63</code>): Wire transfer with bank details (<code>REPRT3</code>, <code>REPRT5</code>).</li> <li>Default (<code>64</code>): Minimal format (<code>REPRT4</code>).</li> </ul> </li> <li>Include customer details, transaction lines (date, invoice, charge, payment, balance), aging totals, finance charges, and auditor\u2019s messages.</li> <li> <p>Save a copy to <code>PITT-FS/SHARED/AR STATEMENTS</code> (<code>REPRT3</code>).</p> </li> <li> <p>Prepare for Purge:</p> </li> <li>Update <code>ARDETL</code> with 'P' (paid) or 'S' (statement) to mark records for purging.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Statement Eligibility: Print only if <code>ARSTMT \u2260 'N'</code> and <code>ARTOTD \u2260 0</code>.</li> <li>Company Selection: Process all companies (<code>kyalco = 'ALL'</code>) or specific valid companies (<code>kyalco = 'CO '</code>, <code>kyco1\u20133</code> exist in <code>ARCONT</code>).</li> <li>Date Validation: <code>kydate</code> must be a valid MMDDYY (1\u201312 months, 1\u201331 days, 28/29 for February with leap year logic).</li> <li>Finance Charges: Apply if <code>ARFINC = 'Y'</code>, minimum $0.50, based on overdue amounts (<code>AR0110 + AR1120 + AR2130 + AROV30</code>).</li> <li>Aging Accuracy: <code>ARTOTD</code> must equal sum of aging buckets (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30</code>).</li> <li>Transaction Status: Mark <code>ARDETL</code> records as paid (<code>P</code>) if fully paid, else statement (<code>S</code>).</li> <li>Output Formats: Support multiple formats (standard, remittance, wire transfer, archived copy) based on <code>BCINST</code>.</li> <li>Security: Validate <code>kysec</code> against <code>acsecr</code> in <code>ARCONT</code>.</li> <li>Defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 1</code> if not specified.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific messages for validation failures:</li> <li>Invalid security code, date, company selection, company numbers, or flags.</li> <li>Halt processing and return errors to caller for correction.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#files-used","title":"Files Used","text":"<ul> <li>ARCONT: Company control (security code, finance charge %, fiscal month).</li> <li>BICONT: Billing control (invoicing style).</li> <li>ARCUST: Customer master (name, address, aging, statement flag).</li> <li>ARDETL: A/R details (transactions, amounts, aging code).</li> <li>AR300S: Statement parameters.</li> <li>GSCONT: Global system control (default company).</li> <li>REPORT, REPRT2\u20135: Printer files for statement outputs.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/","title":"AR810U RPGLE","text":"<p>The provided RPGLE program, <code>AR810U.rpgle</code>, is an AR (Accounts Receivable) Invoice Inquiry program written in free-format RPGLE for an IBM i system. It displays invoice details for a given company and customer in a subfile (a scrolling list on a workstation display). Below is an explanation of the process steps, followed by the external programs called and the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#process-steps-of-the-ar810u-program","title":"Process Steps of the AR810U Program","text":"<ol> <li>Program Initialization (OneTime Subroutine):</li> <li>Check Genie Environment: The program calls <code>GSGENIE2C</code> to determine if it\u2019s running in the Genie environment (a web-based interface). If <code>genievar</code> is not 'YES', the program terminates immediately.</li> <li>Set Default Company: Retrieves the default company (<code>gxcono</code>) from the <code>GSCONT</code> file. If found and non-zero, sets the company code (<code>cco</code>) and positions the cursor on the customer field (<code>*in11 = *ON</code>). Otherwise, positions the cursor on the company field (<code>*in11 = *OFF</code>).</li> <li> <p>Set Default Open Invoices: Sets the <code>cOPEN</code> flag to 'O' to display only open invoices by default.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program enters a <code>DoW</code> (Do While) loop that continues until the <code>EXIT</code> indicator is turned on (e.g., user presses a function key to exit).</li> <li>Clear Subfile: Initializes the subfile control indicators (<code>SFLDSP</code>, <code>SFLCLR</code>), clears subfile variables (<code>MORE</code>, <code>sftermI</code>, <code>sfamt</code>, <code>invdatI</code>, <code>invdt8I</code>), and writes the subfile control record (<code>SFLCTL1</code>) to clear the subfile.</li> <li> <p>Check Subfile Display: If the subfile is ready to display (<code>SFLDSP = *On</code>), the program proceeds to retrieve company and customer data.</p> </li> <li> <p>Retrieve Company and Customer Data (GetCo Subroutine):</p> </li> <li>Retrieve AR Control Data: Reads the <code>ARCONT</code> file using the company code (<code>cco</code>). If not found, initializes aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>) to zero.</li> <li>Set Aging Bucket Headings: Defines aging bucket descriptions (<code>xAGE1</code> to <code>xAGE5</code>) based on the AR control limits (<code>aclmt1</code> to <code>aclmt4</code>). For example:<ul> <li><code>xAGE1 = 'CURRENT'</code></li> <li><code>xAGE2 = ' 1 - ' + aclmt1</code></li> <li>Assigns these to subfile fields (<code>cage1</code> to <code>cage5</code>).</li> </ul> </li> <li> <p>Retrieve Customer Master: Reads the <code>ARCUST</code> file using the company (<code>cco</code>) and customer (<code>ccust</code>) keys. If not found, sets customer details (e.g., <code>arname</code>, <code>aradr1</code>, etc.) to indicate \"Customer Master not found\" or blanks.</p> </li> <li> <p>Load Subfile (Main Loop):</p> </li> <li>Read AR Detail Records: Sets the lower limit (<code>SetLL</code>) on the <code>ARDETL</code> file using company (<code>cco</code>) and customer (<code>ccust</code>) keys, then reads records in a <code>DoW</code> loop using <code>ReadE</code>.</li> <li>Filter Records:<ul> <li>Skips deleted (<code>adDEL = 'D'</code>) or inactive (<code>adDEL = 'I'</code>) records.</li> <li>Skips open payment (<code>ADTYPE = 'P'</code>) or adjustment (<code>ADTYPE = 'J'</code>) records when <code>cOPEN = 'O'</code>.</li> <li>Skips fully paid invoices (<code>ADTYPE = 'I'</code> and <code>ADPART + ADPAY = ADAMT</code>) when <code>cOPEN = 'O'</code>.</li> </ul> </li> <li>Populate Subfile (SFfill Subroutine): For valid records, fills subfile fields:<ul> <li>Convert Dates: Converts transaction (<code>adtym8</code>) and due dates (<code>addud8</code>) from <code>YYYYMMDD</code> to <code>MM/DD/YYYY</code> format for display (<code>trdat</code>, <code>dudat</code>).</li> <li>Handle Record Types:</li> <li>Invoice ('I'):<ul> <li>Sets <code>sftype = ' INVOICE'</code> and <code>sftypeI = '1'</code>.</li> <li>Calculates open amount (<code>sfamt = adamt - adpart - adpay</code>) if <code>cOPEN = 'O'</code>, else uses <code>adamt</code>.</li> <li>Retrieves terms description from <code>GSTABL</code> using the terms code (<code>adterm</code>). If not found, uses the terms code as the description.</li> <li>Sets invoice date (<code>invdat</code>, <code>invdatI</code>) to <code>trdat</code>.</li> </ul> </li> <li>Adjustment ('J'):<ul> <li>Sets <code>sftype = 'ADJUST '</code>.</li> <li>Uses <code>adamt</code> as <code>sfamt</code>.</li> <li>Calls <code>GetDays</code> to calculate days between transaction and due dates.</li> </ul> </li> <li>Payment ('P'):<ul> <li>Sets <code>sftype = 'PAYMENT'</code>.</li> <li>Uses <code>adamt</code> as <code>sfamt</code>.</li> <li>Calls <code>GetDays</code> to calculate days.</li> </ul> </li> <li>Aging Description: Assigns the aging bucket description (<code>sfage</code>) based on the <code>adage</code> value (1 to 5, mapping to <code>cage1</code> to <code>cage5</code>).</li> </ul> </li> <li> <p>Write Subfile Record: Increments the relative record number (<code>RRN</code>) and writes the subfile record (<code>SFL1</code>). If <code>RRN</code> exceeds 9990, sets <code>MORE</code> to indicate not all records are displayed and exits the loop.</p> </li> <li> <p>Display Subfile:</p> </li> <li> <p>Sets <code>SFLDSP = *On</code> and executes <code>ExFmt</code> to display the subfile control record (<code>SFLCTL1</code>) on the workstation screen, allowing user interaction (e.g., scrolling, selecting records, or exiting).</p> </li> <li> <p>Repeat or Exit:</p> </li> <li>After displaying the subfile, the program loops back to check if <code>EXIT</code> is turned on. If not, it repeats the process (e.g., clears subfile, reloads data if user changes input). If <code>EXIT</code> is on, the program sets <code>*InLr = *On</code> and terminates.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>GSGENIE2C:</li> <li>Purpose: Checks if the program is running in the Genie environment by setting the <code>genievar</code> variable to 'YES' or 'NO'.</li> <li> <p>Parameters:</p> <ul> <li><code>genievar</code> (char(3)): Output parameter indicating Genie environment status.</li> </ul> </li> <li> <p>GSDTCLC2:</p> </li> <li>Purpose: Calculates the difference in days between two dates.</li> <li>Parameters:<ul> <li><code>p#dat1</code> (Packed(8:0)): First date in <code>CCYYMMDD</code> format.</li> <li><code>p#dat2</code> (Packed(8:0)): Second date in <code>CCYYMMDD</code> format.</li> <li><code>p#fmt</code> (char(1)): Format of difference ('D' for days).</li> <li><code>p#diff</code> (Packed(10:2)): Output for the calculated difference.</li> <li><code>p#err</code> (char(1)): Error flag.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR810UD:</li> <li>Type: Workstation file (display file).</li> <li>Usage: External (<code>*Ext</code>), handled by Profound UI (<code>PROFOUNDUI(HANDLER)</code>).</li> <li> <p>Description: Contains the subfile (<code>SFL1</code>) and control record (<code>SFLCTL1</code>) for displaying invoice inquiry data on the screen.</p> </li> <li> <p>ARDETL:</p> </li> <li>Type: Disk file (database file).</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores AR transaction details (e.g., invoices, payments, adjustments). Keyed by company (<code>cco</code>) and customer (<code>ccust</code>). Fields include <code>adDEL</code>, <code>ADTYPE</code>, <code>ADPART</code>, <code>ADPAY</code>, <code>ADAMT</code>, <code>adtym8</code>, <code>addud8</code>, <code>adage</code>, <code>adterm</code>.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores general system control data, including the default company code (<code>gxcono</code>). Keyed by <code>gskey</code>.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores AR control data, including aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>). Keyed by company (<code>cco</code>).</p> </li> <li> <p>ARCUST:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores customer master data (e.g., name, address). Keyed by company (<code>cco</code>) and customer (<code>ccust</code>). Fields include <code>arname</code>, <code>aradr1</code>, <code>aradr2</code>, <code>aradr3</code>, <code>aradr4</code>, <code>arzip5</code>.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li>Description: Stores general system table data, including terms descriptions (<code>TBDESC</code>). Keyed by a composite key (<code>ARTERM</code> + terms code).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR810U</code> program is designed to display AR invoice details for a specific company and customer in a subfile, filtering out deleted records and optionally showing only open invoices. It retrieves data from multiple files, calculates aging buckets, and formats dates for display. The program interacts with the user through a workstation display and terminates when the user exits. It relies on two external programs (<code>GSGENIE2C</code> and <code>GSDTCLC2</code>) for environment checks and date calculations, and uses five database files (<code>ARDETL</code>, <code>GSCONT</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>) for data retrieval, along with the <code>AR810UD</code> display file for user interaction.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/","title":"Summary AR810U RPGLE","text":"<p>Based on the provided RPGLE program <code>AR810U.rpgle</code>, I will first identify the use cases implemented by the program. Then, I will create a concise function requirement document for a large function that encapsulates the primary use case, assuming it processes inputs programmatically rather than through screen interaction. The function will focus on business requirements, process steps, and necessary calculations.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#list-of-use-cases-implemented-by-ar810u","title":"List of Use Cases Implemented by AR810U","text":"<p>The <code>AR810U.rpgle</code> program implements a single primary use case:</p> <ol> <li>Accounts Receivable Invoice Inquiry:</li> <li>Description: Retrieves and displays detailed Accounts Receivable (AR) transaction information (invoices, payments, adjustments) for a specified company and customer. The program filters transactions based on open/closed status, excludes deleted or inactive records, and provides aging bucket information for open invoices.</li> <li>Purpose: Allows users to inquire about a customer\u2019s AR transactions, including invoice amounts, payment status, terms, and aging details, to support financial analysis or customer account management.</li> <li>Key Features:<ul> <li>Filters transactions to show only open invoices by default (<code>cOPEN = 'O'</code>).</li> <li>Retrieves customer and company details for context.</li> <li>Calculates open invoice amounts and aging buckets.</li> <li>Displays terms descriptions and days between transaction and due dates for adjustments/payments.</li> </ul> </li> </ol> <p>No additional use cases are implemented, as the program focuses solely on this inquiry functionality within the Genie environment.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#ar-invoice-inquiry-function-requirements","title":"AR Invoice Inquiry Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#function-name","title":"Function Name","text":"<p><code>GetARInvoiceDetails</code></p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#purpose","title":"Purpose","text":"<p>Retrieve detailed Accounts Receivable (AR) transaction information for a specified company and customer, including invoices, payments, and adjustments, with calculated open amounts, aging buckets, and terms descriptions. The function supports financial analysis and customer account management by providing filtered transaction data programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li><code>companyCode</code> (Numeric, 2 digits): Company identifier (e.g., <code>cco</code>).</li> <li><code>customerCode</code> (Numeric, 6 digits): Customer identifier (e.g., <code>ccust</code>).</li> <li><code>openOnly</code> (Character, 1): Flag to filter open transactions ('O') or include all ('A').</li> <li><code>currentDate</code> (Date, CCYYMMDD): System date for aging calculations.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li><code>transactionList</code> (Array of Transaction Records):</li> <li><code>transactionType</code> (String): 'INVOICE', 'PAYMENT', or 'ADJUST'.</li> <li><code>typeCode</code> (Character, 1): '1' (Invoice), '0' (Payment/Adjustment).</li> <li><code>amount</code> (Numeric, 15,2): Transaction amount (open amount for invoices if <code>openOnly = 'O'</code>).</li> <li><code>transactionDate</code> (Date, MM/DD/YYYY): Transaction date.</li> <li><code>dueDate</code> (Date, MM/DD/YYYY): Due date.</li> <li><code>termsCode</code> (Numeric, 2): Invoice terms code (if applicable).</li> <li><code>termsDescription</code> (String, 30): Terms description (e.g., '02-NET 30').</li> <li><code>agingBucket</code> (String, 10): Aging description (e.g., 'CURRENT', '1-30').</li> <li><code>daysDifference</code> (Numeric, 10,2): Days between transaction and due date (for payments/adjustments).</li> <li><code>customerDetails</code>:</li> <li><code>name</code> (String, 40): Customer name.</li> <li><code>address</code> (Array of String): Address lines (up to 4).</li> <li><code>zipCode</code> (String, 5): ZIP code.</li> <li><code>agingBuckets</code> (Array of String): Descriptions for aging buckets (e.g., ['CURRENT', '1-30', '31-60', ...]).</li> <li><code>moreRecords</code> (String): Indicator if more records exist (e.g., 'More history...').</li> <li><code>errorMessage</code> (String): Error description if processing fails (e.g., 'Customer not found').</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>companyCode</code> and <code>customerCode</code> are valid (non-zero, correct format).</li> <li>Default <code>openOnly</code> to 'O' if invalid.</li> <li>Validate <code>currentDate</code> as a valid CCYYMMDD date.</li> <li>Retrieve Company Control Data:</li> <li>Read AR control record (<code>ARCONT</code>) for <code>companyCode</code>.</li> <li>Extract aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>).</li> <li>Define aging bucket descriptions:<ul> <li>Bucket 1: 'CURRENT'</li> <li>Bucket 2: '1 - <code>aclmt1</code>'</li> <li>Bucket 3: '<code>aclmt1 + 1</code> - <code>aclmt2</code>'</li> <li>Bucket 4: '<code>aclmt2 + 1</code> - <code>aclmt3</code>'</li> <li>Bucket 5: '<code>aclmt3 + 1</code> - <code>aclmt4</code>'</li> </ul> </li> <li>If not found, set limits to 0.</li> <li>Retrieve Customer Data:</li> <li>Read customer master record (<code>ARCUST</code>) using <code>companyCode</code> and <code>customerCode</code>.</li> <li>Extract name, address lines, and ZIP code.</li> <li>If not found, set <code>name</code> to 'Customer Master not found' and clear other fields.</li> <li>Retrieve AR Transactions:</li> <li>Read AR detail records (<code>ARDETL</code>) for <code>companyCode</code> and <code>customerCode</code>.</li> <li>Filter records:<ul> <li>Exclude deleted (<code>adDEL = 'D'</code>) or inactive (<code>adDEL = 'I'</code>) records.</li> <li>If <code>openOnly = 'O'</code>:</li> <li>Exclude payments (<code>ADTYPE = 'P'</code>) or adjustments (<code>ADTYPE = 'J'</code>).</li> <li>Exclude fully paid invoices (<code>ADTYPE = 'I'</code> where <code>ADPART + ADPAY = ADAMT</code>).</li> </ul> </li> <li>Limit output to 9990 records; set <code>moreRecords</code> if exceeded.</li> <li>Process Each Transaction:</li> <li>Convert transaction date (<code>adtym8</code>) and due date (<code>addud8</code>) from CCYYMMDD to MM/DD/YYYY.</li> <li>For each valid record:<ul> <li>Invoice (<code>ADTYPE = 'I'</code>):</li> <li>Set <code>transactionType = 'INVOICE'</code>, <code>typeCode = '1'</code>.</li> <li>If <code>openOnly = 'O'</code>, calculate <code>amount = ADAMT - ADPART - ADPAY</code>; else <code>amount = ADAMT</code>.</li> <li>Set <code>termsCode = ADTERM</code>.</li> <li>Retrieve terms description from <code>GSTABL</code> using key 'ARTERM' + <code>ADTERM</code>. If not found, use <code>ADTERM</code> as description.</li> <li>Set <code>transactionDate</code> to converted <code>adtym8</code>.</li> <li>Payment (<code>ADTYPE = 'P'</code>):</li> <li>Set <code>transactionType = 'PAYMENT'</code>, <code>typeCode = '0'</code>.</li> <li>Set <code>amount = ADAMT</code>.</li> <li>Calculate <code>daysDifference</code> using <code>GSDTCLC2</code> (difference between <code>adtym8</code> and <code>addud8</code> in days).</li> <li>Adjustment (<code>ADTYPE = 'J'</code>):</li> <li>Set <code>transactionType = 'ADJUST'</code>, <code>typeCode = '0'</code>.</li> <li>Set <code>amount = ADAMT</code>.</li> <li>Calculate <code>daysDifference</code> using <code>GSDTCLC2</code>.</li> <li>Assign <code>agingBucket</code> based on <code>ADAGE</code> (1-5, mapping to bucket descriptions).</li> </ul> </li> <li>Return Results:</li> <li>Package <code>transactionList</code>, <code>customerDetails</code>, <code>agingBuckets</code>, <code>moreRecords</code>, and <code>errorMessage</code>.</li> <li>If no errors, set <code>errorMessage</code> to empty; otherwise, describe the issue (e.g., 'Invalid company code').</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Transaction Filtering:</li> <li>Deleted or inactive records are always excluded.</li> <li>Open-only mode (<code>openOnly = 'O'</code>) excludes payments, adjustments, and fully paid invoices.</li> <li>Amount Calculation:</li> <li>For open invoices, amount is reduced by partial payments (<code>ADPART</code>) and payments applied (<code>ADPAY</code>).</li> <li>Aging Buckets:</li> <li>Defined by AR control limits, with 'CURRENT' as the first bucket.</li> <li>Transactions are categorized based on <code>ADAGE</code> (1-5).</li> <li>Terms Description:</li> <li>Must include terms code and description (e.g., '02-NET 30') from <code>GSTABL</code> or default to terms code.</li> <li>Date Conversion:</li> <li>All dates are converted to MM/DD/YYYY for consistency.</li> <li>Record Limit:</li> <li>Maximum 9990 transactions; excess triggers <code>moreRecords</code> warning.</li> <li>Error Handling:</li> <li>Invalid inputs or missing master data (customer, company) return descriptive errors.</li> <li>Date conversion errors set dates to default low-value.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs:</li> <li><code>GSDTCLC2</code>: Calculates days between two dates (CCYYMMDD format).</li> <li>Files:</li> <li><code>ARCONT</code>: AR control data for aging buckets.</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>ARDETL</code>: AR transaction details.</li> <li><code>GSTABL</code>: Terms descriptions.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#assumptions","title":"Assumptions","text":"<ul> <li>Input dates are in CCYYMMDD format.</li> <li><code>GSDTCLC2</code> is available and reliable for date calculations.</li> <li>All files (<code>ARCONT</code>, <code>ARCUST</code>, <code>ARDETL</code>, <code>GSTABL</code>) are accessible and correctly keyed.</li> <li>The function runs in a non-interactive environment, replacing screen-based input/output.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/","title":"AR830U RPGLE","text":"<p>The provided code is an RPGLE program (<code>AR830U.rpgle</code>), not an OCL program. It implements an AR (Accounts Receivable) Invoice History Inquiry for displaying invoice history records based on user-specified criteria. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#process-steps-of-the-ar830u-rpgle-program","title":"Process Steps of the AR830U RPGLE Program","text":"<p>The program is designed to run in a Genie environment (a web-based interface for IBM i applications) and displays invoice history records in a subfile (a scrollable list on a workstation display). Here\u2019s a step-by-step breakdown of its processing:</p> <ol> <li>Program Initialization:</li> <li>Control Specifications: The program uses free-format RPGLE with <code>Ctl-Opt DftActGrp(*No)</code>, indicating it runs in a named activation group for better resource management.</li> <li>File Declarations: Declares:<ul> <li><code>AR830UD</code>: A workstation file (display file) with a subfile (<code>SFL1</code>) for user interaction, handled by Profound UI (a web interface tool).</li> <li><code>ARHIST</code>, <code>GSCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>: Input files (tables) for invoice history, company control, customer master, and table data, respectively, accessed with keys.</li> </ul> </li> <li>Variable Declarations: Defines variables for processing, including subfile record number (<code>RRN</code>), date calculations, and temporary fields for invoice data.</li> <li>Check Genie Environment: Calls <code>GSGENIE2C</code> to retrieve the <code>genievar</code> variable. If <code>genievar</code> is not <code>'YES'</code>, the program terminates (sets <code>*InLr = *On</code> and returns), ensuring it only runs in the Genie interface.</li> <li>Default Company Retrieval: Retrieves the default company number (<code>gxcono</code>) from the <code>GSCONT</code> file using key <code>gskey = *zero</code>. If found and valid, sets the company number (<code>cco</code>) and positions the cursor at the customer field (<code>*in11 = *ON</code>); otherwise, positions it at the company field.</li> <li>Set Default Date: Initializes the invoice date filter (<code>cinvdat</code>) to today\u2019s date minus 2 years (changed from 5 years per LMS01 modification on 8/8/24).</li> <li> <p>Indicator Initialization: Sets <code>REFRESH</code> and <code>EXIT</code> indicators to <code>*Off</code> and clears subfile display/control flags (<code>SFLDSP</code>, <code>SFLCLR</code>).</p> </li> <li> <p>Main Processing Loop (<code>DoW EXIT = *Off</code>):</p> </li> <li>Clear Subfile:<ul> <li>Sets <code>SFLCLR = *On</code>, writes to the subfile control record (<code>SFLCTL1</code>) to clear it, then resets <code>SFLCLR = *Off</code>.</li> <li>Resets subfile record number (<code>RRN = 0</code>) and clears <code>MORE</code> and <code>sftermI</code>.</li> </ul> </li> <li>Retrieve Customer Information:<ul> <li>If the subfile is to be displayed (<code>SFLDSP = *On</code>), retrieves customer details from <code>ARCUST</code> using keys <code>cco</code> (company) and <code>ccust</code> (customer).</li> <li>If no customer record is found, sets default values (e.g., <code>arname = 'Customer Master not found'</code>).</li> </ul> </li> <li>Convert Date Format:<ul> <li>Converts the user-entered invoice date (<code>cinvdat</code>, MM/DD/YYYY) to <code>cinvcymd</code> (YYYYMMDD) for comparison with invoice history dates.</li> </ul> </li> <li>Load Subfile with Invoice History:<ul> <li>Sets the lower limit (<code>SetLL</code>) on <code>ARHIST</code> using keys <code>cco</code> and <code>ccust</code>.</li> <li>Reads records (<code>ReadE</code>) from <code>ARHIST</code> matching the company and customer.</li> <li>For each record:</li> <li>Skip Deleted Records: If <code>ahDEL</code> is <code>'D'</code> or <code>'I'</code>, skips the record (<code>iter</code>).</li> <li>Date Filter: If the invoice date (<code>AHIND8</code>, YYYYMMDD) is earlier than <code>cinvcymd</code>, skips the record.</li> <li>Populate Subfile Record: Calls subroutine <code>SFfill</code> to format the record data.</li> <li>Write to Subfile: Increments <code>RRN</code> and writes the record to <code>SFL1</code>.</li> <li>Limit Check: If <code>RRN</code> exceeds 9990, sets <code>MORE = 'More history...not all included...'</code> and exits the read loop.</li> </ul> </li> <li>Display Subfile:<ul> <li>Sets <code>SFLDSP = *On</code> and executes <code>ExFmt SFLCTL1</code> to display the subfile to the user.</li> </ul> </li> <li> <p>Loop Continuation: Continues the loop until the user exits (<code>EXIT = *On</code>).</p> </li> <li> <p>Subroutine: SFfill:</p> </li> <li>Formats data for a subfile record based on the invoice type (<code>ahtype</code>):<ul> <li>Invoice (ahtype = 'I'):</li> <li>Sets <code>sftype = ' INVOICE'</code> and <code>sftypeI = '1'</code>.</li> <li>Retrieves terms code (<code>ahterm</code>) and looks up its description in <code>GSTABL</code> using key <code>ktbcode = '    ' + sftermI</code>.</li> <li>If no description is found, uses <code>ktbcode</code>; otherwise, formats as <code>ktbcode + '-' + TBDESC</code>.</li> <li>Adjustment (ahtype = 'J') or Payment (ahtype = 'P'):</li> <li>Sets <code>sftype</code> to <code>'ADJUST '</code> or <code>'PAYMENT'</code>, respectively.</li> <li>Calls <code>GetDays</code> subroutine to calculate the difference between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>).</li> </ul> </li> <li> <p>Date Conversion:</p> <ul> <li>Converts invoice date (<code>ahind8</code>), due date (<code>ahdud8</code>), and transaction date (<code>ahtda8</code>) from YYYYMMDD to MM/DD/YYYY format using <code>%date</code> and <code>%char</code>.</li> <li>Uses <code>monitor</code> blocks to handle invalid dates, setting them to <code>*loval</code> if errors occur.</li> </ul> </li> <li> <p>Subroutine: GetDays:</p> </li> <li>Calls external program <code>GSDTCLC2</code> to calculate the difference in days between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>).</li> <li>Sets parameters: <code>p#dat1 = ahtda8</code>, <code>p#dat2 = ahdud8</code>, <code>p#fmt = 'D'</code> (days), and clears <code>p#diff</code> and <code>p#err</code>.</li> <li> <p>Stores the result in <code>sfdays = p#diff</code>.</p> </li> <li> <p>Program Termination:</p> </li> <li>When the user exits (<code>EXIT = *On</code>), sets <code>*InLr = *On</code> and returns, ending the program.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls two external programs: 1. GSGENIE2C:    - Purpose: Retrieves the <code>genievar</code> variable to check if the program is running in the Genie environment.    - Parameter: <code>genievar</code> (char(3), output, values <code>'YES'</code> or <code>'NO'</code>). 2. GSDTCLC2:    - Purpose: Calculates the difference in days between two dates.    - Parameters:      - <code>p#dat1</code> (Packed(8:0), input, date 1 in CCYYMMDD format).      - <code>p#dat2</code> (Packed(8:0), input, date 2 in CCYYMMDD format).      - <code>p#fmt</code> (char(1), input, format <code>'D'</code> for days).      - <code>p#diff</code> (Packed(10:2), output, date difference).      - <code>p#err</code> (char(1), output, error flag).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (tables): 1. AR830UD:    - Type: Workstation file (display file).    - Usage: Output/Input for user interface.    - Subfile: <code>SFL1</code> with relative record number (<code>RRN</code>).    - Handler: Managed by Profound UI (<code>PROFOUNDUI(HANDLER)</code>). 2. ARHIST:    - Type: Physical file (database table).    - Usage: Input, keyed access.    - Purpose: Stores accounts receivable invoice history records.    - Keys: <code>cco</code> (company number), <code>ccust</code> (customer number). 3. GSCONT:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores company control information, including default company number (<code>gxcono</code>).    - Key: <code>gskey</code> (likely a control key, set to <code>*zero</code>). 4. ARCUST:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores customer master data (e.g., name, address).    - Keys: <code>cco</code> (company number), <code>ccust</code> (customer number). 5. GSTABL:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores table data, including terms descriptions (<code>TBDESC</code>).    - Keys: Table code (<code>'ARTERM'</code>), terms code (<code>ktbcode</code>).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR830U</code> RPGLE program is an interactive inquiry tool that displays invoice history records for a specified company and customer, filtered by date (defaulting to the last 2 years). It uses a subfile to present data, retrieves additional details from customer and terms tables, and calculates date differences for adjustments and payments. The program ensures it runs in a Genie environment and leverages external programs for specific tasks.</p> <p>If you need further clarification or details about specific parts of the program, let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/","title":"Summary AR830U RPGLE","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#list-of-use-cases-implemented-by-ar830u-rpgle-program","title":"List of Use Cases Implemented by AR830U RPGLE Program","text":"<p>The <code>AR830U.rpgle</code> program implements a single primary use case:</p> <ol> <li>Accounts Receivable Invoice History Inquiry:</li> <li>Description: Allows users to view accounts receivable (AR) invoice history for a specified company and customer, filtered by an invoice date (defaulting to the last 2 years). The program retrieves and displays invoice, adjustment, and payment records, including details like invoice type, terms, and date differences between transaction and due dates, using a subfile interface in a Genie environment.</li> <li>Inputs: Company number (<code>cco</code>), customer number (<code>ccust</code>), and invoice date filter (<code>cinvdat</code>).</li> <li>Outputs: A subfile displaying AR history records with fields such as invoice number, type, dates, terms description, and days between transaction and due dates for adjustments/payments.</li> <li>Constraints: Only runs in Genie environment (<code>genievar = 'YES'</code>), skips deleted records (<code>ahDEL = 'D' or 'I'</code>), and limits records to those with invoice dates within the specified range.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#function-requirement-document-for-ar-invoice-history-inquiry","title":"Function Requirement Document for AR Invoice History Inquiry","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#ar-invoice-history-inquiry-function-requirements","title":"AR Invoice History Inquiry Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#purpose","title":"Purpose","text":"<p>Provide a function to retrieve and return accounts receivable (AR) invoice history records for a specified company and customer, filtered by a date range, to support financial analysis and customer account management.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cco</code>): String (company identifier).</li> <li>Customer Number (<code>ccust</code>): String (customer identifier).</li> <li>Invoice Date Filter (<code>cinvdat</code>): Date (MM/DD/YYYY format, defaults to today minus 2 years).</li> <li>Environment Flag (<code>genievar</code>): String (<code>'YES'</code> to confirm Genie environment, otherwise function exits).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>A list of AR history records containing:</li> <li>Invoice number (<code>ahinvc</code>).</li> <li>Invoice type description (<code>sftype</code>): <code>'INVOICE'</code>, <code>'ADJUST'</code>, or <code>'PAYMENT'</code>.</li> <li>Terms description (<code>sftmdesc</code>): For invoices, terms code plus description (e.g., <code>'01-Net 30'</code>); for others, blank.</li> <li>Invoice date (<code>invdat</code>): MM/DD/YYYY format.</li> <li>Due date (<code>dudat</code>): MM/DD/YYYY format.</li> <li>Transaction date (<code>trdat</code>): MM/DD/YYYY format.</li> <li>Days difference (<code>sfdays</code>): Days between transaction and due dates for adjustments/payments; zero for invoices.</li> <li>Customer details: Name (<code>arname</code>), address (<code>aradr1</code>, <code>aradr2</code>, <code>aradr3</code>, <code>aradr4</code>), zip code (<code>arzip5</code>).</li> <li>Status message (<code>MORE</code>): Indicates if record limit (9990) was reached (<code>'More history...not all included...'</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Environment: Check if <code>genievar = 'YES'</code>. If not, exit with no output.</li> <li>Retrieve Default Company: Query <code>GSCONT</code> with key <code>gskey = 0</code> to get default company number (<code>gxcono</code>). Set <code>cco = gxcono</code> if valid; otherwise, use provided <code>cco</code>.</li> <li>Retrieve Customer Details: Query <code>ARCUST</code> with keys <code>cco</code> and <code>ccust</code>. If not found, set <code>arname = 'Customer Master not found'</code> and clear address fields.</li> <li>Convert Date Filter: Convert <code>cinvdat</code> (MM/DD/YYYY) to <code>cinvcymd</code> (YYYYMMDD) for comparison.</li> <li>Retrieve AR History:</li> <li>Query <code>ARHIST</code> with keys <code>cco</code> and <code>ccust</code>.</li> <li>Filter records:<ul> <li>Exclude records where <code>ahDEL = 'D'</code> or <code>'I'</code> (deleted/inactive).</li> <li>Exclude records where invoice date (<code>ahind8</code>, YYYYMMDD) is earlier than <code>cinvcymd</code>.</li> </ul> </li> <li>Process Each Record:</li> <li>Invoice Type Handling:<ul> <li>If <code>ahtype = 'I'</code> (Invoice):</li> <li>Set <code>sftype = 'INVOICE'</code>, <code>sftypeI = '1'</code>, <code>sftermI = ahterm</code>.</li> <li>Query <code>GSTABL</code> with keys <code>'ARTERM'</code> and <code>ktbcode = '    ' + sftermI</code> to get terms description (<code>TBDESC</code>). Set <code>sftmdesc = ktbcode + '-' + TBDESC</code> or <code>ktbcode</code> if not found.</li> <li>Set <code>sfdays = 0</code>.</li> <li>If <code>ahtype = 'J'</code> (Adjustment) or <code>'P'</code> (Payment):</li> <li>Set <code>sftype = 'ADJUST'</code> or <code>'PAYMENT'</code>.</li> <li>Calculate days difference (<code>sfdays</code>) between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>) using <code>GSDTCLC2</code>.</li> </ul> </li> <li>Date Conversion:<ul> <li>Convert <code>ahind8</code>, <code>ahdud8</code>, <code>ahtda8</code> (YYYYMMDD) to MM/DD/YYYY for <code>invdat</code>, <code>dudat</code>, <code>trdat</code>.</li> <li>Handle invalid dates by setting to a default low value.</li> </ul> </li> <li>Record Limit Check: Stop processing if record count exceeds 9990 and set <code>MORE</code> message.</li> <li>Return Results: Output the list of formatted records and status message.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Environment Restriction: Function only processes if running in Genie environment (<code>genievar = 'YES'</code>).</li> <li>Date Filter: Only include records with invoice dates on or after the specified date (default: today minus 2 years).</li> <li>Record Exclusion: Skip deleted (<code>ahDEL = 'D'</code>) or inactive (<code>ahDEL = 'I'</code>) records.</li> <li>Record Limit: Maximum of 9990 records returned to prevent overflow.</li> <li>Customer Validation: If customer not found in <code>ARCUST</code>, return default error message for name and clear address fields.</li> <li>Terms Description: For invoices, append terms code and description from <code>GSTABL</code>; for adjustments/payments, leave blank.</li> <li>Date Difference Calculation: For adjustments and payments, compute days between transaction and due dates; for invoices, set to zero.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Date Difference (<code>sfdays</code>):</li> <li>For <code>ahtype = 'J'</code> or <code>'P'</code>, call <code>GSDTCLC2</code> with:<ul> <li><code>p#dat1 = ahtda8</code> (transaction date, YYYYMMDD).</li> <li><code>p#dat2 = ahdud8</code> (due date, YYYYMMDD).</li> <li><code>p#fmt = 'D'</code> (days format).</li> <li>Output: <code>p#diff</code> (days difference, Packed(10:2)).</li> <li>Error handling: Set <code>p#err</code> if calculation fails.</li> </ul> </li> <li>Result stored in <code>sfdays</code>.</li> <li>Date Conversion:</li> <li>Convert YYYYMMDD dates (<code>ahind8</code>, <code>ahdud8</code>, <code>ahtda8</code>) to MM/DD/YYYY using <code>%date</code> and <code>%char(*iso0)</code>.</li> <li>Handle invalid dates by setting to a low value.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs:</li> <li><code>GSGENIE2C</code>: Returns <code>genievar</code> to validate Genie environment.</li> <li><code>GSDTCLC2</code>: Calculates days difference between two dates.</li> <li>Files:</li> <li><code>GSCONT</code>: Provides default company number (<code>gxcono</code>).</li> <li><code>ARCUST</code>: Provides customer details (name, address, zip).</li> <li><code>ARHIST</code>: Stores AR invoice history records.</li> <li><code>GSTABL</code>: Stores terms descriptions (<code>TBDESC</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#constraints","title":"Constraints","text":"<ul> <li>Maximum 9990 records to prevent subfile overflow.</li> <li>Invalid dates are handled gracefully with default low values.</li> <li>Function assumes valid company/customer inputs; invalid inputs may result in no records or default customer error message.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/","title":"AR930 OCL","text":"<p>The provided document is an Operation Control Language (OCL) script, specifically for an IBM System/36 environment, used to manage the execution of an RPG (Report Program Generator) program named <code>AR930</code>. Below, I\u2019ll explain the process steps of the OCL script, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used on IBM System/36 to control job execution, load programs, and manage file operations. The script <code>AR930.ocl36.txt</code> outlines the steps to execute the <code>AR930</code> RPG program, which appears to be related to Accounts Receivable (A/R) control file maintenance. Here\u2019s a breakdown of each step:</p> <ol> <li>Invoke the GSGENIEC Program:    <pre><code>// CALL PGM(GSGENIEC)\n</code></pre></li> <li> <p>The script starts by calling an external program named <code>GSGENIEC</code>. This program likely performs some initialization, validation, or setup tasks required before proceeding with the main program. The exact functionality of <code>GSGENIEC</code> is not specified in the script, but it\u2019s a prerequisite for the job.</p> </li> <li> <p>Conditional Check:    <pre><code>// IFF ?L'506,3'?/YES   RETURN\n</code></pre></p> </li> <li>The <code>IFF</code> (If) statement checks a condition using a system variable or parameter <code>?L'506,3'?</code>. This likely refers to a specific location in the Local Data Area (LDA) or a similar system construct, checking positions 506 to 508 (3 bytes).</li> <li> <p>If the condition evaluates to <code>YES</code> (true), the script executes the <code>RETURN</code> command, which terminates the job immediately. This suggests a conditional exit based on some predefined system state or parameter (e.g., a flag indicating whether the job should proceed).</p> </li> <li> <p>Set Procedure Parameters:    <pre><code>// SCPROCP ,,,,,,,,?9?\n</code></pre></p> </li> <li> <p>The <code>SCPROCP</code> command sets up procedure parameters. The commas indicate placeholder values, and <code>?9?</code> is a parameter substitution, likely specifying a library, file, or environment setting (e.g., a diskette or library identifier). This step configures the environment for the subsequent program execution.</p> </li> <li> <p>Invoke GSY2K:    <pre><code>// GSY2K\n</code></pre></p> </li> <li> <p>The <code>GSY2K</code> command calls another program or procedure, likely related to Year 2000 (Y2K) compliance or date handling. This could be a utility to ensure date fields are processed correctly, which was critical for A/R systems during the Y2K transition.</p> </li> <li> <p>Load the AR930 Program:    <pre><code>// LOAD AR930\n</code></pre></p> </li> <li> <p>The <code>LOAD</code> command loads the RPG program <code>AR930</code> into memory for execution. This is the main program responsible for A/R control file maintenance.</p> </li> <li> <p>Specify Input Files:    <pre><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR\n// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR\n// FILE NAME-GLMAST,LABEL-?9?GLMAST,DISP-SHR\n</code></pre></p> </li> <li>These <code>FILE</code> statements define the files used by the <code>AR930</code> program:<ul> <li><code>ARCONT</code>: Likely the A/R control file, containing configuration or summary data for accounts receivable.</li> <li><code>ARCUST</code>: The A/R customer file, storing customer-specific data (e.g., account details, balances).</li> <li><code>GLMAST</code>: The General Ledger master file, used for integrating A/R transactions with the general ledger.</li> </ul> </li> <li> <p>The <code>LABEL-?9?ARCONT</code> syntax indicates that the file label is dynamically substituted with the value of <code>?9?</code> (e.g., a library or diskette name). <code>DISP-SHR</code> specifies that the files are opened in shared mode, allowing concurrent access by other programs.</p> </li> <li> <p>Execute the Program:    <pre><code>// RUN\n</code></pre></p> </li> <li>The <code>RUN</code> command executes the loaded <code>AR930</code> program, which processes the specified files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GLMAST</code>) to perform A/R control file maintenance tasks, such as updating control records, validating customer data, or posting transactions to the general ledger.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external programs or procedures: 1. GSGENIEC: Likely a setup or validation program executed at the start. 2. GSY2K: Possibly a Y2K compliance or date-handling utility.</p> <p>Additionally, the main program <code>AR930</code> (an RPG program) is loaded and executed, but it is not considered an \"external program call\" in the same sense as <code>CALL PGM</code> or procedure invocations, as it is the primary program being run.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script specifies the following files (referred to as \"tables\" in some contexts, especially in RPG programming): 1. ARCONT: Accounts Receivable control file. 2. ARCUST: Accounts Receivable customer file. 3. GLMAST: General Ledger master file.</p> <p>These files are accessed in shared mode (<code>DISP-SHR</code>) and are critical to the A/R control file maintenance process performed by <code>AR930</code>.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#summary","title":"Summary","text":"<p>The OCL script orchestrates the execution of the <code>AR930</code> RPG program for A/R control file maintenance. It performs initial setup and validation (<code>GSGENIEC</code>, conditional check, <code>GSY2K</code>), loads the necessary files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GLMAST</code>), and executes the main program. The process ensures that the environment is properly configured and that the program only runs if specific conditions are met, preventing unnecessary or erroneous execution.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/","title":"AR930 RPGLE","text":"<p>The provided <code>AR930.rpgle.txt</code> is an RPGLE (Report Program Generator Language Extended) program for IBM i (AS/400) systems, used for Accounts Receivable (A/R) control file maintenance. It is called by the OCL script <code>AR930.ocl36.txt</code> previously discussed. Below, I will explain the process steps, business rules, tables (files) used, and external programs called by the <code>AR930</code> RPGLE program.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR930</code> program is designed to manage the A/R control file (<code>ARCONT</code>) through a workstation interface, allowing users to add, update, delete, or reactivate A/R company records. It includes screen handling, data validation, and file operations. Below is a step-by-step explanation of the program's process flow, based on the code structure and logic:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>DFTACTGRP(*NO)</code>: The program runs in a non-default activation group, allowing better control over resources.</li> <li><code>fixnbr(*zoned:*inputpacked)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>dftname(ar930)</code>: Sets the default program name to <code>AR930</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>arcont</code>: A/R control file, used for update and add operations (<code>uf a</code>), keyed by company number (2 bytes, starting at position 2).</li> <li><code>arcust</code>: A/R customer file, input-only (<code>if</code>), keyed by an 8-byte key starting at position 2.</li> <li><code>glmast</code>: General Ledger master file, input-only (<code>if</code>), keyed by an 11-byte key starting at position 2.</li> <li><code>ar930d</code>: Workstation file, used for interactive screen handling with Profound UI (<code>Handler('PROFOUNDUI(HANDLER)')</code>).</li> </ul> </li> <li> <p>Data Structures and Variables:</p> <ul> <li><code>infds</code>: Information data structure to capture workstation status (e.g., function key presses).</li> <li><code>msg</code>: Array of 22 error messages, each 35 characters, defined in compile-time data (<code>CTDATA</code>).</li> <li>Input specifications define fields for <code>arcont</code>, <code>arcust</code>, and <code>glmast</code>, mapping record layouts (e.g., <code>acco</code> for company number, <code>acname</code> for company name).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program operates in a loop, displaying screens (<code>AR930S1</code> for inquiry/update, <code>AR930S2</code> for data entry) and processing user inputs based on function keys and data validation.</li> <li>Initial Screen Setup:<ul> <li>If <code>qsctl</code> (control field) is blank, the program sets indicator <code>*in09</code> to '1', <code>*in01</code> to '1' (for <code>AR930S1</code>), and <code>qsctl</code> to 'R' to initialize the process.</li> <li>Otherwise, it reads the workstation file (<code>ar930s1</code> or <code>ar930s2</code>) based on indicators <code>*in81</code> or <code>*in82</code>. If the read fails (indicator <code>*in09</code> is on), the <code>rollsr</code> subroutine handles roll-up/roll-down actions.</li> </ul> </li> <li> <p>Indicator Management:</p> <ul> <li>Clears indicators (e.g., <code>*in62</code> to <code>*in67</code>, <code>*in44</code>, <code>*in71</code>, <code>*in81</code>, <code>*in82</code>, <code>*in90</code>) and variables (<code>z2</code>, <code>z3</code>, <code>z8</code>, <code>z6</code>) to reset the state.</li> <li>Handles roll keys (<code>*in54</code> for roll-up, <code>*in55</code> for roll-down) by calling <code>rollfw</code> or <code>rollbw</code> subroutines.</li> </ul> </li> <li> <p>Function Key Processing:</p> </li> <li> <p>The program responds to specific function keys, each triggering a subroutine or action:</p> <ul> <li>KA (F1 - Bypass Entry): Clears fields, sets <code>*in81</code> (update mode) and <code>*in11</code> (update mode), and jumps to the end of the loop.</li> <li>KD (F4 - Delete/Reactivate): In update mode (<code>*in11</code>), checks if the record is not deleted (<code>*in21</code> off) and calls <code>delete</code> to mark the record as deleted (<code>acdel = 'D'</code>). If deleted, calls <code>reacti</code> to reactivate (<code>acdel = 'A'</code>).</li> <li>KG (End of Screen): Sets <code>*inlr</code> (last record) to terminate the program.</li> <li>KJ (F10 - Entry Mode): Clears fields, sets <code>*in82</code> and <code>*in10</code> (entry mode), and resets other indicators.</li> <li>KK (F11 - Update Mode): Clears fields, sets <code>*in81</code> and <code>*in11</code> (update mode), and resets other indicators.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>AR930S1 (Inquiry/Update Screen):<ul> <li>Triggered by <code>*in01</code>. Calls the <code>s1</code> subroutine:</li> <li>Reads <code>arcont</code> by company number (<code>maskey = co</code>).</li> <li>If not found (<code>*in92</code> on), displays error messages (msg 6, 7) and sets <code>*in81</code> and <code>*in90</code>.</li> <li>If found, calls <code>move</code> to populate screen fields and sets <code>*in11</code>, <code>*in62</code>, <code>*in82</code> for update mode.</li> <li>Writes the <code>ar930s1</code> screen to display company data.</li> </ul> </li> <li> <p>AR930S2 (Entry Screen):</p> <ul> <li>Triggered by <code>*in02</code>. Calls the <code>s2</code> subroutine:</li> <li>Validates input data (see Business Rules below).</li> <li>If in entry mode (<code>*in10</code>), checks if the company number is non-zero and does not exist in <code>arcont</code>. If it exists, displays error messages (msg 8, 9).</li> <li>Writes the <code>ar930s2</code> screen to allow data entry.</li> </ul> </li> <li> <p>Data Validation and File Updates:</p> </li> <li>The <code>s2</code> subroutine performs extensive validation (detailed in Business Rules).</li> <li> <p>If validation passes, the program updates or adds records to <code>arcont</code>:</p> <ul> <li>In entry mode (<code>*in10</code>), adds a new record with <code>except</code> (opcode <code>eadd 70 92</code>).</li> <li>In update mode (<code>*in11</code>), updates the existing record (<code>except</code> with conditions <code>70n92n25</code> for updates, or <code>88</code> for delete/reactivate).</li> </ul> </li> <li> <p>Subroutines:</p> </li> <li>s1: Handles inquiry/update screen logic, retrieves <code>arcont</code> data, and populates screen fields.</li> <li>s2: Validates input data and prepares for add/update operations.</li> <li>clear: Resets all screen fields to blanks or zeros.</li> <li>move: Transfers <code>arcont</code> fields to screen fields for display.</li> <li>rollsr: Handles roll-up/roll-down key presses, resetting function key indicators.</li> <li>rollfw: Reads the next <code>arcont</code> record for navigation.</li> <li>rollbw: Reads the previous <code>arcont</code> record for navigation.</li> <li>delete: Marks an <code>arcont</code> record as deleted (<code>acdel = 'D'</code>) after checking <code>arcust</code> for active records.</li> <li> <p>reacti: Reactivates a deleted record (<code>acdel = 'A'</code>).</p> </li> <li> <p>Termination:</p> </li> <li>The program exits when <code>*inlr</code> is set (via <code>KG</code> key or end of processing), writing final screen output and closing files.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during data entry and validation in the <code>s2</code> subroutine:</p> <ol> <li>Company Number Validation:</li> <li>The company number (<code>co</code>) cannot be zero in entry mode (msg 4: \"COMPANY CANNOT BE ZERO - ENTER OR\").</li> <li> <p>In entry mode, the company number must not already exist in <code>arcont</code> (msg 8: \"CANNOT ADD - THIS RECORD EXISTS\", msg 9: \"PRESS CMD KEY 11 TO UPDATE\").</p> </li> <li> <p>Company Name:</p> </li> <li> <p>The company name (<code>name</code>) cannot be blank (msg 13: \"COMPANY NAME CANNOT BE BLANK\").</p> </li> <li> <p>General Ledger Account Validation:</p> </li> <li> <p>For A/R GL number (<code>argl</code>), sales GL number (<code>slgl</code>), discount GL number (<code>dsgl</code>), cash GL number (<code>csgl</code>), EFT cash GL number (<code>efcg</code>), intercompany GL number (<code>icgl</code>), and finance charge GL number (<code>fcgl</code>):</p> <ul> <li>If non-zero, the GL number must exist in <code>glmast</code> and not be marked as deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>).</li> <li>Errors trigger specific messages:</li> <li>Msg 10: \"INVALID ACCOUNTS RECEIVABLE GL NO\"</li> <li>Msg 11: \"INVALID SALES GL NUMBER\"</li> <li>Msg 14: \"INVALID DISCOUNT GL NUMBER\"</li> <li>Msg 15: \"INVALID CASH GL NUMBER\"</li> <li>Msg 16: \"INVALID INTER-CO G/L NUMBER\"</li> <li>Msg 18: \"INVALID FINANCE CHARGE GL NUMBER\"</li> <li>Msg 22: \"INVALID EFT CASH GL NUMBER\"</li> </ul> </li> <li> <p>Security Code:</p> </li> <li> <p>The security code (<code>secr</code>) cannot be blank (msg 17: \"SECURITY CODE CAN NOT BE BLANK\").</p> </li> <li> <p>Aging Limits:</p> </li> <li>Aging limits (<code>lmt1</code>, <code>lmt2</code>, <code>lmt3</code>, <code>lmt4</code>) correspond to aging buckets (0-30, 31-60, 61-90, 91-120/over 120 days from invoice date, as per revision JB01).</li> <li> <p>Rules:</p> <ul> <li>None can be zero (msg 21: \"INVALID AGING LIMITS\").</li> <li>Must be in ascending order: <code>lmt1 &lt; lmt2 &lt; lmt3 &lt; lmt4</code> (msg 21 if violated).</li> </ul> </li> <li> <p>Deletion Rules:</p> </li> <li>A company cannot be deleted if active customer records exist in <code>arcust</code> (msg 19: \"COMPANY MASTER RECORDS EXIST\", msg 20: \"DELETION OF COMPANY NOT ALLOWED\").</li> <li> <p>Deletion sets <code>acdel = 'D'</code>; reactivation sets <code>acdel = 'A'</code>.</p> </li> <li> <p>Aging by Invoice Date:</p> </li> <li> <p>Per revision JB01 (04/13/05), aging is based on invoice date rather than due date, with buckets redefined as 0-30, 31-60, 61-90, 91-120, and over 120 days.</p> </li> <li> <p>Inactive GL Accounts:</p> </li> <li> <p>Per revision JB02 (08/24/16), inactive GL accounts (<code>gldel = 'I'</code>) are treated the same as deleted accounts (<code>gldel = 'D'</code>) during validation.</p> </li> <li> <p>Numeric Field Handling:</p> </li> <li>Per revision JB03 (09/27/22), the filler at positions 113-114 in <code>arcont</code> is defined as a 2-digit numeric field (N2.0).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ARCONT: A/R control file (update/add, keyed by company number).    - Fields include <code>acdel</code> (delete flag), <code>acco</code> (company number), <code>acname</code> (company name), <code>acarj#</code> (next A/R journal number), <code>acslj#</code> (next sales journal number), <code>acargl</code> (A/R GL number), <code>acslgl</code> (sales GL number), <code>acdsgl</code> (discount GL number), <code>accsgl</code> (cash GL number), <code>actrgl</code> (intercompany GL number), <code>acfngl</code> (finance GL number), <code>acsecr</code> (security code), <code>acfinc</code> (finance charge %), <code>acffmo</code> (first fiscal month), <code>aclmt1</code> to <code>aclmt4</code> (aging limits), <code>acefcg</code> (EFT cash GL number), <code>acdtcl</code> (last close date), <code>acdtcr</code> (cash receipts date). 2. ARCUST: A/R customer file (input-only, keyed).    - Used to check for active customer records during deletion.    - Fields include <code>ardel</code> (delete flag) and <code>arco</code> (company number). 3. GLMAST: General Ledger master file (input-only, keyed).    - Used to validate GL account numbers.    - Fields include <code>gldel</code> (delete/inactive flag). 4. AR930D: Workstation file for screen interaction (Profound UI handler).    - Defines two formats: <code>AR930S1</code> (inquiry/update) and <code>AR930S2</code> (data entry).</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs (e.g., via <code>CALL</code> operation). It relies entirely on internal subroutines (<code>s1</code>, <code>s2</code>, <code>clear</code>, <code>move</code>, <code>rollsr</code>, <code>rollfw</code>, <code>rollbw</code>, <code>delete</code>, <code>reacti</code>) and file operations. However, the program is invoked by the OCL script (<code>AR930.ocl36.txt</code>), which calls <code>GSGENIEC</code> and <code>GSY2K</code> before loading <code>AR930</code>. These are not called from within the RPGLE code but are part of the job setup.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR930</code> RPGLE program manages A/R control file maintenance through an interactive workstation interface. It supports adding, updating, deleting, or reactivating company records in <code>ARCONT</code>, with extensive validation against <code>ARCUST</code> and <code>GLMAST</code>. Key features include: - Process Flow: Initializes, displays screens (<code>AR930S1</code>, <code>AR930S2</code>), processes function keys (KA, KD, KG, KJ, KK), validates input, and updates files. - Business Rules: Enforces non-zero company numbers, non-blank names and security codes, valid GL accounts, ascending aging limits, and deletion restrictions. - Files: Uses <code>ARCONT</code> (A/R control), <code>ARCUST</code> (A/R customers), <code>GLMAST</code> (GL master), and <code>AR930D</code> (workstation). - External Programs: None called directly; relies on OCL setup (<code>GSGENIEC</code>, <code>GSY2K</code>).</p> <p>The program is modernized with Profound UI for screen handling and includes Y2K compliance and aging revisions, ensuring robust A/R control file management.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/","title":"Summary AR930 OCL","text":""},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#list-of-use-cases-implemented-by-the-ar930-program","title":"List of Use Cases Implemented by the AR930 Program","text":"<p>The <code>AR930</code> RPGLE program, invoked via the <code>AR930.ocl36.txt</code> OCL script, is designed for Accounts Receivable (A/R) control file maintenance. Based on the provided code, the program implements the following use cases, which focus on managing company records in the A/R control file (<code>ARCONT</code>):</p> <ol> <li>Maintain A/R Company Control Records:</li> <li>Description: Allows users to add, update, delete, or reactivate A/R company records, including configuration details such as company name, GL accounts, aging limits, and journal numbers. The program validates inputs against the customer file (<code>ARCUST</code>) and general ledger master file (<code>GLMAST</code>) to ensure data integrity.</li> <li>Operations:<ul> <li>Add: Create a new company record in <code>ARCONT</code>.</li> <li>Update: Modify existing company record details.</li> <li>Delete: Mark a company record as deleted (<code>acdel = 'D'</code>) if no active customer records exist in <code>ARCUST</code>.</li> <li>Reactivate: Restore a deleted company record (<code>acdel = 'A'</code>).</li> <li>Inquiry: View existing company records.</li> </ul> </li> <li>Context: Interactive workstation interface using screens (<code>AR930S1</code> for inquiry/update, <code>AR930S2</code> for data entry), with navigation via function keys (F1, F4, F10, F11).</li> </ol> <p>Given that the program is centered around a single, cohesive purpose (managing A/R company records), this is the primary use case. All operations (add, update, delete, reactivate, inquiry) are part of this use case, as they collectively address the maintenance of A/R control data.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#function-requirement-document-for-ar-company-control-maintenance","title":"Function Requirement Document for A/R Company Control Maintenance","text":"<p>Below is a function requirement document for a non-interactive version of the A/R company control maintenance use case. This assumes the function accepts all necessary inputs programmatically (rather than via a screen) to perform add, update, delete, or reactivate operations on the <code>ARCONT</code> file. The document focuses on business requirements, process steps, and calculations, presented concisely.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#ar-company-control-maintenance-function-requirements","title":"A/R Company Control Maintenance Function Requirements","text":""},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#overview","title":"Overview","text":"<p>The <code>MaintainARCompanyControl</code> function manages Accounts Receivable (A/R) company records in the <code>ARCONT</code> file, supporting add, update, delete, and reactivate operations. It validates inputs against the <code>ARCUST</code> (A/R customer) and <code>GLMAST</code> (General Ledger master) files, ensuring data integrity for A/R configurations.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Operation Type: String (<code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>).</li> <li>Company Number (<code>acco</code>): 2-digit numeric (non-zero for <code>ADD</code>, <code>UPDATE</code>).</li> <li>Company Name (<code>acname</code>): 30-character string.</li> <li>A/R GL Number (<code>acargl</code>): 8-digit numeric (optional).</li> <li>Sales GL Number (<code>acslgl</code>): 8-digit numeric (optional).</li> <li>Discount GL Number (<code>acdsgl</code>): 8-digit numeric (optional).</li> <li>Cash GL Number (<code>accsgl</code>): 8-digit numeric (optional).</li> <li>Intercompany GL Number (<code>actrgl</code>): 8-digit numeric (optional).</li> <li>Finance Charge GL Number (<code>acfngl</code>): 8-digit numeric (optional).</li> <li>EFT Cash GL Number (<code>acefcg</code>): 8-digit numeric (optional).</li> <li>Next A/R Journal Number (<code>acarj#</code>): 2-digit numeric.</li> <li>Next Sales Journal Number (<code>acslj#</code>): 2-digit numeric.</li> <li>Finance Charge Percentage (<code>acfinc</code>): 5-digit numeric (4.1 format, e.g., 12.345).</li> <li>Security Code (<code>acsecr</code>): 8-character string.</li> <li>First Fiscal Month (<code>acffmo</code>): 2-digit numeric (1-12).</li> <li>Aging Limits:</li> <li><code>aclmt1</code>: 2-digit numeric (0-30 days).</li> <li><code>aclmt2</code>: 2-digit numeric (31-60 days).</li> <li><code>aclmt3</code>: 2-digit numeric (61-90 days).</li> <li><code>aclmt4</code>: 2-digit numeric (91-120 days or over 120).</li> <li>Last Close Date (<code>acdtcl</code>): 6-digit numeric (YYMMDD).</li> <li>Cash Receipts Date (<code>acdtcr</code>): 6-digit numeric (YYMMDD).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Status: Success or error code.</li> <li>Error Message: Description of validation or processing errors (if any).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Operation and Company Number:</li> <li>Ensure <code>Operation Type</code> is one of <code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>.</li> <li>For <code>ADD</code> or <code>UPDATE</code>, verify <code>acco</code> is non-zero.</li> <li>For <code>ADD</code>, check that <code>acco</code> does not exist in <code>ARCONT</code>.</li> <li> <p>For <code>UPDATE</code>, <code>DELETE</code>, or <code>REACTIVATE</code>, check that <code>acco</code> exists in <code>ARCONT</code>.</p> </li> <li> <p>Validate Input Data:</p> </li> <li>Company Name: Must not be blank.</li> <li>Security Code: Must not be blank.</li> <li>GL Accounts: For <code>acargl</code>, <code>acslgl</code>, <code>acdsgl</code>, <code>accsgl</code>, <code>actrgl</code>, <code>acfngl</code>, <code>acefcg</code> (if non-zero):<ul> <li>Must exist in <code>GLMAST</code> and not be marked as deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>).</li> </ul> </li> <li>Aging Limits:<ul> <li>Must be non-zero.</li> <li>Must follow ascending order: <code>aclmt1 &lt; aclmt2 &lt; aclmt3 &lt; aclmt4</code>.</li> </ul> </li> <li> <p>Finance Charge %: No specific validation beyond format (4.1).</p> </li> <li> <p>Perform Operation:</p> </li> <li>ADD:<ul> <li>Create new <code>ARCONT</code> record with <code>acdel = 'A'</code> (active) and provided inputs.</li> </ul> </li> <li>UPDATE:<ul> <li>Update existing <code>ARCONT</code> record with provided inputs, retaining <code>acdel</code> unless changed.</li> </ul> </li> <li>DELETE:<ul> <li>Check <code>ARCUST</code> for active records (non-deleted, matching <code>acco</code>).</li> <li>If none exist, set <code>acdel = 'D'</code> in <code>ARCONT</code>.</li> </ul> </li> <li> <p>REACTIVATE:</p> <ul> <li>If <code>acdel = 'D'</code>, set <code>acdel = 'A'</code> in <code>ARCONT</code>.</li> </ul> </li> <li> <p>Write to File:</p> </li> <li>Commit changes to <code>ARCONT</code> (add or update record).</li> <li>Return success status or error message if validation fails.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Number: Must be unique for <code>ADD</code>; must exist for <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>.</li> <li>Company Name and Security Code: Cannot be blank.</li> <li>GL Accounts: Non-zero accounts must be valid (exist in <code>GLMAST</code>, not deleted or inactive).</li> <li>Aging Limits: Non-zero, ascending order (0-30, 31-60, 61-90, 91-120/over 120 days from invoice date, per 04/13/05 revision).</li> <li>Deletion: Prohibited if active customer records exist in <code>ARCUST</code>.</li> <li>Reactivation: Only allowed if record is marked deleted (<code>acdel = 'D'</code>).</li> <li>Inactive GL Accounts: Treated as deleted (per 08/24/16 revision).</li> <li>Numeric Fields: Filler at positions 113-114 in <code>ARCONT</code> is numeric (2.0 format, per 09/27/22 revision).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Limits: No calculations; validated for non-zero and ascending order.</li> <li>Finance Charge %: Stored as provided (4.1 format), no calculations.</li> <li>Journal Numbers: Stored as provided, no calculations.</li> <li>Dates: <code>acdtcl</code> and <code>acdtcr</code> stored as provided (YYMMDD), no calculations.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#error-messages","title":"Error Messages","text":"<ul> <li>\"COMPANY CANNOT BE ZERO - ENTER OR\" (zero <code>acco</code> in <code>ADD</code>/<code>UPDATE</code>).</li> <li>\"CANNOT ADD - THIS RECORD EXISTS\" (<code>acco</code> exists in <code>ADD</code>).</li> <li>\"COMPANY NAME CANNOT BE BLANK\".</li> <li>\"SECURITY CODE CAN NOT BE BLANK\".</li> <li>\"INVALID ACCOUNTS RECEIVABLE GL NO\" (invalid <code>acargl</code>).</li> <li>\"INVALID SALES GL NUMBER\" (invalid <code>acslgl</code>).</li> <li>\"INVALID DISCOUNT GL NUMBER\" (invalid <code>acdsgl</code>).</li> <li>\"INVALID CASH GL NUMBER\" (invalid <code>accsgl</code>).</li> <li>\"INVALID INTER-CO G/L NUMBER\" (invalid <code>actrgl</code>).</li> <li>\"INVALID FINANCE CHARGE GL NUMBER\" (invalid <code>acfngl</code>).</li> <li>\"INVALID EFT CASH GL NUMBER\" (invalid <code>acefcg</code>).</li> <li>\"INVALID AGING LIMITS\" (zero or non-ascending <code>aclmt1</code>\u2013<code>aclmt4</code>).</li> <li>\"COMPANY MASTER RECORDS EXIST\" (active <code>ARCUST</code> records for <code>DELETE</code>).</li> <li>\"DELETION OF COMPANY NOT ALLOWED\" (active <code>ARCUST</code> records).</li> <li>\"RECORD NOT FOUND\" (invalid <code>acco</code> for <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>).</li> <li>\"PREVIOUS RECORD WAS REACTIVATED\" (successful reactivation).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: A/R control file (read/write).</li> <li><code>ARCUST</code>: A/R customer file (read-only, for deletion check).</li> <li><code>GLMAST</code>: General Ledger master file (read-only, for GL validation).</li> <li>External Programs: None (assumes inputs provided programmatically).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#notes","title":"Notes","text":"<ul> <li>The function replaces interactive screen handling with direct input processing.</li> <li>Aging is based on invoice date (0-30, 31-60, 61-90, 91-120, over 120 days), per 04/13/05 revision.</li> <li>No external program calls are required, unlike the OCL setup (<code>GSGENIEC</code>, <code>GSY2K</code>).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/","title":"AR931 RPG36","text":"<p>The provided document, <code>AR931.rpg36.txt</code>, is an RPG program for the IBM System/36, named <code>AR931</code>, which generates an Accounts Receivable (A/R) Control File Listing. This program is called from the main OCL script (<code>AR931P.ocl36.txt</code>) after user input is validated by the <code>AR931P</code> RPGLE program. The <code>AR931</code> program reads data from the A/R control file and produces a formatted report on a printer. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, integrating context from the OCL script and the <code>AR931P</code> program for a comprehensive understanding.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR931</code> program is a straightforward RPG program designed to read records from the A/R control file (<code>ARCONT</code>) and print a formatted report. It operates in a simple input-processing-output cycle, with headers and detail lines for each valid record. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P016 B AR931</code>: Specifies the program name (<code>AR931</code>) with a program number (<code>P016</code>) and batch mode (<code>B</code>), indicating it\u2019s designed for batch processing.</li> </ul> </li> <li>File Definitions:<ul> <li><code>FARCONT IP F 256 256 DISK</code>: Defines <code>ARCONT</code> as the primary input file (256-byte records, disk-based), read sequentially.</li> <li><code>FPRINT O F 160 160 OF PRINTER</code>: Defines <code>PRINT</code> as the output file (160-byte records) for printing the report, with overflow indicator <code>OF</code>.</li> </ul> </li> <li>Array Definitions:<ul> <li><code>E SEP 66 2</code>: Defines a 2-element array <code>SEP</code> with 66 bytes each, used for separator lines (likely asterisks, initialized in the program).</li> <li><code>E SEP2 16 2</code>: Defines a 2-element array <code>SEP2</code> with 16 bytes each, used for additional separator lines.</li> </ul> </li> <li>Input Specifications:<ul> <li><code>IARCONT NS 01</code>: Defines the input record format for <code>ARCONT</code> with fields:</li> <li><code>ACDEL</code> (1): Delete flag (<code>'D'</code> for deleted records).</li> <li><code>ACCO</code> (2-3): Company number (originally 2-30, likely a typo or legacy format; used as 2-3 in output).</li> <li><code>ACNAME</code> (4-33): Company name.</li> <li><code>ACARJ#</code> (34-35): Next A/R journal number.</li> <li><code>ACSLJ#</code> (36-37): Next sales journal number.</li> <li><code>ACARGL</code> (38-45): A/R general ledger number.</li> <li><code>ACSLGL</code> (46-53): Sales general ledger number.</li> <li><code>ACDSGL</code> (54-61): Discount general ledger number.</li> <li><code>ACCSGL</code> (62-69): Cash general ledger number.</li> <li><code>ACICGL</code> (70-77): Intercompany general ledger number.</li> <li><code>ACDATE</code> (78-83): Last aging date.</li> <li><code>ACSECR</code> (84-91): Security code for statements.</li> <li><code>ACFINC</code> (92-96.4): Finance charge percentage (4 decimal places).</li> <li><code>ACFNGL</code> (97-104): Finance general ledger number.</li> <li><code>ACFFMO</code> (105-106): First fiscal month.</li> <li><code>ACLMT1</code> (107-108): Aging bucket 1 upper limit (1-30 days).</li> <li><code>ACLMT2</code> (109-110): Aging bucket 2 upper limit (31-60 days).</li> <li><code>ACLMT3</code> (111-112): Aging bucket 3 upper limit (61-90 days).</li> <li><code>ACLMT4</code> (123-125): Aging bucket 4 upper limit (91-120 days, added in revision JB01).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>TIMDAT</code> (12 bytes), <code>TIME</code> (6 bytes), <code>DATE</code> (6 bytes): Used to capture and format the system date and time.</li> <li><code>PAGE</code>: Used for page numbering in the report.</li> </ul> </li> <li> <p>Initial Setup (Calculation Specifications):</p> </li> <li><code>C N11 SETOF 15</code>: If indicator <code>11</code> is off (no overflow), clears the overflow indicator <code>15</code>.</li> <li><code>C N11 MOVE '* ' SEP</code>: Initializes the <code>SEP</code> array with asterisks for separator lines.</li> <li><code>C N11 MOVE '* ' SEP2</code>: Initializes the <code>SEP2</code> array with asterisks for additional separator lines.</li> <li><code>C N11 TIME TIMDAT 120</code>: Retrieves the system date and time into <code>TIMDAT</code>.</li> <li><code>C N11 MOVELTIMDAT TIME 60</code>: Moves the time portion to <code>TIME</code> (6 bytes).</li> <li><code>C N11 MOVE TIMDAT DATE 60</code>: Moves the date portion to <code>DATE</code> (6 bytes).</li> <li> <p><code>C N11 SETON 1115</code>: Sets indicators <code>11</code> (control break) and <code>15</code> (overflow) to ensure headers are printed at the start.</p> </li> <li> <p>Report Generation (Output Specifications):</p> </li> <li>The program reads <code>ARCONT</code> sequentially (as the primary file) and processes each record:<ul> <li>Record Filtering: Skips records where <code>ACDEL = 'D'</code> (deleted records), as implied by standard System/36 practices, though not explicitly coded in the RPG (likely handled by the OCL or <code>AR931P</code> validation).</li> </ul> </li> <li>Output to <code>PRINT</code>:<ul> <li>Header Lines (D 103, D 2, D 1):</li> <li>Printed when indicator <code>15</code> (overflow) is on or at the start (<code>N15</code> for first page).</li> <li><code>D 103</code>: Prints page number (<code>PAGE</code>) and date (<code>DATE</code>) at positions 104-108 and 120-129.</li> <li><code>D 2</code>: Prints the report title (\"A/R CONTROL FILE LISTING\") and time (<code>TIME</code>) at positions 78 and 120-129.</li> <li><code>D 1</code>: Prints separator lines (<code>SEP</code>, <code>SEP2</code>) and column headers (e.g., \"CO#\", \"COMPANY NAME\", \"A/R G/L#\", etc.) at various positions.</li> <li><code>D 1</code>: Additional headers for \"NEXT\" (journal numbers), \"GL\", \"FIRST FISCAL MONTH\", and \"AGING BUCKETS\".</li> <li>Detail Lines (D 3):</li> <li>Printed for each non-deleted <code>ARCONT</code> record.</li> <li>Outputs fields: <code>ACCO</code> (3), <code>ACNAME</code> (35), <code>ACARGL</code> (45), <code>ACCSGL</code> (56), <code>ACDSGL</code> (67), <code>ACICGL</code> (78), <code>ACARJ#</code> (84), <code>ACSLJ#</code> (88), <code>ACFINC2</code> (96, formatted finance charge), <code>ACFNGLZ</code> (105, formatted finance GL), <code>ACSECR</code> (114), <code>ACFFMO</code> (129), <code>ACLMT1</code> (141), <code>ACLMT2</code> (145), <code>ACLMT3</code> (149), <code>ACLMT4</code> (155).</li> </ul> </li> <li> <p>Overflow Handling: The <code>OF</code> indicator triggers header reprinting when the page length (160 characters, likely with a standard line count) is exceeded.</p> </li> <li> <p>Program Flow:</p> </li> <li>The RPG cycle automatically reads each <code>ARCONT</code> record, processes it, and writes to <code>PRINT</code> until end-of-file.</li> <li>Headers are printed at the start of the report and on page overflows.</li> <li>Detail lines are printed for each valid record, showing A/R control data.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AR931</code> program enforces the following business rules for the A/R Control File Listing:</p> <ol> <li>Report Content:</li> <li>The report lists all non-deleted records from <code>ARCONT</code> (filtered implicitly or by <code>AR931P</code>).</li> <li> <p>For each company, it includes:</p> <ul> <li>Company number (<code>ACCO</code>) and name (<code>ACNAME</code>).</li> <li>General ledger numbers for A/R (<code>ACARGL</code>), cash (<code>ACCSGL</code>), discount (<code>ACDSGL</code>), and intercompany (<code>ACICGL</code>).</li> <li>Next journal numbers for A/R (<code>ACARJ#</code>) and sales (<code>ACSLJ#</code>).</li> <li>Finance charge percentage (<code>ACFINC</code>), finance GL number (<code>ACFNGL</code>), and security code (<code>ACSECR</code>).</li> <li>First fiscal month (<code>ACFFMO</code>).</li> <li>Aging bucket upper limits: 1-30 days (<code>ACLMT1</code>), 31-60 days (<code>ACLMT2</code>), 61-90 days (<code>ACLMT3</code>), 91-120 days (<code>ACLMT4</code>).</li> </ul> </li> <li> <p>Aging Buckets (Revision JB01):</p> </li> <li>Per the revision log (dated 04/13/05), aging is based on invoice date rather than due date, as modified for PNC Bank.</li> <li>Aging buckets are:<ul> <li>0-30 days (<code>ACLMT1</code>).</li> <li>31-60 days (<code>ACLMT2</code>).</li> <li>61-90 days (<code>ACLMT3</code>).</li> <li>91-120 days (<code>ACLMT4</code>).</li> <li>Over 120 days (implicit, not stored in a specific field).</li> </ul> </li> <li> <p>This change aligns with financial reporting requirements for tracking receivables by invoice age.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes a header with the title, date, time, and page number.</li> <li>Separator lines (<code>SEP</code>, <code>SEP2</code>) and column headers ensure readability.</li> <li> <p>Fields are positioned at specific columns (e.g., <code>ACCO</code> at 3, <code>ACNAME</code> at 35) for consistent formatting.</p> </li> <li> <p>Record Filtering:</p> </li> <li>Only non-deleted records (<code>ACDEL \u2260 'D'</code>) are included, ensuring the report reflects active companies.</li> <li> <p>The <code>AR931P</code> program (called earlier in the OCL) validates company selections (<code>ALL</code> or specific companies), so <code>AR931</code> processes only the selected records.</p> </li> <li> <p>Output Control:</p> </li> <li>The number of copies (<code>KYCOPY</code>) is set by <code>AR931P</code> and passed via the OCL script.</li> <li>The report can be run interactively or submitted to a job queue (<code>KYJOBQ</code>), as determined by <code>AR931P</code> and the OCL script.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>ARCONT:</li> <li>Type: Primary input file (disk, 256 bytes).</li> <li>Purpose: Stores Accounts Receivable control data, including company details, GL numbers, journal numbers, finance charges, and aging bucket limits.</li> <li> <p>Fields:</p> <ul> <li><code>ACDEL</code>: Delete flag.</li> <li><code>ACCO</code>: Company number.</li> <li><code>ACNAME</code>: Company name.</li> <li><code>ACARJ#</code>, <code>ACSLJ#</code>: Journal numbers.</li> <li><code>ACARGL</code>, <code>ACSLGL</code>, <code>ACDSGL</code>, <code>ACCSGL</code>, <code>ACICGL</code>: GL numbers.</li> <li><code>ACDATE</code>: Last aging date.</li> <li><code>ACSECR</code>: Security code.</li> <li><code>ACFINC</code>: Finance charge percentage.</li> <li><code>ACFNGL</code>: Finance GL number.</li> <li><code>ACFFMO</code>: First fiscal month.</li> <li><code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code>: Aging bucket limits.</li> </ul> </li> <li> <p>PRINT:</p> </li> <li>Type: Output file (printer, 160 bytes).</li> <li>Purpose: Receives the formatted report output, including headers and detail lines for each <code>ARCONT</code> record.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR931</code> program does not explicitly call any external programs using <code>CALL</code> operations. However, it is part of a workflow orchestrated by the OCL script (<code>AR931P.ocl36.txt</code>):</p> <ul> <li>AR931P:</li> <li>Called before <code>AR931</code> in the OCL script (<code>// LOAD AR931P</code> and <code>// RUN</code>).</li> <li>Validates user input (company selection, job queue, copies) and sets parameters (<code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>) used to control <code>AR931</code> execution.</li> <li> <p>Not called by <code>AR931</code> but provides input parameters via the data area (<code>UDS</code>).</p> </li> <li> <p>GSGENIEC and SCPROCP:</p> </li> <li>Called in the OCL script before <code>AR931P</code> (<code>// CALL PGM(GSGENIEC)</code> and <code>// SCPROCP</code>).</li> <li>Likely handle system setup or environment configuration but are not directly referenced in <code>AR931</code>.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#integration-with-ocl-and-ar931p","title":"Integration with OCL and AR931P","text":"<p>The OCL script (<code>AR931P.ocl36.txt</code>) and <code>AR931P</code> RPGLE program provide the context for <code>AR931</code>: - OCL Script:   - Loads <code>AR931P</code> to collect and validate user input, then either submits <code>AR931</code> to a job queue (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code>) or runs it directly (<code>// ELSE AR931</code>).   - Passes the <code>ARCONT</code> file and parameters (e.g., <code>?9?</code> for library) to <code>AR931</code>.   - Checks for cancellation (<code>KYCANC = 'CANCEL'</code>) set by <code>AR931P</code>. - AR931P:   - Validates company selection (<code>ALL</code> or specific companies via <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>), job queue (<code>KYJOBQ</code>), and copies (<code>KYCOPY</code>).   - Populates a company list (<code>DCO</code>) and uses <code>GSCONT</code> for default settings.   - Passes validated parameters to <code>AR931</code> via the data area (<code>UDS</code>). - AR931:   - Uses the validated parameters to filter <code>ARCONT</code> records (e.g., specific companies if <code>KYALCO = 'CO'</code>) and generate the report.   - Runs in batch mode (as implied by <code>B</code> in the header) or interactively, based on <code>KYJOBQ</code>.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Overview: <code>AR931</code> reads non-deleted records from the <code>ARCONT</code> file and generates a formatted A/R Control File Listing on the <code>PRINT</code> file. It prints headers (title, date, time, page number) and detail lines for each company, including GL numbers, journal numbers, finance charges, fiscal month, and aging bucket limits (0-30, 31-60, 61-90, 91-120 days, per revision JB01).</li> <li>Business Rules: Includes only active (<code>ACDEL \u2260 'D'</code>) records, formats aging by invoice date (0-30, 31-60, 61-90, 91-120, over 120 days), and uses parameters from <code>AR931P</code> for company selection and job control. Ensures consistent report formatting with headers and separators.</li> <li>Files/Tables: <code>ARCONT</code> (input, A/R control data), <code>PRINT</code> (output, printer file).</li> <li>External Programs: None called directly in <code>AR931</code>, but <code>AR931P</code> (input validation), <code>GSGENIEC</code>, and <code>SCPROCP</code> (system setup) are part of the OCL workflow.</li> </ul> <p>If you need further details (e.g., specific report layout or additional context about <code>GSCONT</code> or <code>AR931P</code> interactions), please provide additional files or clarify the requirements, as some aspects (e.g., exact filtering logic) depend on the broader system context.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/","title":"AR931P OCL","text":"<p>Let\u2019s break down the provided OCL (Operation Control Language) program, <code>AR931P.ocl36.txt</code>, which is used to control job execution in an IBM System/36 environment, typically for RPG (Report Program Generator) programs. OCL is a scripting language for managing job flows, file operations, and program execution on the System/36. Below, I\u2019ll explain the process steps, identify external programs called, and list any tables or files referenced.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script outlines a sequence of steps for executing a job related to an Accounts Receivable Control File List. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The script starts by calling a program named <code>GSGENIEC</code>. This is likely a utility or control program that performs initial setup or validation tasks before the main job proceeds.</li> <li> <p>This step suggests that <code>GSGENIEC</code> may handle system-level checks or configurations, possibly related to the job environment or user permissions.</p> </li> <li> <p>Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> statement checks a condition at location <code>506,3</code> in the system\u2019s library or memory (likely a status code or flag).</li> <li>If the condition evaluates to <code>YES</code>, the script executes a <code>RETURN</code>, which terminates the OCL procedure at this point, preventing further execution.</li> <li> <p>This acts as a gatekeeper, ensuring the job only proceeds if the condition is not met (i.e., the condition is <code>NO</code>).</p> </li> <li> <p>Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command invokes a system procedure, passing a parameter <code>?9?</code> (a placeholder for a value, likely a library or file identifier).</li> <li>The commas indicate unused parameter positions, typical in System/36 OCL for aligning with a procedure\u2019s expected parameter list.</li> <li> <p>This step likely prepares the environment or sets up a specific processing context, but the exact function depends on what <code>SCPROCP</code> does (not defined in the script).</p> </li> <li> <p>Clear Local Variables (<code>// LOCAL BLANK-*ALL</code>):</p> </li> <li>This command resets all local variables to blank, clearing any residual data from prior runs to ensure a clean state for the job.</li> <li> <p>This is a housekeeping step to prevent data contamination.</p> </li> <li> <p>Year 2000 Compliance (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command likely invokes a Year 2000 compliance routine, ensuring date-related operations in the program are Y2K-compliant (e.g., handling four-digit years).</li> <li> <p>This was common in legacy systems like the System/36 to address date issues around the millennium.</p> </li> <li> <p>Load Program (<code>// LOAD AR931P</code>):</p> </li> <li>The <code>LOAD</code> command loads the RPG program <code>AR931P</code> into memory for execution.</li> <li> <p>This is the main program responsible for generating the Accounts Receivable Control File List.</p> </li> <li> <p>File Specification (<code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>):</p> </li> <li>Defines a file named <code>ARCONT</code> to be used by the program.</li> <li>The <code>LABEL-?9?ARCONT</code> indicates the file is located in a library or directory specified by the <code>?9?</code> parameter, with the file name <code>ARCONT</code>.</li> <li><code>DISP-SHR</code> (disposition shared) allows multiple jobs to access the file simultaneously, typically for read-only operations.</li> <li> <p>This file is likely the Accounts Receivable control file containing data for the report.</p> </li> <li> <p>Run Program (<code>// RUN</code>):</p> </li> <li> <p>Executes the loaded <code>AR931P</code> program, which processes the <code>ARCONT</code> file to generate the Accounts Receivable Control File List.</p> </li> <li> <p>Error Check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li>Checks a condition at location <code>129,6</code> (likely an error or status code set by <code>AR931P</code>).</li> <li>If the condition is met (<code>CANCEL</code>), the script jumps to the <code>END</code> tag, terminating the job.</li> <li> <p>This ensures the job halts if an error occurs during <code>AR931P</code> execution.</p> </li> <li> <p>Conditional Job Submission (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931,,,,,,,,,?9?</code>):</p> <ul> <li>Checks a condition at location <code>120,1</code>.</li> <li>If the condition is <code>Y</code> (yes), the script submits a job named <code>AR931</code> to a job queue in the library specified by <code>?CLIB?</code>, passing the <code>?9?</code> parameter.</li> <li>This suggests <code>AR931</code> is a related job or program (possibly another RPG program or a continuation job) that runs asynchronously in the job queue.</li> </ul> </li> <li> <p>Alternative Execution (<code>// ELSE AR931 ,,,,,,,,?9?</code>):</p> <ul> <li>If the condition at <code>120,1</code> is not <code>Y</code>, the script directly executes <code>AR931</code>, passing the <code>?9?</code> parameter.</li> <li>This provides an alternative execution path, running <code>AR931</code> immediately rather than queuing it.</li> </ul> </li> <li> <p>End Tag (<code>// TAG END</code>):</p> <ul> <li>Marks the <code>END</code> label, where the script jumps if the <code>CANCEL</code> condition is met in step 9.</li> <li>This defines the termination point for error scenarios.</li> </ul> </li> <li> <p>Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>):</p> <ul> <li>Resets all local variables to blank again, ensuring no residual data remains after execution.</li> <li>This is another housekeeping step to clean up the environment.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly references the following external programs:</p> <ol> <li>GSGENIEC:</li> <li>Called at the start of the script via <code>// CALL PGM(GSGENIEC)</code>.</li> <li> <p>Likely a utility program for system setup, validation, or initialization.</p> </li> <li> <p>AR931P:</p> </li> <li>Loaded and executed via <code>// LOAD AR931P</code> and <code>// RUN</code>.</li> <li> <p>The main RPG program that generates the Accounts Receivable Control File List.</p> </li> <li> <p>AR931:</p> </li> <li>Referenced in the conditional job submission (<code>JOBQ ?CLIB?,AR931</code>) or direct execution (<code>AR931</code>).</li> <li> <p>Likely another RPG program or job related to the Accounts Receivable process, possibly for further processing or reporting.</p> </li> <li> <p>SCPROCP:</p> </li> <li>Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.</li> <li>A system procedure, possibly for environment setup or configuration, but its exact function is not specified in the script.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The script explicitly references one file:</p> <ol> <li>ARCONT:</li> <li>Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.</li> <li>This is the Accounts Receivable control file, likely containing data such as customer accounts, balances, or transaction details used by <code>AR931P</code> to generate the report.</li> <li>The <code>?9?</code> in the <code>LABEL</code> indicates the file resides in a library or directory specified by the <code>?9?</code> parameter.</li> </ol> <p>No other tables or files are explicitly mentioned, though <code>AR931P</code> or <code>AR931</code> may internally reference additional files or tables not specified in the OCL script.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The OCL script controls the execution of an Accounts Receivable Control File List job. It starts by calling a setup program (<code>GSGENIEC</code>), checks a condition to proceed, sets up the environment, loads and runs the main RPG program (<code>AR931P</code>) using the <code>ARCONT</code> file, handles errors, and conditionally submits or runs another job/program (<code>AR931</code>). Housekeeping steps ensure a clean environment.</li> <li>External Programs: <code>GSGENIEC</code>, <code>AR931P</code>, <code>AR931</code>, <code>SCPROCP</code>.</li> <li>Files/Tables: <code>ARCONT</code>.</li> </ul> <p>If you need further clarification or analysis (e.g., specific behavior of <code>AR931P</code> or <code>AR931</code>, or details about <code>GSY2K</code>), please provide additional context or files, as these components are system-specific and not fully detailed in the provided OCL script.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/","title":"AR931P RPGLE","text":"<p>The provided document, <code>AR931P.rpgle.txt</code>, is an RPGLE (Report Program Generator Language Extended) program for the IBM System/36 or AS/400 (IBM i) environment, converted from an older RPG format by the TARGET/400 tool. This program, <code>AR931P</code>, appears to handle the prompting and validation for generating an Accounts Receivable (A/R) Control File List. It interacts with a workstation (display file) to collect user input and validates it against data in the A/R control file. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, referencing the previously provided OCL script (<code>AR931P.ocl36.txt</code>) for context.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR931P</code> program is designed to prompt the user for parameters (e.g., company selection, job queue settings) via a display file, validate the input, and prepare data for the A/R Control File List report. The steps are executed in a structured flow, with subroutines handling specific tasks. Here\u2019s a detailed breakdown:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs the program in a named activation group (not the default), ensuring proper resource management.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed decimal fields are handled correctly during input.</li> <li><code>H DFTNAME(AR931P)</code>: Sets the default program name to <code>AR931P</code>.</li> </ul> </li> <li>File Definitions:<ul> <li><code>FAR931PD CF E WORKSTN HANDLER('PROFOUNDUI(HANDLER)')</code>: Defines the display file <code>AR931PD</code> (likely replacing the original <code>CREEN</code>) for user interaction, using the Profound UI handler for modernized UI support.</li> <li><code>FARCONT IF F 256 2AIDISK KEYLOC(2)</code>: Defines the input file <code>ARCONT</code> (Accounts Receivable control file), with a record length of 256 bytes and a key starting at position 2.</li> <li><code>FGSCONT IF F 512 2AIDISK KEYLOC(2)</code>: Defines another input file <code>GSCONT</code>, likely a general system control file, with a record length of 512 bytes and a key at position 2.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>COM</code>: A compile-time array of 5 elements (40 bytes each) containing error messages (e.g., \"COMPANY SELECTION MUST BE 'CO' OR 'ALL'\").</li> <li><code>DCO</code>: An array of 10 elements (35 bytes each) to store company numbers and names from <code>ARCONT</code>.</li> <li><code>UDS</code>: A data structure for passing parameters, including:</li> <li><code>KYALCO</code> (111-113): Company selection code (<code>ALL</code> or <code>CO</code>).</li> <li><code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (114-119): Company numbers (numeric).</li> <li><code>KYJOBQ</code> (120): Job queue flag (<code>Y</code> or <code>N</code>).</li> <li><code>KYCOPY</code> (121-122): Number of copies for the report.</li> <li><code>KYCANC</code> (129-134): Cancellation flag.</li> </ul> </li> <li> <p>Indicators: RPG indicators (e.g., <code>*IN01</code>, <code>*IN09</code>, <code>*IN81</code>) control program flow and screen display.</p> </li> <li> <p>Workstation File Read and Control (<code>QSCTL</code> Check):</p> </li> <li>The program checks the <code>QSCTL</code> variable (likely a control flag):<ul> <li>If <code>QSCTL</code> is blank:</li> <li>Sets <code>*IN09 = '1'</code> and <code>*IN01 = '0'</code>.</li> <li>Sets <code>QSCTL = 'R'</code> (likely indicating a read operation).</li> <li>Else:</li> <li>Sets <code>*IN09 = '0'</code> and <code>*IN01 = '1'</code>.</li> <li>Reads the display file <code>AR931PD</code> and sets <code>*INLR = *ON</code> (last record), then returns, exiting the program.</li> </ul> </li> <li> <p>This step determines whether to initialize the screen or process user input.</p> </li> <li> <p>Clear Messages and Indicators:</p> </li> <li>Clears the <code>MSG</code> field (40 bytes) used for error messages.</li> <li> <p>Resets indicators <code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code> to <code>*OFF</code> to ensure a clean state for validation and display.</p> </li> <li> <p>Cancel Key Check (<code>*INKG</code>):</p> </li> <li> <p>If the cancel function key (<code>*INKG = *ON</code>) is pressed:</p> <ul> <li>Resets <code>*IN01</code> and <code>*IN09</code> to <code>*OFF</code>.</li> <li>Sets <code>*INLR = *ON</code> to indicate program termination.</li> <li>Sets <code>KYCANC = 'CANCEL'</code>, which aligns with the OCL script\u2019s error check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>).</li> <li>This allows the user to cancel the operation, terminating the program.</li> </ul> </li> <li> <p>Initial Setup (<code>*IN09</code> Check):</p> </li> <li>If <code>*IN09 = *ON</code> (initial program entry):<ul> <li>Sets <code>*IN81 = *ON</code> to control screen display.</li> <li>Executes the <code>ONETIM</code> subroutine to perform one-time setup tasks.</li> </ul> </li> <li> <p>This ensures setup occurs only on the first pass.</p> </li> <li> <p>Screen Processing (<code>*IN01</code> Check):</p> </li> <li>If <code>*IN01 = *ON</code> (user input received):<ul> <li>Executes the <code>SCREEN1</code> subroutine to validate user input.</li> </ul> </li> <li> <p>This handles the validation of parameters entered via the display file.</p> </li> <li> <p>Screen Display or Termination:</p> </li> <li>If <code>*IN81 = *OFF</code>:<ul> <li>Sets <code>*INLR = *ON</code> to terminate the program.</li> </ul> </li> <li>If <code>*IN81 = *ON</code>:<ul> <li>Writes to the display file <code>AR931PD</code> to show the screen (with fields like <code>KYALCO</code>, <code>KYCO1</code>, <code>DCO</code>, etc.) and loops back to the <code>END</code> tag for further input.</li> </ul> </li> <li> <p>This controls whether the program displays the screen or exits.</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Performs one-time setup, populating the <code>DCO</code> array with company data and setting default parameters.</li> <li> <p>Steps:</p> <ul> <li>Clears the <code>DCO</code> array.</li> <li>Initializes counters: <code>X = 1</code> (array index), <code>ACLIM = 00</code> (limit for reading <code>ARCONT</code>).</li> <li>Positions the file pointer at the start of <code>ARCONT</code> using <code>SETLL</code>.</li> <li>Reads <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10 = *ON</code>) or <code>X = 10</code>:</li> <li>Skips records where <code>ACDEL = 'D'</code> (deleted records).</li> <li>Stores <code>ACCO</code> (company number) and <code>ACNAME</code> (company name) in <code>DCO(X)</code>.</li> <li>Increments <code>X</code>.</li> <li>Copies <code>DCO</code> elements to individual fields (<code>DCO1</code> to <code>DCO10</code>) for display.</li> <li>Checks <code>GSCONT</code> for a company number (<code>GXCONO</code>):</li> <li>If <code>GXCONO \u2260 0</code>, sets <code>KYALCO = 'CO '</code> and <code>KYCO1 = GXCONO</code>.</li> <li>Else, sets <code>KYALCO = 'ALL'</code>.</li> <li>Sets defaults: <code>KYJOBQ = 'N'</code>, <code>KYCOPY = 01</code>.</li> <li>Sets <code>*IN81 = *ON</code> to display the screen.</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validates user input for company selection, company numbers, and job queue settings.</li> <li>Steps:<ul> <li>Company Selection Validation:</li> <li>Checks if <code>KYALCO = 'ALL'</code> or <code>KYALCO = 'CO '</code>. If neither, sets error indicators (<code>*IN81</code>, <code>*IN90</code>), displays error message <code>COM(1)</code> (\"COMPANY SELECTION MUST BE 'CO' OR 'ALL'\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'CO'</code> and all company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are <code>0</code>, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays <code>COM(2)</code> (\"IF CO, THEN ENTER VALID COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'ALL'</code> and any company number is non-zero, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays <code>COM(3)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>Company Number Validation (if <code>KYALCO = 'CO'</code>):</li> <li>For each non-zero <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, performs a <code>CHAIN</code> to <code>ARCONT</code> to verify the company number exists.</li> <li>If any company number is invalid (<code>*IN10 = *ON</code>), sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>/<code>IN52</code>/<code>IN53</code>), displays <code>COM(4)</code> (\"INVALID COMPANY NUMBER\"), and jumps to <code>ENDS1</code>.</li> <li>Job Queue Validation:</li> <li>Checks if <code>KYJOBQ = 'Y'</code> or <code>KYJOBQ = 'N'</code>. If neither, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN54</code>), displays <code>COM(5)</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\"), and jumps to <code>ENDS1</code>.</li> <li>Copy Count Validation:</li> <li>If <code>KYCOPY = 0</code>, sets it to <code>01</code> to ensure at least one copy.</li> <li>Jumps to <code>ENDS1</code> to end the subroutine.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the A/R Control File List:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>ALL</code> (process all companies) or <code>CO</code> (specific companies) via <code>KYALCO</code>.</li> <li>If <code>KYALCO = 'CO'</code>, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided.</li> <li>If <code>KYALCO = 'ALL'</code>, no company numbers should be entered.</li> <li> <p>Company numbers must exist in the <code>ARCONT</code> file and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</p> </li> <li> <p>Job Queue Selection:</p> </li> <li>The job queue flag (<code>KYJOBQ</code>) must be either <code>Y</code> (submit to job queue) or <code>N</code> (run interactively).</li> <li> <p>This aligns with the OCL script\u2019s conditional job submission (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code>).</p> </li> <li> <p>Copy Count:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be at least 1. If set to 0, it defaults to 1.</p> </li> <li> <p>Error Handling:</p> </li> <li>Invalid inputs (e.g., wrong <code>KYALCO</code>, invalid company numbers, or incorrect <code>KYJOBQ</code>) trigger error messages from the <code>COM</code> array and prevent further processing until corrected.</li> <li> <p>The cancel key (<code>*INKG</code>) allows the user to exit, setting <code>KYCANC = 'CANCEL'</code>, which the OCL script checks to terminate the job.</p> </li> <li> <p>Data Validation:</p> </li> <li>Only non-deleted records (<code>ACDEL \u2260 'D'</code>) from <code>ARCONT</code> are used.</li> <li> <p>Up to 10 companies can be displayed (<code>DCO</code> array), populated from <code>ARCONT</code>.</p> </li> <li> <p>Default Settings:</p> </li> <li>If <code>GSCONT</code> contains a non-zero company number (<code>GXCONO</code>), it defaults to <code>KYALCO = 'CO '</code> with <code>KYCO1 = GXCONO</code>. Otherwise, <code>KYALCO = 'ALL'</code>.</li> <li><code>KYJOBQ</code> defaults to <code>N</code>, and <code>KYCOPY</code> defaults to <code>01</code>.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AR931PD:</li> <li>Type: Display file (workstation file).</li> <li>Purpose: Handles user interaction, displaying prompts for <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>DCO</code> (company list), and <code>MSG</code> (error messages).</li> <li> <p>Uses the Profound UI handler for modernized display.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, 256 bytes, indexed).</li> <li>Purpose: Stores Accounts Receivable control data, including:<ul> <li><code>ACDEL</code> (position 1): Delete flag (<code>'D'</code> for deleted).</li> <li><code>ACCO</code> (positions 2-3): Company number.</li> <li><code>ACNAME</code> (positions 4-33): Company name.</li> </ul> </li> <li> <p>Used to validate company numbers and populate the <code>DCO</code> array.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (disk, 512 bytes, indexed).</li> <li>Purpose: Stores system control data, including:<ul> <li><code>GXDEL</code> (position 1): Delete flag.</li> <li><code>GXCONO</code> (positions 77-78): Company number.</li> </ul> </li> <li>Used to determine the default company selection (<code>KYALCO</code> and <code>KYCO1</code>).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs using <code>CALL</code> operations. However, the OCL script (<code>AR931P.ocl36.txt</code>) provides context for how <code>AR931P</code> fits into the workflow:</p> <ul> <li>AR931:</li> <li>Referenced in the OCL script (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code> or <code>// ELSE AR931</code>).</li> <li>Likely an RPG program or job that generates the actual A/R Control File List report, using parameters validated by <code>AR931P</code>.</li> <li> <p>Not called directly from the RPGLE code but is part of the job flow.</p> </li> <li> <p>GSGENIEC and SCPROCP:</p> </li> <li>Called in the OCL script before <code>AR931P</code> is loaded.</li> <li>Not referenced in the RPGLE code but part of the broader job setup.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#integration-with-ocl-script","title":"Integration with OCL Script","text":"<p>The OCL script (<code>AR931P.ocl36.txt</code>) orchestrates the execution of <code>AR931P</code>: - It loads and runs <code>AR931P</code> with the <code>ARCONT</code> file. - It checks <code>KYCANC</code> (positions 129-134) for <code>'CANCEL'</code> to terminate if the user cancels. - It uses <code>KYJOBQ</code> (position 120) to decide whether to queue <code>AR931</code> (<code>Y</code>) or run it directly (<code>N</code>). - The <code>?9?</code> parameter in the OCL script aligns with file labels and library references.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Overview: <code>AR931P</code> prompts the user for company selection (<code>ALL</code> or specific companies), company numbers, job queue settings, and report copies via a display file (<code>AR931PD</code>). It validates inputs against <code>ARCONT</code> and <code>GSCONT</code>, populates a company list, and sets parameters for the OCL script to control further job execution (e.g., running <code>AR931</code>). It handles errors with appropriate messages and allows cancellation.</li> <li>Business Rules: Enforces valid company selection (<code>ALL</code> or <code>CO</code>), valid company numbers, correct job queue settings (<code>Y</code> or <code>N</code>), and a minimum of one report copy. Uses <code>GSCONT</code> for defaults and skips deleted records in <code>ARCONT</code>.</li> <li>Files/Tables: <code>AR931PD</code> (display), <code>ARCONT</code> (A/R control data), <code>GSCONT</code> (system control data).</li> <li>External Programs: None called directly in RPGLE, but <code>AR931</code> (report generation), <code>GSGENIEC</code>, and <code>SCPROCP</code> are part of the OCL workflow.</li> </ul> <p>If you need further analysis (e.g., details of <code>AR931</code> or the display file format), please provide additional files or context, as some components (e.g., <code>AR931PFM</code>, <code>AR931</code>) are referenced but not fully defined here.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/","title":"Summary AR931P OCL","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#use-cases-implemented-by-the-program","title":"Use Cases Implemented by the Program","text":"<p>The call stack consists of the OCL script (<code>AR931P.ocl36.txt</code>), the RPGLE program (<code>AR931P.rpgle.txt</code>), and the RPG program (<code>AR931.rpg36.txt</code>). Together, they implement a single primary use case for generating an Accounts Receivable (A/R) Control File Listing report. Below is the identified use case:</p> <ol> <li>Generate Accounts Receivable Control File Listing Report:</li> <li>Description: This use case allows a user or system process to generate a formatted report listing details from the A/R control file (<code>ARCONT</code>) for selected companies, including general ledger numbers, journal numbers, finance charge percentages, fiscal month, and aging bucket limits. The process involves validating input parameters (company selection, job queue option, and number of copies) and producing a printed report with headers and detail lines.</li> <li>Components:<ul> <li><code>AR931P.ocl36.txt</code>: Orchestrates the job flow, calling setup programs and conditionally executing <code>AR931P</code> and <code>AR931</code>.</li> <li><code>AR931P.rpgle.txt</code>: Prompts for and validates user input (company selection, job queue, copies) via a display file, ensuring valid parameters are passed to <code>AR931</code>.</li> <li><code>AR931.rpg36.txt</code>: Reads <code>ARCONT</code> records and generates the report, applying filtering and formatting rules.</li> </ul> </li> <li>Inputs: Company selection (<code>ALL</code> or specific companies), company numbers (up to three), job queue flag (<code>Y</code> or <code>N</code>), number of copies.</li> <li>Outputs: A printed report listing A/R control data for selected companies, with aging buckets based on invoice date (0-30, 31-60, 61-90, 91-120, over 120 days).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#accounts-receivable-control-file-listing-function-requirements","title":"Accounts Receivable Control File Listing Function Requirements","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#purpose","title":"Purpose","text":"<p>To generate a formatted Accounts Receivable (A/R) Control File Listing report based on specified company selection, job queue settings, and number of copies, using data from the A/R control file (<code>ARCONT</code>).</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection: <code>ALL</code> (all companies) or <code>CO</code> (specific companies).</li> <li>Company Numbers: Up to three company numbers (numeric, 2 digits each) if <code>CO</code> is selected.</li> <li>Job Queue Flag: <code>Y</code> (submit to job queue) or <code>N</code> (run interactively).</li> <li>Number of Copies: Integer (minimum 1) for report copies.</li> <li>System Control Data: Optional company number from <code>GSCONT</code> for default settings.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Report: Lists A/R control data for selected companies, including:</li> <li>Company number and name.</li> <li>A/R, cash, discount, intercompany, and finance G/L numbers.</li> <li>Next A/R and sales journal numbers.</li> <li>Finance charge percentage and security code.</li> <li>First fiscal month.</li> <li>Aging bucket upper limits (0-30, 31-60, 61-90, 91-120 days).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify company selection is <code>ALL</code> or <code>CO</code>.</li> <li>If <code>CO</code>, ensure at least one valid company number exists in <code>ARCONT</code> and is not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>If <code>ALL</code>, ensure no company numbers are provided.</li> <li>Validate job queue flag is <code>Y</code> or <code>N</code>.</li> <li>Ensure number of copies is at least 1 (default to 1 if 0).</li> <li> <p>Check system control file (<code>GSCONT</code>) for default company number; set <code>ALL</code> if none provided.</p> </li> <li> <p>Read A/R Control Data:</p> </li> <li>Access <code>ARCONT</code> file (256 bytes/record).</li> <li>Filter out records with <code>ACDEL = 'D'</code>.</li> <li> <p>Apply company selection:</p> <ul> <li>If <code>ALL</code>, include all non-deleted records.</li> <li>If <code>CO</code>, include only records matching specified company numbers.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>Print headers: report title, date, time, page number, and column labels (e.g., \"CO#\", \"COMPANY NAME\", \"A/R G/L#\").</li> <li>For each selected <code>ARCONT</code> record, print:<ul> <li><code>ACCO</code> (company number), <code>ACNAME</code> (company name).</li> <li><code>ACARGL</code>, <code>ACCSGL</code>, <code>ACDSGL</code>, <code>ACICGL</code>, <code>ACFNGL</code> (G/L numbers).</li> <li><code>ACARJ#</code>, <code>ACSLJ#</code> (journal numbers).</li> <li><code>ACFINC</code> (finance charge %), <code>ACSECR</code> (security code), <code>ACFFMO</code> (fiscal month).</li> <li><code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code> (aging bucket limits).</li> </ul> </li> <li>Use separator lines for readability.</li> <li> <p>Handle page overflow by reprinting headers.</p> </li> <li> <p>Job Execution:</p> </li> <li>If job queue flag is <code>Y</code>, submit report generation to job queue.</li> <li>If <code>N</code>, run interactively.</li> <li>Produce specified number of report copies.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Selection:</li> <li>Must be <code>ALL</code> or <code>CO</code>.</li> <li><code>CO</code> requires 1\u20133 valid company numbers from <code>ARCONT</code>.</li> <li><code>ALL</code> prohibits company number entries.</li> <li>Aging Buckets:</li> <li>Based on invoice date (not due date), per revision (04/13/05):<ul> <li>0-30 days (<code>ACLMT1</code>).</li> <li>31-60 days (<code>ACLMT2</code>).</li> <li>61-90 days (<code>ACLMT3</code>).</li> <li>91-120 days (<code>ACLMT4</code>).</li> <li>Over 120 days (implicit).</li> </ul> </li> <li>Record Filtering: Exclude deleted records (<code>ACDEL = 'D'</code>).</li> <li>Job Queue: Must be <code>Y</code> or <code>N</code>.</li> <li>Copies: Minimum 1; default to 1 if invalid.</li> <li>Defaults: Use <code>GSCONT</code> company number for <code>CO</code> selection if available; otherwise, default to <code>ALL</code>.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Buckets: No calculations in the function; bucket limits (<code>ACLMT1</code>\u2013<code>ACLMT4</code>) are stored in <code>ARCONT</code> and printed as-is.</li> <li>Page Numbering: Increment <code>PAGE</code> for each new page on overflow.</li> <li>Date/Time: Capture system date and time for report header; format as MMDDYY and HHMMSS.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: A/R control data (input).</li> <li><code>GSCONT</code>: System control data for default company (input).</li> <li><code>PRINT</code>: Printer file for report output.</li> <li>System: IBM System/36 or AS/400 environment with job queue support.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return error if:</li> <li>Company selection is not <code>ALL</code> or <code>CO</code>.</li> <li><code>CO</code> selected with invalid or missing company numbers.</li> <li><code>ALL</code> selected with company numbers provided.</li> <li>Job queue flag is not <code>Y</code> or <code>N</code>.</li> <li>Cancel process if user or system signals cancellation (sets <code>KYCANC = 'CANCEL'</code>).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/","title":"AR933P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, <code>AR933P.ocl36.txt</code>, used in IBM midrange systems (like AS/400 or iSeries) to control job execution and interact with RPG programs. OCL is a scripting language for defining job steps, file operations, and program flow in such environments. Below, I\u2019ll explain the process steps of this OCL program, identify external programs called, and list the tables (files) used, based on the provided code.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program <code>AR933P</code> appears to manage an accounts receivable update process, likely interacting with an RPG program to update the <code>ARCONT</code> table based on a month/year closed value. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>**Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The program starts by calling an external program named <code>GSGENIEC</code>.</li> <li>This is likely a utility or initialization program that performs setup tasks, such as validating the environment, checking user authority, or preparing data for the accounts receivable update.</li> <li> <p>Since no parameters are explicitly passed, <code>GSGENIEC</code> likely operates on predefined system variables or files.</p> </li> <li> <p>**Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> statement checks a condition using a system variable or field at location <code>L'506,3'</code>. This could be a status code, flag, or value stored in a specific memory location or data area.</li> <li>The notation <code>?L'506,3'?</code> suggests checking a 3-byte field starting at position 506.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes the <code>RETURN</code> command, which terminates the OCL program immediately, halting further execution.</li> <li> <p>This acts as a gatekeeper, ensuring the program only proceeds if the condition is false (e.g., a specific status is not set).</p> </li> <li> <p>**Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command invokes a system procedure or utility, passing a parameter <code>?9?</code> in the ninth position (indicated by the commas, which act as placeholders for eight empty parameters).</li> <li>The <code>?9?</code> likely references a variable or value (e.g., a job number, user ID, or control value) defined elsewhere in the system or passed to the OCL program.</li> <li> <p>The exact purpose of <code>SCPROCP</code> is unclear without system context, but it might perform tasks like setting up a job queue, logging, or initializing system resources for the accounts receivable process.</p> </li> <li> <p>**Set Local Variable (<code>// LOCAL BLANK-*ALL</code>):</p> </li> <li>This command initializes all local variables in the OCL program\u2019s scope to blanks (empty values).</li> <li> <p>This ensures that any previously set values in the local variable space are cleared, preventing unintended carryover of data from prior runs or jobs.</p> </li> <li> <p>**Date Conversion (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command invokes a system utility or procedure to handle date processing, likely ensuring dates are in a two-digit year format (e.g., for Y2K compliance or legacy date handling).</li> <li> <p>This step might adjust or validate date fields used in the accounts receivable update, such as the month/year closed value mentioned in the program\u2019s header.</p> </li> <li> <p>**Load RPG Program (<code>// LOAD AR933P</code>):</p> </li> <li>The <code>LOAD</code> command loads the RPG program named <code>AR933P</code> into memory for execution.</li> <li>This suggests that <code>AR933P</code> is both the name of the OCL program and the associated RPG program, a common practice where the OCL script sets up the environment for an RPG program with the same name.</li> <li> <p>The RPG program likely contains the core logic for updating the <code>ARCONT</code> table.</p> </li> <li> <p>**File Definition (<code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>):</p> </li> <li>This defines a file named <code>ARCONT</code> to be used by the RPG program.</li> <li>The <code>LABEL-?9?ARCONT</code> clause indicates that the file\u2019s label (or alias) includes a variable <code>?9?</code>, which might dynamically specify a library, member, or version of the <code>ARCONT</code> file (e.g., a specific dataset or period).</li> <li><code>DISP-SHR</code> (disposition shared) allows multiple jobs to access the file simultaneously, typically in read-only or controlled update mode, preventing exclusive locks.</li> <li> <p>The <code>ARCONT</code> file is likely the accounts receivable control table, storing data like closed month/year values or summary totals.</p> </li> <li> <p>**Execute Program (<code>// RUN</code>):</p> </li> <li>The <code>RUN</code> command executes the loaded RPG program (<code>AR933P</code>).</li> <li> <p>The RPG program processes the <code>ARCONT</code> file, performing the accounts receivable update (e.g., updating the month/year closed value or related financial data).</p> </li> <li> <p>**Error Check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li>After running the RPG program, the <code>IF</code> statement checks a condition at location <code>L'129,6'</code>, likely a return code or status flag set by the RPG program.</li> <li>If the condition is true (e.g., an error occurred), the <code>CANCEL</code> action terminates the job, and control jumps to the <code>END</code> tag, ending the program.</li> <li> <p>This acts as an error-handling mechanism to stop processing if the RPG program fails (e.g., due to invalid data or file issues).</p> </li> <li> <p>**End Tag (<code>// TAG END</code>):</p> <ul> <li>The <code>END</code> tag marks a label where the program can jump, in this case, used to terminate execution after an error or normal completion.</li> <li>No additional logic follows, so the program ends here if the error condition is met or after normal execution.</li> </ul> </li> <li> <p>**Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>):</p> <ul> <li>This second <code>LOCAL BLANK-*ALL</code> command clears all local variables again, ensuring no residual data remains in memory after the program completes.</li> <li>This is a cleanup step to maintain a clean environment for subsequent jobs or to free resources.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs or procedures: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a system utility or initialization program for setting up the job environment. 2. SCPROCP:    - Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.    - A system procedure, possibly for job control, logging, or resource allocation. 3. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A date-handling utility, likely for Y2K-compliant date processing or validation. 4. AR933P (RPG program):    - Loaded and executed via <code>// LOAD AR933P</code> and <code>// RUN</code>.    - The core RPG program that performs the accounts receivable update logic.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following table (file): 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - This is the accounts receivable control table, likely containing data such as closed month/year values, account totals, or control records for the accounts receivable process.    - The <code>?9?</code> in the label suggests a dynamic or parameterized file name, possibly indicating a specific library or member.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#summary","title":"Summary","text":"<p>The <code>AR933P</code> OCL program orchestrates an accounts receivable update process by: - Initializing the environment with <code>GSGENIEC</code> and checking a condition to proceed. - Calling a system procedure (<code>SCPROCP</code>) and handling date formatting (<code>GSY2K</code>). - Loading and running the <code>AR933P</code> RPG program, which processes the <code>ARCONT</code> file. - Checking for errors and cleaning up local variables.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, <code>AR933P</code> (RPG). Tables Used: <code>ARCONT</code>.</p> <p>If you need further clarification or analysis (e.g., diving into the RPG program\u2019s logic or specific system context), please let me know!</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/","title":"AR933P RPGLE","text":"<p>The provided document, <code>AR933P.rpgle.txt</code>, is an RPGLE (RPG IV) program that updates the Accounts Receivable (A/R) control file (<code>ARCONT</code>) with a new closed month/year value for a specified company. It is called from the OCL program <code>AR933P.ocl36.txt</code> and interacts with a workstation display file (<code>AR933PD</code>) for user input and output. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the RPGLE code.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR933P</code> RPGLE program manages the update of the A/R closed date in the <code>ARCONT</code> file, with user interaction via a display file (<code>AR933PD</code>). The program validates user input (company number, month, and year) and updates the corresponding record in <code>ARCONT</code>. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>DFTACTGRP(*NO)</code>: Runs in a named activation group, not the default, allowing better control over program resources.</li> <li><code>DFTNAME(AR933P)</code>: Sets the default program name to <code>AR933P</code>.</li> <li><code>FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> </ul> </li> <li>File Declarations:<ul> <li><code>AR933PD CF E WORKSTN</code>: A workstation file for user interaction, using a handler (<code>PROFOUNDUI(HANDLER)</code>) for modern UI support (e.g., Profound UI).</li> <li><code>ARCONT UF F 256 2AIDISK KEYLOC(2)</code>: The A/R control file, updatable, with a record length of 256 bytes and a key starting at position 2 (company number, <code>ACCO</code>).</li> <li><code>GSCONT IF F 512 2AIDISK KEYLOC(2)</code>: A general system control file, input-only, with a key at position 2 (company number, <code>GXCONO</code>).</li> </ul> </li> <li> <p>Data Definitions:</p> <ul> <li>Arrays (<code>COM</code>, <code>DCNO</code>, <code>DCO</code>, <code>DCM</code>, <code>DCY</code>) store error messages and company data (company numbers, names, months, and years) for display.</li> <li>Data structure (<code>UDS</code>) defines <code>KYCANC</code> (positions 129-134) to store a cancellation flag.</li> <li>Input specifications define fields for <code>AR933PD</code> (company number, month, year) and <code>ARCONT</code> (delete flag, company number, name, closed date fields).</li> </ul> </li> <li> <p>Workstation File Read and Initial Logic (<code>C</code> Specs, Lines T4A):</p> </li> <li>Check <code>QSCTL</code>:<ul> <li>If <code>QSCTL</code> (a control field, likely set by the system or OCL) is blank, the program sets indicators <code>*IN09</code> (display initial screen) and <code>*IN01</code> (process screen input) to control flow and sets <code>QSCTL</code> to <code>'R'</code> (read mode).</li> <li>Otherwise, it reads the display file (<code>AR933PD</code>), sets <code>*INLR</code> (last record), and returns, terminating the program. This likely handles a specific system state or reinvocation scenario.</li> </ul> </li> <li>Clear Messages and Indicators:<ul> <li>Clears message fields (<code>MSG</code>, <code>MSG2</code>) and resets indicators (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code>) to ensure a clean state.</li> </ul> </li> <li> <p>Handle Cancel Key:</p> <ul> <li>If <code>*INKG</code> (cancel key) is on, the program sets <code>*INLR</code> (last record), clears <code>*IN01</code> and <code>*IN09</code>, sets <code>KYCANC</code> to <code>'CANCEL'</code>, and exits. This corresponds to the OCL error check (<code>L'129,6'</code>).</li> </ul> </li> <li> <p>Initial Screen Display (<code>*IN09</code> Logic):</p> </li> <li> <p>If <code>*IN09</code> is on (initial screen display), the program:</p> <ul> <li>Sets <code>*IN81</code> to display the screen.</li> <li>Calls the <code>ONETIM</code> subroutine to load company data for display.</li> </ul> </li> <li> <p>Screen Input Processing (<code>*IN01</code> Logic):</p> </li> <li> <p>If <code>*IN01</code> is on (user input received), the program calls the <code>SCREEN1</code> subroutine to validate and process the input.</p> </li> <li> <p>Write to Display and Termination:</p> </li> <li>If <code>*IN81</code> is off, the program sets <code>*INLR</code> and exits (no screen display needed).</li> <li>If <code>*IN81</code> is on, it writes to the display file (<code>AR933PD</code>) to show results or errors.</li> <li> <p>The program ends at the <code>END</code> tag.</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Loads company data from <code>ARCONT</code> for display.</li> <li> <p>Steps:</p> <ul> <li>Chains to <code>GSCONT</code> using <code>'00'</code> to retrieve a control record. If found and <code>GXCONO</code> (company number) is non-zero, it sets <code>KYCONO</code> (key company number).</li> <li>Captures the current time (<code>TIME12</code>) and moves it to <code>SYDATE</code> and <code>TIMEOF</code>.</li> <li>Clears the <code>DCO</code> array and initializes <code>X</code> (index) and <code>ACLIM</code> (limit counter).</li> <li>Sets the lower limit (<code>SETLL</code>) on <code>ARCONT</code> using <code>ACLIM</code> (likely <code>00</code>).</li> <li>Reads <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10</code>) or three records are processed:</li> <li>Skips records with <code>ACDEL = 'D'</code> (deleted).</li> <li>Stores company number (<code>ACCO</code>), name (<code>ACNAME</code>), month (<code>ACMNTH</code>), and year (<code>ACYEAR</code>) in arrays (<code>DCNO</code>, <code>DCO</code>, <code>DCM</code>, <code>DCY</code>).</li> <li>Increments <code>X</code> until it reaches 3 or end-of-file.</li> <li>Moves array data to display fields (<code>DCCO1-3</code>, <code>DCNM1-3</code>, <code>DCMN1-3</code>, <code>DCYR1-3</code>).</li> <li>Sets <code>*IN81</code> to display the screen.</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validates user input and updates <code>ARCONT</code>.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Number:</li> <li>Chains to <code>ARCONT</code> using <code>KYCONO</code> (input company number).</li> <li>If not found (<code>*IN99</code>), sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays error message <code>COM(1)</code> (\"INVALID COMPANY NUMBER\"), and jumps to <code>ENDS1</code>.</li> <li>Validate Month:</li> <li>Checks if <code>KYMNTH</code> (input month) is between 01 and 12. If not, sets error indicators and displays <code>COM(2)</code> (\"INVALID MONTH ENTERED\").</li> <li>Validate Year:</li> <li>Checks if <code>KYYEAR</code> (input year) is between 2000 and 2079. If not, sets error indicators and displays <code>COM(3)</code> (\"INVALID YEAR ENTERED\").</li> <li>Validate Date:</li> <li>Combines <code>KYYEAR</code> and <code>KYMNTH</code> into <code>DATE</code> (6-digit format, e.g., YYYYMM).</li> <li>Compares <code>ACDTCL</code> (current closed date in <code>ARCONT</code>) with <code>DATE</code>. If <code>DATE</code> is earlier, sets error indicators and displays <code>COM(4)</code> (\"NEW DATE IS EARLIER THAN PREVIOUS DATE\").</li> <li>Update <code>ARCONT</code>:</li> <li>If all validations pass, updates <code>ARCONT</code> with <code>KYMNTH</code> and <code>KYYEAR</code> using the <code>UPDATE</code> operation.</li> <li>Reload and Display:</li> <li>Calls <code>ONETIM</code> to refresh company data.</li> <li>Sets success message <code>COM(5)</code> (\"COMPANY A/R CLOSED DATE WAS SUCCESSFULLY UPDATED\").</li> <li>Sets <code>*IN81</code> to display the updated screen.</li> <li>Ends at <code>ENDS1</code>.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Updates <code>ARCONT</code> with <code>KYMNTH</code> (position 131) and <code>KYYEAR</code> (positions 126-129).</li> <li>Writes to <code>AR933PD</code> (commented out in original, modified to <code>AR933PFM</code>) with fields like company number, month, year, and messages.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for updating the A/R closed date: 1. Company Number Validation:    - The entered company number (<code>KYCONO</code>) must exist in the <code>ARCONT</code> file. If not, display \"INVALID COMPANY NUMBER\". 2. Month Validation:    - The entered month (<code>KYMNTH</code>) must be between 01 and 12. If not, display \"INVALID MONTH ENTERED\". 3. Year Validation:    - The entered year (<code>KYYEAR</code>) must be between 2000 and 2079. If not, display \"INVALID YEAR ENTERED\". 4. Date Progression:    - The new closed date (<code>KYYEAR</code> + <code>KYMNTH</code>) must not be earlier than the existing closed date (<code>ACDTCL</code>) in <code>ARCONT</code>. If it is, display \"NEW DATE IS EARLIER THAN PREVIOUS DATE\". 5. Successful Update:    - If all validations pass, update the <code>ARCONT</code> record with the new month and year, and display \"COMPANY A/R CLOSED DATE WAS SUCCESSFULLY UPDATED\". 6. Cancellation:    - If the user presses the cancel key (<code>*INKG</code>), set <code>KYCANC</code> to <code>'CANCEL'</code> and exit, allowing the OCL program to detect this via <code>L'129,6'</code>. 7. Display Logic:    - Display up to three non-deleted (<code>ACDEL \u2260 'D'</code>) company records from <code>ARCONT</code>, including company number, name, and current closed month/year.    - Show error or success messages based on validation results.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR933PD:</li> <li>Type: Workstation (display) file.</li> <li>Purpose: Handles user input (company number, month, year) and output (company data, messages).</li> <li>Fields: <code>CONO</code> (company number), <code>MONTH</code>, <code>YEAR</code>, <code>DCNO</code> (company numbers), <code>DCO</code> (company names), <code>DCM</code> (months), <code>DCY</code> (years), <code>MSG</code>, <code>MSG2</code>.</li> <li>ARCONT:</li> <li>Type: Updatable disk file, 256 bytes, keyed on company number (<code>ACCO</code>, position 2).</li> <li>Purpose: Stores A/R control data, including company number (<code>ACCO</code>), name (<code>ACNAME</code>), closed month (<code>ACMNTH</code>), year (<code>ACYEAR</code>), and delete flag (<code>ACDEL</code>).</li> <li>Fields Updated: <code>ACMNTH</code> (position 130-131), <code>ACYEAR</code> (position 126-129).</li> <li>GSCONT:</li> <li>Type: Input-only disk file, 512 bytes, keyed on company number (<code>GXCONO</code>, position 2).</li> <li>Purpose: General system control file, used to retrieve a control record (key <code>'00'</code>) to set the company number (<code>KYCONO</code>).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPGLE program does not explicitly call external programs (e.g., via <code>CALL</code> operation).</li> <li>The <code>PROFOUNDUI(HANDLER)</code> in the <code>AR933PD</code> file specification indicates integration with Profound UI for display handling, but this is a runtime handler, not a separate program.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR933P</code> RPGLE program, called by the OCL program <code>AR933P.ocl36</code>, updates the A/R closed date in the <code>ARCONT</code> file based on user input from the <code>AR933PD</code> display file. It: - Loads company data from <code>ARCONT</code> and <code>GSCONT</code> for display. - Validates user input (company number, month, year) against strict business rules. - Updates the <code>ARCONT</code> record if valid, or displays error messages. - Handles cancellation and displays success messages. - Uses subroutines <code>ONETIM</code> (load data) and <code>SCREEN1</code> (validate/update).</p> <p>Tables Used: <code>AR933PD</code> (workstation), <code>ARCONT</code> (A/R control), <code>GSCONT</code> (system control). External Programs Called: None.</p> <p>If you need further details (e.g., interaction with the OCL program, specific field mappings, or UI behavior), please let me know!</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/","title":"Summary AR933P OCL","text":"<p>Based on the provided OCL (<code>AR933P.ocl36.txt</code>) and RPGLE (<code>AR933P.rpgle.txt</code>) programs, I will first identify the use cases implemented by the program. Then, I will create a function requirements document for a single use case, reimagined as a large function that accepts inputs programmatically rather than through a screen, focusing on business requirements and necessary calculations.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#use-cases-implemented-by-the-program","title":"Use Cases Implemented by the Program","text":"<p>The <code>AR933P</code> program (OCL and RPGLE combined) implements a single primary use case:</p> <ol> <li>Update Accounts Receivable (A/R) Closed Date for a Company:</li> <li>Description: The program allows a user to update the A/R closed month and year for a specified company in the <code>ARCONT</code> file, ensuring the input is valid and the new date is not earlier than the existing closed date. It retrieves and displays up to three non-deleted company records (company number, name, month, and year) for reference and provides feedback on success or errors.</li> <li>Inputs: Company number, month, and year (via the <code>AR933PD</code> display file).</li> <li>Outputs: Updated <code>ARCONT</code> record, success message, or error message (e.g., invalid company, month, year, or date progression).</li> <li>Process: Validates inputs, checks the existing closed date, updates the <code>ARCONT</code> file, and refreshes the display with updated company data or error messages.</li> </ol> <p>No additional distinct use cases are implemented, as the program focuses solely on updating the A/R closed date with associated validation and display logic.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-requirements-document","title":"Function Requirements Document","text":"<p>The following document describes a function that implements the \"Update Accounts Receivable Closed Date for a Company\" use case, reimagined as a programmatic function that accepts inputs directly (no screen interaction). It outlines the business requirements, process steps, and calculations concisely.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-requirements-update-ar-closed-date","title":"Function Requirements: Update A/R Closed Date","text":""},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-name","title":"Function Name","text":"<p><code>UpdateARClosedDate</code></p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#purpose","title":"Purpose","text":"<p>Update the Accounts Receivable (A/R) closed month and year for a specified company in the <code>ARCONT</code> file, ensuring the input is valid and the new date is not earlier than the existing closed date.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CompanyNo</code>, 2-digit numeric): The unique identifier of the company.</li> <li>Month (<code>NewMonth</code>, 2-digit numeric): The new A/R closed month (01-12).</li> <li>Year (<code>NewYear</code>, 4-digit numeric): The new A/R closed year (2000-2079).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Status (String): <code>\"SUCCESS\"</code> or an error message (e.g., \"INVALID COMPANY NUMBER\", \"INVALID MONTH ENTERED\", \"INVALID YEAR ENTERED\", \"NEW DATE IS EARLIER THAN PREVIOUS DATE\").</li> <li>Updated Company Data (Optional, Array of Records): Up to three non-deleted company records, each containing:</li> <li>Company Number (2-digit numeric)</li> <li>Company Name (30-character string)</li> <li>Closed Month (2-digit numeric)</li> <li>Closed Year (4-digit numeric)</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#business-requirements","title":"Business Requirements","text":"<ol> <li>Company Number Validation: The <code>CompanyNo</code> must exist in the <code>ARCONT</code> file.</li> <li>Month Validation: The <code>NewMonth</code> must be between 01 and 12.</li> <li>Year Validation: The <code>NewYear</code> must be between 2000 and 2079.</li> <li>Date Progression: The new date (<code>NewYear</code> + <code>NewMonth</code>, formatted as YYYYMM) must not be earlier than the existing closed date in <code>ARCONT</code>.</li> <li>Update: If all validations pass, update the <code>ARCONT</code> record with <code>NewMonth</code> and <code>NewYear</code>.</li> <li>Error Handling: Return specific error messages for invalid inputs or date issues.</li> <li>Company Data Retrieval: Retrieve up to three non-deleted (<code>ACDEL \u2260 'D'</code>) company records from <code>ARCONT</code> for reference.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Clear internal variables and set default status.</li> <li> <p>Access <code>GSCONT</code> file with key <code>'00'</code> to retrieve a control company number, if applicable.</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Company Number:<ul> <li>Query <code>ARCONT</code> with <code>CompanyNo</code>. If not found, return \"INVALID COMPANY NUMBER\".</li> </ul> </li> <li>Month:<ul> <li>Check if <code>NewMonth</code> is between 01 and 12. If not, return \"INVALID MONTH ENTERED\".</li> </ul> </li> <li>Year:<ul> <li>Check if <code>NewYear</code> is between 2000 and 2079. If not, return \"INVALID YEAR ENTERED\".</li> </ul> </li> <li> <p>Date Comparison:</p> <ul> <li>Combine <code>NewYear</code> and <code>NewMonth</code> into a 6-digit date (<code>YYYYMM</code>).</li> <li>Compare with <code>ACDTCL</code> (existing closed date) from <code>ARCONT</code>. If new date is earlier, return \"NEW DATE IS EARLIER THAN PREVIOUS DATE\".</li> </ul> </li> <li> <p>Update <code>ARCONT</code>:</p> </li> <li> <p>If all validations pass, update the <code>ARCONT</code> record for <code>CompanyNo</code> with:</p> <ul> <li><code>ACMNTH</code> = <code>NewMonth</code> (positions 130-131)</li> <li><code>ACYEAR</code> = <code>NewYear</code> (positions 126-129)</li> </ul> </li> <li> <p>Retrieve Company Data:</p> </li> <li>Read up to three non-deleted (<code>ACDEL \u2260 'D'</code>) records from <code>ARCONT</code>, storing:<ul> <li>Company Number (<code>ACCO</code>)</li> <li>Company Name (<code>ACNAME</code>)</li> <li>Closed Month (<code>ACMNTH</code>)</li> <li>Closed Year (<code>ACYEAR</code>)</li> </ul> </li> <li> <p>Return these records in the output.</p> </li> <li> <p>Return Status:</p> </li> <li>If update succeeds, return \"SUCCESS\" and company data.</li> <li>If any validation fails, return the corresponding error message.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date Formatting:</li> <li>Combine <code>NewYear</code> and <code>NewMonth</code> into a 6-digit numeric date (<code>YYYYMM</code>) for comparison.</li> <li>Example: For <code>NewYear = 2025</code>, <code>NewMonth = 06</code>, create <code>DATE = 202506</code>.</li> <li>Date Comparison:</li> <li>Compare <code>DATE</code> (new date) with <code>ACDTCL</code> (existing closed date, formatted as <code>YYYYMM</code>) to ensure the new date is not earlier.</li> <li>Example: If <code>ACDTCL = 202505</code> and <code>DATE = 202504</code>, the comparison fails (202504 &lt; 202505).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCONT (Updatable Disk File):</li> <li>Key: Company Number (<code>ACCO</code>, position 2)</li> <li>Fields: <code>ACDEL</code> (delete flag), <code>ACCO</code> (company number), <code>ACNAME</code> (company name), <code>ACYEAR</code> (closed year), <code>ACMNTH</code> (closed month), <code>ACDTCL</code> (closed date, YYYYMM)</li> <li>GSCONT (Input-Only Disk File):</li> <li>Key: Company Number (<code>GXCONO</code>, position 2)</li> <li>Used to retrieve a control record (key <code>'00'</code>) for default company number.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#error-messages","title":"Error Messages","text":"<ul> <li>\"INVALID COMPANY NUMBER\": <code>CompanyNo</code> not found in <code>ARCONT</code>.</li> <li>\"INVALID MONTH ENTERED\": <code>NewMonth</code> not 01-12.</li> <li>\"INVALID YEAR ENTERED\": <code>NewYear</code> not 2000-2079.</li> <li>\"NEW DATE IS EARLIER THAN PREVIOUS DATE\": New date (<code>YYYYMM</code>) earlier than <code>ACDTCL</code>.</li> <li>\"SUCCESS\": Update completed successfully.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#notes","title":"Notes","text":"<ul> <li>The function assumes direct input without user interaction, replacing the original screen-based input (<code>AR933PD</code>).</li> <li>No external programs are called; all logic is self-contained.</li> <li>The function handles cancellation internally (e.g., via an invalid input check) rather than a cancel key.</li> </ul> <p>This document reimagines the <code>AR933P</code> program's functionality as a single, programmatic function, maintaining the core business logic and validations while eliminating screen-based interaction. Let me know if you need further refinements or additional details!</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/","title":"BB001 RPG36","text":"<p>The <code>BB001.rpg36.txt</code> document is an RPG III (System/36 style) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It handles the selection and management of order entry batches, stored in the <code>BBBTCH</code> and <code>BBBTCHX</code> files, allowing users to create, select, update, or delete batches. Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>BB001</code> RPG program manages the batch selection process for order entry through interactive screen processing and file operations. It supports creating new batches, selecting existing ones, updating batch details, and deleting batches, with validations to ensure proper batch handling. The process steps are organized around screen interactions and subroutines, as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined with a header specification (<code>H P064</code>) and is identified as <code>BB001</code>.</li> <li>It uses the <code>SCREEN</code> workstation file for interactive display (record length 600, with <code>WSID</code>, <code>STAT</code>, and <code>ROLLKY</code> for workstation ID, status, and roll key handling).</li> <li>Files <code>BBBTCH</code> (input, disk, 48 bytes, indexed) and <code>BBBTCHX</code> (update-capable, disk, 48 bytes, indexed) are defined for batch data storage.</li> <li> <p>Arrays and data structures are defined:</p> <ul> <li><code>COM</code>: 15-element array for standard messages (42 bytes each).</li> <li><code>BTC</code>: 10-element array for batch numbers (2 digits).</li> <li><code>LKD</code>: 10-element array for lock descriptions (10 bytes).</li> <li><code>LKW</code>: 10-element array for locked workstation IDs (2 bytes).</li> <li><code>PRT</code>: 10-element array for BOL printed flags (1 byte).</li> <li><code>USR</code>: 10-element array for user IDs (8 bytes).</li> <li><code>DTE</code>: 10-element array for creation dates (6 digits).</li> <li><code>LUD</code>: 10-element array for last update dates (6 digits).</li> <li><code>#RC</code>: 10-element array for record counts (8 digits).</li> <li><code>STAT</code>: Data structure for status tracking (<code>STATUS</code> field).</li> <li><code>UDS</code>: User data structure for local data area fields (<code>KYHDG</code>, <code>CANCEL</code>, <code>PAR13C</code>, <code>BATCH#</code>, <code>USER</code>, <code>WSID</code>, <code>PGM</code>, <code>RECCNT</code>).</li> </ul> </li> <li> <p>Main Line Processing:</p> </li> <li>Initializes indicators (50, 21, 22, 23, 24, 75, 76) to off and clears the <code>MSG</code> field (<code>N75N76</code> conditions, lines 0065-0068).</li> <li>Executes the <code>ONETIM</code> subroutine on indicator 09 to perform one-time setup (line 0070).</li> <li> <p>Processes one of three screens based on indicators:</p> <ul> <li>Screen 1 (<code>S1</code>, indicator 01, line 0072).</li> <li>Screen 2 (<code>S2</code>, indicator 02, line 0073).</li> <li>Screen 3 (<code>S3</code>, indicator 03, line 0074).</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>Screen 1 (BB001S1, Output: 21, Line 0331):<ul> <li>Displays batch selection data, including heading (<code>KYHDG</code>), batch numbers (<code>BTC</code>), lock descriptions (<code>LKD</code>), locked workstation IDs (<code>LKW</code>), BOL printed flags (<code>PRT</code>), user IDs (<code>USR</code>), creation dates (<code>DTE</code>), last update dates (<code>LUD</code>), record counts (<code>#RC</code>), input batch number (<code>BTCH#X</code>), delete code (<code>DEL</code>), and message (<code>MSG</code>).</li> <li>Accepts input for <code>BTCH#X</code> (batch number, positions 3-40) and <code>DEL</code> (delete code, position 5).</li> </ul> </li> <li>Screen 2 (BB001S2, Output: 22, Line 0346):<ul> <li>Displays batch details for confirmation, including batch number (<code>BATCH#</code>), lock description (<code>LKDESC</code>), workstation ID (<code>WSID</code>), BOL printed flag (<code>PRTD</code>), user ID (<code>USER</code>), creation date (<code>DTMDY</code>), last update date (<code>LUMDY</code>), record count (<code>#REC</code>), and message (<code>MSG</code>).</li> </ul> </li> <li> <p>Screen 3 (BB001S3, Output: 24, Line 0359):</p> <ul> <li>Similar to Screen 2 but used for resetting or canceling batch operations.</li> </ul> </li> <li> <p>Subroutines:</p> </li> <li>ROLLKY (Lines 0079-0098):<ul> <li>Handles roll key processing for navigating batch records.</li> <li>Clears indicators (21, 22, 23, 24, 50) and checks <code>STATUS</code> for roll forward (01122, indicator 75) or roll backward (01123, indicator 76).</li> <li>Calls <code>DRLFWD</code> for forward navigation (indicator 75, 83) or <code>DRLBAK</code> for backward navigation (indicator 76, 83).</li> <li>Clears <code>STATUS</code> and resets indicator 09.</li> </ul> </li> <li>ONETIM (Lines 0100-0114):<ul> <li>Performs one-time initialization:</li> <li>Clears <code>CANCEL</code> and initializes counters (<code>BLIM</code>, <code>Z2</code>, <code>Z7</code>, <code>Z8</code>).</li> <li>Positions <code>BBBTCH</code> file at the beginning (<code>SETLL</code>, line 0104).</li> <li>Calls <code>DRLFWD</code> to load initial batch records.</li> <li>Sets indicators 21 and 83.</li> <li>Sets indicator 44 based on <code>PGM</code> value ('O' for order entry clears 44, otherwise sets 44).</li> </ul> </li> <li>S1 (Lines 0116-0212):<ul> <li>Handles Screen 1 processing:</li> <li>If command key KG (cancel) is pressed, sets <code>CANCEL</code> to 'CANCEL', sets last record indicator (<code>LR</code>), and exits to <code>ENDS1</code> (lines 0119-0122).</li> <li>For new batch creation (<code>BTCH#X=0</code>, indicator 40, lines 0124-0167):<ul> <li>Checks if <code>PGM</code> is not 'O' (order entry); if so, displays error message \"CANNOT CREATE A BATCH NOW\" (COM,2) and sets indicators 90, 21, 51.</li> <li>Retrieves next batch number (<code>ABNXTB</code>) from <code>BBBTCHX</code> (chain on '99', line 0136).</li> <li>Increments <code>ABNXTB</code> and resets to 1 if it reaches 99 (lines 0137-0141).</li> <li>Updates <code>BBBTCHX</code> with new batch number (<code>EXCPTUPDNXB</code>, line 0142).</li> <li>Initializes batch fields: lock description (<code>LKDESC</code>=COM,11), BOL printed (<code>PRTD='N'</code>), creation date (<code>DTMDY</code>, <code>DATE</code>), last update date (<code>LUMDY</code>, <code>LUDT</code>=0), record count (<code>#REC</code>=0).</li> <li>Checks if batch number exists (<code>CHAIN BBBTCHX</code>, line 0156); if not, adds new batch record (<code>EXCPTADDBCH</code>, line 0162) and sets <code>LR</code>.</li> </ul> </li> <li>For existing batch selection (<code>BTCH#X&lt;&gt;0</code>, lines 0169-0209):<ul> <li>Chains to <code>BBBTCHX</code> with <code>BATCH#</code> (line 0174).</li> <li>Validates batch: if deleted (<code>ABDEL='D'</code>) or <code>BATCH#=99</code>, displays error \"INVALID BATCH NO.\" (COM,1) and sets indicators 90, 21, 51.</li> <li>For <code>PP</code> program (<code>PGM='P'</code>), checks if batch is locked for order entry (<code>ABLOCK='O'</code>); if so, displays error \"BATCH # IN USE--CANNOT POST NOW\" (COM,5).</li> <li>Validates batch source (<code>PAR13C</code> vs. <code>ABSRCE</code>, JB01, 10/27/09); if mismatched, displays error \"INVALID BATCH NO.\" and sets indicators 51, 90, 21.</li> <li>Checks if batch is locked (<code>ABLOCK&lt;&gt;blank</code>); if locked by different user (<code>ABUSER&lt;&gt;USER</code>), displays error \"BATCH # IN USE\" (COM,3), releases batch (<code>EXCPTRELBCH</code>), and exits.</li> <li>If user matches (<code>ABUSER=USER</code>, MG01), bypasses lock check.</li> <li>Initializes fields for update: lock description, BOL printed, dates, and record count.</li> <li>If delete is requested (<code>DEL='D'</code>, indicator 52), displays confirmation message (COM,4) and sets indicators 90, 22.</li> <li>Updates batch record (<code>EXCPTUPDBCH</code>) unless <code>PGM='P'</code>, then sets indicator 24 and exits.</li> </ul> </li> </ul> </li> <li>S2 (Lines 0214-0240):<ul> <li>Handles Screen 2 processing:</li> <li>On KA key press, repositions <code>BBBTCH</code> file (<code>SETLL</code>), sets indicators 83, 21, 09, and calls <code>DRLFWD</code>.</li> <li>On delete confirmation (<code>DEL='D'</code>, indicator 52, KD key), sets update indicator (<code>U1</code>), deletes batch (<code>EXCPTDELBCH</code>), and sets <code>LR</code>.</li> <li>For new batch record, checks if batch exists (<code>CHAIN BBBTCHX</code>); if not, adds it (<code>EXCPTADDBCH</code>) and sets <code>LR</code>.</li> </ul> </li> <li>S3 (Lines 0242-0254):<ul> <li>Handles Screen 3 processing:</li> <li>On KG key press, chains to <code>BBBTCHX</code> with <code>BATCH#</code>; if found, saves batch (<code>EXCPTSAVBCH</code>), clears indicators (01, 02, 03, 09), sets <code>CANCEL='CANCEL'</code>, and sets <code>LR</code>.</li> </ul> </li> <li>DRLFWD (Lines 0256-0308):<ul> <li>Reads forward through <code>BBBTCH</code> to populate batch arrays for display:</li> <li>Initializes counter (<code>X=1</code>) and clears arrays (<code>DETCLR</code>).</li> <li>Reads records, skipping deleted (<code>ABDEL='D'</code>) or invalid (<code>ABBTCH=99</code>) batches.</li> <li>Validates batch source (<code>ABSRCE</code> vs. <code>PAR13C</code>, 10/20/17); skips mismatches.</li> <li>Sets lock description based on <code>ABLOCK</code> value ('O', 'L', 'B', 'P', or blank, using COM messages 11-15).</li> <li>Populates arrays (<code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>) for up to 10 records.</li> <li>Sets indicator 68 if end-of-file is reached and repositions file if necessary.</li> </ul> </li> <li>DRLBAK (Lines 0323-0327):<ul> <li>Handles backward navigation by setting indicator 21.</li> </ul> </li> <li> <p>DETCLR (Lines 0310-0321):</p> <ul> <li>Clears batch arrays (<code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>) to zero or blanks.</li> </ul> </li> <li> <p>File Operations:</p> </li> <li>UPDNXB (Lines 0371-0377):<ul> <li>Updates or adds the next batch number (<code>ABNXTB</code>) in <code>BBBTCHX</code>.</li> </ul> </li> <li>RELBCH (Line 0379):<ul> <li>Releases a locked batch.</li> </ul> </li> <li>DELBCH (Line 0381):<ul> <li>Marks a batch for deletion by setting <code>DEL</code> in <code>BBBTCHX</code>.</li> </ul> </li> <li>ADDBCH (Lines 0384-0393):<ul> <li>Adds a new batch record to <code>BBBTCHX</code> with fields: <code>BATCH#</code>, <code>PGM</code>, <code>WSID</code>, <code>PRTD</code>, <code>USER</code>, <code>DATE</code>, <code>LUDT</code>, <code>#REC</code>, <code>PAR13C</code> (JB01), and <code>Z2</code>.</li> </ul> </li> <li>UPDBCH (Lines 0395-0399):<ul> <li>Updates batch record with <code>PGM</code>, <code>WSID</code>, and <code>LUDT</code>.</li> </ul> </li> <li>SAVBCH (Lines 0401-0402):<ul> <li>Saves batch lock status (<code>SVLOCK</code>, <code>SVLKWS</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure proper batch management:</p> <ol> <li>Batch Number Validation:</li> <li>Batch numbers must be valid and not equal to 99 (error 01, \"INVALID BATCH NO.\").</li> <li>Deleted batches (<code>ABDEL='D'</code>) cannot be selected (error 01).</li> <li> <p>Batch source (<code>ABSRCE</code>) must match <code>PAR13C</code> (e.g., 'PP' for product moves or viscosity ASN entry, JB01, 10/27/09); mismatches trigger error 01.</p> </li> <li> <p>Batch Creation:</p> </li> <li>New batches can only be created in order entry mode (<code>PGM='O'</code>); otherwise, error 02 (\"CANNOT CREATE A BATCH NOW\") is displayed.</li> <li>Next batch number is retrieved from <code>BBBTCHX</code> (key '99') and incremented, resetting to 1 if it reaches 99.</li> <li> <p>New batch records are initialized with:</p> <ul> <li><code>PRTD='N'</code> (BOL not printed).</li> <li>Creation date (<code>DATE</code>) set to current date (<code>UDATE</code>).</li> <li>Last update date (<code>LUDT</code>) and record count (<code>#REC</code>) set to 0.</li> <li>Batch source (<code>PAR13C</code>) written to <code>ABSRCE</code> (JB01).</li> </ul> </li> <li> <p>Batch Locking:</p> </li> <li>If a batch is locked (<code>ABLOCK&lt;&gt;blank</code>) and the user (<code>ABUSER</code>) does not match the current user (<code>USER</code>), error 03 (\"BATCH # IN USE\") is displayed, and the batch is released.</li> <li>If the user matches the lock owner (<code>ABUSER=USER</code>, MG01), access is granted.</li> <li> <p>For <code>PP</code> program (<code>PGM='P'</code>), locked batches (<code>ABLOCK='O'</code>) trigger error 05 (\"BATCH # IN USE--CANNOT POST NOW\").</p> </li> <li> <p>Batch Deletion:</p> </li> <li>Deletion requires confirmation on Screen 2 (<code>DEL='D'</code>, message COM,4: \"CMD 4 - TO DELETE EXISTING BATCH\").</li> <li> <p>Deleted batches are marked with <code>DEL</code> in <code>BBBTCHX</code>.</p> </li> <li> <p>Navigation and Display:</p> </li> <li>Only non-deleted batches with matching <code>ABSRCE</code> are displayed.</li> <li>Lock status is displayed using descriptions from <code>COM</code> (11: AVAILABLE, 12: ORD ENTRY, 13: PICK LIST, 14: POSTING, 15: BOL PRINT).</li> <li> <p>Up to 10 batch records are loaded into arrays for display on Screen 1.</p> </li> <li> <p>Cancel and Reset:</p> </li> <li>Pressing KG (cancel) sets <code>CANCEL='CANCEL'</code> and exits the program.</li> <li>Screen 3 resets batch records and cancels operations if KG is pressed.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>SCREEN: Workstation display file for interactive screens (BB001S1, BB001S2, BB001S3).</li> <li>BBBTCH: Batch header file (input, 48 bytes, indexed, key fields: 1-2).</li> <li>Fields: <code>ABDEL</code> (delete code), <code>ABBTCH</code> (batch number), <code>ABLOCK</code> (lock status), <code>ABLKWS</code> (lock workstation ID), <code>ABPRTD</code> (BOL printed), <code>ABUSER</code> (user ID), <code>ABDATE</code> (creation date), <code>ABLUDT</code> (last update date), <code>ABREC</code> (record count), <code>ABSRCE</code> (batch source), <code>ABNXTB</code> (next batch number).</li> <li>BBBTCHX: Update-capable batch header file (48 bytes, indexed, key fields: 1-2).</li> <li>Same fields as <code>BBBTCH</code>.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB001</code> RPG program does not explicitly call any external programs. All processing is handled internally through subroutines and file operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB001%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB001</code> RPG program, called from the <code>BB101.ocl36.txt</code> OCL program, manages the selection, creation, updating, and deletion of order entry batches stored in <code>BBBTCH</code> and <code>BBBTCHX</code>. It uses three screens (S1, S2, S3) for user interaction, supports navigation via roll keys, and enforces business rules such as batch number validation, lock checking, and program mode restrictions. The program initializes new batches with the next available number, ensures only authorized users can access locked batches, and prevents invalid operations like creating batches outside order entry mode. It interacts with the <code>SCREEN</code>, <code>BBBTCH</code>, and <code>BBBTCHX</code> files and does not call external programs, relying on internal subroutines for all processing.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/","title":"BB003 RPG36","text":"<p>The <code>BB003.rpg36.txt</code> document is an RPG III (System/36 style) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. Its primary function is to delete records from order transaction files when a batch is deleted. The program was enhanced in revision <code>DC01</code> (03/10/10 by Dave Capo) to include additional files for deletion. Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>BB003</code> RPG program deletes records from specific order transaction files (<code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>) based on a company and order number key. The process is straightforward and focuses on identifying and removing records associated with a deleted batch. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined with a header specification (<code>H P064</code>) and identified as <code>BB003</code>.</li> <li>It defines the following files:<ul> <li><code>BBORTR</code>: Input primary file (512 bytes, indexed, key length 11, access mode 2) for reading order transaction records.</li> <li><code>BBORCL</code>: Update-capable file (256 bytes, record length 256, indexed, key length 14, access mode 2) for order close records.</li> <li><code>BBOTHS1</code>: Update-capable file (512 bytes, indexed, key length 8, external key) for order transaction history supplemental records (added in DC01).</li> <li><code>BBOTDS1</code>: Update-capable file (512 bytes, indexed, key length 11, external key) for order detail supplemental records (added in DC01).</li> <li><code>BBOTA1</code>: Update-capable file (512 bytes, indexed, key length 13, external key) for order transaction alternate records (added in DC01).</li> </ul> </li> <li>Input specifications define fields for <code>BBORTR</code>, <code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, and <code>BBOTA1</code>:<ul> <li><code>BBORTR</code>: Fields include <code>TCOORD</code> (company/order#, positions 2-9), <code>TKEY</code> (key, positions 2-12), <code>TSEQ</code> (sequence, positions 10-12), <code>TDDEL</code> (delete code, position 1), <code>TDCO</code> (company#, positions 2-3), <code>TDORD#</code> (order#, positions 4-9), <code>TDCUST</code> (customer#, positions 13-18).</li> <li><code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>: Key fields for company/order# (<code>TCOORD</code>, <code>BOCOOR</code>, <code>BDCOOR</code>, <code>BACOOR</code>, positions 2-9).</li> </ul> </li> <li> <p>A data structure (<code>BBKEY</code>) is defined to hold the key fields: <code>TDCO</code> (company#, positions 1-2), <code>TDCUST</code> (customer#, positions 3-8), <code>TDORD#</code> (order#, positions 9-14).</p> </li> <li> <p>Main Processing Logic:</p> </li> <li>The program operates under indicator 11 (likely set by the calling OCL program when <code>SWITCH1-1</code> is active for batch deletion).</li> <li>A <code>DO</code> loop (<code>B1</code> to <code>E1</code>, lines DC01) processes the deletion of records:<ul> <li>BBORCL Deletion:</li> <li>Chains to <code>BBORCL</code> using <code>BBKEY</code> (company/order#, line C* BBORCL).</li> <li>If a record is found (<code>N99</code>), executes the <code>DELETE</code> exception output to delete the record.</li> <li>BBOTHS1 Deletion (DC01):</li> <li>Sets the file pointer to the start of <code>BBOTHS1</code> using <code>TCOORD</code> (<code>SETLL</code>, line DC01).</li> <li>Reads records in a loop (<code>RDAGN1</code>, lines DC01).</li> <li>Compares <code>TCOORD</code> with <code>BOCOOR</code> (company/order#); if matching (<code>N99</code>), deletes the record (<code>EXCPTDELOTS</code>) and continues reading until no more matching records are found.</li> <li>BBOTDS1 Deletion (DC01):</li> <li>Moves <code>Tcoord</code> to <code>KL11</code> (11-byte key) and sets the file pointer to <code>BBOTDS1</code> (<code>SETLL</code>, line DC01).</li> <li>Reads records in a loop (<code>RDAGN2</code>, lines DC01).</li> <li>Compares <code>Tcoord</code> with <code>BDCOOR</code>; if matching (<code>N99</code>), deletes the record (<code>EXCPTDELOTD</code>) and continues reading.</li> <li>BBOTA1 Deletion (DC01):</li> <li>Moves <code>Tcoord</code> to <code>KL13</code> (13-byte key) and sets the file pointer to <code>BBOTA1</code> (<code>SETLL</code>, line DC01).</li> <li>Reads records in a loop (<code>RDAGN3</code>, lines DC01).</li> <li>Compares <code>Tcoord</code> with <code>BACOOR</code>; if matching (<code>N99</code>), deletes the record (<code>EXCPTDELOTA</code>) and continues reading.</li> </ul> </li> <li> <p>The loop ends after processing all relevant files (<code>END</code>, line DC01).</p> </li> <li> <p>Output Operations:</p> </li> <li>Exception outputs are defined for deletion:<ul> <li><code>DELETE</code> (for <code>BBORCL</code>): Deletes the matched record.</li> <li><code>DELOTS</code> (for <code>BBOTHS1</code>): Deletes the matched supplemental history record.</li> <li><code>DELOTD</code> (for <code>BBOTDS1</code>): Deletes the matched supplemental detail record.</li> <li><code>DELOTA</code> (for <code>BBOTA1</code>): Deletes the matched alternate transaction record.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules related to batch deletion:</p> <ol> <li>Batch Deletion Scope:</li> <li>When a batch is deleted (indicated by <code>SWITCH1-1</code> in the OCL program), all associated records in the transaction files (<code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>) for the specified company and order number (<code>TCOORD</code>) must be deleted.</li> <li> <p>The program processes only records matching the company/order# key (<code>TCOORD</code>, <code>BOCOOR</code>, <code>BDCOOR</code>, <code>BACOOR</code>).</p> </li> <li> <p>File Access and Deletion:</p> </li> <li>The <code>BBORTR</code> file is read to obtain the company/order# (<code>Tcoord</code>) for identifying records to delete.</li> <li>The <code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, and <code>BBOTA1</code> files are update-capable, allowing records to be deleted.</li> <li> <p>Deletion is performed only if records are found (<code>N99</code> condition).</p> </li> <li> <p>Sequential Deletion:</p> </li> <li>The program processes each file sequentially, ensuring all matching records are deleted before moving to the next file.</li> <li> <p>For <code>BBOTHS1</code>, <code>BBOTDS1</code>, and <code>BBOTA1</code>, all records with matching company/order# keys are deleted by reading and comparing in a loop.</p> </li> <li> <p>No Validation or Error Messaging:</p> </li> <li>The program does not perform additional validations or display error messages, assuming the calling OCL program (<code>BB101.ocl36.txt</code>) has already validated the batch deletion request.</li> <li>Deletion is unconditional for matched records.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>BBORTR: Input primary file for order transactions (512 bytes, indexed, key length 11).</li> <li>Fields: <code>TCOORD</code> (company/order#, positions 2-9), <code>TKEY</code> (key, positions 2-12), <code>TSEQ</code> (sequence, positions 10-12), <code>TDDEL</code> (delete code, position 1), <code>TDCO</code> (company#, positions 2-3), <code>TDORD#</code> (order#, positions 4-9), <code>TDCUST</code> (customer#, positions 13-18).</li> <li>BBORCL: Update-capable file for order close records (256 bytes, indexed, key length 14).</li> <li>Key field: Not explicitly defined in the code, but implied to use <code>BBKEY</code> (company/order#).</li> <li>BBOTHS1: Update-capable file for order transaction history supplemental records (512 bytes, indexed, key length 8, external key, added in DC01).</li> <li>Key field: <code>BOCOOR</code> (company/order#, positions 2-9).</li> <li>BBOTDS1: Update-capable file for order detail supplemental records (512 bytes, indexed, key length 11, external key, added in DC01).</li> <li>Key field: <code>BDCOOR</code> (company/order#, positions 2-9).</li> <li>BBOTA1: Update-capable file for order transaction alternate records (512 bytes, indexed, key length 13, external key, added in DC01).</li> <li>Key field: <code>BACOOR</code> (company/order#, positions 2-9).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB003</code> RPG program does not call any external programs. All processing is handled internally through file operations and deletion logic.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB003%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB003</code> RPG program, called from the <code>BB101.ocl36.txt</code> OCL program, is responsible for deleting records from order transaction files (<code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>) when a batch is deleted. It reads the company/order# from <code>BBORTR</code> and deletes matching records in the specified files using a key-based approach. The program was enhanced in revision DC01 to include <code>BBOTHS1</code>, <code>BBOTDS1</code>, and <code>BBOTA1</code> in the deletion process. Business rules ensure that only records matching the company/order# are deleted, with no additional validations or error messaging. The program interacts with five files and does not call external programs, relying solely on internal logic for record deletion.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/","title":"BB005 RPG36","text":"<p>The <code>BB005.rpg36.txt</code> document is an RPG III (System/36 style) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. Its primary function is to release or post a batch by updating the <code>BBBTCH</code> file based on the program mode (<code>PGM</code>). Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>BB005</code> RPG program updates the batch status in the <code>BBBTCH</code> file to reflect actions such as releasing, generating a pick list, printing a bill of lading (BOL), or posting the batch. The process is driven by the <code>PGM</code> parameter and involves a single file operation. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined with a header specification (<code>H P064</code>) and identified as <code>BB005</code>.</li> <li>It defines the <code>BBBTCH</code> file as update-capable (48 bytes, indexed, key length 2, access mode 2).</li> <li> <p>The user data structure (<code>UDS</code>) defines input fields from the local data area:</p> <ul> <li><code>BATCH#</code> (positions 490-491, 2 digits): Batch number.</li> <li><code>PGM</code> (position 504, 1 character): Program mode ('O', 'L', 'B', or 'P').</li> <li><code>RECCNT</code> (positions 475-482, 8 digits): Record count.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>The program chains to the <code>BBBTCH</code> file using <code>BATCH#</code> as the key (line 0011).</li> <li>If a record is found (<code>N99</code>, line 0013), it enters a <code>DO</code> loop (<code>B1</code> to <code>E1</code>):<ul> <li>Checks the <code>PGM</code> value to determine the action:</li> <li>If <code>PGM='O'</code> (Order Entry, lines 0015-0016):<ul> <li>Executes the <code>REL</code> exception output to release the batch.</li> </ul> </li> <li>If <code>PGM='L'</code> (Pick List, lines 0018-0019):<ul> <li>Executes the <code>PICK</code> exception output to generate a pick list.</li> </ul> </li> <li>If <code>PGM='B'</code> (Bill of Lading, lines 0021-0022):<ul> <li>Executes the <code>BOL</code> exception output to mark the BOL as printed.</li> </ul> </li> <li>If <code>PGM='P'</code> (Post, lines 0024-0025):<ul> <li>Executes the <code>POST</code> exception output to post the batch.</li> </ul> </li> <li>Else (lines 0027-0028):<ul> <li>Defaults to executing the <code>REL</code> exception output if <code>PGM</code> is not 'O', 'L', 'B', or 'P'.</li> </ul> </li> <li>The nested <code>IF</code>/<code>END</code> structure ensures only one action is performed (lines 0015-0031).</li> </ul> </li> <li> <p>Sets the last record indicator (<code>LR</code>) to exit the program (line 0035).</p> </li> <li> <p>Output Operations:</p> </li> <li>The program defines four exception outputs to update the <code>BBBTCH</code> file:<ul> <li>REL (Lines 0038-0041):</li> <li>Clears the lock status (position 6) and workstation ID (positions 7-8).</li> <li>Updates the record count (<code>RECCNT</code>) at position 39.</li> <li>PICK (Lines 0043-0047):</li> <li>Clears the lock status (position 6) and workstation ID (positions 7-8).</li> <li>Updates the record count (<code>RECCNT</code>) at position 39.</li> <li>BOL (Lines 0049-0053):</li> <li>Clears the lock status (position 6) and workstation ID (positions 7-8).</li> <li>Sets the BOL printed flag to 'Y' (position 9).</li> <li>Updates the record count (<code>RECCNT</code>) at position 39.</li> <li>POST (Lines 0055-0058):</li> <li>Sets the delete code to 'D' (position 1).</li> <li>Sets the lock status to 'P' (position 6).</li> <li>Updates the record count (<code>RECCNT</code>) at position 39.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for batch processing:</p> <ol> <li>Batch Existence:</li> <li> <p>The batch number (<code>BATCH#</code>) must exist in the <code>BBBTCH</code> file. If not found (indicator 99), no updates are performed, and the program exits.</p> </li> <li> <p>Program Mode Actions:</p> </li> <li> <p>The <code>PGM</code> parameter determines the action:</p> <ul> <li><code>'O'</code> (Order Entry): Releases the batch by clearing lock status and workstation ID.</li> <li><code>'L'</code> (Pick List): Prepares the batch for picking by clearing lock status and workstation ID.</li> <li><code>'B'</code> (Bill of Lading): Marks the batch as having a printed BOL ('Y') and clears lock status and workstation ID.</li> <li><code>'P'</code> (Post): Marks the batch as posted by setting the delete code to 'D' and lock status to 'P'.</li> <li>Any other <code>PGM</code> value defaults to releasing the batch (clearing lock status and workstation ID).</li> </ul> </li> <li> <p>Record Count Update:</p> </li> <li> <p>The record count (<code>RECCNT</code>) is updated in the <code>BBBTCH</code> file for all actions to reflect the current number of records in the batch.</p> </li> <li> <p>Batch Status Management:</p> </li> <li>Releasing or generating a pick list clears the lock status and workstation ID, making the batch available for further processing.</li> <li>Posting a batch marks it as deleted (<code>ABDEL='D'</code>) and sets the lock status to 'P' (posted), effectively closing the batch.</li> <li> <p>The BOL printed flag is set only when <code>PGM='B'</code>.</p> </li> <li> <p>No Validation or Error Messaging:</p> </li> <li>The program assumes the calling OCL program (<code>BB101.ocl36.txt</code>) has validated the batch number and program mode.</li> <li>No error messages are defined or displayed, and processing is unconditional for matched records.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following file:</p> <ol> <li>BBBTCH: Update-capable batch header file (48 bytes, indexed, key length 2).</li> <li>Fields updated:<ul> <li>Position 1: Delete code (<code>ABDEL</code>, set to 'D' for <code>POST</code>).</li> <li>Position 6: Lock status (<code>ABLOCK</code>, cleared or set to 'P' for <code>POST</code>).</li> <li>Positions 7-8: Workstation ID (<code>ABLKWS</code>, cleared).</li> <li>Position 9: BOL printed flag (<code>ABPRTD</code>, set to 'Y' for <code>BOL</code>).</li> <li>Positions 32-39: Record count (<code>ABREC</code>, updated with <code>RECCNT</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB005</code> RPG program does not call any external programs. All processing is handled internally through file updates and exception outputs.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB005%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB005</code> RPG program, called from the <code>BB101.ocl36.txt</code> OCL program, updates the <code>BBBTCH</code> file to release, prepare for picking, mark as BOL printed, or post a batch based on the <code>PGM</code> parameter ('O', 'L', 'B', or 'P'). It chains to the batch record using <code>BATCH#</code>, updates fields like lock status, workstation ID, BOL printed flag, delete code, and record count, and exits. Business rules ensure appropriate status updates based on the program mode, with no additional validations or error messaging. The program interacts solely with the <code>BBBTCH</code> file and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20OCL/","title":"BB101 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>BB101.ocl36.txt</code>, which appears to be part of an IBM System/38 or AS/400 (now IBM i) environment for managing order entry processes. OCL is used to control job execution, define file operations, and invoke programs. Below is a detailed explanation of the process steps, followed by a list of external programs called and tables (files) used.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program <code>BB101.ocl36.txt</code> is structured to handle order entry, batch selection, and batch release processes. It includes file definitions, conditional logic, printer overrides, and calls to external programs. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Setup and Program Invocation:</li> <li>The program starts by calling <code>STRPCOCLP</code>, likely a utility or initialization program to set up the environment for the order entry process.</li> <li> <p>Comments indicate the program is related to \"ORDER ENTRY\" and includes temporary modifications by \"JIMMY K.\"</p> </li> <li> <p>Order Batch Selection:</p> </li> <li>Local Variables Setup:<ul> <li>Defines local variables at specific offsets (e.g., <code>OFFSET-470,DATA-'?13?'</code>, <code>OFFSET-494,DATA-'?USER?'</code>) to store runtime parameters such as batch type (<code>?13?</code>), user ID (<code>?USER?</code>), workstation (<code>?WS?</code>), and mode (<code>O</code> for Order Entry).</li> <li>Conditionally sets a display message at <code>OFFSET-60</code> based on the value of <code>?13?</code>:</li> <li>If <code>?13?</code> is blank, displays \" ORDER ENTRY \".</li> <li>If <code>?13?</code> is <code>PP</code>, displays \" VISCOSITY ASN ENTRY \".</li> <li>If <code>?13?</code> is <code>PM</code>, displays \" PRODUCT MOVES ENTRY \".</li> </ul> </li> <li>Switch Logic:<ul> <li>Defines a switch (<code>SWITCH 0XXXXXXX</code>) where <code>SWITCH1</code> is used to control batch deletion logic.</li> </ul> </li> <li>File Loading and Execution:<ul> <li>Loads program <code>BB001</code> and defines files <code>BBBTCH</code> and <code>BBBTCHX</code> (likely batch header files) with the label <code>?9?BBBTCH</code> and shared disposition (<code>DISP-SHR</code>).</li> <li>Executes the program (<code>RUN</code>).</li> </ul> </li> <li>Conditional Exit:<ul> <li>If the condition <code>?L'121,6'?/CANCEL</code> is true (checking a specific field for the value \"CANCEL\"), the program returns, halting further execution.</li> </ul> </li> <li> <p>Batch Deletion Logic:</p> <ul> <li>Evaluates <code>P20</code> with the value from <code>?L'490,2'?</code> (a 2-character field at position 490).</li> <li>If <code>SWITCH1</code> is set (i.e., <code>SWITCH1-1</code>):</li> <li>Calls programs <code>BB215</code> and <code>BB003</code> with <code>*ALL</code> parameters.</li> <li>Deletes records from files <code>?9?BBOR?20?</code> and <code>?9?BBOX?20?</code> if they exist (<code>DATAF1-?9?BBOR?20?</code> and <code>DATAF1-?9?BBOX?20?</code>).</li> <li>Resets program <code>BB101</code> with <code>*ALL</code> parameters.</li> </ul> </li> <li> <p>Order Entry Processing:</p> </li> <li>Temporary Setup:<ul> <li>Sets a local variable at <code>OFFSET-101</code> to <code>'10'</code>.</li> <li>Defines <code>IN110</code> with parameters <code>INTZH</code> and <code>INTZXX</code> for files with labels <code>?9?</code>, <code>WK</code>, <code>HOLD</code>, <code>FUT</code>.</li> <li>Calls program <code>IN805BC</code>, likely for additional processing or validation.</li> </ul> </li> <li>File Creation:<ul> <li>Conditionally creates files <code>?9?BBOR?20?</code> and <code>?9?BBOX?20?</code> using <code>BLDFILE</code> if they exist, with specifications for 999,000 records, 512-byte record length, and other attributes.</li> </ul> </li> <li>File Definitions:<ul> <li>Loads program <code>BB101</code> and defines multiple files with shared disposition (<code>DISP-SHR</code>), including:</li> <li>Order-related files: <code>BBORTR</code>, <code>BBORTRX</code>, <code>BBORDR</code>, <code>BBORDRH</code>, <code>BBTRTX</code>, <code>BBORTX</code>.</li> <li>Customer-related files: <code>BICONT</code>, <code>ARCUSTX</code>, <code>EDICUS</code>, <code>ARCOMMX</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>SHIPTO</code>.</li> <li>Inventory and pricing files: <code>BIPRTX</code>, <code>GSTABL</code>, <code>INFRMP</code>, <code>GLMAST</code>, <code>INTANK</code>, <code>INTAN2</code>.</li> <li>Additional files for specific purposes: <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>, <code>BBORHS1</code>, <code>BBORDS1</code>, <code>BBORA1</code>, <code>BBFRPR</code>, <code>GSMLCD</code>, <code>BBDATE</code>, <code>GSCNTRA</code>, <code>SA5SHS</code>, <code>BBORDHZ</code>, <code>SA5SHQ</code>, <code>BBORDHU</code>.</li> <li>Defines files for called programs (e.g., <code>BB1011</code>, <code>BB1012</code>, <code>BB1013</code>, etc.), including <code>GSUMCV</code>, <code>PRCNTR</code>, <code>BBPRCE</code>, <code>BBBCPR</code>, <code>BICUAX</code>, <code>BICUAY</code>, <code>SA5FIZD</code>, <code>ARCUPR</code>, <code>BBORCL</code>, <code>ARCUST2</code>, <code>ARCLGR</code>, <code>BBORDHC</code>, <code>GSCTUM</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>INLOC</code>, <code>BBSHSA1</code>, <code>BICUFR</code>, <code>GSCTWT</code>, <code>BBCFSH</code>, <code>BBCFSD1</code>, <code>BBNDFI2</code>, <code>BBTRANIN</code>, <code>BBORF</code>, <code>BBTRF</code>, <code>BBCAID</code>, <code>GSCNTR1</code>, <code>GSPRCT</code>, <code>FROF</code>, <code>FROFH</code>, <code>FROFCL1</code>, <code>FROFC</code>, <code>FROFCH</code>, <code>GSTABL6</code>, <code>GSCNTR6</code>, <code>ARCUP16</code>, <code>ARCUP36</code>, <code>GSPRD6</code>, <code>BICUF1</code>, <code>BBTRDS1I</code>, <code>BBPRXR</code>, <code>BBPRXY</code>, <code>BBPRXZ</code>, <code>SHPADR</code>, <code>CUADR</code>, <code>ARCUSX</code>, <code>BBORDD</code>, <code>SA5FIUD</code>, <code>SA5SHZ</code>, <code>BBOH2</code>, <code>BBOH3</code>, <code>BBOH</code>, <code>BBOHMS</code>, <code>BBORDB</code>, <code>BBORDH</code>, <code>BBORDI</code>, <code>BBORDM</code>, <code>BBORDO</code>, <code>BBPRCY</code>, <code>BICUA6</code>, <code>GSPROD</code>, <code>BBRCSC2</code>, <code>BBCNOR</code>, <code>BBORPX</code>, <code>GSCNTR</code>, <code>INCONT</code>, <code>INMTAJ</code>, <code>INMTRDY</code>, <code>INTKRV</code>, <code>BBSHSA</code>, <code>BBOTA</code>, <code>BBBLA</code>, <code>BBTRA</code>, <code>BBSHSARD</code>, <code>BBOTARD</code>, <code>BBBLARD</code>, <code>BBTRARD</code>.</li> </ul> </li> <li>Printer Overrides:<ul> <li>Overrides printer files <code>JBLIST</code> and <code>LIST198J</code> to output queue <code>QUSRSYS/CREDLIMIT</code>.</li> <li>Conditionally overrides <code>CREMAL</code> and <code>SMEMAL</code> to output queues <code>CSROUTQ</code>, <code>SLMNOUTQ</code>, or <code>TESTOUTQ</code> if <code>?9?</code> equals <code>G</code>.</li> <li>Defines a printer <code>BUGS</code> with device <code>PJ</code> and priority <code>0</code>.</li> </ul> </li> <li> <p>Execution:</p> <ul> <li>Runs the program (<code>RUN</code>) after defining files and overrides.</li> </ul> </li> <li> <p>Release Batch:</p> </li> <li>Sets a local variable at <code>OFFSET-475</code> to <code>?F'A,?9?BBOR?20?'?</code>.</li> <li>Loads program <code>BB005</code> and defines file <code>BBBTCH</code> with label <code>?9?BBBTCH</code> and shared disposition.</li> <li>Executes the program (<code>RUN</code>).</li> <li>Clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs: 1. STRPCOCLP: Initializes the environment for order entry. 2. BB001: Handles order batch selection. 3. BB215: Called during batch deletion if <code>SWITCH1</code> is set. 4. BB003: Called during batch deletion if <code>SWITCH1</code> is set. 5. IN805BC: Called for additional processing in the order entry section. 6. BB005: Handles batch release. 7. BB1011: Associated with file definitions for pricing, customer, and inventory data. 8. BB1012: Associated with customer pricing data (<code>ARCUPR</code>). 9. BB1013: Associated with order and customer data processing. 10. BB1014: Associated with location data (<code>INLOC</code>). 11. BB1015: Associated with shipment data (<code>BBSHSA1</code>). 12. BB1016: Associated with customer and pricing data (<code>ARCUP16</code>, <code>ARCUP36</code>). 13. BB106: Associated with freight and inventory data. 14. BB1018: Associated with pricing data (<code>BBPRXR</code>, <code>BBPRXY</code>, <code>BBPRXZ</code>). 15. SHPAD1R: Associated with shipping address data (<code>SHPADR</code>). 16. CUADR1R: Associated with customer address data (<code>CUADR</code>). 17. MCSTSHP: Associated with customer data (<code>ARCUSX</code>). 18. BB115: Associated with order and shipment data. 19. BB117: Associated with order header and master data. 20. BB801: Associated with order data processing. 21. AR822R: Associated with pricing and customer data. 22. MBBQTY: Associated with product and quantity data. 23. BB104A: Associated with contract order data (<code>BBCNOR</code>). 24. IN805: Associated with inventory and contract data. 25. BI9005: Associated with shipment and billing data.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references numerous files (tables) for data processing, all defined with shared disposition (<code>DISP-SHR</code>) unless otherwise noted. Below is a comprehensive list of the files used:</p> <ol> <li>BBBTCH: Batch header file (<code>?9?BBBTCH</code>).</li> <li>BBBTCHX: Alternate batch header file (<code>?9?BBBTCH</code>).</li> <li>BBORTR: Order transaction file (<code>?9?BBOR?20?</code>, <code>EXTEND-100</code>).</li> <li>BBORTRX: Alternate order transaction file (<code>?9?BBOR?20?</code>).</li> <li>BBORDR: Order detail file (<code>?9?BBORDR</code>).</li> <li>BBORDRH: Order header file (<code>?9?BBORDH</code>).</li> <li>BBTRTX: Transaction file (<code>?9?BBOX?20?</code>, <code>EXTEND-50</code>).</li> <li>BBORTX: Order transaction file (<code>?9?BBORTX</code>).</li> <li>BICONT: Customer contract file (<code>?9?BICONT</code>).</li> <li>ARCUSTX: Customer extension file (<code>?9?ARCUSX</code>).</li> <li>EDICUS: EDI customer file (<code>?9?EDICUS</code>).</li> <li>ARCOMMX: Customer communication file (<code>?9?ARCOMMX</code>).</li> <li>ARCUST: Customer master file (<code>?9?ARCUST</code>).</li> <li>ARCUSP: Customer pricing file (<code>?9?ARCUSP</code>).</li> <li>SHIPTO: Ship-to address file (<code>?9?SHIPTO</code>).</li> <li>BIPRTX: Product pricing file (<code>?9?BIPRTX</code>).</li> <li>GSTABL: General system table (<code>?9?GSTABL</code>).</li> <li>INFRMP: Inventory formula file (<code>?9?INFRMP</code>).</li> <li>GLMAST: General ledger master file (<code>?9?GLMAST</code>).</li> <li>INTANK: Inventory tank file (<code>?9?INTANK</code>).</li> <li>INTAN2: Secondary inventory tank file (<code>?9?INTAN2</code>).</li> <li>BBOTHS1: Order transaction history file (<code>?9?BBOTHS1</code>).</li> <li>BBOTDS1: Order detail history file (<code>?9?BBOTDS1</code>).</li> <li>BBOTA1: Order transaction file (<code>?9?BBOTA1</code>).</li> <li>BBORHS1: Order header history file (<code>?9?BBORHS1</code>).</li> <li>BBORDS1: Order detail file (<code>?9?BBORDS1</code>).</li> <li>BBORA1: Order alternate file (<code>?9?BBORA1</code>).</li> <li>BBFRPR: Freight pricing file (<code>?9?BBFRPR</code>).</li> <li>GSMLCD: System calendar file (<code>?9?GSMLCD</code>).</li> <li>BBDATE: Date file (<code>?9?BBDATE</code>).</li> <li>GSCNTRA: Contract file (<code>?9?GSCNTR1</code>).</li> <li>SA5SHS: Shipment history file (<code>?9?SA5SHS</code>).</li> <li>BBORDHZ: Order header file (<code>?9?BBORDHZ</code>).</li> <li>SA5SHQ: Shipment queue file (<code>?9?SA5SHQ</code>).</li> <li>BBORDHU: Order header unit file (<code>?9?BBORDHU</code>).</li> <li>GSUMCV: Customer summary file (<code>?9?GSUMCV</code>).</li> <li>PRCNTR: Pricing control file (<code>?9?PRCNTR</code>).</li> <li>BBPRCE: Pricing file (<code>?9?BBPRCE</code>).</li> <li>BBBCPR: Contract pricing file (<code>?9?BBBCPR</code>).</li> <li>BICUAX: Customer auxiliary file (<code>?9?BICUAX</code>).</li> <li>BICUAY: Customer auxiliary file (<code>?9?BICUAY</code>).</li> <li>SA5FIZD: Shipment detail file (<code>?9?SA5FIZD</code>).</li> <li>ARCUPR: Customer pricing file (<code>?9?ARCUPR</code>).</li> <li>BBORCL: Order close file (<code>?9?BBORCL</code>).</li> <li>BBORTRC: Order transaction file (<code>?9?BBOR?20?</code>).</li> <li>ARCUST2: Customer master file (<code>?9?ARCUST</code>).</li> <li>ARCLGR: Customer ledger file (<code>?9?ARCLGR</code>).</li> <li>BBORDHC: Order header file (<code>?9?BBORDH</code>).</li> <li>GSCTUM: Customer master file (<code>?9?GSCTUM</code>).</li> <li>BBCSR: Customer service file (<code>?9?BBCSR</code>).</li> <li>BBSLSM: Sales master file (<code>?9?BBSLSM</code>).</li> <li>INLOC: Inventory location file (<code>?9?INLOC</code>).</li> <li>BBSHSA1: Shipment file (<code>?9?BBSHSA1</code>).</li> <li>BICUFR: Freight customer file (<code>?9?BICUFR</code>).</li> <li>GSCTWT: Contract weight file (<code>?9?GSCTWT</code>).</li> <li>BBCFSH: Freight shipment file (<code>?9?BBCFSH</code>).</li> <li>BBCFSD1: Freight shipment detail file (<code>?9?BBCFSD1</code>).</li> <li>BBNDFI2: Non-delivery file (<code>?9?BBNDFI2</code>).</li> <li>BBTRANIN: Transaction input file (<code>?9?BBTRAN</code>, <code>EXTEND-100</code>).</li> <li>BBORF: Order freight file (<code>?9?BBORF</code>).</li> <li>BBTRF: Transaction freight file (<code>?9?BBTRF</code>).</li> <li>BBCAID: Carrier ID file (<code>?9?BBCAID</code>).</li> <li>GSCNTR1: Contract file (<code>?9?GSCNTR1</code>).</li> <li>GSPRCT: Product contract file (<code>?9?GSPRCT</code>).</li> <li>FROF: Freight order file (<code>?9?FROF</code>).</li> <li>FROFH: Freight order header file (<code>?9?FROFH</code>).</li> <li>FROFCL1: Freight order close file (<code>?9?FROFCL1</code>).</li> <li>FROFC: Freight order file (<code>?9?FROFC</code>).</li> <li>FROFCH: Freight order header file (<code>?9?FROFCH</code>).</li> <li>GSTABL6: System table (<code>?9?GSTABL</code>).</li> <li>GSCNTR6: Contract file (<code>?9?GSCNTR1</code>).</li> <li>ARCUP16: Customer pricing file (<code>?9?ARCUP1</code>).</li> <li>ARCUP36: Customer pricing file (<code>?9?ARCUP3</code>).</li> <li>GSPRD6: Product file (<code>?9?GSPRD6</code>).</li> <li>BICUF1: Freight customer file (<code>?9?BICUF1</code>).</li> <li>BBTRDS1I: Transaction detail file (<code>?9?BBTRDS1</code>).</li> <li>BBPRXR: Pricing file (<code>?9?BBPRXR</code>).</li> <li>BBPRXY: Pricing file (<code>?9?BBPRXY</code>).</li> <li>BBPRXZ: Pricing file (<code>?9?BBPRXZ</code>).</li> <li>SHPADR: Shipping address file (<code>?9?SHPADR</code>).</li> <li>CUADR: Customer address file (<code>?9?CUADR</code>).</li> <li>ARCUSX: Customer extension file (<code>?9?ARCUSX</code>).</li> <li>BBORDD: Order detail file (<code>?9?BBORDD</code>).</li> <li>SA5FIUD: Shipment detail file (<code>?9?SA5FIUD</code>).</li> <li>SA5SHZ: Shipment file (<code>?9?SA5SHZ</code>).</li> <li>BBOH2: Order header file (<code>?9?BBOH2</code>).</li> <li>BBOH3: Order header file (<code>?9?BBOH3</code>).</li> <li>BBOH: Order header file (<code>?9?BBOH</code>).</li> <li>BBOHMS: Order header master file (<code>?9?BBOHMS</code>).</li> <li>BBORDB: Order detail file (<code>?9?BBORDB</code>).</li> <li>BBORDH: Order header file (<code>?9?BBORDH</code>).</li> <li>BBORDI: Order item file (<code>?9?BBORDI</code>).</li> <li>BBORDM: Order master file (<code>?9?BBORDM</code>).</li> <li>BBORDO: Order file (<code>?9?BBORDO</code>).</li> <li>BBPRCY: Pricing file (<code>?9?BBPRCY</code>).</li> <li>BICUA6: Customer auxiliary file (<code>?9?BICUA6</code>).</li> <li>GSPROD: Product file (<code>?9?GSPROD</code>).</li> <li>BBRCSC2: Contract file (<code>?9?BBRCSC2</code>).</li> <li>BBCNOR: Contract order file (<code>?9?BBCNOR</code>).</li> <li>BBORPX: Order pricing file (<code>?9?BBORPX</code>).</li> <li>GSCNTR: Contract file (<code>?9?GSCNTR</code>).</li> <li>INCONT: Inventory contract file (<code>?9?INCONT</code>).</li> <li>INMTAJ: Inventory adjustment file (<code>?9?INMTAJ</code>).</li> <li>INMTRDY: Inventory ready file (<code>?9?INMTRDY</code>).</li> <li>INTKRV: Inventory tank file (<code>?9?INTKRV</code>).</li> <li>BBSHSA: Shipment file (<code>?9?BBSHSA</code>).</li> <li>BBOTA: Order transaction file (<code>?9?BBOTA</code>).</li> <li>BBBLA: Billing file (<code>?9?BBBLA</code>).</li> <li>BBTRA: Transaction file (<code>?9?BBTRA</code>).</li> <li>BBSHSARD: Shipment file (<code>?9?BBSHSA</code>).</li> <li>BBOTARD: Order transaction file (<code>?9?BBOTA</code>).</li> <li>BBBLARD: Billing file (<code>?9?BBBLA</code>).</li> <li>BBTRARD: Transaction file (<code>?9?BBTRA</code>).</li> <li>SA5MOVD3: Movement detail file (<code>?9?SA5MOVD3</code>, overridden via <code>OVRDBF</code>).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20OCL/#summary","title":"Summary","text":"<p>The <code>BB101.ocl36.txt</code> OCL program manages order entry, batch selection, and batch release processes in an IBM midrange system. It initializes the environment, handles batch selection with conditional logic for display messages and batch deletion, processes order entry with extensive file operations, and releases batches. The program interacts with numerous files for orders, customers, inventory, pricing, and shipments, and calls multiple external programs to perform specific tasks. The use of dynamic file labels (e.g., <code>?9?</code>, <code>?20?</code>) and conditional logic (<code>IF</code>, <code>IFF</code>) allows flexibility in handling different environments and batch types.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/","title":"BB101 RPGLE","text":"<p>The <code>BB101.rpgle.txt</code> document is an RPGLE (RPG IV) program used in conjunction with the <code>BB101.ocl36.txt</code> OCL program in an IBM System/38 or AS/400 (now IBM i) environment. This program handles the entry and update of open orders in the <code>BBORDR</code> file, supporting order entry, validation, and maintenance processes. Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB101</code> RPGLE program manages the interactive entry and updating of order data through multiple screens, performing validations, calculations, and updates to various files. The process steps are organized around screen interactions, data validation, and file updates, as outlined below:</p> <ol> <li>Program Initialization:</li> <li>The program is initialized with the <code>H</code> specification (<code>fixnbr(*zoned:*inputpacked)</code>) to handle zoned decimal and packed decimal data formats.</li> <li>It defines the workstation file <code>bb101d</code> (previously <code>SCREEN</code>) for interactive screen processing, using <code>infds(statrk)</code> for status tracking and <code>infsr(rollky)</code> for handling roll keys.</li> <li> <p>Comments indicate that the program is a converted version from an earlier system (TARGET/400 conversion on 11/25/19), with added, deleted, and modified source lines.</p> </li> <li> <p>Screen Processing:    The program uses multiple screens for data entry and display, each with specific purposes:</p> </li> <li>Screen 1 (BB101S1, Output: 21): Selection prompt for entering company number, order number, batch number, and other initial data.</li> <li>Screen 2 (BB101S2, Output: 22): Captures header data, including customer, ship-to, order dates, freight codes, and other order-level details.</li> <li>Screen 3 (BB101S3, Output: 23): Handles line item data, including product, quantity, price, and container details. Header fields were added to this screen in revision JB87 to address overlay issues in Profound Genie.</li> <li>Screen 4 (BB101S4, Output: 24): Manages miscellaneous line items (e.g., non-product charges).</li> <li>Screen 5 (BB101S5, Output: 25): Supports description and product search.</li> <li>Screen 6 (BB101S6, Output: 26): Facilitates customer alpha search.</li> <li>Screen 7 (BB101S7, Output: 27): Captures remarks for orders, invoices, and bills of lading (BOL).</li> <li>Screen 8 (BB101S8, Output: 28): Allows overriding tax fields.</li> <li>Screen 9 (BB101S9, Output: 29): Lists orders in a batch.</li> <li>Screen Z (BB101SZ, Output: 38): Displays a remarks review screen.</li> <li>Screen A (BB101SA, Output: 43): Shows credit limit error messages.</li> <li> <p>Screen B (BB101SB, Output: 94): Blank overlay for the line item screen.</p> </li> <li> <p>Data Validation and Business Logic:</p> </li> <li>The program performs extensive validations on input fields, using error messages (COM and COM1 comments) to enforce business rules. Examples include:<ul> <li>Validating company number, customer number, ship-to number, order dates, sales tax code, salesman number, terms code, and general ledger (G/L) numbers.</li> <li>Checking product codes, quantities, prices, unit of measure, and container codes.</li> <li>Ensuring freight codes are valid (e.g., \"C\", \"P\", \"A\" for collect, prepaid, or PPD&amp;ADD).</li> <li>Validating multi-load orders and railcar restrictions.</li> </ul> </li> <li>Specific validations include:<ul> <li>JB01: Forces a valid carrier ID on Screen 2.</li> <li>JB06: Adds 'S' order locking code for orders being shipped in IMS.</li> <li>JB11: Forces 'Y' no-charge code for customer-owned product orders and restricts quantity/amount on miscellaneous lines.</li> <li>JB12: Validates group-by field as 'S' (size) or 'C' (category), defaulting to 'S'.</li> <li>JB19: Restricts EDI orders to specific plants by comparing LDA RACD to order RACD and ensures COON='Y'.</li> <li>JB31: Prohibits 'CC' or 'CT' carrier codes.</li> <li>JB32: Prevents 'SCO' freight processor for new orders.</li> <li>JB48: Validates order process status (blank, 'C', or 'S').</li> <li>JB52: Makes bill-to PO# a required field.</li> <li>JB55: Makes responsible area/major location a required field.</li> <li>JB93: Bypasses credit checking for customer-owned product orders (COON='Y').</li> </ul> </li> <li> <p>The program uses command keys (e.g., KA for bypass, KG to end job, F1 to F12 for specific functions like lookups and overrides).</p> </li> <li> <p>File Operations:</p> </li> <li>Add/Update Records:<ul> <li>Adds or updates header records (<code>OUTHDR</code>, indicators 80/N80).</li> <li>Adds or updates transaction line items (<code>OUTDTL</code>, indicators 81/N81).</li> <li>Adds or updates miscellaneous transaction lines (<code>OUTMSC</code>, indicators 82/N82).</li> <li>Updates freight processor (<code>upfpcd</code>), calculated quantities/weights (<code>updd@</code>, <code>updd@s</code>), and tax fields (<code>addtax</code>, <code>updtax</code>, <code>addmtx</code>, <code>deldtx</code>).</li> </ul> </li> <li>Delete Records:<ul> <li>Flags records for deletion rather than physically deleting them (<code>deldtx</code>, revision DC16).</li> </ul> </li> <li>Release Records:<ul> <li>Releases records in files like <code>BBORTR</code>, <code>BBOTHS1</code>, and <code>BBOTDS1</code> (<code>nulbbortr</code>, <code>nulbboths1</code>, <code>nulbbotds1</code>).</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>Updates files like <code>BICONT</code> (indicator 87) and <code>SHIPTO</code> (indicator 79).</li> <li>Writes specific fields to <code>BBORHS1</code> and <code>BBOTHS1</code> individually instead of as 256-byte fields (revision JB85).</li> </ul> </li> <li> <p>Freight and Quantity Calculations:</p> </li> <li>Calculates quantities and weights (e.g., gross gallons, net gallons, shipping weight) using subroutine <code>getslb</code> when KA is pressed (revision JB92).</li> <li>Performs freight calculations by calling <code>BB101F</code> (JB30) and <code>BB106</code> (JB64), with logic to auto-populate carrier ID from top 5 preferences if blank (JB71).</li> <li> <p>Displays estimated carrier freight for product moves (JB82).</p> </li> <li> <p>End-of-Order Processing:</p> </li> <li>Moved to before the remarks review screen (JB63), including:<ul> <li>Quantity calculations for all order details.</li> <li>Freight calculations.</li> <li>Order total calculations.</li> <li>Credit limit checks (bypassed for customer-owned products, JB93).</li> </ul> </li> <li> <p>Displays top 5 logistic carrier ID preferences and allows carrier ID updates on Screen 7 and Z.</p> </li> <li> <p>Error Handling and Messages:</p> </li> <li>Uses a comprehensive set of error messages (COM and COM1) to notify users of invalid inputs or conditions (e.g., invalid company, customer, dates, or freight codes).</li> <li>Issues warnings for specific conditions, such as missing container weight records (JB18, upgraded to error in JB21) or holiday pickup/delivery dates (MG, 02/01/16).</li> <li> <p>Displays credit hold messages (COM1) for accounts exceeding limits or with overdue invoices.</p> </li> <li> <p>Screen Navigation and Command Keys:</p> </li> <li>Supports roll keys for navigating detail and miscellaneous screens (indicators 75, 76, 83, 84, 85, 86).</li> <li> <p>Uses function keys for specific actions:</p> <ul> <li>F1: Jumps to header screen or cancels new orders not yet in the transaction file (JB60).</li> <li>F4: Container code lookup (JK05).</li> <li>F5: Product lookup (JK05).</li> <li>F6: Overrides product restrictions (JB61).</li> <li>F7/F9: Inventory inquiry via <code>IN805</code> (DC24, JB58).</li> <li>F8: Pricing lookup via <code>AR822R</code> (DC19).</li> <li>F10: Product description lookup (JK05) or allows holiday dates (MG, 02/01/16).</li> <li>F11: Accepts inactive rack price warnings (JB45).</li> <li>F12: Overrides specific errors (e.g., freight code mismatches).</li> </ul> </li> <li> <p>Special Processing:</p> </li> <li>Handles customer-owned product orders by bypassing certain validations (e.g., <code>INTANK</code> existence, JB15).</li> <li>Supports EDI orders with specific restrictions (JB19).</li> <li>Validates in-transit and destination locations/tanks (JB72).</li> <li>Checks for duplicate hand tickets (MG09, JB88) and ensures hand ticket format (HT# prefix, JK07).</li> <li>Bypasses product restriction tests for carrier codes 'PT' or 'XS' (MG11).</li> <li>Ensures delivery and pickup dates are not more than 30 days past (MG12).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces numerous business rules, primarily through validations and error messages. Key rules include:</p> <ol> <li>Order Validation:</li> <li>Company, customer, ship-to, and order numbers must be valid (errors 01, 03, 04, 46).</li> <li>Order types must be valid (blank, 'M', or specific invoice types like 'R', 'P', 'J', 'T') (error 02).</li> <li>Dates (order, P/O, pickup, delivery) must be valid and not on holidays unless overridden (errors 05, 06, 07, 68, 92, 93, 107, 108).</li> <li>Sales tax codes, salesman numbers, terms codes, and G/L numbers must exist in respective tables (errors 08, 09, 10, 11, 65).</li> <li>Bill-to PO# is required (JB52, error 89).</li> <li> <p>Responsible area/major location is required (JB55, error 74).</p> </li> <li> <p>Product and Inventory:</p> </li> <li>Products must have valid codes, containers, and units of measure (errors 12, 15, 22, 29, 30, 52).</li> <li>Inactive or deleted products/tanks trigger errors or warnings (JB45, JB65, JB68, errors 87, 88).</li> <li>Customer-owned products bypass certain validations (e.g., <code>INTANK</code>, credit checks) (JB11, JB15, JB93).</li> <li> <p>Product moves require specific validations (errors 96, 97, 99, 100).</p> </li> <li> <p>Freight Rules:</p> </li> <li>Freight codes must be 'C' (collect), 'P' (prepaid), or 'A' (PPD&amp;ADD) (error 26).</li> <li>Railcar orders restrict freight codes to 'C' or 'L' and prohibit multi-loads (JB43, error 27).</li> <li>Freight collect requires blank delivery and no separate freight (errors 57, 61, 65).</li> <li>Prepaid and PPD&amp;ADD require delivery='Y' and specific separate freight settings (errors 58, 59, 62, 63, 66, 67).</li> <li>Carrier ID must be valid and not inactive (JB50, error 72).</li> <li>'SCO' freight processor is not allowed for new orders (JB32, error 84).</li> <li>Freight calculations must be enabled ('Y') or disabled ('N') appropriately (errors 64, 94, 98).</li> <li> <p>Default carrier ID to 'BPRR' for railcar orders (JB81).</p> </li> <li> <p>Quantity and Pricing:</p> </li> <li>Quantities must be valid and non-zero unless multi-load settings allow it (errors 13, 42, 43, 44).</li> <li>Prices must be valid, with special handling for rack prices and sales agreements (JB45, JB80).</li> <li>Customer-owned product orders force no-charge codes and restrict miscellaneous line quantities/amounts (JB11, error 75).</li> <li> <p>Calculated quantities (e.g., gross/net gallons, weights) are updated at key points (JB59, JB92).</p> </li> <li> <p>Credit and Duplicates:</p> </li> <li>Credit checks are bypassed for customer-owned product orders (JB93).</li> <li>Duplicate order checking is performed via <code>BB115</code> (DC18, error 85).</li> <li> <p>Hand ticket numbers must be unique per customer and start with \"HT# \" (MG09, JB88, errors 102, 103, 104, 105).</p> </li> <li> <p>EDI and Special Orders:</p> </li> <li>EDI orders require plant-specific access (JB19).</li> <li>Multi-load orders have specific quantity and freight code restrictions (errors 40, 41, 42, 43, 44, 45, 51).</li> <li> <p>Railcar orders prohibit multi-loads (JB43, error 86).</p> </li> <li> <p>Screen and Data Handling:</p> </li> <li>Protects certain fields for EDI orders (JB14).</li> <li>Ensures proper cursor positioning after lookups (JB47).</li> <li>Handles one-time ship-to deletions correctly (JB67).</li> <li>Displays top 5 carrier preferences and allows updates on specific screens (JB63).</li> <li>Bypasses certain validations temporarily (e.g., responsible area/major location, JB86).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with numerous files for data storage, retrieval, and validation. Based on the RPGLE source and cross-referencing with the OCL program, the following files are used:</p> <ol> <li>BB101D: Workstation display file for interactive screens (replaces <code>SCREEN</code>).</li> <li>BBORTR: Order transaction file (update, add, release records).</li> <li>BBOTHS1: Order transaction history supplemental file.</li> <li>BBOTDS1: Order detail supplemental file.</li> <li>BBTRTX: Tax transaction file.</li> <li>BBORDR: Open order detail file (primary file for order entry/update).</li> <li>BICONT: Customer contract file.</li> <li>SHIPTO: Ship-to address file.</li> <li>GSPREX: Product exception file (validation removed in JK08, moved to <code>BB116</code>).</li> <li>INLOC: Inventory location file.</li> <li>INTANK: Inventory tank file.</li> <li>GSCTWT: Contract weight table for non-fluid validation.</li> <li>BBORDD: Order detail file.</li> <li>GSTABL: General system table (replaced for <code>PRODCD</code> and <code>BBCAID</code> in JK09, JK10).</li> <li>GSPROD: Product file (replaces <code>GSTABL</code> for <code>PRODCD</code>, JK09).</li> <li>BBCAID: Carrier ID file (replaces <code>GSTABL</code> for <code>BBCAID</code>, JK10).</li> <li>GSMLCD: System calendar file (length changed in JB53).</li> <li>GSCTUM: Customer master file.</li> <li>GSUMCV: Customer summary file.</li> <li>ARCUST: Customer master file.</li> <li>ARCUPR: Customer pricing file (key includes container type in JB62).</li> <li>BBSHSA: Shipment file (used for accessorials/marks in JB13).</li> <li>BBPRXR: Product cross-reference file.</li> <li>GLMAST: General ledger master file.</li> <li>SHPADR: Shipping address file.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls several external programs for specific functions, as noted in the revision history and comments:</p> <ol> <li>BB1011: Retrieves product, pricing, and customer data (common data structure, JB74, JK04).</li> <li>BB1014: Retrieves inventory location (<code>INLOC</code>) information (used by BB495, BB500, and BB101).</li> <li>BB1015: Retrieves accessorials/marks from <code>BBSHSA</code> (JB13).</li> <li>BB101F: Performs freight calculations (JB30).</li> <li>BB106: Performs advanced freight calculations (JB64).</li> <li>BB115: Checks for duplicate customer orders (DC18).</li> <li>BB811: Customer transaction batch order inquiry (DC21).</li> <li>BB104A: Handles open order cancellation or reactivation (DC23).</li> <li>BB1033: Validates responsible area/major location (JK07, temporarily bypassed in JB86).</li> <li>BB1018: Handles accessorials/marks with data structure parameters (JB83).</li> <li>AR822R: Pricing lookup for CSR (called via F8, DC19).</li> <li>IN805: Inventory inquiry (called via F9, DC24, JB58, JK02, JK03, JB78).</li> <li>LCSTSHP: Customer ship-to lookup (replaces internal search, DC14, DC17).</li> <li>MSHIPTO: Customer ship-to lookup (replaces <code>SHIPS1R</code>, DC11).</li> <li>MGSTABL: Country code lookup (DC10).</li> <li>MBBQTY: Accumulates total shipping weight for display on Screen 7 (DC20).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB101%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB101</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, manages the entry and update of open orders in the <code>BBORDR</code> file. It uses multiple screens for order header, line items, miscellaneous items, remarks, and tax overrides, with extensive validations to enforce business rules. Key processes include order entry, product and freight validation, quantity and weight calculations, credit checks, and file updates. The program interacts with numerous files for order, customer, inventory, and pricing data and calls external programs for specialized functions like freight calculations, inventory inquiries, and duplicate order checks. Business rules ensure data integrity, proper freight handling, and compliance with customer and system requirements, with specific accommodations for EDI, railcar, and customer-owned product orders.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/","title":"BB1011 RPGLE","text":"<p>The <code>BB1011.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is a subroutine of the <code>BB101</code> order entry program, responsible for validating container/unit of measure combinations, retrieving rack and invoice prices, validating distributor purchase quantities for resale, and performing related calculations. The program includes multiple revisions to enhance pricing logic, handle export orders, and incorporate additional validations. Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB1011</code> program processes order detail data to validate inputs, retrieve pricing, and perform conversions, particularly for order entry in the <code>BB101</code> system. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined as part of <code>BB101</code> and uses files for validation and pricing retrieval.</li> <li>File definitions include:<ul> <li><code>GSCTWT</code>: Contract weight table (64 bytes, indexed, key length 9).</li> <li><code>GSUMCV</code>: Customer master unit of measure conversion (64 bytes, indexed, key length 12).</li> <li><code>PRCNTR</code>: Product container file (51 bytes, indexed, key length 9).</li> <li><code>GSCTUM</code>: Customer master unit of measure (64 bytes, indexed, key length 12).</li> <li><code>BBPRCE</code>: Rack price file (128 bytes, indexed, key length 27).</li> <li><code>BBBCPR</code>: Billed customer price file (128 bytes, indexed, key length 32).</li> <li><code>BICUAY</code>: Sales agreement file (256 bytes, indexed, key length 41, added in MG16).</li> <li><code>INLOC</code>: Inventory location file (512 bytes, indexed, key length 5).</li> <li><code>SA5FIZD</code>: Sales agreement history file (1024 bytes, indexed, key length 20).</li> <li><code>GSPROD</code>: Product file (512 bytes, indexed, key length 6, added in JK04, replacing <code>GSTABL</code>).</li> <li><code>GSCNTR6</code>: Container file (512 bytes, indexed, key length 3, added in JK02, replacing <code>GSTABL6</code>).</li> </ul> </li> <li> <p>Data definitions:</p> <ul> <li><code>COM</code>: Array of 8 error messages (40 characters each).</li> <li><code>RKPC</code>: Array for rack prices (9.4 format, 5 elements).</li> <li><code>RKQT</code>: Array for rack quantity levels (7.0 format, 5 elements, ascending).</li> <li><code>BPPC</code>: Array for billed customer prices (6.4 format, 5 elements).</li> </ul> </li> <li> <p>Validation of Container/Unit of Measure:</p> </li> <li> <p>Validates the product (<code>@PROD</code>), container (<code>@CONO</code>), and unit of measure (<code>@UNM</code>) combination:</p> <ul> <li>Chains to <code>GSCNTR6</code> (replacing <code>GSTABL6</code>, JK02) to verify container code.</li> <li>Chains to <code>GSCTUM</code> to retrieve the IMS unit of measure for <code>BBORTR</code> and <code>BBORDR</code> (VV04).</li> <li>If the unit of measure is not 'LBS', chains to <code>GSUMCV</code> to convert quantities to gallons (<code>ORGAL</code>) using conversion factor <code>UCCVFA</code> (multiplies if <code>UCOPER='M'</code>, divides otherwise).</li> <li>If the combination is invalid, sets error message \"INVALID PRD/CNT/UMS\" (COM,04) or \"INVALID PRD UM CNVRSN TO 'GAL'\" (COM,01).</li> </ul> </li> <li> <p>Rack Price Retrieval:</p> </li> <li>Chains to <code>BBPRCE</code> to retrieve rack prices for the product/container/unit of measure combination.</li> <li>If the ship-to is export-specific (<code>CSEXPO='Y'</code> in <code>SHIPTO</code>, DC01), uses location '999' for rack price retrieval (revised to remove special '999' logic in JB07).</li> <li>If no rack price is found and not required (JB10), continues processing; otherwise, sets error \"INVALID RACK PRICE\" (COM,02).</li> <li>For inactive rack prices (<code>INACTIVE='I'</code>), issues error \"RACK PRICE IS MARKED INACTIVE\" (COM,07) and prevents order acceptance (JB10).</li> <li> <p>For inactive but shippable rack prices (<code>INACTIVE='B'</code>), issues warning \"RACK PRICE IS MARKED INACTIVE\" (COM,07) and allows continuation after stock check with function key (JB10).</p> </li> <li> <p>Sales Agreement Pricing:</p> </li> <li>Chains to <code>BICUAY</code> (MG16) for ship-to specific pricing, falling back to 'ALL' ship-tos if no specific record exists.</li> <li>New key for <code>BICUAY</code> includes company, customer, location, container, bill-to PO#, and start date (JB09).</li> <li>Validates unit of measure against sales agreement (JB06).</li> <li>Allows zero end date for non-expired agreements (JB09).</li> <li>Uses billed PO# in pricing logic (JB09).</li> <li>Includes freight code in the key for pricing selection when start dates are the same (MG06).</li> <li>Checks sales agreement with order number in PO/order# field before PO# check (MG05).</li> <li> <p>Compares ordered quantity to minimum/maximum quantities in <code>BICUAY</code> (<code>BAMNQY</code>, <code>BAMXQY</code>, JK01); if below minimum, sets error \"QUANTITY BELOW MINIMUM-PRESS F6 TO ALLOW\" (COM,03).</p> </li> <li> <p>Billed Customer Price Retrieval:</p> </li> <li>Chains to <code>BBBCPR</code> to retrieve billed customer prices.</li> <li> <p>If no valid price is found, sets error \"INVALID BILLED CUSTOMER PRICE\" (COM,05) or \"INVALID - MUST HAVE A PRICE\" (COM,06, fixed in JB11).</p> </li> <li> <p>Distributor Purchase Validation:</p> </li> <li> <p>Checks if the distributor has purchased enough product to resell (<code>ORGAL</code> vs. <code>SATOTG</code>):</p> <ul> <li>Sets key for <code>SA5FIZD</code> using company (<code>@CONO</code>), customer (<code>DICU</code>), product (<code>@PROD</code>), and system date (<code>SYCYMD</code>).</li> <li>Reads <code>SA5FIZD</code> to accumulate total gallons purchased (<code>SATOTG</code>).</li> <li>If ordered gallons (<code>ORGAL</code>) exceed purchased gallons (<code>SATOTG</code>), sets error indicator (<code>@IND=4</code>); otherwise, sets <code>@IND=5</code>.</li> </ul> </li> <li> <p>Quantity Conversion:</p> </li> <li>Calls <code>MINLBGL1</code> (replacing <code>MINLBGL</code>, JB08) to calculate gallons or pounds directly, removing the need for a conversion factor (JB04).</li> <li> <p>If a <code>GSCTWT</code> record exists with gallons/container, uses it for conversion instead of requiring <code>GSUMCV</code> (JB22).</p> </li> <li> <p>Date Validation:</p> </li> <li> <p>Validates that the entered date is within one year of the last sold date (JK03):</p> <ul> <li>Chains to <code>PRCNTR</code> to check the last sold date.</li> <li>Converts Gregorian date (<code>$MDY</code>, <code>$CN</code>) to Julian format (<code>G$JD</code>) using subroutine <code>@DTE1</code>.</li> <li>If the date is more than one year since the last sold date, sets error \"MORE THAN 1 YEAR SINCE LAST SOLD\" (COM,08).</li> <li>Allows brand-new product/container combinations to bypass the one-year check if entered on the same day (MG04).</li> </ul> </li> <li> <p>Hazardous Material Code:</p> </li> <li> <p>Retrieves and passes back the hazardous material code (<code>HAZM</code>) to the calling program (JB17, JB18).</p> </li> <li> <p>Output and Termination:</p> <ul> <li>Sets indicator <code>LR</code> to end the program.</li> <li>Returns validation results, prices, and error indicators to the calling program (<code>BB101</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces numerous business rules to ensure valid order entry data:</p> <ol> <li>Container/Unit of Measure Validation:</li> <li>Product, container, and unit of measure combinations must exist in <code>GSCNTR6</code> and <code>GSCTUM</code> (errors 01, 04).</li> <li>Non-'LBS' units are converted to gallons using <code>GSUMCV</code> conversion factors (error 01 if invalid).</li> <li> <p><code>GSCTWT</code> records with gallons/container bypass <code>GSUMCV</code> requirements (JB22).</p> </li> <li> <p>Pricing Rules:</p> </li> <li>Rack prices are retrieved from <code>BBPRCE</code>, but not required for products with special sales agreements (JB10).</li> <li>Inactive rack prices (<code>INACTIVE='I'</code>) prevent order acceptance; <code>INACTIVE='B'</code> allows shipping until stock is depleted with a warning (COM,07, JB10).</li> <li>Sales agreement prices from <code>BICUAY</code> prioritize ship-to specific records over 'ALL' ship-tos (MG16) and must match the unit of measure (JB06).</li> <li>Sales agreements use company, customer, location, container, bill-to PO#, and start date, with zero end date allowed (JB09).</li> <li>Freight code is included in <code>BICUAY</code> key for same start dates (MG06).</li> <li>Billed customer prices from <code>BBBCPR</code> are mandatory (errors 05, 06).</li> <li> <p>Sales agreements with order number in PO/order# field are checked first (MG05).</p> </li> <li> <p>Quantity Validation:</p> </li> <li>Ordered quantities must meet minimum/maximum thresholds in <code>BICUAY</code> (<code>BAMNQY</code>, <code>BAMXQY</code>, JK01, error 03).</li> <li> <p>Distributor buyback quantities (<code>ORGAL</code>) must not exceed previously purchased gallons (<code>SATOTG</code>, error indicator 4).</p> </li> <li> <p>Export Pricing:</p> </li> <li> <p>For export ship-tos (<code>CSEXPO='Y'</code> in <code>SHIPTO</code>, DC01), special pricing logic applies (special '999' location removed in JB07).</p> </li> <li> <p>Date Validation:</p> </li> <li>Order dates must be within one year of the last sold date in <code>PRCNTR</code> (JK03, error 08).</li> <li> <p>Brand-new product/container combinations entered on the same day bypass the one-year check (MG04).</p> </li> <li> <p>Customer-Owned Products:</p> </li> <li> <p>If customer-owned product flag is 'Y', uses a zero rack price (JB05).</p> </li> <li> <p>Inactive Records:</p> </li> <li>Inactive records in <code>GSCTUM</code>, <code>GSCTWT</code>, and <code>GSUMCV</code> are treated as deleted (JB16).</li> <li> <p>Certain units of measure ('KG', 'LI', 'ML', 'OZ') do not require <code>GSUMCV</code> records (JB13, JB15).</p> </li> <li> <p>Hazardous Material:</p> </li> <li>The hazardous material code (<code>HAZM</code>) is retrieved and returned to the calling program (JB17, JB18).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>GSCTWT: Contract weight table (64 bytes, indexed, key length 9).</li> <li>Used for gallons/container conversion (JB22).</li> <li>GSUMCV: Customer master unit of measure conversion (64 bytes, indexed, key length 12).</li> <li>Used for unit of measure conversions (not required for 'KG', 'LI', 'ML', 'OZ', JB13, JB15).</li> <li>PRCNTR: Product container file (51 bytes, indexed, key length 9).</li> <li>Used for last sold date validation (JK03, MG04).</li> <li>GSCTUM: Customer master unit of measure (64 bytes, indexed, key length 12).</li> <li>Retrieves IMS unit of measure for <code>BBORTR</code> and <code>BBORDR</code> (VV04).</li> <li>BBPRCE: Rack price file (128 bytes, indexed, key length 27).</li> <li>Retrieves rack prices.</li> <li>BBBCPR: Billed customer price file (128 bytes, indexed, key length 32).</li> <li>Retrieves billed customer prices.</li> <li>BICUAY: Sales agreement file (256 bytes, indexed, key length 41, MG16).</li> <li>Retrieves ship-to specific and 'ALL' sales agreement prices.</li> <li>INLOC: Inventory location file (512 bytes, indexed, key length 5).</li> <li>Validates location data.</li> <li>SA5FIZD: Sales agreement history file (1024 bytes, indexed, key length 20).</li> <li>Accumulates purchased gallons for distributor validation.</li> <li>GSPROD: Product file (512 bytes, indexed, key length 6, JK04).<ul> <li>Replaces <code>GSTABL</code> for product code validation.</li> </ul> </li> <li>GSCNTR6: Container file (512 bytes, indexed, key length 3, JK02).<ul> <li>Replaces <code>GSTABL6</code> for container code validation.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program:</p> <ol> <li>MINLBGL1 (JB08):</li> <li>Called to calculate gallons or pounds directly, replacing <code>MINLBGL</code> (JB04).</li> <li>Used for weight-to-volume conversions, improving accuracy over the previous factor-based approach.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1011%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB1011</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, is a critical component of the <code>BB101</code> order entry system. It validates container/unit of measure combinations, retrieves rack and billed customer prices, checks distributor purchase quantities, and performs conversions. Key processes include validating data against multiple files, retrieving pricing from <code>BBPRCE</code>, <code>BBBCPR</code>, and <code>BICUAY</code>, converting quantities using <code>MINLBGL1</code>, and validating dates and purchase quantities. Business rules enforce valid pricing, quantity thresholds, export-specific logic, and date restrictions, with accommodations for customer-owned products and inactive records. The program interacts with 11 files and calls <code>MINLBGL1</code> for conversions, ensuring robust order entry validation and pricing.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/","title":"BB1014 RPGLE","text":"<p>The <code>BB1014.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is a shared component of the <code>BB101</code>, <code>BB495</code>, and <code>BB500</code> programs, designed to retrieve location information from the <code>INLOC</code> file based on company and location codes. The program was last noted with a reminder to synchronize changes across all three programs (TLN-GSS, 12/06/99). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB1014</code> program retrieves and formats location data (name, phone number, and inventory type) from the <code>INLOC</code> file and returns it to the calling program via a parameter data structure. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program defines the <code>INLOC</code> file as input-only (512 bytes, indexed, key length 5, starting at position 2).</li> <li>A parameter data structure <code>PARMS4</code> is defined to receive and return data:<ul> <li><code>@4CONO</code> (positions 1-2, 2 digits): Company number.</li> <li><code>@4LOC</code> (positions 3-5, 3 characters): Location code.</li> <li><code>@4LINT</code> (position 6, 1 character): Inventory type (e.g., '', 'D', 'P').</li> <li><code>@4LOCN</code> (positions 7-26, 20 characters): Location name.</li> <li><code>@4LOCP</code> (positions 27-40, 14 characters): Location phone number.</li> </ul> </li> <li>A secondary data structure <code>PHONE</code> formats the phone number:<ul> <li><code>PARL</code> (position 1, '('): Left parenthesis.</li> <li><code>ILAREA</code> (positions 2-4, 3 digits): Area code.</li> <li><code>PARR</code> (positions 5-6, ') '): Right parenthesis and space.</li> <li><code>ILTEL3</code> (positions 7-9, 3 digits): Phone number prefix.</li> <li><code>DASH</code> (position 10, '-'): Hyphen.</li> <li><code>ILTEL4</code> (positions 11-14, 4 digits): Phone number suffix.</li> </ul> </li> <li> <p>Input specifications for <code>INLOC</code>:</p> <ul> <li><code>ILDEL</code> (position 1, 1 character): Delete code ('D' for deleted).</li> <li><code>ILCONO</code> (positions 2-3, 2 digits): Company number.</li> <li><code>ILLOC</code> (positions 4-6, 3 characters): Location code.</li> <li><code>ILNAME</code> (positions 7-26, 20 characters): Location name.</li> <li><code>ILTELE</code> (positions 363-372, 10 digits): Telephone number.</li> <li><code>ILAREA</code> (positions 363-365, 3 digits): Area code.</li> <li><code>ILTEL3</code> (positions 366-368, 3 digits): Phone number prefix.</li> <li><code>ILTEL4</code> (positions 369-372, 4 digits): Phone number suffix.</li> <li><code>ILINTY</code> (position 458, 1 character): Inventory type.</li> </ul> </li> <li> <p>Parameter Input and Key Construction:</p> </li> <li>Receives input parameters via <code>PARMS4</code> (<code>@4CONO</code>, <code>@4LOC</code>) through the <code>*ENTRY PLIST</code> (line 0033).</li> <li> <p>Constructs a 5-character key (<code>LOCKEY</code>) by combining <code>@4CONO</code> (company number) and <code>@4LOC</code> (location code, lines 0039-0040).</p> </li> <li> <p>Retrieve Location Information:</p> </li> <li>Chains to the <code>INLOC</code> file using <code>LOCKEY</code> (company/location, line 0045).</li> <li>If no record is found (indicator 91):<ul> <li>Clears <code>@4LOCN</code> (location name), <code>@4LOCP</code> (phone number), and <code>@4LINT</code> (inventory type) to blanks (lines 0012, 0072, JB).</li> </ul> </li> <li> <p>If a record is found (<code>N91</code>):</p> <ul> <li>Moves <code>ILNAME</code> to <code>@4LOCN</code> (location name, line 0012).</li> <li>Checks if <code>ILTELE</code> (telephone number) is zero:</li> <li>If zero, clears <code>@4LOCP</code> to blanks.</li> <li>If non-zero, moves the formatted <code>PHONE</code> structure to <code>@4LOCP</code> (line JB).</li> <li>Moves <code>ILINTY</code> to <code>@4LINT</code> (inventory type, line JB).</li> </ul> </li> <li> <p>Phone Number Formatting:</p> </li> <li>Initializes the <code>PHONE</code> structure with formatting characters:<ul> <li><code>PARL = '('</code> (line 0034).</li> <li><code>PARR = ') '</code> (line 0034).</li> <li><code>DASH = '-'</code> (line 0034).</li> </ul> </li> <li> <p>Populates <code>ILAREA</code>, <code>ILTEL3</code>, and <code>ILTEL4</code> from <code>INLOC</code> when a record is found, creating a formatted phone number (e.g., <code>(123) 456-7890</code>).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>, line 0061) to exit the program.</li> <li>Returns the updated <code>PARMS4</code> data structure (<code>@4LOCN</code>, <code>@4LOCP</code>, <code>@4LINT</code>) to the calling program.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Location Record Existence:</li> <li>The program requires a valid company (<code>@4CONO</code>) and location (<code>@4LOC</code>) combination to exist in the <code>INLOC</code> file.</li> <li> <p>If no record is found (indicator 91), the output fields (<code>@4LOCN</code>, <code>@4LOCP</code>, <code>@4LINT</code>) are cleared to blanks.</p> </li> <li> <p>Data Retrieval:</p> </li> <li>Retrieves the location name (<code>ILNAME</code>), inventory type (<code>ILINTY</code>), and telephone number (<code>ILTELE</code>) from <code>INLOC</code> for valid records.</li> <li> <p>Formats the telephone number into a standard format (<code>(area) prefix-suffix</code>) if non-zero; otherwise, returns blanks.</p> </li> <li> <p>Consistency Across Programs:</p> </li> <li> <p>Changes to <code>BB1014</code> must be synchronized with <code>BB495</code> and <code>BB500</code> to ensure consistent location data retrieval across all three programs (TLN-GSS, 12/06/99).</p> </li> <li> <p>No Validation of Delete Code:</p> </li> <li> <p>The program does not explicitly check the <code>ILDEL</code> field (delete code) in <code>INLOC</code>, assuming the calling program handles validation of active records.</p> </li> <li> <p>No Error Messaging:</p> </li> <li>The program does not generate or display error messages, relying on the calling program (<code>BB101</code>, <code>BB495</code>, or <code>BB500</code>) to handle invalid or missing data.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following file:</p> <ol> <li>INLOC: Input-only file for inventory location data (512 bytes, indexed, key length 5, starting at position 2).</li> <li>Fields:<ul> <li><code>ILDEL</code> (position 1, 1 character): Delete code.</li> <li><code>ILCONO</code> (positions 2-3, 2 digits): Company number.</li> <li><code>ILLOC</code> (positions 4-6, 3 characters): Location code.</li> <li><code>ILNAME</code> (positions 7-26, 20 characters): Location name.</li> <li><code>ILTELE</code> (positions 363-372, 10 digits): Telephone number (subfields: <code>ILAREA</code>, <code>ILTEL3</code>, <code>ILTEL4</code>).</li> <li><code>ILINTY</code> (position 458, 1 character): Inventory type (e.g., '', 'D', 'P').</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB1014</code> RPGLE program does not call any external programs. All processing is handled internally through file operations and data formatting.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1014%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB1014</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, retrieves location information (name, phone number, and inventory type) from the <code>INLOC</code> file for use in <code>BB101</code>, <code>BB495</code>, and <code>BB500</code>. It chains to <code>INLOC</code> using a company/location key, formats the phone number, and returns data via a parameter data structure. Business rules ensure valid records are retrieved and formatted, with changes requiring synchronization across related programs. The program interacts solely with the <code>INLOC</code> file and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/","title":"BB1015 RPGLE","text":"<p>The <code>BB1015.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is a component of the <code>BB101</code> order entry program, designed to retrieve and process remarks (accessorials and marks) from the <code>SHIPTO</code> and <code>BBSHSA1</code> files and update the <code>BBOTA1</code> file with order-specific accessorials/marks. The program includes revisions to enhance functionality, such as adding dispatch marks (JB02) and replacing the <code>BBSHSP</code> table with <code>SHIPTO</code> (DC01). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB1015</code> program retrieves remarks from the <code>SHIPTO</code> file and accessorials/marks from the <code>BBSHSA1</code> file, then builds or updates corresponding records in the <code>BBOTA1</code> file for an order. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program defines three files:<ul> <li><code>SHIPTO</code>: Input-only file (2048 bytes, indexed, key length 11, starting at position 2) for ship-to data, replacing <code>BBSHSP</code> (DC01).</li> <li><code>BBSHSA1</code>: Input-only file (512 bytes, indexed, key length 16, starting at position 1) for ship-to accessorials/marks (JB01).</li> <li><code>BBOTA1</code>: Update-capable file (512 bytes, indexed, key length 13, starting at position 1) for order transaction accessorials/marks (JB01).</li> </ul> </li> <li>A data structure <code>MARKS</code> is defined to handle input and output parameters:<ul> <li><code>MKSKEY</code> (positions 2-12, 11 digits): Key combining company, customer, and ship-to.</li> <li><code>MKCONO</code> (positions 2-3, 2 digits): Company number.</li> <li><code>MKCUST</code> (positions 4-9, 6 digits): Customer number.</li> <li><code>MKSHIP</code> (positions 10-12, 3 digits): Ship-to number.</li> <li><code>MKOMK1</code> to <code>MKOMK4</code> (60 characters each): Order marks 1-4.</li> <li><code>MKIMK1</code> to <code>MKIMK2</code> (60 characters each): Invoice marks 1-2.</li> <li><code>MKDSP1</code> to <code>MKDSP4</code> (60 characters each): Dispatch information 1-4 (MKDSP3, MKDSP4 added later).</li> <li><code>MKBMK1</code> to <code>MKBMK4</code> (60 characters each): Bill of lading marks 1-4.</li> <li><code>MKFRNM</code> (30 characters): Freight bill name.</li> <li><code>MKFRA1</code> to <code>MKFRA3</code> (30 characters each): Freight bill address lines 1-3.</li> <li><code>MKORDN</code> (positions 973-978, 6 digits): Order number.</li> </ul> </li> <li> <p>Input specifications for <code>SHIPTO</code> (DC01):</p> <ul> <li><code>CSDEL</code> (position 1): Delete code.</li> <li><code>CSCONO</code> (positions 2-3): Company number.</li> <li><code>CSCUST</code> (positions 4-9): Customer number.</li> <li><code>CSSHIP</code> (positions 10-12): Ship-to number.</li> <li><code>CSOMK1</code> to <code>CSOMK4</code>, <code>CSIMK1</code> to <code>CSIMK2</code>, <code>CSDSP1</code> to <code>CSDSP4</code>, <code>CSBMK1</code> to <code>CSBMK4</code>, <code>CSFRNM</code>, <code>CSFRA1</code> to <code>CSFRA3</code>: Corresponding remarks fields.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Receives the <code>MARKS</code> data structure via <code>*ENTRY PLIST</code>, containing company (<code>MKCONO</code>), customer (<code>MKCUST</code>), ship-to (<code>MKSHIP</code>), and order number (<code>MKORDN</code>).</p> </li> <li> <p>Retrieve Ship-to Remarks:</p> </li> <li>Chains to the <code>SHIPTO</code> file using <code>MKSKEY</code> (company/customer/ship-to, line DC01).</li> <li>If a record is found (<code>N99</code>):<ul> <li>Checks if the record is not deleted (<code>CSDEL \u2260 'D'</code>).</li> <li>If not deleted, moves remark fields (<code>CSOMK1</code> to <code>CSOMK4</code>, <code>CSIMK1</code> to <code>CSIMK2</code>, <code>CSDSP1</code> to <code>CSDSP4</code>, <code>CSBMK1</code> to <code>CSBMK4</code>, <code>CSFRNM</code>, <code>CSFRA1</code> to <code>CSFRA3</code>) to corresponding <code>MARKS</code> fields (<code>MKOMK1</code> to <code>MKFRA3</code>).</li> </ul> </li> <li> <p>If no record is found or the record is deleted, skips to the <code>OUT</code> tag and proceeds to the <code>SHSA</code> subroutine.</p> </li> <li> <p>SHSA Subroutine (Get Ship-to Accessorials/Marks, JB01):</p> </li> <li>Check for Existing Order Accessorials:<ul> <li>Constructs an 8-character key <code>COORD</code> (company/order, <code>MKCONO</code> + <code>MKORDN</code>).</li> <li>Builds a 13-character key <code>XXK13</code> by appending '00000' to <code>COORD</code>.</li> <li>Sets the file pointer to <code>BBOTA1</code> using <code>XXK13</code> (<code>SETLL</code>).</li> <li>Reads <code>BBOTA1</code> to check for existing accessorials/marks (indicator 74).</li> <li>If a record is found with matching <code>BACOOR</code> (company/order, <code>N74</code>), skips further processing (<code>GOTO ENDA</code>).</li> </ul> </li> <li> <p>Build Accessorials/Marks:</p> <ul> <li>Constructs keys for <code>BBSHSA1</code>:</li> <li><code>SHKY8</code>: Company/customer (<code>MKCONO</code> + <code>MKCUST</code>).</li> <li><code>SHKY11</code>: Company/customer/ship-to (<code>SHKY8</code> + <code>MKSHIP</code>).</li> <li><code>SHKY16</code>: Full key with '00000' appended.</li> <li>Sets the file pointer to <code>BBSHSA1</code> using <code>SHKY16</code> (<code>SETLL</code>).</li> <li>Reads <code>BBSHSA1</code> records in a loop (<code>BLDAAG</code> tag, indicator 74).</li> <li>For each non-end-of-file record (<code>N74</code>):</li> <li>Verifies the record matches <code>SHKY11</code> (company/customer/ship-to, <code>COCUSH</code>).</li> <li>Constructs a 13-character key <code>AKEY</code> (company/order + <code>BARCID</code>).</li> <li>Chains to <code>BBOTA1</code> using <code>AKEY</code>:<ul> <li>If no record exists (<code>78</code>), writes a new record (<code>EXCPT BLDA</code>).</li> <li>If a record exists (<code>N78</code>), releases it (<code>EXCPT RELA</code>).</li> </ul> </li> <li>Continues reading <code>BBSHSA1</code> until no more matching records (<code>GOTO ENDA</code>).</li> </ul> </li> <li> <p>Output Operations:</p> </li> <li>BLDA (Add Record to BBOTA1, JB01):<ul> <li>Writes a new record to <code>BBOTA1</code> with:</li> <li><code>BADEL</code> (position 1): Delete code (not set, assumed blank).</li> <li><code>MKCONO</code> (positions 2-3): Company number.</li> <li><code>MKORDN</code> (positions 4-9): Order number.</li> <li>Positions 10-19: Blanks.</li> <li><code>BARCID</code> (positions 20-24): Accessorial ID.</li> <li><code>MKCONO</code> (positions 25-26): Company number (repeated).</li> <li><code>MKORDN</code> (positions 27-32): Order number (repeated).</li> <li><code>BARCTY</code> (positions 33-51): Accessorial type.</li> <li><code>BARCCD</code> (positions 52-57): Accessorial code.</li> <li><code>BADESC</code> (positions 58-107): Description.</li> <li><code>BAQTY</code> (position 108-110): Quantity.</li> <li><code>BAPICK</code> (position 111): Pick list flag.</li> <li><code>BABOL</code> (position 112): Bill of lading flag.</li> <li><code>BAINV</code> (position 113): Invoice flag.</li> <li><code>BAACCS</code> (position 114): Accessorial flag.</li> <li><code>BATCST</code> (positions 115-123): Cost.</li> <li><code>BADSPH</code> (position 124, JB02): Dispatch print flag.</li> </ul> </li> <li> <p>RELA (Release Record in BBOTA1, JB01):</p> <ul> <li>Releases an existing <code>BBOTA1</code> record (no fields specified, likely clears locks or updates status).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns the updated <code>MARKS</code> data structure to the calling program (<code>BB101</code>).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Ship-to Remarks Retrieval:</li> <li>Remarks are retrieved from <code>SHIPTO</code> only if the record exists and is not deleted (<code>CSDEL \u2260 'D'</code>).</li> <li> <p>Retrieved fields include order marks, invoice marks, dispatch information, bill of lading marks, and freight bill details, which are copied to the <code>MARKS</code> data structure.</p> </li> <li> <p>Accessorials/Marks Processing:</p> </li> <li>If the order already has accessorials/marks in <code>BBOTA1</code> for the company/order (<code>BACOOR</code>), no new records are added to avoid duplication (JB01).</li> <li>Accessorials/marks are retrieved from <code>BBSHSA1</code> for the company/customer/ship-to combination and added to <code>BBOTA1</code> if no existing records are found.</li> <li> <p>Each <code>BBSHSA1</code> record generates a new <code>BBOTA1</code> record with accessorial details (e.g., ID, type, code, description, quantity, flags).</p> </li> <li> <p>Data Integrity:</p> </li> <li>Only non-deleted <code>SHIPTO</code> records are processed.</li> <li><code>BBSHSA1</code> records must match the company/customer/ship-to key (<code>COCUSH</code>) to be included.</li> <li> <p>Existing <code>BBOTA1</code> records are released rather than overwritten if found (<code>RELA</code>).</p> </li> <li> <p>No Error Messaging:</p> </li> <li> <p>The program does not define or display error messages, relying on the calling program (<code>BB101</code>) to handle validation and errors.</p> </li> <li> <p>Dispatch Marks:</p> </li> <li>Includes a dispatch print flag (<code>BADSPH</code>) in <code>BBOTA1</code> records (JB02).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>SHIPTO: Input-only file for ship-to data (2048 bytes, indexed, key length 11, starting at position 2, replaced <code>BBSHSP</code> in DC01).</li> <li>Fields:<ul> <li><code>CSDEL</code> (position 1): Delete code.</li> <li><code>CSCONO</code> (positions 2-3): Company number.</li> <li><code>CSCUST</code> (positions 4-9): Customer number.</li> <li><code>CSSHIP</code> (positions 10-12): Ship-to number.</li> <li><code>CSOMK1</code> to <code>CSOMK4</code> (60 characters each): Order marks.</li> <li><code>CSIMK1</code> to <code>CSIMK2</code> (60 characters each): Invoice marks.</li> <li><code>CSDSP1</code> to <code>CSDSP4</code> (60 characters each): Dispatch information.</li> <li><code>CSBMK1</code> to <code>CSBMK4</code> (60 characters each): Bill of lading marks.</li> <li><code>CSFRNM</code> (30 characters): Freight bill name.</li> <li><code>CSFRA1</code> to <code>CSFRA3</code> (30 characters each): Freight bill address lines.</li> </ul> </li> <li>BBSHSA1: Input-only file for ship-to accessorials/marks (512 bytes, indexed, key length 16, JB01).</li> <li>Fields include:<ul> <li><code>COCUSH</code> (positions 1-11): Company/customer/ship-to key.</li> <li><code>BARCID</code> (5 characters): Accessorial ID.</li> <li><code>BARCTY</code> (19 characters): Accessorial type.</li> <li><code>BARCCD</code> (6 characters): Accessorial code.</li> <li><code>BADESC</code> (50 characters): Description.</li> <li><code>BAQTY</code> (3 digits): Quantity.</li> <li><code>BAPICK</code> (1 character): Pick list flag.</li> <li><code>BABOL</code> (1 character): Bill of lading flag.</li> <li><code>BAINV</code> (1 character): Invoice flag.</li> <li><code>BAACCS</code> (1 character): Accessorial flag.</li> <li><code>BATCST</code> (9 digits): Cost.</li> <li><code>BADSPH</code> (1 character, JB02): Dispatch print flag.</li> </ul> </li> <li>BBOTA1: Update-capable file for order transaction accessorials/marks (512 bytes, indexed, key length 13, JB01).</li> <li>Fields include:<ul> <li><code>BADEL</code> (position 1): Delete code.</li> <li><code>BACOOR</code> (positions 2-9): Company/order key.</li> <li><code>BARCID</code> (positions 20-24): Accessorial ID.</li> <li><code>BARCTY</code> (positions 33-51): Accessorial type.</li> <li><code>BARCCD</code> (positions 52-57): Accessorial code.</li> <li><code>BADESC</code> (positions 58-107): Description.</li> <li><code>BAQTY</code> (positions 108-110): Quantity.</li> <li><code>BAPICK</code> (position 111): Pick list flag.</li> <li><code>BABOL</code> (position 112): Bill of lading flag.</li> <li><code>BAINV</code> (position 113): Invoice flag.</li> <li><code>BAACCS</code> (position 114): Accessorial flag.</li> <li><code>BATCST</code> (positions 115-123): Cost.</li> <li><code>BADSPH</code> (position 124, JB02): Dispatch print flag.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB1015</code> RPGLE program does not call any external programs. All processing is handled internally through file operations and the <code>SHSA</code> subroutine.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1015%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB1015</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, retrieves remarks from the <code>SHIPTO</code> file and accessorials/marks from the <code>BBSHSA1</code> file, then builds or updates corresponding records in the <code>BBOTA1</code> file for order entry in <code>BB101</code>. It processes ship-to remarks (order, invoice, dispatch, and bill of lading) and adds accessorials/marks if none exist for the order. Business rules ensure non-deleted records are processed, duplicates are avoided, and dispatch print flags are included (JB02). The program interacts with <code>SHIPTO</code>, <code>BBSHSA1</code>, and <code>BBOTA1</code> files and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/","title":"BB1018 RPGLE","text":"<p>The <code>BB1018.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. Its purpose is to look up product cross-reference information in the <code>BBPRXR</code> file based on a company, long product code, and cross-reference set (<code>XSET</code>). The program was converted from RPG II to RPGLE (JB03) and includes revisions to handle duplicate cross-reference codes for different customers (MG02) and reset cross-reference data when the long product code changes (JB01). Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB1018</code> program retrieves product and container codes from the <code>BBPRXR</code> file using a key constructed from company, long product code, and cross-reference set. It returns these values along with a cross-reference code to the calling program. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program defines the <code>BBPRXR</code> file as input-only (60 bytes, indexed, key length 28, starting at position 1).</li> <li>A parameter data structure <code>PARMS8</code> is defined to receive and return data:<ul> <li><code>CO</code> (positions 1-2, 2 digits): Company number.</li> <li><code>LPROD</code> (positions 3-22, 20 characters): Long product code (product cross-reference).</li> <li><code>BXPROD</code> (positions 23-26, 4 characters): Product code.</li> <li><code>BXCNTR</code> (positions 27-29, 3 characters): Container code.</li> <li><code>CROSSX</code> (positions 30-49, 20 characters): Product cross-reference code.</li> <li><code>XSET</code> (positions 50-55, 6 characters): Cross-reference set (e.g., customer-specific set).</li> </ul> </li> <li>Input specifications for <code>BBPRXR</code>:<ul> <li><code>BXDEL</code> (position 1, 1 character): Delete code ('D' for deleted).</li> <li><code>BXCONO</code> (positions 2-3, 2 digits): Company number.</li> <li><code>BXPXRC</code> (positions 4-23, 20 characters): Product cross-reference code.</li> <li><code>BXPROD</code> (positions 24-27, 4 characters): Product code.</li> <li><code>BXXSET</code> (positions 28-33, 6 characters): Cross-reference set (added for duplicate codes, MG02).</li> <li><code>BXCNTR</code> (positions 34-36, 3 characters): Container code.</li> <li><code>BXQTTY</code> (position 37, 1 character): Quantity type.</li> </ul> </li> <li> <p>Work fields:</p> <ul> <li><code>HLD20</code> (20 characters): Temporary storage for <code>LPROD</code>.</li> <li><code>HLD26</code> (26 characters): Temporary storage for key components.</li> <li><code>XRFKEY</code> (28 characters): Key for chaining to <code>BBPRXR</code>.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Receives input parameters via <code>PARMS8</code> (<code>CO</code>, <code>LPROD</code>, <code>BXPROD</code>, <code>BXCNTR</code>, <code>CROSSX</code>, <code>XSET</code>) through the <code>*ENTRY PLIST</code> (line 0019).</p> </li> <li> <p>Key Construction:</p> </li> <li>Moves <code>XSET</code> to <code>HLD26</code> (line 0024).</li> <li>Moves <code>LPROD</code> to <code>HLD20</code> (line 0025).</li> <li> <p>Constructs the 28-character key <code>XRFKEY</code>:</p> <ul> <li>Positions 1-2: <code>CO</code> (company number, line 0026).</li> <li>Positions 3-22: <code>LPROD</code> (from <code>HLD20</code>, line 0026).</li> <li>Positions 23-28: <code>XSET</code> (from <code>HLD26</code>, line 0027).</li> </ul> </li> <li> <p>Retrieve Cross-Reference Record:</p> </li> <li>Chains to <code>BBPRXR</code> using <code>XRFKEY</code> (company/long product/set, line 0028).</li> <li>If a record is found (<code>N77</code>):<ul> <li>Checks if the record is deleted (<code>BXDEL = 'D'</code>):</li> <li>If deleted, clears <code>BXPROD</code> and <code>BXCNTR</code> to blanks (lines 0030-0031).</li> <li>If not deleted, moves <code>BXPXRC</code> to <code>CROSSX</code> (line 0032).</li> </ul> </li> <li> <p>If no record is found (<code>77</code>):</p> <ul> <li>Clears <code>BXPROD</code> and <code>BXCNTR</code> to blanks (line JB).</li> <li>If <code>CROSSX</code> is blank, moves <code>LPROD</code> to <code>CROSSX</code> (JB01, line JB); otherwise, clears <code>CROSSX</code> to blanks.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>, line 0036) to exit the program.</li> <li>Returns the updated <code>PARMS8</code> data structure (<code>BXPROD</code>, <code>BXCNTR</code>, <code>CROSSX</code>) to the calling program.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Cross-Reference Lookup:</li> <li>The program retrieves product (<code>BXPROD</code>) and container (<code>BXCNTR</code>) codes from <code>BBPRXR</code> using a 28-character key (company, long product code, cross-reference set).</li> <li> <p>The key includes <code>XSET</code> to allow duplicate cross-reference codes for different customers (MG02, 08/15/16).</p> </li> <li> <p>Deleted Records:</p> </li> <li> <p>If a <code>BBPRXR</code> record is marked as deleted (<code>BXDEL = 'D'</code>), the program returns blank <code>BXPROD</code> and <code>BXCNTR</code> values, indicating no valid cross-reference.</p> </li> <li> <p>Cross-Reference Reset:</p> </li> <li>If no record is found and <code>CROSSX</code> is blank, the program sets <code>CROSSX</code> to the input <code>LPROD</code> to reset the cross-reference (JB01, 10/15/09).</li> <li> <p>If <code>CROSSX</code> is not blank when no record is found, it is cleared to blanks.</p> </li> <li> <p>No Error Messaging:</p> </li> <li> <p>The program does not define or display error messages, relying on the calling program (e.g., <code>BB101</code>) to handle invalid or missing data.</p> </li> <li> <p>Key Expansion:</p> </li> <li>The key was expanded to 28 positions (from 22) to include <code>XSET</code>, enabling customer-specific duplicate cross-reference codes (MG02, 06/30/16).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following file:</p> <ol> <li>BBPRXR: Input-only file for product cross-reference data (60 bytes, indexed, key length 28, starting at position 1).</li> <li>Fields:<ul> <li><code>BXDEL</code> (position 1, 1 character): Delete code.</li> <li><code>BXCONO</code> (positions 2-3, 2 digits): Company number.</li> <li><code>BXPXRC</code> (positions 4-23, 20 characters): Product cross-reference code.</li> <li><code>BXPROD</code> (positions 24-27, 4 characters): Product code.</li> <li><code>BXXSET</code> (positions 28-33, 6 characters): Cross-reference set.</li> <li><code>BXCNTR</code> (positions 34-36, 3 characters): Container code.</li> <li><code>BXQTTY</code> (position 37, 1 character): Quantity type.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB1018</code> RPGLE program does not call any external programs. All processing is handled internally through file operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1018%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB1018</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, retrieves product and container codes from the <code>BBPRXR</code> file using a 28-character key (company, long product code, cross-reference set). It supports duplicate cross-reference codes for different customers (MG02) and resets the cross-reference code when the long product code changes (JB01). The program chains to <code>BBPRXR</code>, processes deleted or non-existent records, and returns updated product, container, and cross-reference data. Business rules ensure valid lookups, handle deleted records, and reset cross-references as needed. The program interacts solely with the <code>BBPRXR</code> file and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/","title":"BB1033 RPGLE","text":"<p>The <code>BB1033.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is part of the <code>BB101</code> order entry system, designed to validate and retrieve responsible area and major location information for product/container combinations, displaying results in a subfile for user interaction. Written by Jimmy Krajacic on 08/14/2019, it includes revisions to handle non-detail records (jb01) and ignore inactivated or 'I' status records in the product load files (jb02). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB1033</code> program validates product/container combinations against location data in the <code>prdlody</code>, <code>prdlodx</code>, <code>prdlodz</code>, <code>bbortr</code>, and <code>bbortrx</code> files, then displays valid shipping locations in a subfile on the <code>bb1033d</code> display file for user selection. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions:<ul> <li><code>prdlody</code>: Input-only file for product load data (keyed, user-opened).</li> <li><code>prdlodx</code>: Input-only file for product load data with renamed record format <code>prdlodrx</code> (keyed, user-opened).</li> <li><code>prdlodz</code>: Input-only file for product load data with renamed record format <code>prdlodrz</code> (keyed, user-opened).</li> <li><code>bbortr</code>: Input-only file for order transactions (512 bytes, indexed, key length 11, starting at position 2).</li> <li><code>bbortrx</code>: Input-only file for order transaction extensions (512 bytes, indexed, key length 11, starting at position 2).</li> <li><code>bb1033d</code>: Work station file (display file) with a subfile <code>sfl1</code> and control format <code>sflctl1</code>.</li> </ul> </li> <li>Data Structures and Fields:<ul> <li><code>time12</code>: Data structure for time conversion (not used in the provided code snippet).</li> <li><code>dspf_ds</code>: Display file data structure for feedback (record name, key, cursor location, page RRN).</li> <li><code>m@80</code>: Array for message data (80 elements, 1 character each).</li> <li><code>ovg</code> and <code>ovz</code>: Arrays for file override commands (14 elements, 80 characters each) for <code>prdlody</code>, <code>prdlodx</code>, <code>prdlodz</code> in libraries <code>gprdlody</code>, <code>gprdlodx</code>, <code>gprdlodz</code> (ovg) and <code>zprdlody</code>, <code>zprdlodx</code>, <code>zprdlodz</code> (ovz).</li> <li><code>com</code>: Array for error messages (6 elements, 40 characters each).</li> <li><code>RaOver</code>: Data structure with 10 responsible area fields (<code>ra01</code> to <code>ra10</code>, 5 characters each).</li> <li><code>Ra</code>: Array overlay for responsible areas (10 elements, 5 characters each).</li> <li>Prefixes: <code>f$</code> (panel fields), <code>c$</code> (subfile control), <code>s1</code> (subfile fields), <code>s2</code> (unused), <code>k$</code> (key lists), <code>p$</code> (input parameters), <code>o$</code> (output parameters), <code>r$</code> (reposition subfile), <code>w$</code> (work fields).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>19: Panel format input change.</li> <li>21-39, 50-69: Screen errors.</li> <li>40: Subfile clear.</li> <li>41: Subfile display control.</li> <li>42: Subfile display.</li> <li>43: Subfile end and next change.</li> <li>49: Message subfile display/control/initialize/end.</li> <li>70-79: Input field protect.</li> <li>80: Primary file chain.</li> <li>88: Read subfile.</li> <li>90-99: Secondary file chain/read.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Receives input parameters (assumed via <code>*ENTRY PLIST</code>, not shown in the snippet) including product, container, company, order number, and other order details (inferred from <code>p$msg1</code>, <code>p$msg2</code>, <code>p$msg3</code>).</p> </li> <li> <p>Subfile Initialization (<code>srinit</code> Subroutine):</p> </li> <li>Clears the subfile (<code>*in40</code>) and initializes the relative record number (<code>rrn1</code>).</li> <li>Opens product load files (<code>prdlody</code>, <code>prdlodx</code>, <code>prdlodz</code>).</li> <li>Chains to <code>bbortr</code> and <code>bbortrx</code> using the company/order key to retrieve order details (indicator 80, jb01).</li> <li>Reads product load files (<code>prdlody</code>, <code>prdlodx</code>, <code>prdlodz</code>) to find valid shipping locations, ignoring records with inactive status or 'I' status (jb02).</li> <li> <p>For each valid record:</p> <ul> <li>Validates responsible area and major location.</li> <li>Formats a subfile line (<code>sf1fmt</code> subroutine) with messages (<code>p$msg1</code>, <code>p$msg2</code>, <code>p$msg3</code>).</li> <li>Writes to the subfile (<code>sfl1</code>) and increments <code>rrn1</code>.</li> <li>Sets <code>*in43</code> (subfile end/next change).</li> </ul> </li> <li> <p>Subfile Processing (<code>srsfl1</code> Subroutine):</p> </li> <li>Writes an assume-overlay record (<code>wdwovr</code>).</li> <li> <p>Enters a loop (<code>sf1agn</code>) to process user interaction:</p> <ul> <li>If <code>rrn1 &gt; 0</code>, sets <code>*in41</code> (subfile display) to show the subfile; otherwise, clears it.</li> <li>Sets the subfile record number (<code>rcdnb1</code>) to <code>rrn1</code>.</li> <li>Writes the subfile control format (<code>sflwdw1</code>) and displays the subfile control (<code>sflctl1</code>) using <code>exfmt</code>.</li> <li>Checks for F12 key (return, exits loop).</li> <li>Continues until user exits (<code>sf1agn = *off</code>).</li> </ul> </li> <li> <p>Subfile Line Formatting (<code>sf1fmt</code> Subroutine):</p> </li> <li>Moves input messages (<code>p$msg1</code>, <code>p$msg2</code>, <code>p$msg3</code>) to subfile fields (<code>s1msg1</code>, <code>s1msg2</code>, <code>s1msg3</code>).</li> <li> <p>Sets <code>*in43</code> (subfile end/next change) to enable subfile updates.</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns selected responsible area and major location data (via <code>o$</code> output parameters, assumed).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Validation of Shipping Locations:</li> <li>Validates product/container combinations against <code>prdlody</code>, <code>prdlodx</code>, and <code>prdlodz</code> to identify valid responsible areas and major locations.</li> <li>Ignores records in product load files that are inactivated or have a status of 'I' (jb02).</li> <li>If the product/container cannot ship from the header location, checks alternate headers (error \"Prod/Cntr Can't Ship from Hdr\", COM,01; allows alternate header, COM,02).</li> <li>If the product/container cannot ship from the major location, checks alternate major locations (error \"Prod/Cntr Can't Ship From Maj\", COM,04; allows alternate major, COM,05).</li> <li> <p>If no valid record is found, displays error \"Prod/Cntr not in Prd Load File,F12 Accpt\" (COM,03) and allows user to accept with F12.</p> </li> <li> <p>Non-Detail Record Handling:</p> </li> <li> <p>Handles non-detail records in <code>bbortr</code> and <code>bbortrx</code> to ensure correct order data retrieval (jb01).</p> </li> <li> <p>Subfile Display:</p> </li> <li>Displays valid shipping locations in a subfile (<code>sfl1</code>) for user selection.</li> <li> <p>Supports user navigation with F12 to return or accept a non-valid location (COM,03).</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>Uses override arrays (<code>ovg</code>, <code>ovz</code>) to redirect <code>prdlody</code>, <code>prdlodx</code>, and <code>prdlodz</code> to libraries <code>gprdlody</code>, <code>gprdlodx</code>, <code>gprdlodz</code> (production) or <code>zprdlody</code>, <code>zprdlodx</code>, <code>zprdlodz</code> (alternate, possibly test environment).</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays errors via the <code>com</code> array in the subfile, allowing user interaction to resolve issues (e.g., F12 to accept missing product/container records).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>prdlody: Input-only product load file (keyed, user-opened).</li> <li>Contains product/container location data.</li> <li>prdlodx: Input-only product load file with renamed record format <code>prdlodrx</code> (keyed, user-opened).</li> <li>Alternate product load data.</li> <li>prdlodz: Input-only product load file with renamed record format <code>prdlodrz</code> (keyed, user-opened).</li> <li>Additional product load data.</li> <li>bbortr: Input-only order transaction file (512 bytes, indexed, key length 11, starting at position 2).</li> <li>Contains order details (e.g., company, order number).</li> <li>bbortrx: Input-only order transaction extension file (512 bytes, indexed, key length 11, starting at position 2).</li> <li>Contains additional order details (jb01).</li> <li>bb1033d: Work station file (display file) with subfile <code>sfl1</code> and control format <code>sflctl1</code>.</li> <li>Fields: <code>s1msg1</code>, <code>s1msg2</code>, <code>s1msg3</code> (subfile messages), <code>c$</code> fields (subfile control).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB1033</code> RPGLE program does not call any external programs. All processing is handled internally through file operations and subroutines (<code>srinit</code>, <code>sf1fmt</code>, <code>srsfl1</code>).</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB1033%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB1033</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, validates and retrieves responsible area and major location information for product/container combinations in the <code>BB101</code> order entry system. It reads <code>prdlody</code>, <code>prdlodx</code>, <code>prdlodz</code>, <code>bbortr</code>, and <code>bbortrx</code> to validate shipping locations, ignoring inactive or 'I' status records (jb02), and displays results in a subfile for user selection. Business rules ensure valid location checks, handle alternate headers/majors, and allow user overrides with F12. The program interacts with six files and does not call external programs, relying on internal subroutines for processing.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/","title":"BB104A RPGLE","text":"<p>The <code>BB104A.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is part of the Customer Order Entry system, designed to manage the cancellation or reactivation of open orders, tracking the reasons for these actions. Written by Dave Capo on 04/20/2014, it facilitates user interaction via a display file to enter or update cancellation/reactivation details. Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB104A</code> program processes open order cancellations or reactivations by validating input, updating the <code>bbcnor</code> file with tracking information, and displaying results via the <code>bb104ad</code> display file. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions:<ul> <li><code>bb104ad</code>: Work station file (display file) with subfile support, user-opened.</li> <li><code>arcust</code>: Input-only file for customer data (keyed, user-opened).</li> <li><code>bbordh</code>: Input-only file for order headers (keyed, user-opened).</li> <li><code>gstabl</code>: Input-only file for table data (keyed, user-opened).</li> <li><code>bbcnor</code>: Update-capable file for order cancellation/reactivation tracking (keyed, user-opened).</li> </ul> </li> <li>Data Structures and Fields:<ul> <li><code>m@80</code>: Array for message data (80 elements, 1 character each).</li> <li><code>ovg</code>, <code>ovz</code>: Arrays for file overrides (4 elements, 80 characters each) for <code>arcust</code>, <code>bbordh</code>, <code>gstabl</code>, and <code>bbcnor</code> in libraries <code>garcust</code>, <code>gbbordh</code>, <code>ggstabl</code>, <code>gbbcnor</code> (ovg) or <code>zarcust</code>, <code>zbbordh</code>, <code>zgstabl</code>, <code>zbbcnor</code> (ovz).</li> <li><code>hdr</code>: Array for format headers (2 elements, 80 characters each: \"Open Order Cancelation - Enter Reason\", \"Open Order Cancelation - Update Reason\").</li> <li><code>t#time</code>: Data structure for time conversion (e.g., <code>t#hms</code>, <code>t#mdcy</code>).</li> <li><code>d#cymd</code>: Data structure for date conversion (e.g., <code>d#cym</code>, 8 digits).</li> <li>Field prefixes: <code>f$</code> (panel fields), <code>c$</code> (subfile control), <code>s1</code>/<code>s2</code> (subfile fields, unused), <code>k$</code> (key lists), <code>p$</code> (input parameters), <code>o$</code> (output parameters), <code>r$</code> (reposition subfile), <code>w$</code> (work fields).</li> <li>Work fields: <code>w$wk54</code> (5.4), <code>w$wk92</code> (9.2), <code>fmtagn</code>, <code>winagn</code>, <code>delagn</code> (1 character flags).</li> <li>Message fields: <code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>.</li> </ul> </li> <li>Key Lists:<ul> <li><code>klcnor</code>: For <code>bbcnor</code> (company <code>f$co</code>, order number <code>f$ordn</code>).</li> <li><code>klcust</code>: For <code>arcust</code> (company <code>f$co</code>, customer <code>bocust</code>).</li> <li><code>klcnrs</code>: For <code>gstabl</code> (type <code>k$bborcn='BBORCN'</code>, code <code>k$cnrs</code>).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>19: Panel format input change.</li> <li>21-39, 50-69: Screen errors.</li> <li>40: Subfile clear.</li> <li>41: Subfile display control.</li> <li>42: Subfile display.</li> <li>43: Subfile end and next change.</li> <li>49: Message subfile display/control/initialize/end.</li> <li>70: Global protect in inquiry mode.</li> <li>80: Primary file chain.</li> <li>88: Read subfile.</li> <li>90-99: Secondary file chain/read.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li>Receives input parameters via <code>*ENTRY PLIST</code> (assumed, not shown) including:<ul> <li><code>a$co</code> (2 characters): Company number.</li> <li><code>a$ordn</code> (order number, length not specified).</li> </ul> </li> <li> <p>Moves input parameters to display file fields (<code>f$co</code>, <code>f$ordn</code>).</p> </li> <li> <p>Initialization (<code>srbeg</code> Subroutine):</p> </li> <li>Opens files (<code>arcust</code>, <code>bbordh</code>, <code>gstabl</code>, <code>bbcnor</code>).</li> <li>Initializes output parameters (<code>o$co</code>, <code>o$fgrp</code>, <code>o$mode</code>, <code>o$flag</code>) to blanks.</li> <li>Clears subfile (<code>*in40</code>) and message fields (<code>dspmsg</code>, <code>m@pgmq</code>).</li> <li> <p>Defines work fields (<code>w$wk54</code>, <code>w$wk92</code>) and flags (<code>fmtagn</code>, <code>delagn</code>).</p> </li> <li> <p>Order Validation and Data Retrieval:</p> </li> <li>Chains to <code>bbordh</code> using <code>klcnor</code> (company <code>f$co</code>, order number <code>f$ordn</code>) to retrieve order header details (indicator 80).</li> <li>Chains to <code>arcust</code> using <code>klcust</code> (company <code>f$co</code>, customer <code>bocust</code>) to validate customer data.</li> <li> <p>Chains to <code>gstabl</code> using <code>klcnrs</code> (type <code>BBORCN</code>, code <code>k$cnrs</code>) to retrieve cancellation/reactivation reason codes.</p> </li> <li> <p>Display and User Interaction:</p> </li> <li>Displays the <code>bb104ad</code> panel with format headers (\"Enter Reason\" or \"Update Reason\").</li> <li>Allows user to enter or update cancellation/reactivation details (e.g., reason code, date).</li> <li>In inquiry mode, protects input fields (<code>*in70</code>).</li> <li> <p>Validates user input, including date fields using the <code>dtp010r</code> program (via <code>pld010</code> PLIST).</p> </li> <li> <p>Update Cancellation/Reactivation Records:</p> </li> <li>Chains to <code>bbcnor</code> using <code>klcnor</code> to check for existing records.</li> <li>If no record exists, adds a new record to <code>bbcnor</code> with cancellation/reactivation details (e.g., company, order number, reason, date).</li> <li>If a record exists, updates it with new details.</li> <li> <p>Writes changes to <code>bbcnor</code> (update or add operation).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns output parameters (<code>o$co</code>, <code>o$fgrp</code>, <code>o$mode</code>, <code>o$flag</code>) to the calling program.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Order Cancellation/Reactivation Tracking:</li> <li>Tracks cancellations or reactivations of open orders by storing details in <code>bbcnor</code>.</li> <li>Requires a valid company (<code>f$co</code>) and order number (<code>f$ordn</code>) to process.</li> <li> <p>Validates customer data against <code>arcust</code> and reason codes against <code>gstabl</code> (type <code>BBORCN</code>).</p> </li> <li> <p>Date Validation:</p> </li> <li>Uses the <code>dtp010r</code> program to validate date fields (<code>p#mdy</code> to <code>p#cymd</code>, with error flag <code>p#err</code>).</li> <li> <p>Ensures entered dates are valid before updating <code>bbcnor</code>.</p> </li> <li> <p>File Overrides:</p> </li> <li>Uses override arrays (<code>ovg</code>, <code>ovz</code>) to redirect files to production (<code>g*</code>) or alternate (<code>z*</code>) libraries (e.g., test environments).</li> <li> <p>Ensures correct file access based on the environment.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li> <p>Protects input fields (<code>*in70</code>) in inquiry mode, allowing only review of existing data.</p> </li> <li> <p>Error Handling:</p> </li> <li>No error messages are defined in the provided snippet, but the program relies on the display file (<code>bb104ad</code>) and <code>dtp010r</code> to handle validation errors.</li> <li>Uses indicators (21-39, 50-69) for screen errors.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>bb104ad: Work station file (display file) with subfile support.</li> <li>Fields: <code>f$co</code> (company), <code>f$ordn</code> (order number).</li> <li>arcust: Input-only customer file (keyed, user-opened).</li> <li>Fields: <code>bocust</code> (customer number).</li> <li>bbordh: Input-only order header file (keyed, user-opened).</li> <li>Contains order header details (e.g., company, order number).</li> <li>gstabl: Input-only table file (keyed, user-opened).</li> <li>Fields: <code>tbtype</code> (<code>BBORCN</code> for cancellation/reactivation reasons), <code>tbcode</code> (reason codes).</li> <li>bbcnor: Update-capable file for cancellation/reactivation tracking (keyed, user-opened).</li> <li>Fields: Company, order number, reason code, date, etc.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program:</p> <ol> <li>dtp010r:</li> <li>Called via the <code>pld010</code> PLIST to validate date fields.</li> <li>Parameters:<ul> <li><code>p#mdy</code> (6 digits): Input date in MMDDYY format.</li> <li><code>p#cymd</code> (8 characters): Output date in CCYYMMDD format.</li> <li><code>p#err</code> (1 character): Error flag.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB104A%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB104A</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, manages the cancellation or reactivation of open orders in the Customer Order Entry system. It validates order and customer data, allows users to enter or update cancellation/reactivation reasons via the <code>bb104ad</code> display file, and updates the <code>bbcnor</code> file. Business rules ensure valid data, proper date validation, and inquiry mode protection. The program interacts with five files (<code>bb104ad</code>, <code>arcust</code>, <code>bbordh</code>, <code>gstabl</code>, <code>bbcnor</code>) and calls <code>dtp010r</code> for date validation, providing robust tracking of order status changes.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/","title":"BB106 RPGLE","text":"<p>The <code>BB106.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It calculates freight charges for orders or invoices, updating relevant files with the results, and is also called by <code>BB495</code> (Bill of Lading entry) and <code>BB500</code> (Invoice entry). The program was converted from RPG II to RPGLE on 11/11/19 and includes multiple revisions to enhance freight calculation logic, handle multi-load orders and invoices, and support specific freight table selections. Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB106</code> program calculates freight charges based on whether it is processing an order (<code>FROEI='O'</code>) or an invoice (<code>FROEI='I'</code>), with additional modes for calculating freight for a single table (<code>CALC</code>) or returning the top five carrier choices (<code>TOP5</code>). The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined with <code>fixnbr(*zoned:*inputpacked)</code> to handle numeric conversions (T4A).</li> <li>Files defined include:<ul> <li><code>bbortr</code>: Update-capable file for order transactions (512 bytes, indexed, key length 11).</li> <li><code>bbtranin</code>: Update-capable file for invoice transactions (512 bytes, indexed, key length 20).</li> <li><code>frof</code>: Input-only file for freight table data.</li> <li><code>frofh</code>: Input-only file for freight table history.</li> <li><code>frofc</code>: Update-capable file for freight charge records (JB11).</li> <li><code>frofcl1</code>: Input-only file for freight class data (indicator changed to 96, JB10).</li> </ul> </li> <li>Parameters received via <code>*ENTRY PLIST</code> (assumed, not shown in snippet):<ul> <li><code>FROEI</code> (1 character): 'O' for order entry, 'I' for invoice entry.</li> <li><code>FRTBL</code> (assumed): Freight table selection for <code>CALC</code> mode.</li> <li><code>CALC/TOP5</code> (JB01): Mode to calculate freight for one table (<code>CALC</code>) or return top five carriers (<code>TOP5</code>).</li> </ul> </li> <li> <p>Data structures and arrays:</p> <ul> <li><code>mxc</code>: Array for miscellaneous charges (10 elements).</li> <li>Fields for company (<code>fco</code>, <code>mcoon</code>), order (<code>fordr</code>), customer (<code>fcust</code>), ship-to (<code>fship</code>), quantity (<code>mqty</code>), description (<code>mdes</code>), amount (<code>mamt</code>), general ledger number (<code>mgl#</code>), status (<code>msty</code>), railcar (<code>frcar</code>), etc.</li> </ul> </li> <li> <p>Freight Calculation Mode Determination:</p> </li> <li>If <code>FROEI='O'</code>, reads order transaction records from <code>bbortr</code> to calculate freight charges.</li> <li>If <code>FROEI='I'</code>, reads invoice transaction records from <code>bbtranin</code> (using railcar in the key) and allows override freight rates.</li> <li>If mode is <code>CALC</code> (JB01), calculates freight for a single selected freight table and updates order/invoice records.</li> <li> <p>If mode is <code>TOP5</code> (JB01), calculates freight for the first five freight tables with a tender sequence (JB03) and returns carrier and freight total data without updating records.</p> </li> <li> <p>Freight Calculation:</p> </li> <li>Calls the <code>MBBFRT</code> program to perform the actual freight calculation for each load.</li> <li>For multi-load orders (<code>FROEI='O'</code>, JB07):<ul> <li>Corrects quantity fields to calculate freight for one load, then converts to total quantities for all loads.</li> </ul> </li> <li>For multi-load invoices (<code>FROEI='I'</code>, JB08, JB09):<ul> <li>Counts detail lines and, if freight is flat rate, multiplies the freight amount by the count.</li> </ul> </li> <li>Skips freight calculation for detail lines with override freight rates (JB04).</li> <li> <p>Does not update freight records if no freight table is found (JB06).</p> </li> <li> <p>Freight Record Updates:</p> </li> <li>Updates <code>bbortr</code> (orders) or <code>bbtranin</code> (invoices) with calculated freight charges.</li> <li>Adds or updates records in <code>frofc</code> for freight charges (JB11).</li> <li>Writes the percentage of freight total to the percentage of total field (JB12).</li> <li> <p>For collect (<code>CYY</code>) service charges:</p> <ul> <li>Orders: Deletes miscellaneous line for collect service charge (<code>cyyscod</code>, <code>edel</code> with <code>N67</code>).</li> <li>Invoices: Adds (<code>eadd</code>, <code>cyysci</code>), updates (<code>e</code>, <code>cyysci</code>), or deletes (<code>edel</code>, <code>cyyscid</code>) miscellaneous line for collect service charge, including fields like company, order, customer, ship-to, quantity, description, amount, and flags.</li> </ul> </li> <li> <p>Output Operations:</p> </li> <li>Order Transaction (<code>bbortr</code>, <code>cyyscod</code>):<ul> <li>Deletes miscellaneous line for collect service charge if not applicable (<code>N67</code>).</li> </ul> </li> <li>Invoice Transaction (<code>bbtranin</code>, <code>cyysci</code>):<ul> <li>Adds a new record with collect service charge details (e.g., <code>fco</code>, <code>fordr</code>, <code>fcust</code>, <code>fship</code>, <code>mqty</code>, <code>mdes</code>, <code>mamt</code>, <code>mgl#</code>, <code>msty</code>, <code>mxc</code>, <code>motx</code>, <code>mcoon</code>, <code>frcar</code>, fixed code '943').</li> <li>Updates existing record with updated fields if applicable (<code>N67</code>).</li> <li>Deletes record if no longer needed (<code>N67</code>, <code>cyyscid</code>).</li> </ul> </li> <li> <p>Freight Charge File (<code>frofc</code>):</p> <ul> <li>Adds or updates freight charge records (JB11).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns freight totals and carrier data (for <code>TOP5</code> mode) or updated order/invoice records to the calling program.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Freight Calculation Modes:</li> <li>For <code>FROEI='O'</code>, processes order transactions (<code>bbortr</code>) and calculates freight for orders (called by <code>BB101</code>).</li> <li>For <code>FROEI='I'</code>, processes invoice transactions (<code>bbtranin</code>) with railcar in the key and allows override freight rates (called by <code>BB495</code>, <code>BB500</code>).</li> <li>For <code>CALC</code> mode (JB01), calculates freight for a single freight table and updates records.</li> <li> <p>For <code>TOP5</code> mode (JB01), calculates freight for up to five freight tables with tender sequences (JB03) and returns carrier/freight data without updates.</p> </li> <li> <p>Multi-Load Handling:</p> </li> <li>For orders, calculates freight for one load, then converts quantities to total for all loads (JB07).</li> <li> <p>For invoices, multiplies flat-rate freight by the count of detail lines (JB08, JB09).</p> </li> <li> <p>Override Freight Rates:</p> </li> <li> <p>Skips freight calculation for detail lines with override freight rates (JB04).</p> </li> <li> <p>Freight Table Validation:</p> </li> <li>Does not update freight records if no freight table is found in <code>frof</code> or <code>frofh</code> (JB06).</li> <li> <p>Corrects duplicate records in <code>frofh</code> (JB01).</p> </li> <li> <p>Collect Service Charges:</p> </li> <li>Adds, updates, or deletes miscellaneous lines for collect (<code>CYY</code>) service charges in <code>bbortr</code> (orders) or <code>bbtranin</code> (invoices).</li> <li> <p>Uses fixed code '943' for invoice service charge records.</p> </li> <li> <p>Customer Price Fields (JB13):</p> </li> <li> <p>Defines pricing for freight scenarios:</p> <ul> <li>Freight Collect: Customer price = 1.00, product price = 1.00, freight price = 0.00.</li> <li>Freight PPD&amp;ADD: Customer price = 1.00, product price = 1.00, freight price = 0.25 (freight is separate).</li> <li>Freight Prepaid with Rack Price: Customer price = 1.00, product price = 1.00, freight price = 0.25 (rack price excludes freight).</li> <li>Freight Prepaid with Sales Agreement: Customer price = 1.00, freight price varies.</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>No error messages are defined in the provided snippet (COM,01-04 are placeholders), but the program relies on the calling program to handle errors.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>bbortr: Update-capable file for order transactions (512 bytes, indexed, key length 11).</li> <li>Fields: <code>fco</code> (company), <code>fordr</code> (order), <code>fcust</code> (customer), <code>fship</code> (ship-to), <code>mqty</code> (quantity), <code>mdes</code> (description), <code>mamt</code> (amount), <code>mgl#</code> (GL number), <code>msty</code> (status), <code>mxc</code> (miscellaneous charges), <code>motx</code> (tax flag), <code>mcoon</code> (company, repeated).</li> <li>bbtranin: Update-capable file for invoice transactions (512 bytes, indexed, key length 20).</li> <li>Fields: Same as <code>bbortr</code>, plus <code>frcar</code> (railcar) and fixed code '943' for service charges.</li> <li>frof: Input-only file for freight table data.</li> <li>Contains freight rate information.</li> <li>frofh: Input-only file for freight table history.</li> <li>Tracks historical freight data.</li> <li>frofc: Update-capable file for freight charge records (JB11).</li> <li>Stores calculated freight charges.</li> <li>frofcl1: Input-only file for freight class data (indicator 96, JB10).</li> <li>Provides freight classification details.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program:</p> <ol> <li>MBBFRT:</li> <li>Called to perform the actual freight calculation for each load.</li> <li>Returns freight totals used to update order/invoice records or populate top five carrier data.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB106%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB106</code> RPGLE program, called from <code>BB101.ocl36.txt</code> (and also <code>BB495</code> and <code>BB500</code>), calculates freight charges for orders (<code>FROEI='O'</code>) or invoices (<code>FROEI='I'</code>), supporting single-table calculations (<code>CALC</code>) or top-five carrier selections (<code>TOP5</code>). It processes multi-load orders and invoices, skips override freight rates, and updates <code>bbortr</code>, <code>bbtranin</code>, and <code>frofc</code> with freight data, including collect service charges. Business rules enforce mode-specific calculations, multi-load adjustments, and customer pricing logic. The program interacts with six files (<code>bbortr</code>, <code>bbtranin</code>, <code>frof</code>, <code>frofh</code>, <code>frofc</code>, <code>frofcl1</code>) and calls <code>MBBFRT</code> for freight calculations, ensuring accurate freight processing for order and invoice entry.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/","title":"BB115 RPGLE","text":"<p>The <code>BB115.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is part of the Customer Order Entry system, designed to check for duplicate customer orders based on two options: Option A (company/customer/ship-to/product) or Option B (company/customer/ship-to/product/PO number, default). Written by Dave Capo on 04/02/2011, it includes revisions to set Option B as the default (jb01) and replace the <code>gstabl</code> file with <code>gsprod</code> (jk01). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB115</code> program checks for duplicate orders by querying order header and detail files, displaying potential duplicates in a subfile on the <code>bb115d</code> display file for user review. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions:<ul> <li><code>bb115d</code>: Work station file (display file) with subfile <code>sfl1</code> and control format, user-opened.</li> <li>Group 1 (Duplicate Check):</li> <li><code>arcusp</code>: Input-only file for customer data (keyed, user-opened).</li> <li><code>bicont</code>: Input-only file for container data (keyed, user-opened).</li> <li><code>bboh2</code>: Input-only file for order headers with renamed format <code>bbohp2</code> (keyed, user-opened).</li> <li><code>bboh3</code>: Input-only file for order headers with renamed format <code>bbohp3</code> (keyed, user-opened).</li> <li>Group 2 (Post-Duplicate Check):</li> <li><code>arcust</code>: Input-only file for customer data (keyed, user-opened).</li> <li><code>bbordd</code>: Input-only file for order details (keyed, user-opened).</li> <li><code>gsprod</code>: Input-only file for product data (keyed, user-opened, replaced <code>gstabl</code> in jk01).</li> <li><code>sa5fiud</code>: Input-only file for sales agreement data (keyed, user-opened).</li> <li><code>sa5shz</code>: Input-only file for shipment history (keyed, user-opened).</li> <li><code>shipto</code>: Input-only file for ship-to data (keyed, user-opened).</li> </ul> </li> <li>Data Structures and Fields:<ul> <li><code>dspf_ds</code>: Display file data structure for feedback (record name, key, cursor location, page RRN).</li> <li><code>ovg1</code>, <code>ovz1</code>: Arrays for file overrides for Group 1 files (<code>arcusp</code>, <code>bboh2</code>, <code>bboh3</code>, <code>bicont</code>) in libraries <code>garcusp</code>, <code>gbboh2</code>, <code>gbboh3</code>, <code>gbicont</code> (ovg1) or <code>zarcusp</code>, <code>zbboh2</code>, <code>zbboh3</code>, <code>zbicont</code> (ovz1).</li> <li><code>ovg2</code>, <code>ovz2</code>: Arrays for file overrides for Group 2 files (<code>arcust</code>, <code>bbordd</code>, <code>gsprod</code>, <code>sa5fiud</code>, <code>sa5shz</code>, <code>shipto</code>) in libraries <code>garcust</code>, <code>gbbordd</code>, <code>ggsprod</code>, <code>gsa5fiud</code>, <code>gsa5shz</code>, <code>gshipto</code> (ovg2) or <code>zarcust</code>, <code>zbbordd</code>, <code>zgsprod</code>, <code>zsa5fiud</code>, <code>zsa5shz</code>, <code>zshipto</code> (ovz2).</li> <li><code>com</code>: Array for error messages (1 element defined: \"No Records\", COM,01).</li> <li>Field prefixes: <code>f$</code> (panel fields), <code>c$</code> (subfile control), <code>s1</code> (subfile fields), <code>s2</code> (unused), <code>k$</code> (key lists), <code>p$</code> (input parameters), <code>o$</code> (output parameters), <code>r$</code> (reposition subfile), <code>w$</code> (work fields).</li> </ul> </li> <li>Key Lists:<ul> <li><code>kloh2r1</code>, <code>kloh3r1</code>: For <code>bboh2</code>/<code>bboh3</code> (company, customer, ship-to, product, [PO number for Option B]).</li> <li><code>klcust</code>: For <code>arcusp</code>/<code>arcust</code> (company, customer).</li> <li><code>klship</code>: For <code>shipto</code> (company, customer, ship-to).</li> <li><code>klordh</code>: For order headers (company, order number).</li> <li><code>klprod</code>: For <code>gsprod</code> (company, product, jk01).</li> <li><code>klshz</code>: For <code>sa5shz</code> (company, customer, invoice number, order number).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>19: Panel format input change.</li> <li>21-39, 50-69: Screen errors.</li> <li>40: Subfile clear.</li> <li>41: Subfile display control.</li> <li>42: Subfile display.</li> <li>43: Subfile end and next change.</li> <li>49: Message subfile display/control/initialize/end.</li> <li>70: Global protect in inquiry mode.</li> <li>80: Primary file chain.</li> <li>88: Read subfile.</li> <li>90-99: Secondary file chain/read.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Receives input parameters (assumed via <code>*ENTRY PLIST</code>, not shown) including company (<code>c$co</code>), customer (<code>c$cust</code>), ship-to (<code>c$ship</code>), product (<code>c$prod</code>), PO number (<code>c$pord</code>), order date (<code>c$odat</code>), and checking option (Option A or B, default B, jb01).</p> </li> <li> <p>Duplicate Order Check:</p> </li> <li>Opens Group 1 files (<code>arcusp</code>, <code>bicont</code>, <code>bboh2</code>, <code>bboh3</code>).</li> <li>Option A (Company/Customer/Ship-to/Product):<ul> <li>Uses key list <code>kloh2r1</code> to query <code>bboh2</code> for matching records (company, customer, ship-to, product).</li> </ul> </li> <li>Option B (Company/Customer/Ship-to/Product/PO Number, default, jb01):<ul> <li>Uses key list <code>kloh3r1</code> to query <code>bboh3</code> for matching records (company, customer, ship-to, product, PO number).</li> </ul> </li> <li>Chains to <code>arcusp</code> and <code>bicont</code> using <code>klcust</code> to validate customer and container data.</li> <li> <p>For each matching record:</p> <ul> <li>Populates subfile <code>sfl1</code> with order details (e.g., order number, date, customer, ship-to, product, PO number).</li> <li>Increments relative record number (<code>rrn1</code>).</li> </ul> </li> <li> <p>Post-Duplicate Check Processing:</p> </li> <li>Opens Group 2 files (<code>arcust</code>, <code>bbordd</code>, <code>gsprod</code>, <code>sa5fiud</code>, <code>sa5shz</code>, <code>shipto</code>).</li> <li>If duplicates are found:<ul> <li>Chains to <code>arcust</code> (<code>klcust</code>) for customer details.</li> <li>Chains to <code>shipto</code> (<code>klship</code>) for ship-to details.</li> <li>Chains to <code>gsprod</code> (<code>klprod</code>) for product details (jk01).</li> <li>Chains to <code>bbordd</code> for order details.</li> <li>Chains to <code>sa5fiud</code> and <code>sa5shz</code> (<code>klshz</code>) for sales agreement and shipment history.</li> <li>Displays duplicates in the subfile for user review.</li> </ul> </li> <li> <p>If no duplicates are found, sets error message \"No Records\" (COM,01) and displays it in the subfile.</p> </li> <li> <p>Subfile Display and User Interaction:</p> </li> <li>Clears the subfile (<code>*in40</code>) and initializes <code>rrn1</code>.</li> <li>Writes subfile records (<code>sfl1</code>) with duplicate order details.</li> <li>Displays the subfile control format (<code>sflctl1</code>) using <code>exfmt</code>.</li> <li>Allows user to review duplicates or exit (e.g., via F12, not shown in snippet).</li> <li> <p>In inquiry mode, protects input fields (<code>*in70</code>).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns results (e.g., selected order or confirmation to proceed) via output parameters (<code>o$</code> fields, assumed).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Duplicate Order Checking:</li> <li>Option A: Checks for duplicate orders based on company, customer, ship-to, and product.</li> <li>Option B (default, jb01): Checks for duplicates based on company, customer, ship-to, product, and PO number, providing more specific matching.</li> <li> <p>Displays potential duplicates in a subfile for user review to prevent redundant order entry.</p> </li> <li> <p>Data Validation:</p> </li> <li>Validates customer, ship-to, product, and container data using <code>arcusp</code>, <code>arcust</code>, <code>shipto</code>, <code>gsprod</code>, and <code>bicont</code>.</li> <li> <p>Retrieves order details from <code>bbordd</code> and sales/shipment data from <code>sa5fiud</code> and <code>sa5shz</code> for comprehensive duplicate checking.</p> </li> <li> <p>File Overrides:</p> </li> <li>Uses override arrays (<code>ovg1</code>, <code>ovz1</code>, <code>ovg2</code>, <code>ovz2</code>) to redirect files to production (<code>g*</code>) or alternate (<code>z*</code>) libraries (e.g., test environments).</li> <li> <p>Ensures correct file access based on the environment.</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays \"No Records\" (COM,01) if no duplicates are found, informing the user that the order is unique.</li> <li> <p>Relies on the calling program (<code>BB101</code>) to handle further validation or errors.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>Protects input fields (<code>*in70</code>) when in inquiry mode, ensuring users cannot modify data during review.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>bb115d: Work station file (display file) with subfile <code>sfl1</code> and control format <code>sflctl1</code>.</li> <li>Fields: Subfile fields (<code>s1*</code>), control fields (<code>c$co</code>, <code>c$cust</code>, <code>c$ship</code>, <code>c$prod</code>, <code>c$pord</code>, <code>c$odat</code>).</li> <li>arcusp: Input-only customer file (keyed, user-opened, Group 1).</li> <li>Used for customer validation during duplicate check.</li> <li>bicont: Input-only container file (keyed, user-opened, Group 1).</li> <li>Used for container validation.</li> <li>bboh2: Input-only order header file with format <code>bbohp2</code> (keyed, user-opened, Group 1).</li> <li>Used for Option A duplicate check (company/customer/ship-to/product).</li> <li>bboh3: Input-only order header file with format <code>bbohp3</code> (keyed, user-opened, Group 1).</li> <li>Used for Option B duplicate check (company/customer/ship-to/product/PO number).</li> <li>arcust: Input-only customer file (keyed, user-opened, Group 2).</li> <li>Used for customer details post-duplicate check.</li> <li>bbordd: Input-only order detail file (keyed, user-opened, Group 2).</li> <li>Used for order detail retrieval.</li> <li>gsprod: Input-only product file (keyed, user-opened, Group 2, replaced <code>gstabl</code> in jk01).</li> <li>Used for product validation.</li> <li>sa5fiud: Input-only sales agreement file (keyed, user-opened, Group 2).</li> <li>Used for sales agreement data.</li> <li>sa5shz: Input-only shipment history file (keyed, user-opened, Group 2).<ul> <li>Used for shipment history data.</li> </ul> </li> <li>shipto: Input-only ship-to file (keyed, user-opened, Group 2).<ul> <li>Used for ship-to details.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB115</code> RPGLE program does not call any external programs. All processing is handled internally through file operations and subroutines (assumed, e.g., for subfile processing, not shown in the snippet).</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB115%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB115</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, checks for duplicate customer orders in the Customer Order Entry system using Option A (company/customer/ship-to/product) or Option B (company/customer/ship-to/product/PO number, default). It queries <code>bboh2</code> or <code>bboh3</code> for duplicates, validates data with <code>arcusp</code>, <code>bicont</code>, <code>arcust</code>, <code>gsprod</code>, <code>shipto</code>, <code>sa5fiud</code>, and <code>sa5shz</code>, and displays results in a subfile for user review. Business rules ensure accurate duplicate detection, proper file overrides, and inquiry mode protection. The program interacts with 11 files and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/","title":"BB215 RPG36","text":"<p>The <code>BB215.rpg36.txt</code> document is an RPG III (System/36 style) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. Its primary function is to remove lockout conditions from order header records in the <code>BBORDRH</code> file by clearing the lock status and workstation ID fields. Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>BB215</code> RPG program processes records from the <code>BBORTR</code> file to identify order headers and updates the corresponding records in the <code>BBORDRH</code> file to clear lock-related fields. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program is defined with a header specification (<code>H P064</code>) and identified as <code>BB215</code>.</li> <li>It defines two files:<ul> <li><code>BBORTR</code>: Input primary file (512 bytes, disk, no indexing specified) for reading order transaction records.</li> <li><code>BBORDRH</code>: Update-capable file (512 bytes, record length 512, indexed, key length 11, access mode 2) for order header records.</li> </ul> </li> <li>Input specifications:<ul> <li>For <code>BBORTR</code> (name specification 01, indicators 10, 11, 12): Defines <code>BOCOS</code> (company/order/sequence, positions 2-12).</li> <li>For <code>BBORDRH</code> (name specification 09): No specific fields defined in the provided code, but implied to use <code>BOCOS</code> as the key.</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>LOCK</code> (1 character): Lock status field.</li> <li><code>WSID</code> (2 characters): Workstation ID field.</li> <li><code>ONCE</code> (1 digit): Control variable to ensure one-time initialization.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>One-Time Initialization (lines 0015-0019):<ul> <li>Checks if <code>ONCE</code> is zero (<code>IFEQ *ZERO</code>, indicator B1).</li> <li>If true, clears <code>LOCK</code> and <code>WSID</code> to blanks and sets <code>ONCE</code> to 1.</li> <li>Ensures this initialization occurs only once per program execution.</li> </ul> </li> <li> <p>Record Processing (lines 0022-0027):</p> <ul> <li>For each <code>BBORTR</code> record (indicator 01), chains to <code>BBORDRH</code> using <code>BOCOS</code> (company/order/sequence, line 0022).</li> <li>If a matching <code>BBORDRH</code> record is found (<code>N90</code>), updates the record with:</li> <li><code>LOCK</code> (position 155) set to blanks.</li> <li><code>WSID</code> (positions 156-157) set to blanks.</li> <li>The update is performed via the <code>D</code> (detail) output specification (line 0025), conditional on indicators <code>01</code> and <code>N90</code>.</li> </ul> </li> <li> <p>Output Operations:</p> </li> <li>The output specification for <code>BBORDRH</code> (lines 0025-0027) updates the record:<ul> <li>Writes <code>LOCK</code> to position 155.</li> <li>Writes <code>WSID</code> to positions 156-157.</li> <li>Only executed for matched records (<code>01N90</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for lockout removal:</p> <ol> <li>Lock Removal:</li> <li>For each order transaction record in <code>BBORTR</code>, the corresponding order header record in <code>BBORDRH</code> is updated to clear the lock status (<code>LOCK</code>) and workstation ID (<code>WSID</code>).</li> <li> <p>This effectively removes any lockout conditions, making the order header available for further processing.</p> </li> <li> <p>Key Matching:</p> </li> <li>The program uses the <code>BOCOS</code> field (company/order/sequence, positions 2-12) from <code>BBORTR</code> to locate the corresponding <code>BBORDRH</code> record.</li> <li> <p>Updates occur only if a matching record is found (<code>N90</code>).</p> </li> <li> <p>One-Time Initialization:</p> </li> <li> <p>The <code>ONCE</code> variable ensures that the initialization of <code>LOCK</code> and <code>WSID</code> to blanks occurs only once, preventing redundant clearing during program execution.</p> </li> <li> <p>No Validation or Error Messaging:</p> </li> <li>The program assumes the calling OCL program (<code>BB101.ocl36.txt</code>) has validated the batch deletion context (e.g., <code>SWITCH1-1</code>).</li> <li>No error messages are defined or displayed, and updates are unconditional for matched records.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>BBORTR: Input primary file for order transactions (512 bytes, disk).</li> <li>Field: <code>BOCOS</code> (company/order/sequence, positions 2-12).</li> <li>BBORDRH: Update-capable file for order header records (512 bytes, indexed, key length 11).</li> <li>Fields updated: <code>LOCK</code> (position 155, 1 character), <code>WSID</code> (positions 156-157, 2 characters).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB215</code> RPG program does not call any external programs. All processing is handled internally through file operations and updates.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB215%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB215</code> RPG program, called from the <code>BB101.ocl36.txt</code> OCL program, removes lockout conditions from order header records in the <code>BBORDRH</code> file by clearing the <code>LOCK</code> and <code>WSID</code> fields. It reads order transaction records from <code>BBORTR</code>, chains to matching <code>BBORDRH</code> records using the <code>BOCOS</code> key, and updates the lock-related fields. Business rules ensure lock removal only for matched records, with a one-time initialization to set variables. The program interacts with the <code>BBORTR</code> and <code>BBORDRH</code> files and does not call external programs, relying on internal logic for all operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/","title":"BB811 RPGLE","text":"<p>The <code>BB811.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is part of the Customer Orders and Billing system, designed for batch order inquiry, allowing users to review order details, including transaction data, customer information, and freight-related charges. Written by Dave Capo on 04/16/2012, it includes revisions to add order process status (jk02), handle field removal (jk03), and support freight collect service fees (jb04). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BB811</code> program facilitates batch order inquiry by displaying order details across multiple subfiles (<code>sfl1</code>, <code>sfl2</code>, <code>sfl3</code>) on the <code>bb811d</code> display file. It retrieves data from order transaction, customer, and related files, allowing users to review orders, including freight collect service charges. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions:<ul> <li><code>bb811d</code>: Work station file (display file) with three subfiles (<code>sfl1</code>, <code>sfl2</code>, <code>sfl3</code>) and relative record numbers (<code>rrn1</code>, <code>rrn2</code>, <code>rrn3</code>).</li> <li><code>bbortr</code>: Input-only file for order transactions (512 bytes, indexed, key length 11, starting at position 2).</li> <li><code>arcust</code>: Input-only file for customer data (keyed, user-opened).</li> <li><code>bborcl</code>: Input-only file for order close data (keyed, user-opened).</li> <li><code>bbota1</code>: Input-only file for order transaction accessorials/marks (keyed, user-opened).</li> <li><code>gsctum</code>: Input-only file for customer unit of measure data (keyed, user-opened).</li> <li><code>gstabl</code>: Input-only file for table data (keyed, user-opened).</li> <li><code>shipto</code>: Input-only file for ship-to data (keyed, user-opened).</li> </ul> </li> <li>Data Structures and Fields:<ul> <li><code>klortr</code>: Data structure for <code>bbortr</code> key (11 characters, combining <code>p$cord</code> [company/order, 8 characters] and <code>k$seq</code> [sequence, 3 digits]).</li> <li><code>m@80</code>: Array for message data (80 elements, 1 character each).</li> <li><code>hd1</code>: Array for format headers (1 element, 80 characters: \"Customer Tran-Batch Order Inquiry\").</li> <li><code>com</code>: Array for error messages (1 element: \"THIS ORDER IS CURRENTLY ON CREDIT HOLD\", COM,01).</li> <li><code>ovg</code>, <code>ovz</code>: Arrays for file overrides (6 elements, 80 characters each) for <code>arcust</code>, <code>bborcl</code>, <code>bbota1</code>, <code>gsctum</code>, <code>gstabl</code>, <code>shipto</code> in libraries <code>garcust</code>, <code>gbborcl</code>, <code>gbbota1</code>, <code>ggsctum</code>, <code>ggstabl</code>, <code>gshipto</code> (ovg) or <code>zarcust</code>, <code>zbborcl</code>, <code>zbbota1</code>, <code>zgctum</code>, <code>zgstabl</code>, <code>zshipto</code> (ovz).</li> <li>Field prefixes: <code>f$</code> (panel fields), <code>c$</code> (subfile control), <code>s1</code>/<code>s2</code>/<code>s3</code> (subfile fields), <code>k$</code> (key lists), <code>p$</code> (input parameters), <code>o$</code> (output parameters), <code>r$</code> (reposition subfile), <code>w$</code> (work fields).</li> </ul> </li> <li>Key Lists:<ul> <li><code>klcust</code>: For <code>arcust</code> (company <code>f$co</code>, customer <code>bocust</code>).</li> <li><code>klship</code>: For <code>shipto</code> (company <code>f$co</code>, customer <code>bocust</code>, ship-to <code>csship</code>).</li> <li><code>klord999</code>: For <code>bbortr</code> (company <code>f$co</code>, order number <code>f$ord#</code>, sequence <code>k$999=999</code>).</li> <li><code>klctum</code>: For <code>gsctum</code> (company <code>boco</code>, product <code>bdprod</code>, container <code>bdcntr</code>, unit of measure <code>bdum</code>).</li> <li><code>klc1r1</code>, <code>klc2r1</code>, <code>klc3r1</code>: For <code>bbortr</code>/<code>bbota1</code> (company <code>f$co</code>, order number <code>f$ord#</code>).</li> <li><code>klc1s1</code>, <code>klc2s1</code>, <code>klc3s1</code>: For subfile-specific records (company <code>f$co</code>, order number <code>f$ord#</code>, sequence <code>c1seq</code>/<code>c2seq</code> or accessorial ID <code>c$rcid</code>).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>19: Panel format input change.</li> <li>21-39, 50-69: Screen errors.</li> <li>40: Subfile clear.</li> <li>41: Subfile display control.</li> <li>42: Subfile.</li> <li>43: Subfile end and next change.</li> <li>49: Message subfile display/control/initialize/end.</li> <li>70-79: Input field protect.</li> <li>80: Primary file chain.</li> <li>88: Read subfile.</li> <li>90-99: Secondary file chain/read.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Receives input parameters via <code>*ENTRY PLIST</code> (assumed, not shown) including company (<code>f$co</code>), order number (<code>f$ord#</code>), and possibly customer (<code>bocust</code>) or ship-to (<code>csship</code>).</p> </li> <li> <p>Order Inquiry Processing:</p> </li> <li>Opens files (<code>arcust</code>, <code>bborcl</code>, <code>bbota1</code>, <code>gsctum</code>, <code>gstabl</code>, <code>shipto</code>).</li> <li>Chains to <code>bbortr</code> using <code>klortr</code> (company/order <code>p$cord</code>, sequence <code>k$seq</code>) to retrieve order transaction details (indicator 80).</li> <li>Chains to <code>arcust</code> using <code>klcust</code> to retrieve customer details.</li> <li>Chains to <code>shipto</code> using <code>klship</code> to retrieve ship-to details.</li> <li>Chains to <code>gsctum</code> using <code>klctum</code> to retrieve unit of measure data for the product/container.</li> <li>Chains to <code>bbota1</code> using <code>klc3s1</code> to retrieve accessorials/marks, including freight collect service fees (misc sequence 940, jb04).</li> <li>Chains to <code>bborcl</code> to check order close status.</li> <li> <p>Checks if the order is on credit hold, setting error message \"THIS ORDER IS CURRENTLY ON CREDIT HOLD\" (COM,01) if applicable.</p> </li> <li> <p>Subfile Population:</p> </li> <li>Clears subfiles (<code>*in40</code>) and initializes relative record numbers (<code>rrn1</code>, <code>rrn2</code>, <code>rrn3</code>).</li> <li>Populates subfiles based on format <code>FMT01</code> (jk02):<ul> <li><code>sfl1</code>: Displays order header details (e.g., company, order number, customer, ship-to, order process status, jk02).</li> <li><code>sfl2</code>: Displays order transaction details (e.g., product, container, quantity, unit of measure).</li> <li><code>sfl3</code>: Displays accessorials/marks, including freight collect service fees (misc sequence 940, jb04).</li> </ul> </li> <li> <p>Increments <code>rrn1</code>, <code>rrn2</code>, <code>rrn3</code> for each record written to the respective subfiles.</p> </li> <li> <p>Display and User Interaction:</p> </li> <li>Displays the <code>bb811d</code> panel with format header \"Customer Tran-Batch Order Inquiry\".</li> <li>Writes subfile control formats and displays subfiles (<code>*in41</code>, <code>*in42</code>) using <code>exfmt</code>.</li> <li>Allows user to review order details, including freight collect service fees (jb04).</li> <li>In inquiry mode, protects input fields (<code>*in70</code>).</li> <li> <p>Supports navigation and exit (e.g., F12, assumed).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns output parameters (<code>o$</code> fields, assumed) to the calling program.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Order Inquiry:</li> <li>Retrieves and displays order details from <code>bbortr</code>, including header, transaction, and accessorial data.</li> <li>Includes order process status in the display format <code>FMT01</code> (jk02).</li> <li> <p>Supports inquiry of freight collect service fees (misc sequence 940, $100 charge, jb04) when shipping is arranged by ARG but billed to the customer by the carrier.</p> </li> <li> <p>Credit Hold Check:</p> </li> <li> <p>Checks if the order is on credit hold, displaying error message \"THIS ORDER IS CURRENTLY ON CREDIT HOLD\" (COM,01) if applicable.</p> </li> <li> <p>Data Validation:</p> </li> <li>Validates company, customer, ship-to, product, container, and unit of measure data using <code>arcust</code>, <code>shipto</code>, <code>gsctum</code>, and <code>gstabl</code>.</li> <li>Retrieves accessorials/marks from <code>bbota1</code>, including freight-related charges (jb04).</li> <li> <p>Checks order close status in <code>bborcl</code>.</p> </li> <li> <p>File Overrides:</p> </li> <li>Uses override arrays (<code>ovg</code>, <code>ovz</code>) to redirect files to production (<code>g*</code>) or alternate (<code>z*</code>) libraries (e.g., test environments).</li> <li> <p>Ensures correct file access based on the environment.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li> <p>Protects input fields (<code>*in70</code>) in inquiry mode, allowing only review of data.</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays error messages via the <code>com</code> array in the subfile, primarily for credit hold status.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>bb811d: Work station file (display file) with subfiles <code>sfl1</code>, <code>sfl2</code>, <code>sfl3</code>.</li> <li>Fields: <code>f$co</code> (company), <code>f$ord#</code> (order number), <code>s1seq</code>/<code>c1seq</code> (sequence for <code>sfl1</code>), <code>c2seq</code> (sequence for <code>sfl2</code>), <code>c$rcid</code> (accessorial ID for <code>sfl3</code>).</li> <li>bbortr: Input-only order transaction file (512 bytes, indexed, key length 11, starting at position 2).</li> <li>Fields: <code>boco</code> (company), <code>bdprod</code> (product), <code>bdcntr</code> (container), <code>bdum</code> (unit of measure).</li> <li>arcust: Input-only customer file (keyed, user-opened).</li> <li>Fields: <code>bocust</code> (customer number).</li> <li>bborcl: Input-only order close file (keyed, user-opened).</li> <li>Contains order close status.</li> <li>bbota1: Input-only order transaction accessorials/marks file (keyed, user-opened).</li> <li>Fields: Accessorial ID, type, code, description, including misc sequence 940 for freight collect (jb04).</li> <li>gsctum: Input-only customer unit of measure file (keyed, user-opened).</li> <li>Fields: Unit of measure for product/container combinations.</li> <li>gstabl: Input-only table file (keyed, user-opened).</li> <li>Contains reference data (e.g., codes, types).</li> <li>shipto: Input-only ship-to file (keyed, user-opened).</li> <li>Fields: <code>csship</code> (ship-to number).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB811</code> RPGLE program does not call any external programs. All processing is handled internally through file operations and subroutines (assumed for subfile processing, not shown in the snippet).</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/BB811%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB811</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, provides batch order inquiry for the Customer Orders and Billing system. It retrieves and displays order details from <code>bbortr</code>, <code>arcust</code>, <code>shipto</code>, <code>bborcl</code>, <code>bbota1</code>, <code>gsctum</code>, and <code>gstabl</code> across three subfiles, including order process status (jk02) and freight collect service fees (jb04). Business rules ensure valid data retrieval, credit hold checks, and inquiry mode protection. The program interacts with eight files and does not call external programs, relying on internal logic to facilitate user review of order transactions.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/","title":"IN805 RPGLE","text":"<p>The <code>IN805.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment. It is part of the Customer Orders and Inventory system, designed to perform inventory balances inquiry, displaying available inventory for products and containers and checking sufficiency for orders. Written by Dave Capo on 08/25/2014, it includes revisions for tank reading date validation (jk01), screen expansion (jk02), allocated totals calculation (jk04), and container weight file integration (jb05, jk05). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>IN805</code> program queries inventory balances for products and containers, displays results in subfiles on the <code>in805d</code> display file, and checks if sufficient inventory exists for an order based on the input mode (<code>p$mode</code>). The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions:<ul> <li><code>in805d</code>: Work station file (display file) with subfiles <code>sfl1</code> and <code>sfl2</code>, user-opened.</li> <li><code>in805w</code>: Work file in <code>qtemp</code> for temporary data (user-opened).</li> <li><code>bbordh</code>: Input-only file for order headers (keyed, user-opened).</li> <li><code>bborpx</code>: Input-only file for order product cross-reference (keyed, user-opened).</li> <li><code>gscntr</code>: Input-only file for container data (keyed, user-opened).</li> <li><code>gsctum</code>: Input-only file for customer unit of measure data (keyed, user-opened).</li> <li><code>gsctwt</code>: Input-only file for container weight data (keyed, user-opened, added in jb05/jk05).</li> <li><code>gsprod</code>: Input-only file for product data (keyed, user-opened).</li> <li><code>incont</code>: Input-only file for inventory container data (keyed, user-opened).</li> <li><code>inloc</code>: Input-only file for inventory location data (keyed, user-opened).</li> <li><code>inmtaj</code>: Input-only file for inventory major adjustments (keyed, user-opened).</li> <li><code>inmtrdy</code>: Input-only file for inventory meter readings (keyed, user-opened).</li> <li><code>intank</code>: Input-only file for tank inventory data (keyed, user-opened).</li> <li><code>intkrv</code>: Input-only file for tank receiving data (keyed, user-opened).</li> <li><code>sa5movd3</code>: Input-only file for movement details (keyed, user-opened).</li> <li><code>sa5shz</code>: Input-only file for shipment history (keyed, user-opened).</li> <li><code>gsumcv</code>: Input-only file for unit measure conversion (keyed, user-opened).</li> <li><code>bicont</code>: Input-only file for bill of lading containers (keyed, user-opened).</li> <li><code>arcust</code>: Input-only file for customer data (keyed, user-opened).</li> <li><code>shipto</code>: Input-only file for ship-to data (keyed, user-opened).</li> <li><code>bborcl</code>: Input-only file for order close data (keyed, user-opened).</li> </ul> </li> <li>Data Structures and Fields:<ul> <li><code>m@80</code>: Array for message data (80 elements, 1 character each).</li> <li><code>ovr</code>, <code>ovg</code>, <code>ovz</code>: Arrays for file overrides for <code>in805w</code> (<code>qtemp</code>), and other files in production (<code>g*</code>) or alternate (<code>z*</code>) libraries.</li> <li><code>com</code>: Array for error messages (4 elements: \"No Results\", \"Totl Gal In Trn----&gt;\", \"Totl Alloc Gal/Ctn-&gt;\", \"Not enough Prod to fill order\", COM,01-04).</li> <li>Field prefixes: <code>f$</code> (panel fields), <code>c$</code> (subfile control), <code>s1</code>/<code>s2</code> (subfile fields), <code>k$</code> (key lists), <code>p$</code> (input parameters), <code>o$</code> (output parameters), <code>r$</code> (reposition subfile), <code>w$</code> (work fields).</li> </ul> </li> <li>Key Lists:<ul> <li><code>klordh</code>: For <code>bbordh</code> (company <code>boco</code>, customer <code>bocust</code>, order number <code>bordno</code>, jk08).</li> <li>Other key lists (assumed, not shown) for chaining to inventory and order files.</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>19: Panel format input change.</li> <li>21-39, 50-69: Screen errors.</li> <li>40: Subfile clear.</li> <li>41: Subfile display control.</li> <li>42: Subfile display.</li> <li>43: Subfile end and next change.</li> <li>49: Message subfile display/control/initialize/end.</li> <li>70-79: Input field protect.</li> <li>80: Primary file chain.</li> <li>81: Read subfile.</li> <li>90-99: Secondary file chain/read.</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li>Receives input parameters via <code>*ENTRY PLIST</code> (assumed, not shown) including:<ul> <li><code>p$mode</code> (1 character): Mode of operation (\"1\", \"2\", \"3\").</li> <li><code>p$co</code> (company), <code>p$prod</code> (product), <code>p$cntr</code> (container), <code>p$ord#</code> (order number, jk04), <code>p$qty</code> (quantity).</li> </ul> </li> <li> <p><code>p$mode</code> determines behavior:</p> <ul> <li>\"1\": Always display inquiry (jk06).</li> <li>\"2\": Display inquiry only if insufficient product exists for the order (jk06).</li> <li>\"3\": Send message if insufficient product exists for the order (jb07).</li> </ul> </li> <li> <p>Inventory Inquiry Processing:</p> </li> <li>Opens files (<code>bbordh</code>, <code>bborpx</code>, <code>gscntr</code>, <code>gsctum</code>, <code>gsctwt</code>, <code>gsprod</code>, <code>incont</code>, <code>inloc</code>, <code>inmtaj</code>, <code>inmtrdy</code>, <code>intank</code>, <code>intkrv</code>, <code>sa5movd3</code>, <code>sa5shz</code>, <code>gsumcv</code>, <code>bicont</code>, <code>arcust</code>, <code>shipto</code>, <code>bborcl</code>).</li> <li>Chains to <code>bbordh</code> using <code>klordh</code> to retrieve order details (company, customer, order number, jk08).</li> <li>Queries inventory files (<code>incont</code>, <code>inloc</code>, <code>intank</code>, <code>intkrv</code>, <code>inmtrdy</code>, <code>inmtaj</code>) to calculate available inventory for the product (<code>p$prod</code>) and container (<code>p$cntr</code>).</li> <li>Calculates in-transit totals from <code>sa5movd3</code> (jk01).</li> <li>Calculates allocated totals from <code>bborpx</code> and <code>bbordh</code>, excluding the current order number (<code>p$ord#</code>) to avoid double-counting (jk04).</li> <li>Converts gallons to containers using <code>gsctwt</code> (jb05, jk05).</li> <li> <p>Validates tank reading dates against system date (cannot be future-dated, jk01).</p> </li> <li> <p>Inventory Sufficiency Check:</p> </li> <li>Compares available inventory (in gallons or containers) to the order quantity (<code>p$qty</code>).</li> <li>If insufficient:<ul> <li>For <code>p$mode=\"2\"</code>, displays inquiry with details (jk06).</li> <li>For <code>p$mode=\"3\"</code>, sets output message \"Not enough Prod to fill order\" (COM,04, jb07).</li> </ul> </li> <li> <p>If sufficient or <code>p$mode=\"1\"</code>, proceeds to display inquiry regardless (jk06).</p> </li> <li> <p>Subfile Population and Display:</p> </li> <li>Clears subfiles (<code>*in40</code>) and initializes relative record numbers (<code>rrn1</code>, <code>rrn2</code>).</li> <li>Populates subfiles:<ul> <li><code>sfl1</code>: Displays inventory details (e.g., location, product, container, available quantity, in-transit totals [COM,02], allocated totals [COM,03]).</li> <li><code>sfl2</code>: Displays additional details (e.g., tank readings, adjustments).</li> </ul> </li> <li>Writes subfile control formats and displays subfiles (<code>*in41</code>, <code>*in42</code>) using <code>exfmt</code> on the expanded 27x132 screen (jk02).</li> <li> <p>Displays \"No Results\" (COM,01) if no inventory data is found.</p> </li> <li> <p>External Program Calls:</p> </li> <li>Calls <code>IN110C</code> and <code>IN805BC</code> to retrieve additional inventory data or perform calculations (jk02, jk03).</li> <li> <p>Passes relevant parameters (e.g., company, product, container, order number).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets the last record indicator (<code>LR</code>) to exit the program.</li> <li>Returns output parameters (<code>o$</code> fields, assumed), including messages for insufficient inventory (<code>p$mode=\"3\"</code>).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Inventory Inquiry Modes:</li> <li><code>p$mode=\"1\"</code>: Always displays inventory inquiry regardless of sufficiency (jk06).</li> <li><code>p$mode=\"2\"</code>: Displays inquiry only if insufficient product exists for the order (jk06).</li> <li> <p><code>p$mode=\"3\"</code>: Sends a message (\"Not enough Prod to fill order\", COM,04) if insufficient product exists (jb07).</p> </li> <li> <p>Inventory Calculations:</p> </li> <li>Calculates available inventory from <code>incont</code>, <code>intank</code>, <code>intkrv</code>, <code>inmtrdy</code>, and <code>inmtaj</code>.</li> <li>Includes in-transit totals from <code>sa5movd3</code> (jk01).</li> <li>Calculates allocated totals from <code>bborpx</code> and <code>bbordh</code>, excluding the current order (<code>p$ord#</code>, jk04).</li> <li> <p>Converts gallons to containers using <code>gsctwt</code> (jb05, jk05).</p> </li> <li> <p>Data Validation:</p> </li> <li>Validates tank reading dates in <code>inmtrdy</code> to ensure they are not future-dated (jk01).</li> <li> <p>Validates company, product, container, customer, and ship-to data using <code>gsprod</code>, <code>gscntr</code>, <code>gsctum</code>, <code>arcust</code>, and <code>shipto</code>.</p> </li> <li> <p>File Overrides:</p> </li> <li>Uses override arrays (<code>ovr</code>, <code>ovg</code>, <code>ovz</code>) to redirect files to <code>qtemp</code> (<code>in805w</code>) or production (<code>g*</code>) or alternate (<code>z*</code>) libraries.</li> <li> <p>Ensures correct file access based on the environment.</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays \"No Results\" (COM,01) if no inventory data is found.</li> <li>Displays in-transit and allocated totals (COM,02, COM,03) in the subfile.</li> <li> <p>Sends \"Not enough Prod to fill order\" (COM,04) for insufficient inventory in <code>p$mode=\"3\"</code>.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>Protects input fields (<code>*in70</code>) in inquiry mode, allowing only review of data.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>in805d: Work station file (display file) with subfiles <code>sfl1</code> and <code>sfl2</code>.</li> <li>Fields: <code>f$</code> (panel), <code>c$</code> (subfile control), <code>s1</code>/<code>s2</code> (subfile data).</li> <li>in805w: Temporary work file in <code>qtemp</code>.</li> <li>Used for intermediate data storage.</li> <li>bbordh: Input-only order header file (keyed, user-opened).</li> <li>Fields: <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number).</li> <li>bborpx: Input-only order product cross-reference file (keyed, user-opened).</li> <li>Used for allocated quantity calculations.</li> <li>gscntr: Input-only container file (keyed, user-opened).</li> <li>Contains container data.</li> <li>gsctum: Input-only customer unit of measure file (keyed, user-opened).</li> <li>Contains unit of measure data.</li> <li>gsctwt: Input-only container weight file (keyed, user-opened, jb05/jk05).</li> <li>Used for gallon-to-container conversion.</li> <li>gsprod: Input-only product file (keyed, user-opened).</li> <li>Contains product data.</li> <li>incont: Input-only inventory container file (keyed, user-opened).</li> <li>Contains container inventory data.</li> <li>inloc: Input-only inventory location file (keyed, user-opened).<ul> <li>Contains location data.</li> </ul> </li> <li>inmtaj: Input-only inventory major adjustments file (keyed, user-opened).<ul> <li>Contains adjustment data.</li> </ul> </li> <li>inmtrdy: Input-only inventory meter readings file (keyed, user-opened).<ul> <li>Contains tank reading data.</li> </ul> </li> <li>intank: Input-only tank inventory file (keyed, user-opened).<ul> <li>Contains tank inventory data.</li> </ul> </li> <li>intkrv: Input-only tank receiving file (keyed, user-opened).<ul> <li>Contains receiving data.</li> </ul> </li> <li>sa5movd3: Input-only movement details file (keyed, user-opened).<ul> <li>Contains in-transit data.</li> </ul> </li> <li>sa5shz: Input-only shipment history file (keyed, user-opened).<ul> <li>Contains shipment history data.</li> </ul> </li> <li>gsumcv: Input-only unit measure conversion file (keyed, user-opened).<ul> <li>Contains conversion factors.</li> </ul> </li> <li>bicont: Input-only bill of lading container file (keyed, user-opened).<ul> <li>Contains container data for BOL.</li> </ul> </li> <li>arcust: Input-only customer file (keyed, user-opened).<ul> <li>Contains customer data.</li> </ul> </li> <li>shipto: Input-only ship-to file (keyed, user-opened).<ul> <li>Contains ship-to data.</li> </ul> </li> <li>bborcl: Input-only order close file (keyed, user-opened).<ul> <li>Contains order close status.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs:</p> <ol> <li>IN110C:</li> <li>Called to retrieve additional inventory data or perform related calculations (jk02).</li> <li>Parameters: Assumed to include company, product, container, etc.</li> <li>IN805BC:</li> <li>Called for specific inventory balance calculations or data retrieval (jk02, jk03).</li> <li>Parameters: Assumed to include company, product, container, order number, etc.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805%20RPGLE/#summary","title":"Summary","text":"<p>The <code>IN805</code> RPGLE program, called from the <code>BB101.ocl36.txt</code> OCL program, performs inventory balances inquiry for the Customer Orders and Inventory system. It checks product/container availability, calculates in-transit and allocated totals, and displays results in subfiles, with modes to always display (<code>p$mode=\"1\"</code>), display on insufficiency (<code>p$mode=\"2\"</code>), or send messages (<code>p$mode=\"3\"</code>). Business rules enforce inventory calculations, date validation, and mode-specific behavior. The program interacts with 21 files and calls <code>IN110C</code> and <code>IN805BC</code> for additional processing, ensuring accurate inventory checks for order fulfillment.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/","title":"IN805BC CLP","text":"<p>The <code>IN805BC.clp.txt</code> document is a CLP (Control Language Program) written for an IBM System/36 or AS/400 (now IBM i) environment, called from the <code>BB101.ocl36.txt</code> OCL program. Its purpose is to build work files (<code>INWZHW</code> and <code>INWZ10W</code>) in the <code>QTEMP</code> library to accumulate totals for tanks in the work file <code>IN805W</code>. The program was written by Jimmy Krajacic on 03/14/2018 and revised on 08/30/21 (revision JK01) to update library references and copy files to <code>QTEMP</code>. Below is a detailed explanation of the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/#process-steps-of-the-clp-program","title":"Process Steps of the CLP Program","text":"<p>The <code>IN805BC</code> CLP program creates and populates temporary work files (<code>INWZHW</code> and <code>INWZ10W</code>) in the <code>QTEMP</code> library by copying data from source files based on input parameters. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>The program accepts two parameters:<ul> <li><code>&amp;P$FGRP</code> (1 character): File group identifier (e.g., 'G' or other values).</li> <li><code>&amp;P$CO#</code> (2 characters): Company number.</li> </ul> </li> <li> <p>Declares variables:</p> <ul> <li><code>&amp;WRKFIL1</code> (10 characters): Name of the first source file, constructed as <code>&amp;P$FGRP + 'INWZH'</code>.</li> <li><code>&amp;WRKFIL2</code> (10 characters): Name of the second source file, constructed as <code>&amp;P$FGRP + 'INWZ' + &amp;P$CO#</code>.</li> </ul> </li> <li> <p>Construct File Names:</p> </li> <li>Concatenates <code>&amp;P$FGRP</code> with <code>'INWZH'</code> to form <code>&amp;WRKFIL1</code> (e.g., 'GINWZH' for <code>&amp;P$FGRP='G'</code>).</li> <li> <p>Concatenates <code>&amp;P$FGRP</code>, <code>'INWZ'</code>, and <code>&amp;P$CO#</code> to form <code>&amp;WRKFIL2</code> (e.g., 'GINWZ01' for <code>&amp;P$FGRP='G'</code> and <code>&amp;P$CO#='01'</code>).</p> </li> <li> <p>Clear or Create Work File <code>INWZHW</code>:</p> </li> <li>Attempts to clear the physical file <code>QTEMP/INWZHW</code> using <code>CLRPFM</code>.</li> <li> <p>If the file does not exist (<code>CPF3142</code> message), executes a <code>DO</code> block:</p> <ul> <li>If <code>&amp;P$FGRP = 'G'</code>:</li> <li>Creates a duplicate object of <code>INWZHW</code> from the <code>DATA</code> library to <code>QTEMP</code> using <code>CRTDUPOBJ</code>, with constraints (<code>CST(*NO)</code>) and triggers (<code>TRG(*NO)</code>) disabled.</li> <li>Monitors for errors <code>CPF5813</code> (template file locked) and <code>CPF7302</code> (constraint error).</li> <li>If <code>&amp;P$FGRP \u2260 'G'</code>:</li> <li>Creates a duplicate object of <code>INWZHW</code> from the <code>DATADEV</code> library to <code>QTEMP</code> with the same settings.</li> <li>Monitors for the same errors.</li> </ul> </li> <li> <p>Clear or Create Work File <code>INWZ10W</code>:</p> </li> <li>Attempts to clear the physical file <code>QTEMP/INWZ10W</code> using <code>CLRPFM</code>.</li> <li> <p>If the file does not exist (<code>CPF3142</code> message), executes a <code>DO</code> block:</p> <ul> <li>If <code>&amp;P$FGRP = 'G'</code>:</li> <li>Creates a duplicate object of <code>INWZ10W</code> from the <code>DATA</code> library to <code>QTEMP</code> with constraints and triggers disabled.</li> <li>Monitors for errors <code>CPF5813</code> and <code>CPF7302</code>.</li> <li>If <code>&amp;P$FGRP \u2260 'G'</code>:</li> <li>Creates a duplicate object of <code>INWZ10W</code> from the <code>DATADEV</code> library to <code>QTEMP</code> with the same settings.</li> <li>Monitors for the same errors.</li> </ul> </li> <li> <p>Copy Data to Work Files:</p> </li> <li>Copies data from the source file <code>&amp;WRKFIL1</code> (e.g., <code>GINWZH</code>) to <code>QTEMP/INWZHW</code> using <code>CPYF</code> with:<ul> <li><code>MBROPT(*REPLACE)</code>: Replaces existing data in the target file.</li> <li><code>FMTOPT(*NOCHK)</code>: Bypasses format checking for faster copying.</li> <li>Monitors for error <code>CPF2817</code> (copy failed, e.g., if source file is empty or does not exist).</li> </ul> </li> <li> <p>Copies data from the source file <code>&amp;WRKFIL2</code> (e.g., <code>GINWZ01</code>) to <code>QTEMP/INWZ10W</code> using <code>CPYF</code> with the same options and error monitoring.</p> </li> <li> <p>Program Termination:</p> </li> <li>The program ends with <code>ENDPGM</code> after completing the file creation and data copy operations.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Naming:</li> <li>Source file names are dynamically constructed using <code>&amp;P$FGRP</code> and <code>&amp;P$CO#</code> to ensure the correct files are accessed (e.g., <code>GINWZH</code>, <code>GINWZ01</code>).</li> <li> <p>This allows the program to handle different file groups and company-specific data.</p> </li> <li> <p>Library Selection Based on File Group:</p> </li> <li>If <code>&amp;P$FGRP = 'G'</code>, source files are copied from the <code>DATA</code> library (production environment).</li> <li> <p>If <code>&amp;P$FGRP \u2260 'G'</code>, source files are copied from the <code>DATADEV</code> library (development or test environment, per revision JK01).</p> </li> <li> <p>Temporary Work Files:</p> </li> <li>Work files (<code>INWZHW</code>, <code>INWZ10W</code>) are created in the <code>QTEMP</code> library, which is temporary and unique to the job, ensuring isolation and cleanup upon job completion.</li> <li> <p>If the files do not exist, they are created by duplicating objects from the appropriate library (<code>DATA</code> or <code>DATADEV</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>The program handles missing files (<code>CPF3142</code>) by creating them dynamically.</li> <li>It monitors for file copy errors (<code>CPF2817</code>) and object creation errors (<code>CPF5813</code>, <code>CPF7302</code>) to ensure robust execution without abending.</li> <li> <p>Constraints and triggers are disabled (<code>CST(*NO)</code>, <code>TRG(*NO)</code>) to simplify file creation and avoid conflicts.</p> </li> <li> <p>Data Replacement:</p> </li> <li>The <code>CPYF</code> command uses <code>MBROPT(*REPLACE)</code> to overwrite any existing data in <code>INWZHW</code> and <code>INWZ10W</code>, ensuring the work files contain the latest data.</li> <li><code>FMTOPT(*NOCHK)</code> bypasses format validation, assuming the source and target file formats are compatible.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>INWZHW (in <code>QTEMP</code>):</li> <li>Temporary work file created or cleared to store data copied from <code>&amp;WRKFIL1</code> (e.g., <code>GINWZH</code>).</li> <li>Source library: <code>DATA</code> (if <code>&amp;P$FGRP = 'G'</code>) or <code>DATADEV</code> (if <code>&amp;P$FGRP \u2260 'G'</code>).</li> <li>INWZ10W (in <code>QTEMP</code>):</li> <li>Temporary work file created or cleared to store data copied from <code>&amp;WRKFIL2</code> (e.g., <code>GINWZ01</code>).</li> <li>Source library: <code>DATA</code> (if <code>&amp;P$FGRP = 'G'</code>) or <code>DATADEV</code> (if <code>&amp;P$FGRP \u2260 'G'</code>).</li> <li>&amp;WRKFIL1 (e.g., <code>GINWZH</code>):</li> <li>Source file in <code>DATA</code> or <code>DATADEV</code>, dynamically named using <code>&amp;P$FGRP + 'INWZH'</code>.</li> <li>&amp;WRKFIL2 (e.g., <code>GINWZ01</code>):</li> <li>Source file in <code>DATA</code> or <code>DATADEV</code>, dynamically named using <code>&amp;P$FGRP + 'INWZ' + &amp;P$CO#</code>.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/#external-programs-called","title":"External Programs Called","text":"<p>The <code>IN805BC</code> CLP program does not call any external programs. It relies entirely on CL commands (<code>CHGVAR</code>, <code>CLRPFM</code>, <code>CRTDUPOBJ</code>, <code>CPYF</code>) for its operations.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/IN805BC%20CLP/#summary","title":"Summary","text":"<p>The <code>IN805BC</code> CLP program, called from the <code>BB101.ocl36.txt</code> OCL program, builds temporary work files (<code>INWZHW</code> and <code>INWZ10W</code>) in the <code>QTEMP</code> library to accumulate tank totals for the <code>IN805W</code> work file. It constructs source file names using input parameters <code>&amp;P$FGRP</code> and <code>&amp;P$CO#</code>, clears or creates the target files, and copies data from source files in the <code>DATA</code> (production) or <code>DATADEV</code> (development) library based on the file group. Business rules ensure dynamic file naming, appropriate library selection, error handling, and data replacement in temporary files. The program interacts with four files (<code>INWZHW</code>, <code>INWZ10W</code>, and their source files) and does not call external programs, relying on internal CL commands for all processing.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/","title":"MBBQTY RPGLE","text":"<p>The <code>MBBQTY.rpgle.txt</code> document is an RPGLE (RPG IV) program called from the <code>BB101.ocl36.txt</code> OCL program in an IBM System/36 or AS/400 (now IBM i) environment, though it is primarily designed as a module called by <code>BB113</code> or other programs needing to convert order quantities to pounds (LBS), gallons (GAL), and shipping weight. Written prior to 06/07/10 (based on revision JB01), it includes multiple revisions to enhance conversion logic, handle shipping weight calculations, and support additional units of measure like kilograms (KG). Below is a detailed explanation of the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>MBBQTY</code> program converts an order quantity from a specified unit of measure (UM) to pounds (LBS), gallons (GAL), and calculates shipping weight, using data from the <code>gsctum</code>, <code>gsumcv</code>, and <code>gsctwt</code> files. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>File Definitions (assumed, as not explicitly shown in the provided snippet):<ul> <li><code>gsctum</code>: Input-only file for customer unit of measure data (keyed).</li> <li><code>gsumcv</code>: Input-only file for unit measure conversion data (keyed).</li> <li><code>gsctwt</code>: Input-only file for container weight data (keyed).</li> </ul> </li> <li>Parameters (received via <code>*ENTRY PLIST</code>, assumed):<ul> <li><code>CO</code> (2 characters): Company number.</li> <li><code>PROD</code> (4 characters): Product code.</li> <li><code>CNTR</code> (3 alphanumeric characters, JB09): Container code.</li> <li><code>UM</code> (unit of measure, e.g., 'LBS', 'GAL', 'KG', 'ECH').</li> <li><code>SQTY</code> (quantity in input unit of measure).</li> <li><code>GRAV</code> (specific gravity, used for conversions).</li> <li>Output parameters: <code>NETLBS</code> (net pounds, 7 digits), <code>NGAL</code> (net gallons, 7 digits), <code>SHPLBS</code> (shipping weight in pounds, 7 digits).</li> </ul> </li> <li>Work Fields:<ul> <li><code>HLD6</code> (6 characters): Temporary field for key construction.</li> <li><code>WTKEY</code> (9 characters): Key for <code>gsctwt</code> (company, product, container).</li> <li><code>KYGRAV</code> (specific gravity for <code>MINLBGL1</code> call).</li> <li><code>KYFACT</code> (conversion factor, initialized to zero).</li> <li><code>P@LBS</code>, <code>P@GAL</code> (parameters for <code>MINLBGL1</code> call).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>88: Used for <code>gsctwt</code> chain and delete/inactive status checks (<code>WTDEL='D'</code> or <code>'I'</code>).</li> <li>Other indicators (e.g., 77 for <code>gsctum</code> chain) assumed from standard RPGLE usage.</li> </ul> </li> <li> <p>Quantity Conversion to Pounds and Gallons:</p> </li> <li> <p>Step 1: Check Unit of Measure (<code>UM</code>):</p> <ul> <li>If <code>UM='LBS'</code>:</li> <li>Sets <code>NETLBS = SQTY</code> (input quantity is already in pounds).</li> <li>Calls <code>MINLBGL1</code> to convert pounds to gallons:<ul> <li>Parameters: <code>KYGRAV</code> (specific gravity), <code>P@LBS</code> (input pounds), <code>P@GAL</code> (output gallons).</li> <li>Sets <code>NGAL = P@GAL</code>.</li> </ul> </li> <li>Proceeds to shipping weight calculation (<code>ENDQTY</code> tag).</li> <li>If <code>UM='GAL'</code>:</li> <li>Sets <code>NGAL = SQTY</code> (input quantity is already in gallons).</li> <li>Calls <code>MINLBGL1</code> to convert gallons to pounds:<ul> <li>Parameters: <code>KYGRAV</code>, <code>P@LBS</code> (output pounds), <code>P@GAL</code> (input gallons).</li> <li>Sets <code>NETLBS = P@LBS</code>.</li> </ul> </li> <li>Proceeds to shipping weight calculation.</li> <li>If <code>UM='KG'</code> (JB10):</li> <li>Converts kilograms to pounds: <code>NETLBS = SQTY * 2.20462</code>.</li> <li>Calls <code>MINLBGL1</code> to convert pounds to gallons:<ul> <li>Parameters: <code>KYGRAV</code>, <code>P@LBS</code> (input pounds), <code>P@GAL</code> (output gallons).</li> <li>Sets <code>NGAL = P@GAL</code>.</li> </ul> </li> <li>Proceeds to shipping weight calculation.</li> <li>If <code>UM='ECH'</code> (each, assumed for containers):</li> <li>Chains to <code>gsctum</code> using key (company <code>CO</code>, product <code>PROD</code>, container <code>CNTR</code>, unit of measure <code>UM</code>).</li> <li>If record found and not deleted (<code>N77</code>, <code>CTDEL&lt;&gt;'D'</code>):<ul> <li>Multiplies <code>SQTY</code> by <code>CTGAL</code> (gallons per unit) to get <code>NGAL</code>.</li> <li>Calls <code>MINLBGL1</code> to convert gallons to pounds:</li> <li>Parameters: <code>KYGRAV</code>, <code>P@LBS</code> (output pounds), <code>P@GAL</code> (input gallons).</li> <li>Sets <code>NETLBS = P@LBS</code>.</li> </ul> </li> <li>If no record or deleted (<code>77</code> or <code>CTDEL='D'</code>):<ul> <li>Chains to <code>gsumcv</code> using key (company <code>CO</code>, unit of measure <code>UM</code>).</li> <li>If record found and not deleted (<code>N77</code>, <code>CVDEL&lt;&gt;'D'</code>):</li> <li>Multiplies <code>SQTY</code> by <code>CVFACT</code> (conversion factor) to get <code>NGAL</code>.</li> <li>Calls <code>MINLBGL1</code> to convert gallons to pounds.</li> <li>If no record or deleted, uses <code>SQTY * 1</code> for <code>NGAL</code> (JB01).</li> <li>Calls <code>MINLBGL1</code> to convert gallons to pounds.</li> </ul> </li> <li>Proceeds to shipping weight calculation.</li> <li>Other Units of Measure:</li> <li>Chains to <code>gsumcv</code> to get conversion factor (<code>CVFACT</code>).</li> <li>If found and not deleted, multiplies <code>SQTY</code> by <code>CVFACT</code> to get <code>NGAL</code> (JB07 for non-LBS/GAL/ECH units).</li> <li>If not found, uses <code>SQTY * 1</code> for <code>NGAL</code> (JB11).</li> <li>Calls <code>MINLBGL1</code> to convert gallons to pounds.</li> <li>Proceeds to shipping weight calculation.</li> </ul> </li> <li> <p>Shipping Weight Calculation (JB02, JB05):</p> </li> <li>Constructs key <code>WTKEY</code> (company <code>CO</code>, product <code>PROD</code>, container <code>CNTR</code>) for <code>gsctwt</code>.</li> <li>Chains to <code>gsctwt</code> using <code>WTKEY</code> (indicator 88).</li> <li>If record found and not deleted or inactive (<code>N88</code>, <code>WTDEL&lt;&gt;'D'</code> or <code>'I'</code>):<ul> <li>Multiplies container quantity (<code>CTQT</code>) by gross weight (<code>WTGROS</code>) to get <code>SHPLBS</code> (shipping weight, including packaging).</li> <li>Proceeds to program end (<code>ENDGWT</code> tag).</li> </ul> </li> <li> <p>If no record or deleted/inactive:</p> <ul> <li>If <code>UM='LBS'</code>, sets <code>SHPLBS = NETLBS</code>.</li> <li>If <code>UM='GAL'</code>, sets <code>SHPLBS = NETLBS</code> (calculated via <code>MINLBGL1</code>).</li> <li>For other units, sets <code>SHPLBS = NETLBS</code> (JB05).</li> <li>Proceeds to program end.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Jumps to <code>ENDQTY</code> tag, then <code>ENDGWT</code> tag for shipping weight.</li> <li>Returns output parameters: <code>NETLBS</code> (net pounds), <code>NGAL</code> (net gallons), <code>SHPLBS</code> (shipping weight).</li> <li>Sets last record indicator (<code>LR</code>, assumed) to exit.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Quantity Conversion:</li> <li>Converts order quantity (<code>SQTY</code>) from input unit of measure (<code>UM</code>) to net pounds (<code>NETLBS</code>) and net gallons (<code>NGAL</code>).</li> <li>For <code>UM='LBS'</code>, <code>NETLBS = SQTY</code>, then converts to gallons using <code>MINLBGL1</code>.</li> <li>For <code>UM='GAL'</code>, <code>NGAL = SQTY</code>, then converts to pounds using <code>MINLBGL1</code>.</li> <li>For <code>UM='KG'</code>, converts kilograms to pounds (<code>SQTY * 2.20462</code>) and then to gallons (JB10).</li> <li>For <code>UM='ECH'</code>, uses <code>gsctum</code> (gallons per unit) or <code>gsumcv</code> (conversion factor) to get <code>NGAL</code>, then converts to pounds.</li> <li>For other units, uses <code>gsumcv</code> conversion factor or defaults to <code>SQTY * 1</code> (JB01, JB11).</li> <li> <p>For non-LBS/GAL/ECH units, converts <code>NGAL</code> to <code>SQTY</code> using gallon-based factor (<code>CVFACT</code>) instead of gross gallons (JB07).</p> </li> <li> <p>Shipping Weight Calculation:</p> </li> <li>Uses <code>gsctwt</code> to calculate gross shipping weight (<code>SHPLBS</code>) including packaging if record exists and is not deleted/inactive (JB02).</li> <li>If no valid <code>gsctwt</code> record, uses <code>NETLBS</code> as <code>SHPLBS</code> for all units of measure (JB05).</li> <li> <p>Gross weight calculations prioritize pounds-to-unit conversion over gallons-to-unit if possible (JB06).</p> </li> <li> <p>GVW-Tare Calculations:</p> </li> <li>Calculates gross gallons from pounds, then derives net gallons (JB03).</li> <li> <p>For GVW-Tare, prioritizes pounds-to-unit conversion; if not possible, uses gallons-to-unit (JB06).</p> </li> <li> <p>Data Validation:</p> </li> <li>Validates container (<code>CNTR</code>) as alphanumeric (JB09).</li> <li>Checks for deleted records in <code>gsctum</code> (<code>CTDEL='D'</code>) and <code>gsumcv</code> (<code>CVDEL='D'</code>).</li> <li> <p>Checks for deleted/inactive records in <code>gsctwt</code> (<code>WTDEL='D'</code> or <code>'I'</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>If no conversion factor is found in <code>gsumcv</code>, uses a factor of 1 (JB01, JB11) to avoid errors.</li> <li>Relies on <code>MINLBGL1</code> for accurate pounds-to-gallons conversion, reducing user errors (JB04, JB10).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>gsctum: Input-only customer unit of measure file (keyed).</li> <li>Fields: <code>CO</code> (company), <code>PROD</code> (product), <code>CNTR</code> (container), <code>UM</code> (unit of measure), <code>CTGAL</code> (gallons per unit), <code>CTDEL</code> (delete flag).</li> <li>gsumcv: Input-only unit measure conversion file (keyed).</li> <li>Fields: <code>CO</code> (company), <code>UM</code> (unit of measure), <code>CVFACT</code> (conversion factor), <code>CVDEL</code> (delete flag).</li> <li>gsctwt: Input-only container weight file (keyed).</li> <li>Fields: <code>WTKEY</code> (company, product, container), <code>CTQT</code> (container quantity), <code>WTGROS</code> (gross weight), <code>WTDEL</code> (delete/inactive flag).</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program:</p> <ol> <li>MINLBGL1:</li> <li>Called to convert between pounds and gallons (JB04).</li> <li>Parameters:<ul> <li><code>KYGRAV</code> (specific gravity): Input for conversion formula.</li> <li><code>P@LBS</code> (pounds): Input or output, depending on conversion direction.</li> <li><code>P@GAL</code> (gallons): Input or output, depending on conversion direction.</li> </ul> </li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/MBBQTY%20RPGLE/#summary","title":"Summary","text":"<p>The <code>MBBQTY</code> RPGLE program, called as a module by <code>BB113</code> or other programs (including potentially <code>BB101.ocl36.txt</code>), converts order quantities from various units of measure (<code>LBS</code>, <code>GAL</code>, <code>KG</code>, <code>ECH</code>, etc.) to net pounds (<code>NETLBS</code>), net gallons (<code>NGAL</code>), and shipping weight (<code>SHPLBS</code>). It uses <code>gsctum</code>, <code>gsumcv</code>, and <code>gsctwt</code> for conversion factors and weights, and calls <code>MINLBGL1</code> for pounds-to-gallons conversions. Business rules ensure accurate conversions, prioritize pounds-based calculations, and handle missing data with default factors. The program interacts with three files and relies on <code>MINLBGL1</code> for precise calculations, supporting order processing in the Customer Orders system.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/","title":"Summary BB101 OCL","text":""},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#summary-of-use-cases-implemented-by-the-programs","title":"Summary of Use Cases Implemented by the Programs","text":"<p>The provided programs (<code>BB101</code>, <code>BB001</code>, <code>BB003</code>, <code>BB005</code>, <code>BB215</code>, and <code>IN805BC</code>) form part of an order entry system on an IBM AS/400 (iSeries) platform, called by the main OCL program <code>BB101.ocl36.txt</code>. Below is a summary of the use cases implemented by each program, as previously detailed:</p> <ol> <li>BB101 (Order Entry and Management):</li> <li> <p>Manages the creation, validation, updating, and finalization of sales orders, handling header, detail, and miscellaneous line items, including freight and tax calculations, and ensuring compliance with business rules.</p> </li> <li> <p>BB001 (Batch Management for Order Entry):</p> </li> <li> <p>Creates, selects, updates, or deletes order batches, ensuring proper batch number assignment, user-specific locking, and compatibility with the order entry mode (e.g., standard or viscosity entry).</p> </li> <li> <p>BB003 (Batch Transaction Record Deletion):</p> </li> <li> <p>Deletes records from order transaction files (<code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>) associated with a deleted batch, maintaining data consistency by removing all records linked to a company and order number.</p> </li> <li> <p>BB005 (Batch Status Update for Order Processing):</p> </li> <li> <p>Updates the status of an order batch to release, mark for pick list, mark as bill of lading printed, or post the batch, facilitating progression through the order entry workflow.</p> </li> <li> <p>BB215 (Order Lockout Removal):</p> </li> <li> <p>Clears lock status and workstation ID fields in order header records (<code>BBORDRH</code>) for orders identified in transaction records (<code>BBORTR</code>), ensuring orders are accessible after batch deletion or lock-inducing activities.</p> </li> <li> <p>IN805BC (Work File Preparation for Tank Total Accumulation):</p> </li> <li>Creates and populates temporary work files (<code>INWZHW</code>, <code>INWZ10W</code>) in <code>QTEMP</code> by copying data from S/36 files, enabling tank total accumulation for inventory processing.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#function-requirement-document-integrated-order-entry-and-batch-processing","title":"Function Requirement Document: Integrated Order Entry and Batch Processing","text":"<p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#integrated-order-entry-and-batch-processing-function-requirements","title":"Integrated Order Entry and Batch Processing Function Requirements","text":""},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#overview","title":"Overview","text":"<p>The Integrated Order Entry and Batch Processing function manages the end-to-end order entry process in an IBM AS/400 system, including batch creation, order entry, transaction cleanup, batch status updates, lockout removal, and inventory work file preparation. It ensures accurate order processing, data consistency, and inventory alignment.</p>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Batch Inputs:</li> <li>Batch Number (1-99), Program Mode ('O', 'L', 'B', 'P'), Batch Source (e.g., 'PP'), User ID, Workstation ID, Record Count, Delete Flag ('D' or blank).</li> <li>Order Inputs:</li> <li>Company Number (2 chars), Order Number (6 digits), Customer Number, Ship-to Number, Order/PO/Delivery Dates, Freight Code ('C', 'P', 'A', 'CYY'), Carrier ID, Product Code, Container Code, Quantity, Unit Price, Miscellaneous Line Details, Tax Codes/Amounts (up to 10), Remarks, Customer-Owned Product Flag ('Y' or blank), Hand Ticket Number, Incoterms, Country Code.</li> <li>Inventory Inputs:</li> <li>File Group (1 char, e.g., 'G'), Company Number (2 chars).</li> <li>Lockout Removal Inputs:</li> <li>Company Number, Order Number.</li> </ul>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Create or Select Batch:</li> <li>Generate new batch number (1-99, reset at 99) or select existing batch.</li> <li>Set batch source, user, workstation, and creation date; update record count.</li> <li> <p>Validate batch availability (not locked by another user or deleted).</p> </li> <li> <p>Enter and Validate Order:</p> </li> <li>Create/update order header (<code>BBORTR</code>) with customer, ship-to, dates, freight, and carrier details.</li> <li>Validate company, customer, ship-to, dates (not &gt;30 days past or holidays), carrier (active, not 'CC', 'CT', 'SCO'), and bill-to PO#.</li> <li>Add line items with product, container, quantity, and price; validate against master files (<code>GSPROD</code>, <code>GSCNTR1</code>, <code>GSCTWT</code>).</li> <li>For customer-owned products (<code>COON='Y'</code>), bypass inventory/credit checks, force no-charge, and zero miscellaneous quantities.</li> <li>Process miscellaneous lines (e.g., surcharges, hide seq 940+/950).</li> <li> <p>Validate tax codes/amounts and allow overrides.</p> </li> <li> <p>Calculate Freight and Quantities:</p> </li> <li>Compute freight based on freight code:<ul> <li>Collect (<code>C</code>): Customer/Product price = 1.00, Freight = 0.00.</li> <li>PPD&amp;ADD (<code>A</code>): Customer/Product price = 1.00, Freight = 0.25.</li> <li>Prepaid (Rack): Customer/Product price = 1.00, Freight = 0.25.</li> <li>Prepaid (Sales Agreement): Customer price = 1.00, Product price = 0.75, Freight = 0.25.</li> <li>Collect with Service Fee (<code>CYY</code>): $100 fee, freight by carrier.</li> </ul> </li> <li>Auto-populate carrier ID from top 5 preferences if blank.</li> <li>Calculate gross/net gallons, shipping weight, and unit measure quantities; ensure load volume \u2264 7/0.</li> <li> <p>Warn if freight calculation requested but none calculated.</p> </li> <li> <p>Prepare Inventory Work Files:</p> </li> <li>Create <code>QTEMP/INWZHW</code> and <code>QTEMP/INWZ10W</code> from <code>DATA</code> (production, <code>P$FGRP='G'</code>) or <code>DATADEV</code> (development).</li> <li> <p>Copy S/36 files (e.g., <code>GINWZH</code>, <code>GINWZ10</code>) to work files, replacing records without validation.</p> </li> <li> <p>Finalize Order and Batch:</p> </li> <li>Validate no override codes ('X') on detail lines.</li> <li>Check for duplicate orders/hand tickets (include customer, ignore deleted).</li> <li>Update supplemental files (<code>BBOTHS1</code>, <code>BBOTDS1</code>), remarks, and totals.</li> <li> <p>Update batch status (<code>BBBTCH</code>):</p> <ul> <li>Release (<code>O</code>): Clear locks.</li> <li>Pick List (<code>L</code>): Clear locks.</li> <li>Bill of Lading (<code>B</code>): Clear locks, set BOL printed ('Y').</li> <li>Post (<code>P</code>): Mark deleted ('D'), set lock to 'P'.</li> </ul> </li> <li> <p>Delete Batch Transactions (if deleted):</p> </li> <li> <p>Remove records from <code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code> matching company/order number.</p> </li> <li> <p>Remove Order Lockouts:</p> </li> <li>Clear lock status and workstation ID in <code>BBORDRH</code> for orders matching company/order number from <code>BBORTR</code>.</li> </ol>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Management:</li> <li>Batch numbers 1-99, reset at 99; creation restricted to order entry mode (<code>PGM='O'</code>).</li> <li>Batch source must match mode (e.g., 'PP'); locked batches accessible only by locking user.</li> <li>Deleted batches skip selection; deletion requires confirmation.</li> <li>Order Validation:</li> <li>Validate company, customer, ship-to, dates, carrier, and PO#.</li> <li>Customer-owned products bypass inventory/credit checks, force no-charge, and zero miscellaneous quantities.</li> <li>Freight codes consistent across line items; railcar orders prohibit multi-load, require 'C'/'L'.</li> <li>Inactive rack prices block orders; stock depletion allows override.</li> <li>Calculations:</li> <li>Freight calculated per code; warn if none calculated when requested.</li> <li>Quantities/weights calculated for totals; load volume capped at 7/0.</li> <li>Inventory Files:</li> <li>Work files in <code>QTEMP</code>; production uses <code>DATA</code>, development uses <code>DATADEV</code>.</li> <li>Data copied without validation for S/36 compatibility.</li> <li>Batch Status:</li> <li>Update status per mode; posting marks deletion.</li> <li>Transaction Cleanup:</li> <li>Delete all transaction records for deleted batches.</li> <li>Lockout Removal:</li> <li>Clear locks for matching order headers post-deletion.</li> </ul>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Batch Records: Updated <code>BBBTCH</code> with status, locks, and counts.</li> <li>Order Records: Updated <code>BBORTR</code>, <code>BBTRTX</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code> with order data.</li> <li>Work Files: Populated <code>QTEMP/INWZHW</code>, <code>INWZ10W</code> for inventory.</li> <li>Unlocked Orders: Updated <code>BBORDRH</code> with cleared locks.</li> <li>Deleted Transactions: Removed records from <code>BBORCL</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>.</li> <li>Error/Warning Messages: For invalid inputs, duplicates, or calculation issues.</li> </ul>"},{"location":"order-entry/BB101%20Order%20Entry%20or%20Update/Summary%20BB101%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>BBBTCH</code>, <code>BBORTR</code>, <code>BBORCL</code>, <code>BBTRTX</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBOTA1</code>, <code>BBORDRH</code>, <code>GSPROD</code>, <code>GSCNTR1</code>, <code>BBCAID</code>, <code>GSCTWT</code>, <code>GSCTUM</code>, <code>GSUMCV</code>, <code>GSTABL</code>, <code>ARCUST</code>, <code>ARCUSX</code>, <code>BBSHSA</code>, <code>BBPRXR</code>, <code>GLMAST</code>, <code>GSMLCD</code>, <code>ARCUPR</code>, <code>BICUAX</code>, <code>INWZHW</code>, <code>INWZ10W</code>.</li> <li>Programs:</li> <li><code>BB1011</code>, <code>BB1014</code>, <code>BB1015</code>, <code>BB1018</code>, <code>BB101F</code>, <code>BB106</code>, <code>BB1033</code>, <code>BB115</code>, <code>BB104A</code>, <code>BB811</code>, <code>AR822R</code>, <code>MBBQTY</code>, <code>IN805</code>, <code>LCSTSHP</code>, <code>MSHPADR</code>, <code>MGSTABL</code>.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/","title":"BB001 RPG36","text":"<p>The <code>BB001.rpg36.txt</code> is an RPG II program running on an IBM System/36, designed for Order Entry Batch Selection. It is called by the <code>BB110P.ocl36</code> program to manage batch selection, creation, updating, and deletion for order entry processes, such as generating picking tickets. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/#process-steps-of-the-bb001-rpg-program","title":"Process Steps of the BB001 RPG Program","text":"<p>The program handles batch selection, creation, updating, and deletion through a series of subroutines and screen interactions. It uses the <code>BBBTCH</code> and <code>BBBTCHX</code> files to store batch information and manages user input via the <code>SCREEN</code> workstation file. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Main Line):</li> <li>Lines 0065\u20130068: Resets indicators (50, 21, 22, 23, 24, 75, 76) and clears the <code>MSG</code> field to blanks, preparing for screen output and error handling.</li> <li>Line 0070: Calls the <code>ONETIM</code> subroutine to perform one-time initialization tasks.</li> <li> <p>Lines 0072\u20130074: Depending on the screen format (01, 02, or 03), calls subroutines <code>S1</code>, <code>S2</code>, or <code>S3</code> to handle specific user interactions.</p> </li> <li> <p>ONETIM Subroutine (Lines 0100\u20130114):</p> </li> <li>Line 0102: Clears the <code>CANCEL</code> field and initializes counters (<code>BLIM</code>, <code>Z2</code>, <code>Z7</code>, <code>Z8</code>) to zero.</li> <li>Line 0104: Positions the <code>BBBTCH</code> file at the beginning (<code>SETLL</code> with <code>BLIM</code>).</li> <li>Line 0105: Calls <code>DRLFWD</code> to read the first batch record.</li> <li>Line 0106: Sets indicators 21 and 83 for screen control.</li> <li> <p>Lines 0107\u20130112: Checks the <code>PGM</code> field (from LDA, offset 504):</p> <ul> <li>If <code>PGM = 'O'</code> (Order Entry), clears indicator 44.</li> <li>If <code>PGM \u2260 'O'</code>, sets indicator 44, indicating a different mode (e.g., posting or printing).</li> </ul> </li> <li> <p>S1 Subroutine (Lines 0116\u20130212) \u2013 Batch Selection or Creation:</p> </li> <li>Lines 0119\u20130122: If the <code>KG</code> key (likely a cancel key) is pressed, sets <code>CANCEL</code> to <code>'CANCEL'</code>, sets the Last Record (LR) indicator, and exits to <code>ENDS1</code>.</li> <li>Line 0124: Checks if <code>BTCH#X</code> (user-entered batch number) is zero, indicating a new batch creation.</li> <li>New Batch Creation (Lines 0127\u20130166):<ul> <li>If <code>PGM \u2260 'O'</code>, displays error message \"CANNOT CREATE A BATCH NOW\" (COM,2), sets indicators 90, 21, 51, and exits.</li> <li>Otherwise, retrieves the next batch number (<code>ABNXTB</code>) from <code>BBBTCHX</code> (line 0136).</li> <li>Increments <code>ABNXTB</code>, updates the file (<code>EXCPTUPDNXB</code>), and handles overflow (if <code>ABNXTB = 99</code>, resets to 1).</li> <li>Sets fields for the new batch: <code>LKDESC</code> (description), <code>PRTD = 'N'</code> (not printed), <code>DATE</code> (creation date), <code>LUDT</code> (last update date, initially zero), <code>#REC</code> (record count, initially zero).</li> <li>Checks if the batch number exists in <code>BBBTCHX</code>. If not, adds a new record (<code>EXCPTADDBCH</code>) and sets LR to exit.</li> </ul> </li> <li> <p>Existing Batch Selection (Lines 0170\u20130209):</p> <ul> <li>If <code>BTCH#X \u2260 0</code>, sets <code>BATCH# = BTCH#X</code> and retrieves the batch from <code>BBBTCHX</code>.</li> <li>Validates:</li> <li>If the batch is deleted (<code>ABDEL = 'D'</code>) or <code>BATCH# = 99</code>, displays error \"INVALID BATCH NO.\" (COM,1) and exits.</li> <li>If <code>ABLOCK = 'O'</code> and <code>PGM = 'P'</code>, displays error \"BATCH # IN USE--CANNOT POST NOW\" (COM,5) and exits.</li> <li>If <code>PAR13C \u2260 ABSRCE</code> (batch source mismatch), displays error \"INVALID BATCH NO.\" and exits (added 10/27/09).</li> <li>If the batch is locked (<code>ABLOCK \u2260 *BLANK</code>) and the user isn\u2019t the one who locked it (<code>ABUSER \u2260 USER</code>), displays error \"BATCH # IN USE--PLEASE CHOOSE ANOTHER\" (COM,3), releases the batch (<code>EXCPTRELBCH</code>), and exits.</li> <li>If valid, retrieves batch fields (<code>LKDESC</code>, <code>PRTD</code>, <code>DATE</code>, <code>LUDT</code>, <code>#REC</code>) and updates the batch record (<code>EXCPTUPDBCH</code>) if not deleted.</li> <li>If <code>DEL = 'D'</code>, displays \"CMD 4 - TO DELETE EXISTING BATCH\" (COM,4) and prepares for deletion confirmation.</li> <li>If <code>PGM = 'P'</code>, sets indicator 24 to indicate posting mode.</li> </ul> </li> <li> <p>S2 Subroutine (Lines 0214\u20130240) \u2013 Batch Confirmation or Deletion:</p> </li> <li>Lines 0217\u20130227: If the <code>KA</code> key is pressed or deletion is not confirmed (<code>DEL \u2260 'D'</code>), repositions <code>BBBTCH</code> with <code>SETLL</code>, calls <code>DRLFWD</code> to display the next batch, and exits to <code>ENDS2</code>.</li> <li>Lines 0229\u20130232: If deletion is confirmed (<code>DEL = 'D'</code> and <code>KD</code> key pressed), executes <code>EXCPTDELBCH</code> to mark the batch as deleted and sets LR to exit.</li> <li> <p>Lines 0235\u20130238: If a new batch number is provided, checks if it exists in <code>BBBTCHX</code>. If not, adds it (<code>EXCPTADDBCH</code>) and sets LR.</p> </li> <li> <p>S3 Subroutine (Lines 0242\u20130254) \u2013 Reset or Cancel Batch:</p> </li> <li>If the <code>KG</code> key is pressed, retrieves the batch (<code>BATCH#</code>) from <code>BBBTCHX</code>.</li> <li> <p>If found, saves the batch state (<code>EXCPTSAVBCH</code>), sets <code>CANCEL = 'CANCEL'</code>, clears indicators, and sets LR to exit.</p> </li> <li> <p>DRLFWD Subroutine (Lines 0256\u20130308) \u2013 Display Forward Navigation:</p> </li> <li>Reads the next record from <code>BBBTCH</code> and populates the display arrays (<code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>) for up to 10 records.</li> <li>Skips deleted records (<code>ABDEL = 'D'</code>) or records where <code>ABSRCE \u2260 PAR13C</code> (batch source mismatch, added 10/20/17).</li> <li>Sets lock status messages based on <code>ABLOCK</code> (e.g., \"AVAILABLE\", \"ORD ENTRY\", \"PICK LIST\", etc.).</li> <li> <p>If no more records are found or batch number is 99, sets indicator 68 and repositions the file.</p> </li> <li> <p>DRLBAK Subroutine (Lines 0323\u20130327) \u2013 Backward Navigation:</p> </li> <li> <p>Sets indicator 21 and exits (minimal logic, suggesting backward navigation is not fully implemented).</p> </li> <li> <p>DETCLR Subroutine (Lines 0310\u20130321) \u2013 Clear Display Arrays:</p> </li> <li> <p>Resets the display arrays (<code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>) to zeros or blanks.</p> </li> <li> <p>ROLLKY Subroutine (Lines 0079\u20130098) \u2013 Handle Roll Keys:</p> </li> <li>Checks the <code>STATUS</code> field for roll key codes (01122 for forward, 01123 for backward).</li> <li>Calls <code>DRLFWD</code> for forward scrolling or <code>DRLBAK</code> for backward scrolling.</li> <li> <p>Clears <code>STATUS</code> and resets indicator 09 after processing.</p> </li> <li> <p>Output Operations:</p> <ul> <li>SCREEN Output (Lines 0331\u20130370):</li> <li>Format <code>BB001S1</code>: Displays batch list with batch numbers, lock status, workstation ID, print status, user, dates, and record count.</li> <li>Format <code>BB001S2</code>: Confirms batch details for update or deletion.</li> <li>Format <code>BB001S3</code>: Displays batch details for reset/cancel.</li> <li>BBBTCHX Output (Lines 0371\u20130403):</li> <li><code>UPDNXB</code>: Updates the next batch number.</li> <li><code>ADDBCH</code>: Adds a new batch record with <code>BATCH#</code>, <code>PGM</code>, <code>WSID</code>, <code>PRTD</code>, <code>USER</code>, <code>DATE</code>, <code>LUDT</code>, <code>#REC</code>, and <code>PAR13C</code>.</li> <li><code>UPDBCH</code>: Updates an existing batch with <code>PGM</code>, <code>WSID</code>, and <code>LUDT</code>.</li> <li><code>DELBCH</code>: Marks a batch as deleted (<code>DEL = 'D'</code>).</li> <li><code>RELBCH</code>: Releases a batch lock.</li> <li><code>SAVBCH</code>: Saves the batch lock status and workstation ID.</li> </ul> </li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Batch Creation:</li> <li>Only allowed in Order Entry mode (<code>PGM = 'O'</code>).</li> <li>Uses the next available batch number (<code>ABNXTB</code>) from <code>BBBTCHX</code>, incrementing it and resetting to 1 if it reaches 99.</li> <li> <p>New batches are initialized with <code>PRTD = 'N'</code>, zero records, and the current date.</p> </li> <li> <p>Batch Selection:</p> </li> <li>Validates that the batch exists, is not deleted (<code>ABDEL \u2260 'D'</code>), and is not numbered 99.</li> <li>Checks if the batch source (<code>ABSRCE</code>) matches the input parameter <code>PAR13C</code> (e.g., 'PP' for viscosity ASN or non-'PP').</li> <li> <p>Ensures the batch is not locked (<code>ABLOCK = *BLANK</code>) or is locked by the current user (<code>ABUSER = USER</code>).</p> </li> <li> <p>Batch Locking:</p> </li> <li>If a batch is locked (<code>ABLOCK \u2260 *BLANK</code>) and not by the current user, it cannot be accessed, and an error is displayed.</li> <li> <p>Locked batches display specific statuses (e.g., \"ORD ENTRY\", \"PICK LIST\", \"POSTING\", \"BOL PRINT\").</p> </li> <li> <p>Batch Deletion:</p> </li> <li>Users can mark a batch for deletion by entering <code>DEL = 'D'</code>, which is confirmed via screen format <code>BB001S2</code>.</li> <li> <p>Deletion updates the batch record with <code>ABDEL = 'D'</code>.</p> </li> <li> <p>Batch Source Validation (Added 10/27/09):</p> </li> <li> <p>Ensures the batch source (<code>ABSRCE</code>) matches the input parameter <code>PAR13C</code> to restrict access to batches of the correct type (e.g., 'PP' for viscosity ASN).</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays specific error messages for invalid batch numbers, locked batches, or attempts to create a batch outside Order Entry mode.</li> <li> <p>Uses <code>COM</code> array for standard messages (e.g., \"INVALID BATCH NO.\", \"BATCH # IN USE\").</p> </li> <li> <p>Navigation:</p> </li> <li>Supports forward scrolling through batch records, skipping deleted or mismatched records.</li> <li>Backward navigation is minimally implemented.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>SCREEN:</li> <li>Type: Workstation file (WORKSTN).</li> <li>Purpose: Displays batch selection, confirmation, and error messages to the user.</li> <li> <p>Formats: <code>BB001S1</code> (batch list), <code>BB001S2</code> (batch confirmation/deletion), <code>BB001S3</code> (batch reset/cancel).</p> </li> <li> <p>BBBTCH:</p> </li> <li>Type: Indexed disk file (48 bytes, logical file, shared access).</li> <li>Purpose: Stores batch control data for reading and positioning.</li> <li> <p>Fields: <code>ABDEL</code> (delete code), <code>ABBTCH</code> (batch number), <code>ABLOCK</code> (lock status), <code>ABLKWS</code> (lock workstation ID), <code>ABPRTD</code> (BOL printed), <code>ABUSER</code> (user ID), <code>ABDATE</code> (creation date), <code>ABLUDT</code> (last update date), <code>ABREC</code> (record count), <code>ABSRCE</code> (batch source), <code>ABNXTB</code> (next batch number).</p> </li> <li> <p>BBBTCHX:</p> </li> <li>Type: Indexed disk file (48 bytes, physical file, update-capable, shared access).</li> <li>Purpose: Stores and updates batch control data, including the next batch number.</li> <li>Fields: Same as <code>BBBTCH</code>.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>BB001</code> program does not explicitly call any external RPG programs. It operates independently, relying on file operations and user interactions via the <code>SCREEN</code> file.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB001%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB001</code> RPG program manages the selection, creation, updating, and deletion of order entry batches. It: - Initializes and displays batch lists for user selection. - Creates new batches in Order Entry mode, assigning unique batch numbers. - Validates batch accessibility based on lock status and batch source. - Supports batch deletion and updating, with error handling for invalid or locked batches. - Uses subroutines (<code>S1</code>, <code>S2</code>, <code>S3</code>, <code>DRLFWD</code>, <code>DRLBAK</code>, <code>DETCLR</code>, <code>ROLLKY</code>) to handle specific tasks.</p> <p>Tables Used: SCREEN, BBBTCH, BBBTCHX. External Programs Called: None.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/","title":"BB005 RPG36","text":"<p>The <code>BB005.rpg36.txt</code> is an RPG II program running on an IBM System/36, designed to release or post batches in the order entry process. It is called by the <code>BB110P.ocl36</code> program during the batch release phase. The program updates the <code>BBBTCH</code> file based on the program mode (<code>PGM</code>) and batch number (<code>BATCH#</code>). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/#process-steps-of-the-bb005-rpg-program","title":"Process Steps of the BB005 RPG Program","text":"<p>The program performs a single, focused task: updating the batch status in the <code>BBBTCH</code> file based on the mode specified in the <code>PGM</code> field. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Retrieve Batch Record:</li> <li> <p>Line 0011: Uses the batch number (<code>BATCH#</code>, from LDA offset 490\u2013491) to chain to the <code>BBBTCH</code> file. If the batch is not found, indicator 99 is set, and the program skips further processing.</p> </li> <li> <p>Process Batch Based on Program Mode:</p> </li> <li>Line 0013: If the batch is found (<code>N99</code>), enters a <code>DO</code> loop to process the batch update.</li> <li> <p>Lines 0015\u20130031: Checks the <code>PGM</code> field (from LDA offset 504) to determine the update type:</p> <ul> <li>If <code>PGM = 'O'</code> (Order Entry):</li> <li>Executes the <code>REL</code> output operation to release the batch.</li> <li>If <code>PGM = 'L'</code> (Pick List):</li> <li>Executes the <code>PICK</code> output operation to update the batch for pick list processing.</li> <li>If <code>PGM = 'B'</code> (Bill of Lading):</li> <li>Executes the <code>BOL</code> output operation to mark the batch as printed for the Bill of Lading.</li> <li>If <code>PGM = 'P'</code> (Posting):</li> <li>Executes the <code>POST</code> output operation to post the batch.</li> <li>Default (if <code>PGM</code> is none of the above):</li> <li>Executes the <code>REL</code> output operation as a fallback.</li> </ul> </li> <li> <p>Update Batch File:</p> </li> <li> <p>Lines 0038\u20130058: Defines output operations for <code>BBBTCH</code>:</p> <ul> <li>REL (Lines 0038\u20130041):</li> <li>Clears lock status (<code>ABLOCK</code>, position 6) to <code>' '</code>.</li> <li>Clears lock workstation ID (<code>ABLKWS</code>, position 8) to <code>'  '</code>.</li> <li>Updates record count (<code>ABREC</code>, position 32\u201339) with <code>RECCNT</code> (from LDA offset 475\u2013482).</li> <li>PICK (Lines 0043\u20130047):</li> <li>Clears lock status (<code>ABLOCK</code>, position 6) to <code>' '</code>.</li> <li>Clears lock workstation ID (<code>ABLKWS</code>, position 8) to <code>'  '</code>.</li> <li>Updates record count (<code>ABREC</code>, position 32\u201339) with <code>RECCNT</code>.</li> <li>BOL (Lines 0049\u20130053):</li> <li>Clears lock status (<code>ABLOCK</code>, position 6) to <code>' '</code>.</li> <li>Clears lock workstation ID (<code>ABLKWS</code>, position 8) to <code>'  '</code>.</li> <li>Sets BOL printed flag (<code>ABPRTD</code>, position 9) to <code>'Y'</code>.</li> <li>Updates record count (<code>ABREC</code>, position 32\u201339) with <code>RECCNT</code>.</li> <li>POST (Lines 0055\u20130058):</li> <li>Sets delete code (<code>ABDEL</code>, position 1) to <code>'D'</code>.</li> <li>Sets lock status (<code>ABLOCK</code>, position 6) to <code>'P'</code> (posted).</li> <li>Updates record count (<code>ABREC</code>, position 32\u201339) with <code>RECCNT</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Line 0035: Sets the Last Record (<code>LR</code>) indicator to terminate the program after processing.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Batch Existence:</li> <li> <p>The batch number (<code>BATCH#</code>) must exist in the <code>BBBTCH</code> file. If not found, no updates are performed, and the program exits.</p> </li> <li> <p>Program Mode Handling:</p> </li> <li> <p>The <code>PGM</code> field determines the batch update type:</p> <ul> <li><code>'O'</code>: Releases the batch, clearing lock fields.</li> <li><code>'L'</code>: Updates the batch for pick list processing, clearing lock fields.</li> <li><code>'B'</code>: Marks the batch as printed for the Bill of Lading, setting <code>ABPRTD = 'Y'</code>.</li> <li><code>'P'</code>: Posts the batch, marking it as deleted (<code>ABDEL = 'D'</code>) and setting <code>ABLOCK = 'P'</code>.</li> <li>Any other value defaults to releasing the batch (<code>REL</code>).</li> </ul> </li> <li> <p>Record Count Update:</p> </li> <li> <p>The record count (<code>RECCNT</code>, from LDA) is updated in the <code>BBBTCH</code> file\u2019s <code>ABREC</code> field for all operations.</p> </li> <li> <p>Lock Management:</p> </li> <li>For <code>REL</code>, <code>PICK</code>, and <code>BOL</code> operations, the batch is unlocked by clearing <code>ABLOCK</code> and <code>ABLKWS</code>.</li> <li> <p>For <code>POST</code>, the batch is marked as posted (<code>ABLOCK = 'P'</code>) and deleted (<code>ABDEL = 'D'</code>).</p> </li> <li> <p>Minimal Error Handling:</p> </li> <li>The program assumes valid input from the calling OCL program and does not perform extensive validation beyond checking if the batch exists.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>BBBTCH:</li> <li>Type: Indexed disk file (48 bytes, update-capable, shared access).</li> <li>Purpose: Stores and updates batch control data, including lock status, workstation ID, BOL printed flag, delete code, and record count.</li> <li>Fields Updated:<ul> <li><code>ABDEL</code> (position 1): Delete code (set to <code>'D'</code> for <code>POST</code>).</li> <li><code>ABLOCK</code> (position 6): Lock status (cleared to <code>' '</code> for <code>REL</code>, <code>PICK</code>, <code>BOL</code>; set to <code>'P'</code> for <code>POST</code>).</li> <li><code>ABLKWS</code> (position 7\u20138): Lock workstation ID (cleared to <code>'  '</code> for <code>REL</code>, <code>PICK</code>, <code>BOL</code>).</li> <li><code>ABPRTD</code> (position 9): BOL printed flag (set to <code>'Y'</code> for <code>BOL</code>).</li> <li><code>ABREC</code> (position 32\u201339): Record count (updated with <code>RECCNT</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>BB005</code> program does not explicitly call any external RPG programs. It performs a single, focused update operation on the <code>BBBTCH</code> file and relies on the calling OCL program (<code>BB110P.ocl36</code>) for context and further processing.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB005%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB005</code> RPG program is a simple utility that updates the <code>BBBTCH</code> file to release, process, or post a batch based on the <code>PGM</code> mode: - Retrieves the batch record using <code>BATCH#</code>. - Updates lock status, BOL printed flag, delete code, and record count based on the mode (<code>O</code>, <code>L</code>, <code>B</code>, or <code>P</code>). - Terminates after updating the batch.</p> <p>Tables Used: BBBTCH. External Programs Called: None.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/","title":"BB110 RPG36","text":"<p>The <code>BB110.rpg36.txt</code> is a complex RPG II program running on an IBM System/36, designed to print picking tickets, order confirmations, or proforma invoices for the order entry process. It is called by the <code>BB110P.ocl36</code> program after batch selection and validation in <code>BB110P</code>. The program processes order data, retrieves relevant information from multiple files, calculates totals, and generates formatted output for various report types, including specialized versions for EDI (Viscosity) and packaging plant pick lists. Numerous modifications (JB15\u2013JB62, DC01\u2013DC02, MG29\u2013MG64, JK01\u2013JK05) enhance its functionality to handle specific requirements like freight processing, product descriptions, and weight calculations. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/#process-steps-of-the-bb110-rpg-program","title":"Process Steps of the BB110 RPG Program","text":"<p>The program processes orders to generate picking tickets (<code>LIST</code>), traffic reports (<code>TRAFFP</code>), packaging plant pick sheets (<code>LIST2</code>), order confirmations (<code>LIST3</code>), or proforma invoices (<code>LIST4</code>). It retrieves order data, validates records, calculates weights and quantities, and updates files as needed. The steps are organized around the program\u2019s logic and output formats.</p> <ol> <li>Initialization:</li> <li>Initializes variables, clears fields (e.g., <code>HAZMAT</code>, <code>HMSHD1</code>\u2013<code>HMSHD4</code> in <code>HAZMAT</code> subroutine, JB05).</li> <li>Sets up arrays like <code>KYO</code> (order numbers) and <code>KYF</code> (freight processors) to process up to 10 orders.</li> <li> <p>Retrieves system date (<code>SYSDATY</code>) and time (<code>SYSTIM</code>) for printing.</p> </li> <li> <p>Order Retrieval and Validation:</p> </li> <li>Header Retrieval:<ul> <li>Uses <code>KYO</code> (order numbers) and <code>BOCO</code> (company number) to chain to <code>BBORTR</code> (order header file) to retrieve order details (e.g., <code>BOCUST</code>, <code>BOSHIP</code>, <code>BOFPCD</code>, <code>BOVERN</code>).</li> <li>Checks <code>BODEL</code> (delete code) to skip orders marked with <code>'E'</code> (EDI error, JB22) or <code>'D'</code> (deleted, JB28).</li> </ul> </li> <li>Detail Retrieval:<ul> <li>Chains to <code>BBOTDS1</code> for detail lines, retrieving fields like <code>BDQTY</code> (quantity), <code>BDGWT</code> (gross weight, JB43), <code>BDPRWT</code> (product weight, JB43), and <code>BDPRXR</code> (cross-reference product code, MG50).</li> <li>Skips detail lines where <code>BDDEL = 'D'</code> (deleted, JB17) to avoid including them in totals.</li> </ul> </li> <li> <p>Marks and Accessorials:</p> <ul> <li>Retrieves order remarks (<code>BXOMK1</code>\u2013<code>BXOMK4</code>), dispatch marks (<code>BXDSP1</code>\u2013<code>BXDSP4</code>), and BOL marks (<code>BXBMK1</code>\u2013<code>BXBMK4</code>, <code>BXFRNM</code>) from <code>BBORTO</code> and <code>BBOTA1</code>.</li> <li>Checks <code>BADSPH</code> (dispatch print flag, JB17) to include dispatch marks only when set to <code>'Y'</code>.</li> <li>Skips printing freight accessorials if <code>BAACCS = 'Y'</code> (JB17).</li> </ul> </li> <li> <p>Freight Processor Handling (JB05, JB27, JB28, DC01):</p> </li> <li>Subroutine UPDOTS (DC01):<ul> <li>Updates <code>BBOTHS1</code> with freight description (<code>BOFRDS</code>), carrier description (<code>BOTRAN</code>), and freight bill address (<code>BOFRNM</code>, <code>BOFRA1</code>, <code>BOFRA2</code>, etc.).</li> <li>For internal freight processors (<code>FPFPTY \u2260 'EXT'</code>, JB27), uses customer address fields (<code>FRNML</code>, <code>FRA1L</code>, etc.).</li> <li>For external freight processors (<code>FPFPTY = 'EXT'</code>), uses freight processor address (<code>FPNAME</code>, <code>FPADR1</code>, etc.) from <code>BBFRPR</code>.</li> </ul> </li> <li>Chains to <code>BBFRPR</code> to retrieve freight processor details (<code>FPNAME</code>, <code>FPADR1</code>, etc.) based on <code>BOFPCD</code>.</li> <li> <p>Updates <code>BOFPST</code> (freight processor status) and <code>BOVERN</code> (order version number) in <code>BBORTU</code>.</p> </li> <li> <p>Product and Container Processing:</p> </li> <li>Subroutine BOLDS2 (JB05):<ul> <li>Chains to <code>GSTABL</code> (type <code>CNTRCD</code>) using <code>BDCNTR</code> to retrieve container descriptions (<code>TBDES2</code>).</li> <li>Adjusts description for specific containers (e.g., clears <code>CNTSAV</code> for <code>'BRAD PEN'</code> if <code>DIVSAV \u2260 50</code>).</li> </ul> </li> <li>Container and Product Codes (JK03, JK05):<ul> <li>Uses <code>GSCNTR1</code> (replacing <code>GSCNTR</code>, JK03) for container codes and <code>GSPROD</code> (replacing <code>PRODCD</code> in <code>GSTABL</code>, JK05) for product codes.</li> <li>Retrieves product descriptions (<code>TBDES2</code>, <code>TBSHDS</code>) and container types (<code>TBCNTY</code>, JB19).</li> </ul> </li> <li> <p>Unit of Measure Conversion (JB23, JB31):</p> <ul> <li>Chains to <code>GSCTUM</code> for conversion factors (<code>CUCVFA</code>) to calculate quantities in gallons or pounds (JB31, calls <code>MINLBGL1</code> for calculations).</li> <li>Supports units like <code>'KG'</code>, <code>'LI'</code>, <code>'ML'</code>, <code>'OZ'</code> without requiring <code>GSUMCV</code> records (JB40, JB42).</li> </ul> </li> <li> <p>Weight and Quantity Calculations (JB24, JB43, JB47, MG55, MG58):</p> </li> <li>Calculates total gross weight (<code>L2GWT</code>), net weight (<code>L2NWT</code>, JB47), and gallons (<code>L2NGAL</code>, JB24) for printing.</li> <li>Uses <code>BDGWT</code> (gross weight in pounds, JB43) and <code>BDPRWT</code> (product weight, JB47) from <code>BBOTDS1</code>.</li> <li>Accumulates quantities (<code>L2CQT</code>) and miscellaneous charges (<code>L2TOT</code>) for non-deleted lines.</li> <li> <p>Adds quart conversion for container <code>420</code> (MG57).</p> </li> <li> <p>Address Handling (DC02, JB26, MG44, MG56):</p> </li> <li>Calls <code>MSHPADR</code> to retrieve compressed ship-to addresses, passing country code (<code>SDCTY</code>, JB26).</li> <li>Selects correct addresses for EDI <code>'PF'</code> orders (MG44, MG56) and railcar BOL orders (MG56).</li> <li> <p>Updates <code>SHPADR</code> with customer, ship-to, and freight bill addresses (<code>SDNAME</code>, <code>SDADR1</code>, etc.).</p> </li> <li> <p>Printing Reports:</p> </li> <li>Picking Ticket (LIST, U5):<ul> <li>Prints headers with order details (<code>BORDNOZ</code>, <code>BOCUSTZ</code>, <code>BOSHIP</code>, <code>BORQDT</code>, etc.).</li> <li>Includes EDI Viscosity version (JB15, JB18) with specific columns (<code>EDSC1</code>, <code>SDVPPT</code>, <code>SDGRSW</code>) and totals (<code>L2CQT</code>, <code>L2GWT</code>, <code>L2NGAL</code>).</li> <li>Prints dispatch marks (<code>BXDSP1</code>\u2013<code>BXDSP4</code>) if <code>BADSPH = 'Y'</code> (JB17).</li> <li>Marks orders on hold (<code>BOORPR = 'H'</code>, MG46) with \u201cON HOLD - DO NOT SHIP\u201d.</li> </ul> </li> <li>Packaging Plant Pick Sheet (LIST2, U5, JK02):<ul> <li>Prints headers similar to <code>LIST</code> but tailored for packaging plant (JB19, JB20).</li> <li>Includes columns for size (<code>SIZE</code>), brand (<code>PPBRND</code>, JB20), description (<code>PPDSC1</code>\u2013<code>PPDSC3</code>), quantity (<code>BDQTY</code>), gross weight (<code>BDGWT</code>), and gallons (<code>BDQTS</code>, MG58).</li> <li>Prints totals and order status (<code>P$SDSC</code>, JK01).</li> </ul> </li> <li>Order Confirmation (LIST3, U6, MG41):<ul> <li>Prints order details, customer and ship-to addresses, payment terms (<code>BOTERM</code>, <code>ARTDSC</code>), and Incoterms (<code>BOINCT</code>, JB38).</li> <li>Includes totals for net quantity (<code>L2CQT</code>), gross weight (<code>L2GWT</code>), net weight (<code>L2NWT</code>), and freight (<code>L2FRT</code>, MG63).</li> <li>Prints notes (<code>NTE</code> array) with standard terms and conditions.</li> </ul> </li> <li>Proforma Invoice (LIST4, U7, MG64):<ul> <li>Similar to <code>LIST3</code> but formatted for proforma invoices, skipping credit limit checks.</li> <li>Includes detailed headers, totals, and Incoterms.</li> </ul> </li> <li> <p>Traffic Report (TRAFFP, U5, MG29):</p> <ul> <li>Lists orders with multiple freight tables (<code>BFFTCN</code>, <code>BBORF</code>), including order number, customer, carrier, and requested date.</li> </ul> </li> <li> <p>File Updates:</p> </li> <li>Updates <code>BBOTHS1</code> with freight and carrier details (<code>UPDOTS</code>, DC01).</li> <li>Updates <code>BBORTU</code> with pick list printed flag (<code>BOPPIK = 'Y'</code>), freight processor status (<code>BOFPST</code>), and version number (<code>BOVERN</code>).</li> <li>Updates <code>BBOTDS1</code> with product descriptions (<code>PPDSC1</code>, <code>PPDSC2</code>, <code>PPDSC3</code>, JB51), size (<code>SIZE</code>), and hazmat details (<code>HAZMAT</code>, <code>HZDESC</code>).</li> <li>Adds or updates <code>BBSRNH</code> (shipping reference number) and <code>SHPADR</code> (shipment addresses) with order and customer details (JB14).</li> <li> <p>Releases record locks in <code>SHPADR</code> (<code>RELSHA</code>, JB25) and <code>BBOTHS1</code> (<code>RELOTS</code>, DC01).</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets <code>LR</code> indicator to exit after processing all orders and printing reports.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Order Validation:</li> <li>Skips orders with <code>BODEL = 'E'</code> (EDI error, JB22) or <code>BODEL = 'D'</code> unless sent to internal freight processor (JB28).</li> <li> <p>Skips detail lines with <code>BDDEL = 'D'</code> for totals and printing (JB17).</p> </li> <li> <p>Freight Processor Logic (JB27, JB28, DC01):</p> </li> <li>Internal Freight Processor (<code>FPFPTY \u2260 'EXT'</code>):<ul> <li>Uses customer address (<code>FRNML</code>, <code>FRA1L</code>, etc.) for freight billing.</li> </ul> </li> <li>External Freight Processor (<code>FPFPTY = 'EXT'</code>):<ul> <li>Uses freight processor address (<code>FPNAME</code>, <code>FPADR1</code>, etc.) from <code>BBFRPR</code>.</li> </ul> </li> <li>Freight bill address is passed to <code>BB113</code> for further processing (JB27).</li> <li> <p>Deleted orders are sent to internal freight processors (JB28).</p> </li> <li> <p>EDI and Packaging Plant Handling:</p> </li> <li>EDI Viscosity Pick List (JB15, JB18):<ul> <li>Formats pick list with specific columns (description, code, quantity, gross weight, part number).</li> <li>Adjusts column positions to avoid off-page printing (JB18, MG32).</li> </ul> </li> <li> <p>Packaging Plant Pick List (JB19, JB20, JB52):</p> <ul> <li>Prints size, brand, description, quantity, gross weight, and gallons.</li> <li>Right-justifies brand and renames \u201cCODE\u201d to \u201cPART #\u201d (JB20).</li> <li>Removes old refinery pick list formats, keeping EDI format (JB52).</li> </ul> </li> <li> <p>Weight and Quantity Calculations:</p> </li> <li>Gross weight (<code>L2GWT</code>) and net weight (<code>L2NWT</code>) are calculated from <code>BDGWT</code> and <code>BDPRWT</code> (JB43, JB47).</li> <li>Total gallons (<code>L2NGAL</code>) are calculated for pick lists (JB24).</li> <li>Quart conversions are applied for container <code>420</code> (MG57).</li> <li> <p>Skips gross weight recalculation as it\u2019s done in <code>BB101</code> (JB43).</p> </li> <li> <p>Printing Rules:</p> </li> <li>Prints \u201cON HOLD - DO NOT SHIP\u201d for orders with <code>BOORPR = 'H'</code> (MG46).</li> <li>Prints \u201cPRELIMINARY\u201d or \u201cFINAL PICK SHEET\u201d based on order status (<code>BOORPR = 'R'</code> or <code>'C'</code> for final, JB39).</li> <li>Includes Incoterms (<code>BOINCT</code>, JB38) and loading location (<code>GMMLDS</code>, <code>GMLOD1</code>\u2013<code>GMLOD3</code>, JB37) on pick sheets.</li> <li>Prints order status description (<code>P$SDSC</code>, JK01) on totals line.</li> <li>Skips freight total amount (<code>L2FRT</code>) printing (JB37).</li> <li> <p>Includes standard notes (<code>NTE</code>) on order confirmations and proforma invoices (MG41, MG64).</p> </li> <li> <p>File Updates:</p> </li> <li>Updates <code>BOPPIK = 'Y'</code> to mark pick list printed.</li> <li>Ensures product descriptions (<code>PPDSC1</code>\u2013<code>PPDSC3</code>) are written to <code>BBOTDS1</code> instead of <code>LIST</code> (JB51).</li> <li> <p>Releases record locks to prevent conflicts between jobs (JB25, DC01).</p> </li> <li> <p>Error Handling:</p> </li> <li>Validates records in <code>BBORTR</code>, <code>BBOTDS1</code>, <code>BBFRPR</code>, <code>GSTABL</code>, etc., using <code>CHAIN</code> operations.</li> <li>Handles missing records gracefully (e.g., tries blank container type if <code>ARCUPR</code> lookup fails, JB45).</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>BBORTR (Input, 553 bytes, indexed):</li> <li>Order header file, retrieves order details (e.g., <code>BOCUST</code>, <code>BOSHIP</code>, <code>BOFPCD</code>, <code>BOORPR</code>).</li> <li>BBOTHS1 (Update, 512 bytes, indexed):</li> <li>Order header supplemental file, updated with freight and carrier details (<code>BOFRDS</code>, <code>BOTRAN</code>, <code>BOFRNM</code>).</li> <li>BBOTDS1 (Update, 512 bytes, indexed):</li> <li>Order detail file, retrieves and updates quantities (<code>BDQTY</code>), weights (<code>BDGWT</code>, <code>BDPRWT</code>), and descriptions (<code>PPDSC1</code>\u2013<code>PPDSC3</code>).</li> <li>BBORTU (Update, 512 bytes, indexed):</li> <li>Order header update file, updates pick list flag (<code>BOPPIK</code>), freight processor status (<code>BOFPST</code>), and version number (<code>BOVERN</code>).</li> <li>BBOTA1 (Input, 512 bytes, indexed):</li> <li>Accessorials/marks file, retrieves remarks and dispatch marks (<code>BADESC</code>, <code>BXDSP1</code>\u2013<code>BXDSP4</code>).</li> <li>BBORCL (Input, 256 bytes, indexed):</li> <li>Order close file, checks over-limit status (<code>BLOVCL</code>) and authorization (<code>BLAUIN</code>).</li> <li>BBORTO (Input, 512 bytes, indexed):</li> <li>Order remarks file, retrieves order, invoice, and BOL remarks (<code>BXOMK1</code>\u2013<code>BXOMK4</code>, <code>BXBMK1</code>\u2013<code>BXBMK4</code>, <code>BXFRNM</code>).</li> <li>ARCUST (Input, 384 bytes, indexed):</li> <li>Customer master file, retrieves customer name (<code>ARNAME</code>) and address (<code>ARADR1</code>\u2013<code>ARADR4</code>).</li> <li>ARCUPR (Input, 80 bytes, indexed):</li> <li>Customer product file, retrieves custom product descriptions (<code>CPCPDS</code>) and container types (<code>CPCNTY</code>, JB45).</li> <li>SHIPTO (Input, 2048 bytes, indexed):<ul> <li>Ship-to address file, retrieves alternate pricing flags (<code>CSALTO</code>).</li> </ul> </li> <li>GSCONT (Input, 512 bytes, indexed):<ul> <li>Contract file, retrieves warehouse information (<code>GXWHSE</code>).</li> </ul> </li> <li>GSTABL (Input, 256 bytes, indexed):<ul> <li>Table file, retrieves container (<code>CNTRCD</code>) and product (<code>PRODCD</code>) descriptions, gravity (<code>TBGRAV</code>), and other attributes.</li> </ul> </li> <li>GSPRCT (Input, 256 bytes, indexed, MG48):<ul> <li>Product characteristics file, retrieves additional product details.</li> </ul> </li> <li>GSCTUM (Input, 64 bytes, indexed):<ul> <li>Unit of measure conversion file, retrieves conversion factors (<code>CUCVFA</code>) and issue units (<code>CUIUM</code>, VV04).</li> </ul> </li> <li>BICONT (Input, 256 bytes, indexed):<ul> <li>Company control file, retrieves company name (<code>BCNAME</code>).</li> </ul> </li> <li>GSHAZM (Input, 384 bytes, indexed, JB05):<ul> <li>Hazardous materials file, retrieves hazmat descriptions (<code>HMSHD1</code>\u2013<code>HMSHD4</code>).</li> </ul> </li> <li>BBFRPR (Input, 256 bytes, indexed, JB05):<ul> <li>Freight processor file, retrieves processor details (<code>FPNAME</code>, <code>FPADR1</code>, <code>FPCTRY</code>, <code>FPFPTY</code>).</li> </ul> </li> <li>BBSRNH (Update, 128 bytes, indexed, JB14):<ul> <li>Shipping reference number file, updated with order and freight processor details.</li> </ul> </li> <li>CUADR (Input, 448 bytes, indexed, JB14):<ul> <li>Customer address file, retrieves EDI address details (<code>CDNAME</code>, <code>CDADR1</code>, <code>CDCTY</code>).</li> </ul> </li> <li>SHPADR (Update, 448 bytes, indexed, JB14):<ul> <li>Shipment address file, updated with order-specific addresses (<code>SDNAME</code>, <code>SDADR1</code>, <code>SDZIP</code>).</li> </ul> </li> <li>EDICUS (Input, 384 bytes, indexed, JB14):<ul> <li>EDI customer file, retrieves shipper details for EDI <code>'856'</code> orders (<code>EISHNM</code>, <code>EISHA1</code>).</li> </ul> </li> <li>BBASND (Input, 512 bytes, indexed, JB15):<ul> <li>Advance ship notice file, retrieves vendor part (<code>SDVPPT</code>), buyer part (<code>SDBYPT</code>), and batch number (<code>SDBTCH</code>).</li> </ul> </li> <li>BBORF (Input, 640 bytes, indexed, MG29):<ul> <li>Freight table file, retrieves freight table count (<code>BFFTCN</code>) for traffic report.</li> </ul> </li> <li>GSMLCD (Input, 296 bytes, indexed, JB37):<ul> <li>Major location code file, retrieves loading location descriptions (<code>GMMLDS</code>, <code>GMLOD1</code>\u2013<code>GMLOD3</code>).</li> </ul> </li> <li>ARCUFMX (Input, 266 bytes, indexed):<ul> <li>Customer format file, retrieves email addresses (<code>EIFM</code> array) for confirmations.</li> </ul> </li> <li>GSCNTR1 (Input, 512 bytes, indexed, JK03):<ul> <li>Container file, replaces <code>GSCNTR</code> for container code lookup.</li> </ul> </li> <li>BBCAID (Input, 200 bytes, indexed, JK04):<ul> <li>Carrier ID file, replaces <code>BBCAID</code> type in <code>GSTABL</code> for carrier lookup.</li> </ul> </li> <li>GSPROD (Input, 512 bytes, indexed, JK05):<ul> <li>Product file, replaces <code>PRODCD</code> type in <code>GSTABL</code> for product lookup.</li> </ul> </li> </ol> <p>Output Files: 29. LIST (Output, 132 bytes, printer, U5):     - Prints standard picking tickets, including EDI Viscosity format. 30. TRAFFP (Output, 132 bytes, printer, U5):     - Prints traffic report for multiple freight tables. 31. LIST2 (Output, 132 bytes, printer, U5, JK02):     - Prints packaging plant pick sheets. 32. LIST3 (Output, 132 bytes, printer, U6, MG41):     - Prints order confirmations. 33. LIST4 (Output, 132 bytes, printer, U7, MG64):     - Prints proforma invoices.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ol> <li>MSHPADR (DC02, JB26):</li> <li>Retrieves compressed ship-to addresses, passing company, order, customer, ship-to, and country code (<code>SDCTY</code>).</li> <li>MINLBGL1 (JB31):</li> <li>Calculates gallons or pounds for unit of measure conversions, replacing <code>MINLBGL</code>.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB110</code> RPG program is a critical component of the order entry system, generating picking tickets, order confirmations, proforma invoices, and traffic reports. It: - Retrieves and validates order data from multiple files (<code>BBORTR</code>, <code>BBOTDS1</code>, etc.). - Handles specialized formats for EDI Viscosity (JB15, JB18) and packaging plant pick lists (JB19, JB20). - Processes freight details, distinguishing between internal and external processors (JB27, DC01). - Calculates weights, quantities, and gallons, updating files with descriptions, statuses, and addresses. - Prints detailed reports with headers, detail lines, totals, and notes, tailored to specific requirements.</p> <p>Tables Used: BBORTR, BBOTHS1, BBOTDS1, BBORTU, BBOTA1, BBORCL, BBORTO, ARCUST, ARCUPR, SHIPTO, GSCONT, GSTABL, GSPRCT, GSCTUM, BICONT, GSHAZM, BBFRPR, BBSRNH, CUADR, SHPADR, EDICUS, BBASND, BBORF, GSMLCD, ARCUFMX, GSCNTR1, BBCAID, GSPROD, LIST, TRAFFP, LIST2, LIST3, LIST4. External Programs Called: MSHPADR, MINLBGL1.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/","title":"BB110E RPG36","text":"<p>The <code>BB110E.rpg36.txt</code> is a minimal RPG II program running on an IBM System/36, designed to display a \"busy screen\" for the order entry picking ticket process and handle cancellation. It is called by the <code>BB110P.ocl36</code> program when the <code>BB110</code> program is active, likely to inform the user that a process is ongoing and to allow cancellation. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/#process-steps-of-the-bb110e-rpg-program","title":"Process Steps of the BB110E RPG Program","text":"<p>The program is straightforward, focusing on displaying a screen and handling a cancel request. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and Screen Display:</li> <li>Line C (before 0047): If indicator 01 is on (screen format active), indicator 10 is on (initial display), and the <code>KG</code> key (cancel key) is not pressed, clears indicator 10 to prevent reprocessing the initial display.</li> <li> <p>Line 0110: If indicator 09 is off (program is active), sets indicators 10 and 09 to control screen display and program state.</p> </li> <li> <p>Handle Cancel Request:</p> </li> <li>Line 0047: If the <code>KG</code> key is pressed, moves <code>'CANCEL'</code> to the <code>CANCEL</code> field (offset 300\u2013305 in the Local Data Area, LDA).</li> <li> <p>Line 0048: Clears indicators 01 and 10, sets the Last Record (<code>LR</code>) indicator to terminate the program, and returns control to the calling OCL program.</p> </li> <li> <p>Output to SCREEN:</p> </li> <li>Lines 0111\u20130112: Displays the <code>BB110EFM</code> format on the <code>SCREEN</code> workstation file when indicators 01 and 10 are on. This is likely a \"busy\" or \"processing\" screen to inform the user that the picking ticket process is active.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Busy Screen Display:</li> <li> <p>The program displays a \"busy\" screen (<code>BB110EFM</code>) to indicate that the picking ticket process (likely <code>BB110</code>) is active, preventing user interaction until the process completes or is canceled.</p> </li> <li> <p>Cancellation:</p> </li> <li>If the user presses the cancel key (<code>KG</code>), the program sets the <code>CANCEL</code> field to <code>'CANCEL'</code> in the LDA, which is checked by the calling OCL program (<code>BB110P.ocl36</code>) to terminate the process.</li> <li> <p>The program exits immediately after cancellation by setting the <code>LR</code> indicator.</p> </li> <li> <p>Indicator Management:</p> </li> <li>Indicator 10 controls the initial display of the busy screen.</li> <li>Indicator 09 tracks the program\u2019s active state.</li> <li>Indicator 01 indicates the screen format is active.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>SCREEN:</li> <li>Type: Workstation file (WORKSTN).</li> <li>Purpose: Displays the <code>BB110EFM</code> format, likely a \"busy\" or \"processing\" message to the user.</li> <li>Format: <code>BB110EFM</code>.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>BB110E</code> program does not explicitly call any external RPG programs. It is a standalone program that displays a screen and updates the LDA for cancellation, relying on the calling OCL program (<code>BB110P.ocl36</code>) for further processing.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110E%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB110E</code> RPG program is a simple utility that: - Displays a \"busy\" screen (<code>BB110EFM</code>) to indicate that the picking ticket process is active. - Allows the user to cancel the process by pressing the <code>KG</code> key, updating the <code>CANCEL</code> field in the LDA. - Manages program flow with indicators and terminates upon cancellation.</p> <p>Tables Used: SCREEN. External Programs Called: None.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20OCL/","title":"BB110P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>BB110P.ocl36.txt</code>, used for managing the Order Entry Picking Ticket Print process in an IBM System/36 or AS/400 environment. OCL is a control language used to define job steps, file operations, and program execution in these systems. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20OCL/#process-steps-of-the-bb110pocl36-program","title":"Process Steps of the BB110P.ocl36 Program","text":"<p>The OCL program orchestrates the printing of picking tickets for order processing, including batch selection, validation, and release. It uses conditional logic, file operations, and external program calls to achieve this. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Setup and Configuration:</li> <li>The program begins with a switch setting (<code>SWITCH 00000000</code>), resetting all switches to off.</li> <li>Local variables are cleared (<code>LOCAL BLANK-*ALL</code>).</li> <li> <p>The program checks if parameter <code>?3?</code> is set to <code>'Y'</code>. If true:</p> <ul> <li>Sets switch bit 5 to 1 (<code>SWITCH XXXX1XXX</code>), indicating the process is for printing picking tickets only.</li> <li>Sets a local variable at offset 231 to a blank space (<code>LOCAL OFFSET-231,DATA-' '</code>).</li> </ul> </li> <li> <p>Order Batch Selection:</p> </li> <li>The program sets local variables for batch processing:<ul> <li><code>OFFSET-470,DATA-'?13?'</code>: Stores a batch-related parameter (likely a batch type or identifier).</li> <li><code>OFFSET-494,DATA-'?USER?'</code>: Stores the user ID.</li> <li><code>OFFSET-502,DATA-'?WS?'</code>: Stores the workstation ID.</li> <li><code>OFFSET-504,DATA-'L'</code>: Sets a constant value <code>'L'</code>.</li> </ul> </li> <li>Depending on the value of <code>?13?</code>, it sets a descriptive message at offset 60:<ul> <li>If <code>?13?</code> is blank, it sets <code>* PRINT PICK LISTS *</code>.</li> <li>If <code>?13?</code> equals <code>'PM'</code>, it sets <code>* PRODUCT MOVES PICK LISTS *</code>.</li> <li>If <code>?13?</code> equals <code>'PP'</code>, it sets <code>* VISCOSITY ASN PICK LISTS *</code>.</li> </ul> </li> <li> <p>These messages likely indicate the type of pick list being processed (standard, product moves, or viscosity ASN).</p> </li> <li> <p>Batch Deletion Check:</p> </li> <li> <p>The program checks switch 1 (<code>SWITCH 0XXXXXXX</code>). If set, it implies a batch deletion operation, but no specific logic is defined here for deletion.</p> </li> <li> <p>Load and Run Batch Selection Program:</p> </li> <li>The program loads <code>BB001</code>, an external program for batch selection.</li> <li>It opens two files:<ul> <li><code>BBBTCH</code> (labeled <code>?9?BBBTCH</code>, shared access).</li> <li><code>BBBTCHX</code> (also labeled <code>?9?BBBTCH</code>, shared access).</li> </ul> </li> <li>The <code>RUN</code> command executes <code>BB001</code>.</li> <li> <p>If the value at location <code>?L'121,6'?</code> equals <code>'CANCEL'</code>, the program terminates (<code>RETURN</code>).</p> </li> <li> <p>Evaluate Parameter:</p> </li> <li> <p>The program evaluates <code>P20</code> by extracting a 2-character value from location <code>?L'490,2'?</code>. This likely represents a dynamic order or batch identifier used later.</p> </li> <li> <p>Order Entry Picking Ticket Selection:</p> </li> <li>The program loads <code>BB110P</code> (itself or another instance) and opens three files:<ul> <li><code>BICONT</code> (labeled <code>?9?BICONT</code>, shared read-modify access).</li> <li><code>BBORTR</code> (labeled <code>?9?BBOR?20?</code>, shared read-modify access, where <code>?20?</code> is the evaluated <code>P20</code> value).</li> <li><code>BBFRPR</code> (labeled <code>?9?BBFRPR</code>, shared read-modify access).</li> </ul> </li> <li>The <code>RUN</code> command executes <code>BB110P</code>.</li> <li> <p>If switch 8 is set (<code>SWITCH8-1</code>), the procedure is canceled, and the program jumps to the <code>REL</code> tag.</p> </li> <li> <p>Check for Active Process and Error Handling:</p> </li> <li>The program checks if <code>BB110</code> (likely another program or module) is active:<ul> <li>If active, it loads <code>BB110E</code> (an error-handling or continuation program) and runs it.</li> <li>If the value at <code>?L'300,6'?</code> equals <code>'CANCEL'</code>, it jumps to the <code>REL</code> tag.</li> <li>Otherwise, it loops back to the <code>AGAIN</code> tag to recheck.</li> </ul> </li> <li> <p>If <code>BB110</code> is not active:</p> <ul> <li>If switch 5 is set and <code>?L'166,1'?</code> equals <code>'Y'</code>, it submits a job to the job queue (<code>JOBQ ?CLIB?,BB110,*ALL</code>).</li> <li>If switch 5 is set but <code>?L'166,1'?</code> is not <code>'Y'</code>, it runs <code>BB110 *ALL</code>.</li> <li>The program then jumps to the <code>END</code> tag.</li> </ul> </li> <li> <p>Release Batch:</p> </li> <li> <p>At the <code>REL</code> tag, the program:</p> <ul> <li>Sets a local variable at offset 475 to <code>?F'A,?9?BBOR?20?'?</code>, which likely constructs a file name or parameter for the batch release.</li> <li>Loads <code>BB005</code>, a program for releasing the batch.</li> <li>Opens the <code>BBBTCH</code> file (labeled <code>?9?BBBTCH</code>, shared access).</li> <li>Executes <code>BB005</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>At the <code>END</code> tag, the program:<ul> <li>Resets all switches (<code>SWITCH 00000000</code>).</li> <li>Clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> </ul> </li> <li>The program ends.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. BB001: Handles order batch selection. 2. BB110P: The main program for picking ticket selection (potentially recursive, as it\u2019s the same program name). 3. BB110E: Handles error checking or continuation when <code>BB110</code> is active. 4. BB005: Manages batch release. 5. BB110: Referenced in a job queue or direct execution, likely a related program for processing picking tickets.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files (referred to as \"tables\" in RPG/OCL terminology): 1. BBBTCH: A batch control file, used in batch selection and release (shared access). 2. BBBTCHX: Likely an index or alternate version of the <code>BBBTCH</code> file, used in batch selection (shared access). 3. BICONT: A control file, possibly for inventory or order control (shared read-modify access). 4. BBORTR: An order transaction file, dynamically named using <code>?9?BBOR?20?</code> (shared read-modify access). 5. BBFRPR: A file likely related to freight or pricing for orders (shared read-modify access).</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20OCL/#summary","title":"Summary","text":"<p>The <code>BB110P.ocl36</code> program manages the printing of picking tickets by: - Setting up initial conditions and parameters. - Selecting and validating batches using <code>BB001</code>. - Processing picking tickets with <code>BB110P</code> and related files. - Handling errors or active processes with <code>BB110E</code>. - Releasing batches with <code>BB005</code>. - Using conditional logic to handle cancellations and different pick list types (standard, product moves, viscosity ASN).</p> <p>External Programs: BB001, BB110P, BB110E, BB005, BB110. Files Used: BBBTCH, BBBTCHX, BICONT, BBORTR, BBFRPR.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/","title":"BB110P RPG36","text":"<p>The <code>BB110P.rpg36.txt</code> is an RPG II program running on an IBM System/36, designed to prompt users for order entry picking ticket selection and validate inputs, including freight processor details. It is called by the <code>BB110P.ocl36</code> program as part of the order entry picking ticket print process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/#process-steps-of-the-bb110p-rpg-program","title":"Process Steps of the BB110P RPG Program","text":"<p>The program facilitates user input for selecting orders and specifying freight processors (or freight arrangement options) for generating picking tickets. It validates order numbers, company codes, and freight processor selections, displaying errors when necessary. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Main Line):</li> <li>Line 0047\u20130048: If the <code>KG</code> key (cancel key) is pressed, sets indicator <code>U8</code> and the Last Record (<code>LR</code>) indicator to terminate the program.</li> <li>Line 0050: If indicators 10 and 11 are off (no prior validation errors), calls the <code>EDIT</code> subroutine to validate user input.</li> <li> <p>Line 0051: If indicators 10 and 11 are off (first execution), calls the <code>ONETIM</code> subroutine to initialize default values.</p> </li> <li> <p>ONETIM Subroutine (Lines 0101\u20130109):</p> </li> <li>Initializes fields in the Local Data Area (LDA):<ul> <li><code>KYOE = 'OE'</code> (Order Entry mode, offset 255\u2013256).</li> <li><code>KYCO = 10</code> (company number, offset 101\u2013102).</li> <li><code>KYALSL = 'SEL'</code> (selection mode, offset 103\u2013105).</li> <li><code>KYJOBQ = 'N'</code> (no job queue, offset 166).</li> <li><code>KYCOPY = 01</code> (number of copies, offset 167\u2013168).</li> <li><code>KYCOPB = 01</code> (backup copies, offset 169\u2013170).</li> </ul> </li> <li> <p>Sets indicator 10 to indicate initialization is complete.</p> </li> <li> <p>EDIT Subroutine (Lines 0053\u20130099):</p> </li> <li>Line 0054\u20130055: Clears error message fields (<code>MSG35</code>, <code>MSG2</code>) and resets indicators 20, 21, 22, and 25.</li> <li>Validate Selection Mode (Lines 0058\u20130060):<ul> <li>If <code>KYALSL \u2260 'SEL'</code> (and indicator 20 is set), displays error \"INVALID SELECTION ALL / SEL\" (MSG,1) and jumps to <code>ENDEDT</code>.</li> </ul> </li> <li>Validate Company Number (Lines 0062\u20130064):<ul> <li>Checks <code>KYCO</code> against the <code>BICONT</code> file. If not found, displays error \"INVALID COMPANY #\" (MSG,2) and jumps to <code>ENDEDT</code>.</li> </ul> </li> <li>Validate Order Numbers (Lines 0069\u20130086):<ul> <li>Loops through up to 10 order numbers (<code>KYO,1</code> to <code>KYO,0</code>, stored in <code>KYORD1</code> to <code>KYORD0</code>).</li> <li>For each non-zero order (<code>KYO,X</code>):</li> <li>Constructs an 11-character key (<code>KY11</code>) by combining <code>KYCO</code>, <code>KYO,X</code>, and <code>'000'</code>.</li> <li>Chains to <code>BBORTR</code> to verify the order exists. If not found, displays error \"INVALID ORDER #\" (MSG,3) with the order number and jumps to <code>ENDEDT</code>.</li> <li>Get BOL Marks Record (Lines JB02):</li> <li>Constructs a key (<code>KY11 = '962'</code>) to retrieve the Bill of Lading (BOL) marks record from <code>BBORTR</code>. If not found, sets <code>BXFRNM</code> to blanks.</li> <li>Validate Freight Processor (Lines JB01\u2013JB03, JB12, JB04):</li> <li>For each freight processor field (<code>KYF,X</code>, from <code>KYFPC1</code> to <code>KYFPC0</code>):<ul> <li>If <code>KYF,X \u2260 'NO    '</code>, <code>KYF,X \u2260 'ARG   '</code>, and <code>KYF,X \u2260 'NTT   '</code>:</li> <li>Constructs a key (<code>KFPKEY</code>) from <code>KYCO</code> and <code>KYF,X</code> and chains to <code>BBFRPR</code>. If not found, displays error \"INVALID FREIGHT PROCESSOR FOR\" (MSG,4) with the order number and jumps to <code>ENDEDT</code>.</li> <li>Validates that <code>KYF,X</code> matches <code>BOFPCD</code> (freight processor code in order header). If not, displays error \"INVALID FREIGHT PROCESSOR FOR\" (MSG,4) and jumps to <code>ENDEDT</code>.</li> <li>If <code>BXFRNM \u2260 *BLANK</code> (freight bill name exists in BOL marks record):</li> <li>Sets indicator 20, displays errors \"XXXXXX ORDER HAS FREIGHT BILL TO\" (MSG,5) and \"NAME. CANNOT SEND TO FRT PROCESSOR\" (MSG,6), and jumps to <code>ENDEDT</code>.</li> <li>If <code>KYF,X = 'NO    '</code>:</li> <li>If <code>BOFPCD \u2260 'NO    '</code> and <code>BOFPCD \u2260 *BLANK</code>, displays errors \"XXXXXX ORDER WAS SENT TO XXXXXX\" (MSG,7) and \"FRT PROCESSOR\" (MSG,8) with the order number and <code>BOFPCD</code>, and jumps to <code>ENDEDT</code>.</li> <li>If <code>KYF,X = 'ARG   '</code> (added JB12):</li> <li>If <code>BOFPCD \u2260 'ARG   '</code> and <code>BOFPCD \u2260 *BLANK</code>, displays errors \"XXXXXX ORDER WAS SENT TO XXXXXX\" (MSG,7) and \"FRT PROCESSOR\" (MSG,8) with the order number and <code>BOFPCD</code>, and jumps to <code>ENDEDT</code>.</li> <li>If <code>KYF,X = 'NTT   '</code> (not this time, added JB03):</li> <li>If <code>BOFPCD = 'NO    '</code> or <code>BOFPCD = 'ARG   '</code>, displays error \"XXXXXX ORDER WAS NOT SENT TO XXXXXX\" (MSG,9) with the order number and <code>BOFPCD</code>, and jumps to <code>ENDEDT</code>.</li> </ul> </li> </ul> </li> <li>Validate Job Queue (Lines 0089\u20130092):<ul> <li>If <code>KYJOBQ \u2260 'Y'</code>, <code>' '</code>, or <code>'N'</code>, sets indicator 20 and jumps to <code>ENDEDT</code>.</li> </ul> </li> <li>Set Default Copies (Lines 0094\u20130097):<ul> <li>If <code>KYCOPY = 00</code>, sets it to 01.</li> <li>If <code>KYCOPB = 00</code>, sets it to 01.</li> </ul> </li> <li> <p>Set Completion Indicator (Line 0098):</p> <ul> <li>Sets indicator 11 to indicate validation is complete.</li> </ul> </li> <li> <p>Output to SCREEN (Lines 0111\u20130128, JB01, JB02):</p> </li> <li>Displays format <code>BB110PFM</code> (when indicators 01 and 11 are off) with:<ul> <li>Company number (<code>KYCO</code>).</li> <li>Selection mode (<code>KYALSL</code>).</li> <li>Order numbers (<code>KYORD1</code> to <code>KYORD0</code>).</li> <li>Job queue flag (<code>KYJOBQ</code>).</li> <li>Number of copies (<code>KYCOPY</code>).</li> <li>Backup copies (<code>KYCOPB</code>).</li> <li>Freight processor codes (<code>KYFPC1</code> to <code>KYFPC0</code>).</li> <li>Error messages (<code>MSG35</code>, <code>MSG2</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Selection Mode Validation:</li> <li> <p>The selection mode (<code>KYALSL</code>) must be <code>'SEL'</code>. Other values trigger an \"INVALID SELECTION ALL / SEL\" error.</p> </li> <li> <p>Company Number Validation:</p> </li> <li> <p>The company number (<code>KYCO</code>) must exist in the <code>BICONT</code> file, or an \"INVALID COMPANY #\" error is displayed.</p> </li> <li> <p>Order Number Validation:</p> </li> <li>Up to 10 order numbers (<code>KYORD1</code> to <code>KYORD0</code>) are validated against the <code>BBORTR</code> file using a composite key (company number + order number + <code>'000'</code>).</li> <li> <p>Invalid orders trigger an \"INVALID ORDER #\" error with the specific order number.</p> </li> <li> <p>Freight Processor Validation (JB01, JB02, JB03, JB04, JB12):</p> </li> <li>Freight Processor Code:<ul> <li>Users can enter a freight processor code (<code>KYF,X</code>), <code>'NO    '</code> (no freight processor, renamed to <code>'ARG   '</code> in JB12), or <code>'NTT   '</code> (not this time, added in JB03).</li> <li>The code must exist in the <code>BBFRPR</code> file, or an \"INVALID FREIGHT PROCESSOR FOR\" error is displayed.</li> <li>The entered code (<code>KYF,X</code>) must match the order header\u2019s freight processor code (<code>BOFPCD</code>), or an error is displayed (JB04).</li> </ul> </li> <li>Freight Bill Name Check (JB02):<ul> <li>If a freight bill name exists in the BOL marks record (<code>BXFRNM \u2260 *BLANK</code>), users cannot select a freight processor, triggering errors \"XXXXXX ORDER HAS FREIGHT BILL TO\" and \"NAME. CANNOT SEND TO FRT PROCESSOR\".</li> </ul> </li> <li>No Freight Processor ('NO' or 'ARG'):<ul> <li>If <code>KYF,X = 'NO    '</code> or <code>'ARG   '</code>, the order must not have been previously sent to a freight processor (<code>BOFPCD = 'NO    '</code> or <code>'ARG   '</code>), or errors \"XXXXXX ORDER WAS SENT TO XXXXXX\" and \"FRT PROCESSOR\" are displayed.</li> </ul> </li> <li>Not This Time ('NTT'):<ul> <li>If <code>KYF,X = 'NTT   '</code>, the order must have been previously sent to a freight processor (<code>BOFPCD \u2260 'NO    '</code> and <code>BOFPCD \u2260 'ARG   '</code>), or an error \"XXXXXX ORDER WAS NOT SENT TO XXXXXX\" is displayed.</li> </ul> </li> <li> <p>Update Handling:</p> <ul> <li>Freight processor updates occur in the <code>BB110</code> program, not in <code>BB110P</code>.</li> </ul> </li> <li> <p>Job Queue Validation:</p> </li> <li> <p>The job queue flag (<code>KYJOBQ</code>) must be <code>'Y'</code>, <code>'N'</code>, or blank, or an error is triggered.</p> </li> <li> <p>Default Copies:</p> </li> <li> <p>If the number of copies (<code>KYCOPY</code>) or backup copies (<code>KYCOPB</code>) is zero, it defaults to 1.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors are displayed with specific messages, including the problematic order number or freight processor code, ensuring users correct invalid inputs before proceeding.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>SCREEN:</li> <li>Type: Workstation file (WORKSTN).</li> <li>Purpose: Displays the input prompt for order numbers, company code, job queue flag, copies, and freight processor codes, along with error messages.</li> <li> <p>Format: <code>BB110PFM</code>.</p> </li> <li> <p>BICONT:</p> </li> <li>Type: Indexed disk file (256 bytes, read-only, shared access).</li> <li> <p>Purpose: Validates the company number (<code>KYCO</code>).</p> </li> <li> <p>BBORTR:</p> </li> <li>Type: Indexed disk file (512 bytes, read-only, shared access).</li> <li>Purpose: Validates order numbers and retrieves freight processor code (<code>BOFPCD</code>) and BOL marks record (<code>BXFRNM</code>).</li> <li> <p>Records:</p> <ul> <li>Header record: Contains <code>BOFPCD</code> (freight processor code), <code>BOFPST</code> (freight processor status), <code>BOVERN</code> (order version number).</li> <li>Marks record: Contains <code>BXFRNM</code> (freight bill name).</li> </ul> </li> <li> <p>BBFRPR:</p> </li> <li>Type: Indexed disk file (256 bytes, read-only, shared access).</li> <li>Purpose: Validates freight processor codes entered by the user (<code>KYF,X</code>).</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>BB110P</code> program does not explicitly call any external RPG programs. It performs input validation and relies on the calling OCL program (<code>BB110P.ocl36</code>) to proceed with further processing (e.g., invoking <code>BB110</code> for freight processor updates).</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/BB110P%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB110P</code> RPG program is a user interface for selecting orders and freight processors for picking ticket generation. It: - Initializes default values for company, selection mode, job queue, and copies. - Validates company numbers, order numbers, and freight processor codes against <code>BICONT</code>, <code>BBORTR</code>, and <code>BBFRPR</code> files. - Enforces strict business rules for freight processor selection, ensuring consistency with order header data and preventing conflicts with existing freight bill names. - Displays errors for invalid inputs and allows users to correct them.</p> <p>Tables Used: SCREEN, BICONT, BBORTR, BBFRPR. External Programs Called: None.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/","title":"Summary BB110P OCL","text":"<p>The query refers to the \"entire call stack\" and \"these programs,\" which, based on the conversation history, likely pertains to the <code>BB110.rpg36.txt</code> RPG program and its caller <code>BB110P.ocl36</code> on an IBM System/36, as described previously. The <code>BB110</code> program generates various reports (picking tickets, order confirmations, proforma invoices, traffic reports) and updates order-related data, while <code>BB110P</code> handles batch selection and validation before calling <code>BB110</code>. Below, I\u2019ll list the use cases implemented across these programs and provide a concise functional requirements document for one use case, treating it as a large function that processes inputs without screen interaction.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#use-cases-implemented-by-bb110-and-bb110p","title":"Use Cases Implemented by BB110 and BB110P","text":"<p>The combined functionality of <code>BB110P</code> (batch selection and validation) and <code>BB110</code> (report generation and data updates) supports the following use cases, derived from the program descriptions and modifications:</p> <ol> <li>Select and Validate Orders for Processing (BB110P):</li> <li> <p>Selects orders in batch mode, validates them (e.g., checks for EDI errors, deletion status), and passes valid orders to <code>BB110</code> for report generation.</p> </li> <li> <p>Generate Picking Ticket (BB110, LIST):</p> </li> <li> <p>Produces standard picking tickets, including an EDI Viscosity version (JB15, JB18), with order details, quantities, weights, and dispatch marks.</p> </li> <li> <p>Generate Packaging Plant Pick Sheet (BB110, LIST2):</p> </li> <li> <p>Creates pick sheets for the packaging plant (JB19, JB20, JK02), with size, brand, description, quantity, gross weight, and gallons.</p> </li> <li> <p>Generate Order Confirmation (BB110, LIST3):</p> </li> <li> <p>Prints order confirmations (MG41) with customer/ship-to details, payment terms, Incoterms, totals, and standard notes, skipping credit checks (MG64).</p> </li> <li> <p>Generate Proforma Invoice (BB110, LIST4):</p> </li> <li> <p>Generates proforma invoices (MG64) with order details, totals, and Incoterms, formatted for pre-invoicing purposes.</p> </li> <li> <p>Generate Traffic Report (BB110, TRAFFP):</p> </li> <li> <p>Produces a traffic report (MG29) listing orders with multiple freight tables, including order number, customer, carrier, and requested date.</p> </li> <li> <p>Update Order and Shipment Data (BB110):</p> </li> <li>Updates files (<code>BBOTHS1</code>, <code>BBORTU</code>, <code>BBOTDS1</code>, <code>BBSRNH</code>, <code>SHPADR</code>) with freight details, product descriptions, and statuses for downstream processing.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#functional-requirements-document-generate-order-confirmation-list3","title":"Functional Requirements Document: Generate Order Confirmation (LIST3)","text":"<p>The \u201cGenerate Order Confirmation\u201d use case is selected as it represents a core customer-facing output of <code>BB110</code>, incorporating complex business rules, calculations, and file updates, while aligning with the batch processing initiated by <code>BB110P</code>. The function processes inputs programmatically, producing a formatted report without screen interaction.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#functional-requirements-document-generate-order-confirmation","title":"Functional Requirements Document: Generate Order Confirmation","text":""},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#overview","title":"Overview","text":"<p>The <code>GenerateOrderConfirmation</code> function generates a formatted order confirmation report (<code>LIST3</code>) for a validated order, including customer details, product details, totals, and standard notes. It processes inputs from order-related files, applies business rules, and produces a printed report and file updates, initiated after batch validation by <code>BB110P</code>.</p>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Order Header Data (<code>BBORTR</code>): Order number (<code>BORDNO</code>), company (<code>BOCO</code>), customer (<code>BOCUST</code>), ship-to (<code>BOSHIP</code>), requested date (<code>BORQDT</code>), PO numbers (<code>BOPORD</code>, <code>BOSHPD</code>), salesman (<code>BOSLMN</code>), contact (<code>BOCNCT</code>), order taker (<code>BOTKBY</code>), delivery time (<code>BODLTM</code>), order status (<code>BOORPR</code>), freight processor (<code>BOFPCD</code>), freight processor status (<code>BOFPST</code>), version number (<code>BOVERN</code>), Incoterms (<code>BOINCT</code>), payment terms (<code>BOTERM</code>), routing codes (<code>BORTG1</code>, <code>BORTG2</code>), carrier code (<code>BOCACD</code>).</li> <li>Order Detail Data (<code>BBOTDS1</code>): Quantity (<code>BDQTY</code>), gross weight (<code>BDGWT</code>), product weight (<code>BDPRWT</code>), product code (<code>BDPROD</code>), container code (<code>BDCNTR</code>), location (<code>BDLOC</code>), descriptions (<code>PPDSC1</code>\u2013<code>PPDSC3</code>), unit of measure (<code>PPUMBP</code>).</li> <li>Customer Data (<code>ARCUST</code>, <code>CUADR</code>): Customer name (<code>ARNAME</code>), address (<code>ARADR1</code>\u2013<code>ARADR4</code>), EDI address (<code>CDNAME</code>, <code>CDADR1</code>\u2013<code>CDADR2</code>, <code>CDCITY</code>, <code>CDST</code>, <code>CDZIPN</code>, <code>CDCTY</code>).</li> <li>Ship-to Data (<code>SHIPTO</code>, <code>SHPADR</code>): Ship-to address (<code>SDNAME</code>, <code>SDADR1</code>\u2013<code>SDADR2</code>, <code>SDCITY</code>, <code>SDST</code>, <code>SDZIP</code>, <code>SDCTY</code>), alternate pricing flag (<code>CSALTO</code>).</li> <li>Freight Processor Data (<code>BBFRPR</code>): Name (<code>FPNAME</code>), address (<code>FPADR1</code>\u2013<code>FPADR2</code>, <code>FPCITY</code>, <code>FPSTAT</code>, <code>FPZIP</code>, <code>FPCTRY</code>), type (<code>FPFPTY</code>).</li> <li>Product and Container Data (<code>GSTABL</code>, <code>GSCNTR1</code>, <code>GSPROD</code>, <code>GSCTUM</code>): Product/container descriptions (<code>TBDES2</code>, <code>TBSHDS</code>), conversion factors (<code>CUCVFA</code>), issue unit (<code>CUIUM</code>).</li> <li>Location Data (<code>GSMLCD</code>): Location description (<code>GMMLDS</code>), loading locations (<code>GMLOD1</code>\u2013<code>GMLOD3</code>).</li> <li>Email Data (<code>ARCUFMX</code>): Confirmation email addresses (<code>EIFM</code> array).</li> <li>Remarks Data (<code>BBORTO</code>, <code>BBOTA1</code>): Order remarks (<code>BXOMK1</code>\u2013<code>BXOMK4</code>), dispatch marks (<code>BXDSP1</code>\u2013<code>BXDSP4</code>).</li> <li>System Data: System date (<code>SYSDATY</code>), time (<code>SYSTIM</code>).</li> <li>Validation Status (from <code>BB110P</code>): Confirmation that order is valid (not marked <code>BODEL = 'E'</code> or <code>'D'</code> unless sent to internal freight processor).</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>LIST3 Report (132-character printer output, U6):</li> <li>Header: Company name, order number, customer, ship-to, salesman, date/time.</li> <li>Customer/Ship-to: Sold-to/ship-to names, addresses, country.</li> <li>Order Details: Ship date, delivery time, contact, order taker, carrier, routing codes, PO numbers, payment terms, Incoterms, loading locations.</li> <li>Detail Lines: Size, brand, product description, quantity, gross weight, unit of measure, price, extended price.</li> <li>Totals: Net quantity, gross weight, net weight, miscellaneous charges, price total, freight amount.</li> <li>Notes: Standard terms/conditions (<code>NTE</code> array).</li> <li>Updated Files:</li> <li><code>BBOTHS1</code>: Freight description (<code>BOFRDS</code>), carrier (<code>BOTRAN</code>), freight bill address (<code>BOFRNM</code>, <code>BOFRA1</code>\u2013<code>BOFRA2</code>).</li> <li><code>BBOTDS1</code>: Product descriptions (<code>PPDSC1</code>\u2013<code>PPDSC3</code>), size, weights.</li> <li><code>BBORTU</code>: Pick list printed flag (<code>BOPPIK = 'Y'</code>), freight processor status (<code>BOFPST</code>), version number (<code>BOVERN</code>).</li> <li><code>SHPADR</code>: Shipment addresses.</li> <li><code>BBSRNH</code>: Shipping reference numbers.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs (from <code>BB110P</code>):</li> <li>Confirm order is valid (not <code>BODEL = 'E'</code> or <code>'D'</code> unless internal freight processor).</li> <li> <p>Initialize variables, clear fields (e.g., <code>HAZMAT</code>, <code>PPDSC1</code>\u2013<code>PPDSC3</code>), set system date/time.</p> </li> <li> <p>Retrieve Order Data:</p> </li> <li>Chain to <code>BBORTR</code> using <code>BOCO</code>, <code>BORDNO</code> for header data.</li> <li> <p>Mark order as \u201cPRELIMINARY\u201d or \u201cFINAL\u201d based on <code>BOORPR = 'R'</code> or <code>'C'</code>.</p> </li> <li> <p>Retrieve Customer and Ship-to Data:</p> </li> <li>Chain to <code>ARCUST</code> for customer name/address.</li> <li>Call <code>MSHPADR</code> for ship-to address (<code>SDNAME</code>, <code>SDADR1</code>, etc.), passing <code>SDCTY</code>.</li> <li> <p>Chain to <code>EDICUS</code> for EDI <code>'856'</code> shipper details if applicable.</p> </li> <li> <p>Retrieve Freight Processor Data:</p> </li> <li>Chain to <code>BBFRPR</code> using <code>BOFPCD</code>.</li> <li>Use customer address (<code>FRNML</code>, <code>FRA1L</code>) for internal processors (<code>FPFPTY \u2260 'EXT'</code>); else use <code>FPNAME</code>, <code>FPADR1</code>.</li> <li> <p>Update <code>BBOTHS1</code> with freight/carrier details.</p> </li> <li> <p>Process Detail Lines:</p> </li> <li>Chain to <code>BBOTDS1</code>, skip <code>BDDEL = 'D'</code>.</li> <li>Retrieve product descriptions (<code>TBDES2</code> from <code>GSPROD</code>, <code>CPCPDS</code> from <code>ARCUPR</code>).</li> <li>Chain to <code>GSCNTR1</code> for container descriptions, <code>GSCTUM</code> for unit conversions.</li> <li> <p>Calculate extended price: <code>EXTPRCJB = BDQTY * NEWPRCJ</code>.</p> </li> <li> <p>Calculate Totals:</p> </li> <li>Net quantity (<code>L2CQT</code>): Sum <code>BDQTY</code>.</li> <li>Gross weight (<code>L2GWT</code>): Sum <code>BDGWT</code>.</li> <li>Net weight (<code>L2NWT</code>): Sum <code>BDPRWT</code>.</li> <li>Total price (<code>TOTPRCJB</code>): Sum <code>BDQTY * NEWPRCJ</code>.</li> <li>Freight (<code>L2FRT</code>): Sum <code>BDFRRT</code> and accessorials.</li> <li> <p>Gallons (<code>L2NGAL</code>): Convert using <code>MINLBGL1</code>, handle container <code>420</code> (quarts).</p> </li> <li> <p>Retrieve Remarks and Marks:</p> </li> <li>Chain to <code>BBORTO</code>, <code>BBOTA1</code> for remarks (<code>BXOMK1</code>\u2013<code>BXOMK4</code>), dispatch marks (<code>BXDSP1</code>\u2013<code>BXDSP4</code>) if <code>BADSPH = 'Y'</code>.</li> <li> <p>Chain to <code>ARCUFMX</code> for email addresses (<code>EIFM</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Print header: Company, order number, customer, ship-to, salesman, date/time.</li> <li>Print sold-to/ship-to addresses, ship date, delivery time, contact, carrier, routing, PO numbers, payment terms (<code>BOTERM</code> with <code>ARTDSC</code>), Incoterms.</li> <li>Print detail lines: Size, brand, description, quantity, gross weight, unit, price, extended price.</li> <li>Print totals: Net quantity, weights, charges, price, freight.</li> <li> <p>Print freight bill address and standard notes (<code>NTE</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Update <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBORTU</code>, <code>SHPADR</code>, <code>BBSRNH</code>.</li> <li>Set <code>BOPPIK = 'Y'</code>, update <code>BOFPST</code>, <code>BOVERN</code>.</li> <li>Release record locks in <code>SHPADR</code>, <code>BBOTHS1</code>.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Order Validation:</li> <li>Skip orders with <code>BODEL = 'E'</code> (EDI error) or <code>'D'</code> (deleted) unless internal freight processor.</li> <li>Treat <code>BOORPR = 'R'</code> as <code>'C'</code> for final confirmation.</li> <li> <p>Mark <code>BOORPR = 'H'</code> orders as \u201cON HOLD - DO NOT SHIP\u201d.</p> </li> <li> <p>Freight Processing:</p> </li> <li>Internal processors (<code>FPFPTY \u2260 'EXT'</code>): Use customer address.</li> <li>External processors: Use freight processor address.</li> <li> <p>Include freight bill address for third-party freight.</p> </li> <li> <p>Calculations:</p> </li> <li>Net quantity: Sum <code>BDQTY</code> for non-deleted lines.</li> <li>Gross weight: Sum <code>BDGWT</code>.</li> <li>Net weight: Sum <code>BDPRWT</code>.</li> <li>Total price: Sum <code>BDQTY * NEWPRCJ</code>.</li> <li>Freight: Sum <code>BDFRRT</code> and accessorials.</li> <li> <p>Gallons: Convert via <code>MINLBGL1</code>, special handling for container <code>420</code> (quarts).</p> </li> <li> <p>Printing:</p> </li> <li>Include payment terms (<code>ARTDSC</code>), Incoterms, and \u201cFOB SHIPPING POINT\u201d if applicable.</li> <li>Print loading locations (<code>GMMLDS</code>, <code>GMLOD1</code>\u2013<code>GMLOD3</code>).</li> <li>Include up to four email addresses (<code>EIFM</code>).</li> <li> <p>Print standard notes (<code>NTE</code>) with terms, safety, export rules.</p> </li> <li> <p>File Updates:</p> </li> <li>Write descriptions to <code>BBOTDS1</code> (JB51).</li> <li>Release record locks to prevent conflicts.</li> <li>Update <code>BOPPIK</code>, <code>BOFPST</code>, <code>BOVERN</code>.</li> </ol>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#external-dependencies","title":"External Dependencies","text":"<ul> <li>MSHPADR: Retrieves ship-to addresses.</li> <li>MINLBGL1: Calculates gallons/pounds for conversions.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Orders are pre-validated by <code>BB110P</code>.</li> <li>Required files are accessible and formatted correctly.</li> <li>Printer device (<code>LPRINTER</code>, U6) is available.</li> <li>No credit limit check for confirmations.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Skip invalid/deleted records.</li> <li>Retry missing <code>ARCUPR</code> records with blank/<code>'P'</code> container type.</li> <li>Log errors for missing file records using indicators.</li> </ul>"},{"location":"order-entry/BB110P%20Print%20Pick%20Lists/Summary%20BB110P%20OCL/#notes","title":"Notes","text":"<ul> <li>Use Case Selection: The \u201cGenerate Order Confirmation\u201d use case is chosen for its comprehensive scope, covering data retrieval, calculations, freight handling, and file updates, reflecting the combined workflow of <code>BB110P</code> (validation) and <code>BB110</code> (report generation).</li> <li>Function Approach: The function assumes inputs are provided programmatically, with <code>BB110P</code> ensuring order validity before <code>BB110</code> processes the confirmation.</li> <li>Conciseness: The document focuses on business requirements (e.g., validation, freight logic, printing rules) and key calculations (e.g., totals, unit conversions), summarizing the complex logic from <code>BB110</code>\u2019s modifications (MG41, JB38, etc.).</li> <li>Call Stack: Incorporates <code>BB110P</code>\u2019s role in validating orders and <code>BB110</code>\u2019s role in generating the report and updating files, with external calls to <code>MSHPADR</code> and <code>MINLBGL1</code>.</li> </ul> <p>The document provides a clear, business-focused specification for generating order confirmations, suitable for implementation in a batch processing environment.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110%20RPG36/","title":"BB110 RPG36","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110%20RPG36/#process-steps-of-the-rpg-program-bb110","title":"Process Steps of the RPG Program BB110","text":"<p>This RPG III program (BB110) is the core printing engine for generating picking tickets, order confirmations, or proforma invoices based on pre-sorted order data (from prior steps like sorting in BB111 and preprocessing in BB1103). It supports multiple formats (e.g., standard pick lists, viscosity/EDI versions, packaging plant versions, confirmations) with custom layouts, calculations, and conditional printing. The program processes records in a cycle: reading input sequentially, chaining to lookup files for descriptions/addressing/weights, accumulating totals (qty, weight, price, freight, misc charges), and outputting to printer files with headers, details, totals, and notes. It handles modes via user options (U5 for picks, U6 for confirmations) and revisions add features like EDI handling, freight calculations, and special groupings. Based on the visible code and revision comments (full code truncated), below is a step-by-step flow:</p> <ol> <li>Program Initialization:</li> <li>Header (H) specs define options (P064, B for batch/print). Sets defaults for totals (e.g., net/gross weight, qty, prices to 0), indicators for modes (e.g., U5/U6), and work fields (e.g., for addresses, descriptions).</li> <li>Calculates or sets initial values like current date, company defaults. Handles Y2K via prior GSY2K call in OCL.</li> <li> <p>Opens files (input from sorted BBORTR/BB1113S, lookups like ARCUST, printer files LIST/LIST2/LIST3).</p> </li> <li> <p>Read Input Records (Main Cycle):</p> </li> <li>Reads primary input (e.g., BBORTR) sequentially (sorted by company/order/seq, headers first).</li> <li>Identifies record types: Headers (e.g., via markers in pos 121-123), details, marks/accessorials, others.</li> <li> <p>For each order (level break on company/order#):</p> <ul> <li>Processes header: Chains to files like BBORDH/BBORCL for status (BOORPR), customer (BOCUST), ship-to (BOSHIP), freight (BOCAR), etc. Validates status (e.g., skip if deleted 'D' or error 'E'; print \"ON HOLD - DO NOT SHIP\" for 'H').</li> <li>Accumulates order-level data (e.g., incoterms from BOINCT, route from BOROUT).</li> </ul> </li> <li> <p>Detail Processing and Calculations:</p> </li> <li>For detail lines: Chains to products (GSPROD/GSPRCT for desc), containers (GSCNTR1 for size/alpha key), locations (INLOC/GSMLCD for loading loc), customers (ARCUST/ARCUPR for pricing/cross-ref, try with CNTR type first then blank/'P' for non-fluid).</li> <li>Calculates:<ul> <li>Quantities/weights: Uses GSUMCV/GSCTWT/GSCTUM for conversions (e.g., skip for 'KG'/'LI'/'ML'/'OZ'). Calls MINLBGL1 for gallons/lbs (revised formula). Adds product weight to net for confirmations.</li> <li>Prices/extensions: From ARCUPR, accumulates to TOTPRC.</li> <li>Freight/misc: Chains GSTABL for carrier desc, calculates/accumulates L2FRT/L2TOT (misc charges). Handles internal/external freight (don't use processor addr for internal; send deleted orders to internal).</li> <li>Totals: Net/gross wt (GWT in lbs), qty (BDQTY), gallons (from JB24). Excludes deleted details from totals.</li> </ul> </li> <li> <p>Special handling: For EDI856/viscosity (customer-owned 'Y'), rearranges columns, sorts/groups (see BB1103). For PKG plant: Custom desc (PPDSC1-3), right-justify brand. For grease: Custom desc transition.</p> </li> <li> <p>Output Printing:</p> </li> <li>Printer files (LIST for picks, LIST2 for PKG picks, LIST3 for confirmations) with overrides from OCL (e.g., CPI, forms, queues).</li> <li>Headers: Prints company addr (from constants like \"AMERICAN REFINING GROUP\"), customer/ship-to (compressed via MSHPADR call, incl. country), order info (date, PO, status desc from JK01).</li> <li>Details: Prints lines with loc/prod/cntr/price/ext (rearranged for versions). Groups by sort keys (dotted/solid lines at breaks/headings from JB16/JB17).</li> <li>Marks/Accessorials: Prints if dispatch marks 'Y'; skips if freight accessorial 'Y'.</li> <li>Totals: Prints net/gross wt (lbs), qty, misc, price total, freight (estimate, fluctuates with diesel index). For 3rd party freight: \"SEND FREIGHT BILL TO\" addr.</li> <li>Notes: Prints standard terms (from ** NTE constants, e.g., terms of sale, driver PPE, export rules, MSDS link).</li> <li>Special formats: Viscosity (move fields off edge, match Lotus), PKG plant (size/desc/qty/gwt/um), confirmations (select addr for EDI 'PF' BOL, expanded cross-ref/desc).</li> <li> <p>Writes updates: To BBOCFR (confirm work), BBOTHS (freight/carrier desc, bill-to addr), order files for PKG desc (JB51).</p> </li> <li> <p>Post-Processing and Termination:</p> </li> <li>Calls BB113 for freight calc (passes bill addr, handles multiple tables with Spoolflex print for traffic).</li> <li>Closes files, ends via LR. If errors (e.g., no GSUMCV), handles gracefully (e.g., zero fields).</li> </ol> <p>The program runs in batch (from OCL), processes one batch of orders, and supports revisions for specific clients (e.g., viscosity EDI, PKG plant).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Print Eligibility: Skip if header deleted ('D') or error ('E' from EDI). For hold ('H'): Print but mark \"ON HOLD - DO NOT SHIP\". Process 'R' (revised/complete) same as 'C' (complete).</li> <li>Modes: U5 for picks (standard/viscosity/PKG), U6 for confirmations (manual selection, net wt incl. product wt).</li> <li>Calculations: Gross/net wt in lbs (add product wt for confirmations; from BB101 pre-calc). Gallons/lbs via MINLBGL1 (no GSUMCV req for certain UOM). Prices at shipment time. Freight estimates fluctuate with diesel index; use correct bill addr (internal: not processor; external: processor). Accumulate misc charges; exclude deleted details.</li> <li>Formatting: Custom for types (e.g., viscosity: rearrange/sort per JB18; PKG: right-justify brand, part# heading). Print incoterms, route code, order status desc on totals. Dotted/solid lines for groups/headings. Expanded cross-ref/desc for confirmations.</li> <li>Freight Handling: Internal/external distinction; send deleted to internal. Print multiple tables notice via Spoolflex. Select EDI 'PF' addr for BOL.</li> <li>Addresses: Compress ship-to via MSHPADR (incl. country). 3rd party: Print bill-to.</li> <li>Notes/Terms: Always print standard notes (terms, PPE, bulk requirements, export compliance, MSDS).</li> <li>Data Integrity: Chain fallbacks (e.g., ARCUPR with CNTR then blank/'P'). No off-page printing (MG32). Handle grease desc transition, loading loc from GSMLCD.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110%20RPG36/#tables-used","title":"Tables Used","text":"<p>Based on file specs (inferred from comments and OCL load), the program uses:</p> <ul> <li><code>BBORTR</code>: Input primary (sorted records from BB1113S).</li> <li><code>BBOCFR</code>: Input/output (confirmation work file).</li> <li><code>BBORCL</code>: Input (order control).</li> <li><code>ARCUST</code>: Input (customers).</li> <li><code>ARCUPR</code>: Input keyed (pricing, cross-ref; key incl. CNTR type).</li> <li><code>SHIPTO</code>: Input (ship-to).</li> <li><code>GSCONT</code>: Input (contacts?).</li> <li><code>GSTABL</code>: Input keyed (tables, e.g., CNTRCD, carrier desc; avoid freight GL for details).</li> <li><code>GSUMCV</code>: Input (unit conversions; optional for some UOM).</li> <li><code>GSCTWT</code>: Input (carton weights).</li> <li><code>GSCTUM</code>: Input (carton UOM).</li> <li><code>BICONT</code>: Input (bill-to contacts?).</li> <li><code>GSHAZM</code>: Input (hazmat).</li> <li><code>BBFRPR</code>: Input (freight pricing?).</li> <li><code>BBSRNH</code>: Input (serial numbers?).</li> <li><code>CUADR</code>: Input (customer addresses).</li> <li><code>SHPADR</code>: Input (ship addresses).</li> <li><code>EDICUS</code>: Input (EDI customers).</li> <li><code>BBASND</code>: Input (ASN?).</li> <li><code>BBSHPH</code>: Input (ship headers?).</li> <li><code>BBSHPD</code>: Input (ship details?).</li> <li><code>BBORHS1</code>: Input (order headers).</li> <li><code>BBORDS1</code>: Input (order details).</li> <li><code>BBORA</code>: Input (order attachments?).</li> <li><code>BBFPORH</code>: Input (freight PO headers).</li> <li><code>BBFPORD</code>: Input (freight PO details).</li> <li><code>BBFPORA</code>: Input (freight PO attachments).</li> <li><code>BBORDB</code>: Input (order rebates?).</li> <li><code>BBORF</code>: Input (order freight?).</li> <li><code>BBFPORF</code>: Input (freight PO freight).</li> <li><code>ARCUFMX</code>: Input (customer format matrix?).</li> <li><code>GSCNTR</code>: Input (countries; replaced by GSCNTR1).</li> <li><code>GSCNTR1</code>: Input keyed (containers, alpha key for desc).</li> <li><code>GSPROD</code>: Input (products).</li> <li><code>GSPRCT</code>: Input (product categories?).</li> <li><code>GSMLCD</code>: Input (multi-location codes, loading loc).</li> <li><code>BBCAID</code>: Input (carrier IDs).</li> <li><code>BBOTHS</code>: Update (freight/carrier desc, bill-to addr).</li> <li>Printer files: <code>LIST</code> (picks), <code>LIST2</code> (PKG picks), <code>LIST3</code> (confirmations).</li> </ul> <p>Most are input keyed for chains; some updates (e.g., BBOTHS).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>From revision comments:</p> <ul> <li><code>MSHPADR</code>: Called for compressed ship-to addr (parms incl. country).</li> <li><code>MINLBGL1</code>: Called for gallons/lbs calc (revised formula).</li> <li><code>BB113</code>: Called for freight calc (passes bill addr; handles multiple tables). </li> </ul> <p>No others visible in truncated code.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB1103%20RPG/","title":"BB1103 RPG","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB1103%20RPG/#process-steps-of-the-rpg-program-bb1103","title":"Process Steps of the RPG Program BB1103","text":"<p>This RPG III program (BB1103) preprocesses order data for printing picking tickets by reading input records, determining custom grouping and sorting keys based on order characteristics, and writing extended records to an output file. It handles three record types: headers, details, and others (e.g., marks or attachments). The core logic applies business-specific sorting rules to detail lines (e.g., by product, container, size) while preserving headers first and others last. The program extends each record by 42 bytes (to 554 total) with sort indicators and keys for downstream sorting (e.g., in #GSORT as seen in calling OCL). It runs in a standard RPG cycle: read input \u2192 calculate \u2192 output \u2192 repeat until end-of-file. Below is a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Header (H) specifications define the program title and purpose.</li> <li>File (F) specifications declare:<ul> <li><code>BBORTR</code>: Input primary (IP) file (512 bytes, sequential read).</li> <li><code>GSCNTR</code>: Input keyed (IF) file (512 bytes, key length 3, alternate index 2).</li> <li><code>BB1103</code>: Output (O) file (554 bytes, add mode for sequential writes).</li> </ul> </li> <li> <p>No explicit *INZSR; defaults to standard RPG init.</p> </li> <li> <p>Input Record Identification:</p> </li> <li>Input (I) specifications define non-sequential (NS) formats for three record types from <code>BBORTR</code>:<ul> <li>01 (Header): Identified by indicators 10, C0 (company?), 11 C0, 12 C0. Maps fields like BOCO (company), BORDNO (order#), BORSEQ (sequence#), BOCOON ('Y' for customer-owned), BOGPBY (group by, e.g., 'C' for category), BORACD (responsible area, e.g., 'PP'), BOMLCD (major location, e.g., 'PKGP'), BOORPR (process status).</li> <li>02 (Detail): Identified by 10NC9 (non-company?). Maps similar header fields plus BDLOC (location), BDPROD (product), BDCNTR (container), BDFLCD (flag code).</li> <li>03 (Other): Catch-all for remaining records.</li> </ul> </li> <li> <p>Additional input for <code>GSCNTR</code> (NS) maps TCDSCS (short description for size).</p> </li> <li> <p>Calculation Logic (Main Processing):</p> </li> <li>For all records: Clears work fields (SIZE, GROUP, SORT1, SORT2, SORT3 to blanks).</li> <li>Header-specific (01):<ul> <li>Sets indicator 50 off if BOORPR is blank (prints in line entry order); on otherwise (sorted order for 'C'/'S' codes).</li> </ul> </li> <li>Detail-specific (02):<ul> <li>Retrieves SIZE: If BDFLCD != 'N', chains to GSCNTR by BDCNTR (indicator 88 on failure); sets SIZE to TCDSCS (short desc) if found, else blank.</li> <li>Determines GROUP/SORT keys based on nested conditions (see Business Rules for details):</li> <li>If customer-owned (BOCOON='Y'): Group by product or size/container/product.</li> <li>Else if ARG PKG PLANT (BORACD='PP' and BOMLCD='PKGP'): Similar, product or size/container/product.</li> <li>Else (ARG all other): Product or container/product/container.</li> <li>No processing for other records (03).</li> </ul> </li> <li> <p>The program cycles through all <code>BBORTR</code> records automatically via LR (last record) indicator.</p> </li> <li> <p>Output to Extended File:</p> </li> <li>Output (O) specifications write to <code>BB1103</code> in detail add (DADD) mode:<ul> <li>For headers (01): Copies original 512 bytes (DTA1/DTA2), adds '1' (record type) at pos 513, blanks in sort fields (523-553), BOORPR at 554.</li> <li>For details (02): Copies 512 bytes, adds '2' at 513. Conditionally (based on 50 off/on):</li> <li>If unsorted (N50): '0' at 524, BORKEY (order key) at 533.</li> <li>If sorted (50): GROUP at 523, SORT1 at 533, SORT2 at 543, SORT3 at 553.</li> <li>Adds BOORPR at 554.</li> <li>For others (03): Copies 512 bytes, adds '3' at 513, blanks in sort fields, BOORPR at 554.</li> </ul> </li> <li> <p>Ensures output records are extended for sorting (e.g., headers first via '1', details '2', others '3').</p> </li> <li> <p>Program Termination:</p> </li> <li>Ends when <code>BBORTR</code> EOF reached (LR on implicitly).</li> <li>No explicit cleanup; files close automatically.</li> </ol> <p>The program is called from OCL (e.g., BB111) to prepare sorted data for picking ticket printing, extending records for custom sorts in subsequent steps.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB1103%20RPG/#business-rules","title":"Business Rules","text":"<ul> <li>Record Typing and Prioritization: Forces output order: Headers ('1' marker) &gt; Details ('2') &gt; Others ('3'). This ensures coherent picking tickets (headers first, details grouped, attachments last).</li> <li>Sorting Modes:</li> <li>If BOORPR blank: Unsorted (indicator 50 off; prints in entry sequence, uses '0' and BORKEY for minimal sort).</li> <li>If BOORPR non-blank (e.g., 'C' for confirmation, 'S' for something else): Sorted (50 on; applies custom GROUP/SORT1-3).</li> <li>Detail Grouping/Sorting Logic (Nested by Order Type):</li> <li>Customer-Owned Only (BOCOON='Y', e.g., for viscosity EDI856):<ul> <li>By Category (BOGPBY='C'): GROUP/SORT1=Product, SORT2=Container, SORT3=Blank.</li> <li>By Size: GROUP=Size Desc, SORT1=Blank, SORT2=Container, SORT3=Product.</li> </ul> </li> <li>ARG PKG Plant (BORACD='PP' and BOMLCD='PKGP'):<ul> <li>By Category: GROUP/SORT1=Product, SORT2=Container, SORT3=Blank.</li> <li>By Size: GROUP=Size Desc, SORT1=Blank, SORT2=Container, SORT3=Product.</li> </ul> </li> <li>ARG All Other:<ul> <li>By Category: GROUP/SORT1=Product, SORT2=Blank, SORT3=Container.</li> <li>By Size: GROUP/SORT1=Container, SORT2=Blank, SORT3=Product.</li> </ul> </li> <li>SIZE derived from GSCNTR short desc if BDFLCD!='N' (non-new?); blank otherwise.</li> <li>Data Integrity: Chains fail gracefully (88 on, sets blanks). No updates; read-only input, additive output.</li> <li>Purpose Alignment: Prepares for picking tickets with efficient warehouse flow (e.g., group by category for similar items, size for bin optimization). Assumes input from prior selection (e.g., BB112/BB111).</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB1103%20RPG/#tables-used","title":"Tables Used","text":"<ul> <li><code>BBORTR</code>: Input primary (IP) file (sequential read, 512 bytes). Source of order records (headers, details, others).</li> <li><code>GSCNTR</code>: Input keyed (IF) file (512 bytes, key 3 bytes). Used for chaining to get container size descriptions (TCDSCS).</li> <li><code>BB1103</code>: Output (O) file (554 bytes, add mode). Extended output with sort keys.</li> </ul> <p>No database updates; all are disk files.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB1103%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>None. The program contains no CALL opcodes or external subroutine references (EXSR to external programs). It operates standalone.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110E%20RPG36/","title":"BB110E RPG36","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110E%20RPG36/#process-steps-of-the-rpg-program-bb110e","title":"Process Steps of the RPG Program BB110E","text":"<p>This RPG III program (for IBM i/AS/400 systems) serves as a \"busy screen\" or waiting/interruptible display for order entry processes, specifically related to picking tickets and confirmations. It displays a screen to the user, likely indicating that a background process is active (e.g., \"checking\" or \"processing\"), and monitors for user input, particularly a cancel action. The program uses indicators (flags) to control flow and screen behavior. Below is a step-by-step breakdown of the execution flow based on the code structure (H, F, I, C, O specifications):</p> <ol> <li>Program Initialization:</li> <li>The program starts with header (H) specifications, defining it as BB110E with some parameters (e.g., P016, B \u2013 possibly print or batch options, but not central to logic).</li> <li> <p>File (F) specifications define a single workstation file named <code>SCREEN</code> (display file for interactive user interface), with a record length of 500 bytes, attached to the WORKSTN device (terminal or emulator).</p> </li> <li> <p>Input Handling:</p> </li> <li>Input (I) specifications define the screen format <code>SCREEN</code> as non-sequential (NS) under indicator 01.</li> <li> <p>A data structure (UDS-like) maps positions 300-305 on the input record to a field named <code>CANCEL</code> (likely a 6-character field to detect user input like \"/CANCEL\").</p> </li> <li> <p>Calculation Logic (Main Processing):</p> </li> <li>Under indicator 01 and 10, if not KG (a function key indicator, possibly F3 or F12 for cancel), set off indicator 10. This prepares for redisplay or continuation.</li> <li>If KG is on (cancel key pressed):<ul> <li>Move the literal 'CANCEL' into the <code>CANCEL</code> field.</li> <li>Set off indicators 01 and 10 (reset display/processing flags).</li> <li>Set on the Last Record (LR) indicator, which signals the program to end gracefully.</li> </ul> </li> <li> <p>If indicator 09 is off (N09), set on indicators 10 and 09. This might enable error highlighting or alternate screen behavior (e.g., for invalid input or busy state).</p> </li> <li> <p>Output and Display:</p> </li> <li>Output (O) specifications define detail output (D) to the <code>SCREEN</code> file under indicators 01 and 10.</li> <li>Outputs a constant or format name 'BB110EFM' associated with K8 (possibly a function key or format identifier for the display file DDS). This likely displays a formatted screen (e.g., a message like \"Processing... Press Cancel to stop\").</li> <li> <p>The screen is displayed to the user, and the program waits for input (e.g., EXFMT implied in workstation file handling).</p> </li> <li> <p>Program Termination:</p> </li> <li>If cancel is detected (via KG), the program ends via LR indicator.</li> <li>Otherwise, it may loop or redisplay based on indicators (though no explicit loop; typical in RPG for interactive programs via indicator-controlled EXFMT cycles).</li> <li>No error handling or complex loops are present; it's a simple modal display for interrupting a process.</li> </ol> <p>The program runs in a cycle typical of RPG: Read input \u2192 Calculate \u2192 Output \u2192 Repeat until LR. It's designed to be called from an OCL (as noted), run briefly to show a status screen, and return control (possibly with <code>CANCEL</code> value indicating interruption).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110E%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Purpose: Acts as a user-interruptible \"busy\" indicator during order entry workflows (e.g., generating picking tickets or confirmations). It prevents user interaction with the main system while processing occurs but allows cancellation.</li> <li>Cancel Handling: If the user presses a designated cancel key (KG), the program sets <code>CANCEL</code> to 'CANCEL' and terminates. This value is likely checked by the calling OCL to abort the batch or process (e.g., order confirmation generation).</li> <li>Indicator Usage:</li> <li>01: Controls input/output for the main screen format.</li> <li>09: Possibly for error or alternate state (set on if not already active).</li> <li>10: Toggles display/processing (set off on entry, set on for busy/error).</li> <li>KG: Function key for cancel (business rule: Allow user to interrupt long-running order processes to avoid timeouts or unwanted completions).</li> <li>Interactivity: The screen must be responsive; no long computations here \u2013 it's purely for UI feedback during external processing.</li> <li>Data Integrity: No database updates; it's read-only for user input. Business implication: Safe for concurrent use in multi-user order entry systems.</li> <li>Assumptions: Relies on external DDS (Display Data Description) for <code>SCREEN</code> file (not shown in code) to define actual screen layout (e.g., messages, fields). The 'BB110EFM' likely references a format in that DDS.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110E%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li><code>SCREEN</code>: A workstation display file (not a database table). Used for interactive input/output with the user terminal. No physical database files (PF) are defined or accessed; all operations are screen-based.</li> </ul> <p>No database tables (e.g., PF-DTA) are used for reading/writing data. The program is UI-focused.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB110E%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program contains no CALL, EXSR (external subroutine), or other opcodes that invoke external programs or procedures. It operates standalone, likely returning control to the calling OCL via LR or cancel detection.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111%20OCL/","title":"BB111 OCL","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111%20OCL/#process-steps-of-the-ocl-program-bb111","title":"Process Steps of the OCL Program BB111","text":"<p>This OCL (Operation Control Language) script for IBM i/AS/400 handles the printing of order confirmations and related documents (e.g., pick lists, packaging lists) from pre-selected order data. It prepares data through sorting and preprocessing, sets up printer overrides, runs the main print program, and optionally processes spool files for server copying (via Spoolflex). The script uses conditional logic based on parameters like <code>?9?</code> (library prefix), <code>?13?</code> (mode, e.g., 'PP' for pick print), and switches. It assumes input files like BBOCFR (from prior selection) contain sorted order records. Below is a step-by-step breakdown:</p> <ol> <li>Initial Setup and File Check:</li> <li>Sets local offsets: 470 to '?13?' (mode or parameter), 480 to '?9?' (library prefix).</li> <li>Checks if file <code>?9?BBOCFH</code> exists and has records (<code>?F'A,?9?BBOCFH'?/0</code>); if empty (0 records), jumps to \"END\" (skips processing, as no orders to print).</li> <li>Calls <code>GSY2K</code> (likely a year-2000 date compliance routine).</li> <li> <p>Calls <code>STRPCOCLP</code> (starts PC organizer or client access process, possibly for integration).</p> </li> <li> <p>Conditional Local Data Setup:</p> </li> <li> <p>If location <code>?L'103,3'?</code> is 'SEL', sets offset 1 to 'O COAC' (possibly a sort or output option for selected orders); otherwise, sets to 'OCOC' (default company/output code).</p> </li> <li> <p>Initial Sorting of Order Records:</p> </li> <li>Loads sort utility <code>#GSORT</code>.</li> <li>Defines input file <code>?9?BBOCFR</code> (shared), output <code>?9?BB111S</code> (extendable, job-retained).</li> <li>Runs sort with specifications:<ul> <li>Header: SORTR 15A, 3X 512 N (ascending sort on 512-byte records).</li> <li>Input conditions: Exclude if position 1='D' (deleted?), include if positions 2-3='C10' (company-specific?).</li> <li>Fields: Company (2-3), Order (4-9), Seq# (10-12), with special handling for positions 121-123 (record types: header first, then marks, details last).</li> <li>Forces header records first by sorting on record type markers.</li> </ul> </li> <li> <p>Ends sort.</p> </li> <li> <p>Preprocess for Pick List Sorting (JB01 Section):</p> </li> <li>Calls <code>GSDELETE</code> to delete <code>?9?BB1103</code> if exists.</li> <li>Creates temporary physical file <code>QTEMP/?9?BB1113</code> (record length 554).</li> <li>Loads program <code>BB1103</code> (preprocess for sorting detail records based on group-by in header).</li> <li>Files: Input <code>?9?BB111S</code> (from prior sort), output <code>?9?BB1113</code> (extendable), <code>?9?GSCNTR</code> (shared).</li> <li>Runs <code>BB1103</code>.</li> <li>Loads <code>#GSORT</code> again.</li> <li>Input <code>?9?BB1113</code>, output <code>?9?BB1113S</code> (extendable).</li> <li>Sort specs: SORTR 42A, 3X 553 N.<ul> <li>Conditions: Exclude pos 1='D', include pos 554='C'.</li> <li>Fields: Company (2-3), Order (4-9), Header first (513), SORT1 asc (524-533), SORT2 desc (534-543), SORT3 asc (544-553), Seq# (10-12).</li> </ul> </li> <li>Ends sort.</li> <li> <p>Deletes <code>?9?BB1113</code> (cleanup temporary).</p> </li> <li> <p>Main Print Program Load and File Setup:</p> </li> <li>Loads program <code>BB110</code> (core printing logic for confirmations/picks).</li> <li> <p>Defines numerous input files (all shared DISP-SHR): <code>?9?BB1113S</code> (sorted input), <code>?9?BBOCFR</code> (input/output), <code>?9?BBORCL</code>, <code>?9?ARCUST</code>, <code>?9?ARCUPR</code>, <code>?9?SHIPTO</code>, <code>?9?GSCONT</code>, <code>?9?GSTABL</code>, <code>?9?GSUMCV</code>, <code>?9?GSCTWT</code>, <code>?9?GSCTUM</code>, <code>?9?BICONT</code>, <code>?9?GSHAZM</code>, <code>?9?BBFRPR</code>, <code>?9?BBSRNH</code>, <code>?9?CUADR</code>, <code>?9?SHPADR</code>, <code>?9?EDICUS</code>, <code>?9?BBASND</code>, <code>?9?BBSHPH</code>, <code>?9?BBSHPD</code>, <code>?9?BBORHS1</code>, <code>?9?BBORDS1</code>, <code>?9?BBORA</code>, <code>?9?BBORHS1</code> (duplicate), <code>?9?BBORDS1</code> (duplicate), <code>?9?BBFPORH</code>, <code>?9?BBFPORH</code> (duplicate), <code>?9?BBFPORD</code>, <code>?9?BBFPORA</code>, <code>?9?BBORDB</code>, <code>?9?BBORA</code> (duplicate), <code>?9?BBORF</code>, <code>?9?BBFPORF</code>, <code>?9?ARCUFMX</code>, <code>?9?GSCNTR</code>, <code>?9?GSCNTR1</code>, <code>?9?BBOCFR</code> (duplicate as BBORTR3), <code>?9?GSPROD</code>, <code>?9?GSPRCT</code>, <code>?9?GSMLCD</code>, <code>?9?BBCAID</code>.</p> </li> <li> <p>Printer Overrides and Setup:</p> </li> <li>Conditional on <code>?9?/G</code> (likely production library) and <code>?13?/PP</code> (pick print mode):<ul> <li>Overrides printer file <code>LIST</code> (form type PICK, CPI 10, output queue varies, drawer 1, align yes).</li> <li>Similar for <code>LIST2</code> (added 10/24/2013 for packaging, form PKGP).</li> <li>For <code>LIST3</code> (added for order confirmations, form ORCF, CPI 15, output queues like ORDCONOUTQ or TESTOUTQ).</li> </ul> </li> <li> <p>These ensure correct form alignment, compression, and routing for different document types (picks, packaging, confirmations).</p> </li> <li> <p>Run Main Print Program:</p> </li> <li> <p>Runs <code>BB110</code> (prints confirmations/picks using prepared files).</p> </li> <li> <p>Spoolflex Processing:</p> </li> <li> <p>If <code>?9?/G</code>, <code>?13?/PP</code>, and switch bit 6 is 1: Calls <code>BB111AC</code> (Spoolflex to copy picks to server; errors pop up on user workstation if PDF is open).</p> </li> <li> <p>Termination (TAG END):</p> </li> <li>If <code>?10?/</code> is true (possibly a cancel or end flag), blanks all local variables and resets switches to 00000000 (cleanup).</li> </ol> <p>The script is batch-oriented, assuming prior selection populated BBOCFH/BBOCFR. It emphasizes sorting for proper order (headers first, details last) and conditional printing based on environment/mode.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Preparation: Orders must be sorted by company, order#, sequence, with headers prioritized (via record type markers in pos 121-123/513). Deleted records ('D' in pos 1) are excluded. Custom sorts (SORT1 asc, SORT2 desc, SORT3 asc) apply to details, likely for bin/location grouping in pick lists.</li> <li>File Existence Check: No processing if BBOCFH empty (business: Avoid unnecessary runs/printer waste).</li> <li>Environment-Specific Handling: In production (<code>?9?/G</code>), uses specific output queues (e.g., PICKNWOUTQ, ORDCONOUTQ); test uses TESTOUTQ. Pick mode (<code>?13?/PP</code>) triggers pick/pack forms and Spoolflex.</li> <li>Printer Configuration: Forms must align (ALIGN-YES), CPI set for readability (10 for picks/pack, 15 for confirmations). Drawer 1 default.</li> <li>Spoolflex Rule: Only in live environment, for server PDF copying; user must close conflicting files (error popup).</li> <li>Temporary Files: Created in QTEMP, deleted post-use (cleanup to avoid clutter).</li> <li>Record Types: Forces headers &gt; marks &gt; details in output for coherent printing.</li> <li>Assumptions: Relies on prior programs (e.g., BB112) to populate selection files. No direct updates; read-only shared access.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111%20OCL/#tables-used","title":"Tables Used","text":"<p>The script interacts with the following physical files (tables) via FILE NAME- specifications (all shared DISP-SHR unless noted). Many are inputs for lookup/printing; some are outputs or temporaries:</p> <ul> <li><code>?9?BBOCFH</code>: Checked for records (input).</li> <li><code>?9?BBOCFR</code>: Input for sorting, also as BBORTR/BBORTO/BBORTR3 (input/output).</li> <li><code>?9?BB111S</code>: Sorted output from first sort (input to preprocess).</li> <li><code>QTEMP/?9?BB1113</code>: Temporary created (output from BB1103, input to second sort).</li> <li><code>?9?BB1113S</code>: Sorted output from second sort (input to BB110).</li> <li><code>?9?GSCNTR</code>: Shared input (country data, multiple uses).</li> <li><code>?9?BBORCL</code>: Shared input (order control).</li> <li><code>?9?ARCUST</code>: Shared input (customers).</li> <li><code>?9?ARCUPR</code>: Shared input (customer pricing?).</li> <li><code>?9?SHIPTO</code>: Shared input (ship-to addresses).</li> <li><code>?9?GSCONT</code>: Shared input (contacts?).</li> <li><code>?9?GSTABL</code>: Shared input (tables/lookups).</li> <li><code>?9?GSUMCV</code>: Shared input (unit conversions?).</li> <li><code>?9?GSCTWT</code>: Shared input (carton weights?).</li> <li><code>?9?GSCTUM</code>: Shared input (carton UOM?).</li> <li><code>?9?BICONT</code>: Shared input (bill-to contacts?).</li> <li><code>?9?GSHAZM</code>: Shared input (hazmat data).</li> <li><code>?9?BBFRPR</code>: Shared input (freight pricing?).</li> <li><code>?9?BBSRNH</code>: Shared input (serial numbers?).</li> <li><code>?9?CUADR</code>: Shared input (customer addresses).</li> <li><code>?9?SHPADR</code>: Shared input (ship addresses).</li> <li><code>?9?EDICUS</code>: Shared input (EDI customers).</li> <li><code>?9?BBASND</code>: Shared input (ASN data?).</li> <li><code>?9?BBSHPH</code>: Shared input (ship headers?).</li> <li><code>?9?BBSHPD</code>: Shared input (ship details?).</li> <li><code>?9?BBORHS1</code>: Shared input (order headers, duplicate).</li> <li><code>?9?BBORDS1</code>: Shared input (order details, duplicate).</li> <li><code>?9?BBORA</code>: Shared input (order attachments?, duplicate).</li> <li><code>?9?BBFPORH</code>: Shared input (freight PO headers, duplicate).</li> <li><code>?9?BBFPORD</code>: Shared input (freight PO details).</li> <li><code>?9?BBFPORA</code>: Shared input (freight PO attachments).</li> <li><code>?9?BBORDB</code>: Shared input (order rebates? as BBORDRB).</li> <li><code>?9?BBORF</code>: Shared input (order freight?).</li> <li><code>?9?BBFPORF</code>: Shared input (freight PO freight).</li> <li><code>?9?ARCUFMX</code>: Shared input (customer format matrix?).</li> <li><code>?9?GSCNTR1</code>: Shared input (country alternate?).</li> <li><code>?9?GSPROD</code>: Shared input (products).</li> <li><code>?9?GSPRCT</code>: Shared input (product categories?).</li> <li><code>?9?GSMLCD</code>: Shared input (multi-location codes?).</li> <li><code>?9?BBCAID</code>: Shared input (carrier IDs).</li> </ul> <p>Printer files: LIST (picks), LIST2 (packaging), LIST3 (confirmations) \u2013 overridden but not traditional tables.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The script calls or loads the following external programs/utilities/commands:</p> <ul> <li><code>GSY2K</code>: Called for date handling.</li> <li><code>STRPCOCLP</code>: Called to start PC-related process.</li> <li><code>#GSORT</code>: Loaded and run twice (system sort utility).</li> <li><code>GSDELETE</code>: Called to delete files (custom command?).</li> <li><code>BB1103</code>: Loaded and run for preprocess sorting.</li> <li><code>BB110</code>: Loaded and run for main printing.</li> <li><code>BB111AC</code>: Called conditionally for Spoolflex.</li> </ul> <p>System commands: CRTPF (create physical file), OVRPRTF (override printer file), IFF/IF (conditionals), PRINTER (printer setup, possibly custom).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111AC%20CLP/","title":"BB111AC CLP","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111AC%20CLP/#process-steps-of-the-clp-program-bb111ac","title":"Process Steps of the CLP Program BB111AC","text":"<p>This Control Language Program (CLP) for IBM i/AS/400 automates the handling of spool files generated from order confirmation printing (e.g., from BB110 via LIST3 printer file). It uses Spoolflex (a third-party spool file management tool) commands to split, convert to PDF, copy, distribute (e.g., for emailing), and archive the files to a network folder (G:\\CUSTSRV\\ORDER CONFIRMATIONS). The program runs in a loop to handle errors gracefully, such as when a PDF is already open on the network share, prompting the user to close it and retry. It retrieves the current user and workstation for messaging. Below is a step-by-step breakdown of the execution flow:</p> <ol> <li>Variable Declaration and Job Information Retrieval:</li> <li>Declares variables: <code>&amp;WRKSTN</code> (workstation/job name, char 10), <code>&amp;USER</code> (user ID, char 10), <code>&amp;PICK</code> (extracted PDF name for error handling, char 15), <code>&amp;MSGID</code> (message ID, char 7), <code>&amp;ERRMSG</code> (error message data, char 80).</li> <li> <p>Retrieves the current job's user ID (<code>&amp;USER</code>) and job name (<code>&amp;WRKSTN</code>) using <code>RTVJOBA</code>.</p> </li> <li> <p>Main Processing Loop (Labeled AGAIN):</p> </li> <li>Executes <code>SFASPLIT</code> to split spool files from output queue <code>ORDCONOUTQ</code> (order confirmation outq), selecting files named 'ORDER CONF LIST3', renaming output to 'order confirmation', and moving to <code>ORDCONSVOQ</code> (save queue). Combines selections (*NO).</li> <li> <p>Monitors for message <code>SF00136</code> (no files selected); if triggered, jumps to <code>EMPTY</code> label.</p> </li> <li> <p>Add Document for Emailing/Archiving:</p> </li> <li>Executes <code>FFAEDOC</code> to add the spool file as an electronic document named 'ARG ORDER CONFIRM', for printer 'ORDER CONFIRMATION', selecting from <code>QUSRSYS/ORDCONOUTQ</code> and naming output 'ORDER CONFIRMATION' (likely converts to PDF for emailing/saving).</li> <li> <p>Monitors <code>SF00136</code>; if triggered, jumps to <code>EMPTY</code>.</p> </li> <li> <p>Copy Spool File for Naming/Email:</p> </li> <li>Executes <code>SFACOPY</code> to copy spool files from <code>QUSRSYS/ORDCONOUTQ</code> named 'ORDER CONF LIST3', renaming to 'ORD CONF NAMING EMAL', no combine.</li> <li> <p>Monitors <code>SF00136</code>; if triggered, jumps to <code>EMPTY</code>.</p> </li> <li> <p>Distribute to Multiple Delivery Points:</p> </li> <li>Executes <code>SFARDST</code> three times for different recipients/distribution names: 'ORDCONF EL DELIVERY1', 'ORDCONF EL DELIVERY2', 'ORDCONF EL DELIVERY3', all from <code>ORDCONOUTQ</code>.</li> <li> <p>For each:</p> <ul> <li>Monitors <code>CPFA0D4</code> (object not found or bad condition); jumps to <code>BAD</code> label.</li> <li>Monitors <code>CPFA09E</code> (object in use, e.g., PDF open); jumps to <code>ERROR</code> label.</li> <li>Monitors <code>SF00136</code>; jumps to <code>EMPTY</code>.</li> </ul> </li> <li> <p>Jump to Successful Completion:</p> </li> <li> <p>Jumps to <code>GOOD</code> label if no errors.</p> </li> <li> <p>Error Handling (ERROR Label):</p> </li> <li>Receives the last message data into <code>&amp;ERRMSG</code> and ID into <code>&amp;MSGID</code> using <code>RCVMSG</code>.</li> <li>If <code>&amp;MSGID</code> is not 'CPFA09E', loops back to <code>ERROR</code> (safety check, though unlikely).</li> <li>Extracts the PDF name (<code>&amp;PICK</code>) from positions 38-49 of <code>&amp;ERRMSG</code>.</li> <li>Sends a break message (<code>SNDBRKMSG</code>) to the user's workstation queue (<code>&amp;WRKSTN</code>) informing them the PDF is open, to close it, and press Enter to continue.</li> <li> <p>Jumps back to <code>AGAIN</code> to retry.</p> </li> <li> <p>Bad Condition Handling (BAD Label):</p> </li> <li>Sends a break message to <code>&amp;WRKSTN</code> indicating a PDF is open for a selected confirmation, to close it and press Enter to reset and retry.</li> <li> <p>Jumps back to <code>AGAIN</code>.</p> </li> <li> <p>Empty/No Files Handling (EMPTY Label):</p> </li> <li> <p>Sends a break message to <code>&amp;WRKSTN</code> indicating no order confirmations were selected, press Enter to return to the menu.</p> </li> <li> <p>Successful Completion (GOOD Label):</p> <ul> <li>Executes <code>SFAMOVE</code> to move spool files named 'ORDER CONF list3' from <code>QUSRSYS/ORDCONOUTQ</code> to <code>QUSRSYS/ORDCONSVOQ</code> (archive/save queue).</li> <li>Monitors <code>SF00136</code> (ignores if no files to move).</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Ends the program (<code>ENDPGM</code>).</li> </ul> </li> </ol> <p>The program is interactive via break messages, assuming a user at the workstation to respond (e.g., close PDFs). It retries indefinitely on file-open errors until resolved or no files.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111AC%20CLP/#business-rules","title":"Business Rules","text":"<ul> <li>Spool File Selection and Processing: Only processes spool files named 'ORDER CONF LIST3' from <code>ORDCONOUTQ</code>. If none exist, informs user and exits (no unnecessary processing).</li> <li>Error Retry Mechanism: If a PDF is open on the network share (G:\\CUSTSRV\\ORDER CONFIRMATIONS), prompts the user to close it and automatically retries the entire process. This ensures data integrity and avoids overwrites on locked files.</li> <li>Distribution: Distributes copies to three predefined delivery points ('ORDCONF EL DELIVERY1/2/3'), likely for emailing to different recipients or systems (e.g., customer service, archives). Fails gracefully if any distribution point is invalid.</li> <li>Archiving: Moves processed files to <code>ORDCONSVOQ</code> for saving/archiving after successful distribution.</li> <li>User Interaction: Uses break messages to the calling workstation for real-time feedback (e.g., close PDF, no files). Assumes an interactive session from OCL.</li> <li>Environment: Relies on Spoolflex for PDF conversion/emailing/saving to Windows share (G: drive). Ignores non-critical errors like no files to move.</li> <li>Assumptions: Spool files are generated prior (e.g., by BB110). No direct data validation; focuses on spool management.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111AC%20CLP/#tables-used","title":"Tables Used","text":"<p>None. This is a spool file manipulation program using output queues (e.g., ORDCONOUTQ, ORDCONSVOQ), but no database files (physical or logical) are declared, opened, or accessed.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111AC%20CLP/#external-programs-called","title":"External Programs Called","text":"<p>None. The program uses system commands (e.g., <code>RTVJOBA</code>, <code>RCVMSG</code>, <code>SNDBRKMSG</code>, <code>MONMSG</code>) and Spoolflex-specific commands (e.g., <code>SFASPLIT</code>, <code>FFAEDOC</code>, <code>SFACOPY</code>, <code>SFARDST</code>, <code>SFAMOVE</code>), but no explicit <code>CALL</code> to other programs. Spoolflex commands are likely custom or product-specific but not treated as external program calls in CLP context.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111P%20OCL/","title":"BB111P OCL","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>This .OCL (Operation Control Language) script appears to be a control program for handling order confirmations in an IBM i (AS/400) environment. It uses conditional logic, switches, tags for jumping, file operations, and calls to external programs to manage batch processing, user prompts, and job submissions. The script is structured around prompts, checks, selections, and executions, with placeholders like <code>?9?</code> (likely a library prefix), <code>?L'position,length'?</code> (screen or data location checks), and <code>?3?</code> (input checks). Below is a step-by-step breakdown of the process flow:</p> <ol> <li>Initial Prompt and Checking Loop:</li> <li>Displays an \"ORDER CONFIRMATION PROMPT\" and executes <code>SCPROCP</code> (possibly a system command or procedure call with parameters).</li> <li>Tags \"AGAIN\" and pauses with a message 'CHECKING AGAIN'.</li> <li>Checks if \"ACTIVE-BB111P\" is active: If so, loads and runs program <code>BB110E</code>, then checks a screen/data location <code>?L'300,6'?</code> for \"/CANCEL\". If cancel is detected, jumps to \"END\"; otherwise, loops back to \"AGAIN\".</li> <li>Similarly checks if \"ACTIVE-BB111\" is active: Loads and runs <code>BB110E</code>, checks for \"/CANCEL\", and jumps or loops accordingly.</li> <li> <p>Resets switches to <code>00000000</code>, blanks all local variables, and calls <code>GSY2K</code> (possibly a year-2000 compliance routine or global setup).</p> </li> <li> <p>Switch and Local Variable Setup Based on Input:</p> </li> <li>If input at position <code>?3?</code> is 'Y', sets switch to <code>XXXXX1XX</code> (for order confirmations only) and sets a local offset (231) to 'Y'.</li> <li> <p>Proceeds to \"ORDER BATCH SELECTION\":</p> <ul> <li>Sets local data offsets: 470 to '?13?', 494 to '?USER?', 502 to '?WS?', 504 to 'L'.</li> <li>If switch bit 6 is 1, sets offset 60 to '    ORDER CONFIRMATIONS     ' (likely a title display).</li> </ul> </li> <li> <p>Batch Deletion Switch and Evaluation:</p> </li> <li>Sets switch to <code>0XXXXXXX</code> (resets bit 1).</li> <li>If switch bit 6 is 1, jumps to \"JUMP\".</li> <li>Tags \"JUMP\".</li> <li>Evaluates <code>P20</code> as data from location <code>?L'490,2'?</code> (possibly user input or selection code).</li> <li> <p>If switch bit 6 is 1, jumps to \"ORDCONF\" (order confirmation selection).</p> </li> <li> <p>Order Confirmation Selection:</p> </li> <li>Tags \"ORDCONF\".</li> <li>Clears physical file members (CLRPFM) for several files in library <code>?9?</code>: <code>BBOCFB</code>, <code>BBOCFD</code>, <code>BBOCFH</code>, <code>BBOCFI</code>, <code>BBOCFM</code>, <code>BBOCFO</code> (prepares files for new data by emptying them).</li> <li> <p>Calls program <code>BB112</code> with parameter '?9?' (likely populates or processes data into the cleared files).</p> </li> <li> <p>Job Submission or Execution:</p> </li> <li>Jumps to \"JUMP\" (another tag, possibly for looping or continuation).</li> <li>Checks location <code>?L'166,1'?</code> for 'Y':<ul> <li>If 'Y' and switch bit 6 is 1, submits job <code>BB111</code> with <code>*ALL</code> to job queue <code>?CLIB?,BB111,*ALL</code>.</li> <li>Otherwise, if switch bit 6 is 1, runs <code>BB111 *ALL</code> directly.</li> </ul> </li> <li> <p>Jumps to \"END\".</p> </li> <li> <p>Termination:</p> </li> <li>Tags \"END\".</li> <li>Resets switches to <code>00000000</code> and blanks all local variables (cleanup).</li> </ol> <p>The overall flow is a prompted, interactive batch process for order confirmations: It checks for active processes, handles cancellations, sets up selections, clears data files, calls a selection program, and finally executes or queues a batch job. Error handling is implicit via cancel checks and jumps.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The script calls or loads the following external programs: - <code>BB110E</code>: Loaded and run conditionally during initial checks (for both \"ACTIVE-BB111P\" and \"ACTIVE-BB111\" scenarios). - <code>BB112</code>: Called directly in the order confirmation selection step, with parameter '?9?'. - <code>BB111</code>: Run directly or submitted to a job queue in the final execution step, with parameter <code>*ALL</code>.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB111P%20OCL/#tables-used","title":"Tables Used","text":"<p>The script interacts with the following physical files (tables) in the library prefixed by <code>?9?</code> (e.g., a dynamic library name). These are cleared (CLRPFM) to prepare for new data: - <code>BBOCFB</code> - <code>BBOCFD</code> - <code>BBOCFH</code> - <code>BBOCFI</code> - <code>BBOCFM</code> - <code>BBOCFO</code></p> <p>No other files or tables are explicitly mentioned for read/write operations.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112%20RPGLE/","title":"BB112 RPGLE","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112%20RPGLE/#process-steps-of-the-rpg-program-bb112","title":"Process Steps of the RPG Program BB112","text":"<p>This RPGLE program (BB112) is an interactive inquiry tool for customer order confirmations in a customer orders system. It provides a subfile-based screen where users can enter selection criteria to view and interact with open orders (e.g., filtering by company, order number, customer, ship-to, etc.). The program supports prompting, validation, message handling, and actions like sending confirmations. It uses overrides to access files from different library groups (e.g., G or Z) based on input parameters. The main flow is initialization, file opening, subfile processing in a loop (display, input handling, repositioning/loading), and termination. Below is a step-by-step breakdown based on the code structure and subroutines:</p> <ol> <li>Program Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: <code>P$FGRP</code> (file group: 'G' or 'Z' for library overrides).</li> <li>Defines work fields, reposition fields (e.g., <code>R$CO</code>, <code>R$ORD#</code>), output parameters (e.g., <code>O$CO</code>, <code>O$ORD#</code>), and defaults (e.g., <code>O$MODE</code> to blanks, <code>O$FLAG</code> to '0').</li> <li>Sets subfile control variables (e.g., <code>RRN1</code> to 0, page size <code>PAGSZ1</code> to 24).</li> <li>Calculates current date/time from program status data structure (<code>PSDS##</code>), derives century (<code>PS#CEN</code>), year/month/day formats (<code>PS#YMD</code>, <code>PS#DAT</code>), and handles Y2K logic (e.g., if year &gt;=40, century=19; else 20).</li> <li>Initializes message handling (e.g., <code>DSPMSG</code> off, program message queue to '*').</li> <li> <p>Defines keylists (e.g., <code>KLORDH</code> for order header chaining by company/order#, <code>KLCUST</code> for customer, etc.) for file access.</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides via <code>QCMDEXC</code> API based on <code>P$FGRP</code>:<ul> <li>If 'G' or 'Z', loops through arrays <code>OVG</code> or <code>OVZ</code> (8 overrides each) for files like ARCUST, BBORCL, etc., redirecting to libraries like LIBL/GARCUST or LIBL/ZARCUST.</li> <li>Additionally, overrides BB112WL1 to QTEMP/BB112WL1 (from <code>OVR</code> array, added in revision jk01).</li> </ul> </li> <li> <p>Opens all declared files with USROPN (user-controlled open): ARCUST, BBORCL, BBORDH, GSCNTR, GSPROD, GSTABL, INLOC, SHIPTO, and BB112WL1.</p> </li> <li> <p>Process Subfile (SRSFL1 Subroutine - Main Interactive Loop):</p> </li> <li>Sets initial subfile mode to folded (<code>#FOLD='1'</code>, indicator 45 on).</li> <li>Clears and writes message subfile.</li> <li>Defaults company (<code>C$CO</code>) to 10, repositions to first record, and sets ship-from date (<code>C$SFDT</code>) to the 1st of the month one year ago (using date conversion DS).</li> <li>Calls SF1REP to reposition/load the subfile initially.</li> <li>Enters a loop (<code>SF1AGN=*ON</code>) for user interaction:<ul> <li>If reposition needed (<code>REPSFL=*ON</code>), clears selection fields and calls SF1REP.</li> <li>Writes command line (SFLCMD1), displays messages if any.</li> <li>Conditions subfile display (indicator 41 on if <code>RRN1&gt;0</code>), sets fold/unfold (indicator 45).</li> <li>Displays subfile control (EXFMT SFLCTL1, indicator 40 on).</li> <li>Clears messages and format indicators (50-69 off, 21-39 off).</li> <li>Determines cursor position from INFDS (<code>CSRSRLOC</code>).</li> <li>Initializes subfile record number (<code>RCDNB1</code>) with page RRN for redisplay.</li> <li>Processes user input BEFORE subfile read:</li> <li>F3: Displays exit confirmation window (EXFMT F03WDW); if confirmed, sets <code>SF1AGN=*OFF</code> to exit loop.</li> <li>F4: Calls PROMPT subroutine to handle field-specific prompting (e.g., for order#, customer, etc., using keylists and chains).</li> <li>F5: Sets <code>ONETIME=*ON</code> and <code>REPSFL=*ON</code> for refresh.</li> <li>Position changes (e.g., <code>C$CO &lt;&gt; R$CO</code>): Calls SF1REP to reload subfile.</li> <li>Page Down: Calls SF1LOD to load more records (commented as \"fill subfile\" for non-load-all method).</li> <li>If Enter pressed, calls SF1PRC to process subfile.</li> <li>Processes user input AFTER subfile read:</li> <li>F10: Positions cursor to control record.</li> </ul> </li> <li> <p>Loop continues until exit (F3 confirmed).</p> </li> <li> <p>Subfile Reposition/Load (SF1REP Subroutine):</p> </li> <li>Clears subfile (indicator 40 on for SFLCLR).</li> <li>Builds query select strings (<code>QRYSLT</code>) using arrays QRYOH (for order header) and QRYOD (for order detail), incorporating selection criteria (e.g., company, customer, order status not 'D'eleted, date ranges).</li> <li>Positions files (e.g., SETLL on BBORDH using keylists).</li> <li>Loads subfile records by reading files (e.g., BBORDH, BBORCL), chaining for details (e.g., customer name from ARCUST, ship-to from SHIPTO), and writing to SFL1.</li> <li>Handles \"no results\" message if no records loaded.</li> <li> <p>Updates reposition fields (e.g., <code>R$CO = C$CO</code>).</p> </li> <li> <p>Process Subfile on Enter (SF1PRC Subroutine):</p> </li> <li>If subfile not empty (<code>RRN1&gt;0</code>), reads changed records (READC SFL1 until EOF, indicator 81).</li> <li> <p>For each changed record, calls SF1CHG.</p> </li> <li> <p>Process Subfile Record Change (SF1CHG Subroutine):</p> </li> <li>Processes option field (<code>S1OPT</code>):<ul> <li>If 6 (Customer Order Confirmation): Calls external program BB112SC with parameters (company, order# , file group); sets message \"Confirmation has been sent for Order # [order#]\" using COM array, calls ADDMSG.</li> </ul> </li> <li>Updates subfile record (CHAIN and UPDATE SFL1).</li> <li> <p>Clears option field.</p> </li> <li> <p>Field Prompting (PROMPT Subroutine):</p> </li> <li>Determines cursor row/column and field/record name.</li> <li>Selects based on record/field:<ul> <li>For SFLCTL1 fields (e.g., <code>C$ORD#</code>): Chains to files (e.g., BBORDH for order#, ARCUST for customer), prompts windows if needed, validates, and sets values.</li> <li>For SFL1: Displays credit window (EXFMT CRDWDW) for credit limit field.</li> </ul> </li> <li> <p>Handles commented-out calls (e.g., to LGSTABL for carrier reason).</p> </li> <li> <p>Message Handling:</p> </li> <li>ADDMSG: Builds message data, calculates length, sends via QMHSNDPM API, sets <code>DSPMSG=*ON</code>.</li> <li>WRTMSG: Writes message control (MSGCTL), indicators 49 on for display.</li> <li> <p>CLRMSG: Removes messages via QMHRMVPM API, restores record/page, sets <code>DSPMSG=*OFF</code>.</p> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files.</li> <li>Sets <code>*INLR=*ON</code> and returns.</li> </ol> <p>The program uses a \"load-on-demand\" approach for the subfile (via Page Down), with dynamic queries for filtering open orders.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Selection Criteria: Users must enter at least one value (error message from COM(01) if not). Supports filters like company (default 10), order#, PO#, customer, ship-to, salesman, location, product, carrier ID, country. Validates inputs (e.g., chains to ensure existence).</li> <li>Order Scope: Focuses on open orders (status not 'D'eleted, order print flag 'C' or 'R' for confirmation/reprint). Includes date ranges (e.g., requested date &gt;=1 year ago default).</li> <li>Credit Limits: Displays indicators for over-credit-limit (unauthorized/authorized, messages from COM(03/04)).</li> <li>Restrictions: Cannot search tracking# if invoices excluded (COM(05)); cannot search cancel reason without including canceled orders (COM(06)).</li> <li>Subfile Interaction: Supports fold/unfold (indicator 45), options (e.g., 6 for confirmation send), reposition on changes.</li> <li>File Overrides: Based on <code>P$FGRP</code> ('G' or 'Z'), redirects files to group-specific libraries (e.g., G for production, Z for test/archive). Work file BB112WL1 always to QTEMP.</li> <li>Messages/Errors: Uses GSMSGF message file. Displays \"No Results\" (COM(02)) if empty subfile. Logs actions like confirmation sent (COM(07)) or order in batch (COM(08)).</li> <li>Validation: Date validation via PLDTED (prepared for GSDTEDIT module, but not called). Ensures valid keys via chains (indicators 80/90-99 for chain failures).</li> <li>Security/Interactivity: User-controlled opens, interactive with function keys (F3 exit confirm, F4 prompt, F5 refresh, F10 cursor position). Protects fields (indicators 70-79).</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program declares and uses the following files (tables). All are keyed (K) disk files except the display file. Overrides may redirect to different libraries (e.g., G/Z prefixed):</p> <ul> <li><code>BB112D</code>: Workstation display file (CF WORKSTN) with subfile SFL1 for interactive inquiry screen (input/output).</li> <li><code>ARCUST</code>: Input-only (IF) for customer data (e.g., chaining for names).</li> <li><code>BBORCL</code>: Input-only (IF) for order control/details.</li> <li><code>BBORDH</code>: Input-only (IF) for order headers (primary for positioning/reading orders).</li> <li><code>GSCNTR</code>: Input-only (IF) for country data.</li> <li><code>GSPROD</code>: Input-only (IF) for product data (renames TPFIL5 to X@FIL5).</li> <li><code>GSTABL</code>: Input-only (IF) for table data (e.g., salesmen, carriers).</li> <li><code>INLOC</code>: Input-only (IF) for location/inventory data.</li> <li><code>SHIPTO</code>: Input-only (IF) for ship-to addresses.</li> <li><code>BB112WL1</code>: Input-only (IF) work file (temporary in QTEMP for query results or intermediate data).</li> </ul> <p>No update/output files; all are read-only except potential subfile updates.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs/procedures (via CALL opcode). System APIs are included as they are external:</p> <ul> <li><code>BB112SC</code>: Called for option 6 (order confirmation) with parameters for company, order#, file group.</li> <li><code>QCMDEXC</code>: System API to execute override commands (multiple times in OPNTBL).</li> <li><code>QMHSNDPM</code>: System API to send program messages (in ADDMSG).</li> <li><code>QMHRMVPM</code>: System API to remove messages (in CLRMSG).</li> </ul> <p>Commented-out calls (not executed): <code>LGSTABL</code> (for table lookup in PROMPT) and <code>GSDTEDIT</code> (prepared PLIST but no CALL). No other user programs in visible code.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112S%20RPGLE/","title":"BB112S RPGLE","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112S%20RPGLE/#process-steps-of-the-rpg-program-bb112s","title":"Process Steps of the RPG Program BB112S","text":"<p>This RPGLE program (BB112S) is a utility for sending customer order confirmations by populating temporary work files with data from a specific order. It reads records for a single order (passed via parameters) from the order details file and segregates them into type-specific output files (e.g., header, details, miscellaneous charges) for downstream processing (e.g., printing in BB110). The program uses keyed access for efficient reading and additive output to build the work files. It runs in a standard RPG cycle with subroutines for initialization and building. Below is a step-by-step breakdown of the execution flow based on the code structure (F, I, C, O specifications):</p> <ol> <li>Program Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: <code>Pco</code> (company number, decimal 2.0) and <code>Pordn</code> (order number, decimal 6.0).</li> <li>Constructs the key <code>KyCoOrd</code> by combining <code>Pco</code> and <code>Pordn</code> (e.g., company + order# as an 8-digit key).</li> <li> <p>No other setup; files are opened implicitly on first access.</p> </li> <li> <p>Main Processing:</p> </li> <li>Executes the <code>BUILD</code> subroutine to process the order.</li> <li> <p>Sets on the Last Record (LR) indicator to terminate the program after processing.</p> </li> <li> <p>Build Subroutine (BUILD SR):</p> </li> <li>Constructs a starting key <code>KyCoOrdSq</code> by appending '000' to <code>KyCoOrd</code> (positions sequence number 000 for headers).</li> <li>Positions the file pointer (SETLL) on <code>BBORDR</code> using <code>KyCoOrdSq</code> (starts at the beginning of the order's records).</li> <li>Enters a loop (DOU IN99 = ON) to read all records for the order:<ul> <li>Reads the next record (READE) from <code>BBORDR</code> using <code>KyCoOrd</code> (keyed by company + order#, reads sequentially until key changes).</li> <li>If not end-of-file (*IN99 off):</li> <li>Selects based on sequence number (<code>SEQ#</code> or <code>BORSEQ</code>):<ul> <li>If 000: Writes header record (EXCEPT Header) to <code>BBOCFH</code>.</li> <li>If 900-959: Writes other miscellaneous record (EXCEPT OtherMisc) to <code>BBOCFM</code>.</li> <li>If 960: Writes miscellaneous record (EXCEPT Misc960) to <code>BBOCFO</code>.</li> <li>If 961: Writes miscellaneous record (EXCEPT Misc961) to <code>BBOCFI</code>.</li> <li>If 962: Writes miscellaneous record (EXCEPT Misc962) to <code>BBOCFB</code>.</li> <li>Otherwise (details): Writes detail record (EXCEPT Detail) to <code>BBOCFD</code>.</li> </ul> </li> </ul> </li> <li> <p>Loops until no more records for the order (key mismatch triggers EOF).</p> </li> <li> <p>Output Writing:</p> </li> <li> <p>Output (O) specifications use EXCEPT to add records (EADD) to the respective files:</p> <ul> <li>Copies data from input buffers (e.g., BOHDR1/BOHDR2 for headers, BDDTL1/BDDTL2 for details) directly to output (positions 1-256 and 257-512).</li> <li>Adds spacing (/SPACE 1) between records for some outputs (e.g., headers, details, Misc960).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Ends via LR indicator after the single order is processed. Files close implicitly.</li> </ol> <p>The program is called once per order (from BB112SC), processes sequentially, and assumes records are pre-sorted by sequence number in BBORDR.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112S%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Single-Order Processing: Handles one order per invocation (keyed by company + order#), ensuring targeted confirmation generation without batching multiple orders.</li> <li>Record Segregation: Classifies records by sequence number (<code>BORSEQ</code>):</li> <li>000: Header (e.g., order info, dates, terms).</li> <li>001-899/963+: Details (line items with product, qty, etc.).</li> <li>900-959: General miscellaneous (e.g., charges, notes).</li> <li>960: Specific misc (e.g., order-related).</li> <li>961: Specific misc (e.g., invoice-related).</li> <li>962: Specific misc (e.g., BOL-related).   This segregation prepares data for type-specific printing/processing in confirmations.</li> <li>Data Copying: Direct position-based copy from input to output (no transformations/calculations), preserving original data. Deleted records (BODEL='D') are included if present, but downstream programs (e.g., BB110) may filter them.</li> <li>Key Usage: Key starts at position 2 in BBORDR (company + order# + seq#), allowing efficient positioning and reading of all seq# for an order.</li> <li>Work File Population: Builds additive work files (BBOCF*) for temporary use in confirmation workflows (e.g., sorted/printed in BB111/BB110). Assumes files are cleared beforehand (e.g., by CLRPFM in calling OCL/BB112).</li> <li>Assumptions: Relies on valid input parameters (no validation); records exist in BBORDR. No error handling beyond EOF indicators.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112S%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li><code>BBORDR</code>: Input keyed (IF) disk file (512 bytes, key location 2: company + order# + seq#). Primary source for order records (headers, details, misc).</li> <li><code>BBOCFH</code>: Output additive (O A F) disk file (512 bytes). For header records.</li> <li><code>BBOCFD</code>: Output additive (O A F) disk file (512 bytes). For detail records.</li> <li><code>BBOCFO</code>: Output additive (O A F) disk file (512 bytes). For misc records (seq 960).</li> <li><code>BBOCFI</code>: Output additive (O A F) disk file (512 bytes). For misc records (seq 961).</li> <li><code>BBOCFB</code>: Output additive (O A F) disk file (512 bytes). For misc records (seq 962).</li> <li><code>BBOCFM</code>: Output additive (O A F) disk file (512 bytes). For other misc records (seq 900-959).</li> </ul> <p>All outputs are direct copies; no updates to input file.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112S%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>None. The program contains no CALL opcodes, external subroutine references (EXSR to external), or APIs. It operates standalone.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112SC%20CLP/","title":"BB112SC CLP","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112SC%20CLP/#process-steps-of-the-clp-program-bb112sc","title":"Process Steps of the CLP Program BB112SC","text":"<p>This Control Language Program (CLP) for IBM i/AS/400 serves as a wrapper to prepare and call a subroutine for building a customer order confirmation work file (BBOCFR) based on a specific company and order number. It dynamically overrides file names using a file group parameter (e.g., 'G' for production or 'Z' for test/archive) to ensure the correct dataset is used. The program is designed to be called from an OCL script, passing in parameters for targeted order processing. Below is a step-by-step breakdown of the execution flow:</p> <ol> <li>Parameter Reception:</li> <li> <p>Receives three input parameters: <code>&amp;P$CO#</code> (company number, decimal 2.0), <code>&amp;P$ORDR</code> (order number, decimal 6.0), and <code>&amp;P$FGRP</code> (file group identifier, character 1).</p> </li> <li> <p>Variable Declaration and Initialization:</p> </li> <li>Declares character variables (length 10) for file names: <code>&amp;BBORDR</code>, <code>&amp;BBOCFH</code>, <code>&amp;BBOCFD</code>, <code>&amp;BBOCFO</code>, <code>&amp;BBOCFI</code>, <code>&amp;BBOCFB</code>, and <code>&amp;BBOCFM</code>.</li> <li> <p>Constructs these file names by concatenating <code>&amp;P$FGRP</code> with base file names (e.g., if <code>&amp;P$FGRP='G'</code>, <code>&amp;BBORDR</code> becomes 'GBBORDR').</p> </li> <li> <p>File Overrides:</p> </li> <li>Overrides database files (OVRDBF) to redirect logical file names (e.g., BBORDR) to the physical files in the library list (LIBL) with the constructed names (e.g., GBBORDR), using the first member (FIRST). This applies to all seven declared files.</li> <li> <p>These overrides ensure that the subsequent program call uses the appropriate group-specific files without hardcoding library paths.</p> </li> <li> <p>Call Subprogram:</p> </li> <li> <p>Calls program <code>BB112S</code> (likely an RPG or similar program), passing <code>&amp;P$CO#</code> and <code>&amp;P$ORDR</code> as parameters. This subprogram is responsible for the core logic of building the order confirmation work file (BBOCFR) for use in downstream processes like printing (e.g., in BB110).</p> </li> <li> <p>Cleanup:</p> </li> <li>Deletes all file overrides (DLTOVR FILE(*ALL)) to restore the default file mappings.</li> <li>Ends the program (ENDPGM).</li> </ol> <p>The program is short and focused on setup/teardown, delegating the actual data processing to BB112S. It runs synchronously and does not handle errors explicitly (e.g., no MONMSG for monitoring messages).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112SC%20CLP/#business-rules","title":"Business Rules","text":"<ul> <li>File Grouping: The file group (<code>&amp;P$FGRP</code>) determines the dataset (e.g., 'G' for live/production files like GBBORDR, 'Z' for test/archive like ZBBORDR). This allows segregation of data environments, preventing accidental mixing of production and test data during order confirmation generation.</li> <li>Targeted Processing: Processes a single order per call (specified by company and order number), ensuring efficient, on-demand building of confirmation work files rather than batching multiple orders.</li> <li>Work File Preparation: The purpose is to populate BBOCFR (customer order confirmation work file) for use in printing/processing (e.g., by BB110). This implies rules for order eligibility (e.g., open orders only, as per prior programs like BB112).</li> <li>Overrides Scope: Overrides are temporary (call-level) and removed post-call to avoid impacting other programs. Files use *LIBL for library resolution, assuming the correct library is in the job's library list.</li> <li>Assumptions: Relies on BB112S to handle data validation, population of BBOCFR, and any business logic like checking order status or details. No direct updates here; it's preparatory.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112SC%20CLP/#tables-used","title":"Tables Used","text":"<p>The program overrides the following logical file names to point to physical files (prefixed by <code>&amp;P$FGRP</code>, e.g., GBBORDR) in *LIBL. These are used indirectly via the call to BB112S; no direct read/write occurs in this CLP:</p> <ul> <li><code>BBORDR</code> (overridden to e.g., GBBORDR): Likely order details or related records.</li> <li><code>BBOCFH</code> (overridden to e.g., GBBOCFH): Order confirmation header.</li> <li><code>BBOCFD</code> (overridden to e.g., GBBOCFD): Order confirmation details.</li> <li><code>BBOCFO</code> (overridden to e.g., GBBOCFO): Order confirmation other (possibly options or attachments).</li> <li><code>BBOCFI</code> (overridden to e.g., GBBOCFI): Order confirmation items.</li> <li><code>BBOCFB</code> (overridden to e.g., GBBOCFB): Order confirmation batch or blocks.</li> <li><code>BBOCFM</code> (overridden to e.g., GBBOCFM): Order confirmation miscellaneous or marks.</li> </ul> <p>Note: The purpose mentions building BBOCFR (confirmation work file), but it's not overridden here\u2014likely handled internally by BB112S.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB112SC%20CLP/#external-programs-called","title":"External Programs Called","text":"<ul> <li><code>BB112S</code>: Called with parameters for company and order number. This is the core program that builds the order confirmation work file (BBOCFR).</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB113%20RPG/","title":"BB113 RPG","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/BB113%20RPG/#process-steps-of-the-rpg-program-bb113","title":"Process Steps of the RPG Program BB113","text":"<p>This RPG III program (BB113) generates freight purchase order (PO) files (BBFPORX series) during the picklist printing process (called from BB110 in the overall workflow). It processes order data to create freight-related records, performs calculations (e.g., quantity conversions to units, lbs, gallons), and invokes external PC-based programs for freight processing (internal or external). The program supports distinctions between internal (ARG LMS) and external (SCOXML) freight processors, with revisions adding features like skipping deleted lines, handling rush orders, and address management. It runs in a standard RPG cycle: read input \u2192 chain lookups \u2192 calculate \u2192 output \u2192 call external. Based on the file specs, input mappings, and visible logic (code truncated), below is a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>No explicit *INZSR; uses default RPG init.</li> <li>Sets keys for reading (e.g., company + order# from input parms or prior context).</li> <li> <p>Opens files (inputs for order data, lookups; outputs additive for freight POs).</p> </li> <li> <p>Read Input Records:</p> </li> <li>Reads primary input file <code>BBORTR3</code> (sorted order records from prior steps like BB111).</li> <li>Identifies record types via indicators (01 for headers: 10 C0, 11 C0, 12 C0).</li> <li> <p>Processes headers first (seq# 000), then details/misc (other seq#).</p> </li> <li> <p>Header Processing:</p> </li> <li>Maps fields from input (e.g., BODEL for delete flag, BOCO company, BORDNO order#, BOCUST customer, BOSHIP ship-to, freight codes like BOCACD carrier, BOFPER period).</li> <li>Chains to lookup files:<ul> <li><code>SHIPTO</code> for ship-to details (name, addr, city/state/zip/country).</li> <li><code>ARCUST</code> for customer details (name, addr).</li> <li><code>BBOTHS1</code>/<code>BBOTDS1</code>/<code>BBOTA1</code> for order headers/details/attachments.</li> <li><code>BBSHPH</code>/<code>BBSHPD</code> for shipment headers/details.</li> <li><code>BBFRPR</code> for freight pricing.</li> <li><code>BBORF</code> for order freight (copied to BBFPORF per MG10/JB11).</li> <li><code>BBFPORH1</code> for existing freight PO headers.</li> </ul> </li> <li>Handles freight bill address: From BB110 parms; for internal, don't use processor addr; for external, use it (JB08).</li> <li>Copies/adds fields to output: e.g., rush flag (BORUSH), order process code (BOORPR) from DC02; dispatch marks print (JB05).</li> <li> <p>Writes header to <code>BBFPORH</code> (EXCEPT HEADH or similar).</p> </li> <li> <p>Detail Processing and Calculations:</p> </li> <li> <p>For detail lines (non-header seq#):</p> <ul> <li>Skips if deleted (BODEL='D'; JB04, but sends deleted orders to internal per JB09).</li> <li>Maps fields like BDLOC location, BDPROD product, BDQTY qty, BDCNTR container, BDUM unit measure.</li> <li>Calculates conversions (JB01): Order container qty to UM qty, lbs, net gallons (using lookups like GSCTWT/GSCTUM implied from system).</li> <li>Accumulates totals: Accessorial costs to BBFPORA (JB02); total gross gallons to BBFPORF (JB12).</li> <li>Handles product cross-ref expansion to 20 chars (MG15); desc to 30 chars.</li> <li>Writes details to <code>BBFPORD</code> (line items), <code>BBFPORA</code> (accessorials), <code>BBFPORF</code> (freight specifics; copy from BBORF per MG10/JB11/JB12).</li> </ul> </li> <li> <p>Output Writing:</p> </li> <li>Additive outputs (EADD) to freight PO files:<ul> <li><code>BBFPORH</code>: Header data (e.g., order#, customer, ship-to addr, totals like BOPRTO product total, BOMITO misc, BOFRTO freight).</li> <li><code>BBFPORD</code>: Detail lines (e.g., product, qty, weights).</li> <li><code>BBFPORA</code>: Accessorial/misc charges.</li> <li><code>BBFPORF</code>: Freight details (e.g., BFFTCN ftcn, BFMILE miles, BFTWGT total weight, BFTGAL gallons, etc.; expanded per JB11/JB12).</li> </ul> </li> <li> <p>Includes fields like marks (BXOMK1-4 order, BXBMK1-4 bill, BXIMK1-2 invoice, BXDSP1-4 dispatch), addresses (ARNAME/ADR, SNAM/SAD, freight processor via @FB* from JB08).</p> </li> <li> <p>External Freight Processing Call:</p> </li> <li>Builds command strings from ** constants (COM array):<ul> <li>For external: Calls SCOXML.EXE on server (e.g., \\BRADFORD15\\SCOPRODBIN$\\SCOXML.EXE /EMAIL /FTP=/EMAIL).</li> <li>For internal: Calls InsertARGLMSOrder.EXE (e.g., \\B-P-APP1\\APPLICATIONS\\ARGLMS\\PROD\\InsertARGLMSOrder.EXE).</li> </ul> </li> <li>Executes via STRPCCMD (implied from constants; JB08/JB14 for server changes).</li> <li> <p>Handles test/prod environments.</p> </li> <li> <p>Program Termination:</p> </li> <li>Ends on EOF of input (LR on).</li> <li>No explicit cleanup; files close automatically.</li> </ol> <p>The program is called per order/batch from BB110, focuses on freight calc/setup for shipping.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB113%20RPG/#business-rules","title":"Business Rules","text":"<ul> <li>Freight Processor Distinction (JB08): </li> <li>Internal (ARG LMS): Populate BBFPOR tables, call InsertARGLMSOrder.EXE, don't use freight processor addr as bill-to (use customer/ship-to instead). Send deleted orders (JB09).</li> <li>External (SCOXML): Populate tables, call SCOXML.EXE, use freight processor addr as bill-to.</li> <li>Deleted Handling: Skip detail lines if deleted (JB04), but send full deleted orders to internal processor (JB09).</li> <li>Calculations: Convert container qty to UM/lbs/net gallons (JB01); total gross gallons (JB12). Accumulate accessorial totals correctly (JB02).</li> <li>Addresses: Compress/use correct bill-to (from BB110; DC01 for BBSHSP-&gt;SHIPTO replacement). Include country/state/zip.</li> <li>Special Fields: Add dispatch marks print (JB05), rush/order process code to header (DC02). Expanded cross-ref/desc (MG15). Add BDSQTY to avoid nulls (MG13).</li> <li>Copy Rules: Direct copy BBORF to BBFPORF (MG10, revised layout JB11/JB12).</li> <li>Environment: Test/prod server paths (JB14); no internet/external installs.</li> </ul>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB113%20RPG/#tables-used","title":"Tables Used","text":"<ul> <li><code>BBORTR3</code>: Input (IF) disk file (512 bytes, key loc 2: company + order# + seq#). Primary order records.</li> <li><code>SHIPTO</code>: Input (IF) disk file (2048 bytes, key loc 2). Ship-to addresses (replaced BBSHSP per DC01).</li> <li><code>ARCUST</code>: Input (IF) disk file (384 bytes, key loc 2). Customers.</li> <li><code>BBOTHS1</code>: Input (IF) disk file (512 bytes, key loc 2). Order headers.</li> <li><code>BBOTDS1</code>: Input (IF) disk file (512 bytes, key loc 2). Order details.</li> <li><code>BBOTA1</code>: Input (IF) disk file (512 bytes, key loc 2). Order attachments.</li> <li><code>BBSHPH</code>: Input (IF) disk file (128 bytes, key loc 2). Shipment headers.</li> <li><code>BBSHPD</code>: Input (IF) disk file (256 bytes, key loc 2). Shipment details.</li> <li><code>BBFRPR</code>: Input (IF) disk file (256 bytes, key loc 2). Freight pricing.</li> <li><code>BBFPORH1</code>: Input (IF) disk file (2176 bytes, key loc 2). Existing freight PO headers.</li> <li><code>BBORF</code>: Input (IF) disk file (640 bytes, key loc 2). Order freight (copied to output).</li> <li><code>BBFPORH</code>: Output additive (O A F) disk file (2176 bytes, key loc 2). Freight PO headers.</li> <li><code>BBFPORD</code>: Output additive (O A F) disk file (768 bytes, key loc 2). Freight PO details.</li> <li><code>BBFPORA</code>: Output additive (O A F) disk file (256 bytes, key loc 2). Freight PO accessorials.</li> <li><code>BBFPORF</code>: Output additive (O A F) disk file (640 bytes, key loc 2). Freight PO freight (expanded per JB11).</li> </ul> <p>Inputs are keyed for chains; outputs additive for building POs.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/BB113%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li><code>SCOXML.EXE</code>: PC executable for external freight (called via STRPCCMD, e.g., on \\BRADFORD15\\SCOPRODBIN$ or test; params /EMAIL /FTP=/EMAIL).</li> <li><code>InsertARGLMSOrder.EXE</code>: PC executable for internal freight (called via STRPCCMD, e.g., on \\B-P-APP1\\APPLICATIONS\\ARGLMS\\PROD or test).</li> </ul> <p>No other calls; uses system STRPCCMD for PC integration.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/","title":"Summary BB111P OCL","text":""},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#list-of-use-cases","title":"List of Use Cases","text":"<p>Based on the entire call stack of programs (from the main OCL prompt through printing, freight integration, and Spoolflex), the following distinct use cases are implemented. These are derived from the interactive inquiry, batch selection/printing, preprocessing/sorting, freight handling, and distribution workflows. Note that some programs support multiple use cases via conditional logic (e.g., modes for picks vs. confirmations).</p> <ol> <li> <p>Order Confirmation Inquiry and Selection: Interactive search and viewing of open orders with filters (e.g., by company, customer, date range), allowing users to select and manually trigger confirmation sending for a single order. This builds work files for printing.</p> </li> <li> <p>Batch Order Confirmation Printing: Automated batch processing of selected orders to generate and print order confirmations, including data sorting, validation, and output to printer queues with overrides for forms/CPI.</p> </li> <li> <p>Picking Ticket Printing: Generation of picking tickets (standard, viscosity/EDI, or packaging plant versions) with custom sorting/grouping of details (e.g., by category/size/product), calculations for weights/quantities, and printing with special formats.</p> </li> <li> <p>Proforma Invoice Printing: Printing of proforma invoices as an alternate output mode during the core printing process, focusing on order totals, freight estimates, and terms.</p> </li> <li> <p>Freight Purchase Order Generation and Processing: Creation of freight-related PO files during printing, with calculations for conversions (e.g., qty to lbs/gallons), address handling, and integration calls to internal/external freight processors.</p> </li> <li> <p>Spool File Distribution and Archiving: Post-printing handling of spool files for order confirmations, including PDF conversion, emailing to multiple recipients, saving to network folders, and error retries for locked files.</p> </li> <li> <p>Process Monitoring and Cancellation: Display of a busy/checking screen during long-running processes, allowing user interruption/cancellation of active batch jobs.</p> </li> </ol>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>This document treats each use case as a large, non-interactive function that accepts inputs (e.g., parameters like order numbers, filters, modes) and produces outputs (e.g., printed documents, files, or status). Requirements focus on business processes and rules, with concise explanations of steps and calculations. Inputs are assumed to be provided directly (e.g., via API/params), replacing screen interactions. Outputs include generated files, prints, or return codes. Business rules emphasize order eligibility, data integrity, and compliance (e.g., export terms, freight fluctuations).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#1-function-orderconfirmationinquiryselection","title":"1. Function: OrderConfirmationInquirySelection","text":"<p>Description: Searches and selects open orders for confirmation, building work files for a single order's confirmation data.</p> <p>Inputs: - Company number (decimal, default 10). - Selection filters: Order#, PO#, customer#, ship-to#, salesman#, location, product, carrier ID, country, date range (requested date, default 1 year ago to current). - File group ('G' for production, 'Z' for test/archive). - Order# for manual send.</p> <p>Process Steps: 1. Apply filters to query open order headers/details (exclude deleted 'D', include status 'C'/'R' for confirmation/reprint). 2. Position/load subfile with matching records (e.g., chain to customer/ship-to/product files for names/addresses/descriptions). 3. For selected order (option 6), override files by group, read order records from BBORDR, segregate by sequence#: Header (000) to BBOCFH, details (001-899/963+) to BBOCFD, misc (900-959 to BBOCFM, 960 to BBOCFO, 961 to BBOCFI, 962 to BBOCFB). 4. Return status (e.g., \"Confirmation sent\") and work files for printing.</p> <p>Business Rules and Calculations: - Must enter at least one filter; else error \"Must Enter At Least One Selection Value\". - Restrict searches: No tracking# if excluding invoices; no cancel reason without including canceled orders. - Validate existence via chains (e.g., customer in ARCUST); highlight over-credit (authorized/unauthorized). - Date ranges: Requested date &gt;=1 year ago default; convert to CYMD format. - No calculations; direct data copy to work files for integrity.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#2-function-batchorderconfirmationprinting","title":"2. Function: BatchOrderConfirmationPrinting","text":"<p>Description: Batch prints confirmations for selected orders, with sorting and preprocessing.</p> <p>Inputs: - Library prefix (e.g., 'G' for production). - Mode ('PP' for pick print, else confirmation). - Switch flags (e.g., bit 6 for Spoolflex).</p> <p>Process Steps: 1. Check input file BBOCFH for records; skip if empty. 2. Sort BBOCFR records: Exclude deleted, prioritize headers &gt; marks &gt; details by company/order/seq/record type. 3. Preprocess details: Group/sort by type (customer-owned, ARG PKG plant, other) using custom keys (SORT1 asc, SORT2 desc, SORT3 asc); extend records to 554 bytes. 4. Load/print: Chain lookups for desc/addr/weights, accumulate totals, print headers/details/totals/notes to LIST3 (confirmations). 5. If production and switch on, Spoolflex: Split/convert to PDF, distribute/email, archive to save queue. 6. Return print status/files.</p> <p>Business Rules and Calculations: - Skip if no records; exclude deleted from totals. - Sorting: Headers first (marker '1'), details '2', others '3'; custom groups (e.g., by product/container for PKG). - Printer overrides: CPI 15, form ORCF, queue ORDCONOUTQ (test: TESTOUTQ). - Spoolflex: Retry on open PDF; distribute to 3 points; error if no files. - No major calcs; defer to printing function.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#3-function-pickingticketprinting","title":"3. Function: PickingTicketPrinting","text":"<p>Description: Prints picking tickets with custom formats/sorting for warehouse efficiency.</p> <p>Inputs: - Same as BatchOrderConfirmationPrinting, plus mode flags (e.g., viscosity 'Y', PKG plant).</p> <p>Process Steps: 1. Same as BatchOrderConfirmationPrinting steps 1-3 (sorting/preprocess with BB1103 for groups). 2. Print to LIST/LIST2: Headers (company/customer/ship-to/order info), details (loc/prod/cntr/qty, grouped with lines), totals (qty/weight/misc/price/freight). 3. Include special formats (rearrange for viscosity, right-justify brand for PKG). 4. Call freight processing if needed. 5. Spoolflex if enabled.</p> <p>Business Rules and Calculations: - Sorting modes: Unsorted if status blank (entry order); sorted if 'C'/'S' (by group/sort keys, e.g., product asc/container desc for customer-owned). - Conversions: Container size from GSCNTR desc if not 'N'; weights via GSCTWT/GSCTUM (lbs/gallons, revised formula). - Exclude deleted from totals; print \"ON HOLD - DO NOT SHIP\" for 'H'. - Formats: Viscosity (match Lotus, no off-edge); PKG (custom desc, part# heading). - Printer: CPI 10, form PICK/PKGP, queue PICKNWOUTQ.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#4-function-proformainvoiceprinting","title":"4. Function: ProformaInvoicePrinting","text":"<p>Description: Prints proforma invoices focusing on totals/terms for export/pre-payment.</p> <p>Inputs: - Same as PickingTicketPrinting, with mode for proforma.</p> <p>Process Steps: 1. Reuse printing core from steps above. 2. Print expanded: Order totals (product/misc/freight), incoterms, export notes/compliance. 3. Include bill-to/ship-to addresses, estimates.</p> <p>Business Rules and Calculations: - Prices at shipment time; freight estimates fluctuate with diesel index. - Export rules: Comply with U.S. regs, no diversion; print MSDS link. - Totals: Accumulate extensions (qty * price), add misc/freight; net wt includes product wt. - Terms: Standard ARG terms, PPE/driver reqs for bulk.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#5-function-freightpurchaseordergeneration","title":"5. Function: FreightPurchaseOrderGeneration","text":"<p>Description: Generates freight POs and integrates with processors during printing.</p> <p>Inputs: - Order data (company/order#), file group, internal/external flag, bill-to address.</p> <p>Process Steps: 1. Read order records; chain for addresses (SHIPTO/ARCUST), shipment details (BBSHP*). 2. For headers: Copy fields (rush/process code), set bill-to (customer for internal, processor for external). 3. For details: Convert qty to UM/lbs/gallons/net/gross; accumulate accessorials/totals. 4. Write to BBFPORH (header), BBFPORD (details), BBFPORA (accessorials), BBFPORF (freight, copy from BBORF). 5. Call PC program: Internal (InsertARGLMSOrder.EXE), external (SCOXML.EXE) via STRPCCMD. 6. Return PO files/status.</p> <p>Business Rules and Calculations: - Internal: Send deleted orders; don't use processor addr. - External: Use processor addr; email/FTP params. - Skip deleted details but send full deleted orders internally. - Calcs: Qty conversions (container to UM/lbs/gallons via lookups/formulas); totals (freight/accessorial/gross gallons). - Addresses: Compressed, include country; multiple tables notice via Spoolflex.</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#6-function-spoolfiledistributionarchiving","title":"6. Function: SpoolFileDistributionArchiving","text":"<p>Description: Handles post-print spool files for distribution/archiving.</p> <p>Inputs: - Output queue (e.g., ORDCONOUTQ), spool name ('ORDER CONF LIST3').</p> <p>Process Steps: 1. Split/convert spool to PDF ('order confirmation'). 2. Copy for naming/email. 3. Distribute to 3 delivery points (e.g., email). 4. Move to save queue (ORDCONSVOQ). 5. Retry on errors (e.g., open PDF prompt close/retry). 6. Return status (e.g., no files).</p> <p>Business Rules and Calculations: - Only process named spools; error if none (\"No order confirmations selected\"). - Retry indefinitely on locked PDFs; distribute to predefined points. - No calcs; focus on archiving to network (G:\\CUSTSRV\\ORDER CONFIRMATIONS).</p>"},{"location":"order-entry/BB111P%20Order%20Confirmations/Summary%20BB111P%20OCL/#7-function-processmonitoringcancellation","title":"7. Function: ProcessMonitoringCancellation","text":"<p>Description: Monitors active processes and allows cancellation.</p> <p>Inputs: - Active process name (e.g., BB111P/BB111).</p> <p>Process Steps: 1. Load/run check program (BB110E) to display busy screen. 2. Wait for user input (cancel key). 3. If cancel, set flag and end; else continue. 4. Return status (canceled or proceeded).</p> <p>Business Rules and Calculations: - Allow interrupt for long runs (e.g., batch print). - Check screen location for \"/CANCEL\"; reset on termination. - No calcs; UI-focused but input-driven here.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110%20RPG36/","title":"BB110 RPG36","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110%20RPG36/#process-steps-of-the-rpg-program-bb110","title":"Process Steps of the RPG Program BB110","text":"<p>This RPG III program (indicated by the .rpg36 extension and syntax) is a core printing utility for generating picking tickets, order confirmations, or proforma invoices on an IBM midrange system (e.g., AS/400 or iSeries). It is called from the OCL program BB114O and handles the formatting and output of detailed order documents, including specialized versions for customer-owned products (e.g., Viscosity EDI856), packaging plants, and order confirmations. The program processes input files, applies complex logic for sorting, grouping, and calculations, and outputs to multiple printer files (LIST, LIST2, LIST3, LIST4). The provided code is truncated, but includes sufficient detail to outline the process, especially for proforma invoices (aligned with BB114O context). Below is a step-by-step breakdown based on the visible code and revisions:</p> <ol> <li>Initialization and File Setup:</li> <li>Defines numerous input files (e.g., BBORTR, BBORTU, BBORTO, BBORCL, ARCUST, etc.) for order data, customer info, products, and related details.</li> <li>Defines printer files: LIST (picking tickets), LIST2 (packaging pick sheet, added JK02), LIST3 (order confirmations, added MG41), LIST4 (proforma invoices, added MG41).</li> <li>Initializes variables, indicators (e.g., U5 for picks, U6 for confirmations), and data structures for totals, freight, and addresses.</li> <li> <p>Sets up key lists (KLISTs) for chaining to files (e.g., ARCUST, GSPROD, GSTABL).</p> </li> <li> <p>Header Processing:</p> </li> <li>Reads header records from BBORTR (sorted input from BB114O) and BBORHS1 (order headers).</li> <li>Chains to related files (e.g., ARCUST for customer name, SHIPTO for ship-to address, BBCAID for carrier) to fetch descriptions and addresses.</li> <li>Applies logic for special cases:<ul> <li>Checks order delete code (BODEL); skips printing if 'E' (error, JB22).</li> <li>Evaluates order process status (BOORPR): Treats 'R' (revised/complete) same as 'C' (complete, JB39); marks 'H' as on-hold (MG46).</li> </ul> </li> <li> <p>Outputs header data to printer file (e.g., LIST4 for proforma) with fields like order#, customer, ship-to, incoterms (JB38), and route code (JB33).</p> </li> <li> <p>Detail Processing:</p> </li> <li>Reads detail records from BBORTR (sorted by BB1143), skipping deleted lines (JB17).</li> <li>Chains to GSPROD for product descriptions, GSCNTR1 for container types (JK03), GSMLCD for loading location (JB37), and ARCUPR for pricing with container type (JB45).</li> <li>Calculates quantities, weights, and prices:<ul> <li>Computes net/gross weights (L2NWT, L2GWT; product weight added JB47, gross weight from BB101 JB43).</li> <li>Calculates extended price (EXTPRCJB) and totals (TOTPRCJB, PROTOTJB).</li> <li>Handles unit conversions via GSUMCV (relaxed for 'KG', 'LI', 'ML', 'OZ' in JB40, JB42).</li> </ul> </li> <li>For packaging plant (PP/PKGP) or Viscosity EDI856 (JB15, JB18, JB19):<ul> <li>Outputs customized fields (SIZE, PPBRND, PPDSC1-3, PPCD12) to LIST2 (JK02, JB51).</li> <li>Right-justifies brand, removes part# heading (JB20).</li> </ul> </li> <li> <p>Outputs detail lines to appropriate printer file (e.g., LIST4 for proforma) with fields like quantity (BDQTY, BDQTS), gross weight (BDGWT), unit measure (PPUMBP), and price (NEWPRCJ).</p> </li> <li> <p>Freight and Miscellaneous Processing:</p> </li> <li>Fetches freight details from BBFRPR, BBCAID, or BBOTHS (DC01).</li> <li>Determines freight bill address:<ul> <li>Internal processor: Uses customer address (JB27).</li> <li>External processor: Uses freight processor address (JB27, JB28).</li> </ul> </li> <li>Calls MSHPADR for compressed ship-to address, passing country (JB26, DC02).</li> <li>Outputs freight description (FRCDDS), amount (L2FRT, suppressed JB37), and bill-to address (@FBNML, @FBA1L-@FBA3L, @FBCSZ).</li> <li> <p>Prints multiple freight tables for traffic via Spoolflex (MG29).</p> </li> <li> <p>Total and Summary Output:</p> </li> <li>Accumulates totals (L2CQT for net quantity, L2TOT for misc charges, TOTPRCJB for price total, PROTOTJB for proforma total).</li> <li>Outputs summary lines (PRL4TT format for LIST4):<ul> <li>Gross/net weight (L2GWT, L2NWT in LBS, JB34), total misc (L2TOT), freight (L2FRT), price total (TOTPRCJB).</li> <li>Order status description (P$SDSC, JK01) and 'ON HOLD - DO NOT SHIP' for BOORPR = 'H' (MG46).</li> </ul> </li> <li> <p>Prints notes (NTE section) with ARG\u2019s terms, safety instructions, freight estimates, and export compliance.</p> </li> <li> <p>Output Formatting:</p> </li> <li>Uses solid lines for headings, dotted lines between groups (JB16).</li> <li>Adjusts column positions to avoid off-page printing (JB16, JB18, MG32).</li> <li>Prints dispatch marks if enabled (JB17), incoterms (JB38), and expanded product codes/descriptions (MG50).</li> <li> <p>Writes to LIST2 for packaging plant pick sheet instead of LIST for specific cases (JB51).</p> </li> <li> <p>Cleanup and Termination:</p> </li> <li>Releases SHPADR record to prevent locking (JB25).</li> <li>Outputs to spool files (LIST, LIST2, LIST3, LIST4) for further processing (e.g., SFASPLIT, FFAEDOC in BB114O).</li> <li>Sets *INLR to end program, returning to caller.</li> </ol>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Document Type Selection: Supports picking tickets (LIST, U5), order confirmations (LIST3, U6, MG41), and proforma invoices (LIST4, MG41) based on input data and caller context (BB114O focuses on proforma).</li> <li>Order Validation: Skips orders with delete code 'E' (error, JB22). Marks BOORPR = 'H' as on-hold (MG46).</li> <li>Sorting and Grouping: Uses BB1143\u2019s sort fields (GROUP, SORT1-SORT3) for Viscosity (JB15, JB18) or packaging plant (JB19, JB20), e.g., by product, size, or container.</li> <li>Freight Handling:</li> <li>Internal vs. external processor determines freight bill address (JB27, JB28).</li> <li>Suppresses freight total printing (JB37); includes multiple freight tables (MG29).</li> <li>Weight and Quantity:</li> <li>Gross weight from BB101 (JB43); net weight includes product weight (JB47).</li> <li>Relaxed GSUMCV lookups for certain units (JB40, JB42).</li> <li>Descriptions and Formatting:</li> <li>Uses GSCNTR1 for container codes (JK03), GSMLCD for loading location (JB37).</li> <li>Customized descriptions for packaging plant (JB19, JB51) and greases (MG48).</li> <li>Expanded product codes/descriptions (MG50).</li> <li>EDI and Export:</li> <li>Supports Viscosity EDI856 format (JB15, JB18).</li> <li>Includes export compliance notes (e.g., U.S. regulations, MSDS availability).</li> <li>Printing Rules:</li> <li>Adjusts layouts to avoid off-page issues (JB16, MG32).</li> <li>Right-justifies brand, adjusts headings (JB20, JB21).</li> <li>Prints incoterms (JB38), route code (JB33), and order status (JK01).</li> <li>Locking: Releases SHPADR to prevent job conflicts (JB25).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>Input Files (all shared, prefixed with ?9? from BB114O): - BBORTR (sorted input from BB1143S). - BBORTU, BBORTO, BBORTR3 (BBPROR; unsorted order data). - BBORCL (order control). - ARCUST (customers). - ARCUPR (customer pricing; container type in key, JB45). - SHIPTO, SHPADR (ship-to addresses). - GSCONT (contacts?). - GSTABL (general tables; e.g., CNTRCD, CNTRPF). - GSUMCV (unit conversions). - GSCTWT (carton weights). - GSCTUM (carton UOM). - BICONT (bill-to contacts?). - GSHAZM (hazmat). - BBFRPR (freight pricing). - BBSRNH (serial numbers?). - CUADR (customer addresses). - EDICUS (EDI customers?). - BBASND (ASN data?). - BBSHPH (ship headers?). - BBSHPD (ship details?). - BBOTHS1, BBORH1 (BBORHS1; order headers). - BBOTDS1, BBORD1 (BBORDS1; order details). - BBOTA1, BBORA1 (BBORA; order attachments?). - BBFPORH, BBFPORH1 (proforma headers). - BBFPORD (proforma details). - BBFPORA (proforma attachments). - BBORDRB (BBORDB; order rebates?). - BBORF, BBFPORF (order/proforma footers). - ARCUFMX (customer formats?). - GSCNTR, GSCNTR1 (countries; GSCNTR1 for alpha key, JK03). - GSPROD (products). - GSPRCT (product categories?). - GSMLCD (multi-codes; loading location, JB37). - BBCAID (carrier IDs).</p> <p>Printer Files: - LIST (picking tickets). - LIST2 (packaging pick sheet, JK02). - LIST3 (order confirmations, MG41). - LIST4 (proforma invoices, MG41).</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>MSHPADR: Called for compressed ship-to address, passing country (DC02, JB26).</li> <li>MINLBGL1: Called for weight calculations (replaces MINLBGL, JB31).</li> <li>No explicit calls in truncated code, but implied integration with Spoolflex tools (MG29, via BB114O\u2019s SFASPLIT, FFAEDOC).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110E%20RPG36/","title":"BB110E RPG36","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110E%20RPG36/#process-steps-of-the-rpg-program-bb110e","title":"Process Steps of the RPG Program BB110E","text":"<p>This RPG III program (indicated by the .rpg36 extension and syntax) appears to manage a simple interactive display screen, likely a \"busy\" or waiting screen used during order entry processes for picking tickets and confirmations. It handles user input, particularly for cancellation, and controls program flow via indicators. The program is designed for an IBM midrange system (e.g., AS/400 or iSeries) and interacts with a workstation display file. Below is a step-by-step breakdown of the program's execution:</p> <ol> <li>Program Initialization and File Definition:</li> <li>The program starts with header (H) specifications, identifying it as BB110E with a parameter P016 (possibly a program identifier or option).</li> <li> <p>Defines a display file named SCREEN as a combined file (CP) with a record length of 500, used for workstation (WORKSTN) interaction. This file handles screen input/output.</p> </li> <li> <p>Input Specifications and Data Area Setup:</p> </li> <li>Defines input for the SCREEN file under format 01 (likely a screen format).</li> <li>Sets up a user-defined data structure (UDS) with positions 300-305 reserved for a field named CANCEL (likely a 6-character field to store cancellation status).</li> <li> <p>No database reads or complex inputs; this is primarily for screen handling.</p> </li> <li> <p>Calculation and Logic Execution:</p> </li> <li>Under indicator 01 and when not in key group 10 (10NKG), turns off indicator 10 (SETOF 10). This might reset a status or error flag.</li> <li>If a specific key group (KG, possibly the cancel key like F12 or AID byte for cancel) is pressed:<ul> <li>Moves 'CANCEL' into the CANCEL field.</li> <li>Turns off indicators 01 and 10 (SETOF 0110).</li> <li>Sets on the last record indicator (LR), which signals the program to end.</li> </ul> </li> <li> <p>If indicator 09 is off (N09), sets on indicators 10 and 09 (SETON 1009). This could enable/disable screen elements or control visibility (e.g., error messages or busy status).</p> </li> <li> <p>Output and Screen Display:</p> </li> <li>Outputs to the SCREEN file under detail (D) line for indicators 01 and 10.</li> <li>Writes a record with key 8 (K8) referencing format 'BB110EFM' (likely a display format name for the busy screen layout).</li> <li> <p>The screen is displayed to the user, waiting for input (e.g., cancel key).</p> </li> <li> <p>Program Termination:</p> </li> <li>If cancel is triggered, the program ends via LR indicator.</li> <li>Otherwise, it may loop or redisplay based on calling context (as it's called from OCL, control returns to the caller).</li> </ol> <p>The program runs in a loop implicitly through workstation interaction: display screen \u2192 wait for input \u2192 process keys \u2192 potentially redisplay or exit. It's a modal screen, blocking until user interaction or cancellation.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110E%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Cancellation Handling: The primary rule is to detect a cancel key press (KG) and set a 'CANCEL' flag in a shared data area (UDS positions 300-305). This allows the calling OCL or program to check for cancellation and abort processes like order entry, picking ticket generation, or confirmations. It prevents indefinite waiting during busy operations.</li> <li>Indicator-Based Control: Uses RPG indicators (01, 09, 10) to manage screen states:</li> <li>Indicator 01: Likely controls the main screen display.</li> <li>Indicator 10: Toggled for status (e.g., busy vs. ready) or error handling.</li> <li>Indicator 09: Conditionally set, possibly for validation or visibility of screen elements.</li> <li>No data validation or business logic beyond key handling; it's a utility for user interruption during long-running tasks.</li> <li>Integration Context: As called from the main OCL (e.g., during validation loops for proforma invoices), it enforces a \"busy\" state rule: Show a waiting screen to the user while background processing occurs, with an option to cancel to avoid locks or timeouts.</li> <li>Error/Status Management: Resets indicators on entry/exit to ensure clean state transitions. No explicit error handling, but indicator 09/10 might flag issues like invalid input.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110E%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>SCREEN: A workstation display file (WORKSTN) used for interactive screen I/O. It defines the user interface (e.g., busy message, cancel prompt). No database tables (physical or logical files) are used; this program is screen-focused.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB110E%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not call any external programs (no CALL opcodes or references). It is self-contained and returns control to the caller (e.g., the OCL script) upon completion or cancellation.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114%20RPGLE/","title":"BB114 RPGLE","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114%20RPGLE/#process-steps-of-the-rpgle-program-bb114","title":"Process Steps of the RPGLE Program BB114","text":"<p>This RPG IV (RPGL E) program (indicated by the .rpgle extension and syntax) is an interactive inquiry program for customer order confirmations in a Customer Orders system on an IBM midrange system (e.g., IBM i or AS/400). It uses a display file with a subfile (SFL1) to list and query open order headers based on user-specified criteria, allowing selections for further actions like viewing confirmations. The program is called from the main OCL with a parameter (likely a library prefix or file group indicator). It handles user inputs via function keys, validates searches, applies filters via dynamic queries (using OPNQRYF implied by query select arrays), and integrates with message queues for errors/feedback. Below is a step-by-step breakdown of the program's execution based on the provided code structure and subroutines:</p> <ol> <li>Program Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: p$fgrp (file group, e.g., 'G' or 'Z' for library overrides).</li> <li>Sets up work fields, dates, and times using system data structure (PSDS): Converts current date (from UDATE or *DATE) to various formats (e.g., CCYYMMDD, YYMMDD) for filtering, defaulting \"from\" date to the 1st of the month one year prior.</li> <li>Defines reposition fields (r$) mirroring control fields (c$) for subfile positioning.</li> <li>Initializes output parameters (o$*) with defaults (e.g., o$mode = blanks, o$dstc = 'N').</li> <li>Sets subfile control variables: RRN1 = 0, page size = 24, folded mode off initially.</li> <li>Prepares message handling: Sets program message queue (m@pgmq = '*'), clears data.</li> <li>Defines key lists (KLISTs) for chaining to files (e.g., KLORDH for order headers by company/order#).</li> <li> <p>Prepares arrays for query selects (qryoh for order headers, qryod for details), comments/errors (com), and file overrides (ovr, ovg, ovz).</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides via QCMDEXC API based on p$fgrp ('G' or 'Z'): Redirects files to specific libraries (e.g., GARCUST for 'G', ZARCUST for 'Z') and sets share(*NO).</li> <li>Overrides work file BB114WL1 to QTEMP/BB114WL1.</li> <li> <p>Opens all input files (ARCUST, BBORCL, BBORDH, etc.) and the work file.</p> </li> <li> <p>Main Subfile Processing Loop (SRSFL1 Subroutine):</p> </li> <li>Initializes subfile mode to folded ('1' for first load), clears message subfile, positions to first record (company = 10).</li> <li>Defaults \"PU/Ship From Date\" to 1 year ago.</li> <li>Calls SF1REP to reposition/load the subfile based on search criteria.</li> <li> <p>Enters a loop (SF1AGN = *ON) for user interaction:</p> <ul> <li>Writes command line, displays/clears message subfile.</li> <li>Conditions subfile display (IN41 = ON if RRN1 &gt; 0).</li> <li>Toggles folded/unfolded mode (*IN45).</li> <li>Displays subfile control (EXFMT SFLCTL1).</li> <li>Clears format indicators (21-39, 50-69 for errors).</li> <li>Determines cursor position for next display.</li> <li>Sets subfile record number (RCDNB1) to current page RRN for redisplay.</li> </ul> </li> <li> <p>Handle User Inputs Before Subfile Read:</p> </li> <li>Processes function keys and positioning:<ul> <li>F3: Displays exit confirmation window (EXFMT F03WDW); if confirmed, sets SF1AGN = *OFF to exit loop.</li> <li>F4: Determines cursor position, calls PROMPT subroutine (truncated, but likely displays field-specific prompts, e.g., for customer search via MCSTSHP using x$cstshp parms).</li> <li>F5: Refreshes (sets ONETIME = ON, REPSFL = ON) to reload subfile.</li> <li>Positioning: If control fields (c$co, c$ord#, etc.) differ from reposition fields (r$*), calls SF1REP to rebuild subfile.</li> <li>Page Down: Calls SF1LOD (truncated, but likely loads next page of records into subfile).</li> </ul> </li> <li> <p>Continues loop (ITER) if not ENTER.</p> </li> <li> <p>Process Subfile on ENTER (SF1PRC and SF1CHG Subroutines):</p> </li> <li>If subfile not empty (RRN1 &gt; 0), reads changed subfile records (READC SFL1 until IN81 = ON).</li> <li>For each changed record:<ul> <li>Clears option field (S1OPT1 = *OFF).</li> <li>Processes selection (SELECT on S1OPT):</li> <li>Option 6: Calls external program BB114SC (Customer Order Confirmation) passing company, order#, file group; updates fields like A$ORD (truncated).</li> <li>Handles window prompts based on record/field (e.g., 'SFL1' and 'S1CRLM' displays CRDWDW for credit limit).</li> </ul> </li> <li> <p>Post-processing: Handles other keys like F10 (positions cursor to control record).</p> </li> <li> <p>Reposition and Load Subfile (SF1REP and SF1LOD Subroutines - Truncated but Inferred):</p> </li> <li>Clears control fields if repositioning.</li> <li>Builds dynamic query select string (QRYSLT) using qryoh/qryod arrays for filtering open orders (e.g., not deleted, specific status, date ranges, company/customer/order#/etc.).</li> <li>Uses OPNQRYF (implied) on BBORDH (headers) and possibly details to select records (e.g., BODEL \u2260 'D', BORQD8 in range).</li> <li>Chains to files using KLISTs (e.g., KLORDH for BBORDH, KLCUST for ARCUST) to validate/fetch descriptions (e.g., customer name C$CSNM).</li> <li>Loads records into subfile (WRITE SFL1), updates RRN1.</li> <li> <p>Handles \"no results\" (adds message from com(02)).</p> </li> <li> <p>Field Prompting (PROMPT Subroutine - Truncated but Inferred):</p> </li> <li>Based on cursor location (ROW1/COL1) and field (e.g., C$CUST), calls utilities like MCSTSHP for customer/ship-to search.</li> <li>Validates inputs (e.g., chains to GSTABL for SLSMAN/BBORCN/BBCAID codes).</li> <li> <p>Updates control fields and repositions subfile.</p> </li> <li> <p>Message and Error Handling (ADDMSG, WRTMSG, CLRMSG Subroutines):</p> </li> <li>Adds messages to program queue via QMHSNDPM API (e.g., for errors like \"Must Enter At Least One Selection Value\" from com(01)).</li> <li>Writes/clears message subfile (WRITE MSGCTL or MSGCLR), toggles *IN49 for display.</li> <li>Removes messages via QMHRMVPM API.</li> <li> <p>Sets DSPMSG = *ON for general errors.</p> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files (*ALL).</li> <li>Sets INLR = ON and returns to caller.</li> </ol> <p>The program uses a \"load-on-demand\" approach for the subfile (via Page Down), not \"load all,\" and loops until exit. Truncated sections (e.g., SF1REP, PROMPT) likely include detailed query building, file chains, and additional calls/validations.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Order Filtering and Inquiry: Queries open order headers (BBORDH) that are not deleted (BODEL \u2260 'D'), in specific statuses (e.g., BOORPR in 'P'), and match user criteria (company, order#, PO#, customer, ship-to, salesman, location, product, carrier ID, country). Date range defaults to PU/Ship from 1 year ago. Includes rules for including/excluding canceled orders or invoices.</li> <li>Validation and Required Inputs: Must enter at least one selection value (error com(01)). Cannot search for tracking# if invoices excluded (com(05)) or canceled reason if not including canceled orders (com(06)).</li> <li>Credit Limit Handling: Displays credit limit window (CRDWDW); checks for over-limit (com(03)/04), though protection on subfile option removed (revision jk03).</li> <li>Subfile Options and Actions: Option 6 triggers confirmation view/send via BB114SC; confirms if sent (com(07)). Orders in batch noted (com(08)).</li> <li>File Group Overrides: Uses 'G' or 'Z' to switch libraries (e.g., GBBORDH vs. ZBBORDH), allowing multi-company/environment support.</li> <li>Data Lookups: Chains to tables for descriptions/names (e.g., ARCUST for customer name, GSPROD for product desc, GSTABL for codes like SLSMAN/BBORCN, BBCAID for carriers - revision jk04).</li> <li>User Interface Rules: Supports folded/unfolded subfile, positioning, prompting (F4), refresh (F5). Exit requires confirmation. Errors protect fields (*IN70-79) and display on message subfile.</li> <li>Date Handling: Validates/converts dates via GSDTEDIT (parms defined but call truncated). Uses system date for defaults.</li> <li>Security/Authorization: Implied credit limit authorization; no direct user auth in visible code.</li> <li>Error and No-Results Handling: Displays \"No Results\" if subfile empty; uses message array for standardized feedback.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<p>These are database files (physical/logical) and display/printer files explicitly defined or referenced:</p> <ul> <li> <p>Display File (Workstation): BB114D (CF, with subfile SFL1; used for interactive I/O, formats like SFLCTL1, MSGCTL, F03WDW, CRDWDW).</p> </li> <li> <p>Input Files (IF):</p> </li> <li>ARCUST (customers; keyed, USROPN).</li> <li>BBORCL (order control; keyed, USROPN).</li> <li>BBORDH (order headers; keyed, USROPN).</li> <li>GSCNTR (countries; keyed, USROPN).</li> <li>GSPROD (products; keyed, USROPN; field TPFIL5 aliased as X@FIL5).</li> <li>GSTABL (general tables; keyed, USROPN; used for codes like SLSMAN, BBORCN).</li> <li>INLOC (inventory locations; keyed, USROPN).</li> <li>SHIPTO (ship-to addresses; keyed, USROPN).</li> <li> <p>BBCAID (carrier IDs; keyed, USROPN; added in revision jk04).</p> </li> <li> <p>Work File (IF): BB114WL1 (keyed, USROPN; overridden to QTEMP).</p> </li> </ul> <p>No printer files are used in the visible code (PRTF_OPN DS defined but unused).</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB114SC: Called for subfile option 6 (Customer Order Confirmation); passes parameters like company, order#, file group; receives updates (e.g., mode, flag).</li> <li>QCMDEXC: System API; called to execute file override commands (OVRDBF).</li> <li>QMHSNDPM: System API; called to send messages to program message queue.</li> <li>QMHRMVPM: System API; called to remove messages from program message queue.</li> </ul> <p>Truncated sections likely include additional calls, such as: - MCSTSHP (inferred from x$cstshp DS; for customer/ship-to search in prompting). - GSDTEDIT (parms defined in PLDTED; for date validation).</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB1143%20RPG/","title":"BB1143 RPG","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB1143%20RPG/#process-steps-of-the-rpg-program-bb1143","title":"Process Steps of the RPG Program BB1143","text":"<p>This RPG III program (indicated by the .rpg extension and syntax) is a preprocessing utility for printing picking tickets, specifically designed to prepare and sort order detail records for the main printing program (e.g., BB110). It is called from the OCL program BB114O and processes order data to assign sorting fields based on specific criteria, such as customer-owned products, packaging plant specifics, or general conditions. The program reads input records, applies business logic to determine sorting fields, and writes extended records to an output file for subsequent sorting (by #GSORT in BB114O). Below is a step-by-step breakdown of the program's execution:</p> <ol> <li>File and Record Initialization:</li> <li>Defines input files: BBORTR (primary input, 512 bytes, disk) and GSCNTR (secondary input for country/container data, 512 bytes, keyed with 3-byte alpha index).</li> <li>Defines output file: BB1143 (554 bytes, disk, add-only).</li> <li> <p>Specifies input formats for BBORTR:</p> <ul> <li>NS 01: Header records (indicators 10, 11, 12 on; fields like BOCO, BORDNO, BORSEQ, BOCOON, BOGPBY, BORACD, BOMLCD, BOORPR).</li> <li>NS 02: Detail records (indicator 10 off, 9 off; fields like BOCO, BORDNO, BORSEQ, BORKEY, BDLOC, BDPROD, BDCNTR, BDFLCD).</li> <li>NS 03: Other record types (catch-all for non-header/detail).</li> <li>GSCNTR: Reads short description (TCDSCS) for container codes.</li> </ul> </li> <li> <p>Header Record Processing (Indicator 01):</p> </li> <li>For header records, evaluates order process status (BOORPR):<ul> <li>If BOORPR \u2260 ' ', sets indicator 50 on (indicating line entry order printing).</li> <li>Otherwise, sets indicator 50 off (sorted order for codes 'C' or 'S').</li> </ul> </li> <li> <p>Writes to BB1143 (DADD 01):</p> <ul> <li>Outputs DTA1 (pos 1-256) and DTA2 (pos 257-512) as-is.</li> <li>Adds fixed fields: '1' at pos 513 (record type), blanks at 523-553 (sort fields), BOORPR at 554.</li> </ul> </li> <li> <p>Detail Record Processing (Indicator 02):</p> </li> <li>Clears sort fields (SIZE, GROUP, SORT1, SORT2, SORT3) to blanks.</li> <li>Determines SIZE (container size description):<ul> <li>If BDFLCD \u2260 'N', chains BDCNTR to GSCNTR to get TCDSCS (short description) into SIZE (7 chars).</li> <li>If chain fails (*IN88 on) or BDFLCD = 'N', sets SIZE to blanks.</li> </ul> </li> <li>Applies sorting logic based on conditions:<ul> <li>Customer-Owned Product (BOCOON = 'Y'):</li> <li>If BOGPBY = 'C' (by category): GROUP/SORT1 = BDPROD (product), SORT2 = BDCNTR (container), SORT3 = blank.</li> <li>Else (by size): GROUP = SIZE, SORT1 = blank, SORT2 = BDCNTR, SORT3 = BDPROD.</li> <li>ARG Packaging Plant (BORACD = 'PP' and BOMLCD = 'PKGP'):</li> <li>If BOGPBY = 'C': GROUP/SORT1 = BDPROD, SORT2 = BDCNTR, SORT3 = blank.</li> <li>Else: GROUP = SIZE, SORT1 = blank, SORT2 = BDCNTR, SORT3 = BDPROD.</li> <li>ARG - All Other:</li> <li>If BOGPBY = 'C': GROUP/SORT1 = BDPROD, SORT2 = blank, SORT3 = BDCNTR.</li> <li>Else: GROUP/SORT1 = BDCNTR, SORT2 = blank, SORT3 = BDPROD.</li> </ul> </li> <li> <p>Writes to BB1143 (DADD 02):</p> <ul> <li>Outputs DTA1 (1-256), DTA2 (257-512).</li> <li>Sets pos 513 to '2' (record type).</li> <li>If *IN50 off (sorted order): Outputs GROUP (523-532), SORT1 (533-542), SORT2 (543-552), SORT3 (553) as sort fields.</li> <li>If *IN50 on (line entry order): Outputs '0' at 524, BORKEY (order key) at 533, blanks elsewhere.</li> <li>Outputs BOORPR at 554.</li> </ul> </li> <li> <p>Other Record Types (Indicator 03):</p> </li> <li> <p>Writes to BB1143 (DADD 03):</p> <ul> <li>Outputs DTA1 (1-256), DTA2 (257-512).</li> <li>Sets pos 513 to '3' (record type), blanks at 523-553, BOORPR at 554.</li> </ul> </li> <li> <p>Program Flow:</p> </li> <li>Processes all records from BBORTR sequentially.</li> <li>For each record, applies header, detail, or other logic based on indicators.</li> <li>Outputs extended records (554 bytes) to BB1143, adding sort fields for details or placeholders for headers/others.</li> <li>No explicit loop or termination logic; RPG cycle handles record-by-record processing until end-of-file.</li> </ol>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB1143%20RPG/#business-rules","title":"Business Rules","text":"<ul> <li>Sorting Customization: Sorting fields (GROUP, SORT1, SORT2, SORT3) are assigned based on:</li> <li>Customer-Owned Products (e.g., Viscosity EDI856): Prioritizes product (by category) or size/container (by size), ensuring customer-specific sorting for picking tickets.</li> <li>ARG Packaging Plant (PP/PKGP): Similar to customer-owned, sorts by product or size/container, reflecting plant-specific grouping.</li> <li>ARG - All Other: Sorts by product or container, with broader grouping for non-specialized cases.</li> <li>Order Process Status: BOORPR determines sort mode:</li> <li>Codes 'C' or 'S' (e.g., confirmed/shipped) use custom sorting (*IN50 off).</li> <li>Blank (' ') uses line entry order (*IN50 on), preserving original sequence (BORKEY).</li> <li>Container Size Lookup: Uses GSCNTR to fetch container descriptions (TCDSCS) unless BDFLCD = 'N' (no lookup needed).</li> <li>Record Type Handling: Preserves header (type 1), detail (type 2), and other (type 3) records, ensuring headers are not sorted out of sequence in downstream processing (e.g., by #GSORT).</li> <li>Data Integrity: Passes original data (DTA1, DTA2) unchanged, adding sort fields (513-554) for flexibility in subsequent sorting (by BB114O).</li> <li>Use Case: Prepares data for picking ticket printing, ensuring logical grouping (e.g., by product or container size) for warehouse efficiency, tailored to customer or plant requirements.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB1143%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>BBORTR: Input file (512 bytes, disk); contains order records (header, detail, others) with fields like BOCO, BORDNO, BORSEQ, BOCOON, BOGPBY, BORACD, BOMLCD, BOORPR, BDLOC, BDPROD, BDCNTR, BDFLCD.</li> <li>GSCNTR: Input file (512 bytes, keyed with 3-byte alpha index); used for container short descriptions (TCDSCS).</li> <li>BB1143: Output file (554 bytes, disk, add-only); stores extended records with sort fields and BOORPR.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB1143%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not call external programs (no CALL opcodes). It is a standalone preprocessor that relies on the RPG cycle for processing and writes to BB1143 for use by downstream programs (e.g., #GSORT, BB110).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/","title":"BB114O OCL","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/#process-steps-of-the-ocl-program-bb114o","title":"Process Steps of the OCL Program BB114O","text":"<p>This OCL (Operation Control Language) program is designed for printing proforma invoices on an IBM midrange system (e.g., AS/400 or iSeries), including data preparation via sorting, temporary file creation, and printer overrides. It generates printed output (or spool files) for proforma invoices without emailing, and includes post-processing for spool file splitting, PDF conversion via Spoolflex-like tools, and archiving. The program is conditional on file existence and switches, and is called from the main OCL (e.g., during proforma invoice selection in BB114). It uses variables like ?9? (library prefix), ?13? (possibly a print parameter), and ?10? (possibly a termination flag). Below is a step-by-step breakdown of the process:</p> <ol> <li>Initial Setup and Validation:</li> <li>Sets local offsets: Offset 470 to '?13?' (print-related parameter) and 480 to '?9?' (library prefix).</li> <li> <p>Checks if file ?9?BBPROH exists and has records (?F'A,?9?BBPROH'?/0); if empty (0 records), jumps to END (terminates early, as no data to process).</p> </li> <li> <p>System Routines and Conditional Local Setup:</p> </li> <li>Calls GSY2K (likely a Y2K date compliance routine).</li> <li>Calls STRPCOCLP (possibly starts a PC-related OCL processor or printer control).</li> <li> <p>Checks ?L'103,3'?/SEL: If 'SEL', sets local offset 1 to 'O COAC' (possibly an output or company access code); otherwise, sets to 'OCOC' (default company code).</p> </li> <li> <p>File Cleanup and Initial Sorting:</p> </li> <li>Deletes files BB1143, BB114S, BB1143S in library ?9? (prepares for fresh data).</li> <li>Loads #GSORT (a sorting utility program).</li> <li>Defines input file as ?9?BBPROR (shared) and output as ?9?BB114S (extendable, retained as job).</li> <li> <p>Runs #GSORT: Sorts records where position 1 \u2260 'D' (not deleted) and positions 2-3 = 'C10' (specific code), by company (pos 2-3), order (pos 4-9), seq# (pos 10-12). Outputs full records (pos 1-512).</p> </li> <li> <p>Temporary File Creation and Preprocessing for Detail Sorting (JB01 Section):</p> </li> <li>Deletes BB1143 in ?9?.</li> <li>Creates physical file QTEMP/?9?BB1143 with record length 554.</li> <li>Loads BB1143 (a program for preprocessing pick list details).</li> <li>Defines files: Input BBORTR as ?9?BB114S (shared), output BB1143 as ?9?BB1143 (extendable), GSCNTR as ?9?GSCNTR (shared).</li> <li> <p>Runs BB1143: Processes sorted data, likely adding or transforming fields (e.g., grouping by header fields, using GSCNTR for country data).</p> </li> <li> <p>Secondary Sorting on Preprocessed Data:</p> </li> <li>Loads #GSORT again.</li> <li>Defines input as ?9?BB1143 (shared) and output as ?9?BB1143S (extendable, retained).</li> <li>Runs #GSORT: Sorts records where pos 1 \u2260 'D' (not deleted), by company (pos 2-3), order (pos 4-9), header priority (pos 513 to ensure header first), custom sort fields (pos 524-533 asc, 534-543 desc, 544-553 asc from BB1101 logic), seq# (pos 10-12). Outputs extended records (pos 1-553).</li> <li> <p>Deletes BB1143 in ?9? (cleanup temp file).</p> </li> <li> <p>Load Main Printing Program (BB110):</p> </li> <li>Loads BB110 (core program for generating proforma invoice print output).</li> <li> <p>Defines numerous files (all shared/DISP-SHR): BBORTR as ?9?BB1143S (sorted details), BBORTU/BBORTO as ?9?BBPROR (unsorted/original), BBORCL (order control), ARCUST (customers), ARCUPR (customer pricing), SHIPTO (ship-to), GSCONT (contacts?), GSTABL (general tables), GSUMCV (unit conversions?), GSCTWT (carton weights?), GSCTUM (carton UOM?), BICONT (bill-to contacts?), GSHAZM (hazmat), BBFRPR (freight pricing?), BBSRNH (serial numbers?), CUADR (customer addresses), SHPADR (ship addresses), EDICUS (EDI customers?), BBASND (ASN data?), BBSHPH (ship headers?), BBSHPD (ship details?), BBOTHS1/BBORH1 as ?9?BBORHS1 (order headers), BBOTDS1/BBORD1 as ?9?BBORDS1 (order details), BBOTA1/BBORA1 as ?9?BBORA (order attachments?), BBFPORH1/BBFPORH as ?9?BBFPORH (proforma headers), BBFPORD (proforma details), BBFPORA (proforma attachments), BBORDRB as ?9?BBORDB (order rebates?), BBORF/BBFPORF (order/proforma footers?), ARCUFMX (customer formats?), GSCNTR/GSCNTR1 (countries), BBORTR3 as ?9?BBPROR (another ref), GSPROD (products), GSPRCT (product categories?), GSMLCD (multi-codes?), BBCAID (carrier IDs).</p> </li> <li> <p>Printer Overrides for Output Files:</p> </li> <li>Conditional on ?9?/G (library group 'G') and ?13?/PP (print parameter 'PP'):<ul> <li>Overrides LIST (pick list) to formtype PICK, CPI 10, outqueue QUSRSYS/PICKNWOUTQ or PRTPJ, drawer 1.</li> <li>Overrides LIST2 (packaging) to formtype PKGP, CPI 10, outqueue QUSRSYS/PICKOUTQ or PRTPJ, drawer 1.</li> <li>Overrides LIST3 (order confirmations) to formtype ORCF, CPI 15, outqueue QUSRSYS/ORDCONOUTQ or TESTOUTQ.</li> <li>Overrides LIST4 (proforma invoices) to formtype PROF, CPI 15, outqueue QUSRSYS/PROFOROUTQ or TESTOUTQ.</li> </ul> </li> <li> <p>These ensure correct formatting, alignment, and routing for printed/spooled output.</p> </li> <li> <p>Execute Main Printing and Check Switch:</p> </li> <li>Runs BB110: Generates the proforma invoice print/spool files (LIST4 primary for proforma).</li> <li> <p>If switch 7 is off (SWITCH7-0), jumps to END (skips post-processing).</p> </li> <li> <p>Spool File Post-Processing:</p> </li> <li>Calls SFASPLIT: Splits spool file named 'PROFORMA INV LIST4' from outqueue PROFOROUTQ, renames to 'PROFORMA INVOICE', no combine, moves to QUSRSYS/PROFOROQSV.</li> <li>Calls FFAEDOC: Converts to e-doc named 'ARG PROFORMA INVOICE', to printer PROFPRTR, selects from PROFOROUTQ, renames, moves to PROFOROQSV.</li> <li> <p>Calls SFACOPY: Copies spool 'PROFORMA INV LIST4' from PROFOROUTQ, no combine, moves to PROFOROQSV, renames to 'PROFORMA NAMING EMAL' (possibly for naming/email prep, though no emailing).</p> </li> <li> <p>Termination:</p> <ul> <li>Jumps to END tag.</li> <li>If ?10?/ is true, blanks all local variables and resets switches to 00000000 (cleanup).</li> </ul> </li> </ol> <p>The program flows sequentially with conditionals for early exit or skips, focusing on data sorting/grouping before printing.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Preparation and Filtering: Assumes input from BBPROH/BBPROR (proforma headers/records); skips if no data. Sorts to group headers first, then details/marks, using custom fields (e.g., from BB1101 for sorting logic). Excludes deleted records (pos 1 \u2260 'D').</li> <li>Grouping and Sorting: Initial sort by company/order/seq; secondary by group fields in header (ensures header precedes details). Uses extended records for additional sort keys.</li> <li>Printing and Output Routing: Overrides based on library group (?9?/G) and print type (?13?/PP) to route to specific queues (e.g., PROFOROUTQ for proforma, TESTOUTQ for testing). Uses specific form types (PROF for proforma), CPI (15 for proforma), and drawers.</li> <li>Post-Print Handling: Only if switch 7 on; splits/converts spool to PDF-like e-docs, renames, and archives to save queues (PROFOROQSV). No emailing, but naming suggests prep for it.</li> <li>Temporary Files: Creates/deletes QTEMP files for intermediate processing to avoid permanent data changes.</li> <li>Error/Skip Conditions: Early exit if no input data; switch 7 controls post-processing (off skips PDF/spool handling).</li> <li>Multi-Environment Support: File labels prefixed with ?9? allow dynamic library usage (e.g., G vs. Z groups implied from prior programs).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>These are physical/logical files explicitly defined or referenced (all with DISP-SHR unless noted; prefixed with ?9? unless QTEMP):</p> <ul> <li>BBPROH (checked for existence/records).</li> <li>BBPROR (input for sorting; also as BBORTU, BBORTO, BBORTR3).</li> <li>BB114S (sorted output).</li> <li>BB1143 (temp created in QTEMP; extended output).</li> <li>BB1143S (sorted output).</li> <li>GSCNTR (countries; shared).</li> <li>BBORCL (order control).</li> <li>ARCUST (customers).</li> <li>ARCUPR (customer pricing).</li> <li>SHIPTO (ship-to).</li> <li>GSCONT (contacts?).</li> <li>GSTABL (general tables).</li> <li>GSUMCV (unit conversions?).</li> <li>GSCTWT (carton weights?).</li> <li>GSCTUM (carton UOM?).</li> <li>BICONT (bill-to contacts?).</li> <li>GSHAZM (hazmat).</li> <li>BBFRPR (freight pricing?).</li> <li>BBSRNH (serial numbers?).</li> <li>CUADR (customer addresses).</li> <li>SHPADR (ship addresses).</li> <li>EDICUS (EDI customers?).</li> <li>BBASND (ASN data?).</li> <li>BBSHPH (ship headers?).</li> <li>BBSHPD (ship details?).</li> <li>BBORHS1 (order headers; as BBOTHS1, BBORH1).</li> <li>BBORDS1 (order details; as BBOTDS1, BBORD1).</li> <li>BBORA (order attachments?; as BBOTA1, BBORA1).</li> <li>BBFPORH (proforma headers; as BBFPORH1).</li> <li>BBFPORD (proforma details).</li> <li>BBFPORA (proforma attachments).</li> <li>BBORDB (order rebates?; as BBORDRB).</li> <li>BBORF (order footers).</li> <li>BBFPORF (proforma footers).</li> <li>ARCUFMX (customer formats?).</li> <li>GSCNTR1 (countries alt).</li> <li>GSPROD (products).</li> <li>GSPRCT (product categories?).</li> <li>GSMLCD (multi-codes?).</li> <li>BBCAID (carrier IDs).</li> </ul> <p>Printer files: LIST (pick list), LIST2 (packaging), LIST3 (order confirmations), LIST4 (proforma invoices).</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>GSY2K: Called for date/Y2K handling.</li> <li>STRPCOCLP: Called to start PC/OCL processing.</li> <li> </li> <li>BB1143: Loaded and run for preprocessing details.</li> <li>BB110: Loaded and run for main printing.</li> <li>SFASPLIT: Called for spool splitting.</li> <li>FFAEDOC: Called for e-doc/PDF conversion.</li> <li>SFACOPY: Called for spool copying/renaming.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114O%20OCL/#gsort-loaded-and-run-twice-sorting-utility","title":"GSORT: Loaded and run twice (sorting utility).","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114P%20OCL/","title":"BB114P OCL","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>This OCL (Operation Control Language) program appears to be a batch processing script for handling proforma invoices on an IBM midrange system (e.g., AS/400 or iSeries). It includes conditional logic, file clearing, program calls, and job submissions. The program uses variables like ?9? (likely a library prefix), switches for controlling flow, and offsets for data placement (possibly in display files or memory). Below is a step-by-step breakdown of the process:</p> <ol> <li>Initial Prompt and Validation Loop:</li> <li>Displays a \"PROFORMA INVOICE PROMPT\" and pauses with a message 'CHECKING AGAIN'.</li> <li>Checks for active conditions (ACTIVE-BB114P or ACTIVE-BB114):<ul> <li>If active, loads and runs the external program BB110E.</li> <li>Evaluates a condition (?L'300,6'?/CANCEL) to decide whether to goto END (terminate) or AGAIN (loop back for re-checking).</li> </ul> </li> <li> <p>This acts as a validation or setup loop to ensure prerequisites are met before proceeding.</p> </li> <li> <p>Switch and Local Variable Setup:</p> </li> <li>Resets switches to 00000000 and blanks all local variables.</li> <li>Calls GSY2K (possibly a system routine or subroutine for year 2000 compliance or date handling).</li> <li> <p>Checks a condition (?4?/Y): If true, sets a specific switch (XXXXXX1X) for \"PROFORMA INVOICES ONLY\" mode and sets a local offset (232) with data 'Y'.</p> </li> <li> <p>Order Batch Selection:</p> </li> <li>Sets local offsets with data values:<ul> <li>Offset 470: '?13?' (possibly a batch or order identifier).</li> <li>Offset 494: '?USER?' (user-related data).</li> <li>Offset 502: '?WS?' (workstation or session data).</li> <li>Offset 504: 'L' (likely a literal or flag).</li> </ul> </li> <li>If switch 7 is set (SWITCH7-1), sets offset 60 with '     PROFORMA INVOICES      ' (display header).</li> <li>Resets switches to 0XXXXXXX for batch deletion mode.</li> <li> <p>Evaluates P20 as '?L'490,2'?' (likely retrieving or calculating a parameter value from a location).</p> </li> <li> <p>Proforma Invoice Selection and File Preparation:</p> </li> <li>Clears (CLRPFM) several physical files to prepare for new data:<ul> <li>?9?BBPROB</li> <li>?9?BBPROD</li> <li>?9?BBPROH</li> <li>?9?BBPROI</li> <li>?9?BBPROM</li> <li>?9?BBPROO</li> </ul> </li> <li> <p>Calls the external program BB114 with parameter '?9?' (likely passing the library prefix).</p> </li> <li> <p>Job Submission or Execution:</p> </li> <li>Jumps to a tag (JUMP) based on prior logic.</li> <li>Checks conditions:<ul> <li>If ?L'166,1'?/Y and SWITCH7-1 is set, submits BB114O to a job queue (?CLIB?,BB114O) with parameters ,,,,,,,,?9?.</li> <li>Otherwise, if SWITCH7-1 is set, runs BB114O directly with the same parameters.</li> </ul> </li> <li> <p>Proceeds to the END tag.</p> </li> <li> <p>Termination:</p> </li> <li>Resets switches to 00000000 and blanks all local variables.</li> <li>Ends the program.</li> </ol> <p>The overall flow is conditional and looped for error handling, focusing on preparing data files, calling programs for processing proforma invoices, and optionally submitting jobs for background execution.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114P%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB110E: Loaded and run conditionally during the initial validation loop.</li> <li>BB114: Called directly with parameter '?9?' during the invoice selection phase.</li> <li>BB114O: Submitted to a job queue or run directly, depending on conditions, with parameters ,,,,,,,,?9?.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>These are physical files (PFs) explicitly cleared via CLRPFM, prefixed with ?9? (likely a variable library name). They are used for storing proforma invoice-related data:</p> <ul> <li>BBPROB</li> <li>BBPROD</li> <li>BBPROH</li> <li>BBPROI</li> <li>BBPROM</li> <li>BBPROO</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114S%20RPGLE/","title":"BB114S RPGLE","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114S%20RPGLE/#process-steps-of-the-rpgle-program-bb114s","title":"Process Steps of the RPGLE Program BB114S","text":"<p>This RPG IV (RPGLE) program, named BB114S, is part of the Customer Orders system and is designed to build work files for customer order confirmations. It is called from the CLP program BB114SC (which itself is invoked from the main OCL via BB114 for subfile option 6). The program reads order records from the BBORDR file and populates multiple output work files (BBPROH, BBPROD, BBPROO, BBPROI, BBPROB, BBPROM) based on record types identified by sequence numbers (Seq#). These files are used downstream for printing confirmations or proforma invoices (e.g., by BB110). Below is a step-by-step breakdown of the program's execution:</p> <ol> <li>Program Initialization (*INZSR Subroutine):</li> <li>Receives two input parameters: Pco (company number, 2-digit decimal) and Pordn (order number, 6-digit decimal).</li> <li>Constructs a key (KyCoOrd, 8-digit numeric) by combining Pco and Pordn for reading BBORDR.</li> <li> <p>Initializes KyCoOrdSq (11 characters) by moving KyCoOrd and appending '000' to start at the header record.</p> </li> <li> <p>Main Processing (BUILD Subroutine):</p> </li> <li>Sets the lower limit (SETLL) on BBORDR using KyCoOrdSq to position at the first record for the specified company and order.</li> <li>Enters a loop (DO until IN99 = ON, indicating end-of-file) to read equal (READE) records from BBORDR matching KyCoOrd (company/order).</li> <li>For each record read (while IN99 = OFF):<ul> <li>Examines the sequence number (Seq#, positions 10-12) to determine record type:</li> <li>Seq# = 000: Header record; writes to BBPROH (HEADER exception).</li> <li>Seq# = 900-959: Other miscellaneous lines; writes to BBPROM (OtherMisc exception).</li> <li>Seq# = 960: Miscellaneous line; writes to BBPROO (MISC960 exception).</li> <li>Seq# = 961: Miscellaneous line; writes to BBPROI (MISC961 exception).</li> <li>Seq# = 962: Miscellaneous line; writes to BBPROB (MISC962 exception).</li> <li>Other Seq# (e.g., detail lines): Writes to BBPROD (DETAIL exception).</li> </ul> </li> <li> <p>Writes full records (positions 1-256 and 257-512) to the respective output file without modification.</p> </li> <li> <p>Output to Work Files:</p> </li> <li>For each exception output:<ul> <li>HEADER (BBPROH): Outputs BOHDR1 (1-256), BOHDR2 (257-512).</li> <li>DETAIL (BBPROD): Outputs BDDTL1 (1-256), BDDTL2 (257-512).</li> <li>MISC960 (BBPROO): Outputs BDORR1 (1-256), BDORR2 (257-512).</li> <li>MISC961 (BBPROI): Outputs BDINR1 (1-256), BDINR2 (257-512).</li> <li>MISC962 (BBPROB): Outputs BDBLR1 (1-256), BDBLR2 (257-512).</li> <li>OtherMisc (BBPROM): Outputs BMBLR1 (1-256), BMBLR2 (257-512).</li> </ul> </li> <li> <p>Adds records (EADD) to each file, preserving original data structure.</p> </li> <li> <p>Program Termination:</p> </li> <li>After processing all records, sets INLR (last record indicator) to ON.</li> <li>Exits, returning control to the caller (BB114SC).</li> </ol> <p>The program is straightforward, acting as a data router that filters and distributes BBORDR records into specific work files based on sequence numbers, with no transformations or calculations.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114S%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Record Type Segregation: Uses Seq# to categorize records:</li> <li>Seq# = 000: Header (order-level data, e.g., customer, dates, terms).</li> <li>Seq# = 900-959: Miscellaneous remarks (e.g., bill of lading notes).</li> <li>Seq# = 960-962: Specific miscellaneous lines (e.g., dispatch or freight-related).</li> <li>Other Seq#: Detail lines (e.g., order items).</li> <li>Data Preservation: Copies records verbatim (1-512 bytes) to work files, ensuring no data loss or alteration for downstream processing (e.g., BB110 for printing).</li> <li>Order-Specific Processing: Processes only records matching the input company (Pco) and order number (Pordn), ensuring targeted confirmation generation.</li> <li>File Usage: Populates work files (BBPRO*) for temporary storage, used by BB110 for printing confirmations or proforma invoices. Files are group-specific (from BB114SC\u2019s &amp;P$FGRP).</li> <li>No Validation: Assumes valid input parameters and existing records; no error handling or validation visible (likely handled by caller BB114 or BB114SC).</li> <li>Integration Context: Part of the order confirmation flow (OCL \u2192 BB114 \u2192 BB114SC \u2192 BB114S \u2192 BB110), preparing structured data for printing.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114S%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input File:</li> <li> <p>BBORDR: Primary input file (512 bytes, disk, keyed starting at position 2, 11-byte alpha index); contains header, detail, and miscellaneous records with fields like BODEL, BOCO, BORDNO, BOCUST, BOSHIP, BOORPR, etc.</p> </li> <li> <p>Output Files (all add-only, 512 bytes, disk):</p> </li> <li>BBPROH: Stores header records (BOHDR1, BOHDR2).</li> <li>BBPROD: Stores detail records (BDDTL1, BDDTL2).</li> <li>BBPROO: Stores miscellaneous records for Seq# 960 (BDORR1, BDORR2).</li> <li>BBPROI: Stores miscellaneous records for Seq# 961 (BDINR1, BDINR2).</li> <li>BBPROB: Stores miscellaneous records for Seq# 962 (BDBLR1, BDBLR2).</li> <li>BBPROM: Stores other miscellaneous records for Seq# 900-959 (BMBLR1, BMBLR2).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114S%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not call any external programs (no CALL opcodes). It is a self-contained data processing routine that reads from BBORDR and writes to the BBPRO* files for use by downstream programs like BB110.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114SC%20CLP/","title":"BB114SC CLP","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114SC%20CLP/#process-steps-of-the-clp-program-bb114sc","title":"Process Steps of the CLP Program BB114SC","text":"<p>This Control Language Program (CLP) acts as a wrapper to prepare and override specific database files based on a file group parameter, then calls a subroutine program to build work files for customer order confirmations. It is called from the main OCL (e.g., during subfile option processing in BB114 for option 6) and passes parameters for company and order. The program ensures the correct file versions (based on group, e.g., 'G' or 'Z') are used without hardcoding libraries. Below is a step-by-step breakdown of the execution:</p> <ol> <li>Parameter Reception and Variable Declaration:</li> <li>Receives three input parameters: &amp;P$CO# (company number, decimal 2.0), &amp;P$ORDR (order number, decimal 6.0), &amp;P$FGRP (file group indicator, character 1).</li> <li> <p>Declares character variables (length 10) for file names: &amp;BBORDR, &amp;BBPROH, &amp;BBPROD, &amp;BBPROO, &amp;BBPROI, &amp;BBPROB, &amp;BBPROM.</p> </li> <li> <p>File Name Construction:</p> </li> <li> <p>Constructs dynamic file names by concatenating the file group (&amp;P$FGRP) as a prefix to base file names (e.g., &amp;BBORDR = &amp;P$FGRP + 'BBORDR'). This allows switching between file sets (e.g., GBBORDR vs. ZBBORDR) without explicit library references.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>Overrides (OVRDBF) the logical file names (BBORDR, BBPROH, etc.) to point to the constructed physical file names in the library list (LIBL), using the first member (FIRST). This redirects any subsequent file operations to the group-specific files.</p> </li> <li> <p>Call Subroutine Program:</p> </li> <li> <p>Calls the external program BB114S, passing &amp;P$CO# (company) and &amp;P$ORDR (order) as parameters. This program likely processes the order data and populates the work files (e.g., BBPROR, though not directly mentioned here; inferred from purpose).</p> </li> <li> <p>Cleanup and Termination:</p> </li> <li>Deletes all file overrides (DLTOVR FILE(*ALL)) to restore default file mappings.</li> <li>Ends the program (ENDPGM), returning control to the caller.</li> </ol> <p>The program is concise and focuses on setup/cleanup around the BB114S call, ensuring isolation and correct file usage per invocation.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114SC%20CLP/#business-rules","title":"Business Rules","text":"<ul> <li>File Group Flexibility: Uses &amp;P$FGRP to dynamically select file sets (e.g., 'G' for general, 'Z' for another environment), supporting multi-company or multi-dataset processing without code changes. This aligns with prior programs (e.g., BB114) for environment-specific data handling.</li> <li>Order-Specific Processing: Targets a single order (&amp;P$ORDR) within a company (&amp;P$CO#), building confirmation work files (e.g., for BB110 printing). Assumes valid inputs; no explicit validation here (likely handled in caller like BB114).</li> <li>Work File Preparation: Prepares temporary/work files (BBPRO* series) for order confirmation generation, used downstream in printing (e.g., BB110). These files store header, detail, and other order components.</li> <li>Isolation and Cleanup: Overrides are scoped to this call and removed post-execution, preventing side effects on other programs. No error handling visible; assumes success or caller-managed exceptions.</li> <li>Integration Context: Ties into the broader proforma/order confirmation flow (from OCL to BB114 to this to BB114S to BB110), enforcing data consistency for confirmations.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114SC%20CLP/#tablesfiles-used","title":"Tables/Files Used","text":"<p>These are database files (physical/logical) overridden for use in the called program:</p> <ul> <li>BBORDR (order-related; overridden to prefixed version, e.g., GBBORDR).</li> <li>BBPROH (proforma/order headers).</li> <li>BBPROD (proforma/order details).</li> <li>BBPROO (proforma/order other?).</li> <li>BBPROI (proforma/order items?).</li> <li>BBPROB (proforma/order batches?).</li> <li>BBPROM (proforma/order marks?).</li> </ul> <p>No display or printer files; focus is on data files.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/BB114SC%20CLP/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB114S: Called with parameters &amp;P$CO# (company) and &amp;P$ORDR (order); this likely performs the core logic to build/populate the work files (e.g., BBPROR) for confirmations.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/","title":"Summary BB114P OCL","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#list-of-use-cases-implemented-in-the-call-stack","title":"List of Use Cases Implemented in the Call Stack","text":"<p>The call stack (BB114P.ocl36 \u2192 BB110E \u2192 BB114 \u2192 BB114SC \u2192 BB114S \u2192 BB114O \u2192 BB1143 \u2192 BB110) implements several use cases related to processing and printing customer order confirmations and proforma invoices within a Customer Orders system on an IBM midrange system. Each use case reflects a distinct business function, derived from the program interactions, file manipulations, and output generation. Below are the identified use cases:</p> <ol> <li>Interactive Order Confirmation Inquiry:</li> <li>Description: Allows users to interactively query and view open order headers, filter by criteria (e.g., company, customer, order number, date), and select orders for confirmation processing.</li> <li>Programs Involved: BB114P (initiates), BB110E (busy screen), BB114 (main inquiry and subfile).</li> <li> <p>Key Features: Dynamic filtering, subfile display, prompting for field values, and selection for further processing (e.g., option 6 for confirmation).</p> </li> <li> <p>Customer Order Confirmation Generation:</p> </li> <li>Description: Builds work files for a selected order to generate a customer order confirmation, preparing data for printing or further processing.</li> <li>Programs Involved: BB114 (triggers via option 6), BB114SC (file overrides), BB114S (builds work files).</li> <li> <p>Key Features: Segregates order records (header, detail, miscellaneous) into work files (BBPROH, BBPROD, etc.) based on sequence numbers.</p> </li> <li> <p>Proforma Invoice Printing:</p> </li> <li>Description: Processes order data, sorts it by specified criteria, and prints proforma invoices (with Spoolflex conversion to PDF, no emailing).</li> <li>Programs Involved: BB114P (initiates), BB114O (sorting and printing), BB1143 (preprocessing sort fields), BB110 (main printing).</li> <li> <p>Key Features: Sorting by company/order/sequence, specialized grouping for customer-owned products or packaging plants, and output to LIST4 printer file with post-processing (splitting, PDF conversion).</p> </li> <li> <p>Picking Ticket Printing for Customer-Owned Products (e.g., Viscosity EDI856):</p> </li> <li>Description: Generates picking tickets tailored for customer-owned products, with specific sorting and formatting (e.g., by product or size/container).</li> <li>Programs Involved: BB114O (initiates), BB1143 (sort preprocessing), BB110 (prints to LIST or LIST2).</li> <li> <p>Key Features: Custom sorting (product or size-based), adjusted layouts to avoid off-page printing, and Viscosity-specific formatting.</p> </li> <li> <p>Picking Ticket Printing for Packaging Plant (PP/PKGP):</p> </li> <li>Description: Produces picking tickets for packaging plant orders, with unique sorting and product descriptions.</li> <li>Programs Involved: BB114O, BB1143, BB110 (prints to LIST2).</li> <li> <p>Key Features: Sorting by product or size/container, right-justified brand, and packaging plant-specific descriptions.</p> </li> <li> <p>Order Confirmation Printing:</p> </li> <li>Description: Prints order confirmations for manual selection, including detailed order information and notes.</li> <li>Programs Involved: BB114O, BB1143, BB110 (prints to LIST3).</li> <li> <p>Key Features: Outputs confirmations with status (e.g., on-hold), weights, freight, and export compliance notes.</p> </li> <li> <p>Spool File Post-Processing for Proforma Invoices:</p> </li> <li>Description: Splits, converts, and archives spool files for proforma invoices into PDF-like electronic documents, with specific naming and output queue handling.</li> <li>Programs Involved: BB114O (calls SFASPLIT, FFAEDOC, SFACOPY).</li> <li>Key Features: No emailing, moves output to designated queues (e.g., PROFOROQSV), and uses standardized naming.</li> </ol>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#function-requirement-document-proforma-invoice-generation","title":"Function Requirement Document: Proforma Invoice Generation","text":"<p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#proforma-invoice-generation-function-requirements","title":"Proforma Invoice Generation Function Requirements","text":""},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#purpose","title":"Purpose","text":"<p>Generate proforma invoices for customer orders, producing formatted spool files (converted to PDF) without emailing, based on input order data, with sorting, grouping, and detailed calculations for printing.</p>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (2-digit decimal): Identifies the company.</li> <li>Order Number (6-digit decimal): Specifies the order to process.</li> <li>File Group (1-character, e.g., 'G' or 'Z'): Determines library/file set (e.g., GBBPROH vs. ZBBPROH).</li> <li>Order Data Files: Pre-populated files (e.g., BBORDR, BBPROH, BBPROD) containing order headers, details, and miscellaneous records.</li> <li>Supporting Files: Customer (ARCUST), product (GSPROD), container (GSCNTR), and other reference data.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Spool File (LIST4): Formatted proforma invoice output, routed to PROFOROUTQ or TESTOUTQ, with form type PROF, CPI 15.</li> <li>PDF-like Electronic Document: Converted via Spoolflex, named 'ARG PROFORMA INVOICE', archived in PROFOROQSV.</li> <li>Work Files: Populated BBPROH (headers), BBPROD (details), BBPROO/BBPROI/BBPROB (miscellaneous), BBPROM (remarks).</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Input Data:</li> <li>Check if BBPROH exists and has records for the company/order; exit if empty.</li> <li>Prepare Work Files:</li> <li>Read BBORDR records for the specified company/order.</li> <li>Segregate by sequence number:<ul> <li>Seq# 000 \u2192 BBPROH (header).</li> <li>Seq# 900-959 \u2192 BBPROM (remarks).</li> <li>Seq# 960-962 \u2192 BBPROO/BBPROI/BBPROB (miscellaneous).</li> <li>Others \u2192 BBPROD (details).</li> </ul> </li> <li>Write records verbatim to respective files.</li> <li>Sort and Preprocess Data:</li> <li>Sort BBPROR by company, order, sequence number (header first, then marks/details).</li> <li>Create temporary file (QTEMP/BB1143, 554 bytes) for preprocessing.</li> <li>Assign sort fields for details based on:<ul> <li>Customer-owned (BOCOON = 'Y'): Group by product (BDPROD) or size (from GSCNTR); sort by product, container, or size/product.</li> <li>Packaging plant (BORACD = 'PP', BOMLCD = 'PKGP'): Similar to customer-owned.</li> <li>Other: Group by product or container; sort by product/container or container/product.</li> </ul> </li> <li>Output extended records with sort fields (513-553) and BOORPR (554).</li> <li>Sort again by company, order, header priority, custom sort fields (from BB1101), sequence number.</li> <li>Generate Print Output:</li> <li>Read sorted data (BB1143S) and reference files (e.g., ARCUST, GSPROD, BBCAID).</li> <li>Skip orders with delete code 'E' (error).</li> <li>Output to LIST4:<ul> <li>Header: Order#, customer, ship-to, incoterms, route code, order status.</li> <li>Details: Quantity, gross weight (from BB101), product descriptions (GSPROD), container types (GSCNTR1), prices (ARCUPR).</li> <li>Freight: Description, bill-to address (internal: customer; external: processor).</li> <li>Totals: Net quantity, gross/net weight (in LBS), price total, miscellaneous charges.</li> <li>Notes: ARG terms, safety instructions, freight estimates, export compliance.</li> </ul> </li> <li>Post-Process Spool File:</li> <li>Split LIST4 spool (named 'PROFORMA INV LIST4') in PROFOROUTQ.</li> <li>Convert to e-doc 'ARG PROFORMA INVOICE' via Spoolflex, move to PROFOROQSV.</li> <li>Copy spool with name 'PROFORMA NAMING EMAL' to PROFOROQSV.</li> </ol>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Order Eligibility: Process only non-deleted orders (BODEL \u2260 'D'); skip if BOORPR = 'E' (error). Mark BOORPR = 'H' as 'ON HOLD - DO NOT SHIP'.</li> <li>Sorting/Grouping:</li> <li>Customer-owned (Viscosity): Group by product (BOGPBY = 'C') or size; sort by product/container or size/product/container.</li> <li>Packaging plant: Similar to customer-owned.</li> <li>Other: Group by product or container; sort by product or container/product.</li> <li>BOORPR = 'C', 'S', 'R' uses sorted order; blank uses line entry order.</li> <li>Calculations:</li> <li>Gross weight: From BB101 (order entry).</li> <li>Net weight: Includes product weight.</li> <li>Extended price: Quantity \u00d7 unit price (from ARCUPR, container-specific).</li> <li>Totals: Sum net quantity, misc charges, price total.</li> <li>Freight Handling:</li> <li>Internal processor: Use customer address for freight bill.</li> <li>External processor: Use freight processor address.</li> <li>Suppress freight total amount printing.</li> <li>Formatting:</li> <li>Use CPI 15, form type PROF for LIST4.</li> <li>Right-justify brand, adjust columns to avoid off-page printing.</li> <li>Include incoterms, route code, loading location, and export compliance notes.</li> <li>File Groups: Use file group ('G' or 'Z') to select library (e.g., GBBPROH vs. ZBBPROH).</li> <li>Post-Processing: No emailing; archive spool files in PROFOROQSV with standardized names.</li> </ul>"},{"location":"order-entry/BB114P%20Proforma%20Invoices/Summary%20BB114P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Net Quantity (L2CQT): Sum of BDQTY across detail lines (non-deleted).</li> <li>Gross Weight (L2GWT): Pre-calculated in BB101, output in LBS.</li> <li>Net Weight (L2NWT): Sum of product weights (BDGWT) from detail lines.</li> <li>Price Total (TOTPRCJB): Sum of extended prices (BDQTY \u00d7 unit price from ARCUPR).</li> <li>Miscellaneous Total (L2TOT): Sum of BMAMT from miscellaneous lines (Seq# 960-962, 900-959).</li> </ul>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/","title":"BB001 RPG36","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>BB001.rpg36.txt</code>, which is called by the <code>BB150P</code> OCL program for Order Entry Batch Selection in an IBM System/36 or AS/400 environment. This program manages the selection, creation, updating, and deletion of batches for Bills of Lading (BOL) processing. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/#process-steps-of-the-bb001-rpg-program","title":"Process Steps of the BB001 RPG Program","text":"<p>The <code>BB001</code> RPG program handles batch selection and management for order entry processes. It interacts with a workstation screen (<code>SCREEN</code>) and manages batch records in the <code>BBBTCH</code> and <code>BBBTCHX</code> files. The program is structured around subroutines and screen interactions. Here\u2019s a breakdown of the process steps:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Clears the <code>CANCEL</code> field and initializes counters (<code>BLIM</code>, <code>Z2</code>, <code>Z7</code>, <code>Z8</code>) to zero.</li> <li>Positions the <code>BBBTCH</code> file at the beginning (<code>SETLL BBBTCH</code>).</li> <li>Calls the <code>DRLFWD</code> subroutine to read and display batch records.</li> <li>Sets indicators (e.g., <code>21</code>, <code>83</code>) for screen control and checks the program mode (<code>PGM</code>):<ul> <li>If <code>PGM = 'O'</code>, indicator <code>44</code> is turned off (likely for order entry mode).</li> <li>If <code>PGM \u2260 'O'</code>, indicator <code>44</code> is turned on (for other modes, e.g., printing or posting).</li> </ul> </li> </ol> <p>Purpose: Sets up the program environment, initializes variables, and prepares the first batch record for display.</p> <ol> <li>Screen Processing:</li> <li>The program uses three screen formats (<code>BB001S1</code>, <code>BB001S2</code>, <code>BB001S3</code>) for different interactions:<ul> <li>S1 (Screen 1): Displays a list of batches and allows the user to select or create a batch.</li> <li>S2 (Screen 2): Confirms batch selection or deletion.</li> <li>S3 (Screen 3): Handles cancellation or reset of a batch.</li> </ul> </li> <li>The main logic checks conditions (<code>01</code>, <code>02</code>, <code>03</code>) to execute the corresponding subroutine (<code>S1</code>, <code>S2</code>, <code>S3</code>) based on user input.</li> </ol> <p>Purpose: Manages user interaction through the workstation screen for batch selection or manipulation.</p> <ol> <li>S1 Subroutine (Batch Selection or Creation):</li> <li>If the <code>KG</code> key (cancel) is pressed:<ul> <li>Sets <code>CANCEL = 'CANCEL'</code>, turns on the Last Record (<code>LR</code>) indicator, and exits.</li> </ul> </li> <li>If the user enters a batch number (<code>BTCH#X = 0</code>):<ul> <li>New Batch Creation:</li> <li>Checks if the program mode is order entry (<code>PGM = 'O'</code>). If not, displays error message <code>COM,2</code> (\"CANNOT CREATE A BATCH NOW\") and exits.</li> <li>Retrieves the next batch number from <code>ABNXTB</code> in <code>BBBTCHX</code> (via <code>CHAIN</code>).</li> <li>Increments <code>ABNXTB</code> and updates the file (<code>EXCPT UPDNXB</code>).</li> <li>If <code>ABNXTB</code> reaches <code>99</code>, resets it to <code>1</code>.</li> <li>Initializes fields for the new batch:<ul> <li>Description (<code>LKDESC = COM,11</code> = \"AVAILABLE\").</li> <li>Print status (<code>PRTD = 'N'</code>).</li> <li>Creation date (<code>DATE</code>) and last update date (<code>LUDT</code>) based on system date (<code>UDATE</code>).</li> <li>Record count (<code>#REC = 0</code>).</li> </ul> </li> <li>Checks if the batch number already exists (<code>CHAIN BBBTCHX</code>). If it does, loops to get the next batch number.</li> <li>Adds the new batch record (<code>EXCPT ADDBCH</code>) and sets <code>LR</code> to exit.</li> </ul> </li> <li>If the user selects an existing batch (<code>BTCH#X \u2260 0</code>):<ul> <li>Retrieves the batch record (<code>CHAIN BBBTCHX</code>).</li> <li>Validates the batch:</li> <li>If the batch is deleted (<code>ABDEL = 'D'</code>) or batch number is <code>99</code>, displays error <code>COM,1</code> (\"INVALID BATCH NO.\") and exits.</li> <li>If the batch source (<code>ABSRCE</code>) does not match <code>PAR13C</code> (e.g., <code>PP</code> for Viscosity ASN or non-<code>PP</code>), displays error <code>COM,1</code> and exits.</li> <li>If the batch is locked (<code>ABLOCK \u2260 *BLANK</code>) and not by the current user (<code>ABUSER \u2260 USER</code>), displays error <code>COM,3</code> (\"BATCH # IN USE\") and releases the batch (<code>EXCPT RELBCH</code>).</li> <li>If the batch is locked for posting (<code>ABLOCK = 'O'</code>) and <code>PGM = 'P'</code>, displays error <code>COM,5</code> (\"BATCH # IN USE--CANNOT POST NOW\") and exits.</li> <li>If valid, populates fields for display (e.g., <code>LKDESC</code>, <code>PRTD</code>, <code>USER</code>, <code>DTMDY</code>, <code>#REC</code>).</li> <li>If the user requests deletion (<code>DEL = 'D'</code>), displays confirmation message <code>COM,4</code> (\"CMD 4 - TO DELETE EXISTING BATCH\") and sets indicator <code>22</code> for the delete confirmation screen.</li> <li>Updates the batch record (<code>EXCPT UPDBCH</code>) if not deleting, and sets <code>LR</code> or indicator <code>24</code> based on mode.</li> </ul> </li> </ol> <p>Purpose: Handles batch creation or selection, with validation to ensure batch availability and compatibility with the program mode.</p> <ol> <li>S2 Subroutine (Batch Confirmation or Deletion):</li> <li>If the <code>KA</code> key is pressed (new batch or navigation):<ul> <li>Positions the <code>BBBTCH</code> file and calls <code>DRLFWD</code> to display the next batch.</li> </ul> </li> <li>If deletion is confirmed (<code>DEL = 'D'</code> and <code>KD</code> key pressed):<ul> <li>Deletes the batch record (<code>EXCPT DELBCH</code>) and sets <code>LR</code> to exit.</li> </ul> </li> <li>If a new batch is being added:<ul> <li>Checks if the batch number exists (<code>CHAIN BBBTCHX</code>). If not, adds the batch (<code>EXCPT ADDBCH</code>) and sets <code>LR</code>.</li> </ul> </li> </ol> <p>Purpose: Confirms batch selection or processes batch deletion.</p> <ol> <li>S3 Subroutine (Cancel or Reset):</li> <li>If the <code>KG</code> key is pressed:<ul> <li>Retrieves the batch record (<code>CHAIN BBBTCHX</code>).</li> <li>If found, saves the batch with original lock status (<code>EXCPT SAVBCH</code>).</li> <li>Sets <code>CANCEL = 'CANCEL'</code>, resets indicators, and sets <code>LR</code> to exit.</li> </ul> </li> </ol> <p>Purpose: Resets or cancels the batch selection process, preserving the original batch state.</p> <ol> <li>DRLFWD Subroutine (Detail Roll Forward):</li> <li>Reads the next record from <code>BBBTCH</code> and populates display fields (e.g., <code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>).</li> <li>Skips records if:<ul> <li>The batch number is <code>99</code> or marked as deleted (<code>ABDEL = 'D'</code>).</li> <li>The batch source (<code>ABSRCE</code>) does not match <code>PAR13C</code> (commented-out logic suggests validation for <code>PP</code> or non-<code>PP</code> modes).</li> </ul> </li> <li>Maps lock status (<code>ABLOCK</code>) to descriptive messages:<ul> <li><code>*BLANK</code>: <code>COM,11</code> (\"AVAILABLE\").</li> <li><code>O</code>: <code>COM,12</code> (\"ORD ENTRY\").</li> <li><code>L</code>: <code>COM,13</code> (\"PICK LIST\").</li> <li><code>P</code>: <code>COM,14</code> (\"POSTING\").</li> <li><code>B</code>: <code>COM,15</code> (\"BOL PRINT\").</li> </ul> </li> <li>Continues reading until 10 records are loaded or the end of the file is reached.</li> </ol> <p>Purpose: Displays a list of available batches for selection.</p> <ol> <li>DRLBAK Subroutine (Detail Roll Backward):</li> <li>Sets indicator <code>21</code> to refresh the screen but does not implement backward navigation logic (appears incomplete).</li> </ol> <p>Purpose: Intended to navigate backward through batch records (not fully implemented).</p> <ol> <li>ROLLKY Subroutine (Handle Roll Keys):</li> <li>Checks the workstation status (<code>STATUS</code>) for roll keys (e.g., <code>01122</code> for forward, <code>01123</code> for backward).</li> <li>Calls <code>DRLFWD</code> for forward navigation or <code>DRLBAK</code> for backward navigation.</li> <li>Clears the status and resets indicators.</li> </ol> <p>Purpose: Manages pagination or scrolling through batch records.</p> <ol> <li>DETCLR Subroutine (Clear Display Fields):</li> <li>Resets display arrays (<code>BTC</code>, <code>LKD</code>, <code>LKW</code>, <code>PRT</code>, <code>USR</code>, <code>DTE</code>, <code>LUD</code>, <code>#RC</code>) to zero or blanks.</li> </ol> <p>Purpose: Clears the screen fields before loading new batch data.</p> <ol> <li> <p>Output Operations:</p> <ul> <li>Updates <code>BBBTCHX</code> with the next batch number (<code>UPDNXB</code>).</li> <li>Adds a new batch record (<code>ADDBCH</code>).</li> <li>Updates an existing batch record (<code>UPDBCH</code>).</li> <li>Deletes a batch record (<code>DELBCH</code>).</li> <li>Releases a batch by restoring its lock status (<code>RELBCH</code>).</li> <li>Saves a batch with its original lock status (<code>SAVBCH</code>).</li> </ul> <p>Purpose: Performs file operations to maintain batch data.</p> </li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Concurrency Control:    - Prevents batch creation if the program mode is not order entry (<code>PGM \u2260 'O'</code>).    - Prevents access to a batch if it is locked (<code>ABLOCK \u2260 *BLANK</code>) by another user (<code>ABUSER \u2260 USER</code>) or workstation, unless the current user locked it.    - Prevents posting (<code>PGM = 'P'</code>) if the batch is locked for order entry (<code>ABLOCK = 'O'</code>).</p> <ol> <li>Batch Number Management:</li> <li>Batch numbers are assigned sequentially from <code>ABNXTB</code> (1 to 99, resetting to 1 after 99).</li> <li>Batch number <code>99</code> is reserved and considered invalid for selection.</li> <li> <p>Duplicate batch numbers are avoided by checking <code>BBBTCHX</code> before adding a new batch.</p> </li> <li> <p>Batch Source Validation:</p> </li> <li> <p>The batch source (<code>ABSRCE</code>) must match the parameter <code>PAR13C</code> (e.g., <code>PP</code> for Viscosity ASN or non-<code>PP</code> for other modes). Mismatched batches are skipped or rejected.</p> </li> <li> <p>Deletion Control:</p> </li> <li>Batches marked for deletion (<code>ABDEL = 'D'</code>) are invalid and cannot be selected.</li> <li> <p>Deletion requires confirmation via the <code>S2</code> screen (<code>DEL = 'D'</code> and <code>KD</code> key).</p> </li> <li> <p>Lock Status:</p> </li> <li>Batches can be locked for:<ul> <li>Order Entry (<code>O</code>).</li> <li>Pick List (<code>L</code>).</li> <li>Posting (<code>P</code>).</li> <li>BOL Print (<code>B</code>).</li> <li>Available (<code>*BLANK</code>).</li> </ul> </li> <li> <p>Lock status is displayed to the user with descriptive messages.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Creation and last update dates are derived from the system date (<code>UDATE</code>).</li> <li>The record count (<code>#REC</code>) is maintained for each batch.</li> <li>The program ensures that batch records are updated or saved correctly to preserve their state.</li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. SCREEN:    - A workstation file for displaying and capturing user input.    - Uses formats <code>BB001S1</code>, <code>BB001S2</code>, and <code>BB001S3</code> for batch selection, confirmation, and cancellation. 2. BBBTCH:    - Input file (<code>ID</code>), 48 bytes, logical file with 2 access paths, indexed.    - Stores batch records with fields like batch number, lock status, user ID, creation date, etc. 3. BBBTCHX:    - Update-capable file (<code>UC</code>), 48 bytes, physical or logical file with 2 access paths, indexed.    - Stores the same batch data as <code>BBBTCH</code>, with additional control fields like <code>ABNXTB</code> (next batch number).</p> <p>Fields in BBBTCH and BBBTCHX: - <code>ABDEL</code> (1 char): Delete code (<code>'D'</code> for deleted). - <code>ABBTCH</code> (2 num): Batch number. - <code>ABLOCK</code> (1 char): Lock status (<code>O</code>, <code>L</code>, <code>P</code>, <code>B</code>, or blank). - <code>ABLKWS</code> (2 char): Workstation ID locking the batch. - <code>ABPRTD</code> (1 char): BOL printed status (<code>'N'</code> or other). - <code>ABUSER</code> (8 char): User ID. - <code>ABDATE</code> (6 num): Creation date (CYMD format). - <code>ABLUDT</code> (6 num): Last update date (CYMD format). - <code>ABREC</code> (8 num): Number of records in the batch. - <code>ABSRCE</code> (2 char): Batch source (e.g., <code>PP</code> for Viscosity ASN). - <code>ABNXTB</code> (2 num): Next available batch number.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB001</code> RPG program does not explicitly call any external programs. It operates as a standalone program, interacting with the workstation and files directly.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB001%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB001</code> RPG program is responsible for batch selection and management in the order entry process for Bills of Lading. It: - Displays and navigates batch records using a workstation screen. - Allows creation of new batches (in order entry mode) or selection of existing batches. - Enforces business rules for batch number assignment, concurrency, lock status, and source validation. - Updates, deletes, or releases batch records in <code>BBBTCH</code> and <code>BBBTCHX</code>. - Uses subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S3</code>, <code>DRLFWD</code>, <code>DRLBAK</code>, <code>ROLLKY</code>, <code>DETCLR</code>) to modularize logic.</p> <p>Files Used: <code>SCREEN</code> (workstation), <code>BBBTCH</code> (batch input), <code>BBBTCHX</code> (batch update). External Programs: None.</p> <p>If you need further details (e.g., specific field mappings, screen layouts, or additional context from the OCL program), let me know!</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/","title":"BB005 RPG36","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>BB005.rpg36.txt</code>, called by the <code>BB150P</code> OCL program for Release or Post Batch operations in an IBM System/36 or AS/400 environment. This program updates batch records in the <code>BBBTCH</code> file based on the program mode (<code>PGM</code>) and batch number (<code>BATCH#</code>). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/#process-steps-of-the-bb005-rpg-program","title":"Process Steps of the BB005 RPG Program","text":"<p>The <code>BB005</code> RPG program is designed to release or post a batch by updating specific fields in the <code>BBBTCH</code> file. It operates in a straightforward manner, with conditional logic based on the program mode (<code>PGM</code>). Here\u2019s a breakdown of the process steps:</p> <ol> <li>Retrieve Batch Record:</li> <li>The program uses the <code>BATCH#</code> (batch number, positions 490-491 in the User Data Structure, <code>UDS</code>) to retrieve the corresponding record from the <code>BBBTCH</code> file using a <code>CHAIN</code> operation.</li> <li>If the batch record is not found (indicator <code>99</code> is on), the program skips further processing and exits.</li> </ol> <p>Purpose: Ensures the specified batch exists before attempting to update it.</p> <ol> <li>Process Based on Program Mode (<code>PGM</code>):</li> <li>If the batch record is found (<code>N99</code>), the program evaluates the <code>PGM</code> field (position 504 in <code>UDS</code>), which determines the type of batch operation:<ul> <li>PGM = 'O' (Order Entry):</li> <li>Executes the <code>REL</code> exception output to update the batch record:<ul> <li>Clears the lock status (<code>ABLOCK</code>, position 6) to a blank space (<code>' '</code>).</li> <li>Clears the workstation ID (<code>ABLKWS</code>, position 8) to blanks (<code>'  '</code>).</li> <li>Updates the record count (<code>ABREC</code>, position 39) with <code>RECCNT</code> (positions 475-482 in <code>UDS</code>).</li> </ul> </li> <li>PGM = 'L' (Pick List):</li> <li>Executes the <code>PICK</code> exception output:<ul> <li>Clears the lock status (<code>ABLOCK</code>, position 6) to a blank space (<code>' '</code>).</li> <li>Clears the workstation ID (<code>ABLKWS</code>, position 8) to blanks (<code>'  '</code>).</li> <li>Updates the record count (<code>ABREC</code>, position 39) with <code>RECCNT</code>.</li> </ul> </li> <li>PGM = 'B' (Bill of Lading Print):</li> <li>Executes the <code>BOL</code> exception output:<ul> <li>Clears the lock status (<code>ABLOCK</code>, position 6) to a blank space (<code>' '</code>).</li> <li>Clears the workstation ID (<code>ABLKWS</code>, position 8) to blanks (<code>'  '</code>).</li> <li>Sets the BOL printed status (<code>ABPRTD</code>, position 9) to <code>'Y'</code>.</li> <li>Updates the record count (<code>ABREC</code>, position 39) with <code>RECCNT</code>.</li> </ul> </li> <li>PGM = 'P' (Posting):</li> <li>Executes the <code>POST</code> exception output:<ul> <li>Sets the delete code (<code>ABDEL</code>, position 1) to <code>'D'</code> (marks the batch as deleted).</li> <li>Sets the lock status (<code>ABLOCK</code>, position 6) to <code>'P'</code> (indicating posting).</li> <li>Updates the record count (<code>ABREC</code>, position 39) with <code>RECCNT</code>.</li> </ul> </li> <li>Default (PGM \u2260 'O', 'L', 'B', or 'P'):</li> <li>Executes the <code>REL</code> exception output (same as <code>PGM = 'O'</code>):<ul> <li>Clears the lock status (<code>ABLOCK</code>) and workstation ID (<code>ABLKWS</code>).</li> <li>Updates the record count (<code>ABREC</code>) with <code>RECCNT</code>.</li> </ul> </li> </ul> </li> </ol> <p>Purpose: Updates the batch record based on the operation type, either releasing the batch (clearing locks), marking it as printed, or deleting it for posting.</p> <ol> <li>Exit Program:</li> <li>Sets the Last Record (<code>LR</code>) indicator to exit the program.</li> </ol> <p>Purpose: Ensures the program terminates after processing the batch record.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>BB005</code> RPG program enforces the following business rules: 1. Batch Existence:    - The program only processes a batch if it exists in the <code>BBBTCH</code> file. If the batch number (<code>BATCH#</code>) does not correspond to a valid record, no updates are performed.</p> <ol> <li>Program Mode Determines Action:</li> <li> <p>The <code>PGM</code> field dictates the type of update:</p> <ul> <li><code>'O'</code> (Order Entry) or <code>'L'</code> (Pick List): Releases the batch by clearing lock fields (<code>ABLOCK</code>, <code>ABLKWS</code>) and updating the record count.</li> <li><code>'B'</code> (BOL Print): Releases the batch and marks it as printed (<code>ABPRTD = 'Y'</code>).</li> <li><code>'P'</code> (Posting): Marks the batch as deleted (<code>ABDEL = 'D'</code>) and sets the lock status to <code>'P'</code>.</li> <li>Any other <code>PGM</code> value defaults to a release operation (clearing locks).</li> </ul> </li> <li> <p>Record Count Update:</p> </li> <li> <p>The <code>RECCNT</code> value (number of records in the batch) is always updated in the <code>ABREC</code> field, ensuring the batch record reflects the current count.</p> </li> <li> <p>Concurrency and Lock Management:</p> </li> <li>Releasing a batch (for <code>PGM = 'O'</code>, <code>'L'</code>, or <code>'B'</code>) clears the lock status and workstation ID, making the batch available for other processes.</li> <li> <p>Posting a batch (<code>PGM = 'P'</code>) marks it as deleted, preventing further use.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that updates to the <code>BBBTCH</code> file are atomic (via <code>UC</code> file mode for update-capable access).</li> <li>Only specific fields are modified based on the operation, preserving other data in the batch record.</li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following file: 1. BBBTCH:    - Update-capable file (<code>UC</code>), 48 bytes, logical file with 2 access paths, indexed.    - Stores batch records with fields relevant to batch management.    - Fields Updated:      - <code>ABDEL</code> (position 1, 1 char): Delete code (<code>'D'</code> for posting).      - <code>ABLOCK</code> (position 6, 1 char): Lock status (<code>' '</code> for release, <code>'P'</code> for posting).      - <code>ABLKWS</code> (position 8, 2 char): Workstation ID (<code>'  '</code> for release).      - <code>ABPRTD</code> (position 9, 1 char): BOL printed status (<code>'Y'</code> for BOL print).      - <code>ABREC</code> (position 39, 8 num): Number of records in the batch (updated with <code>RECCNT</code>).</p> <p>Input Fields from UDS: - <code>BATCH#</code> (positions 490-491, 2 num): Batch number used to locate the record. - <code>PGM</code> (position 504, 1 char): Program mode (<code>'O'</code>, <code>'L'</code>, <code>'B'</code>, <code>'P'</code>, or other). - <code>RECCNT</code> (positions 475-482, 8 num): Record count to update <code>ABREC</code>.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB005</code> RPG program does not explicitly call any external programs. It operates as a standalone program, performing file updates directly based on input parameters.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB005%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB005</code> RPG program is a simple utility for releasing or posting batches in the <code>BBBTCH</code> file, called by the <code>BB150P</code> OCL program. It: - Retrieves a batch record using <code>BATCH#</code>. - Updates the record based on the <code>PGM</code> mode:   - Releases the batch (<code>PGM = 'O'</code>, <code>'L'</code>, or default) by clearing locks.   - Marks the batch as printed (<code>PGM = 'B'</code>).   - Deletes the batch for posting (<code>PGM = 'P'</code>). - Always updates the record count (<code>ABREC</code>) with <code>RECCNT</code>. - Enforces business rules for batch existence, lock management, and operation-specific updates.</p> <p>Files Used: <code>BBBTCH</code> (update-capable batch file). External Programs: None.</p> <p>If you need further details (e.g., field-level mappings, interaction with the OCL program, or additional context), let me know!</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/","title":"BB150 RPG36","text":"<p>The <code>BB150.rpg36.txt</code> RPG program is a complex program used for printing Bills of Lading (BOLs) in an IBM System/36 or AS/400 environment, called by the main OCL program (<code>BB150P</code>). It handles both regular and railcar BOLs, with specific logic for EDI 856 (Viscosity) orders, multi-load shipments, and various formatting requirements. The program has been extensively modified over time (as indicated by change logs from 2008 to 2024) to address specific business needs, such as freight processor handling, container type processing, and formatting improvements. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/#process-steps-of-the-bb150-rpg-program","title":"Process Steps of the BB150 RPG Program","text":"<p>The <code>BB150</code> program processes order and shipment data to generate printed BOLs, handling both regular (order pick list time, <code>U5</code>) and railcar (railcar BOL time, <code>U6</code>) scenarios. It reads multiple files, applies business logic, and produces formatted output to the <code>LIST</code> and <code>LIST1</code> printer files. The program\u2019s logic is driven by the order header, detail, and marks records, with special handling for EDI orders and multi-load shipments. Here\u2019s a breakdown of the process steps:</p> <ol> <li>Initialization:</li> <li>The program initializes by reading input files (<code>BBTRAN</code>, <code>BBOTHS1</code>, <code>BBBLHS1</code>, etc.) and setting up printer files (<code>LIST</code>, <code>LIST1</code>).</li> <li>It retrieves system date (<code>UDATE</code>) for printing and initializes variables like <code>PAGE</code> for pagination.</li> <li>It processes the <code>U5</code> (order pick list time) or <code>U6</code> (railcar BOL time) indicators to determine the type of BOL to print.</li> <li>It sets up arrays for messages (<code>MSG</code>, <code>MSG1</code>, <code>MSG2</code>, <code>MSG3</code>, <code>MSG4</code>) and key fields (<code>KYOR</code>, <code>KYFS</code>, <code>KYTS</code>) for selected order numbers and shipment reference numbers (SRNs).</li> </ol> <p>Purpose: Prepares the environment for processing orders and printing BOLs.</p> <ol> <li>Order Header Processing:</li> <li>Reads header records from <code>BBTRAN</code>, <code>BBOTHS1</code> (for <code>U5</code>), or <code>BBBLHS1</code> (for <code>U6</code>) based on the company (<code>BOCO</code>) and order number (<code>BORDNO</code>).</li> <li>Validates the header record:<ul> <li>Skips records marked as deleted (<code>BODEL = 'D'</code>) or with an error for EDI orders (<code>BODEL = 'E'</code> for <code>JB20</code>).</li> <li>Checks the order process status (<code>BOORPR = 'H'</code>) to skip pick ticket printing (<code>MG34</code>).</li> </ul> </li> <li>Retrieves additional header data, such as customer number (<code>BOCUST</code>), ship-to number (<code>BOSHIP</code>), freight processor code (<code>BOFPCD</code>), and shipment reference number (<code>BOSRN</code>).</li> <li>For multi-load orders (<code>BOMULO = 'Y'</code>), processes multiple shipments using <code>KYFS</code> (from SRN) and <code>KYTS</code> (to SRN) to handle unique order-SRN combinations (<code>JB07</code>, <code>JB09</code>).</li> </ol> <p>Purpose: Identifies valid orders and gathers header information for BOL printing.</p> <ol> <li>Customer and Shipment Data Retrieval:</li> <li>Chains to <code>ARCUST</code> and <code>SHIPTO</code> to retrieve customer name (<code>ARNAME</code>) and ship-to address (<code>CSNAME</code>, <code>CSADR1</code>, etc.).</li> <li>Calls <code>MSHPADR</code> to get compressed ship-to address (<code>DC01</code>, <code>JB23</code>).</li> <li>Retrieves freight processor details from <code>BBFRPR</code> (<code>JB05</code>) and checks if the processor is internal or external (<code>JB24</code>).</li> <li>For EDI 856 orders (<code>JB13</code>), chains to <code>EDICUS</code>, <code>BBASNH</code>, <code>BBASND</code>, and <code>BBASNM</code> to retrieve shipper details and product descriptions.</li> <li>Retrieves routing information from <code>TRRTCD</code> and container details from <code>GSCONT</code>, <code>BICONT</code>, and <code>GSCNTR1</code> (<code>JK02</code>).</li> </ol> <p>Purpose: Collects customer, ship-to, freight processor, and routing data for inclusion on the BOL.</p> <ol> <li>Detail Line Processing:</li> <li>Reads detail records from <code>BBTRAN</code> (NS 02) for order lines, checking for non-deleted records (<code>BDDEL \u2260 'D'</code>).</li> <li>Retrieves product details from <code>GSTABL</code> (or <code>GSPROD</code> for <code>JK04</code>) for descriptions (<code>TBDESC</code>, <code>TBSHDS</code>), hazmat codes (<code>TBSMSG</code>), and gravity (<code>TBGRAV</code>).</li> <li>Determines container size based on container type (<code>BDCNTR</code>) from <code>GSCNTR1</code> (<code>JK02</code>, <code>JB18</code>):<ul> <li>If bulk, uses unit of measure (<code>BDIUM</code>) as size.</li> <li>If packaged, uses container short description (<code>TBSHDS</code>).</li> </ul> </li> <li>Calculates weights and gallons:<ul> <li>Gross weight (<code>BDGVWT</code>), net gallons (<code>BDNGAL</code>), and product weight (<code>BDPRWT</code>) are retrieved or calculated.</li> <li>Calls <code>MINLBGL1</code> (<code>JB26</code>) to convert between pounds and gallons, replacing earlier logic (<code>JB02</code>).</li> </ul> </li> <li>Handles hazmat information from <code>GSHAZM</code> (<code>HMSHD1</code>\u2013<code>HMSHD4</code>) for printing safety messages.</li> </ol> <p>Purpose: Processes order line items, including product details, weights, and hazmat information for BOL details.</p> <ol> <li>Marks and Accessorials Processing:</li> <li>Reads marks records from <code>BBOTA1</code> (for <code>U5</code>) or <code>BBBLA1</code> (for <code>U6</code>) for order remarks, invoice remarks, dispatch remarks, and BOL remarks (<code>BXBMK1</code>\u2013<code>BXBMK4</code>).</li> <li>Filters marks based on print flags (<code>BAPICK</code>, <code>BABOL</code>, <code>BADSPH</code> for dispatch marks, <code>JB17</code>).</li> <li>Processes freight processor address (<code>BXFRNM</code>, <code>BXFRA1</code>\u2013<code>BXFRA3</code>) for printing on BOLs when applicable (<code>JB06</code>, <code>JB24</code>).</li> </ol> <p>Purpose: Includes order-specific remarks and freight processor details on the BOL.</p> <ol> <li>BOL Printing:</li> <li>Outputs to <code>LIST</code> (regular BOL) and <code>LIST1</code> (temporary PDF spooling, <code>MG38</code>) using exception output records (<code>PRTHDG</code>, <code>PRTDTL</code>, <code>PRTRIL</code>, <code>PRTEID</code>, <code>PRTTF</code>, etc.).</li> <li>Prints header information:<ul> <li>Company address (<code>BCADR1</code>, <code>BCADR2</code> from <code>BICONT</code>, <code>MG25</code>).</li> <li>Order number with SRN (<code>BORDNOZ</code>\u2013<code>SRN</code>, <code>JB07</code>, <code>JB09</code>).</li> <li>Customer, ship-to, and freight processor details.</li> <li>Batch number (<code>BOFAC1</code>\u2013<code>BOFAC2</code>, <code>MG29</code>).</li> <li>Routing codes (<code>BORTCD</code>, <code>BORTG1</code>\u2013<code>BORTG3</code>, <code>JB27</code>).</li> </ul> </li> <li>Prints detail lines:<ul> <li>Quantity (<code>BDQTY</code>), unit of measure (<code>PRTUM</code>), hazmat indicators (<code>HAZMAT</code>), product description (<code>PRDSC1</code>, <code>PRDSC2</code>), and gross weight (<code>GROSWTM</code>).</li> <li>For railcar BOLs (<code>U6</code>), includes capacity (<code>BDCACAJ</code>), outage (<code>BDOUTAJ</code>), temperature (<code>BDTEMPZ</code>), and net gallons (<code>BDNGALJ</code>, <code>JB21</code>).</li> <li>For EDI 856 orders, prints vendor part (<code>SDVPPT</code>), buyer part (<code>SDBYPT</code>), and custom descriptions (<code>SDDSC1</code>, <code>SDDSC2</code>, <code>JB13</code>).</li> </ul> </li> <li>Prints footer information:<ul> <li>Freight terms (<code>MSG,1</code> for collect, <code>MSG,2</code> for prepaid, <code>MSG,21</code> for prepaid+, <code>MSG,22</code> for third party, <code>MSG,24</code> for calculated freight, <code>JB40</code>).</li> <li>Hazmat messages (<code>MSG,3</code>, <code>MSG,4</code> for dyed diesel/kero, <code>MSG,6</code>, <code>MSG,7</code> for DOT/CHEMTREC).</li> <li>Shipper name and address (<code>SHPRNM</code>, <code>SHPRA1</code>, etc., <code>JB13</code>).</li> <li>Page number (<code>PAGE</code>, <code>JB12</code>).</li> </ul> </li> </ol> <p>Purpose: Generates formatted BOLs with all required header, detail, and footer information.</p> <ol> <li>File Updates:</li> <li>Updates <code>BBORTO</code> or <code>BBORTOB</code> with the BOL printed flag (<code>BOPBOL = 'Y'</code>) and SRN (<code>HSRN</code>, <code>JB07</code>).</li> <li>Updates <code>BBSRNH</code> with the printed BOL indicator (<code>SRPBOL = 'Y'</code>, <code>JB15</code>) for tracking.</li> <li>Uses exception output (<code>UPDTE</code>, <code>UPDSRN</code>) to update these files.</li> </ol> <p>Purpose: Records that the BOL has been printed and updates shipment tracking.</p> <ol> <li>Multi-Load and Overflow Handling:</li> <li>For multi-load orders (<code>BOMULO = 'Y'</code>), prints additional BOLs (<code>PRTHD2</code>, <code>PRTDT2</code>, <code>PRTRI2</code>, <code>PRTTF2</code>) with consistent fields (<code>JB19</code>).</li> <li>Handles overflow formatting to avoid printing unnecessary sections (e.g., freight processor for EDI orders, <code>JB19</code>).</li> </ol> <p>Purpose: Ensures all shipments in a multi-load order are printed correctly.</p> <ol> <li>EDI 856 (Viscosity) Handling:</li> <li>Checks <code>EDICUS</code> for customers with EDI 856 orders (<code>EIIBOB = 'O'</code>) and processes data from <code>BBASNH</code>, <code>BBASND</code>, and <code>BBASNM</code> for custom product descriptions and FOB details (<code>JB13</code>).</li> <li>Suppresses certain fields (e.g., freight processor address) for EDI orders (<code>JB19</code>).</li> </ol> <p>Purpose: Customizes BOL output for Viscosity orders received via EDI.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. BOL Type Differentiation:    - Regular BOLs are printed at order pick list time (<code>U5</code>).    - Railcar BOLs are printed at railcar BOL time (<code>U6</code>), with specific fields like car capacity, outage, and temperature (<code>JB21</code>).</p> <ol> <li>Order Validation:</li> <li>Skips deleted orders (<code>BODEL = 'D'</code>) or EDI orders with errors (<code>BODEL = 'E'</code>, <code>JB20</code>).</li> <li> <p>Skips pick ticket printing for orders with <code>BOORPR = 'H'</code> (<code>MG34</code>).</p> </li> <li> <p>Multi-Load Orders:</p> </li> <li>Uses order number and SRN (<code>BORDNO</code>\u2013<code>SRN</code>) to uniquely identify shipments (<code>JB07</code>, <code>JB09</code>).</li> <li> <p>Prints extra BOLs for multi-load orders with consistent formatting (<code>JB19</code>).</p> </li> <li> <p>Freight Processor Handling:</p> </li> <li>Prints freight processor address (<code>FPNAME</code>, <code>FPADR1</code>, etc.) only for external processors or customer/ARG third-party processors (<code>JB06</code>, <code>JB24</code>).</li> <li> <p>Uses <code>FREIGHT ARRANGED BY</code> instead of <code>THIRD PARTY FRT PROCESSOR</code> for clarity (<code>JB11</code>).</p> </li> <li> <p>Container and Size Logic:</p> </li> <li>Determines size based on container type (<code>BDFLCD</code>): bulk uses unit of measure, packaged uses container description (<code>JB18</code>).</li> <li> <p>Does not require <code>GSUMCV</code> records for units like <code>KG</code>, <code>LI</code>, <code>ML</code>, <code>OZ</code> (<code>JB30</code>, <code>JB31</code>).</p> </li> <li> <p>Weight and Gallon Conversion:</p> </li> <li>Calls <code>MINLBGL1</code> to calculate gallons or pounds directly, replacing earlier conversion logic (<code>JB02</code>, <code>JB26</code>).</li> <li> <p>Supports non-fluid products by adjusting calculations (<code>VV04</code>).</p> </li> <li> <p>Hazmat and Messaging:</p> </li> <li>Prints hazmat messages (<code>MSG,3</code>, <code>MSG,4</code>) for dyed diesel/kero only when applicable (<code>JB14</code>).</li> <li>Includes DOT emergency response and CHEMTREC messages (<code>MSG,6</code>, <code>MSG,7</code>) when required.</li> <li> <p>Adds specific messages for PP destinations (<code>MSG,23</code>, <code>MG36</code>).</p> </li> <li> <p>Formatting and Layout:</p> </li> <li>Adjusts field positions to prevent printing off the page (<code>JB16</code>).</li> <li>Removes blank lines for railcar BOL overflow (<code>JB39</code>).</li> <li> <p>Prints compressed addresses via <code>MSHPADR</code> (<code>DC01</code>, <code>JB23</code>).</p> </li> <li> <p>Data Integrity:</p> </li> <li>Updates <code>BBORTO</code>/<code>BBORTOB</code> and <code>BBSRNH</code> to track BOL printing (<code>JB15</code>).</li> <li> <p>Uses system date (<code>UDATE</code>) for printing and updates (<code>MG42</code>).</p> </li> <li> <p>Railcar-Specific Rules:</p> <ul> <li>Prints car capacity, outage, and temperature only when capacity is entered (<code>JB21</code>).</li> <li>Includes railcar-specific messages like demurrage charges (<code>MSG,19</code>, <code>MSG,20</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. BBTRAN (IP, 512 bytes): Order header and detail records. 2. BBOTHS1 (IF, 512 bytes, <code>U5</code>): Order header for regular BOLs. 3. BBOTDS1 (UF, 512 bytes): Order detail for regular BOLs. 4. BBBLHS1 (IF, 512 bytes, <code>U6</code>): Order header for railcar BOLs. 5. BBORTO (UC, 512 bytes, <code>U5</code>): Order header update for regular BOLs. 6. BBORTOB (UC, 512 bytes, <code>U6</code>): Order header update for railcar BOLs. 7. BBOTA1 (IF, 512 bytes, <code>U5</code>): Accessorial/marks for regular BOLs. 8. BBBLA1 (IF, 512 bytes, <code>U6</code>): Accessorial/marks for railcar BOLs. 9. BBORCL (IC, 256 bytes): Order close data. 10. ARCUST (IC, 384 bytes): Customer master data. 11. ARCUPR (IF, 80 bytes): Customer product data, updated to include container type (<code>JB33</code>). 12. SHIPTO (IC, 2048 bytes): Ship-to address data. 13. GSCONT (IC, 512 bytes): Container data. 14. BICONT (IC, 256 bytes): Billing container data. 15. GSTABL (IC, 256 bytes): General table for product codes, descriptions, etc. 16. GSCTWT (IC, 64 bytes): Container weight data, updated for larger gallon field (<code>JB43</code>). 17. GSCTUM (IC, 64 bytes): Unit of measure conversion. 18. GSUMCV (IC, 64 bytes): Unit conversion, optional for certain units (<code>JB30</code>, <code>JB31</code>). 19. GSHAZM (IC, 384 bytes): Hazmat data. 20. BBFRPR (IF, 256 bytes): Freight processor data (<code>JB05</code>). 21. TRRTCD (IC, 324 bytes): Routing code data. 22. BOLEDIY (UF, 386 bytes, <code>U6</code>): EDI order data. 23. BBSRNH (UF, 128 bytes): Shipment reference number tracking, updated with BOL print flag (<code>JB15</code>). 24. SHPADR (IF, 448 bytes): Shipment address data (<code>JB12</code>). 25. EDICUS (IF, 384 bytes): EDI customer data for 856 orders (<code>JB13</code>). 26. BBASNH (IF, 512 bytes): Advanced shipping notice header (<code>JB13</code>). 27. BBASND (IF, 512 bytes): Advanced shipping notice detail (<code>JB13</code>). 28. BBASNM (IF, 256 bytes): Advanced shipping notice marks (<code>JB13</code>). 29. GSCNTR1 (IF, 512 bytes): Container data with alpha key (<code>JK02</code>). 30. GSPRCT (IF, 256 bytes): Product cross-reference for grease descriptions (<code>MG35</code>). 31. BBCAID (IF, 200 bytes): Carrier ID data (<code>JK03</code>). 32. GSPROD (IF, 512 bytes): Product data, replacing <code>GSTABL</code> for product codes (<code>JK04</code>). 33. LIST (O, 132 bytes): Primary printer file for BOL output. 34. LIST1 (O, 132 bytes): Temporary printer file for PDF spooling (<code>MG38</code>).</p> <p>Key Fields: - <code>BOCO</code> (company), <code>BORDNO</code> (order number), <code>BOSRN</code> (shipment reference number), <code>BOCUST</code> (customer), <code>BOSHIP</code> (ship-to), <code>BOFPCD</code> (freight processor), <code>BDQTY</code> (quantity), <code>BDPROD</code> (product), <code>BDCNTR</code> (container), <code>BDGVWT</code> (gross weight), <code>BDNGAL</code> (net gallons).</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program explicitly calls the following external programs: 1. MSHPADR (<code>DC01</code>, <code>JB23</code>):    - Returns compressed ship-to address, including country. 2. MINLBGL1 (<code>JB26</code>):    - Calculates gallons or pounds for weight conversions, replacing <code>MINLBGL</code> (<code>JB02</code>).</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB150</code> RPG program is a critical component for printing Bills of Lading, handling both regular and railcar BOLs with extensive customization for EDI 856 orders, multi-load shipments, and freight processor details. It: - Reads order header, detail, and marks records from multiple files. - Validates orders, retrieves customer/shipment data, and calculates weights/gallons. - Prints formatted BOLs with headers, details, hazmat messages, and freight terms. - Updates tracking files (<code>BBORTO</code>, <code>BBORTOB</code>, <code>BBSRNH</code>) to record BOL printing. - Supports numerous business rules for formatting, validation, and special cases (e.g., EDI, railcar, non-fluid products).</p> <p>Files Used: 33 files, including <code>BBTRAN</code>, <code>BBOTHS1</code>, <code>BBBLHS1</code>, <code>BBORTO</code>, <code>BBORTOB</code>, <code>BBSRNH</code>, <code>ARCUST</code>, <code>SHIPTO</code>, and others. External Programs: <code>MSHPADR</code>, <code>MINLBGL1</code>.</p> <p>If you need further details (e.g., specific field mappings, output format examples, or OCL interaction), let me know!</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20OCL/","title":"BB150P OCL","text":"<p>The provided document is an OCL (Operation Control Language) program named <code>BB150P.ocl36.txt</code>, used for controlling the execution of an Order Entry Bills of Lading Print process, likely on an IBM System/36 or AS/400 system. OCL is a scripting language used to define job control procedures, manage file operations, and invoke programs. Below, I\u2019ll explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20OCL/#process-steps-of-the-bb150p-ocl-program","title":"Process Steps of the BB150P OCL Program","text":"<p>The OCL program is designed to manage the printing of Bills of Lading (BOL) for order processing, with logic to handle batch selection, concurrency checks, and program execution. The steps are broken down based on the program\u2019s structure and flow:</p> <ol> <li>Concurrency Checks:</li> <li>The program checks if any of the processes <code>BB150</code>, <code>BB150P</code>, <code>BB152</code>, or <code>BB152P</code> are already active (i.e., running on another workstation).</li> <li>If any of these processes are active:<ul> <li>A message is displayed: \"IBOX BILL OF LADINGS CREATION IS BEING RUN BY ANOTHER WORKSTATION\" and \"PLEASE TRY AGAIN IN A FEW MINUTES...\".</li> <li>The program pauses, prompting the user to reply with <code>0</code> to cancel the job.</li> <li>If the user replies with <code>0</code>, the job is canceled (<code>CANCEL</code>).</li> </ul> </li> </ol> <p>Purpose: Prevents multiple instances of the same or related processes from running concurrently, avoiding data conflicts or resource contention.</p> <ol> <li>Initialization:</li> <li>The program sets the switch to <code>00000000</code> (resets all switches).</li> <li>Clears all local variables with <code>LOCAL BLANK-*ALL</code>.</li> <li>Calls <code>GSY2K</code> (likely a utility or system initialization program, possibly for Y2K compliance or date handling).</li> </ol> <p>Purpose: Ensures a clean state before proceeding with the main logic.</p> <ol> <li>Order Batch Selection:</li> <li>Sets local variables for user interface and configuration:<ul> <li><code>OFFSET-470</code>: Stores <code>?13?</code> (likely a parameter for batch type or mode).</li> <li><code>OFFSET-494</code>: Stores <code>?USER?</code> (the user ID).</li> <li><code>OFFSET-502</code>: Stores <code>?WS?</code> (workstation ID).</li> <li><code>OFFSET-504</code>: Sets the value <code>B</code> (possibly indicating Bills of Lading mode).</li> <li><code>OFFSET-60</code>: Sets a display message based on the value of <code>?13?</code>:</li> <li>Default: <code>'*   PRINT BILLS OF LADING    *'</code>.</li> <li>If <code>?13?</code> is not blank: <code>'*    PRINT BILLS OF LADING   *'</code>.</li> <li>If <code>?13?</code> is <code>PM</code>: <code>'* PRODUCT MOVES BOL CREATION *'</code>.</li> <li>If <code>?13?</code> is <code>PP</code>: <code>'* VISCOSITY ASN BOL CREATION *'</code>.</li> </ul> </li> <li>Sets switch 1 to allow batch deletion (<code>SWITCH 0XXXXXXX</code>).</li> <li>Loads and runs the program <code>BB001</code>:<ul> <li>Opens files <code>BBBTCH</code> and <code>BBBTCHX</code> (both labeled <code>?9?BBBTCH</code>, accessed with <code>DISP-SHR</code> for shared access).</li> </ul> </li> <li>Checks if the condition <code>?L'121,6'?</code> equals <code>CANCEL</code>. If true, the program returns (exits).</li> <li>Evaluates and stores the value of <code>?L'490,2'?</code> into variable <code>P20</code>.</li> </ol> <p>Purpose: Allows the user to select a batch for processing Bills of Lading, with different modes (e.g., standard BOL, Product Moves, or Viscosity ASN). The <code>BB001</code> program likely handles batch selection or validation.</p> <ol> <li>Order Entry Bills of Lading Selection:</li> <li>Loads and runs the program <code>BB150P</code>:<ul> <li>Opens files:</li> <li><code>BICONT</code> (labeled <code>?9?BICONT</code>, accessed with <code>DISP-SHRRM</code> for shared read/modify access).</li> <li><code>BBORTR</code> (labeled <code>?9?BBOR?20?</code>, where <code>?20?</code> is likely the value of <code>P20</code> from the previous step, accessed with <code>DISP-SHRRM</code>).</li> </ul> </li> <li>If <code>SWITCH8-1</code> is set (indicating cancellation):<ul> <li>Displays the message: \"PROCEDURE IS CANCELLED\".</li> <li>Jumps to the <code>REL</code> (Release Batch) tag.</li> </ul> </li> <li>If <code>?L'166,1'?</code> equals <code>Y</code>:<ul> <li>Submits the <code>BB150</code> job to the job queue (<code>JOBQ ?CLIB?,BB150,*ALL</code>).</li> </ul> </li> <li>Otherwise:<ul> <li>Runs <code>BB150 *ALL</code> directly.</li> <li>Jumps to the <code>END</code> tag.</li> </ul> </li> </ol> <p>Purpose: Executes the core Bills of Lading processing logic via <code>BB150P</code> or <code>BB150</code>, depending on conditions. The <code>BB150P</code> program likely handles the selection or preparation of BOL data, while <code>BB150</code> may perform the actual printing or processing.</p> <ol> <li>Release Batch:</li> <li>At the <code>REL</code> tag:<ul> <li>Sets a local variable at <code>OFFSET-475</code> with the value <code>?F'A,?9?BBOR?20?'?</code> (likely constructing a file name or parameter for the batch release).</li> <li>Loads and runs the program <code>BB005</code>:</li> <li>Opens the file <code>BBBTCH</code> (labeled <code>?9?BBBTCH</code>, accessed with <code>DISP-SHR</code>).</li> </ul> </li> <li> <p>Purpose: Releases the selected batch, possibly updating batch status or cleaning up after processing.</p> </li> <li> <p>End of Program:</p> </li> <li>At the <code>END</code> tag:<ul> <li>Resets the switch to <code>00000000</code>.</li> <li>Clears all local variables with <code>LOCAL BLANK-*ALL</code>.</li> </ul> </li> </ol> <p>Purpose: Ensures a clean exit, resetting the environment for the next run.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. GSY2K: Likely a system utility program, possibly for date handling or Y2K compliance. 2. BB001: Handles order batch selection, likely presenting a user interface or validating batch data. 3. BB150P: Manages the selection or preparation of Bills of Lading data. 4. BB150: Executes the main Bills of Lading processing or printing logic. 5. BB005: Handles batch release, possibly updating batch status or performing cleanup.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (referred to as \"tables\" in some contexts, though they are physical files on the system): 1. BBBTCH: Batch file, labeled <code>?9?BBBTCH</code>, used in batch selection and release (<code>DISP-SHR</code>). 2. BBBTCHX: An alternate or indexed version of the batch file, also labeled <code>?9?BBBTCH</code>, used in batch selection (<code>DISP-SHR</code>). 3. BICONT: Control file, labeled <code>?9?BICONT</code>, used in BOL selection (<code>DISP-SHRRM</code>). 4. BBORTR: Order transaction file, labeled <code>?9?BBOR?20?</code> (where <code>?20?</code> is a dynamic parameter from <code>P20</code>), used in BOL selection (<code>DISP-SHRRM</code>).</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20OCL/#summary","title":"Summary","text":"<p>The <code>BB150P</code> OCL program orchestrates the printing of Bills of Lading by: 1. Checking for concurrent processes to avoid conflicts. 2. Initializing the environment and selecting a batch via <code>BB001</code>. 3. Processing BOL data using <code>BB150P</code> and <code>BB150</code>, with conditional job queue submission. 4. Releasing the batch using <code>BB005</code>. 5. Cleaning up and exiting.</p> <p>The program uses a combination of user inputs (<code>?13?</code>, <code>?USER?</code>, <code>?WS?</code>), dynamic file naming (<code>?9?</code>, <code>?20?</code>), and conditional logic to manage the workflow. The files <code>BBBTCH</code>, <code>BBBTCHX</code>, <code>BICONT</code>, and <code>BBORTR</code> store batch and order data, while the programs <code>GSY2K</code>, <code>BB001</code>, <code>BB150P</code>, <code>BB150</code>, and <code>BB005</code> handle specific processing tasks.</p> <p>If you need further clarification or analysis (e.g., specific logic flows or file structures), let me know!</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/","title":"BB150P RPG36","text":"<p>The <code>BB150P.rpg36.txt</code> RPG program is a prompt program for the Bill of Lading (BOL) printing process, designed to run on an IBM System/36 or AS/400 environment. It is called by the main OCL (Operation Control Language) procedure to gather and validate user input before invoking the main BOL printing program (<code>BB150</code>). The program handles user input for company selection, order numbers, and shipment reference numbers (SRNs) for single and multi-load orders, ensuring valid data is passed to <code>BB150</code>. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/#process-steps-of-the-bb150p-rpg-program","title":"Process Steps of the BB150P RPG Program","text":"<p>The <code>BB150P</code> program serves as an interactive interface to collect and validate input parameters for BOL printing. It uses a workstation file (<code>SCREEN</code>) to prompt the user and validates inputs against data in the <code>BICONT</code> and <code>BBORTR</code> files. The program also supports multi-load orders by validating SRNs (<code>JB01</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization:</li> <li>The program initializes by setting up the workstation file (<code>SCREEN</code>) for user interaction and clearing error message fields (<code>MSG35</code>) via the <code>EDIT</code> subroutine.</li> <li>It sets indicators (<code>01</code>, <code>U8</code>, <code>LR</code>) to control program flow and ensure proper termination.</li> <li>If indicator <code>10</code> is off and <code>11</code> is off, it calls the <code>ONETIM</code> subroutine to set default values for company (<code>KYCO</code>), selection type (<code>KYALSL</code>), job queue (<code>KYJOBQ</code>), and copy counts (<code>KYCOPY</code>, <code>KYCOPB</code>).</li> <li>Default values include:<ul> <li><code>KYCO = '10'</code> (company code).</li> <li><code>KYALSL = 'SEL'</code> (selective order processing).</li> <li><code>KYJOBQ = 'N'</code> (no job queue).</li> <li><code>KYCOPY = 01</code>, <code>KYCOPB = 01</code> (one copy for each output).</li> </ul> </li> </ol> <p>Purpose: Prepares the program environment and sets default parameters for first-time execution.</p> <ol> <li>User Input Collection:</li> <li>Displays the <code>SCREEN</code> file (format <code>BB150PFM</code>) to prompt the user for:<ul> <li>Company code (<code>KYCO</code>, positions 1\u20132).</li> <li>Selection type (<code>KYALSL</code>, positions 3\u20135, either <code>ALL</code> or <code>SEL</code>).</li> <li>Up to 10 order numbers (<code>KYORD1</code>\u2013<code>KYORD0</code>, positions 6\u201365).</li> <li>Job queue flag (<code>KYJOBQ</code>, position 66, <code>Y</code>/<code>N</code>/<code>blank</code>).</li> <li>Copy counts (<code>KYCOPY</code>, positions 67\u201368; <code>KYCOPB</code>, positions 69\u201370).</li> <li>From and to SRNs (<code>KYFS</code>, <code>KYTS</code>, positions 71\u2013100 and 101\u2013130 for multi-load orders, <code>JB01</code>).</li> </ul> </li> <li>Reads user input into the <code>SCREEN</code> file (NS 01) and stores it in the Local Data Area (LDA, positions 101\u2013300) for coordination with <code>BB150</code> and <code>BB152P</code>.</li> </ol> <p>Purpose: Collects user-specified parameters for BOL printing.</p> <ol> <li>Input Validation (EDIT Subroutine):</li> <li>Company Code Validation:<ul> <li>Chains to <code>BICONT</code> using <code>KYCO</code> to verify the company code exists.</li> <li>If invalid, sets indicator <code>20</code> and displays error message <code>MSG,2</code> (\"INVALID COMPANY #\").</li> </ul> </li> <li>Selection Type Validation:<ul> <li>Checks <code>KYALSL</code> for <code>ALL</code> or <code>SEL</code>.</li> <li>If neither, sets indicator <code>20</code> and displays error message <code>MSG,1</code> (\"INVALID SELECTION ALL / SEL\").</li> <li>If <code>ALL</code>, skips order number validation and proceeds to job queue checks.</li> </ul> </li> <li>Order Number Validation:<ul> <li>For <code>KYALSL = 'SEL'</code>, iterates through the 10 order number fields (<code>KYO,1</code> to <code>KYO,10</code>).</li> <li>For each non-zero order number:</li> <li>Constructs an 11-character key (<code>KY11</code>) by combining <code>KYCO</code> and the order number (<code>KYO,X</code>) with trailing zeros (<code>000</code>).</li> <li>Chains to <code>BBORTR</code> to verify the order exists.</li> <li>If invalid, sets indicator <code>20</code> and displays error message <code>MSG,3</code> (\"INVALID ORDER #\").</li> </ul> </li> <li>SRN Validation for Multi-Load Orders (<code>JB01</code>):<ul> <li>Checks <code>BOMULO</code> (multi-load flag) in <code>BBORTR</code>:</li> <li>Single-Load Orders (<code>BOMULO \u2260 'Y'</code>):<ul> <li>Ensures both <code>KYFS,X</code> and <code>KYTS,X</code> are zero.</li> <li>If either is non-zero, sets indicator <code>20</code> and displays error messages <code>MSG,4</code> (\"FROM SRN MUST BE ZERO\") or <code>MSG,5</code> (\"TO SRN MUST BE ZERO\").</li> </ul> </li> <li>Multi-Load Orders (<code>BOMULO = 'Y'</code>):<ul> <li>Ensures both <code>KYFS,X</code> and <code>KYTS,X</code> are either zero or both keyed.</li> <li>If one is zero and the other is not, sets indicator <code>20</code> and displays error message <code>MSG,6</code> (\"BOTH FROM / TO SRN MUST BE KEYED\").</li> <li>Checks that <code>KYFS,X</code> and <code>KYTS,X</code> do not exceed the total loads (<code>BOTOLO</code>).</li> <li>If exceeded, sets indicator <code>20</code> and displays error message <code>MSG,7</code> (\"FROM/TO MUST BE LESS THAN LOADS\").</li> <li>Ensures <code>KYFS,X</code> is not greater than <code>KYTS,X</code>.</li> <li>If true, sets indicator <code>20</code> and displays error message <code>MSG,8</code> (\"FROM SRN MUST BE LESS THAN TO SRN\").</li> </ul> </li> </ul> </li> <li>Job Queue Validation:<ul> <li>Checks <code>KYJOBQ</code> for valid values (<code>Y</code>, <code>N</code>, or blank).</li> <li>If invalid, sets indicator <code>20</code> but does not display a specific error message (logic assumes program termination).</li> </ul> </li> <li>Copy Count Validation:<ul> <li>If <code>KYCOPY</code> is zero, sets it to <code>01</code>.</li> <li>If <code>KYCOPB</code> is zero, sets it to <code>01</code>.</li> </ul> </li> </ol> <p>Purpose: Validates user inputs to ensure they are correct before passing them to <code>BB150</code>.</p> <ol> <li>Output and Program Termination:</li> <li>If validation fails (indicator <code>20</code> is on), redisplays the <code>SCREEN</code> with the error message (<code>MSG35</code>) and input fields for correction.</li> <li>If validation succeeds, writes validated inputs to the LDA and sets indicator <code>11</code> to indicate completion.</li> <li>Outputs to <code>SCREEN</code> (format <code>BB150PFM</code>) with fields:<ul> <li><code>KYCO</code>, <code>KYALSL</code>, <code>KYORD1</code>\u2013<code>KYORD0</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCOPB</code>, <code>KYFS</code>, <code>KYTS</code>, and <code>MSG35</code>.</li> </ul> </li> <li>Sets <code>U8</code> and <code>LR</code> (Last Record) indicators to terminate the program and pass control back to the OCL.</li> </ol> <p>Purpose: Communicates validated parameters to the main program or prompts the user to correct errors.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>BB150P</code> program enforces the following business rules: 1. Company Code:    - Must exist in the <code>BICONT</code> file.    - Invalid company codes trigger an error message (\"INVALID COMPANY #\"). 2. Selection Type:    - Must be <code>ALL</code> (process all orders for the company) or <code>SEL</code> (process specific orders).    - Invalid selections trigger an error message (\"INVALID SELECTION ALL / SEL\"). 3. Order Numbers:    - For <code>SEL</code>, at least one order number (<code>KYO,1</code>\u2013<code>KYO,10</code>) must be valid and exist in <code>BBORTR</code>.    - Invalid order numbers trigger an error message (\"INVALID ORDER #\"). 4. Shipment Reference Numbers (SRNs) (<code>JB01</code>):    - For single-load orders (<code>BOMULO \u2260 'Y'</code>):      - Both <code>KYFS</code> and <code>KYTS</code> must be zero.      - Non-zero values trigger errors (\"FROM SRN MUST BE ZERO\" or \"TO SRN MUST BE ZERO\").    - For multi-load orders (<code>BOMULO = 'Y'</code>):      - Both <code>KYFS</code> and <code>KYTS</code> must be zero or both must be keyed.      - Non-zero SRNs must not exceed the total loads (<code>BOTOLO</code>).      - <code>KYFS</code> must not be greater than <code>KYTS</code>.      - Violations trigger errors (\"BOTH FROM / TO SRN MUST BE KEYED\", \"FROM/TO MUST BE LESS THAN LOADS\", or \"FROM SRN MUST BE LESS THAN TO SRN\"). 5. Job Queue:    - Must be <code>Y</code>, <code>N</code>, or blank.    - Invalid values prevent program continuation. 6. Copy Counts:    - <code>KYCOPY</code> and <code>KYCOPB</code> default to <code>01</code> if zero, ensuring at least one copy is printed. 7. LDA Coordination:    - Input parameters are stored in the LDA (positions 101\u2013300) to ensure consistency with <code>BB150</code> and <code>BB152P</code>.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. SCREEN (CP, 500 bytes, WORKSTN):    - Workstation file for user input/output, using format <code>BB150PFM</code>.    - Fields: <code>KYCO</code>, <code>KYALSL</code>, <code>KYORD1</code>\u2013<code>KYORD0</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCOPB</code>, <code>KYFS</code>, <code>KYTS</code>, <code>MSG35</code>. 2. BICONT (IC, 256 bytes):    - Billing container file, used to validate the company code (<code>KYCO</code>). 3. BBORTR (IC, 512 bytes):    - Order transaction file, used to validate order numbers (<code>KYO,X</code>) and check multi-load status (<code>BOMULO</code>, <code>BOTOLO</code>).</p> <p>Key Fields: - <code>KYCO</code> (company code), <code>KYALSL</code> (selection type), <code>KYORD1</code>\u2013<code>KYORD0</code> (order numbers), <code>KYFS</code>/<code>KYTS</code> (from/to SRNs), <code>KYJOBQ</code> (job queue), <code>KYCOPY</code>/<code>KYCOPB</code> (copy counts), <code>BOMULO</code> (multi-load flag), <code>BOTOLO</code> (total loads).</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>BB150P</code> program does not explicitly call any external programs. It is designed to collect and validate input, then pass control back to the OCL, which likely invokes <code>BB150</code> to perform the actual BOL printing.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/BB150P%20RPG36/#summary","title":"Summary","text":"<p>The <code>BB150P</code> RPG program is a prompt and validation program that: - Collects user input for company code, selection type, order numbers, SRNs, job queue, and copy counts via the <code>SCREEN</code> workstation file. - Validates inputs against <code>BICONT</code> (company) and <code>BBORTR</code> (orders), with specific logic for single and multi-load orders (<code>JB01</code>). - Enforces business rules for valid company codes, selection types, order numbers, SRNs, and copy counts. - Stores validated inputs in the LDA for use by <code>BB150</code> and potentially <code>BB152P</code>. - Displays error messages and redisplays the screen if validation fails.</p> <p>Files Used: <code>SCREEN</code>, <code>BICONT</code>, <code>BBORTR</code>. External Programs: None.</p> <p>If you need further details (e.g., specific field mappings, screen format details, or interaction with <code>BB150</code>), let me know!</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/","title":"Summary BB150P OCL","text":""},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#list-of-use-cases-implemented-by-bb150p-and-bb150-rpg-programs","title":"List of Use Cases Implemented by BB150P and BB150 RPG Programs","text":"<p>The <code>BB150P</code> and <code>BB150</code> RPG programs together implement a single primary use case in the IBM System/36 or AS/400 environment, focused on generating Bills of Lading (BOLs) for order shipments. Below is the identified use case:</p> <ol> <li>Generate Bills of Lading for Order Shipments:</li> <li>Description: This use case involves collecting user inputs for company, order numbers, and shipment reference numbers (SRNs), validating them, and generating formatted BOLs for printing. It supports both regular (order pick list time, <code>U5</code>) and railcar (railcar BOL time, <code>U6</code>) BOLs, including multi-load shipments and EDI 856 (Viscosity) orders. The process ensures accurate printing of customer, shipment, product, and freight details, while updating tracking files to record BOL generation.</li> <li>Components:<ul> <li><code>BB150P</code>: Prompts and validates user inputs (company, orders, SRNs, job queue, copy counts).</li> <li><code>BB150</code>: Processes validated inputs, retrieves data from multiple files, applies business logic, and prints BOLs to <code>LIST</code> and <code>LIST1</code> printer files.</li> </ul> </li> </ol> <p>No additional distinct use cases are implemented, as <code>BB150P</code> serves as the input/validation interface for <code>BB150</code>, which handles the core BOL printing logic.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#function-requirement-document-generate-bills-of-lading","title":"Function Requirement Document: Generate Bills of Lading","text":""},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#function-requirement-document-generate-bills-of-lading_1","title":"Function Requirement Document: Generate Bills of Lading","text":""},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#purpose","title":"Purpose","text":"<p>The <code>Generate Bills of Lading</code> function generates formatted Bills of Lading (BOLs) for order shipments, supporting regular and railcar BOLs, single and multi-load orders, and EDI 856 (Viscosity) orders. It validates inputs, retrieves order/customer data, calculates weights/gallons, and produces printed output while updating tracking files.</p>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>KYCO</code>, 2 chars): Identifies the company.</li> <li>Selection Type (<code>KYALSL</code>, 3 chars): <code>ALL</code> (all orders) or <code>SEL</code> (specific orders).</li> <li>Order Numbers (<code>KYORD1</code>\u2013<code>KYORD0</code>, up to 10, 6 digits each): Specific orders for <code>SEL</code>.</li> <li>From/To SRNs (<code>KYFS</code>, <code>KYTS</code>, 3 digits each): Shipment reference numbers for multi-load orders.</li> <li>Job Queue Flag (<code>KYJOBQ</code>, 1 char): <code>Y</code>, <code>N</code>, or blank for job queue processing.</li> <li>Copy Counts (<code>KYCOPY</code>, <code>KYCOPB</code>, 2 digits each): Number of BOL copies.</li> <li>BOL Type (<code>U5</code> or <code>U6</code>, implied): Regular (order pick list) or railcar BOL.</li> </ul>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed BOLs: Formatted output to <code>LIST</code> (primary) and <code>LIST1</code> (PDF spooling) printer files, including:</li> <li>Header: Company address, order number\u2013SRN, customer/ship-to details, freight processor, batch number, routing codes.</li> <li>Details: Product quantity, description, container size, gross weight, net gallons, hazmat indicators.</li> <li>Railcar-Specific: Car capacity, outage, temperature (for <code>U6</code>).</li> <li>EDI 856: Vendor/buyer part numbers, custom descriptions.</li> <li>Footer: Freight terms, hazmat messages, shipper details, page number.</li> <li>Updated Files: <code>BBORTO</code>/<code>BBORTOB</code> (BOL printed flag), <code>BBSRNH</code> (SRN tracking).</li> </ul>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify company code exists in <code>BICONT</code>.</li> <li>Ensure <code>KYALSL</code> is <code>ALL</code> or <code>SEL</code>.</li> <li>For <code>SEL</code>, validate order numbers in <code>BBORTR</code>.</li> <li>For single-load orders (<code>BOMULO \u2260 'Y'</code>), ensure <code>KYFS</code> and <code>KYTS</code> are zero.</li> <li>For multi-load orders (<code>BOMULO = 'Y'</code>), ensure <code>KYFS</code> and <code>KYTS</code> are both zero or both keyed, not exceeding total loads (<code>BOTOLO</code>), with <code>KYFS \u2264 KYTS</code>.</li> <li>Default <code>KYCOPY</code> and <code>KYCOPB</code> to <code>01</code> if zero.</li> <li> <p>Validate <code>KYJOBQ</code> as <code>Y</code>, <code>N</code>, or blank.</p> </li> <li> <p>Retrieve Order Data:</p> </li> <li>Read header from <code>BBOTHS1</code> (<code>U5</code>) or <code>BBBLHS1</code> (<code>U6</code>) based on company (<code>BOCO</code>) and order number (<code>BORDNO</code>).</li> <li>Skip deleted orders (<code>BODEL = 'D'</code>) or EDI errors (<code>BODEL = 'E'</code>).</li> <li>Skip pick ticket printing if <code>BOORPR = 'H'</code>.</li> <li>Retrieve customer (<code>ARCUST</code>), ship-to (<code>SHIPTO</code>), and freight processor (<code>BBFRPR</code>) details.</li> <li>For EDI 856, read <code>EDICUS</code>, <code>BBASNH</code>, <code>BBASND</code>, <code>BBASNM</code> for shipper/product data.</li> <li> <p>Get routing from <code>TRRTCD</code> and container details from <code>GSCONT</code>, <code>BICONT</code>, <code>GSCNTR1</code>.</p> </li> <li> <p>Process Order Details:</p> </li> <li>Read details from <code>BBTRAN</code> (non-deleted, <code>BDDEL \u2260 'D'</code>).</li> <li>Retrieve product data from <code>GSTABL</code>/<code>GSPROD</code> (description, hazmat, gravity).</li> <li>Determine container size from <code>GSCNTR1</code> (<code>BDCNTR</code>): bulk uses unit of measure (<code>BDIUM</code>), packaged uses short description (<code>TBSHDS</code>).</li> <li>Calculate weights/gallons using <code>MINLBGL1</code> (pounds \u2194 gallons conversion).</li> <li> <p>Read marks from <code>BBOTA1</code> (<code>U5</code>) or <code>BBBLA1</code> (<code>U6</code>) for remarks, filtering by print flags (<code>BAPICK</code>, <code>BABOL</code>, <code>BADSPH</code>).</p> </li> <li> <p>Generate BOL Output:</p> </li> <li>Print to <code>LIST</code>/<code>LIST1</code> using formats (<code>PRTHDG</code>, <code>PRTDTL</code>, <code>PRTRIL</code>, <code>PRTEID</code>, <code>PRTTF</code>).</li> <li>Include header (order\u2013SRN, customer, ship-to, freight processor), details (quantity, product, weight, gallons), railcar data (<code>U6</code>), EDI data, and footer (freight terms, hazmat messages).</li> <li>Handle multi-load orders with additional BOLs (<code>PRTHD2</code>, <code>PRTDT2</code>, etc.).</li> <li> <p>Suppress freight processor address for EDI orders.</p> </li> <li> <p>Update Tracking:</p> </li> <li>Set <code>BOPBOL = 'Y'</code> in <code>BBORTO</code>/<code>BBORTOB</code> and <code>SRPBOL = 'Y'</code> in <code>BBSRNH</code>.</li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input Validation:</li> <li>Company code must exist in <code>BICONT</code>.</li> <li>Selection type must be <code>ALL</code> or <code>SEL</code>.</li> <li>Order numbers must exist in <code>BBORTR</code> for <code>SEL</code>.</li> <li>Single-load orders require zero <code>KYFS</code>/<code>KYTS</code>.</li> <li>Multi-load orders require <code>KYFS</code>/<code>KYTS</code> both zero or both valid, \u2264 <code>BOTOLO</code>, with <code>KYFS \u2264 KYTS</code>.</li> <li><code>KYCOPY</code>/<code>KYCOPB</code> default to <code>01</code>.</li> <li> <p><code>KYJOBQ</code> must be <code>Y</code>, <code>N</code>, or blank.</p> </li> <li> <p>Order Processing:</p> </li> <li>Skip deleted orders (<code>BODEL = 'D'</code>) or EDI errors (<code>BODEL = 'E'</code>).</li> <li>Skip pick ticket printing if <code>BOORPR = 'H'</code>.</li> <li>Multi-load orders use order\u2013SRN for unique identification.</li> <li> <p>Freight processor address prints only for external/customer processors.</p> </li> <li> <p>Calculations:</p> </li> <li>Convert weights/gallons using <code>MINLBGL1</code> (e.g., <code>BDGVWT</code> \u2192 <code>BDNGAL</code>).</li> <li> <p>Container size: bulk (<code>BDIUM</code>), packaged (<code>TBSHDS</code> from <code>GSCNTR1</code>).</p> </li> <li> <p>Output Formatting:</p> </li> <li>Regular BOLs (<code>U5</code>) print at order pick list time, railcar BOLs (<code>U6</code>) at railcar BOL time.</li> <li>Include hazmat messages only for applicable products.</li> <li>EDI 856 orders include vendor/buyer part numbers and custom descriptions.</li> <li>Railcar BOLs include capacity, outage, and temperature when entered.</li> </ol>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Files (33): <code>BBTRAN</code>, <code>BBOTHS1</code>, <code>BBOTDS1</code>, <code>BBBLHS1</code>, <code>BBORTO</code>, <code>BBORTOB</code>, <code>BBOTA1</code>, <code>BBBLA1</code>, <code>BBORCL</code>, <code>ARCUST</code>, <code>ARCUPR</code>, <code>SHIPTO</code>, <code>GSCONT</code>, <code>BICONT</code>, <code>GSTABL</code>, <code>GSCTWT</code>, <code>GSCTUM</code>, <code>GSUMCV</code>, <code>GSHAZM</code>, <code>BBFRPR</code>, <code>TRRTCD</code>, <code>BOLEDIY</code>, <code>BBSRNH</code>, <code>SHPADR</code>, <code>EDICUS</code>, <code>BBASNH</code>, <code>BBASND</code>, <code>BBASNM</code>, <code>GSCNTR1</code>, <code>GSPRCT</code>, <code>BBCAID</code>, <code>GSPROD</code>, <code>LIST</code>, <code>LIST1</code>.</li> <li>Programs:</li> <li><code>MSHPADR</code>: Returns compressed ship-to address.</li> <li><code>MINLBGL1</code>: Converts pounds to gallons or vice versa.</li> </ul>"},{"location":"order-entry/BB150P%20Print%20BOL%27s/Summary%20BB150P%20OCL/#notes","title":"Notes","text":"<ul> <li>The function assumes inputs are provided programmatically (e.g., via API or batch) rather than interactively.</li> <li>Error handling returns specific messages for invalid inputs (e.g., \"INVALID COMPANY #\", \"FROM SRN MUST BE LESS THAN TO SRN\").</li> <li>Output is formatted for printing, with PDF spooling support (<code>LIST1</code>).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB001%20RPG36/","title":"BB001 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB001%20RPG36/#process-steps-of-the-rpg-program-bb001rpg36txt","title":"Process Steps of the RPG Program (BB001.rpg36.txt)","text":"<p>This RPG program, BB001, is designed for an IBM System/36 environment and is called by the BB170 OCL procedure as part of an order management system. Its primary function is order batch selection, allowing users to select an existing batch or create a new one for order processing. It uses an interactive workstation display (SCREEN) to prompt for batch selection, validates inputs, and manages batch records in the BBBTCH/BBBTCHX files. The program handles batch creation, updates, deletion, and locking, with logic for scrolling through batch records and error handling. Below is a step-by-step breakdown of the process, executed within the RPG cycle:</p> <ol> <li>Initialization (Mainline Calculations):</li> <li>If indicators 75 and 76 are off (roll key status indicators for scrolling), set off indicators 50, 21, 22 (error/display controls) and 23, 24 (scrolling flags).</li> <li>Clear the error message field (MSG) to blanks.</li> <li>Set off indicators 75, 76 (roll key status) to reset scrolling state.</li> <li>If indicator 09 is on (first-pass flag), execute ONETIM subroutine for one-time setup.</li> <li> <p>Based on screen input formats (NS 01, 02, 03):</p> <ul> <li>If indicator 01 is on (format BB001S1), execute S1 subroutine (main batch selection).</li> <li>If indicator 02 is on (format BB001S2), execute S2 subroutine (batch confirmation/deletion).</li> <li>If indicator 03 is on (format BB001S3), execute S3 subroutine (batch reset/cancellation).</li> </ul> </li> <li> <p>ROLLKY Subroutine (Handle Scrolling):</p> </li> <li>Triggered by roll key presses (status codes 01122 for forward, 01123 for backward).</li> <li>Set off indicators 21, 22, 23, 24, 50 (clear scrolling and error states).</li> <li>If status is 01122 and indicator 83 is on (forward roll), execute DRLFWD (scroll forward).</li> <li>If status is 01123 and 83 is on (backward roll), execute DRLBAK (scroll backward).</li> <li> <p>If 83 is on, branch to ENDRL tag, clear STATUS, and set off 09 to reset for next input.</p> </li> <li> <p>ONETIM Subroutine (One-Time Setup):</p> </li> <li>Clear CANCEL field (local data area offset 121) to blanks.</li> <li>Initialize counters: BLIM (batch limit), Z2, Z7, Z8 to zero.</li> <li>Set lower limit (SETLL) on BBBTCH file at BLIM (start of file).</li> <li>Execute DRLFWD to load first batch record(s) for display.</li> <li>Set on indicators 21 (display BB001S1 format) and 83 (scroll control).</li> <li> <p>If PGM (offset 504, set to 'O' by OCL) is 'O' (order entry mode), set off 44 (allow batch creation); otherwise, set on 44 (restrict creation).</p> </li> <li> <p>S1 Subroutine (Main Batch Selection):</p> </li> <li>If KG is on (cancellation mode), set off 01, 02, 09, set CANCEL to 'CANCEL', set on LR (last record, end program), and branch to ENDS1.</li> <li> <p>Compare BTCH#X (user-entered batch number) to zero:</p> <ul> <li>If zero (new batch):</li> <li>If PGM is not 'O', display error message 2 (\"CANNOT CREATE A BATCH NOW\"), set on 90, 21, 51 (error state), and branch to ENDS1.</li> <li>Chain to BBBTCHX at key '99' (next batch number record).</li> <li>If not found (99 on), set ABNXTB to 1; otherwise, increment ABNXTB (next batch number).</li> <li>If ABNXTB reaches 99, reset to 1 (wrap-around).</li> <li>Update next batch number (EXCPT UPDNXB).</li> <li>Set batch fields: LKDESC to message 11 (\"AVAILABLE\"), PRTD to 'N' (not printed), DTMDY/DATE to current date (UDATE), LUMDY/LUDT to zero (no updates), #REC to zero.</li> <li>Chain to BBBTCHX with BATCH# (new batch number).</li> <li>If not found (49 on), add new batch record (EXCPT ADDBCH, includes PAR13C from offset 470), set on LR, set off 83, and branch to ENDS1.</li> <li>If found (batch exists), loop to NXTBCH to try next number.</li> <li>If non-zero (existing batch):</li> <li>Set BATCH# to BTCH#X and chain to BBBTCHX.</li> <li>If not found, deleted (ABDEL='D'), or BATCH# is 99, display message 1 (\"INVALID BATCH NO. -- PLEASE REKEY\"), set on 90, 21, and branch to ENDS1.</li> <li>If ABLOCK='O' and PGM='P' (posting mode), display message 5 (\"BATCH # IN USE--CANNOT POST NOW\"), set on 90, 21, branch to ENDS1.</li> <li>If PAR13C (order type, e.g., 'PP') does not match ABSRCE (batch source), display message 1, set on 51, 90, 21, branch to ENDS1.</li> <li>If ABLOCK is not blank and ABUSER matches USER (same user locked it), skip to AROUND (allow access).</li> <li>If ABLOCK is not blank (batch locked), display message 3 (\"BATCH # IN USE--PLEASE CHOOSE ANOTHER\"), set on 90, 21, 51, release batch (EXCPT RELBCH), and branch to ENDS1.</li> <li>Set batch fields for update: LKDESC, PRTD, DTMDY, LUDT (current date), #REC.</li> <li>If DEL='D' (delete requested), display message 4 (\"CMD 4 - TO DELETE EXISTING BATCH\"), set on 90, 22 (display BB001S2), set off 83.</li> <li>If not deleting, update batch (EXCPT UPDBCH).</li> <li>If PGM='P', set on 24 (post mode flag) and branch to ENDS1; otherwise, set on LR.</li> </ul> </li> <li> <p>S2 Subroutine (Batch Confirmation/Deletion):</p> </li> <li>If KA is on (scroll forward), set on 83, 21, set lower limit on BBBTCH, execute DRLFWD, and branch to ENDS2.</li> <li>If 52 (delete mode) and KD is off (no delete key), set on 83, 21, set lower limit, execute DRLFWD, and branch to ENDS2.</li> <li>If 52 and KD (delete confirmed), set on U1 (update mode), delete batch (EXCPT DELBCH), set on LR, and branch to ENDS2.</li> <li> <p>If BATCH# exists (chain to BBBTCHX, 49 on), add new batch (EXCPT ADDBCH), set off 49, set on LR.</p> </li> <li> <p>S3 Subroutine (Batch Reset/Cancellation):</p> </li> <li> <p>If KG is on and BATCH# exists (chain to BBBTCHX, 49 off), save batch state (EXCPT SAVBCH), set off 01, 02, 03, 09, set CANCEL to 'CANCEL', set on LR, and branch to ENDS3.</p> </li> <li> <p>DRLFWD Subroutine (Scroll Forward):</p> </li> <li>Initialize counter X to 1, clear batch arrays (BTC, LKD, etc.) via DETCLR.</li> <li>Read BBBTCH sequentially, skipping if ABBTCH=99 or ABDEL='D'.</li> <li>If PAR13C (order type) matches ABSRCE, populate arrays (BTC, LKD, LKW, PRT, USR, DTE, LUD, #RC) for display, increment X.</li> <li>Set LKD based on ABLOCK ('O'\u219212 \"ORD ENTRY\", 'L'\u219213 \"PICK LIST\", 'B'\u219215 \"BOL PRINT\", 'P'\u219214 \"POSTING\", else 11 \"AVAILABLE\").</li> <li>Stop at X=11 or end of file (99 on, set 68).</li> <li> <p>If no records (X=1 and 68 on), set on 23 (no data) and reposition BBBTCH.</p> </li> <li> <p>DRLBAK Subroutine (Scroll Backward):</p> </li> <li> <p>Set on 21 (display BB001S1); minimal logic (likely incomplete or stubbed).</p> </li> <li> <p>DETCLR Subroutine (Clear Arrays):</p> </li> <li> <p>Zero out arrays BTC, DTE, LUD, #RC; blank LKD, LKW, PRT, USR for display refresh.</p> </li> <li> <p>Output Operations:</p> <ul> <li>Format BB001S1 (indicator 21): Display batch list (KYHDG, BTC, LKD, LKW, PRT, USR, DTE, LUD, #RC, BTCH#X, DEL, MSG).</li> <li>Format BB001S2 (22): Confirm batch details (KYHDG, BATCH#, LKDESC, WSID, PRTD, USER, DTMDY, LUMDY, #REC, MSG).</li> <li>Format BB001S3 (24): Similar to BB001S2, for posting mode.</li> <li>Exceptions: UPDNXB (update next batch number), ADDBCH (add batch, includes PAR13C), UPDBCH (update batch), RELBCH (release lock), DELBCH (delete batch), SAVBCH (save batch state).</li> </ul> </li> <li> <p>Program End:</p> <ul> <li>If LR is set (via cancellation, batch creation, or deletion), end program, returning to OCL.</li> <li>Otherwise, loop via RPG cycle for user input (batch selection or correction).</li> </ul> </li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB001%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Selection:</li> <li>Users can select an existing batch (BTCH#X non-zero) or create a new one (BTCH#X zero).</li> <li>Existing batches must exist, not be deleted (ABDEL\u2260'D'), and not be batch 99 (reserved).</li> <li>Batches must match the order type (PAR13C=ABSRCE, e.g., 'PP' for viscosity ASN).</li> <li>Batch Creation:</li> <li>Only allowed in order entry mode (PGM='O').</li> <li>Next batch number (ABNXTB) increments from 1 to 99, wrapping to 1.</li> <li>New batches are initialized with: no lock (ABLOCK blank), not printed (PRTD='N'), current date (UDATE), zero records (#REC), and PAR13C as source.</li> <li>Batch Locking:</li> <li>Locked batches (ABLOCK non-blank) are restricted unless the current user (USER) matches the locking user (ABUSER).</li> <li>Lock types: 'O' (order entry), 'L' (pick list), 'P' (posting), 'B' (BOL print).</li> <li>Posting (PGM='P') is blocked if ABLOCK='O'.</li> <li>Batch Deletion:</li> <li>Users can mark a batch for deletion (DEL='D'), confirmed via BB001S2.</li> <li>Deletion updates the batch record (EXCPT DELBCH).</li> <li>Cancellation:</li> <li>If KG is on, set CANCEL to 'CANCEL' and exit (checked by OCL).</li> <li>Data Integrity:</li> <li>Batch numbers are unique (checked via chain).</li> <li>BBBTCH (input) and BBBTCHX (update) point to the same file, with BBBTCHX allowing record updates/additions.</li> <li>Date fields (ABDATE, ABLUDT) are stored in century-year-month format, converted for display.</li> <li>Scrolling:</li> <li>Display up to 10 batches (X=1 to 10) in BB001S1, skipping deleted or mismatched source batches.</li> <li>Roll keys (01122/01123) control forward/backward scrolling.</li> <li>Error Handling:</li> <li>Invalid batch: Message 1, highlight field.</li> <li>Cannot create batch outside order entry: Message 2.</li> <li>Batch in use: Message 3 (unless same user).</li> <li>Delete prompt: Message 4.</li> <li>Posting conflict: Message 5.</li> <li>Errors protect the screen (90 on) and prompt rekeying.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB001%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>BBBTCH: Batch control file (input, 48-byte records, 2-byte alphanumeric key, indexed). Used for reading batch records sequentially or by key.</li> <li>BBBTCHX: Same physical file as BBBTCH (update mode, UC). Used for adding/updating batch records (e.g., ABNXTB, new batches).</li> <li>Fields: ABDEL (delete code), ABBTCH (batch number), ABLOCK (lock status), ABLKWS (lock workstation ID), ABPRTD (BOL printed), ABUSER (user ID), ABDATE (creation date), ABLUDT (last update date), ABREC (# of records), ABSRCE (batch source), ABNXTB (next batch number).</li> <li>SCREEN: Workstation file (600-byte records) for interactive display (formats BB001S1, BB001S2, BB001S3). Not a disk table.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB001%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. BB001 is self-contained, relying on subroutines (ROLLKY, ONETIM, S1, S2, S3, DRLFWD, DRLBAK, DETCLR) and exception outputs (UPDNXB, ADDBCH, RELBCH, DELBCH, UPDBCH, SAVBCH) to manage batch operations.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB003%20RPG36/","title":"BB003 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB003%20RPG36/#process-steps-of-the-rpg-program-bb003rpg36txt","title":"Process Steps of the RPG Program (BB003.rpg36.txt)","text":"<p>The RPG program BB003 is designed for the IBM System/36 environment and is called by the BB170 OCL procedure during batch deletion operations. Its primary function is to delete records from multiple order transaction files (BBORCL, BBOTHS1, BBOTDS1, BBOTA1) associated with a specific batch, as identified by records in the primary input file BBORTR. The program processes records sequentially from BBORTR and deletes corresponding records in the transaction files based on matching keys (company and order number). The program was updated (per comment DC01, dated 03/10/10) to include additional files BBOTHS1, BBOTDS1, and BBOTA1. Below is a step-by-step breakdown of the process, executed within the standard RPG cycle:</p> <ol> <li>Read BBORTR Records (Primary Input):</li> <li>Read each record from BBORTR (primary file, IP, 512-byte records, 11-byte alphanumeric key, indexed) sequentially using input specification NS 11.</li> <li>Extract fields: TCOORD (positions 2-9, company/order number), TKEY (2-12, composite key), TSEQ (10-12, sequence), TDDEL (1, delete flag), TDCO (2-3, company number), TDORD# (4-9, order number), TDCUST (13-18, customer number).</li> <li> <p>Construct a 14-byte composite key (BBKEY) in a data structure, combining TDCO (company, 1-2), TDCUST (customer, 3-8), and TDORD# (order, 9-14).</p> </li> <li> <p>Delete Records from BBORCL:</p> </li> <li>For each BBORTR record, chain (random read) to BBORCL (update-capable file, 256-byte records, 14-byte alphanumeric key) using BBKEY.</li> <li> <p>If a record is found (indicator 99 off), issue an exception output (EDEL DELETE) to delete the BBORCL record.</p> </li> <li> <p>Delete Records from BBOTHS1:</p> </li> <li>Set off indicator 99 (reset end-of-file).</li> <li>Set lower limit (SETLL) on BBOTHS1 (update-capable, 512-byte records, 8-byte alphanumeric key, externally described) using TCOORD (company/order number).</li> <li> <p>Enter a loop (RDAGN1):</p> <ul> <li>Read BBOTHS1 sequentially.</li> <li>If not end-of-file (99 off) and TCOORD matches BOCOOR (company/order number, 2-9), issue an exception output (EDEL DELOTS) to delete the BBOTHS1 record.</li> <li>Continue looping until no more matching records or end-of-file.</li> </ul> </li> <li> <p>Delete Records from BBOTDS1:</p> </li> <li>Set off indicator 99.</li> <li>Move TCOORD to KL11 (11-byte key) and set lower limit on BBOTDS1 (update-capable, 512-byte records, 11-byte alphanumeric key, externally described) using KL11.</li> <li> <p>Enter a loop (RDAGN2):</p> <ul> <li>Read BBOTDS1 sequentially.</li> <li>If not end-of-file (99 off) and TCOORD matches BDCOOR (company/order number, 2-9), issue an exception output (EDEL DELOTD) to delete the BBOTDS1 record.</li> <li>Continue looping until no more matching records or end-of-file.</li> </ul> </li> <li> <p>Delete Records from BBOTA1:</p> </li> <li>Set off indicator 99.</li> <li>Move TCOORD to KL13 (13-byte key) and set lower limit on BBOTA1 (update-capable, 512-byte records, 13-byte alphanumeric key, externally described) using KL13.</li> <li> <p>Enter a loop (RDAGN3):</p> <ul> <li>Read BBOTA1 sequentially.</li> <li>If not end-of-file (99 off) and TCOORD matches BACOOR (company/order number, 2-9), issue an exception output (EDEL DELOTA) to delete the BBOTA1 record.</li> <li>Continue looping until no more matching records or end-of-file.</li> </ul> </li> <li> <p>Program Cycle:</p> </li> <li>The RPG cycle processes all BBORTR records sequentially (IP file).</li> <li>For each record, it performs chained deletion on BBORCL and sequential deletions on BBOTHS1, BBOTDS1, and BBOTA1.</li> <li>The program ends when all BBORTR records are processed (end of file, LR set implicitly).</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB003%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Deletion:</li> <li>Deletes records from transaction files (BBORCL, BBOTHS1, BBOTDS1, BBOTA1) associated with orders in a batch, as identified by BBORTR.</li> <li>Ensures all related records are removed during batch deletion, preventing orphaned data.</li> <li>Key Matching:</li> <li>BBORCL uses a 14-byte composite key (BBKEY: company + customer + order number) for precise record matching.</li> <li>BBOTHS1, BBOTDS1, and BBOTA1 use TCOORD (company/order number, 8 bytes) for matching, with sequential reads to handle multiple records per order.</li> <li>File Processing:</li> <li>BBORTR is read sequentially as the primary file, driving the deletion process.</li> <li>BBORCL is updated via chained access (random delete).</li> <li>BBOTHS1, BBOTDS1, BBOTA1 are updated via sequential reads after setting a lower limit, deleting all records matching the company/order number.</li> <li>No Error Handling:</li> <li>If a BBORCL record is not found (99 on), no deletion occurs, and the program continues.</li> <li>Non-matching or end-of-file conditions in BBOTHS1, BBOTDS1, BBOTA1 are ignored, assuming partial deletion is acceptable.</li> <li>File Access:</li> <li>BBORTR: Input-only (IP), sequential, 512-byte records, 11-byte key.</li> <li>BBORCL: Update-capable (UC), 256-byte records, 14-byte key.</li> <li>BBOTHS1, BBOTDS1, BBOTA1: Update-capable (UF), 512-byte records, externally described, with 8, 11, and 13-byte keys, respectively.</li> <li>Data Integrity:</li> <li>Ensures deletion only for records explicitly tied to the batch\u2019s company/order number, maintaining referential integrity.</li> <li>Supports cleanup of temporary (BBORCL), header (BBOTHS1), detail (BBOTDS1), and auxiliary (BBOTA1) transaction files.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB003%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>BBORTR:</li> <li>Primary input file, 512-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Contains transaction or temporary order records.</li> <li>Fields: TCOORD (2-9, company/order), TKEY (2-12, composite key), TSEQ (10-12, sequence), TDDEL (1, delete flag), TDCO (2-3, company), TDORD# (4-9, order number), TDCUST (13-18, customer number).</li> <li>BBORCL:</li> <li>Update-capable file, 256-byte records, 14-byte alphanumeric key, indexed (14AI).</li> <li>Likely a transaction or control file for orders.</li> <li>Deleted using BBKEY (company + customer + order number).</li> <li>BBOTHS1:</li> <li>Update-capable file, 512-byte records, 8-byte alphanumeric key, externally described (EXTK).</li> <li>Likely an order header file.</li> <li>Field: BOCOOR (2-9, company/order number).</li> <li>BBOTDS1:</li> <li>Update-capable file, 512-byte records, 11-byte alphanumeric key, externally described (EXTK).</li> <li>Likely an order detail file.</li> <li>Field: BDCOOR (2-9, company/order number).</li> <li>BBOTA1:</li> <li>Update-capable file, 512-byte records, 13-byte alphanumeric key, externally described (EXTK).</li> <li>Likely an auxiliary or temporary order file.</li> <li>Field: BACOOR (2-9, company/order number).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB003%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. BB003 is self-contained, with no subroutines or calls to other programs. It relies solely on file I/O (sequential reads and exception outputs) to delete records from the specified files.</li> </ul> <p>The program is a utility for batch deletion, ensuring all transaction records tied to a batch\u2019s orders are removed, supporting the cleanup process initiated by the BB170 OCL procedure.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB005%20RPG36/","title":"BB005 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB005%20RPG36/#process-steps-of-the-rpg-program-bb005rpg36txt","title":"Process Steps of the RPG Program (BB005.rpg36.txt)","text":"<p>The RPG program BB005 is designed for the IBM System/36 environment and is called by the BB170 OCL procedure as the final step to release or post a batch in an order management system. Its primary function is to update the batch status in the BBBTCH file based on the processing mode (PGM) specified in the local data area. The program handles different batch actions (release, pick list, bill of lading, or posting) by updating specific fields in the batch record, such as lock status, printed flags, and delete indicators. The program is straightforward, with a single chained access and conditional logic for updating the BBBTCH file. Below is a step-by-step breakdown of the process, executed within the standard RPG cycle:</p> <ol> <li>Read Input from Local Data Area:</li> <li> <p>Access the local data area (UDS) to retrieve:</p> <ul> <li>BATCH# (offset 490-491, 2-digit batch number).</li> <li>PGM (offset 504, 1-character mode: 'O' for order entry, 'L' for pick list, 'B' for bill of lading, 'P' for posting).</li> <li>RECCNT (offset 475-482, 8-digit record count).</li> </ul> </li> <li> <p>Chain to BBBTCH File:</p> </li> <li>Perform a chain (random read) to the BBBTCH file (update-capable, 48-byte records, 2-byte alphanumeric key, indexed) using BATCH# as the key.</li> <li> <p>If the batch record is found (indicator 99 off), proceed with processing; if not found (99 on), skip to the end.</p> </li> <li> <p>Update Batch Record Based on PGM Mode:</p> </li> <li> <p>If a record is found (N99), enter a DO loop to process the batch update:</p> <ul> <li>If PGM = 'O' (Order Entry):</li> <li>Execute exception output REL (release):<ul> <li>Clear position 6 (ABLOCK, lock status) to blank.</li> <li>Clear positions 7-8 (ABLKWS, lock workstation ID) to blanks.</li> <li>Write RECCNT (record count) to positions 32-39 (ABREC).</li> </ul> </li> <li>Else If PGM = 'L' (Pick List):</li> <li>Execute exception output PICK:<ul> <li>Clear position 6 (ABLOCK) to blank.</li> <li>Clear positions 7-8 (ABLKWS) to blanks.</li> <li>Write RECCNT to positions 32-39 (ABREC).</li> </ul> </li> <li>Else If PGM = 'B' (Bill of Lading):</li> <li>Execute exception output BOL:<ul> <li>Clear position 6 (ABLOCK) to blank.</li> <li>Clear positions 7-8 (ABLKWS) to blanks.</li> <li>Set position 9 (ABPRTD, BOL printed flag) to 'Y'.</li> <li>Write RECCNT to positions 32-39 (ABREC).</li> </ul> </li> <li>Else If PGM = 'P' (Posting):</li> <li>Execute exception output POST:<ul> <li>Set position 1 (ABDEL, delete flag) to 'D'.</li> <li>Set position 6 (ABLOCK) to 'P' (posted).</li> <li>Write RECCNT to positions 32-39 (ABREC).</li> </ul> </li> <li>Else (Default):</li> <li>Execute exception output REL (same as PGM='O'):<ul> <li>Clear position 6 (ABLOCK) to blank.</li> <li>Clear positions 7-8 (ABLKWS) to blanks.</li> <li>Write RECCNT to positions 32-39 (ABREC).</li> </ul> </li> </ul> </li> <li> <p>End Program:</p> </li> <li>Set on the LR (last record) indicator to terminate the program after processing the batch record.</li> <li>Return control to the calling OCL procedure (BB170).</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB005%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Status Updates:</li> <li>The program updates the batch record in BBBTCH based on the processing mode (PGM):<ul> <li>'O' (Order Entry): Releases the batch by clearing lock fields (ABLOCK, ABLKWS).</li> <li>'L' (Pick List): Clears locks, indicating pick list processing is complete.</li> <li>'B' (Bill of Lading): Clears locks and sets the BOL printed flag (ABPRTD='Y').</li> <li>'P' (Posting): Marks the batch as posted (ABLOCK='P') and deleted (ABDEL='D').</li> </ul> </li> <li>The default action (if PGM is invalid) is to release the batch (clear locks).</li> <li>Record Count Tracking:</li> <li>Updates the batch record count (ABREC) with RECCNT from the local data area, ensuring accurate tracking of records in the batch.</li> <li>Lock Management:</li> <li>Clears lock status (ABLOCK) and workstation ID (ABLKWS) for most modes to release the batch for further processing.</li> <li>For posting (PGM='P'), sets ABLOCK to 'P' to indicate the batch is finalized.</li> <li>Batch Deletion:</li> <li>When posting (PGM='P'), marks the batch as deleted (ABDEL='D'), preventing further use.</li> <li>Data Integrity:</li> <li>Uses a chained access to ensure the correct batch (BATCH#) is updated.</li> <li>If the batch is not found (99 on), no update occurs, avoiding errors.</li> <li>File Access:</li> <li>BBBTCH is update-capable (UC), allowing direct modification of batch records.</li> <li>The program assumes the batch number (BATCH#) is valid, as set by the calling OCL.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB005%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>BBBTCH:</li> <li>Update-capable file, 48-byte records, 2-byte alphanumeric key, indexed (2AI).</li> <li>Stores batch control records.</li> <li>Fields updated: ABDEL (1, delete flag), ABLOCK (6, lock status), ABLKWS (7-8, lock workstation ID), ABPRTD (9, BOL printed flag), ABREC (32-39, record count).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB005%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. BB005 is self-contained, with no subroutines or calls to other programs. It relies solely on file I/O (chain and exception outputs: REL, PICK, BOL, POST) to update the batch record.</li> </ul> <p>The program is a simple utility that finalizes batch processing by updating the batch status and clearing locks, ensuring the batch is released or marked as posted/deleted as part of the order management workflow.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB101%20RPG36/","title":"BB101 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB101%20RPG36/#process-steps-of-the-rpg-program-bb101rpgletxt","title":"Process Steps of the RPG Program (BB101.rpgle.txt)","text":"<p>The RPG program BB101 is designed for the IBM System/36 environment and is called by the BB170 OCL procedure during batch deletion to reset counters or batch state. Its primary function is to facilitate the entry and update of open orders in the BBORDR file, with extensive validation and interaction via a workstation display file (SCREEN). The program supports complex order entry workflows, including header and detail management, product validation, freight processing, and integration with supplemental tables. The source includes a detailed revision history indicating enhancements for carrier validation, freight handling, customer-owned products, and more. Due to the truncation of the source (553,272 characters omitted), this analysis focuses on the provided header, file definitions, and comments, extrapolating likely process steps based on the context and revision notes. Below is a step-by-step breakdown of the inferred process:</p> <ol> <li>Initialization:</li> <li>The program initializes variables and clears error messages (based on typical RPG patterns).</li> <li>Sets up the local data area (UDS) for communication with the OCL, including fields like KYHDG (screen heading), CANCEL, PAR13C (order type), BATCH#, USER, WSID, PGM, and RECCNT.</li> <li> <p>Likely performs one-time setup (similar to BB001\u2019s ONETIM subroutine) to prepare files and screen formats.</p> </li> <li> <p>Interactive Screen Processing:</p> </li> <li>Uses the SCREEN file (workstation, implied from comments) to display formats like BB101S2, BB101S3, BB101S9, and BB101SA for order entry, validation, and error display.</li> <li>BB101S9 (List Orders in Batch): Displays batch orders with fields like company (CO), order number (S9O), name (S9N), status (S9S), request date (S9R), and messages (MSG).</li> <li>BB101S2/S3: Likely header and detail entry screens, with fields for carrier ID, incoterms (DC02), freight arranged by, and product details.</li> <li> <p>BB101SA: Displays credit limit error messages (COM1, e.g., account on credit hold).</p> </li> <li> <p>Order Header Validation:</p> </li> <li>Validates company number (COM 01), customer number (COM 03), ship-to number (COM 04), order date (COM 05), pick-up date (COM 07), sales tax code (COM 08), salesman number (COM 09), terms code (COM 10), and sales G/L number (COM 11).</li> <li>Checks order type (COM 02, valid types: blank, M, R, P, J, T) and ensures it matches customer restrictions (COM 95).</li> <li> <p>For product move orders (PAR13C='PM'), enforces specific rules (COM 96, 97).</p> </li> <li> <p>Order Detail Validation:</p> </li> <li>Validates product code (COM 22), quantity (COM 13), price (COM 14), unit of measure (COM 15), and no-charge code (COM 16, ' ', 'N', 'Y').</li> <li>Ensures container codes are valid or blank (COM 30, 52) and checks container weight for packaged types (COM 54, JB21).</li> <li>Validates freight codes (COM 26, 27, 47-49, 57-67) and ensures consistency across detail lines.</li> <li> <p>For customer-owned products (JB11, JB15), forces no-charge ('Y') and bypasses tank validation.</p> </li> <li> <p>Freight and Shipping:</p> </li> <li>Validates carrier ID (COM 25, JB01) and freight arranged by (COM 73, JB09).</li> <li>Handles multi-load orders (COM 40-45, 86) and ensures valid pick-up/delivery dates (COM 68, 92, 93, 107, 108).</li> <li> <p>Supports incoterms for export orders (COM 78-80, DC02) and validates locations (COM 53, 99, 100).</p> </li> <li> <p>Batch and Lock Management:</p> </li> <li>Checks for batch locks (TABC/TABD, e.g., invoicing, modification, railcar BOL, shipping) and displays lockout messages (01-04).</li> <li> <p>Resets batch state during deletion (as called by BB170 OCL), likely clearing counters (RECCNT) or lock fields.</p> </li> <li> <p>External Program Calls:</p> </li> <li>Calls BB1014 to retrieve INLOC (inventory location) information (shared with BB495, BB500).</li> <li>Calls BB1011 for IMS (Inventory Management System) data, including fluid code and unit of measure.</li> <li> <p>Calls BB1015 for accessorials/marks from BBSHSA (JB13).</p> </li> <li> <p>Output and File Updates:</p> </li> <li>Updates BBORDR (order headers) and related files (BBORTR, BBOTHS, BBOTDS, BBOTA) with validated data.</li> <li>Writes supplemental records (JB07) and ship-to records (DC01, 901-999 range).</li> <li> <p>Outputs error messages (COM, COM1) to SCREEN for user correction.</p> </li> <li> <p>Program Cycle:</p> </li> <li>Loops via the RPG cycle for interactive input, validation, and correction until the order is saved or canceled.</li> <li>On batch deletion (OCL context), resets batch state and exits.</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB101%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Order Validation:</li> <li>Company, customer, ship-to, dates, and codes must exist in respective files (e.g., GSPREX, GSCTWT, GSTABL).</li> <li>Order type restricts customer eligibility (COM 95-97).</li> <li>Customer-owned products (JB11, JB15) bypass tank validation and enforce no-charge lines.</li> <li>Freight and Shipping:</li> <li>Freight codes must be consistent (C, P, A; COM 47-49) and align with delivery settings (COM 57-67).</li> <li>Multi-load orders require specific validations (COM 40-45, 86).</li> <li>Incoterms mandatory for export orders (COM 78-80, DC02).</li> <li>Batch Management:</li> <li>Locks prevent concurrent invoicing, modification, or shipping (TABC/TABD).</li> <li>Batch deletion resets counters and clears locks (OCL context).</li> <li>Error Handling:</li> <li>Over 100 error messages (COM 01-108, COM1) enforce data integrity.</li> <li>Overrides allowed for specific errors (e.g., F6 for product restrictions, F10 for holiday dates).</li> <li>EDI Orders:</li> <li>Special handling for EDI orders (JB19), including lockout checks and RACD validation.</li> <li>Data Integrity:</li> <li>Cross-references product codes (COM 77, JB19) and ensures description alignment (JB02).</li> <li>Validates container weights (COM 54, JB21) and group-by codes (COM 76, JB12).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB101%20RPG36/#tables-used","title":"Tables Used","text":"<p>Based on the header, revisions, and output specs: - BBORDR: Order header file (primary file for updates). - BBORTR: Order transaction file. - BBOTHS, BBOTHS1: Order header supplemental files. - BBOTDS, BBOTDS1: Order detail files. - BBOTA, BBOTA1: Auxiliary order files. - GSPREX: Product exception file (MG 090508). - GSCTWT: Non-fluid validation table (MG 090508). - GSTABL: Sales G/L and product code table (JB15). - BBSHSA: Accessorials/marks file (JB13). - INLOC: Inventory location file (via BB1014). - SCREEN: Workstation file for formats BB101S2, BB101S3, BB101S9, BB101SA. - SHPADR: Shipment address file (JB13).</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB101%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB1014: Retrieves INLOC (inventory location) data.</li> <li>BB1011: Retrieves IMS data (fluid code, unit of measure).</li> <li>BB1015: Retrieves accessorials/marks from BBSHSA.</li> </ul> <p>The program is a complex order entry system with extensive validations, integrated with multiple files and programs to manage order creation and batch reset during deletion.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20OCL/","title":"BB170 OCL","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20OCL/#process-steps-of-the-ocl-program-bb170ocl36txt","title":"Process Steps of the OCL Program (BB170.ocl36.txt)","text":"<p>This Operation Control Language (OCL) procedure, BB170, is part of an IBM System/36 order management system and is called by the main OCL procedure (BB170P.ocl36.txt) after the RPG program BB170P validates user inputs for creating new orders by copying an existing one. The BB170 procedure handles order batch selection, file creation, and copying of order records. It uses parameter substitution (e.g., ?9? for a prefix, ?13? for order type, ?USER?, ?WS?) to make it reusable across datasets and contexts. The procedure also supports batch deletion and cleanup, with conditional logic for cancellation and iteration. Below is a step-by-step breakdown of the process:</p> <ol> <li>Set Local Data Area Values:</li> <li>Set offset 470 to ?13? (order type, e.g., 'PP' or 'PM').</li> <li>Set offset 480 to ?9? (prefix for file labels, e.g., 'TEST').</li> <li>Set offset 494 to ?USER? (user ID of the job).</li> <li>Set offset 502 to ?WS? (workstation ID).</li> <li>Set offset 504 to 'O' (possibly an order processing flag).</li> <li>Conditionally set offset 60 (screen title) based on ?13?:<ul> <li>If blank, set to '         ORDER ENTRY         '.</li> <li>If 'PP', set to '     VISCOSITY ASN ENTRY     '.</li> <li>If 'PM', set to '      PRODUCT MOVES ENTRY    '.</li> </ul> </li> <li> <p>These settings prepare metadata for the job, tailoring the process to the order type and user context.</p> </li> <li> <p>Set Switch for Batch Deletion:</p> </li> <li> <p>Set switch 1 to 0 (SWITCH 0XXXXXXX), disabling batch deletion by default. Switch 1 is later checked for deletion logic.</p> </li> <li> <p>Load and Run BB001 Program:</p> </li> <li>Load the RPG program BB001.</li> <li>Define two logical files, BBBTCH and BBBTCHX, both pointing to the same physical file ?9?BBBTCH (e.g., TESTBBBTCH), opened in shared mode (DISP-SHR).</li> <li> <p>Execute BB001, likely to select or validate an order batch, as the comment indicates \"ORDER BATCH SELECTION\".</p> </li> <li> <p>Check for Cancellation:</p> </li> <li> <p>If the local data area at offset 121 (6 characters) equals '/CANCEL' (set by BB170P if user cancels), return immediately, terminating the procedure.</p> </li> <li> <p>Evaluate Batch Suffix (P20):</p> </li> <li>Set variable P20 to the 2-character value from local data area offset 490 (likely a batch identifier, e.g., '01' or 'AA').</li> <li> <p>This suffix is used to construct file labels for order-related files (e.g., ?9?BBOR?20? becomes TESTBBOR01).</p> </li> <li> <p>Batch Deletion Logic (if SWITCH1=1):</p> </li> <li> <p>If switch 1 is on (indicating a delete request):</p> <ul> <li>Call BB215 with *ALL parameters (likely clears batch-related data).</li> <li>Call BB003 with *ALL parameters (likely additional cleanup or logging).</li> <li>If file ?9?BBOR?20? exists (e.g., TESTBBOR01), delete it (DELETE command, F1 for file type).</li> <li>If file ?9?BBOX?20? exists (e.g., TESTBBOX01), delete it.</li> <li>Reset program BB101 with *ALL parameters (likely resets counters or batch state).</li> </ul> </li> <li> <p>Create Order Files (if they don\u2019t exist):</p> </li> <li>If file ?9?BBOR?20? does not exist, create it using BLDFILE:<ul> <li>Name: ?9?BBOR?20? (e.g., TESTBBOR01).</li> <li>Type: Indexed (I), 999000 records, 512 bytes/record, 2-byte key, 11-byte index, type DFILE.</li> </ul> </li> <li>If file ?9?BBOX?20? does not exist, create it similarly.</li> <li> <p>These files likely store order header and detail records for the new batch.</p> </li> <li> <p>Load and Run BB170 Program (Loop):</p> </li> <li>Load the RPG program BB170 (not to be confused with this OCL procedure\u2019s name).</li> <li>Define multiple files, all shared (DISP-SHR):<ul> <li>BBORDR (?9?BBORDR): Order file.</li> <li>BICONT (?9?BICONT): Control/company file.</li> <li>BBOTHS (?9?BBOTHS): Possibly another order header file.</li> <li>BBORHS (?9?BBORHS): Likely a historical order header file.</li> <li>BBOTDS (?9?BBOTDS): Possibly order details file.</li> <li>BBORDS (?9?BBORDS): Another order details file.</li> <li>SHIPTO (?9?SHIPTO): Shipping address file.</li> <li>SHIPTOO (?9?SHIPTO): Alias for SHIPTO.</li> <li>BBOTA (?9?BBOTA): Possibly a temporary order file.</li> <li>BBORA (?9?BBORA): Possibly an archive order file.</li> <li>BBTRAN (?9?BBOR?20?): Transaction/batch order file for the new orders.</li> </ul> </li> <li> <p>Execute BB170 (RPG), which likely copies the validated order (from BB170P) to the new batch file (?9?BBOR?20?).</p> </li> <li> <p>Check Copy Counter and Loop:</p> </li> <li>Compare local data area offset 150 (2 characters, likely actual copies made) to offset 140 (2 characters, likely requested copies, KYCPYS from BB170P).</li> <li>If they match (all requested copies created), go to END.</li> <li> <p>Otherwise, go to AGAIN (step 8), looping to copy additional orders.</p> </li> <li> <p>Release Batch:</p> <ul> <li>Set local data area offset 475 to '?F'A,?9?BBOR?20?'?' (e.g., 'A,TESTBBOR01'), possibly a file action flag.</li> <li>Load and run BB005, defining BBBTCH (?9?BBBTCH) in shared mode, likely to finalize or release the batch for processing.</li> </ul> </li> <li> <p>Clear Local Data Area:</p> <ul> <li>Blank all local data area contents, ensuring a clean state for the next job.</li> </ul> </li> <li> <p>End Procedure:</p> <ul> <li>Reach END tag, terminating the procedure.</li> </ul> </li> </ol> <p>The procedure is iterative (via AGAIN loop) to handle multiple order copies and includes cleanup for batch deletion and file creation for new orders.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Dynamic File Labeling: Uses ?9? prefix (e.g., 'TEST') and ?20? suffix (batch ID) to create unique file names, ensuring data separation across companies or datasets.</li> <li>Order Type Customization: Sets screen titles based on ?13? (order type: blank, 'PP' for viscosity ASN, 'PM' for product moves), tailoring the process to specific order workflows.</li> <li>Cancellation Handling: Checks for '/CANCEL' in local data area (set by BB170P), allowing immediate exit if user cancels.</li> <li>Batch Deletion: If switch 1 is on, deletes batch files (?9?BBOR?20?, ?9?BBOX?20?) and resets related data via BB215, BB003, BB101, ensuring no orphaned data.</li> <li>File Creation: Creates batch-specific order files (?9?BBOR?20?, ?9?BBOX?20?) if they don\u2019t exist, with fixed specs (999000 records, 512 bytes, indexed), ensuring capacity for new orders.</li> <li>Copy Control: Loops until the number of copies made (offset 150) matches requested copies (offset 140, KYCPYS), ensuring all requested new orders are created.</li> <li>Batch Finalization: BB005 releases the batch, likely marking it ready for further processing (e.g., posting or shipping).</li> <li>Data Integrity: Uses shared file access (DISP-SHR) to allow concurrent jobs while preventing conflicts. Files are predefined to match expected formats.</li> <li>User Context: Stores user ID (?USER?) and workstation ID (?WS?) in the local data area, likely for audit or locking purposes.</li> <li>Error Prevention: Conditional file creation and deletion prevent errors from missing or existing files.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20OCL/#tables-used","title":"Tables Used","text":"<p>In System/36, \"tables\" refer to disk files used as databases. The procedure defines:</p> <ul> <li>BBBTCH (?9?BBBTCH): Batch control file, used by BB001 and BB005.</li> <li>BBORDR (?9?BBORDR): Order file (likely headers), used by BB170.</li> <li>BICONT (?9?BICONT): Control/company file, used by BB170.</li> <li>BBOTHS (?9?BBOTHS): Possibly another order header file.</li> <li>BBORHS (?9?BBORHS): Likely historical order headers.</li> <li>BBOTDS (?9?BBOTDS): Possibly order details.</li> <li>BBORDS (?9?BBORDS): Another order details file.</li> <li>SHIPTO (?9?SHIPTO): Shipping address file (also aliased as SHIPTOO).</li> <li>BBOTA (?9?BBOTA): Possibly temporary order file.</li> <li>BBORA (?9?BBORA): Possibly archive order file.</li> <li>BBTRAN (?9?BBOR?20?): Transaction/batch order file for new orders.</li> <li>?9?BBOR?20? (e.g., TESTBBOR01): Dynamically created order file for the batch.</li> <li>?9?BBOX?20? (e.g., TESTBBOX01): Dynamically created auxiliary order file (possibly details or extensions).</li> </ul> <p>All files are opened in shared mode (DISP-SHR).</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB001: RPG program for batch selection/validation.</li> <li>BB215: Called during batch deletion, likely clears batch data.</li> <li>BB003: Called during batch deletion, possibly for additional cleanup.</li> <li>BB101: Reset during batch deletion, likely resets counters or state.</li> <li>BB170: RPG program to copy order records to the new batch.</li> <li>BB005: RPG program to release/finalize the batch.</li> </ul> <p>These programs handle specific tasks in the order copying and batch management process.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20RPG36/","title":"BB170 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20RPG36/#process-steps-of-the-rpg-program-bb170rpg36txt","title":"Process Steps of the RPG Program (BB170.rpg36.txt)","text":"<p>The RPG program BB170 is designed for the IBM System/36 environment and is called by the BB170 OCL procedure (distinct from this program despite sharing the name) as part of an order management system. Its primary function is to create new order records by copying an existing order into a transaction file (BBTRAN) and related supplemental files (BBOTHS, BBOTDS, BBOTA, SHIPTOO) for a specified number of copies, as requested by the user (via KYCPYS). The program processes the source order from BBORDR, retrieves the next available order number from BICONT, and generates new records with updated order numbers. It operates within the standard RPG cycle, using conditional logic to handle multiple file outputs. Below is a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Mainline Calculations):</li> <li>Clear fields: BLNK15 (15 bytes), BLNK7 (7 bytes), ZERO6 (6-digit numeric), ZERO8 (8-digit numeric) to blanks or zeros.</li> <li>Capture system time (TIME to TIMDAT, 12 digits) and extract SYTIME (HHMMSS) and SYDATE (MMDDYY).</li> <li>Convert SYDATE to century-year-month-day format (DATYMD = SYDATE * 10000.01, e.g., 081325 for 08/13/25).</li> <li> <p>Set DATE8 (8-digit, CCYYMMDD) by prefixing '20' (for 21st century) and appending DATYMD.</p> </li> <li> <p>Process BBORDR Records (Primary Input):</p> </li> <li>Read records sequentially from BBORDR (primary file, IP, 512-byte records, 11-byte alphanumeric key, indexed) using input specification NS 01.</li> <li>Extract fields like BODEL (delete flag), BOCO (company), BORDNO (order number), BORSEQ (sequence), BOCUST (customer), BOSHIP (ship-to), and others (e.g., dates, freight codes, lock status).</li> <li> <p>For each record, check if BORDNO (order number) matches KYORD# (input order number from local data area, offset 143-148).</p> </li> <li> <p>Create New Orders (DO Loops for Each File):</p> </li> <li>The program uses a series of DO loops (indicators 01-10) to process different files, each checking if the source order number (BORDNO, BHRDNO, BTORDN, BAORDN, CSORDN) matches KYORD#. If not, it branches to the END tag, skipping processing for that record.</li> <li>Get Next Order Number (Indicator 01):<ul> <li>Chain to BICONT (control file, update-capable) using BOCO (company number).</li> <li>If found (49 off), set NEWORD (new order number) to BCORDN (next order number from BICONT).</li> <li>Increment BCORDN to NXTORD and update BICONT (EXCPT COUPD) to store the next available order number.</li> <li>Build a composite key (KEY, 21 bytes) by combining BOCO and BORDNO, padded as needed.</li> <li>Write a new BBTRAN record (EXCPT ADD1) with NEWORD, SYDATE, DATE8, and default values (e.g., zeros for dates, 'X' at 476).</li> <li>Increment KYCNT (copy counter, offset 140-141) to track copies made.</li> </ul> </li> <li>BBOTHS (Indicator 07):<ul> <li>If BHRDNO (order number from BBORHS) matches KYORD#, write a new BBOTHS record (EXCPT ADDTH) with NEWORD.</li> </ul> </li> <li>BBOTDS (Indicator 08):<ul> <li>If BTORDN (order number from BBORDS) matches KYORD#, write a new BBOTDS record (EXCPT ADDTD) with NEWORD.</li> </ul> </li> <li>BBOTA (Indicator 09):<ul> <li>If BAORDN (order number from BBORA) matches KYORD#, write a new BBOTA record (EXCPT ADDTA) with NEWORD.</li> </ul> </li> <li>SHIPTOO (Indicator 10):<ul> <li>If CSDEL='O' (ship-to record active), CSSHIP=999 (special ship-to flag), and CSORDN matches KYORD#, write a new SHIPTOO record (EXCPT ADDSHP) with NEWORD.</li> </ul> </li> <li> <p>Other Files (Indicators 02-06):</p> <ul> <li>Similar logic for ADD2 to ADD6 (BBTRAN), writing additional records with NEWORD, likely for different record types or segments (REC021-REC062).</li> </ul> </li> <li> <p>Output to Files:</p> </li> <li>BICONT (EXCPT COUPD): Updates NXTORD (next order number) at position 39.</li> <li>BBTRAN (EXCPT ADD1-ADD6): Writes new order records with fields like NEWORD (new order number, position 9), SYDATE (order date, 39), DATE8 (CCYYMMDD, 322), and default values (e.g., 'X' at 476, zeros for dates).</li> <li>BBOTHS (EXCPT ADDTH): Writes header supplemental records with NEWORD.</li> <li>BBOTDS (EXCPT ADDTD): Writes detail supplemental records with NEWORD.</li> <li>BBOTA (EXCPT ADDTA): Writes auxiliary records with NEWORD.</li> <li> <p>SHIPTOO (EXCPT ADDSHP): Writes ship-to records with NEWORD and multiple record segments (REC1-REC8).</p> </li> <li> <p>Program Cycle:</p> </li> <li>The RPG cycle processes BBORDR records sequentially.</li> <li>For each matching record (BORDNO=KYORD#), it creates new records in the target files up to the number of copies requested (tracked via KYCNT, compared to KYCPYS in the OCL).</li> <li>The program ends when all BBORDR records are processed or the required copies are created.</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Order Copying:</li> <li>Creates new orders by copying an existing order (KYORD#) into BBTRAN and supplemental files (BBOTHS, BBOTDS, BBOTA, SHIPTOO).</li> <li>The number of copies is controlled by KYCPYS (local data area, offset 150-151).</li> <li>Each new order gets a unique order number (NEWORD) from BICONT\u2019s BCORDN, incremented after each use.</li> <li>Order Number Management:</li> <li>BICONT tracks the next order number (BCORDN) per company (BOCO), ensuring unique order numbers.</li> <li>Updates BCORDN after each copy to prevent reuse.</li> <li>File-Specific Processing:</li> <li>BBTRAN: Primary transaction file for new orders, with standardized fields (e.g., SYDATE, DATE8, default zeros).</li> <li>BBOTHS, BBOTDS, BBOTA: Supplemental files for headers, details, and auxiliary data, using NEWORD to link to the new order.</li> <li>SHIPTOO: Copies ship-to records only when CSDEL='O' and CSSHIP=999, ensuring valid ship-to data.</li> <li>Data Integrity:</li> <li>Matches records using BOCO (company) and BORDNO (order number) to ensure correct source data.</li> <li>Uses composite keys (e.g., KEY, TCOORD) for precise record creation.</li> <li>Sets default values (e.g., 'X' at 476, zeros for dates) to initialize new records.</li> <li>Date Handling:</li> <li>Uses system date (SYDATE, MMDDYY) and converts to CCYYMMDD (DATE8) for consistency.</li> <li>Ensures order entry date (position 39, 322) reflects the current date.</li> <li>Loop Control:</li> <li>The OCL checks KYCNT (copies made) against KYCPYS (copies requested) to control the number of iterations.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>BBORDR:</li> <li>Primary input file, 512-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Contains source order header records.</li> <li>Fields: BODEL (delete), BOCO (company), BORDNO (order number), BORSEQ (sequence), BOCUST (customer), BOSHIP (ship-to), and many others (e.g., dates, freight codes, lock status).</li> <li>BICONT:</li> <li>Update-capable file, 256-byte records, 2-byte alphanumeric key, indexed (02AI).</li> <li>Stores control data, including BCORDN (next order number).</li> <li>Fields: BCORDN (34-39), company-related fields (e.g., BCCO, BCNAME, BCAGPW).</li> <li>BBORHS:</li> <li>Input sequential file, 512-byte records, 21-byte alphanumeric key, externally described (EXTK).</li> <li>Likely historical order headers.</li> <li>BBORDS:</li> <li>Input sequential file, 512-byte records, 24-byte alphanumeric key, externally described (EXTK).</li> <li>Likely order details.</li> <li>BBORA:</li> <li>Input sequential file, 512-byte records, 26-byte alphanumeric key, externally described (EXTK).</li> <li>Likely archive or auxiliary order data.</li> <li>SHIPTO:</li> <li>Input sequential file, 2048-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Contains ship-to address data.</li> <li>BBOTHS:</li> <li>Output file, 512-byte records, 21-byte alphanumeric key, externally described (EXTK).</li> <li>Stores new header supplemental records.</li> <li>BBOTDS:</li> <li>Output file, 512-byte records, 24-byte alphanumeric key, externally described (EXTK).</li> <li>Stores new detail supplemental records.</li> <li>BBOTA:</li> <li>Output file, 512-byte records, 26-byte alphanumeric key, externally described (EXTK).</li> <li>Stores new auxiliary records.</li> <li>BBTRAN:</li> <li>Output file, 512-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Stores new order transaction records.</li> <li>SHIPTOO:</li> <li>Output file, 2048-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Stores new ship-to records.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. BB170 is self-contained, with no direct calls to other programs. It relies on file I/O and exception outputs (COUPD, ADD1-ADD6, ADDTH, ADDTD, ADDTA, ADDSHP) to create new records.</li> </ul> <p>The program is a critical component of the order copying process, generating new order records in multiple files while maintaining unique order numbers and data consistency, as controlled by the BB170 OCL procedure.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20OCL/","title":"BB170P OCL","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>This is an Operation Control Language (OCL) procedure for the IBM System/36 environment (not strictly an RPG program, but it loads and runs an RPG program as part of its execution). OCL is used to control job execution, allocate resources like files, and invoke programs or other procedures. The procedure appears to facilitate creating new orders by copying from a current order, likely in a business or inventory context, using parameter passing (via ?9?, which substitutes the 9th parameter from the caller) and file operations.</p> <p>The steps are executed sequentially, with conditional branching. Here's a step-by-step breakdown:</p> <ol> <li> <p>Invoke SCPROCP procedure: The procedure starts by calling another OCL procedure named SCPROCP with 8 empty parameters (indicated by commas) and passes the 9th parameter from the caller (?9?). This likely performs initial setup, such as preparing data for copying orders, as SCPROCP may be a custom procedure for processing or validation.</p> </li> <li> <p>Blank all local variables: Clears the entire local data area (a memory area for temporary data storage accessible by programs and procedures) by setting it to blanks. This ensures a clean state for subsequent operations, preventing carryover of old data.</p> </li> <li> <p>Invoke GSY2K procedure: Calls a procedure named GSY2K with no parameters. This may handle global setup, possibly related to Year 2000 (Y2K) date compliance or system-wide configurations, as \"GSY2K\" suggests a Y2K-specific utility.</p> </li> <li> <p>Load the BB170P program: Loads the RPG program BB170P into memory from the default library. This prepares the program for execution but does not run it yet.</p> </li> <li> <p>Define the BICONT file: Allocates a disk file with the logical name BICONT, using a physical label constructed by prefixing the caller's 9th parameter (?9?) to \"BICONT\" (e.g., if ?9? is \"TEST\", the label becomes \"TESTBICONT\"). The file is opened in shared mode (DISP-SHR), allowing concurrent access by other jobs. This file likely serves as a control or index file for order data.</p> </li> <li> <p>Define the BBORDR file: Allocates another disk file with the logical name BBORDR, using a physical label ?9?BBORDH (e.g., \"TESTBBORDH\"). Also opened in shared mode. This file appears related to order headers (BBORDH suggests \"order header\"), possibly used for reading or writing order records during the copy process.</p> </li> <li> <p>Run the loaded program: Executes the previously loaded BB170P RPG program. This step likely performs the core logic, such as copying order data from current records to new ones using the defined files (BICONT for control and BBORDR for order data).</p> </li> <li> <p>Conditional check for cancellation: Evaluates if the 6-character substring starting at position 129 in the local data area equals \"/CANCEL\". If true (e.g., set by BB170P to indicate user cancellation or error), branches to the END label, skipping the next step.</p> </li> <li> <p>Invoke BB170 procedure: Calls another OCL procedure named BB170 with 8 empty parameters and the 9th parameter passed from the caller (?9?). This may handle post-processing, such as finalizing the new orders or cleanup, assuming no cancellation occurred.</p> </li> <li> <p>Reach END label: Defines the \"END\" label as a branch target for the conditional GOTO.</p> </li> <li> <p>Blank all local variables again: Clears the local data area once more, resetting it for any subsequent jobs or to release resources cleanly at the end of the procedure.</p> </li> </ol> <p>The procedure uses parameter substitution (?9?) to make it reusable (e.g., for different datasets via label prefixing) and includes basic error handling via the cancellation check.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>SCPROCP: An OCL procedure invoked at the start, likely for initial order copying setup.</li> <li>GSY2K: An OCL procedure called for system or date-related setup.</li> <li>BB170P: An RPG program loaded and executed to handle the main data processing (e.g., copying orders).</li> <li>BB170: An OCL procedure invoked near the end, possibly for additional processing or validation.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20OCL/#tables-used","title":"Tables Used","text":"<p>In System/36 terms, \"tables\" refer to database files (disk files used for data storage). The procedure defines and uses the following:</p> <ul> <li>BICONT: A shared disk file, likely a control or configuration file (e.g., for constants or indexes related to orders). Label: ?9?BICONT.</li> <li>BBORDR: A shared disk file, likely an order-related file (e.g., for reading or writing order records; BBORDH suggests \"order header\"). Label: ?9?BBORDH.</li> </ul> <p>These files are accessed by the BB170P RPG program during execution. No other files or tables are explicitly defined.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20RPG36/","title":"BB170P RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>This RPG program (BB170P) is designed for an IBM System/36 environment and serves as an interactive validation routine for creating new orders by copying an existing one. It uses a workstation display file (SCREEN) to prompt the user for inputs (company number, order number, and number of new order copies) and performs validations against disk files. The program is called and executed by the parent OCL procedure, which passes parameters and sets up the files. The flow is indicator-driven, with subroutines for one-time setup and main validation. If validations pass, it prepares data for further processing (e.g., by the subsequent BB170 OCL procedure); if not, it displays errors and may loop for corrections.</p> <p>The program executes in a cycle typical of RPG: input, calculations, output. Here's a step-by-step breakdown:</p> <ol> <li>Initialization (Mainline Calculations):</li> <li>Clear the error message field (MSG40) to blanks.</li> <li>Set off indicators 50, 51, 52 (likely error highlights for individual fields: company, order, copies).</li> <li>Set off indicators 81 (protect/control output), 44, 90 (general error/protect).</li> <li>Clear KYTYPE (order type derivative field) to blanks.</li> <li> <p>If indicator KG is on (possibly set by OCL or prior logic for cancellation mode), move 'CANCEL' to KYCANC and set off indicators 01 and 09 (disabling main processing and one-time setup).</p> </li> <li> <p>One-Time Setup Subroutine (ONETIM):</p> </li> <li>Executed only if indicator 09 is on (likely a first-pass or initialization flag).</li> <li>Sets on indicator 81 (enables protected output or initial screen display).</li> <li> <p>No other logic; subroutine ends.</p> </li> <li> <p>Main Validation Subroutine (S1):</p> </li> <li>Executed only if indicator 01 is on (likely the main processing flag, triggered after input).</li> <li>Validate Company Number (KYCO):<ul> <li>Chain (random read) to the BICONT file using KYCO as the key.</li> <li>If record not found (indicator 10 on), set on indicators 81 (protect), 90 (error), 51 (company field error), move error message 1 (\"INVALID COMPANY NUMBER ENTERED\") to MSG40, and branch to ENDS1 (end subroutine).</li> </ul> </li> <li>Validate Order Number (KYORDR):<ul> <li>If KYORDR is zeros, set on 81, 90, 52 (order field error), move message 2 (\"INVALID ORDER NUMBER ENTERED\") to MSG40, branch to ENDS1.</li> <li>Build a composite key (KEY11): Move KYCO to first 2 positions, pad KYORDR to 9 digits with leading zeros and append '000', then chain to BBORDR file using KEY11.</li> <li>If record not found (99 on), set on 81, 90, 52, move message 2 to MSG40, branch to ENDS1.</li> <li>Check if the order is locked (BOLOCK not blanks, e.g., in a batch). If locked, set on 81, 90, 52, move message 4 (\"ORDER IS CURRENTLY IN A BATCH PLEASE POST\") to MSG40, branch to ENDS1.</li> </ul> </li> <li>Validate Number of Copies (KYCPYS):<ul> <li>If KYCPYS is zeros, set on 81, 90, 53 (copies field error), move message 3 (\"MUST ENTER NUMBER OF NEW ORDERS\") to MSG40, branch to ENDS1.</li> </ul> </li> <li>Derive Order Type (KYTYPE):<ul> <li>If BOTYPE (from BBORDR) is 'M' (possibly \"master\" or \"main\"), set KYTYPE to 'PM' (possibly \"processed master\" or a flag for copying).</li> </ul> </li> <li> <p>End subroutine (ENDS1).</p> </li> <li> <p>Output to Screen:</p> </li> <li>Output to SCREEN file only if indicator 81 is on (protected mode, e.g., for redisplay with errors).</li> <li>Write format 'BB170PFM' (likely a display format name for the prompt screen).</li> <li>Output fields: KYCO at positions 3-4 (input as 3-40, but output at 2? Wait, input spec is 3-40 for KYCO, but output at 2\u2014possible typo or alignment).</li> <li>KYORDR at 5-100 (output at 8? Similar alignment note).</li> <li>KYCPYS at 11-120 (output at 10).</li> <li>MSG40 (error message) at 50? (spec says 169 O MSG40 50, but line 0169\u2014likely position 50 on screen).</li> <li> <p>The screen interaction allows user input, and the program likely loops (RPG cycle) until validations pass or user cancels (via KYCANC).</p> </li> <li> <p>Program End:</p> </li> <li>If errors occur, the screen redisplays with fields protected/highlighted and error message shown, prompting corrections.</li> <li>If all validations pass, the program ends successfully, returning control to the OCL, which checks for cancellation in local data area and proceeds to call BB170 if not canceled.</li> </ol> <p>The program is interactive and error-tolerant, looping via the RPG cycle until inputs are valid or canceled.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces rules for safely copying orders in a business/order management system:</p> <ul> <li>Company Validation: Company number (KYCO) must exist in the control file (BICONT). Ensures operations are tied to a valid company.</li> <li>Order Validation:</li> <li>Order number (KYORDR) cannot be zero.</li> <li>The order must exist in the order file (BBORDR) under the company.</li> <li>The order cannot be locked (BOLOCK must be blanks), preventing copies of in-process/batched orders. User must post/complete the batch first.</li> <li>Copies Validation: Number of new orders to create (KYCPYS) must be greater than zero; enforces that at least one copy is requested.</li> <li>Order Type Handling: If the source order type is 'M', derive KYTYPE as 'PM'\u2014possibly flags the copies as processed or special type.</li> <li>Cancellation Handling: If in cancel mode (KG on), set KYCANC to 'CANCEL', bypassing validations (sets off 01/09).</li> <li>Error Handling: All errors protect the screen (81 on), highlight specific fields (51-53), display a message, and prevent progression until fixed.</li> <li>Data Integrity: Uses chained reads for existence checks; composite keys ensure unique order identification (company + padded order number + '000' suffix, possibly for header records).</li> <li>Security/Concurrency: Files are opened in update mode (IF for input with update), but shared in OCL\u2014allows reading locked status without altering unless needed.</li> </ul> <p>These rules prevent invalid data entry, ensure referential integrity between company/control and order data, and avoid conflicts with ongoing processes.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20RPG36/#tables-used","title":"Tables Used","text":"<p>In RPG/System/36 context, \"tables\" refer to disk files used as databases:</p> <ul> <li>BBORDR: Order file (likely header records). Keyed (11AI\u201411-byte alphanumeric key, indexed), 512-byte records. Used for chaining to validate order existence and check lock status (BOLOCK). Fields include BODEL (delete flag?), BCOORD (company/order?), BSQ, BKEY, BOTYPE (order type), BOLOCK (lock code), BOWSID (lock workstation ID).</li> <li>BICONT: Control/company file. Keyed (2AI\u20142-byte alphanumeric key), 256-byte records. Used for chaining to validate company. Fields include BCDEL (delete flag), BCCO (company no), BCNAME (company name), BCORDN (next order number).</li> </ul> <p>SCREEN is a workstation file (not a disk table) for interactive I/O.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB170P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None directly called from this RPG program. It is self-contained, with all logic in subroutines. However:</li> <li>It is invoked by the parent OCL procedure (via // LOAD and // RUN).</li> <li>Outputs a format 'BB170PFM', which may reference a display file format, not a program.</li> <li>Post-execution, the OCL calls BB170 (another OCL procedure) if no cancellation.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB215%20RPG36/","title":"BB215 RPG36","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB215%20RPG36/#process-steps-of-the-rpg-program-bb215rpg36txt","title":"Process Steps of the RPG Program (BB215.rpg36.txt)","text":"<p>The RPG program BB215 is designed for the IBM System/36 environment and is called by the BB170 OCL procedure during batch deletion operations. Its primary function is to remove lockout conditions from order header records in the BBORDRH file, likely as part of cleaning up a batch being deleted. The program processes records sequentially from the BBORTR file (likely a transaction or temporary order file) and updates corresponding records in BBORDRH to clear lock fields (LOCK and WSID). The program is simple, with minimal logic, and operates within the standard RPG cycle. Below is a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Mainline Calculations):</li> <li>Check if ONCE (a control variable) is zero, indicating the first pass through the program:<ul> <li>If true (ONCE=0), clear LOCK (1 character) and WSID (2 characters) to blanks.</li> <li>Set ONCE to 1 to prevent re-execution of this block in subsequent cycles.</li> </ul> </li> <li> <p>This ensures initialization occurs only once per program run.</p> </li> <li> <p>Process BBORTR Records (Primary Input):</p> </li> <li>Read each record from BBORTR (primary file, NS 01, input specification) sequentially.</li> <li>For each record, extract the BOCOS field (positions 2-12, likely a composite key combining company and order number).</li> <li>Chain (random read) to the BBORDRH file using BOCOS as the key to locate the corresponding order header record.</li> <li> <p>If the record is found (indicator 90 off), proceed to output; if not found (90 on), no update occurs for that record.</p> </li> <li> <p>Update BBORDRH Records (Output):</p> </li> <li>For each matched record (NS 01 and 90 off), update the BBORDRH record (exception output, D specification):<ul> <li>Write LOCK (blanks) to position 155.</li> <li>Write WSID (blanks) to position 157.</li> </ul> </li> <li> <p>This clears the lockout code (LOCK) and workstation ID (WSID) for the order, effectively releasing any lock.</p> </li> <li> <p>Program Cycle:</p> </li> <li>The RPG cycle reads all BBORTR records sequentially (IP for primary input file).</li> <li>For each record, it performs the chain and conditional update.</li> <li>The program ends when all BBORTR records are processed (end of file, LR set implicitly).</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB215%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Lock Removal:</li> <li>The program removes lockout conditions (LOCK and WSID fields) from order header records in BBORDRH, ensuring orders are no longer marked as locked.</li> <li>This is critical during batch deletion (as invoked by BB170 OCL) to release orders for future processing or cleanup.</li> <li>Key Matching:</li> <li>Uses BOCOS (company + order number, 11 bytes) to match records between BBORTR (transaction/temporary orders) and BBORDRH (order headers).</li> <li>Only matched records (90 off) are updated, ensuring data integrity.</li> <li>Single-Pass Initialization:</li> <li>Clears LOCK and WSID variables once at the start to ensure consistent blank values for updates.</li> <li>No Error Handling:</li> <li>If a BBORDRH record is not found (90 on), the program skips the update without reporting errors, assuming missing records are valid (e.g., already deleted or irrelevant).</li> <li>File Access:</li> <li>BBORTR is read sequentially (input-only, IP).</li> <li>BBORDRH is updated randomly (UC for update-capable, keyed by 11-byte alphanumeric key), ensuring precise record updates.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB215%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>BBORTR:</li> <li>Primary input file, 512-byte records, sequential access (IP).</li> <li>Contains transaction or temporary order records.</li> <li>Key field: BOCOS (positions 2-12, company + order number).</li> <li>BBORDRH:</li> <li>Update-capable file, 512-byte records, 11-byte alphanumeric key, indexed (11AI).</li> <li>Stores order header records.</li> <li>Updated fields: LOCK (position 155, lockout code), WSID (positions 156-157, workstation ID).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/BB215%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. BB215 is self-contained, with no subroutines or calls to other programs. It relies solely on file I/O and the RPG cycle to process and update records.</li> </ul> <p>The program is a straightforward utility to clear locks, likely used to ensure orders are not left in a locked state during batch deletion, supporting the broader order management workflow.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/","title":"Summary BB170P OCL","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#list-of-use-cases-implemented-in-the-call-stack","title":"List of Use Cases Implemented in the Call Stack","text":"<p>The call stack consists of OCL and RPG programs (BB170P.ocl36.txt, BB170.rpg36.txt, BB001.rpg36.txt, BB215.rpg36.txt, BB003.rpg36.txt, BB101.rpgle.txt, BB005.rpg36.txt) that together form an order management system on the IBM System/36. The programs handle the creation, validation, and deletion of order batches, focusing on copying existing orders to create new ones. Below are the identified use cases based on the functionality of the programs:</p> <ol> <li>Create New Orders by Copying an Existing Order:</li> <li>Description: Allows users to select an existing order, validate its details, and create one or more new orders by copying its data into a new batch. Involves selecting a batch, validating inputs, generating new order numbers, copying order data, and releasing the batch.</li> <li>Programs Involved: BB170P (OCL, initiates process), BB170 (RPG, copies order records), BB001 (RPG, batch selection), BB005 (RPG, batch release).</li> <li> <p>Key Actions: Validate company, order number, and number of copies (BB170P); select or create a batch (BB001); copy order data to new records with incremented order numbers (BB170); release or post the batch (BB005).</p> </li> <li> <p>Delete an Existing Order Batch:</p> </li> <li>Description: Deletes an existing order batch, including associated transaction records, and resets batch state. Involves clearing locks and removing records from multiple files.</li> <li>Programs Involved: BB170 (OCL, orchestrates deletion), BB215 (RPG, clears locks), BB003 (RPG, deletes transaction records), BB101 (RPG, resets batch state).</li> <li>Key Actions: Set deletion switch (BB170 OCL); clear locks on order headers (BB215); delete records from transaction files (BB003); reset batch counters or state (BB101).</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#function-requirement-document-create-new-orders-by-copying-an-existing-order","title":"Function Requirement Document: Create New Orders by Copying an Existing Order","text":"<p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#function-requirement-document-create-new-orders-by-copying-an-existing-order_1","title":"Function Requirement Document: Create New Orders by Copying an Existing Order","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#overview","title":"Overview","text":"<p>This function creates one or more new orders by copying an existing order within a specified batch. It validates input parameters, assigns new order numbers, copies data to transaction and supplemental files, and updates batch status. The function operates non-interactively, taking all required inputs as parameters.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (KYCO): 2-character alphanumeric, identifies the company.</li> <li>Source Order Number (KYORDR): 6-digit numeric, identifies the existing order to copy.</li> <li>Number of Copies (KYCPYS): 2-digit numeric, number of new orders to create (1 or more).</li> <li>Order Type (PAR13C): 2-character alphanumeric, specifies order type (e.g., blank, 'PP' for viscosity ASN, 'PM' for product moves).</li> <li>User ID (USER): 8-character alphanumeric, identifies the user.</li> <li>Workstation ID (WSID): 2-character alphanumeric, identifies the workstation.</li> <li>Batch Number (BATCH#): 2-digit numeric, optional; if blank, a new batch is created.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>New Order Numbers: List of generated order numbers (6-digit numeric) for the new orders.</li> <li>Batch Number: 2-digit numeric, the batch containing the new orders.</li> <li>Status: Success or error code with message (e.g., invalid company, locked order).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify KYCO exists in BICONT (control file). If not, return error: \"INVALID COMPANY NUMBER\".</li> <li>Verify KYORDR is non-zero and exists in BBORDR (order file) for KYCO. If not, return error: \"INVALID ORDER NUMBER\".</li> <li>Check if the order is locked (BOLOCK non-blank in BBORDR). If locked, return error: \"ORDER IS CURRENTLY IN A BATCH PLEASE POST\".</li> <li>Ensure KYCPYS is non-zero. If zero, return error: \"MUST ENTER NUMBER OF NEW ORDERS\".</li> <li> <p>Validate PAR13C (blank, 'PP', 'PM'). If invalid, return error: \"INVALID TYPE\".</p> </li> <li> <p>Select or Create Batch:</p> </li> <li>If BATCH# is provided, chain to BBBTCH using BATCH#. If not found, deleted (ABDEL='D'), or locked (ABLOCK non-blank and ABUSER\u2260USER), return error: \"INVALID BATCH NO.\" or \"BATCH # IN USE\".</li> <li>If BATCH# is blank and PGM='O' (order entry mode), retrieve next batch number (ABNXTB) from BBBTCH (record '99'), increment (1 to 99, wrap to 1), and create a new batch record with:<ul> <li>ABDEL=' ', ABBTCH=new batch number, ABLOCK=' ', ABLKWS=' ', ABPRTD='N', ABUSER=USER, ABDATE=current date (MMDDYY), ABLUDT=0, ABREC=0, ABSRCE=PAR13C, ABNXTB=incremented number.</li> </ul> </li> <li> <p>If PGM\u2260'O', return error: \"CANNOT CREATE A BATCH NOW\".</p> </li> <li> <p>Create Transaction Files:</p> </li> <li> <p>If files ?9?BBOR?20? and ?9?BBOX?20? (e.g., TESTBBOR01, TESTBBOX01, where ?9?=KYCO prefix, ?20?=BATCH#) do not exist, create them:</p> <ul> <li>Indexed, 999000 records, 512 bytes, 2-byte key, 11-byte index.</li> </ul> </li> <li> <p>Copy Order Records:</p> </li> <li>Chain to BICONT using KYCO to get BCORDN (next order number).</li> <li> <p>For each copy (1 to KYCPYS):</p> <ul> <li>Increment BCORDN to NEWORD and update BICONT.</li> <li>Read BBORDR record (KYCO+KYORDR). If BOTYPE='M', set PAR13C='PM'.</li> <li>Write to BBTRAN (?9?BBOR?20?) with NEWORD, current date (MMDDYY and CCYYMMDD), and copied fields (e.g., BOCUST, BOSHIP, BORQDT).</li> <li>Read and copy records from BBORHS, BBORDS, BBORA to BBOTHS, BBOTDS, BBOTA with NEWORD.</li> <li>If SHIPTO record exists (CSDEL='O', CSSHIP=999), copy to SHIPTOO with NEWORD.</li> <li>Increment copy counter (KYCNT).</li> </ul> </li> <li> <p>Update Batch Status:</p> </li> <li>Update BBBTCH for BATCH#:<ul> <li>Clear ABLOCK and ABLKWS (release locks).</li> <li>Set ABREC=KYCNT (number of orders created).</li> </ul> </li> <li> <p>If all copies are created (KYCNT=KYCPYS), finalize the batch.</p> </li> <li> <p>Return Results:</p> </li> <li>Return list of new order numbers (NEWORDs), BATCH#, and success status. If errors occur, return error code and message.</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Validation:</li> <li>Company (KYCO) must exist in BICONT.</li> <li>Source order (KYORDR) must exist in BBORDR, not be locked, and match KYCO.</li> <li>Number of copies (KYCPYS) must be greater than zero.</li> <li>Order type (PAR13C) must be blank, 'PP', or 'PM'.</li> <li>Batch Management:</li> <li>Existing batch must be valid, not deleted, and either unlocked or locked by the current user.</li> <li>New batch creation requires PGM='O' and assigns a unique batch number (1-99).</li> <li>Batch source (ABSRCE) must match PAR13C.</li> <li>Order Numbering:</li> <li>New orders use BCORDN from BICONT, incremented per copy, ensuring uniqueness per company.</li> <li>File Creation:</li> <li>Transaction files (?9?BBOR?20?, ?9?BBOX?20?) are created if missing, with standard specs.</li> <li>Data Integrity:</li> <li>Copied orders retain key fields (e.g., customer, ship-to, dates) from the source.</li> <li>Supplemental files (BBOTHS, BBOTDS, BBOTA, SHIPTOO) are populated for each new order.</li> <li>Batch Finalization:</li> <li>Batch is released (ABLOCK=' ', ABLKWS=' ') with updated record count (ABREC).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Order Number Generation:</li> <li>NEWORD = BCORDN (from BICONT).</li> <li>NXTORD = BCORDN + 1, updated in BICONT.</li> <li>Date Handling:</li> <li>Current date (MMDDYY) from system time.</li> <li>CCYYMMDD = '20' + (MMDDYY * 10000.01).</li> <li>Copy Counter:</li> <li>KYCNT = KYCNT + 1 per successful copy, compared to KYCPYS.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for invalid inputs (e.g., \"INVALID COMPANY NUMBER\", \"BATCH # IN USE\").</li> <li>Stop processing if any validation fails, returning the error without creating records.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#function-requirement-document-delete-an-existing-order-batch","title":"Function Requirement Document: Delete an Existing Order Batch","text":"<p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#function-requirement-document-delete-an-existing-order-batch_1","title":"Function Requirement Document: Delete an Existing Order Batch","text":""},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#overview_1","title":"Overview","text":"<p>This function deletes an existing order batch, including all associated transaction records, clears locks, and resets batch state. It operates non-interactively, taking input parameters to identify the batch and company.</p>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#inputs_1","title":"Inputs","text":"<ul> <li>Company Number (KYCO): 2-character alphanumeric, identifies the company.</li> <li>Batch Number (BATCH#): 2-digit numeric, identifies the batch to delete.</li> <li>User ID (USER): 8-character alphanumeric, identifies the user.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#outputs_1","title":"Outputs","text":"<ul> <li>Status: Success or error code with message (e.g., invalid batch, batch locked).</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#process-steps_1","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify KYCO exists in BICONT. If not, return error: \"INVALID COMPANY NUMBER\".</li> <li>Chain to BBBTCH using BATCH#. If not found or ABDEL='D', return error: \"INVALID BATCH NO.\".</li> <li> <p>If ABLOCK non-blank and ABUSER\u2260USER, return error: \"BATCH # IN USE\".</p> </li> <li> <p>Clear Locks:</p> </li> <li> <p>For each BBORTR record (transaction orders for KYCO+BATCH#):</p> <ul> <li>Chain to BBORDRH using BOCOS (company+order).</li> <li>If found, update BOLOCK=' ' and BOWSID=' ' (positions 155-157).</li> </ul> </li> <li> <p>Delete Transaction Records:</p> </li> <li> <p>For each BBORTR record:</p> <ul> <li>Chain to BBORCL using BBKEY (company+customer+order).</li> <li>If found, delete the record.</li> <li>Read BBOTHS1, BBOTDS1, BBOTA1 sequentially, matching TCOORD (company+order).</li> <li>Delete matching records.</li> </ul> </li> <li> <p>Reset Batch State:</p> </li> <li>Update BBBTCH for BATCH#:<ul> <li>Set ABDEL='D' (mark as deleted).</li> <li>Set ABLOCK='P' (posted).</li> <li>Update ABREC=0 (reset record count).</li> </ul> </li> <li> <p>Reset counters or state in related files (e.g., BBORDR).</p> </li> <li> <p>Delete Transaction Files:</p> </li> <li> <p>Delete files ?9?BBOR?20? and ?9?BBOX?20? (e.g., TESTBBOR01, TESTBBOX01).</p> </li> <li> <p>Return Results:</p> </li> <li>Return success status or error code with message.</li> </ol>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#business-rules_1","title":"Business Rules","text":"<ul> <li>Validation:</li> <li>Batch must exist in BBBTCH, not be deleted (ABDEL\u2260'D'), and be accessible (unlocked or locked by USER).</li> <li>Lock Removal:</li> <li>Clear locks (BOLOCK, BOWSID) on all order headers in the batch.</li> <li>Record Deletion:</li> <li>Delete all transaction records (BBORCL, BBOTHS1, BBOTDS1, BBOTA1) tied to the batch\u2019s orders.</li> <li>Batch Finalization:</li> <li>Mark batch as deleted (ABDEL='D') and posted (ABLOCK='P').</li> <li>Reset record count (ABREC=0).</li> <li>File Deletion:</li> <li>Remove batch-specific transaction files to prevent orphaned data.</li> <li>Data Integrity:</li> <li>Use precise key matching (BOCOS, BBKEY, TCOORD) to delete only relevant records.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#calculations_1","title":"Calculations","text":"<ul> <li>None. The function focuses on record deletion and status updates, with no numeric calculations.</li> </ul>"},{"location":"order-entry/BB170P%20Create%20Copies%20of%20Order/Summary%20BB170P%20OCL/#error-handling_1","title":"Error Handling","text":"<ul> <li>Return specific error messages for invalid inputs (e.g., \"INVALID BATCH NO.\", \"BATCH # IN USE\").</li> <li>Stop processing if validation fails, ensuring no partial deletions.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB001%20RPG36/","title":"BB001 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB001%20RPG36/#process-steps-of-the-rpg-program-bb001rpg36txt","title":"Process Steps of the RPG Program (BB001.rpg36.txt)","text":"<p>This RPG III program (BB001) manages the selection, creation, viewing, updating, and deletion of order entry batches. It interacts with the user via workstation screens to handle batch operations before posting. The program is interactive, using screens for input/output and handling paging (roll keys) for batch lists. It is called from the main OCL procedure (BB201.ocl36.txt) in the \"Order Batch Selection\" section, with parameters from the LDA (local data area) like PAR13C (mode, e.g., 'PP' for Viscosity ASN Posts), USER, WSID, PGM ('O' for order entry mode?), and BATCH#.</p> <p>The program executes in a loop based on screen indicators (01, 02, 03 for screens S1, S2, S3), with subroutines for initialization, screen handling, paging, and record operations. High-level process steps:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Clears variables (e.g., CANCEL to blanks, BLIM to 0 for batch limit).</li> <li>Positions to the first record in BBBTCH using SETLL with BLIM.</li> <li>Calls DRLFWD to load initial batch data for display.</li> <li>Sets indicators (83 on for initial roll, 44 off if PGM = 'O' for order entry mode, else on).</li> <li> <p>Runs only once (controlled by 09 off).</p> </li> <li> <p>Main Loop and Screen Handling:</p> </li> <li>Clears indicators (50, 21-24 off) and MSG (message field) at each iteration.</li> <li>Handles cancel: If CANCEL = 'CANCEL' (from KG key or input), sets LR on and exits.</li> <li>Screen 1 (S1 Subroutine): <ul> <li>Displays input screen for batch# (BTCH#X).</li> <li>Validates input: If BTCH#X = 0 (blank/new), proceeds to create new batch.</li> <li>Checks for existing batch: Chains to BBBTCHX using batch#.</li> <li>If exists: Loads details (lock status, user, dates, record count), displays locked description (from COM array based on ABLOCK: blank='AVAILABLE', 'O'='ORD ENTRY', 'L'='PICK LIST', 'B'='BOL PRINT', 'P'='POSTING').</li> <li>Handles delete input (DEL = '4'): Marks ABDEL = 'D', updates BBBTCHX.</li> <li>If locked/in use: Displays error message (e.g., COM,03: 'BATCH # IN USE--PLEASE CHOOSE ANOTHER').</li> </ul> </li> <li>Screen 2 (S2 Subroutine): Displays detailed batch info (batch#, lock desc, WSID, printed status, user, create/update dates, record count). Allows updates (e.g., lock changes).</li> <li> <p>Screen 3 (S3 Subroutine): Similar to S2 but for confirmation or additional views.</p> </li> <li> <p>Paging and Data Loading (ROLLKY, DRLFWD, DRLBAK Subroutines):</p> </li> <li>Handles roll keys: STATUS 01122 for forward (75 on), 01123 for backward (76 on).</li> <li>Forward (DRLFWD): Reads next 10 batches from BBBTCH (loop X=1 to 10), skips deleted (ABDEL='D') or mismatched source (ABSRCE != PAR13C per comment, but revised 10/20/17 to strict != skip).<ul> <li>Loads arrays (BTC, LKD, LKW, PRT, USR, DTE, LUD, #RC).</li> <li>Converts dates (ABDATE/ABLUDT * 100.0001 to MDY).</li> <li>Sets 23 if &lt;10 records loaded.</li> </ul> </li> <li>Backward (DRLBAK): Sets 21 on, tags BAKEND (minimal logic, likely positions to prior records via SETLL).</li> <li> <p>Clears detail arrays (DETCLR) before loading.</p> </li> <li> <p>Batch Creation (In S1):</p> </li> <li>If new (BTCH#X=0 and not exists): Adds record to BBBTCHX (EADD UPDNXB).<ul> <li>Sets defaults: ABDEL blank, ABBTCH='99' (next?), ABLOCK='X', ABLKWS='XX', ABPRTD, ABUSER=USER, ABDATE=DATE (CYMD), ABLUDT, ABREC=0, ABSRCE=PAR13C (JB01), ABNXTB=Z2.</li> <li>Writes with EADD ADDBCH (batch#, PGM, WSID, PRTD, USER, DATE, LUDT, #REC, PAR13C, Z2).</li> </ul> </li> <li> <p>If cannot create (locked): Error message (COM,02: 'CANNOT CREATE A BATCH NOW').</p> </li> <li> <p>Batch Update/Delete (In S1/S2):</p> </li> <li>Update: Chains to BBBTCHX, updates fields (e.g., lock via SAVBCH: SVLOCK/ABLOCK, SVLKWS/ABLKWS; UPDBCH: PGM, WSID, LUDT).</li> <li>Delete: If DEL='4' and not locked, sets ABDEL='D', updates via DELBCH (DEL='D').</li> <li> <p>Release: Via RELBCH (no fields shown, likely clears lock).</p> </li> <li> <p>End of Processing:</p> </li> <li>Exits on cancel (LR on) or user confirmation.</li> <li>Outputs selected batch# to LDA (BATCH# field).</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB001%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Creation: Only if not exists and not locked. Sets initial lock 'X', source from PAR13C (JB01: e.g., 'PP' mode). Cannot create if in use (error COM,02).</li> <li>Batch Selection/Validation: </li> <li>Existing batch must match source (ABSRCE = PAR13C, revised 10/20/17 to skip mismatches).</li> <li>Locked batches: Display status (LKD from COM based on ABLOCK), cannot post if locked (COM,05), cannot delete if locked/in use.</li> <li>Deletion: Requires CMD 4 (DEL='4'), only if not deleted (ABDEL!='D') and not locked. Marks 'D' (soft delete), skips deleted in displays.</li> <li>Locking: Statuses: blank (available), 'O' (order entry), 'L' (pick list), 'B' (BOL print), 'P' (posting). Updates save prior lock (SVLOCK/SVLKWS).</li> <li>Paging/Display: Loads 10 batches at a time (X=1-10), skips deleted/mismatched. Dates in CYMD converted to MDY for display. Record count (#RC=ABREC).</li> <li>Modes: PGM='O' hides some fields (44 off). PAR13C filters batches (e.g., 'PP' skips non-'PP').</li> <li>Errors: Standard messages from COM array (e.g., invalid batch COM,01; in use COM,03; delete prompt COM,04).</li> <li>No Hard Deletes: Uses soft delete ('D'), archives/purges likely elsewhere.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB001%20RPG36/#tables-used-files","title":"Tables Used (Files)","text":"<p>Files are workstation or disk, with keyed access (AI for alternate index).</p> <ul> <li>SCREEN: Combined primary (CP), 600 bytes, workstation file for interactive display/input. Uses WSID, INFDS STAT for status, INFSR ROLLKY for roll keys.</li> <li>BBBTCH: Input (ID), 48 bytes, record address (L 2AI), disk file for batch records (indexed read).</li> <li>BBBTCHX: Update combined (UC), 48 bytes, record address (R 2AI), disk file for batch updates/adds (same as BBBTCH but update-capable).</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB001%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program does not call any external programs (no CALL opcodes). It relies on internal subroutines (e.g., ONETIM, S1, DRLFWD) and file operations.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB005%20RPG36/","title":"BB005 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB005%20RPG36/#process-steps-of-the-rpg-program-bb005rpg36txt","title":"Process Steps of the RPG Program (BB005.rpg36.txt)","text":"<p>This RPG III program (BB005) releases or posts a selected order entry batch by updating the batch control record in BBBTCH. It is called from the main OCL procedure (BB201.ocl36.txt) in the \"Release Batch\" section at the end, after processing/unlocking orders. The program chains to the batch record using the batch number from the LDA (local data area) and conditionally updates fields based on the program mode (PGM). It uses exception outputs (EXCPT) to perform the updates, which modify specific positions in the record (e.g., lock status, delete flag, printed flag, record count). The process is non-interactive and executes once per call.</p> <p>High-level process steps:</p> <ol> <li>Record Lookup:</li> <li>Chains to BBBTCH using BATCH# (from UDS positions 490-491) as the key.</li> <li> <p>If the record is not found (indicator 99 on), no action is taken (DO block skipped).</p> </li> <li> <p>Conditional Update Based on Mode (If Record Found, N99):</p> </li> <li>Checks the PGM value (from UDS position 504):<ul> <li>If 'O' (likely order entry mode): Executes EXCPT REL to release the batch.</li> <li>If 'L' (likely pick list mode): Executes EXCPT PICK to release after pick list.</li> <li>If 'B' (likely BOL print mode): Executes EXCPT BOL to release after BOL printing.</li> <li>If 'P' (post mode): Executes EXCPT POST to mark as posted and deleted.</li> <li>Default (any other PGM): Falls back to EXCPT REL.</li> </ul> </li> <li> <p>Each EXCPT updates the BBBTCH record by writing specific values to positions:</p> <ul> <li>REL/PICK: Position 6 = ' ' (clear lock?), 8 = '  ' (clear WSID?), 39 = RECCNT (update record count from UDS 475-482).</li> <li>BOL: Same as REL but position 9 = 'Y' (BOL printed flag).</li> <li>POST: Position 1 = 'D' (delete flag), 6 = 'P' (posted flag), 39 = RECCNT.</li> </ul> </li> <li> <p>End of Processing:</p> </li> <li>Sets LR on to end the program.</li> <li>No further actions; the update is committed via the exception output.</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB005%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Batch Update Logic:</li> <li>Only updates if the batch record exists (N99).</li> <li>Clears locks/WSID (positions 6 and 8) for release modes ('O', 'L', 'B', default), allowing the batch to be reused or deleted.</li> <li>Marks BOL printed ('Y' in position 9) only for 'B' mode.</li> <li>For posting ('P'): Soft-deletes the batch ('D' in position 1) and marks as posted ('P' in position 6), preventing further use.</li> <li>Always updates the record count (ABREC in position 39) with RECCNT from LDA, reflecting the final count after processing.</li> <li>Modes (PGM):</li> <li>'O': Release after order entry (clear locks).</li> <li>'L': Release after pick list generation.</li> <li>'B': Release after BOL printing, with printed flag.</li> <li>'P': Post batch (delete and mark posted).</li> <li>Other: Default to basic release.</li> <li>No Validation/Errors: Assumes valid BATCH# and PGM from caller (OCL/LDA). No explicit error handling beyond not-found (99 on, skipped).</li> <li>Atomic Update: Uses exception outputs for targeted position updates, ensuring minimal changes.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB005%20RPG36/#tables-used-files","title":"Tables Used (Files)","text":"<p>The program uses one disk file, defined in the F-specs:</p> <ul> <li>BBBTCH: Update combined (UC), 48 bytes, record address type (R 2AI), disk file. Batch control records, chained and updated via exception outputs.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB005%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program contains no CALL opcodes or references to external programs. It operates independently using file I/O and internal logic.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB104B%20RPGLE/","title":"BB104B RPGLE","text":""},{"location":"order-entry/BB201%20Order%20Post/BB104B%20RPGLE/#process-steps-of-the-rpg-program-bb104brpgletxt","title":"Process Steps of the RPG Program (BB104B.rpgle.txt)","text":"<p>This RPGLE program (BB104B) handles the cancellation or reactivation of open orders by archiving cancelled orders to history files (prefixed \"bbcn\") and optionally deleting them from open order files (prefixed \"bbord\"). It processes transaction records from a batch file (bbortr) to determine actions. The program is parameterized: p$fgrp ('G' or 'Z' for file group/library overrides) and p$flag (e.g., '0' for delete mode). It uses data structures to copy records verbatim during archiving. The process is driven by reading the primary input (bbortr) in a loop until EOF, with subroutines for checking archival needs, performing archives, and deletions.</p> <p>High-level process steps:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: p$fgrp (file group for overrides) and p$flag (return flag, controls delete behavior).</li> <li>Executes OVRDBF commands via QCMDEXC for file overrides on 11 tables (e.g., bbordh, bbcnh) if p$fgrp is 'G' or 'Z', setting SHARE(*NO).</li> <li>Opens all files (bbordh for input, bbcn* for update/add).</li> <li> <p>Defines keys (e.g., klordh for company + order#) and data structures (wkcnh, etc.) mirroring file formats with prefixes (h_, ds_, etc.).</p> </li> <li> <p>Main Processing Loop (Reading bbortr):</p> </li> <li>Reads records from bbortr (primary input, NS 01 for headers).</li> <li>Parses record type using indicators and field values (e.g., NS 01: header; NS 02: detail; NS 03: misc; NS 04: order marks; NS 05: invoice marks; NS 06: BOL marks).</li> <li>For headers (01): <ul> <li>Extracts keys (toco, toordn, tocoor, toky11).</li> <li>Calls subroutine chkordarc to check if archival is needed (sets w$arc = *ON if cancelled in bbordh but not in transaction).</li> <li>If w$arc = *ON: Clears bbcnh record, copies transaction data (t$orh) to wkcnh, sets h_bodel = 'A' (active archive), writes to bbcnh.</li> <li>Calls arcnonprm to archive supplemental/non-primary records (taxes, headers/details/accessorials from bbtrtx, bboths1, bbotds1, bbota1 to corresponding bbcn* files).</li> </ul> </li> <li>For details (02): If w$arc = *ON, clears bbcnd, copies t$ord to wkcnd, writes to bbcnd.</li> <li>For misc (03): If w$arc = *ON, clears bbcnm, copies t$orm to wkcnm, writes to bbcnm.</li> <li>For order marks (04): If w$arc = *ON, clears bbcno, copies t$oro to wkcno, writes to bbcno.</li> <li>For invoice marks (05): If w$arc = *ON, clears bbcni, copies t$ori to wkcni, writes to bbcni.</li> <li> <p>For BOL marks (06): If w$arc = *ON, clears bbcnb, copies t$orb to wkcnb, writes to bbcnb.</p> </li> <li> <p>Archival Check Subroutine (chkordarc):</p> </li> <li>Chains to bbordh using klordh (company + order#).</li> <li> <p>If found and BOCANC = 'Y' (cancelled) but todel != 'D' (not deleted in transaction), sets w$arc = *ON.</p> </li> <li> <p>Non-Primary Archival Subroutine (arcnonprm):</p> </li> <li>For taxes (bbtrtx): SETLL/READ loop by toky11, copies matching records (t$ortx) to wkcntx, writes to bbcntx.</li> <li>For supplemental headers (bboths1): SETLL/READ loop by toky11, copies (t$orhs) to wkcnhs, writes to bbcnhs.</li> <li>For supplemental details (bbotds1): SETLL/READ loop by k$hkey (company + order#), copies (t$ords) to wkcnds, writes to bbcnds.</li> <li> <p>For accessorials (bbota1): SETLL/READ loop by k$hkey, copies (t$ora) to wkcna, writes to bbcna.</p> </li> <li> <p>Deletion from Open Orders (If p$flag = '0'):</p> </li> <li>Calls delopenord subroutine.</li> <li>Deletes header from bbordh (chain/delete).</li> <li>Deletes details from bbordd (SETLL/READE loop, delete).</li> <li>Deletes misc from bbordm (SETLL/READE loop, delete).</li> <li>Deletes marks from bbordo, bbordi, bbordb (SETLL/READE loop, delete each).</li> <li>Deletes taxes from bbortx (SETLL/READE loop, delete).</li> <li>Deletes supplementals from bborhs1 (SETLL/READ loop, delete by key match).</li> <li> <p>Deletes from bbords1, bbora1 similarly (SETLL/READ loop, delete by key match).</p> </li> <li> <p>End of Processing:</p> </li> <li>Continues until EOF on bbortr.</li> <li>No explicit close, but files are opened with USROPN, so closed at program end.</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB104B%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Archival Trigger: Archives only if the order exists in bbordh, is marked cancelled (BOCANC = 'Y'), and is not a transaction delete (todel != 'D'). Sets archive flag (w$arc) for the order.</li> <li>Record Copying: Uses external data structures (EXTNAME with PREFIX) to copy entire records verbatim from transaction/open files to archive files, with minimal changes (e.g., h_bodel = 'A' for active archive).</li> <li>Deletion Mode: Controlled by p$flag = '0' (likely from OCL parameter '0'). Deletes all related records from open order files after archiving, ensuring no remnants.</li> <li>File Overrides: Applies OVRDBF SHARE(*NO) to 11 files if p$fgrp is 'G' or 'Z', preventing shared access during updates.</li> <li>Key Matching: All operations use company + order# (tocoor) as primary key for chaining/SETLL/READ. Supplemental files use partial keys (e.g., k$hkey for headers).</li> <li>No Validation/Errors: Minimal error handling (e.g., *IN99 for EOF/not found). Assumes valid input; no business validations beyond existence/cancel flag.</li> <li>Archival Integrity: Archives all related records (headers, details, misc, marks, taxes, supplementals) atomically per order.</li> <li>Reactivation: Implied but not explicit; if not cancelled, no action (skips archival/deletion).</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB104B%20RPGLE/#tables-used-files","title":"Tables Used (Files)","text":"<p>Files are disk-based, with keyed access (AIDISK). Prefixes distinguish open (bbord/bbor/bbot) vs. archived (bbcn) files.</p> <ul> <li>bbortr: Input primary (IP), keyed (11AI), transaction batch (headers/details/marks).</li> <li>bbtrtx: Input (IF), keyed (11AI), transaction taxes.</li> <li>bboths1: Input (IF), keyed (8AI), supplemental transaction headers.</li> <li>bbotds1: Input (IF), keyed (11AI), supplemental transaction details.</li> <li>bbota1: Input (IF), keyed (13AI), transaction accessorials.</li> <li>bbordh: Input (IF E), open order headers (chained for cancel check).</li> <li>bbcnh: Update/Add (UF A E), archived order headers.</li> <li>bbcnhs: Update/Add (UF A E), archived supplemental headers.</li> <li>bbcnd: Update/Add (UF A E), archived order details.</li> <li>bbcnds: Update/Add (UF A E), archived supplemental details.</li> <li>bbcnm: Update/Add (UF A E), archived misc lines.</li> <li>bbcno: Update/Add (UF A E), archived order entry marks.</li> <li>bbcnb: Update/Add (UF A E), archived BOL marks.</li> <li>bbcni: Update/Add (UF A E), archived invoice marks.</li> <li>bbcna: Update/Add (UF A E), archived accessorials.</li> <li>bbcntx: Update/Add (UF A E), archived tax overrides.</li> </ul> <p>Note: Deletion logic references additional files not in F-specs (e.g., bbordd, bbordm, bbordo, bbordi, bbordb, bbortx, bborhs1, bbords1, bbora1), but implied as overridden/aliased.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB104B%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>QCMDEXC: System program called to execute OVRDBF commands for file overrides. Parameters: command string (dbov##, 80 chars) and length (dbol##, 15.5). No other external calls.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB117%20RPGLE/","title":"BB117 RPGLE","text":""},{"location":"order-entry/BB201%20Order%20Post/BB117%20RPGLE/#process-steps-of-the-rpg-program-bb117rpgletxt","title":"Process Steps of the RPG Program (BB117.rpgle.txt)","text":"<p>This RPGLE program (BB117) updates the customer order history files for line items, handling additions, updates, deletions, and reactivations. It is designed to prevent duplicate orders by logging order details for checking (referenced in comments for BB115). The program is parameterized for flexibility and uses file overrides based on environment (p$fgrp = 'G' or 'Z' for library groups). It is called from BB201 (the main posting program) when deleting line items (per DC02/JB12 modifications: only on delete code 'D'). The process is driven by entry parameters (p$mode for action, p$flag for flags like duplicate override, p$dpok for message handling), with subroutines for each mode. Note: The provided code is truncated (e.g., in updoh and actoh subroutines), so some details are inferred from patterns in similar programs and visible logic.</p> <p>High-level process steps, executed once per call:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters via p$elist DS (company p$co, order# p$rdno, seq# p$rseq, customer p$cust, ship-to p$ship, PO# p$pord, order date p$ord8, product p$prod, container p$cntr, qty p$qty, batch p$btch, message flag p$dpok, mode p$mode, file group p$fgrp, flag p$flag).</li> <li>Captures system time/date (PSDS for user, date, time; TIME opcode for t#time DS).</li> <li>Converts dates to CYMD format (t#cymd).</li> <li>Defines keys (kloh for company + order# + seq# on BBOH; klohms adds dates; klohhdr for company + order#).</li> <li> <p>Executes opntbl1 to apply OVRDBF (via QCMDEXC) and open BBOH.</p> </li> <li> <p>Main Processing (SELECT on p$mode):</p> </li> <li>'UPD' (Update/Add Line Item):<ul> <li>Calls updoh: Chains to BBOH using kloh.</li> <li>If not found (99 on): Clears record, moves parm values to fields (via movfldval: bhco=p$co, bhrdno=p$rdno, etc.), sets add user/date (bhusad=ps#usr, bhsdad=t#cymd), writes new record.</li> <li>If found: Sets update user/date (bhusud=ps#usr, bhsdud=t#cymd), updates record.</li> <li>If p$dpok = 'Y' (duplicate poke/override?): Calls updohms after opntbl2 (opens BBOHMS).</li> <li>Chains to BBOHMS using klohms (includes start/add dates).</li> <li>If found and p$flag='0': Updates message (bhmess = com(01): 'Possible Duplicates Accepted').</li> <li>If not found: Adds new record with message.</li> </ul> </li> <li>'DEL' (Delete):<ul> <li>If p$rseq = 0 (entire order): Calls delohall.</li> <li>SETLL on klohhdr (company + order#) for BBOH, READE loop, deletes matching records.</li> <li>Similar for BBOHMS after opntbl2.</li> <li>If p$rseq &lt;&gt; 0 (single line): Calls delohrec.</li> <li>Chains to BBOH using kloh, deletes if found.</li> <li>SETLL on kloh for BBOHMS, READE loop with klohhdr, deletes matching messages.</li> </ul> </li> <li> <p>'ACT' (Reactivate):</p> <ul> <li>Calls actoh: SETLL on klohhdr for BBOH, READE loop, sets bhstat='A' (active), updates.</li> <li>Similar for BBOHMS, likely sets bhstad to current date (truncated, but inferred as reactivation timestamp).</li> </ul> </li> <li> <p>File Handling Subroutines (opntbl1, opntbl2):</p> </li> <li>If p$fgrp = 'G' or 'Z': Loops to apply OVRDBF SHARE(NO) from arrays (ovg/ovz) via QCMDEXC (e.g., TOFILE(LIBL/GBBOH) for G).</li> <li> <p>Opens BBOH (opntbl1) or BBOHMS (opntbl2).</p> </li> <li> <p>End of Processing:</p> </li> <li>Closes all files (CLOSE *ALL).</li> <li>Sets LR on and returns.</li> <li>No output; updates are in-place.</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB117%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Modes (p$mode):</li> <li>'UPD': Adds new history if not exists, updates existing (timestamps/user). Adds 'Possible Duplicates Accepted' message to BBOHMS if p$dpok='Y' and p$flag='0' (override allowed duplicates).</li> <li>'DEL': Deletes entire order history (p$rseq=0) or specific line + messages (p$rseq&lt;&gt;0). Ensures no remnants for cancelled/deleted items.</li> <li>'ACT': Reactivates by setting status 'A' (and likely updating dates), for order revivals.</li> <li>Duplicate Prevention: Logs details (customer, ship-to, PO, date, product, container, qty, batch) for BB115 checks. Message added on overrides.</li> <li>File Environments: p$fgrp='G' (GBBOH/GBBOHMS) or 'Z' (ZBBOH/ZBBOHMS) for segregated libraries (e.g., prod/test). Overrides ensure exclusive access (SHARE(*NO)).</li> <li>Timestamps/Users: Always stamps add/update with current user (ps#usr) and CYMD date (t#cymd). No changes without timestamp.</li> <li>Deletions: Hard deletes (no soft flags). Matches by full key for lines, header key for orders.</li> <li>No Validation: Assumes valid parms; no business checks beyond existence (99). Errors via PSDS (ps#err), but not handled explicitly.</li> <li>Testing: Commented parms for standalone testing (e.g., p$co=10, p$rdno=999999).</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB117%20RPGLE/#tables-used-files","title":"Tables Used (Files)","text":"<p>Files are disk-based, keyed, user-open (USROPN), with add/update capabilities.</p> <ul> <li>BBOH: Update/Add (UF A E), keyed disk. Customer order history (main details: company, order#, seq#, customer, ship-to, PO, date, product, container, qty, batch, status, users/dates).</li> <li>BBOHMS: Input/Add (IF A E), keyed disk. Order history messages/supplemental (e.g., duplicate notes, timestamps).</li> </ul> <p>Overrides may alias to GBBOH/GBBOHMS or ZBBOH/ZBBOHMS based on p$fgrp.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB117%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>QCMDEXC: System program called to execute OVRDBF commands for file overrides. Parameters: command string (dbov##, 80 chars) and length (dbol##, 15.5). Used in opntbl1/opntbl2. No other calls.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB198%20RPG36/","title":"BB198 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB198%20RPG36/#process-steps-of-the-rpg-program-bb198rpg36txt","title":"Process Steps of the RPG Program (BB198.rpg36.txt)","text":"<p>This RPG III program (BB198) performs credit authorization for orders in a sorted transaction batch. It processes order headers and details to calculate values, retrieve descriptions, check for deletions/backorders, update customer order status, and generate a printed report (Credit Authorization Report) for review. The input is from a pre-sorted file (?9?BB198S from #GSORT in the OCL), ensuring headers come first, followed by marks and details. The program loops through records, applying calculations and validations, and outputs a report with order details and totals. It is called from the main OCL procedure (BB201.ocl36.txt) in the \"Credit Authorization\" section after sorting.</p> <p>High-level process steps, executed in a level-break structure (L3 for company/customer changes, L1 for order changes):</p> <ol> <li>Initialization and Setup:</li> <li>Clears indicators (e.g., 10-17, 60-80) and totals (L1TOTL, L3TOTL set to zero).</li> <li> <p>Prepares keys for chaining (e.g., BOKEY from positions 2-12).</p> </li> <li> <p>Header Record Processing (NS 01, Level L3):</p> </li> <li>Reads header records from BBORTR.</li> <li>Skips if deleted (BODEL = 'D').</li> <li>Chains to SHIPTO using SHPKEY (customer + ship-to) for ship-to details.</li> <li>Chains to GSTABL using TRMKEY ('ARTERM' + BOTERM) for terms description (TRMDES); defaults to TBDESC if not found.</li> <li>Chains to ARCUST using COCUST (company + customer) for customer name (ARNAME).</li> <li>Prints header line (ORDLNE) with order#, customer#, name, dates, PO#, terms.</li> <li>Sets indicator 26 if BOTYPE = 'R' (credit invoice; formerly included 'M' per JB02 removal).</li> <li> <p>Sets up detail reading: SETLL on BBORTA using OKEY11 (order# + '001'), then reads details in a loop until EOF or mismatch.</p> </li> <li> <p>Detail Line Processing (Loop within Header):</p> </li> <li>Reads details from BBORTA.</li> <li>Skips if end-of-details (31 on), seq# &gt; 899 (misc lines?), deleted (BDDEL = 'D'), or key mismatch (customer/order# != header).</li> <li>Adjusts quantity negative if credit invoice (26 on: BDQTY * -1).</li> <li>Sets 28 if no charge (BDNOCH = 'Y'), zeros BDTOTL in that case.</li> <li>Calculates line total (BDTOTL):<ul> <li>Builds CUKEY (company + product + container + UM).</li> <li>Chains to GSCTUM for conversion factor (CUCVFA).</li> <li>Converts qty (multiply/divide by CUCVFA based on CUOPER = 'M').</li> <li>Multiplies converted qty by price (BDPRCE).</li> </ul> </li> <li>Adds BDTOTL to order total (L1TOTL) and company total (L3TOTL).</li> <li>Retrieves product description:<ul> <li>Chains to GSPROD using KLPROD (company + product; replaces GSTABL per JK01).</li> <li>Uses custom desc (BDCPDS) if provided; else alternate (TPALTD/TPDESC) or standard (TPDESC).</li> <li>Sets 54 if two description lines needed.</li> </ul> </li> <li> <p>Prints detail line (DTLLNE) with billed customer (CSBMCU), description(s), container, qty, value.</p> </li> <li> <p>Status Update (Subroutine CUSSTS):</p> </li> <li>Chains to CUSORD using KEY14 (company + customer + order#).</li> <li>Determines status (XXSTAT):<ul> <li>Sets 86 if backorder (BOSHP# = 1).</li> <li>'RO' (Revised Order) if not backorder/exists/no-cancel.</li> <li>'AO' (Active Order) if not backorder/new/no-cancel.</li> <li>'RB' (Revised Backorder) if backorder/exists/no-cancel.</li> <li>'AB' (Active Backorder) if backorder/new/no-cancel.</li> <li>'CN' (Cancelled Order) if cancelled (60 on, not shown in code but implied).</li> </ul> </li> <li> <p>No explicit write/update in code snippet, but implies update to CUSORD.</p> </li> <li> <p>Totals and Report Printing:</p> </li> <li>At L1 break (order change): Prints order value total if printed (N92 per JB01), status message, type.</li> <li>At L3 break (company/customer change): Prints total order value.</li> <li>Handles overflow (OF) for page headers.</li> <li> <p>Prints report headers (HDRLNE) with company name, dates, times, page#.</p> </li> <li> <p>End of Processing:</p> </li> <li>Continues until EOF on BBORTR.</li> <li>No explicit error handling beyond not-found indicators (e.g., 91 for ARCUST).</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB198%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Deletions and Skips:</li> <li>Skips deleted headers/details (BODEL/BDDEL = 'D').</li> <li>Ignores detail lines with seq# &gt; 899 (likely misc/accessorials).</li> <li>Mismatches in customer/order# between header/detail end processing.</li> <li>Order Types:</li> <li>'R' flags credit invoice (26 on): Negates quantities for returns/credits.</li> <li>Removed 'M' (cash return, reused for product move) and 'C' (cash sale) from credit flagging (JB02).</li> <li>Calculations:</li> <li>Line totals exclude no-charge items (BDNOCH = 'Y').</li> <li>Quantity conversions use GSCTUM factors (multiply/divide based on operation).</li> <li>Totals accumulate only printed orders (JB01: No totals if no details printed).</li> <li>Descriptions:</li> <li>Prioritizes custom (BDCPDS), then alternate (TPALTD/TPDESC), then standard from GSPROD (JK01 update).</li> <li>Prints two lines if alternate/standard differ (54 on).</li> <li>Status Updates (CUSORD):</li> <li>Based on existence (85 off = exists), backorder (86 on), cancel (60 on).</li> <li>'Revised' for existing, 'Active' for new; append 'Backorder' if applicable; 'Cancelled' overrides.</li> <li>Report:</li> <li>Printed for authorization review, includes values for credit checks.</li> <li>No totals if no orders/details (JB01).</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB198%20RPG36/#tables-used-files","title":"Tables Used (Files)","text":"<p>Files are disk or printer, with keyed access where specified.</p> <ul> <li>BBORTR: Input primary (IP) - Sorted transaction headers.</li> <li>BBORTA: Input (IF) - Transaction details (setll/read).</li> <li>BICONT: Input combined (IC) - Company/container info (not explicitly chained in snippet, but listed).</li> <li>ARCUST: Input combined (IC) - A/R customer master (name).</li> <li>GSCTUM: Input (IF) - Conversion units master (factors).</li> <li>GSTABL: Input fixed (IF) - General tables (terms desc; partially replaced).</li> <li>CUSORD: Input combined (IC) - Customer order status (chained/updated).</li> <li>SHIPTO: Input combined (IC) - Ship-to master.</li> <li>GSPROD: Input fixed (IF) - Product master (descriptions; JK01 addition).</li> <li>LIST: Output (O) - Printer file for Credit Authorization Report.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB198%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program does not call any external programs (no CALL opcodes in the code). It relies on internal subroutines (HDR, CUSSTS) and file operations.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/","title":"BB201 OCL","text":""},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>This OCL (Operations Control Language) script appears to be a batch processing routine for an IBM midrange system (e.g., AS/400 or iSeries), designed to handle order entry posting. It manages order batches, performs checks, sorts data, authorizes credits, posts orders, handles cancellations/reactivations, unlocks records, and releases batches. The script uses placeholders like <code>?9?</code> (likely a library prefix), <code>?20?</code> (batch identifier), <code>?13?</code> (mode selector: blank for standard order post, 'PP' for viscosity ASN posts, 'PM' for product moves posts), and <code>?USER?</code>, <code>?WS?</code> (user/workstation identifiers). The process is conditional and interactive, with pauses for user input and error handling.</p> <p>The high-level steps are as follows:</p> <ol> <li>Initial Activity Check:</li> <li>Check if another instance of the process (ACTIVE-BB201) is running.</li> <li> <p>If active, display a message indicating the post is in progress, instruct the user to try again later, pause for cancellation input (press 0, Enter to cancel), and return/exit if active.</p> </li> <li> <p>Order Batch Selection:</p> </li> <li>Set local variables for offsets and data (e.g., OFFSET-470 to '?13?', OFFSET-494 to '?USER?', OFFSET-502 to '?WS?', OFFSET-504 to 'P').</li> <li>Based on <code>?13?</code> value, set a display message (e.g., ' ORDER POST ' for blank, ' VISCOSITY ASN POSTS ' for 'PP', ' PRODUCT MOVES POSTS ' for 'PM').</li> <li>Turn off switch 1 (for deleting a batch).</li> <li>Load program BB001.</li> <li>Define files BBBTCH and BBBTCHX (both labeled <code>?9?BBBTCH</code>, shared disposition).</li> <li>Run the program.</li> <li>If input at location '121,6' is 'CANCEL', return/exit.</li> <li> <p>Evaluate P20 from input at '490,2'.</p> </li> <li> <p>User Option to Cancel Posting:</p> </li> <li>Display 'ORDER ENTRY POST EXECUTING'.</li> <li>Check if file <code>?9?BBOR?20?</code> exists and has data.</li> <li>If no data, display 'NO BATCH ?20? TO POST AT THIS TIME', pause with 'PROCEDURE IS CANCELLED', and jump to the end.</li> <li> <p>Pause for user input: Press ATTN, 2, Enter to cancel; press 0, Enter to continue. Set attributes to cancel-no, inquiry-yes.</p> </li> <li> <p>Credit Authorization Preparation and Execution:</p> </li> <li>Load utility #GSORT.</li> <li>Define input file as <code>?9?BBOR?20?</code> (shared).</li> <li>Define output file as <code>?9?BB198S</code> (records 999000, extendable, retain job).</li> <li>Run the sort with specific parameters:<ul> <li>Sort on fields like 21A, 3X 512 N.</li> <li>Include conditions (e.g., positions 144-149 &gt; C000000, 10-12 = C000).</li> <li>Force sequence: Company (2-3), Customer (144-149), Order (4-9), Container (121-123), Seq# (10-12).</li> <li>Drop full records (1-256 and 257-512).</li> <li>Note: This sorts headers first, then marks, then details due to record type positioning.</li> </ul> </li> <li>End the sort.</li> <li>Load program BB198.</li> <li>Define multiple files (e.g., BBORTR as <code>?9?BB198S</code>, BBORTA as <code>?9?BBOR?20?</code>, BBORDRH as <code>?9?BBORDH</code>, and others like BBORDRD, BBORDRO, BBORDRI, BBORDRB, BBORDRM, BICONT, ARCUST, GSCTUM, GSTABL, CUSORD, SHIPTO, GSPROD, all shared).</li> <li>Define printer LIST on device P5, priority 0.</li> <li> <p>Run the program.</p> </li> <li> <p>Order Entry Posting:</p> </li> <li>Load program BB201.</li> <li>Define files (e.g., BBORTR as <code>?9?BBOR?20?</code>, BBOTHS1 as <code>?9?BBOTHS1</code>, BBOTDS1 as <code>?9?BBOTDS1</code>, BBOTA1 as <code>?9?BBOTA1</code>, BBTRTX as <code>?9?BBOX?20?</code>, and many others like BBORDRH, BBORHS1, BBORDRD, BBORDS1, BBORDRM, BBORDRO, BBORDRI, BBORDRB, BBORA1, BBORTX, BICONT, ARCUST, GSCTUM, GSTABL, CUSORD, BBORCL, BBORHHS, BBORDHS, BBORMHS, GSPROD, BBOH, BBOHMS, all shared).</li> <li>Define printers LIST on P5 (priority 0) and LISTOUT3 on PJ (priority 0).</li> <li>Run the program.</li> <li>Override database files (e.g., BBORTR to <code>?9?BBOR?20?</code>, BBTRTX to <code>?9?BBOX?20?</code>, BBOTHS1 to <code>?9?BBOTHS1</code>, BBOTDS1 to <code>?9?BBOTDS1</code>, BBOTA1 to <code>?9?BBOTA1</code>).</li> <li>Call external program BB104B with parameters <code>?9?</code> and '0'.</li> <li>Delete all overrides.</li> <li> <p>If <code>?13?</code> is 'PP', skip to 'SKIP' tag; otherwise, call BB202 with parameters (,,,,,,,?9?,,,,,,,,,,,?20?) to create spool files for emailing orders on hold.</p> </li> <li> <p>Remove Order Lockout Fields:</p> </li> <li>Display 'UNLOCKING OPEN ORDERS'.</li> <li>Load program BB215.</li> <li>Define files BBORTR as <code>?9?BBOR?20?</code> and BBORDRH as <code>?9?BBORDH</code> (both shared).</li> <li> <p>Run the program to unlock records in the open orders file.</p> </li> <li> <p>Release Batch and Cleanup:</p> </li> <li>Jump to 'END' tag.</li> <li>Set local OFFSET-475 to '?F'A,?9?BBOR?20?'?' (likely checking file attributes).</li> <li>Load program BB005.</li> <li>Define file BBBTCH as <code>?9?BBBTCH</code> (shared).</li> <li>Run the program to release the batch.</li> <li>Blank all local variables.</li> <li>Delete files BBOR?20? and BBOX?20? using GSDELETE utility from library ?9?.</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The script loads and runs several programs (via <code>LOAD</code> and <code>RUN</code>), calls others directly (via <code>CALL</code>), and references one in a comment. Here's the list:</p> <ul> <li>BB001: Loaded and run for order batch selection.</li> <li> </li> <li>BB198: Loaded and run for credit authorization processing.</li> <li>BB201: Loaded and run for the main order entry post.</li> <li>BB104B: Called (with parameters ?9? and '0') for open order cancellation or reactivation, archiving canceled orders.</li> <li>BB202: Called (with parameters ,,,,,,,?9?,,,,,,,,,,,?20?) conditionally if ?13? is not 'PP', to create spool files for emailing orders on hold.</li> <li>BB215: Loaded and run to remove order lockout fields.</li> <li>BB005: Loaded and run to release the batch.</li> <li>BB117: Referenced in a comment (\"FOR CALLED PGM: BB117\") but not explicitly called or loaded in this script.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#gsort-loaded-and-run-as-a-sorting-utility-for-credit-authorization-preparation","title":"GSORT: Loaded and run as a sorting utility for credit authorization preparation.","text":""},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script defines numerous files (tables/datasets) across different steps, all with shared disposition (<code>DISP-SHR</code>) unless noted. Many are prefixed with <code>?9?</code> (library) and use <code>?20?</code> for batch-specific naming. Here's a comprehensive list, grouped by usage context for clarity:</p>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#batch-selection","title":"Batch Selection:","text":"<ul> <li>BBBTCH (label: ?9?BBBTCH)</li> <li>BBBTCHX (label: ?9?BBBTCH)</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#credit-authorization-sort","title":"Credit Authorization (Sort):","text":"<ul> <li>INPUT (label: ?9?BBOR?20?)</li> <li>OUTPUT (label: ?9?BB198S, records: 999000, extend: 999000, retain: J)</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#credit-authorization-main","title":"Credit Authorization (Main):","text":"<ul> <li>BBORTR (label: ?9?BB198S)</li> <li>BBORTA (label: ?9?BBOR?20?)</li> <li>BBORDRH (label: ?9?BBORDH)</li> <li>BBORDRD (label: ?9?BBORDD)</li> <li>BBORDRO (label: ?9?BBORDO)</li> <li>BBORDRI (label: ?9?BBORDI)</li> <li>BBORDRB (label: ?9?BBORDB)</li> <li>BBORDRM (label: ?9?BBORDM)</li> <li>BICONT (label: ?9?BICONT)</li> <li>ARCUST (label: ?9?ARCUST)</li> <li>GSCTUM (label: ?9?GSCTUM)</li> <li>GSTABL (label: ?9?GSTABL)</li> <li>CUSORD (label: ?9?CUSORD)</li> <li>SHIPTO (label: ?9?SHIPTO)</li> <li>GSPROD (label: ?9?GSPROD)</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#order-entry-post","title":"Order Entry Post:","text":"<ul> <li>BBORTR (label: ?9?BBOR?20?)</li> <li>BBOTHS1 (label: ?9?BBOTHS1)</li> <li>BBOTDS1 (label: ?9?BBOTDS1)</li> <li>BBOTA1 (label: ?9?BBOTA1)</li> <li>BBTRTX (label: ?9?BBOX?20?)</li> <li>BBORDRH (label: ?9?BBORDH)</li> <li>BBORHS1 (label: ?9?BBORHS1)</li> <li>BBORDRD (label: ?9?BBORDD)</li> <li>BBORDS1 (label: ?9?BBORDS1)</li> <li>BBORDRM (label: ?9?BBORDM)</li> <li>BBORDRO (label: ?9?BBORDO)</li> <li>BBORDRI (label: ?9?BBORDI)</li> <li>BBORDRB (label: ?9?BBORDB)</li> <li>BBORA1 (label: ?9?BBORA1)</li> <li>BBORTX (label: ?9?BBORTX)</li> <li>BICONT (label: ?9?BICONT)</li> <li>ARCUST (label: ?9?ARCUST)</li> <li>GSCTUM (label: ?9?GSCTUM)</li> <li>GSTABL (label: ?9?GSTABL)</li> <li>CUSORD (label: ?9?CUSORD)</li> <li>BBORCL (label: ?9?BBORCL)</li> <li>BBORHHS (label: ?9?BBORHHS)</li> <li>BBORDHS (label: ?9?BBORDHS)</li> <li>BBORMHS (label: ?9?BBORMHS)</li> <li>GSPROD (label: ?9?GSPROD)</li> <li>BBOH (label: ?9?BBOH)  // For called PGM BB117</li> <li>BBOHMS (label: ?9?BBOHMS)  // For called PGM BB117</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#remove-order-lockout","title":"Remove Order Lockout:","text":"<ul> <li>BBORTR (label: ?9?BBOR?20?)</li> <li>BBORDRH (label: ?9?BBORDH)</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20OCL/#release-batch","title":"Release Batch:","text":"<ul> <li>BBBTCH (label: ?9?BBBTCH)</li> </ul> <p>Note: Files like BBOR?20? and BBOX?20? are temporary/batch-specific and are deleted at the end via GSDELETE. Printers (LIST, LISTOUT3) are also defined but are output devices, not tables.</p>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20RPG36/","title":"BB201 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB201%20RPG36/#process-steps-of-the-rpg-program-bb201","title":"Process Steps of the RPG Program (BB201)","text":"<p>This RPG program (likely RPG III or RPG/400 for IBM iSeries/AS/400) is responsible for updating open orders based on transaction data from an order entry batch. It processes header, detail, miscellaneous (misc), and marks/remarks records, performing additions, updates, and deletions on various order-related files. The program acts as the core \"posting\" logic in the order entry system, handling business data like quantities, prices, taxes, freight, and statuses. It includes extensive modifications over time (e.g., JB05 for new fields, JB21 for freight-related deletions) to accommodate evolving business needs, such as customer-owned products, incoterms, rush orders, and history tracking.</p> <p>The program reads sequentially from the primary input file BBORTR (transaction file) and uses level indicators (L1-L3) and matching records (M1-M3) for processing hierarchies (header \u2192 details/misc/marks). It uses indicators (e.g., 01 for header, 02 for detail) to control flow. Key steps are conditional on whether records are new (add), existing (update), or marked for deletion (delete code 'D').</p> <ol> <li>Initialization and Setup:</li> <li>Define files, fields, and arrays (e.g., BTA and BFA arrays for tax amounts).</li> <li>Read the first record from BBORTR.</li> <li>Clear accumulators and work fields (e.g., totals for products, misc, freight, order via CLRHDS subroutine).</li> <li> <p>Prepare keys for chaining (lookup) to existing order files.</p> </li> <li> <p>Header Record Processing (Indicator 01):</p> </li> <li>Identify header records (positions 10-12 = '000').</li> <li>Chain to BBORDRH (open order header) using company/order#/seq#.</li> <li>If not found (new order): Add a record to BBORDRH with status 'A' and order flag 'Y'. Copy all header fields (e.g., customer, ship-to, dates, terms, freight code).</li> <li>If found (existing order): Update specific fields (e.g., customer, ship-to, dates, terms, salesman, carrier, incoterms, totals).</li> <li>Handle supplemental header (BBORHS1): Add or update fields like totals (product, misc, freight, order), freight details.</li> <li>If calculate freight (BOCAFR) = 'N': Delete misc records with seq# 943 (CYY service charge) and 950 (separate surcharge) from BBORDRM to handle freight term changes.</li> <li>Delete from BBOTHS1 (transaction supplemental) if applicable.</li> <li> <p>Write history to BBORHHS with timestamp, user ID, and workstation ID.</p> </li> <li> <p>Detail Line Processing (Indicator 02):</p> </li> <li>Identify detail records (position 10 not '9').</li> <li>Chain to BBORDRD (open order detail) using company/order#/seq#.</li> <li>If not found: Add record with status 'A' and order flag 'Y'. Copy fields like item, quantity, price, UOM, description, taxes, freight.</li> <li>If found: Update fields (e.g., item, quantity, price, UOM, taxes, freight rate, overrides).</li> <li>Update fluid code (BDFLCD) and IMS UOM (BDIUM) from product master (GSPROD).</li> <li>Handle supplemental detail (BBORDS1): Add or update fields like container size, weight, hazmat desc, extended taxes (up to 10 codes), qty in UOM.</li> <li>Delete from BBOTDS1 if applicable.</li> <li>If delete code = 'D': Call external program to remove from order history (BBOH).</li> <li>Accumulate totals (e.g., gross/net gallons, weights).</li> <li> <p>Write history to BBORDHS.</p> </li> <li> <p>Miscellaneous Line Processing (Indicator 03, implied via seq#):</p> </li> <li>Process misc items (e.g., seq# 900+ for charges like freight).</li> <li>Chain to BBORDRM.</li> <li>Add or update records with qty, desc, amount, G/L, taxes (up to 10 codes), overrides.</li> <li>Handle customer-owned product flag (BMCOON).</li> <li>Delete from BBOTA1 or BBORA1 if needed.</li> <li> <p>Write history to BBORMHS.</p> </li> <li> <p>Marks/Remarks Processing (Indicators 04-06):</p> </li> <li>Identify marks by type:<ul> <li>04: Order entry remarks (BBORDRO) \u2013 e.g., 4 lines of remarks.</li> <li>05: Invoice entry remarks/dispatch info (BBORDRI) \u2013 e.g., remarks and dispatch lines.</li> <li>06: Bill of lading remarks (BBORDRB) \u2013 e.g., remarks and freight details.</li> </ul> </li> <li>Chain to respective files.</li> <li>Add or update with customer/ship-to and remark lines.</li> <li> <p>No deletes shown in provided code.</p> </li> <li> <p>Tax Override Processing (Indicator 07, implied):</p> </li> <li> <p>Add or update BBORTX with extended taxes (BTOTE1-0 for order taxes, BTOFE1-0 for freight taxes) and amounts (BTA/BFA arrays, up to 10).</p> </li> <li> <p>Customer Order Status Update:</p> </li> <li> <p>Update CUSORD: Add ('A'), update, or delete ('D') status with company, customer, order#, status code, century, date.</p> </li> <li> <p>Closeout and Cleanup:</p> </li> <li>Update BBORCL (order closeout?) with delete code, zeros, totals.</li> <li>No printing (disabled per JB10; previously printed order update register).</li> <li>End program, committing changes.</li> </ol> <p>The program is cycle-based (implicit LR for last record), with subroutines like CLRHDS (clear header supp), CLRDHS (clear detail supp).</p>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Order Types: Handles ' ' (standard), 'R' (return?), 'M' (product move, reused from cash return per JB20), 'C' (removed, was cash sale). Validates and passes to header.</li> <li>Deletions: Only process if delete code = 'D'. For details, call history delete only on 'D' (JB12). Headers/details/marks set status to 'D' or delete records.</li> <li>Freight Handling (JB21): If BOCAFR = 'N' (no calc freight), delete misc seq# 943/950 to avoid residual charges from prior freight terms.</li> <li>Taxes: Supports up to 10 tax codes per line (extended in LT13). Overrides (BDOTX/BMOTX = 'Y') allow manual tax amounts. Separate for product and freight.</li> <li>Quantities and Units: Updates gross/net gallons, temp, gravity, gallon code (MG22). Converts qty to UOM (BDQTUM). Handles container qty, ship qty, backorders.</li> <li>Customer-Owned Product (JB06): Flags (BOCOON/BDCOON/BMCOON) passed; affects shipment logic.</li> <li>Overrides: Prices (BDOPRC), freight rates (BDOFRR), taxes \u2013 copied if present.</li> <li>History Tracking (MG19): Writes full record snapshots to history files on changes, including timestamp, user, workstation.</li> <li>Product Validation: Uses GSPROD (replaced GSTABL per JK01) for type, fluid code, IMS UOM.</li> <li>Incoterms and Rush (JB07/DC01): Pass incoterms (BOINCT), rush (BORUSH), process code (BOORPR).</li> <li>Percentages (LT15/JB09): Calculate % of total (BDPCTT) and freight total (BDPCFT).</li> <li>No Charge/Overrides: Flags like BDNOCH ('Y' for no charge), BDQTTY (qty type).</li> <li>Error/Validation: Implicit via chains; assumes pre-validated transactions. Locks records during update.</li> <li>Performance/Nulls: Fields zero/blank-filled (LT13/MG16) to avoid null issues.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses fixed-format file specifications (F specs) for disk files. All are shared access unless noted. Inputs are mostly update-capable (U), with some input-only (I) or output-only (O). Keys are based on company/order#/seq#.</p> <ul> <li>Primary Input: BBORTR (transaction input, IP - primary, sequential read).</li> <li>Update Files (UF/UC - update, chained):</li> <li>BBOTHS1 (header supplemental transaction).</li> <li>BBOTDS1 (detail supplemental transaction).</li> <li>BBOTA1 (accessorial/marks transaction).</li> <li>BBORHS1 (open order header supplemental).</li> <li>BBORDS1 (open order detail supplemental).</li> <li>BBORA1 (accessorial open order).</li> <li>BBORTX (tax overrides).</li> <li>BBORDRH (open order header).</li> <li>BBORDRD (open order detail).</li> <li>BBORDRM (open order misc).</li> <li>BBORDRI (open order invoice marks).</li> <li>BBORDRO (open order entry marks).</li> <li>BBORDRB (open order BOL marks).</li> <li>CUSORD (customer order status).</li> <li>BBORCL (order closeout?).</li> <li>Input-Only Files (IF/IC - chained or setll/read):</li> <li>BBTRTX (transaction tax? IS - input secondary).</li> <li>BICONT (container info?).</li> <li>ARCUST (customer master?).</li> <li>GSCTUM (customer tax master?).</li> <li>GSPROD (product master, replaced GSTABL).</li> <li>Output-Only Files (O):</li> <li>BBORHHS (order header history).</li> <li>BBORDHS (order detail history).</li> <li>BBORMHS (order misc history).</li> </ul> <p>No printer files (printing disabled per JB10).</p>"},{"location":"order-entry/BB201%20Order%20Post/BB201%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB117: Called to delete line items from order history table (BBOH) when delete code = 'D'. Used for duplicate order checking prevention (per DC02/JB12 comments). Parms not shown in truncated code, but likely company/order#/seq#. </li> </ul> <p>(Note: The code is truncated (~33k characters missing), so additional logic (e.g., full CALL statement, more subroutines) may exist but aligns with comments.)</p>"},{"location":"order-entry/BB201%20Order%20Post/BB202%20RPG36/","title":"BB202 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB202%20RPG36/#process-steps-of-the-rpg-program-bb202rpg36txt","title":"Process Steps of the RPG Program (BB202.rpg36.txt)","text":"<p>This RPG III program (BB202) processes order transaction headers from a batch file (BBORTR) to check for orders placed on credit hold during posting. If an order is newly on hold and unauthorized, it generates output reports (as spool files) for emailing notifications to relevant parties (e.g., CSR, salesman, credit manager). The program reads sequentially, performs lookups, calculates dates, and applies conditional logic for notifications. It ignores deleted orders and focuses on credit hold changes. The process is executed in a loop for each qualifying header record.</p> <p>High-level process steps:</p> <ol> <li>Initialization and Date Setup:</li> <li>On first pass (ONCE = 0), captures system time (TIMDAT) and date (UDATE), breaking them into SYSTIM, SYSDAT, YMD, CYR.</li> <li>Handles Y2K century rollover: If year &gt;= Y2KCMP (likely 2000), sets CN to Y2KCEN (19); else adds 1 to Y2KCEN (20).</li> <li>Converts dates to CYMD (SYCYMD) and MDY formats.</li> <li>Calls subroutine @DTE1 to convert Gregorian date ($MDY, $CN) to Julian (G$JD) and day of week (G$JW).</li> <li>Calculates days from current date to requested date (BORQDT) for display.</li> <li> <p>Initializes zeros for accumulators (Z92, Z2, ZERO6, ZERO8) and increments ONCE.</p> </li> <li> <p>Header Record Processing (L2 DO Loop):</p> </li> <li>Chains to BICONT using company (BOCO) for company info.</li> <li>Sets keys (OKEY8, COCUST) for further lookups.</li> <li> <p>Resets totals (L2TOTL = 0).</p> </li> <li> <p>Skip Deleted Orders:</p> </li> <li> <p>If BODEL = 'D' (delete flag), skips processing (per JB01/JB02 revisions to ignore deleted orders).</p> </li> <li> <p>Subroutine HDR (Main Processing):</p> </li> <li>Sets indicators (10 for process order, 72 on).</li> <li>Checks order type: Sets 26/27 if BOTYPE = 'R' (return/credit invoice?).</li> <li>Chains to ARCUST using customer (BOCUST/COCUST) for customer details (name, address, aging balances, credit limit).</li> <li>Builds keys (KEY14, ORCLKY) for BBORCL chain.</li> <li>Looks up CSR email (EDICU) from BBCSR using company + order taken by (BOTKBY); defaults to 'SJM' if not found.</li> <li>Looks up salesman email (EDISM) from BBSLSM using company + salesman (BOSLMN).</li> <li>Looks up A/R clerk email (EDIAR) from BBCSR using company + authorization initials (BLAUIN).</li> <li>Chains to BBORCL using order key (company + customer + order#) to get credit hold details.</li> <li>Calculates order amount (ORDAMT): Prioritizes BLOAMT (order file amount) if non-zero; falls back to BLTAMT (transaction amount).</li> <li>Checks for credit hold change: If BLOVCL (current hold Y/N) == BLOVSV (saved hold), skips notification (TAG SKIP).</li> <li>Removed check for days &gt;= 21 (MG01; previously skipped notifications for far-future orders).</li> <li>If not in BBORCL (N98), unauthorized (BLAUIN blank), and on hold (BLOVCL = 'Y'), executes exception output (EXCPT UNAU) to generate notification reports.</li> <li> <p>Tags SKIP and executes EXCPT RESET to clear.</p> </li> <li> <p>Date Conversion Subroutine (@DTE1):</p> </li> <li>Breaks $MDY into month/day/year.</li> <li>Handles century if not provided (similar to init).</li> <li>Converts Gregorian to Julian: Adjusts month/year, calculates days using formulas (e.g., month * 30.6, year * 365.25).</li> <li> <p>Determines day of week via modulo 7.</p> </li> <li> <p>Output and End:</p> </li> <li>Exception records (UNAU) written to CREMAL and SMEMAL (printer files, likely spooled for email).</li> <li>Outputs include: Timestamp, order/customer details, addresses, pickup date/days away, amounts, credit limit, payment dates, aging buckets (current, 1-30, 31-60, etc.), notify emails.</li> <li>Resets BBORCL record with blanks in positions 89+.</li> <li>Ends when end-of-file on BBORTR.</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB202%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Deleted Orders: Skipped entirely (BODEL != 'D'; revisions JB01/JB02 to refine ignoring deletes).</li> <li>Order Types: Flags 'R' as credit invoice (ind 26/27), but processes all non-deleted.</li> <li>Credit Hold Notification:</li> <li>Triggered only if hold status changed (BLOVCL != BLOVSV; i.e., newly on hold during batch).</li> <li>Requires unauthorized (BLAUIN blank) and active hold (BLOVCL = 'Y').</li> <li>No longer limited to &lt;21 days from request date (removed per MG01).</li> <li>Order Amount: Uses BLOAMT if available; falls back to BLTAMT; sums if both present (handles discrepancies between transaction and order files).</li> <li>Emails/Notifications:</li> <li>Sent to CSR (from BBCSR via BOTKBY), Salesman (from BBSLSM via BOSLMN), A/R Clerk (from BBCSR via BLAUIN).</li> <li>Defaults CSR to 'SJM' if not found.</li> <li>Fixed notifies in output: bzolkos@amref.com, lmidla@amref.com (likely credit team).</li> <li>Dual outputs (CREMAL for credit, SMEMAL for salesman) with identical content.</li> <li>Dates: Handles Y2K, calculates days to request date for urgency display.</li> <li>Customer Aging: Displays balances (total due, current, overdues in buckets) from ARCUST.</li> <li>Credit Limit: Compared implicitly via hold, displayed in notification.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB202%20RPG36/#tables-used-files","title":"Tables Used (Files)","text":"<p>Files are disk or printer, with keyed access (AI for alternate index).</p> <ul> <li>BBORTR: Input primary (IP) - Order transaction batch (headers).</li> <li>BICONT: Input combined (IC) - Company/container info.</li> <li>BBORCL: Update (UF) - Order credit hold log.</li> <li>ARCUST: Input combined (IC) - A/R customer master (aging, limits).</li> <li>BBCSR: Input (IF) - CSR (customer service rep) table (emails).</li> <li>BBSLSM: Input (IF) - Salesman table (emails).</li> <li>CREMAL: Output (O) - Printer/spool for credit manager email notifications.</li> <li>SMEMAL: Output (O) - Printer/spool for salesman email notifications.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB202%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. This program does not call any external programs (no CALL opcodes).</p>"},{"location":"order-entry/BB201%20Order%20Post/BB215%20RPG36/","title":"BB215 RPG36","text":""},{"location":"order-entry/BB201%20Order%20Post/BB215%20RPG36/#process-steps-of-the-rpg-program-bb215rpg36txt","title":"Process Steps of the RPG Program (BB215.rpg36.txt)","text":"<p>The RPG III program (BB215) is designed to remove lockout fields from the order header file (BBORDRH) based on transaction records from the batch file (BBORTR). It processes header records to clear the lockout code (BOLOCK) and workstation ID (BOWSID) fields, effectively unlocking open orders. The program is simple, with a straightforward loop that reads transaction records, matches them to order headers, and updates the corresponding fields. It is called from the main OCL procedure (BB201.ocl36.txt) in the \"Unlock Open Orders\" section.</p> <p>High-level process steps:</p> <ol> <li>Initialization:</li> <li>On the first pass (ONCE = 0), initializes variables:<ul> <li>Sets LOCK (1-character) to blanks.</li> <li>Sets WSID (2-character) to blanks.</li> <li>Sets ONCE to 1 to prevent re-initialization.</li> </ul> </li> <li> <p>This ensures that the lockout fields are cleared only once at the start.</p> </li> <li> <p>Header Record Processing:</p> </li> <li>Reads records from BBORTR (primary input file, NS 01 specifies header records).</li> <li>Extracts the key BOCOS (positions 2-12, likely company + order#) from the transaction record.</li> <li>Chains to BBORDRH using BOCOS to locate the matching order header record.</li> <li> <p>If the record is found (indicator 90 off), proceeds to update.</p> </li> <li> <p>Update Lockout Fields:</p> </li> <li>Updates the BBORDRH record for the matched order:<ul> <li>Sets BOLOCK (position 155) to the blank value in LOCK.</li> <li>Sets BOWSID (positions 156-157) to the blank value in WSID.</li> </ul> </li> <li> <p>Writes the updated record to BBORDRH (output specification OBBORDRH with D for detail, conditioned on 01 and N90).</p> </li> <li> <p>End of Processing:</p> </li> <li>Continues reading BBORTR until end-of-file.</li> <li>No further actions are taken for non-header records (NS 09 is defined but unused).</li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/BB215%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Lockout Removal:</li> <li>The program clears two specific fields in the order header (BBORDRH):<ul> <li>BOLOCK (lockout code, 1 character, position 155): Set to blank to remove any lockout status.</li> <li>BOWSID (workstation ID, 2 characters, positions 156-157): Set to blanks to clear the workstation that locked the order.</li> </ul> </li> <li>Only header records (NS 01) from BBORTR trigger updates.</li> <li>Matching:</li> <li>Uses BOCOS (company + order#, positions 2-12) as the key to match transaction records to order headers.</li> <li>Updates only if the order exists in BBORDRH (N90, i.e., chain successful).</li> <li>Scope:</li> <li>Processes one order at a time, updating only the lockout fields.</li> <li>No validation or conditional logic beyond record existence.</li> <li>No Output Reports:</li> <li>No printing or logging; updates are silent.</li> <li>Error Handling:</li> <li>If no matching BBORDRH record is found (indicator 90 on), no action is taken for that transaction.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB215%20RPG36/#tables-used-files","title":"Tables Used (Files)","text":"<p>The program uses two disk files, defined in the F-specs:</p> <ul> <li>BBORTR: Input primary (IP), 512 bytes, fixed format, disk file. Contains transaction batch records (only header records processed).</li> <li>BBORDRH: Update combined (UC), 512 bytes, record address type (R) with alternate index (11AI), disk file. Stores open order headers, updated to clear lockout fields.</li> </ul>"},{"location":"order-entry/BB201%20Order%20Post/BB215%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program contains no CALL opcodes or references to external programs. It operates independently, relying solely on file I/O and internal logic.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/","title":"Summary BB201 OCL","text":""},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#list-of-use-cases","title":"List of Use Cases","text":"<p>Based on the analyzed programs and their interactions in the call stack, the following use cases are implemented. Each represents a distinct business process handled by one or more programs, focusing on order entry and posting in a legacy system.</p> <ol> <li> <p>Order Batch Selection and Management: Allows users to select, create, view, update, or delete order batches before processing, ensuring batches are locked/unlocked appropriately (implemented in BB001).</p> </li> <li> <p>Credit Authorization for Orders: Sorts and validates orders for credit holds, calculates totals, updates statuses, and generates authorization reports (implemented in BB198 with #GSORT).</p> </li> <li> <p>Order Posting and Updates: Processes transaction records to add/update/delete order headers, details, marks, taxes, and supplementals in open order files, with history logging and freight/tax calculations (implemented in BB201).</p> </li> <li> <p>Archiving Cancelled Orders: Checks and archives cancelled open orders to history files, optionally deleting from open files (implemented in BB104B).</p> </li> <li> <p>Notifying for Orders on Credit Hold: Identifies newly held orders and generates notifications (spool files for email) with details like amounts, aging, and contacts (implemented in BB202).</p> </li> <li> <p>Unlocking Open Orders: Removes lockout codes and workstation IDs from order headers post-processing (implemented in BB215).</p> </li> <li> <p>Releasing or Posting Batch: Updates batch control records to release locks or mark as posted/deleted after processing (implemented in BB005).</p> </li> <li> <p>Updating Order History: Maintains logs of order line items for duplicate prevention, handling adds/updates/deletes/reactivations with timestamps and messages (implemented in BB117).</p> </li> </ol>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>This document outlines requirements for each use case as a single, non-interactive function. Each function accepts inputs (e.g., batch ID, order data) to perform the process end-to-end. Focus is on business requirements: data handling, validations, updates, and calculations (e.g., totals, taxes, freight). Outputs include success/failure indicators, updated data, or reports. Processes are concise, assuming batch/transaction data as inputs; no user screens.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#1-function-manageorderbatch","title":"1. Function: ManageOrderBatch","text":"<p>Purpose: Select/create/update/delete order batches for processing.</p> <p>Inputs: - Batch ID (numeric, optional for new). - Mode (string: 'select', 'create', 'update', 'delete'). - Source code (string, e.g., 'PP' for Viscosity ASN). - User ID (string). - Workstation ID (string). - Lock status (string, optional for update).</p> <p>Process Steps: 1. If mode='select': Retrieve batch by ID; return details if exists and matches source. 2. If mode='create': Generate new batch ID; insert record with defaults (lock='X', created date=CYMD, record count=0, source=input). 3. If mode='update': Retrieve by ID; update lock/WSID/user/date if not locked. 4. If mode='delete': Retrieve by ID; set delete flag='D' if not locked.</p> <p>Business Rules: - Batches must match source code (e.g., 'PP' skips mismatches). - Locked batches (status: 'O'=order entry, 'P'=posting) cannot be updated/deleted/selected for post. - Soft delete only ('D' flag); skip deleted in selections. - Record count updated on create/update (initial 0). - No calculations; timestamps use current CYMD.</p> <p>Outputs: Batch details JSON (ID, status, dates, count); success/failure message.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#2-function-authorizeordercredit","title":"2. Function: AuthorizeOrderCredit","text":"<p>Purpose: Validate orders for credit, calculate totals, update statuses, generate report.</p> <p>Inputs: - Sorted transaction batch (array of records: headers/details with company, order#, customer, products, quantities, prices). - Customer master data (array: limits, aging balances).</p> <p>Process Steps: 1. Process headers: Skip deleted; retrieve terms/ship-to details. 2. For each detail: Skip deleted/misc (&gt;899 seq); negate qty for credits ('R' type); convert qty using UOM factors; calculate line total (converted qty * price). 3. Accumulate order/company totals; update status in customer order file ('AO'/'AB' for active/backorder, 'RO'/'RB' for revised, 'CN' for cancel). 4. Generate report with orders, values, statuses.</p> <p>Business Rules: - Credit types ('R') negate quantities for returns. - No-charge items zero totals. - Status: 'Active' for new, 'Revised' for existing; append 'Backorder' if shipment#=1; 'Cancelled' overrides. - Descriptions prioritize custom/alternate/standard from product master. - Totals exclude no-charge/misc; use sorted input (headers first). - Calculations: Qty conversion (multiply/divide by factor from units table); line total = converted qty * price.</p> <p>Outputs: Authorization report (orders, totals, statuses); updated statuses; success/failure.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#3-function-postorderupdates","title":"3. Function: PostOrderUpdates","text":"<p>Purpose: Post transactions to open orders: add/update/delete headers/details/marks/taxes.</p> <p>Inputs: - Transaction batch (array: headers/details/marks/taxes with delete flags, quantities, prices, freight/tax codes). - Product/customer masters (for validations/conversions).</p> <p>Process Steps: 1. Process headers: Add/update (dates/terms/freight); calculate totals (product/misc/freight); delete if flagged. 2. Details: Add/update (qty/price/taxes/weights); convert UOM/gallons; delete if 'D' (call history delete). 3. Marks/misc/taxes: Add/update/delete (remarks, charges, overrides). 4. If no freight: Delete specific misc records (seq 943/950). 5. Update statuses; log history changes.</p> <p>Business Rules: - Delete only on 'D' flag; negate for credits ('R'). - Freight codes: 'C'=collect, 'P'=prepaid, 'A'=allowance; no calc ('N') deletes freight misc. - Taxes: Up to 10 codes; overrides store exemptions/amounts; accumulate in arrays. - Quantities: Convert IMS/UOM; adjust gross/net gallons (temp/gravity). - History: Log all changes with timestamps/user; delete history on line delete. - Calculations: Line total = qty * price; tax = totals * rates (overrides apply); freight per code/terms.</p> <p>Outputs: Updated open orders; history logs; success/failure.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#4-function-archivecancelledorders","title":"4. Function: ArchiveCancelledOrders","text":"<p>Purpose: Archive and optionally delete cancelled open orders.</p> <p>Inputs: - Transaction batch (array: records with cancel flags). - File group ('G'/'Z'). - Delete flag ('0' for delete).</p> <p>Process Steps: 1. For each header: If cancelled in open but not transaction delete, archive all related records (headers/details/marks/taxes/supplementals) to history files. 2. Copy records verbatim; set archive active ('A'). 3. If delete flag='0': Delete from open files (headers/details/marks/taxes/supplementals).</p> <p>Business Rules: - Archive trigger: Exists in open, cancelled ('Y'), not transaction delete. - Copy all related records (e.g., taxes via SETLL/READ). - Hard deletes from open; archives as active ('A'). - Exclusive access via overrides (SHARE(*NO)). - No calculations; key-based matching (company + order#).</p> <p>Outputs: Success/failure; archived count.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#5-function-notifycreditholdorders","title":"5. Function: NotifyCreditHoldOrders","text":"<p>Purpose: Generate notifications for newly held orders.</p> <p>Inputs: - Transaction headers (array: with hold status, amounts, dates, contacts). - Customer data (aging, limits).</p> <p>Process Steps: 1. Skip deleted headers. 2. Calculate order amount (prefer open file; fallback transaction). 3. If hold changed to 'Y' and unauthorized: Retrieve emails (CSR/salesman/A/R); calculate days to request date. 4. Generate dual reports (credit/salesman) with details (order/customer, amounts, aging, notifies).</p> <p>Business Rules: - Notify only on new holds (status change) and unauthorized. - Amount: Open file if non-zero; else transaction sum. - Aging buckets: Current, 1-30, 31-60, etc., from customer master. - Emails: Lookup from tables; defaults (e.g., CSR='SJM'); fixed notifies (e.g., bzolkos@amref.com). - Dates: CYMD; days = request - current. - No calculations beyond amount/days.</p> <p>Outputs: Spool reports for email; success/failure.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#6-function-unlockopenorders","title":"6. Function: UnlockOpenOrders","text":"<p>Purpose: Clear locks from order headers post-processing.</p> <p>Inputs: - Transaction batch (array: headers with keys).</p> <p>Process Steps: 1. For each header: Retrieve open header by key (company + order#). 2. If found: Clear lock code (blank) and WSID (blanks); update record.</p> <p>Business Rules: - Only headers processed; skip non-matches. - Clears specific fields (lock position 155, WSID 156-157). - No validations; assumes post-processing context. - No calculations.</p> <p>Outputs: Success/failure; unlocked count.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#7-function-releaseorpostbatch","title":"7. Function: ReleaseOrPostBatch","text":"<p>Purpose: Update batch after processing (release/post/delete).</p> <p>Inputs: - Batch ID (numeric). - Mode (string: 'O'/'L'/'B'/'P'). - Record count (numeric).</p> <p>Process Steps: 1. Retrieve batch by ID. 2. If found: Update based on mode (clear locks/WSID, set printed 'Y' for 'B', set 'D'/'P' for 'P'); always update count.</p> <p>Business Rules: - Modes: 'O'/'L'/default=clear locks; 'B'=clear + printed; 'P'=delete + posted. - Update positions: 6 (lock=' '/'P'), 8 (WSID='  '), 9 (printed='Y'), 1 (delete='D'), 39 (count). - Skip if not found. - No calculations.</p> <p>Outputs: Success/failure.</p>"},{"location":"order-entry/BB201%20Order%20Post/Summary%20BB201%20OCL/#8-function-updateorderhistory","title":"8. Function: UpdateOrderHistory","text":"<p>Purpose: Log order line changes for duplicate checks.</p> <p>Inputs: - Line details (company, order#, seq#, customer, ship-to, PO, date, product, container, qty, batch). - Mode ('UPD'/'DEL'/'ACT'). - Flags (duplicate override 'Y', file group 'G'/'Z').</p> <p>Process Steps: 1. For 'UPD': Add/update main history (timestamps/user); if override, add/update message in supplemental. 2. For 'DEL': Delete main/supplemental (all for order if seq=0; line-specific otherwise). 3. For 'ACT': Update status to 'A' and dates in main/supplemental.</p> <p>Business Rules: - 'UPD': Add if new; update timestamps if exists. Message: 'Possible Duplicates Accepted' on override. - 'DEL': Hard delete by key (company + order# + seq# + dates for messages). - 'ACT': Set active ('A'); update dates. - Timestamps: Current CYMD/user. - Exclusive overrides for environments. - No calculations; key-based.</p> <p>Outputs: Success/failure.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/","title":"BB800E RPGLE","text":"<p>The BB800E RPGLE program is a Customer Order Instructions Inquiry application within the Customer Order Entry system, designed to display accessorials and marks information for either customer orders or ship-to records, using a subfile. It is called from the main program BB802 (and referenced in BB801 for order access/marks inquiry). Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/#process-steps-of-the-bb800e-rpg-program","title":"Process Steps of the BB800E RPG Program","text":"<p>The program retrieves and displays accessorials/marks data based on input parameters, handles user interactions via function keys, and manages a subfile for display. The main steps are executed in the <code>srsfl1</code> subroutine, with supporting subroutines handling specific tasks. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives input parameters: <code>p$co</code> (company, 2 digits), <code>p$csor</code> (customer or order number, 6 digits), <code>p$ship</code> (ship-to code, 3 digits), and <code>p$fgrp</code> (file group: 'G' or 'Z').</li> <li>Initializes output parameters: <code>o$mode = 'INQ'</code> (inquiry mode), <code>o$flag = '0'</code> (return flag).</li> <li>Initializes subfile control fields: <code>rrn1 = 0</code>, <code>rrnsv1 = 0</code>, <code>pagsz1 = 32</code> (subfile page size).</li> <li>Sets up message handling fields: <code>dspmsg = *blank</code>, <code>m@pgmq = '*'</code>, <code>m@key = *blanks</code>.</li> <li>Defines key lists (<code>klist</code>) for database access: <code>klc1s1</code>, <code>klc1s2</code>, <code>klc1r1</code>, <code>klc1r2</code>, <code>klordh</code>, <code>klcus1</code>, <code>klcus2</code>, <code>klship</code>.</li> <li>Sets subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>) for initial display.</li> <li>Initializes header (<code>c$hdr</code>) based on mode: 'Open Order Accessorials/Marks Inquiry' (if <code>p$ship = '000'</code>) or 'ShipTo Master Accessorials/Marks Inquiry' (if <code>p$ship \u2260 '000'</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Purpose: Opens required database files with appropriate overrides based on <code>p$fgrp</code>.</li> <li> <p>Actions:</p> <ul> <li>Applies file overrides using arrays <code>ovg</code> or <code>ovz</code> (for 'G' or 'Z' file groups) for files <code>arcust</code>, <code>bbora1</code>, <code>bbordh</code>, <code>bbshsa1</code>, and <code>shipto</code>.</li> <li>Executes <code>QCMDEXC</code> to apply overrides dynamically (e.g., <code>arcust</code> to <code>garcust</code> or <code>zarcust</code>).</li> <li>Opens files: <code>arcust</code>, <code>bbora1</code>, <code>bbordh</code>, <code>bbshsa1</code>, <code>shipto</code>.</li> </ul> </li> <li> <p>Process Parameters (<code>@parms</code> Subroutine):</p> </li> <li>Purpose: Validates and processes input parameters.</li> <li> <p>Actions:</p> <ul> <li>Checks the number of parameters passed using <code>ps#prm</code> (from program status data structure).</li> <li>Moves parameters to format fields: <code>p$co</code> to <code>c$co</code>, <code>p$csor</code> to <code>c$csor</code>, <code>p$ship</code> to <code>c$ship</code>.</li> <li>If fewer than expected parameters are passed (<code>ps#err = 221</code>), sets return code to <code>*detc</code> and exits.</li> <li>Includes commented-out test values for <code>c$co</code>, <code>c$csor</code>, and <code>c$ship</code> for debugging.</li> </ul> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Purpose: Fetches data for the subfile based on whether the inquiry is for a customer order or ship-to.</li> <li> <p>Actions (not shown in truncated code, but inferred from context and similar programs):</p> <ul> <li>If <code>p$ship = '000'</code>, chains to <code>bbordh</code> using <code>klordh</code> (<code>c$co</code>, <code>c$csor</code>) to verify the order and reads <code>bbora1</code> using <code>klc1r1</code> to retrieve order accessorials/marks.</li> <li>If <code>p$ship \u2260 '000'</code>, chains to <code>arcust</code> using <code>klcus2</code> and <code>shipto</code> using <code>klship</code> to verify customer and ship-to, then reads <code>bbshsa1</code> using <code>klc1r2</code> to retrieve ship-to accessorials/marks.</li> <li>Populates subfile fields (<code>s1*</code>) with retrieved data.</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the subfile display and user interactions.</li> <li> <p>Actions:</p> <ul> <li>Executes parameter processing (<code>@parms</code>) and error handling (<code>*pssr</code>).</li> <li>Retrieves data (<code>rtvdta</code>).</li> <li>Sets subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>).</li> <li>Clears and writes the message subfile (<code>clrmsg</code>, <code>wrtmsg</code>).</li> <li>Positions the subfile (<code>sf1rep</code>) to the first record.</li> <li>Writes the assume-overlay record (<code>wdwovr</code>).</li> <li>Enters a main loop (<code>sf1agn</code>) to:</li> <li>Handle repositioning if <code>repsfl = *on</code> by updating <code>c$rcid</code> and calling <code>sf1rep</code>.</li> <li>Display the message subfile if needed (<code>wrtmsg</code>).</li> <li>Set subfile display indicator (<code>*in41</code>) based on records (<code>rrn1 &gt; 0</code>).</li> <li>Toggle folded/unfolded mode (<code>*in45</code>) based on <code>sfmod1</code>.</li> <li>Display subfile control (<code>write sflcmd1</code>, <code>exfmt sflctl1</code>).</li> <li>Clear message subfile if displayed (<code>clrmsg</code>, <code>write msgclr</code>).</li> <li>Clear error indicators (<code>*in21</code>\u2013<code>*in39</code>, <code>*in50</code>\u2013<code>*in69</code>).</li> <li>Update subfile record number (<code>rcdnb1 = pagrrn</code>) for redisplay.</li> <li>Process function keys:<ul> <li>F03: Exits the subfile and program (<code>sf1agn = *off</code>).</li> <li>F12: Returns to the calling program (<code>sf1agn = *off</code>).</li> <li>ENTER: Processes subfile selections (not shown in truncated code, likely in <code>sf1prc</code>).</li> <li>PAGEDN: Loads additional subfile records (commented out, suggesting a load-all technique).</li> </ul> </li> <li>Iterates until <code>sf1agn = *off</code>.</li> </ul> </li> <li> <p>Message Handling (<code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>wrtmsg: Displays the message subfile (<code>msgctl</code>) with <code>*in49 = *on</code>.</li> <li> <p>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>, preserving the current record format (<code>rcdsav</code>) and page number (<code>pagsav</code>).</p> </li> <li> <p>Error Handling (<code>*pssr</code> Subroutine):</p> </li> <li>Purpose: Handles parameter-related errors.</li> <li> <p>Actions:</p> <ul> <li>Checks for parameter errors (<code>ps#err = 221</code>) and sets return code to <code>*detc</code> if insufficient parameters are passed.</li> <li>Returns to the caller.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr = *on</code> and returns.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Inquiry Mode:</li> <li>The program operates in inquiry mode (<code>o$mode = 'INQ'</code>), with fields protected (<code>*in70 = *on</code>) to prevent modifications.</li> <li> <p>Supports two inquiry types based on <code>p$ship</code>:</p> <ul> <li>If <code>p$ship = '000'</code>, queries accessorials/marks for a customer order (<code>bbora1</code>, <code>bbordh</code>).</li> <li>If <code>p$ship \u2260 '000'</code>, queries accessorials/marks for a customer ship-to (<code>bbshsa1</code>, <code>shipto</code>).</li> </ul> </li> <li> <p>File Overrides:</p> </li> <li>Files are overridden based on <code>p$fgrp</code> ('G' or 'Z') to access different libraries (e.g., <code>garcust</code> vs. <code>zarcust</code>, <code>gbbora1</code> vs. <code>zbbora1</code>).</li> <li> <p>Overrides are applied dynamically using <code>QCMDEXC</code> for files <code>arcust</code>, <code>bbora1</code>, <code>bbordh</code>, <code>bbshsa1</code>, and <code>shipto</code>.</p> </li> <li> <p>Data Retrieval:</p> </li> <li>For customer orders (<code>p$ship = '000'</code>), retrieves data from <code>bbora1</code> (order accessorials) and validates the order in <code>bbordh</code>.</li> <li>For ship-to inquiries (<code>p$ship \u2260 '000'</code>), retrieves data from <code>bbshsa1</code> (ship-to accessorials) and validates customer and ship-to in <code>arcust</code> and <code>shipto</code>.</li> <li> <p>Uses <code>arcust</code> to retrieve customer details for display.</p> </li> <li> <p>Subfile Display:</p> </li> <li>Displays accessorials/marks in a subfile (<code>SFL1</code>) with a page size of 32 records (<code>pagsz1</code>).</li> <li>Supports folded/unfolded views (<code>*in45</code>) controlled by <code>sfmod1</code>.</li> <li> <p>Ensures proper pagination and cursor positioning using <code>pagrrn</code> and <code>rcdnb1</code>.</p> </li> <li> <p>User Interaction:</p> </li> <li>Supports limited function keys: F03 (exit), F12 (return), and ENTER (process subfile selections).</li> <li>PAGEDN is commented out, suggesting a load-all subfile approach where all records are loaded initially.</li> <li> <p>Displays different headers based on mode: 'Open Order Accessorials/Marks Inquiry' or 'ShipTo Master Accessorials/Marks Inquiry'.</p> </li> <li> <p>Error Handling:</p> </li> <li>Validates input parameters, exiting with <code>*detc</code> if insufficient parameters are passed.</li> <li>Uses message subfile for displaying errors or status messages.</li> <li> <p>Clears errors after processing to maintain a clean interface.</p> </li> <li> <p>Revisions:</p> </li> <li>No specific revisions are noted, indicating the program is stable as of the last update.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files, all defined with <code>usropn</code> for manual opening and overrides:</p> <ol> <li>arcust: Customer master file (customer details).</li> <li>bbora1: Order accessorials/marks file (used when <code>p$ship = '000'</code>).</li> <li>bbordh: Order header file (validates order for customer order inquiries).</li> <li>bbshsa1: Ship-to accessorials/marks file (used when <code>p$ship \u2260 '000'</code>).</li> <li>shipto: Ship-to master file (validates ship-to for ship-to inquiries).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs:</p> <ol> <li>QCMDEXC: Executes override commands for file access.</li> <li>Parameters: <code>dbov##</code> (override command, 80 characters), <code>dbol##</code> (length, 15.5).</li> <li>QMHRMVPM: Removes messages from the program message queue.</li> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB800E%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses indicators (19, 21\u201339, 40\u201343, 49, 50\u201369, 70, 88, 90\u201399) for screen control, subfile operations, and error handling. Notably, <code>*in70</code> globally protects fields in inquiry mode.</li> <li>Field Prefixes: Organizes fields with prefixes (e.g., <code>f$</code> for display, <code>c$</code> for subfile control, <code>s1</code> for subfile fields).</li> <li>Subfile Management: Uses a single subfile (<code>SFL1</code>) for accessorials/marks data, with a load-all approach (PAGEDN commented out).</li> <li>Error Messaging: Uses a message subfile for dynamic error or status display, cleared via <code>QMHRMVPM</code>.</li> <li>Testing Support: Includes commented-out test values for <code>p$co</code>, <code>p$csor</code>, and <code>p$ship</code> for debugging.</li> <li>Context with BB801: As referenced in BB801, this program is called from <code>f02nxt</code> for order access/marks inquiry, passing <code>a$co</code>, <code>a$ord#</code>, <code>a$ship</code>, and <code>o$frgp</code>.</li> </ul> <p>This program provides a focused interface for querying accessorials and marks data, integrated with the broader Customer Order Entry system via BB802 and supporting BB801 for detailed order inquiries.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/","title":"BB801 RPGLE","text":"<p>The BB801 RPGLE program is a Customer Order Inquiry application within the Customer Orders and Billing system, designed to display detailed information about customer orders, including open and canceled orders. It is called from the main program BB802 and operates interactively, using subfiles to present order details. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/#process-steps-of-the-bb801-rpg-program","title":"Process Steps of the BB801 RPG Program","text":"<p>The program follows a structured flow to retrieve and display order details based on input parameters, handle user interactions via function keys, and manage subfile displays. The main steps are executed in the <code>srfmt</code> subroutine, with supporting subroutines handling specific tasks. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives input parameters: <code>p$co</code> (company), <code>p$ord#</code> (order number), <code>p$mode</code> (mode: 'OPN' for open orders, 'CNL' for canceled orders), <code>p$fgrp</code> (file group: 'G' or 'Z'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to format fields (<code>f$co</code>, <code>f$ord#</code>) and sets <code>w$mode = 'INQ'</code> for inquiry mode.</li> <li>Initializes subfile control fields (<code>rrn1</code>, <code>rrn2</code>, <code>rrnsv1</code>, <code>rrnsv2</code>) to zero and sets page sizes (<code>pagsz1 = 12</code>, <code>pagsz2 = 10</code>).</li> <li>Sets up date fields using the program status data structure (<code>psds##</code>) to derive current date (<code>ps#dat</code>) in century-year-month-day format.</li> <li>Configures message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>) for error messaging.</li> <li>Defines key lists (<code>klist</code>) for database access (e.g., <code>klordh</code>, <code>klordd</code>, <code>klcust</code>, <code>klcstship</code>).</li> <li>Sets the header (<code>c$hdr1</code>) based on <code>p$mode</code> ('Customer Order Inquiry' for 'OPN', 'Customer Canceled Order Inquiry' for 'CNL').</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Purpose: Opens required database files with appropriate overrides based on the file group (<code>p$fgrp</code>) and mode (<code>p$mode</code>).</li> <li> <p>Actions:</p> <ul> <li>Applies file overrides using arrays <code>ovg</code>, <code>ovz</code> (general files), <code>ovgopn</code>, <code>ovzopn</code> (open orders), or <code>ovgcnl</code>, <code>ovzcnl</code> (canceled orders).</li> <li>Executes <code>QCMDEXC</code> to apply overrides dynamically (e.g., <code>arcust</code> to <code>garcust</code> or <code>zarcust</code>).</li> <li>Opens files: <code>arcust</code>, <code>gsctum</code>, <code>gstabl</code>, <code>shipto</code>, <code>inloc</code>, <code>bbordb</code>, <code>bbordd</code>, <code>bbordh</code>, <code>bbordi</code>, <code>bbordm</code>, <code>bbordo</code>, <code>bbords1</code>, <code>bborcl</code>, <code>bbcnb</code>, <code>bbcnd</code>, <code>bbcnh</code>, <code>bbcni</code>, <code>bbcnm</code>, <code>bbcno</code>, <code>bbcnor</code>, <code>bborhs1</code>.</li> </ul> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Purpose: Fetches order header and customer data for the specified order.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>bbordh</code> (open orders) or <code>bbcnh</code> (canceled orders) using <code>klordh</code> (<code>f$co</code>, <code>f$ord#</code>) to retrieve order header details.</li> <li>Chains to <code>arcust</code> using <code>klcust</code> to retrieve customer details (<code>bocust</code>).</li> <li>Chains to <code>bborcl</code> using <code>klorcl</code> to retrieve order control data.</li> <li>Chains to <code>gstabl</code> for terms (<code>klarterm</code>), salesman (<code>klslsman</code>), order status (<code>klbborst</code>), and cancel reason (<code>klbborcn</code>, for canceled orders).</li> <li>Calls <code>rtvshipto</code> to retrieve ship-to address details.</li> <li>Calls <code>clcordtot</code> to calculate order totals (product, miscellaneous, freight).</li> <li>Sets <code>w$fmt = 'SFL1'</code> to display the order detail subfile.</li> </ul> </li> <li> <p>Process Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Purpose: Manages the main loop for displaying and processing panel formats and subfiles.</li> <li> <p>Actions:</p> <ul> <li>Clears the screen (<code>clrscr</code>).</li> <li>Initializes format fields (<code>f01mov</code>) and sets <code>w$fmt = 'SFL1'</code> for subfile display.</li> <li>Enters a loop (<code>fmtagn</code>) to:</li> <li>Display the message subfile if needed (<code>wrtmsg</code>).</li> <li>Select and display the appropriate format based on <code>w$fmt</code>:<ul> <li><code>FMT01</code>: Main order header format (<code>exfmt fmt01</code>).</li> <li><code>FMT02</code>: Secondary format (<code>exfmt fmt02</code>).</li> <li><code>SFL1</code>: Order detail subfile (<code>srsfl1</code>).</li> <li><code>SFL2</code>: Miscellaneous charges subfile (<code>srsfl2</code>).</li> </ul> </li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>) and cursor position (<code>row</code>, <code>col</code>).</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Processes user input based on the current format (<code>f01sr</code> for <code>FMT01</code>, <code>f02sr</code> for <code>FMT02</code>).</li> </ul> </li> <li> <p>Process Format FMT01 (<code>f01sr</code> Subroutine):</p> </li> <li>Purpose: Handles user input on the main order header format.</li> <li> <p>Actions:</p> <ul> <li>Processes function keys:</li> <li>F03: Exits the program by setting <code>fmtagn = *off</code>.</li> <li>F10: Resets cursor position to home (<code>row</code>, <code>col</code> cleared).</li> <li>ENTER: Validates input (<code>f01edt</code>), and if no errors (<code>*in50 = *off</code>), proceeds to the next format (<code>f01nxt</code>).</li> <li>Calls <code>f01pro</code> to set display attributes (e.g., highlight order process status 'F' in red).</li> </ul> </li> <li> <p>Process Format FMT02 (<code>f02sr</code> Subroutine):</p> </li> <li>Purpose: Handles user input on the secondary format.</li> <li> <p>Actions:</p> <ul> <li>Processes function keys:</li> <li>F03: Exits the program (<code>fmtagn = *off</code>).</li> <li>F10: Resets cursor position to home.</li> <li>F12: Returns to <code>SFL2</code> (<code>w$fmt = 'SFL2'</code>).</li> <li>ENTER: Validates input (<code>f02edt</code>), and if no errors, proceeds to the next format (<code>f02nxt</code>).</li> </ul> </li> <li> <p>Determine Next Format for FMT01 (<code>f01nxt</code> Subroutine):</p> </li> <li>Purpose: Sets the next format to display.</li> <li> <p>Actions:</p> <ul> <li>Sets <code>w$fmt = 'SFL1'</code> to transition to the order detail subfile.</li> </ul> </li> <li> <p>Determine Next Format for FMT02 (<code>f02nxt</code> Subroutine):</p> </li> <li>Purpose: Handles transition from <code>FMT02</code>.</li> <li> <p>Actions:</p> <ul> <li>Calls <code>BB800E</code> for order access/marks inquiry with parameters <code>a$co</code>, <code>a$ord#</code>, <code>a$ship = '000'</code>, and <code>p$fgrp</code>.</li> <li>Returns to <code>SFL1</code> (<code>w$fmt = 'SFL1'</code>) and reinitializes <code>FMT01</code> fields (<code>f01mov</code>).</li> </ul> </li> <li> <p>Process Subfile SFL1 (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the order detail subfile display and user interactions.</li> <li> <p>Actions:</p> <ul> <li>Initializes subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>).</li> <li>Clears and writes the message subfile (<code>clrmsg</code>, <code>wrtmsg</code>).</li> <li>Positions the subfile (<code>sf1rep</code>) and enters a loop (<code>sf1agn</code>):</li> <li>Handles repositioning if <code>repsfl = *on</code> by updating <code>c1seq</code> and calling <code>sf1rep</code>.</li> <li>Displays the command line (<code>sflcmd1</code>) and message subfile if needed.</li> <li>Sets display indicator (<code>*in41</code>) based on subfile records (<code>rrn1 &gt; 0</code>).</li> <li>Toggles folded/unfolded mode (<code>*in45</code>) based on <code>sfmod1</code>.</li> <li>Displays subfile control (<code>exfmt sflctl1</code>).</li> <li>Processes function keys:<ul> <li>F03: Exits subfile and program (<code>sf1agn</code>, <code>fmtagn = *off</code>).</li> <li>F06: Calls <code>historddInq</code> for history inquiry if a subfile record is selected.</li> <li>F12: Returns to <code>FMT01</code> (<code>w$fmt = 'FMT01'</code>).</li> <li>F15: Clears subfile and reloads (<code>sf1clr</code>, <code>sf1lod</code>).</li> <li>F16: Displays order instructions (<code>sflcmd2</code>, chains to <code>bbordi</code> or <code>bbcni</code>).</li> <li>F20: Displays miscellaneous charges subfile (<code>w$fmt = 'SFL2'</code>).</li> <li>ENTER: Processes subfile selections (<code>sf1prc</code>).</li> <li>PAGEDN: Loads additional subfile records (<code>sf1lod</code>).</li> </ul> </li> <li>Updates cursor position and subfile record number (<code>rcdnb1</code>).</li> </ul> </li> <li> <p>Process Subfile SFL2 (<code>srsfl2</code> Subroutine):</p> <ul> <li>Purpose: Manages the miscellaneous charges subfile.</li> <li>Actions:</li> <li>Similar to <code>srsfl1</code>, initializes subfile mode, clears/writes message subfile, and positions records (<code>sf2rep</code>).</li> <li>Processes function keys:<ul> <li>F03: Exits subfile and program.</li> <li>F12: Returns to <code>SFL1</code> (<code>w$fmt = 'SFL1'</code>).</li> <li>F15: Clears and reloads subfile.</li> <li>ENTER: Processes selections (<code>sf2prc</code>).</li> <li>PAGEDN: Loads additional records (<code>sf2lod</code>).</li> </ul> </li> </ul> </li> <li> <p>Retrieve Ship-to Address (<code>rtvshipto</code> Subroutine):</p> <ul> <li>Purpose: Populates ship-to address fields based on order data.</li> <li>Actions:</li> <li>If <code>boship = 0</code>, uses customer master (<code>arcust</code>) address (<code>arname</code>, <code>aradr1</code>, etc.).</li> <li>If <code>boship</code> is 001\u2013899 or 900\u2013998, chains to <code>shipto</code> using <code>klcstship</code> or <code>klord999</code> to retrieve address (<code>csname</code>, <code>csadr1</code>, etc.).</li> <li>Formats zip code (<code>f$cszp</code>) with hyphen if <code>arzip9</code> is non-zero.</li> <li>Calls <code>movshipto</code> to move ship-to fields to format fields.</li> </ul> </li> <li> <p>Move Ship-to Values (<code>movshipto</code> Subroutine):</p> <ul> <li>Purpose: Transfers ship-to data to display fields.</li> <li>Actions:</li> <li>Moves <code>csname</code>, <code>csadr1</code>, <code>csadr2</code>, <code>csadr3</code>, <code>csadr4</code>, <code>csctst</code>, <code>csstat</code>, <code>cscszp</code>, <code>cscty</code> to corresponding <code>f$</code> fields.</li> </ul> </li> <li> <p>Calculate Order Totals (<code>clcordtot</code> Subroutine):</p> <ul> <li>Purpose: Computes product, miscellaneous, and freight totals for the order.</li> <li>Actions:</li> <li>Clears totals (<code>f$ptot</code>, <code>f$mtot</code>, <code>f$ftot</code>).</li> <li>For order details (<code>bbordd</code> or <code>bbcnd</code> based on <code>p$mode</code>):<ul> <li>Reads records using <code>klordh</code>.</li> <li>Converts container quantity (<code>bdqty</code>) to actual quantity using <code>gsctum</code> (<code>cuoper</code>, <code>cucvfa</code>).</li> <li>Calculates product total (<code>f$ptot</code>) as <code>w$qty * bdprce</code>.</li> <li>Adds freight (<code>bdofrr</code> or <code>bdfrrt * w$qty</code>) to <code>f$ftot</code>.</li> </ul> </li> <li>For miscellaneous charges (<code>bbordm</code> or <code>bbcnm</code>):<ul> <li>Reads records and adds <code>bmamt</code> to <code>f$mtot</code> (non-freight) or <code>f$ftot</code> (freight, <code>bmmsty = 'F'</code>).</li> </ul> </li> <li>Skips deleted records (<code>bddel</code>, <code>bmdel &lt;&gt; 'D'</code>).</li> </ul> </li> <li> <p>History Inquiry (<code>historddInq</code> Subroutine):</p> <ul> <li>Purpose: Calls the order history inquiry program for a selected subfile record.</li> <li>Actions:</li> <li>Sets <code>o$file = 'BBORDH'</code>, <code>o$fgrp</code>, <code>f$co</code>, <code>bocust</code>, <code>f$ord#</code>, <code>o$seq</code>.</li> <li>Calls <code>GB730P</code> with <code>x$ordrhist</code> data structure.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>addmsg: Sends error messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>wrtmsg: Displays the message subfile (<code>msgctl</code>).</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr = *on</code> and returns.</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Order Mode Handling:</li> <li>Supports two modes: 'OPN' (open orders) and 'CNL' (canceled orders), determined by <code>p$mode</code>.</li> <li>Different files are accessed based on mode (<code>bbord*</code> for open, <code>bbcn*</code> for canceled).</li> <li> <p>The header (<code>c$hdr1</code>) reflects the mode ('Customer Order Inquiry' or 'Customer Canceled Order Inquiry').</p> </li> <li> <p>File Overrides:</p> </li> <li>Files are overridden based on <code>p$fgrp</code> ('G' or 'Z') to access different libraries (e.g., <code>garcust</code> vs. <code>zarcust</code>).</li> <li> <p>Additional overrides for open (<code>ovgopn</code>, <code>ovzopn</code>) or canceled orders (<code>ovgcnl</code>, <code>ovzcnl</code>) ensure correct file access.</p> </li> <li> <p>Ship-to Address Logic:</p> </li> <li>If <code>boship = 0</code>, uses customer master address.</li> <li>For <code>boship</code> 001\u2013899 or 900\u2013998, retrieves from <code>shipto</code> master; for 900+, uses one-time ship-to address.</li> <li> <p>Skips deleted ship-to records (<code>csdel &lt;&gt; 'D'</code>).</p> </li> <li> <p>Order Totals Calculation:</p> </li> <li>Product total (<code>f$ptot</code>): Sum of <code>bdqty * bdprce</code> after converting container quantity.</li> <li>Freight total (<code>f$ftot</code>): Sum of <code>bdofrr</code> or <code>bdfrrt * qty</code> from order details, plus freight-type miscellaneous charges (<code>bmmsty = 'F'</code>).</li> <li>Miscellaneous total (<code>f$mtot</code>): Sum of non-freight miscellaneous charges (<code>bmamt</code>).</li> <li> <p>Excludes deleted records and handles special case for sequence 950 (automatic fuel surcharge, per jb01).</p> </li> <li> <p>Display and Navigation:</p> </li> <li>Highlights orders with process status 'F' in red (<code>*in76</code>).</li> <li>Supports folded/unfolded subfile views (<code>*in45</code>).</li> <li>Allows navigation between formats (<code>FMT01</code>, <code>FMT02</code>, <code>SFL1</code>, <code>SFL2</code>) and inquiries (e.g., order access/marks via <code>BB800E</code>).</li> <li> <p>Ensures proper subfile pagination and cursor positioning.</p> </li> <li> <p>Error Handling:</p> </li> <li>Validates input in <code>f01edt</code> and <code>f02edt</code> (though currently empty, likely to be implemented).</li> <li>Displays error messages for invalid inputs or credit hold status (<code>com</code> array).</li> <li> <p>Clears errors after processing to maintain a clean user interface.</p> </li> <li> <p>Credit Hold Check:</p> </li> <li> <p>Displays a message if the order is on credit hold (<code>com(01)</code>).</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jb01: Includes sequence 950 records (automatic fuel surcharge) in totals.</li> <li>jk02: Adds order process status to <code>FMT01</code> display.</li> <li>jk03: Adds F06 for history inquiry via <code>GB730P</code>.</li> <li>jk04: Expands screen to 132 columns and adds <code>inloc</code> file support.</li> <li>jk05: Ensures <code>bborhs1</code> and <code>bbords1</code> are opened for canceled orders to avoid I/O errors.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files, all defined with <code>usropn</code> for manual opening and overrides:</p> <ol> <li>arcust: Customer master file (customer details).</li> <li>gsctum: Container unit of measure file (quantity conversions).</li> <li>gstabl: General table file (terms, salesman, order status, cancel reason).</li> <li>shipto: Ship-to master file (ship-to addresses).</li> <li>inloc: Location master file (added by jk04).</li> <li>bbordb: Order billing file (open orders).</li> <li>bbordd: Order detail file (open orders).</li> <li>bbordh: Order header file (open orders).</li> <li>bbordi: Order instructions file (open orders).</li> <li>bbordm: Order miscellaneous charges file (open orders).</li> <li>bbordo: Order file (open orders).</li> <li>bbords1: Order detail file (open orders, additional).</li> <li>bborcl: Order control file (open orders).</li> <li>bbcnb: Canceled order billing file.</li> <li>bbcnd: Canceled order detail file.</li> <li>bbcnh: Canceled order header file.</li> <li>bbcni: Canceled order instructions file.</li> <li>bbcnm: Canceled order miscellaneous charges file.</li> <li>bbcno: Canceled order file.</li> <li>bbcnor: Canceled order reason file.</li> <li>bborhs1: Order history file (open/canceled orders, added by jk04).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs:</p> <ol> <li>BB800E: Order access/marks inquiry program, called from <code>f02nxt</code>.</li> <li>Parameters: <code>a$co</code>, <code>a$ord#</code>, <code>a$ship</code>, <code>o$frgp</code>.</li> <li>GB730P: Order history inquiry program, called via F06 from <code>historddInq</code>.</li> <li>Parameters: <code>x$ordrhist</code> (data structure with <code>o$file</code>, <code>o$fgrp</code>, <code>f$co</code>, <code>bocust</code>, <code>f$ord#</code>, <code>o$seq</code>).</li> <li>QMHSNDPM: Sends error messages to the program message queue.</li> <li>Parameters: <code>m@id</code>, <code>m@msgf</code>, <code>m@data</code>, <code>m@l</code>, <code>m@type</code>, <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@key</code>, <code>m@errc</code>.</li> <li>QMHRMVPM: Removes messages from the program message queue.</li> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> <li>QCMDEXC: Executes override commands for file access.</li> <li>Parameters: (implied, not explicitly defined in code snippet).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB801%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses indicators (19, 21\u201339, 40\u201343, 49, 50\u201369, 70\u201379, 80, 88, 90\u201399) for screen control, subfile operations, and error handling.</li> <li>Field Prefixes: Organizes fields with prefixes (e.g., <code>f$</code> for display, <code>c$</code> for subfile control, <code>s1</code>/<code>s2</code> for subfile fields).</li> <li>Revisions: Includes updates for fuel surcharge (jb01), process status display (jk02), history inquiry (jk03), screen expansion (jk04), and file I/O fix (jk05).</li> <li>Subfile Management: Supports two subfiles (<code>SFL1</code> for order details, <code>SFL2</code> for miscellaneous charges) with pagination and folded/unfolded views.</li> <li>Error Messaging: Uses <code>com</code> array for messages like credit hold and handles message subfile display/clearing.</li> </ul> <p>This program provides a comprehensive interface for querying customer order details, with robust navigation, data retrieval, and validation features, integrated with the broader system via calls from BB802.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802%20RPGLE/","title":"BB802 RPGLE","text":"<p>The BB802 RPG program is a Customer Order and Invoice Inquiry application written in RPGLE (RPG Language for IBM iSeries/AS400). It facilitates interactive querying of customer orders, invoices, and related data, utilizing a subfile for displaying results. Below is a detailed explanation of the process steps, followed by a list of external programs called and tables used.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802%20RPGLE/#process-steps-of-the-bb802-rpg-program","title":"Process Steps of the BB802 RPG Program","text":"<p>The program follows a structured flow to handle user input, validate data, build queries, and display results in a subfile. The main steps are executed within the <code>srsfl1</code> subroutine, with supporting subroutines handling specific tasks. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up initial values and prepares the program environment.</li> <li> <p>Actions:</p> <ul> <li>Receives entry parameters: <code>p$sagr</code> (Sales/Accounts file group) and <code>p$fgrp</code> (file group: 'G' or 'Z').</li> <li>Defines reposition subfile fields (<code>r$*</code>) to mirror control fields (<code>c$*</code>).</li> <li>Initializes work fields, output parameters, and subfile control fields (e.g., <code>rrn1</code> for subfile record number, <code>pagsz1</code> for page size set to 32).</li> <li>Sets up date and time fields using the program status data structure (<code>psds##</code>) to derive current date (<code>ps#dat</code>) in century-year-month-day format.</li> <li>Configures message handling fields for error messaging.</li> <li>Defines key lists (<code>klist</code>) for database access (e.g., <code>klordh</code>, <code>klinvh</code>, <code>klcust</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Purpose: Opens required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Applies file overrides for 'G' or 'Z' file groups using arrays <code>ovg</code> or <code>ovz</code> (e.g., overriding <code>arcust</code> to <code>garcust</code> or <code>zarcust</code>).</li> <li>Executes <code>QCMDEXC</code> to apply overrides dynamically.</li> <li>Opens input files: <code>arcust</code>, <code>bbcnh</code>, <code>bborcl</code>, <code>bbordh</code>, <code>gscntr</code>, <code>gsprod</code>, <code>gstabl</code>, <code>inloc</code>, <code>shipto</code>, <code>bbordhx</code>, <code>sa5shi</code>, <code>sa5shw</code>, <code>sa5shy</code>, <code>sa5shv</code>, <code>bbcaid</code>.</li> <li>Opens work file <code>bb802wl1</code> with an override to <code>QTEMP/bb802wl1</code>.</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the main logic loop for user interaction, subfile display, and data processing.</li> <li> <p>Actions:</p> <ul> <li>Initializes subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>).</li> <li>Clears message subfile (<code>clrmsg</code>) and writes it (<code>wrtmsg</code>).</li> <li>Sets default values for control fields (e.g., <code>c$co = 10</code>, <code>c$ord = 'Y'</code>, <code>c$inv = 'Y'</code>).</li> <li>Sets default \"ship from\" date to the first of the month, one year prior, using <code>ps#dat</code>.</li> <li>Disables order selection if <code>p$sagr</code> is not blank.</li> <li>Enters a loop (<code>sf1agn</code>) to:</li> <li>Handle repositioning if required (<code>repsfl = *on</code>).</li> <li>Toggle F10 display for product/quantity/container fields if applicable (<code>*in74</code>).</li> <li>Display command line and message subfile.</li> <li>Check for existing subfile records to set display indicator (<code>*in41</code>).</li> <li>Set folded/unfolded mode based on <code>sfmod1</code>.</li> <li>Display subfile control (<code>exfmt sflctl1</code>).</li> <li>Clear message subfile and format indicators.</li> <li>Process user input based on function keys and control fields.</li> </ul> </li> <li> <p>Handle User Input (Function Keys):</p> </li> <li>F03 (Exit): Displays an exit window (<code>f03wdw</code>) and terminates the loop if confirmed.</li> <li>F04 (Field Prompting): Calls <code>prompt</code> subroutine to assist with field input (e.g., customer, ship-to, salesman).</li> <li>F05 (Refresh): Triggers subfile repositioning (<code>repsfl = *on</code>).</li> <li>F06 (History Inquiry): Calls <code>histinq</code> to invoke <code>GB730P</code> for order history if a subfile record is selected.</li> <li>F10 (Toggle Product/Quantity Info): Toggles <code>*in75</code> to switch between views and repositions the subfile.</li> <li>ENTER: Processes subfile records (<code>sf1prc</code>) if the subfile is not empty.</li> <li>PAGEDN: Loads additional subfile records (<code>sf1lod</code>).</li> <li> <p>Control Field Changes: If control fields (e.g., <code>c$co</code>, <code>c$ord#</code>, <code>c$inv#</code>) differ from reposition fields (<code>r$*</code>), triggers subfile repositioning (<code>sf1rep</code>).</p> </li> <li> <p>Process Subfile on ENTER (<code>sf1prc</code> Subroutine):</p> </li> <li>Purpose: Handles user selections in the subfile.</li> <li> <p>Actions:</p> <ul> <li>Reads changed subfile records (<code>readc sfl1</code>) in a loop.</li> <li>Calls <code>sf1chg</code> to process selections (e.g., option 5 for inquiries).</li> <li>Supports customer order inquiry (<code>BB801</code>) or invoice inquiry (<code>SA801</code>) based on selection and invoice number presence.</li> </ul> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Purpose: Processes individual subfile record selections.</li> <li> <p>Actions:</p> <ul> <li>For option 5:</li> <li>If <code>s1inv# = *zeros</code> (order inquiry), calls <code>BB801</code> with mode 'CNL' (canceled) or 'OPN' (open).</li> <li>If <code>s1inv# &lt;&gt; *zeros</code> (invoice inquiry), calls <code>SA801</code> with customer, invoice, and order details.</li> <li>Clears the selection option (<code>s1opt</code>) and updates the subfile record after processing.</li> </ul> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Purpose: Rebuilds and repositions the subfile based on user input.</li> <li> <p>Actions:</p> <ul> <li>Clears the subfile (<code>sf1clr</code>).</li> <li>Validates control field inputs (<code>sf1cte</code>).</li> <li>Rebuilds the work file (<code>bldwrkf</code>) if control fields have changed.</li> <li>Positions the work file (<code>bb802wl1</code>) and loads subfile records (<code>sf1lod</code>).</li> <li>Retains control field values in reposition fields (<code>r$*</code>).</li> </ul> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li>Purpose: Validates user input in control fields.</li> <li> <p>Actions:</p> <ul> <li>Ensures <code>c$ord</code>, <code>c$inv</code>, <code>c$cno</code>, <code>c$pmov</code> are 'Y' or 'N', setting error indicators if invalid.</li> <li>Validates fields like order number (<code>c$ord#</code>), invoice number (<code>c$inv#</code>), purchase order (<code>c$pord</code>), rail car (<code>c$carn</code>), dates (<code>c$sfdt</code>, <code>c$stdt</code>), customer (<code>c$cust</code>), ship-to (<code>c$ship</code>), salesman (<code>c$slmn</code>), location (<code>c$loc</code>), product (<code>c$prod</code>), carrier ID (<code>c$crid</code>), container (<code>c$cntr</code>), and canceled reason (<code>c$cnrs</code>).</li> <li>Increments occurrence counter (<code>w$occr</code>) for each non-blank/zero field.</li> <li>Checks database files (e.g., <code>arcust</code>, <code>bbordh</code>, <code>sa5shi</code>) to ensure valid entries.</li> <li>Calls <code>GSDTEDIT</code> for date validation.</li> <li>Ensures at least one filter is selected; otherwise, sets an error.</li> </ul> </li> <li> <p>Build Work File (<code>bldwrkf</code> Subroutine):</p> </li> <li>Purpose: Constructs a query to populate the work file <code>bb802wl1</code> based on user filters.</li> <li> <p>Actions:</p> <ul> <li>Builds a query selection string (<code>qryslt</code>) using predefined arrays (<code>qryoh</code>, <code>qryod</code>, <code>qrysh</code>, <code>qrysd</code>, <code>qrycn</code>, <code>qrysh2</code>, <code>qrysd2</code>) for open orders, sales history, and canceled orders.</li> <li>Appends conditions for fields like company (<code>c$co</code>), customer (<code>c$cust</code>), order number (<code>c$ord#</code>), invoice number (<code>c$inv#</code>), etc.</li> <li>Calls <code>BB802C</code> with mode 'SAD' (detail) or 'SAH' (header) based on whether location, product, or container is specified.</li> <li>Includes additional filters for CSR (<code>c$tkby</code>), rush orders (<code>c$rush</code>), group by (<code>c$gpby</code>), etc.</li> </ul> </li> <li> <p>Retrieve Sales History for Original Order (<code>rtvsls2</code> Subroutine):</p> <ul> <li>Purpose: Enhances query for sales history when searching by original order.</li> <li>Actions:</li> <li>Adds conditions to <code>qryslt</code> for original order number (<code>c$ord#</code>) using <code>qrysh2</code> or <code>qrysd2</code>.</li> <li>Supports the same filters as <code>bldwrkf</code> for consistency.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Purpose: Assists users in selecting valid values for control fields.</li> <li>Actions:</li> <li>For fields like <code>c$cust</code>, <code>c$ship</code>, calls <code>LCSTSHP</code>.</li> <li>For <code>c$slmn</code>, calls <code>LGSTABL</code>.</li> <li>For <code>c$loc</code>, calls <code>LINLOC</code>.</li> <li>For <code>c$prod</code>, calls <code>LGSPROD</code>.</li> <li>For <code>c$crid</code>, calls <code>LBBCAID</code>.</li> <li>For <code>c$cntr</code>, calls <code>LGSCNTR</code>.</li> <li>For <code>c$cnrs</code>, calls <code>LGSTABL</code>.</li> <li>Updates control fields with selected values.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>addmsg: Sends error messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>wrtmsg: Displays the message subfile (<code>msgctl</code>).</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>History Inquiry (<code>histinq</code> Subroutine):</p> <ul> <li>Purpose: Calls the history inquiry program for a selected subfile record.</li> <li>Actions:</li> <li>Sets <code>o$file = 'BBORDH'</code> and calls <code>GB730P</code> with parameters from <code>x$ordrhist</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr = *on</code> and returns.</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with several external programs to perform specific functions:</p> <ol> <li>BB801: Customer Order Inquiry program, called when a subfile record with option 5 and no invoice number is selected.</li> <li>Parameters: <code>o$co</code>, <code>o$ord#</code>, <code>o$mode</code>, <code>o$fgrp</code>, <code>o$flag</code>.</li> <li>SA801: Customer Invoice Inquiry program, called when a subfile record with option 5 and an invoice number is selected.</li> <li>Parameters: <code>o$co</code>, <code>o$cust</code>, <code>o$inv#</code>, <code>o$ord#</code>, <code>o$sagr</code>, <code>o$pmov</code>, <code>o$fgrp</code>, <code>o$flag</code>.</li> <li>BB802C: Builds the work file <code>bb802wl1</code> based on query selection criteria.</li> <li>Parameters: <code>o$mode</code> ('SAD' or 'SAH'), <code>o$dstc</code>, <code>o$pmov</code>, <code>o$fgrp</code>, <code>qryslt</code>.</li> <li>GSDTEDIT: Validates and converts date fields.</li> <li>Parameters: <code>p#mdy</code>, <code>p#cymd</code>, <code>p#err</code>.</li> <li>LCSTSHP: Assists with customer and ship-to selection.</li> <li>Parameters: <code>x$cstshp</code> (data structure with <code>x$co</code>, <code>x$srch</code>, <code>x$cust</code>, <code>x$ship</code>, <code>x$flag</code>, <code>x$fgrp</code>).</li> <li>LGSTABL: Assists with table-based field selection (e.g., salesman, canceled reason).</li> <li>Parameters: <code>k$slsman</code>/<code>k$bborcn</code>, <code>k$slmn</code>/<code>k$cnrs</code>, <code>o$fgrp</code>.</li> <li>LINLOC: Assists with location selection.</li> <li>Parameters: <code>o$co</code>, <code>o$loc</code>, <code>o$fgrp</code>.</li> <li>LGSPROD: Assists with product selection.</li> <li>Parameters: <code>o$co</code>, <code>o$prod</code>, <code>o$fgrp</code>.</li> <li>LBBCAID: Assists with carrier ID selection.</li> <li>Parameters: <code>o$co</code>, <code>o$caid</code>, <code>o$fgrp</code>.</li> <li>LGSCNTR: Assists with container selection.<ul> <li>Parameters: <code>k$cntr</code>, <code>o$fgrp</code>.</li> </ul> </li> <li>GB730P: Order history inquiry program, called via F06.<ul> <li>Parameters: <code>x$ordrhist</code> (data structure with <code>o$file</code>, <code>o$fgrp</code>, <code>c$co</code>, <code>s1cust</code>, <code>s1ord#</code>, <code>o$seq#</code>).</li> </ul> </li> <li>QCMDEXC: Executes override commands for file access.<ul> <li>Parameters: <code>dbov##</code>, <code>dbol##</code>.</li> </ul> </li> <li>QMHSNDPM: Sends error messages to the program message queue.<ul> <li>Parameters: <code>m@id</code>, <code>m@msgf</code>, <code>m@data</code>, <code>m@l</code>, <code>m@type</code>, <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@key</code>, <code>m@errc</code>.</li> </ul> </li> <li>QMHRMVPM: Removes messages from the program message queue.<ul> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files, all defined with <code>usropn</code> for manual opening and overrides:</p> <ol> <li>arcust: Customer master file.</li> <li>bbcnh: Canceled orders header file.</li> <li>bborcl: Order control file.</li> <li>bbordh: Order header file.</li> <li>gscntr: Container master file.</li> <li>gsprod: Product master file.</li> <li>gstabl: General table file (used for salesman, canceled reason, etc.).</li> <li>inloc: Location master file.</li> <li>shipto: Ship-to master file.</li> <li>bbordhx: Order header file (renamed format <code>bbordpx</code>).</li> <li>sa5shi: Sales history header file (renamed format <code>sa5shppi</code>).</li> <li>sa5shw: Sales history header file (renamed format <code>sa5shppw</code>).</li> <li>sa5shy: Sales history header file (renamed format <code>sa5shppy</code>).</li> <li>sa5shv: Sales history header file (renamed format <code>sa5shppv</code>, added by jk01).</li> <li>bbcaid: Carrier ID file (added by jk10).</li> <li>bb802wl1: Work file in <code>QTEMP</code> for storing query results.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: The program uses indicators (19, 21\u201339, 40\u201343, 49, 50\u201369, 70\u201379, 80, 88, 90\u201399) to control screen behavior, subfile operations, and error handling.</li> <li>Field Prefixes: Fields are prefixed (e.g., <code>f$</code> for display file fields, <code>c$</code> for subfile control, <code>s1</code> for subfile fields) to organize data usage.</li> <li>Revisions: The program has been updated multiple times (e.g., jk01 for original order search, jk03 for F10 toggle, jk09 for file override to <code>QTEMP</code>, jk10 for carrier ID table change).</li> <li>Query Selection: The program dynamically builds SQL-like query selection strings (<code>qryslt</code>) using predefined arrays to filter data based on user input.</li> <li>Subfile Management: The subfile (<code>sfl1</code>) supports folded/unfolded views, pagination, and user selections for inquiries.</li> </ul> <p>This program is a robust inquiry tool designed for flexibility in querying order and invoice data, with extensive validation and user assistance features.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/","title":"BB802A RPGLE","text":"<p>The BB802A RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with open order header data from the <code>BBORDH</code> file. It is called by the BB802C CLP program, which sets up the query environment and file overrides. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/#process-steps-of-the-bb802a-rpg-program","title":"Process Steps of the BB802A RPG Program","text":"<p>The program reads records from the <code>BBORDH</code> file, processes them based on a level break (L1), and updates or adds corresponding records to the <code>BB802W</code> work file. The steps are straightforward, focusing on data transfer with minimal user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number), and <code>k$invn</code> (invoice number, initialized to zeros).</li> <li>Defines <code>k$invn</code> as a field like <code>boinvn</code> (invoice number from <code>BBORDH</code>) and sets it to zeros.</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BBORDH</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BBORDH</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>boco</code>, <code>bocust</code>, <code>bordno</code>, and <code>boinvn</code>.</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds or updates records in the <code>BB802W</code> work file based on <code>BBORDH</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>k$invn</code>) to check if a matching record exists in <code>BB802W</code> using <code>SETLL</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *off</code>), chains to <code>BB802W</code> to verify existence (<code>*in99 = *on</code> if not found).</li> <li>If the record does not exist (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BBORDH</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>boco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>bocust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>bordno</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>k$invn</code> (invoice number, zeros)</li> <li><code>w1ship</code> \u2190 <code>boship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>bopord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>boslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>bortg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>bocar</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>borqd8</code> (request date)</li> <li><code>w1frcd</code> \u2190 <code>bofrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>bosfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>bocafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>bocacd</code> (carrier code)</li> <li><code>w1oori</code> \u2190 <code>'O'</code> (order origin indicator)</li> <li>Additional fields (per jk01):</li> <li><code>w1tkby</code> \u2190 <code>botkby</code> (taken by)</li> <li><code>w1rush</code> \u2190 <code>borush</code> (rush order flag)</li> <li><code>w1gpby</code> \u2190 <code>bogpby</code> (group by)</li> <li><code>w1racd</code> \u2190 <code>boracd</code> (reason code)</li> <li><code>w1mulo</code> \u2190 <code>bomulo</code> (multi-order flag)</li> <li><code>w1mlcd</code> \u2190 <code>bomlcd</code> (multi-code)</li> <li><code>w1tolo</code> \u2190 <code>botolo</code> (total order)</li> <li><code>w1loda</code> \u2190 <code>boloda</code> (load date)</li> <li><code>w1lovo</code> \u2190 <code>bolovo</code> (load volume)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>), no update is performed (implicitly skips to the next record).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BBORDH</code> records, closing files implicitly (as <code>BBORDH</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds records to <code>BB802W</code> from <code>BBORDH</code> for open order headers, using a fixed invoice number of zeros (<code>k$invn = *zeros</code>) to align with the query structure set by BB802C.</li> <li> <p>Only adds new records if no matching record exists in <code>BB802W</code> (based on <code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>k$invn</code>).</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BBORDH</code> records on a level break (<code>L1</code>) defined by <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number), and <code>boinvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps specific fields from <code>BBORDH</code> to <code>BB802W</code>, preserving key order and inquiry data (e.g., customer, order, ship-to, salesman, freight details).</li> <li> <p>Includes additional fields added in revision jk01 to support enhanced inquiry capabilities (e.g., rush order, load date, total order).</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GBBORDH</code> or <code>ZBBORDH</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>SETLL</code> and <code>CHAIN</code> to ensure no duplicate records are written to <code>BB802W</code>.</li> <li> <p>Clears the record format before writing to prevent residual data.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>) to capture additional order header data (e.g., taken by, rush flag, load volume).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BBORDH: Open order header file (input primary, <code>ip</code>), contains order header data (e.g., <code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>boinvn</code>, <code>boship</code>, etc.).</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802A%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>SETLL</code> and <code>CHAIN</code> operations).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>boco</code>, <code>bocust</code>, <code>bordno</code>, and <code>k$invn</code>.</li> <li>Context: Called by BB802C in <code>ORH</code> mode (open order header processing), where <code>BBORDH</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that open order header data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/","title":"BB802B RPGLE","text":"<p>The BB802B RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with open order detail data from the <code>BB802BQF</code> file, which is a logical file joining <code>BBORDD</code> (order details) and <code>BBORDH</code> (order headers). It is called by the BB802C CLP program, which sets up the query environment and file overrides. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/#process-steps-of-the-bb802b-rpg-program","title":"Process Steps of the BB802B RPG Program","text":"<p>The program reads records from the <code>BB802BQF</code> file, processes them based on a level break (L1), and updates or adds corresponding records to the <code>BB802W</code> work file. The steps are focused on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>bdco</code> (company), <code>bocust</code> (customer), <code>bdordn</code> (order number), and <code>boinvn</code> (invoice number).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BB802BQF</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BB802BQF</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, and <code>boinvn</code>.</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds or updates records in the <code>BB802W</code> work file based on <code>BB802BQF</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>) to check if a matching record exists in <code>BB802W</code> using <code>SETLL</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *off</code>), chains to <code>BB802W</code> to verify existence (<code>*in99 = *on</code> if not found).</li> <li>If the record does not exist (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BB802BQF</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>bdco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>bocust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>bdordn</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>boinvn</code> (invoice number)</li> <li><code>w1ship</code> \u2190 <code>boship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>bopord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>boslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>bortg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>bocar</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>borqd8</code> (request date)</li> <li><code>w1frcd</code> \u2190 <code>bofrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>bosfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>bocafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>bocacd</code> (carrier code)</li> <li><code>w1loc</code> \u2190 <code>bdloc</code> (location)</li> <li><code>w1prod</code> \u2190 <code>bdprod</code> (product)</li> <li><code>w1cntr</code> \u2190 <code>bdcntr</code> (container)</li> <li><code>w1qty</code> \u2190 <code>bdqty</code> (quantity, added by jk01)</li> <li><code>w1um</code> \u2190 <code>bdum</code> (unit of measure, added by jk01)</li> <li><code>w1oori</code> \u2190 <code>'O'</code> (order origin indicator)</li> <li>Additional fields (per jk02):</li> <li><code>w1tkby</code> \u2190 <code>botkby</code> (taken by)</li> <li><code>w1rush</code> \u2190 <code>borush</code> (rush order flag)</li> <li><code>w1gpby</code> \u2190 <code>bogpby</code> (group by)</li> <li><code>w1racd</code> \u2190 <code>boracd</code> (reason code)</li> <li><code>w1mulo</code> \u2190 <code>bomulo</code> (multi-order flag)</li> <li><code>w1mlcd</code> \u2190 <code>bomlcd</code> (multi-code)</li> <li><code>w1tolo</code> \u2190 <code>botolo</code> (total order)</li> <li><code>w1loda</code> \u2190 <code>boloda</code> (load date)</li> <li><code>w1lovo</code> \u2190 <code>bolovo</code> (load volume)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>), no update is performed (implicitly skips to the next record).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802BQF</code> records, closing files implicitly (as <code>BB802BQF</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds records to <code>BB802W</code> from <code>BB802BQF</code> (joining <code>BBORDD</code> and <code>BBORDH</code>) for open order details, preserving the invoice number (<code>boinvn</code>) from the header.</li> <li> <p>Only adds new records if no matching record exists in <code>BB802W</code> (based on <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>).</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BB802BQF</code> records on a level break (<code>L1</code>) defined by <code>bdco</code> (company), <code>bocust</code> (customer), <code>bdordn</code> (order number), and <code>boinvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>BB802BQF</code> to <code>BB802W</code>, including both header (<code>BBORDH</code>) and detail (<code>BBORDD</code>) data (e.g., customer, order, ship-to, product, quantity).</li> <li> <p>Includes additional fields added in revisions jk01 (quantity, unit of measure) and jk02 (taken by, rush flag, load volume, etc.) to support enhanced inquiry capabilities.</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GBBORDD</code>, <code>GBBORDH</code> or <code>ZBBORDD</code>, <code>ZBBORDH</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>SETLL</code> and <code>CHAIN</code> to ensure no duplicate records are written to <code>BB802W</code>.</li> <li> <p>Clears the record format before writing to prevent residual data.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Added <code>w1qty</code> (quantity) and <code>w1um</code> (unit of measure) to <code>BB802W</code> to include order detail quantities.</li> <li>jk02: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>) to capture additional order header data (e.g., taken by, rush flag, load volume).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802BQF: Logical file (input primary, <code>ip</code>), joins <code>BBORDD</code> (order details) and <code>BBORDH</code> (order headers), containing fields like <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>, <code>bdloc</code>, <code>bdprod</code>, etc.</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1qty</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802B%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>SETLL</code> and <code>CHAIN</code> operations).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, and <code>boinvn</code>.</li> <li>Context: Called by BB802C in <code>ORD</code> mode (open order detail processing), where <code>BB802BQF</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that open order detail data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/","title":"BB802C CLP","text":"<p>The BB802C CLP program is a control language program within the Customer Order and Invoice Inquiry system, designed to create and populate a work file (<code>BB802W</code>) in the <code>QTEMP</code> library based on user-specified query criteria. It is called from the main program BB802 and processes data for open orders, canceled orders, and sales history, with support for product moves. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/#process-steps-of-the-bb802c-clp-program","title":"Process Steps of the BB802C CLP Program","text":"<p>The program processes input parameters to determine the mode of operation, creates or clears work files, and executes queries to populate the work file with filtered data. The steps are driven by conditional logic based on the <code>P$MODE</code> parameter. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Parameter Declaration:</li> <li>Purpose: Defines input parameters and variables for file handling.</li> <li> <p>Actions:</p> <ul> <li>Declares parameters:</li> <li><code>&amp;P$MODE</code> (3 characters): Mode of operation ('WRK', 'ORH', 'ORD', 'SAH', 'SAD', 'CNH', 'CND').</li> <li><code>&amp;P$DSTC</code> (1 character): Destination city flag ('Q' to skip ship-to processing, otherwise process).</li> <li><code>&amp;P$PMOV</code> (1 character): Product move flag ('Y' for product move, 'N' otherwise).</li> <li><code>&amp;P$FGRP</code> (1 character): File group ('G' or 'Z' to determine library).</li> <li><code>&amp;QRYSLT</code> (1024 characters): Query selection string for filtering data.</li> <li>Declares variables for file names: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>, <code>&amp;FILE03</code> (10 characters each).</li> </ul> </li> <li> <p>Clear/Create Work Files:</p> </li> <li>Purpose: Ensures the work file <code>BB802W</code> and related files are ready in <code>QTEMP</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'WRK'</code>):</p> <ul> <li>Attempts to clear the physical file <code>QTEMP/BB802W</code> using <code>CLRPFM</code>.</li> <li>If the file is not found (<code>CPF3142</code>), creates it and related files by duplicating objects from the appropriate library:</li> <li>If <code>&amp;P$FGRP = 'G'</code>, duplicates from <code>DATA</code> library.</li> <li>If <code>&amp;P$FGRP \u2260 'G'</code>, duplicates from <code>DATADEV</code> library (per JK02).</li> <li>Creates files: <code>BB802W</code>, <code>BB802WL1</code>, <code>BB802BQF</code>, <code>BB802FQF</code>, <code>BB802HQF</code>, <code>BB802IQF</code>, <code>BB802PQF</code>.</li> <li>Handles errors (<code>CPF5813</code>, <code>CPF7302</code>) using <code>MONMSG</code> to continue if file creation fails.</li> </ul> </li> <li> <p>Process Open Orders - Header as Primary:</p> </li> <li>Purpose: Queries open order header data (<code>BBORDH</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'ORH'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'BBORDH'</code> (e.g., <code>GBBORDH</code> or <code>ZBBORDH</code>).</li> <li>Overrides <code>BBORDH</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code> using <code>OVRDBF</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>File: <code>&amp;FILE01</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>BOCO</code> (company), <code>BOCUST</code> (customer), <code>BORDNO</code> (order number), <code>BOINVN</code> (invoice number).</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802A</code> to process the query results.</li> <li>Closes the query file (<code>CLOF</code>) and deletes overrides (<code>DLTOVR</code>).</li> </ul> </li> <li> <p>Process Open Orders - Detail as Primary:</p> </li> <li>Purpose: Queries open order detail data (<code>BBORDD</code>) joined with header (<code>BBORDH</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'ORD'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'BBORDD'</code> and <code>&amp;FILE02</code> to <code>&amp;P$FGRP + 'BBORDH'</code>.</li> <li>Overrides <code>BB802BQF</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>Files: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>.</li> <li>Format: <code>BB802BQF</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>BDCO</code> (company), <code>BOCUST</code> (customer), <code>BDORDN</code> (order number), <code>BOINVN</code> (invoice number).</li> <li>Join fields: <code>BDCO</code> to <code>BOCO</code>, <code>BDORDN</code> to <code>BORDNO</code>, with <code>JDFTVAL(*YES)</code> for outer join.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802B</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Process Sales History - Header as Primary:</p> </li> <li>Purpose: Queries sales history header data (<code>SA5SHP</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'SAH'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'SA5SHP'</code> (e.g., <code>GSA5SHP</code> or <code>ZSA5SHP</code>).</li> <li>Overrides <code>SA5SHP</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>File: <code>&amp;FILE01</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>SHCO</code> (company), <code>SHCUST</code> (customer), <code>SHORD</code> (order number), <code>SHINV</code> (invoice number).</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802E</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Process Sales History - Detail as Primary (Standard):</p> </li> <li>Purpose: Queries sales history detail data (<code>SA5FILD</code>) joined with header (<code>SA5SHP</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'SAD'</code> and <code>&amp;P$PMOV \u2260 'Y'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'SA5FILD'</code> and <code>&amp;FILE02</code> to <code>&amp;P$FGRP + 'SA5SHP'</code>.</li> <li>Overrides <code>BB802FQF</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>Files: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>.</li> <li>Format: <code>BB802FQF</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>SACO</code> (company), <code>SACUST</code> (customer), <code>SAORD</code> (order number), <code>SAINVN</code> (invoice number), <code>SASEQ</code> (sequence).</li> <li>Join fields: <code>SACO</code> to <code>SHCO</code>, <code>SACUST</code> to <code>SHCUST</code>, <code>SAORD</code> to <code>SHORD</code>, <code>SAINVN</code> to <code>SHINV</code>, with <code>JDFTVAL(*YES)</code>.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802F</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Process Sales History - Detail as Primary (Product Move):</p> </li> <li>Purpose: Queries sales history move detail data (<code>SA5MOVD</code>) joined with header (<code>SA5SHP</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'SAD'</code> and <code>&amp;P$PMOV = 'Y'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'SA5MOVD'</code> and <code>&amp;FILE02</code> to <code>&amp;P$FGRP + 'SA5SHP'</code>.</li> <li>Overrides <code>BB802PQF</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>Files: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>.</li> <li>Format: <code>BB802PQF</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>SACO</code>, <code>SACUST</code>, <code>SAORD</code>, <code>SAINVN</code>, <code>SASEQ</code>.</li> <li>Join fields: Same as standard sales history detail, with <code>JDFTVAL(*YES)</code>.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802P</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Process Canceled Orders - Header as Primary:</p> </li> <li>Purpose: Queries canceled order header data (<code>BBCNH</code>) joined with reason (<code>BBCNOR</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'CNH'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'BBCNH'</code> and <code>&amp;FILE02</code> to <code>&amp;P$FGRP + 'BBCNOR'</code>.</li> <li>Overrides <code>BB802HQF</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>Files: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>.</li> <li>Format: <code>BB802HQF</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>BOCO</code>, <code>BOCUST</code>, <code>BORDNO</code>, <code>BOINVN</code>.</li> <li>Join fields: <code>BOCO</code> to <code>BCCO</code>, <code>BORDNO</code> to <code>BCORDN</code>, with <code>JDFTVAL(*YES)</code>.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802H</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Process Canceled Orders - Detail as Primary:</p> </li> <li>Purpose: Queries canceled order detail data (<code>BBCND</code>) joined with header (<code>BBCNH</code>) and reason (<code>BBCNOR</code>) and populates <code>BB802W</code>.</li> <li> <p>Actions (executed if <code>&amp;P$MODE = 'CND'</code>):</p> <ul> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'BBCND'</code>, <code>&amp;FILE02</code> to <code>&amp;P$FGRP + 'BBCNH'</code>, and <code>&amp;FILE03</code> to <code>&amp;P$FGRP + 'BBCNOR'</code>.</li> <li>Overrides <code>BB802IQF</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Opens a query file (<code>OPNQRYF</code>) with:</li> <li>Files: <code>&amp;FILE01</code>, <code>&amp;FILE02</code>, <code>&amp;FILE03</code>.</li> <li>Format: <code>BB802IQF</code>.</li> <li>Query selection: <code>&amp;QRYSLT</code>.</li> <li>Key fields: <code>BDCO</code>, <code>BOCUST</code>, <code>BDORDN</code>, <code>BOINVN</code>.</li> <li>Join fields: <code>BDCO</code> to <code>BOCO</code>, <code>BDORDN</code> to <code>BORDNO</code>, <code>BDCO</code> to <code>BCCO</code>, <code>BDORDN</code> to <code>BCORDN</code>, with <code>JDFTVAL(*YES)</code>.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802I</code> to process the query results.</li> <li>Closes the query file and deletes overrides.</li> </ul> </li> <li> <p>Retrieve Ship-to Destination City:</p> <ul> <li>Purpose: Updates <code>BB802W</code> with ship-to destination city from <code>SHIPTO</code>.</li> <li>Actions (executed if <code>&amp;P$DSTC \u2260 'Q'</code>):</li> <li>Sets <code>&amp;FILE01</code> to <code>&amp;P$FGRP + 'SHIPTO'</code>.</li> <li>Overrides <code>SHIPTO</code> to <code>&amp;FILE01</code> with <code>SHARE(*YES)</code>.</li> <li>Overrides <code>BB802W</code> to <code>QTEMP/BB802W</code>.</li> <li>Calls <code>BB802G</code> to update the work file with destination city data.</li> <li>Deletes overrides.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Ends the program (<code>ENDPGM</code>).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Creation:</li> <li>The work file <code>BB802W</code> and related logical files (<code>BB802WL1</code>, <code>BB802BQF</code>, <code>BB802FQF</code>, <code>BB802HQF</code>, <code>BB802IQF</code>, <code>BB802PQF</code>) are created in <code>QTEMP</code> to ensure isolation and temporary storage.</li> <li>Files are duplicated from <code>DATA</code> (for <code>&amp;P$FGRP = 'G'</code>) or <code>DATADEV</code> (for <code>&amp;P$FGRP \u2260 'G'</code>, per JK02) to support different environments.</li> <li> <p>Files are cleared or created with constraints and triggers disabled (<code>CST(*NO)</code>, <code>TRG(*NO)</code>) to optimize performance.</p> </li> <li> <p>Mode-Based Processing:</p> </li> <li>The program supports seven modes (<code>P$MODE</code>):<ul> <li>WRK: Clears or creates work files.</li> <li>ORH: Processes open order headers (<code>BBORDH</code>).</li> <li>ORD: Processes open order details (<code>BBORDD</code>) with header join.</li> <li>SAH: Processes sales history headers (<code>SA5SHP</code>).</li> <li>SAD: Processes sales history details (<code>SA5FILD</code> or <code>SA5MOVD</code> based on <code>P$PMOV</code>).</li> <li>CNH: Processes canceled order headers (<code>BBCNH</code>) with reason join.</li> <li>CND: Processes canceled order details (<code>BBCND</code>) with header and reason joins.</li> </ul> </li> <li> <p>Each mode uses specific files and formats, with joins and key fields tailored to the data type.</p> </li> <li> <p>File Group Handling:</p> </li> <li>The <code>P$FGRP</code> parameter ('G' or 'Z') determines the library prefix for files (e.g., <code>GBBORDH</code> vs. <code>ZBBORDH</code>).</li> <li> <p>Overrides ensure the correct library is accessed based on the environment.</p> </li> <li> <p>Product Move Support (JK01):</p> </li> <li>If <code>P$PMOV = 'Y'</code> and <code>P$MODE = 'SAD'</code>, uses <code>SA5MOVD</code> instead of <code>SA5FILD</code> for sales history details, calling <code>BB802P</code> instead of <code>BB802F</code>.</li> <li> <p>This supports queries involving product moves, ensuring compatibility with move-specific data.</p> </li> <li> <p>Query Selection:</p> </li> <li>The <code>&amp;QRYSLT</code> parameter contains a dynamic query selection string built by the calling program (BB802) to filter records based on user input (e.g., company, customer, order, invoice).</li> <li> <p>The query is applied consistently across modes, with joins ensuring related data is included.</p> </li> <li> <p>Ship-to Destination:</p> </li> <li>If <code>P$DSTC \u2260 'Q'</code>, the program retrieves ship-to destination city data from <code>SHIPTO</code> to enhance the work file.</li> <li> <p>This step is skipped if <code>P$DSTC = 'Q'</code>, optimizing performance when destination data is not needed.</p> </li> <li> <p>Error Handling:</p> </li> <li>Uses <code>MONMSG</code> to handle file creation errors (<code>CPF3142</code>, <code>CPF5813</code>, <code>CPF7302</code>), ensuring the program continues gracefully.</li> <li> <p>Commented-out debug messages suggest logging capabilities for troubleshooting (e.g., to users <code>CAPO</code> or <code>KRAJTEST</code>).</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>JB01: Changed work file creation to copy from <code>ARGDEV</code> or <code>ARGDEVTEST</code> (superseded by JK02).</li> <li>JK01: Added support for product moves, processing <code>SA5MOVD</code> when <code>P$PMOV = 'Y'</code>.</li> <li>JK02: Updated library references to <code>DATA</code> and <code>DATADEV</code>, overriding work files to <code>QTEMP</code> for consistency.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files, with overrides applied based on <code>P$FGRP</code>:</p> <ol> <li>BB802W: Work file in <code>QTEMP</code> (primary output file).</li> <li>BB802WL1: Logical work file in <code>QTEMP</code>.</li> <li>BB802BQF: Logical work file for open order details in <code>QTEMP</code>.</li> <li>BB802FQF: Logical work file for sales history details in <code>QTEMP</code>.</li> <li>BB802HQF: Logical work file for canceled order headers in <code>QTEMP</code>.</li> <li>BB802IQF: Logical work file for canceled order details in <code>QTEMP</code>.</li> <li>BB802PQF: Logical work file for sales history move details in <code>QTEMP</code>.</li> <li>BBORDH: Open order header file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>BBORDD: Open order detail file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>SA5SHP: Sales history header file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>SA5FILD: Sales history detail file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>SA5MOVD: Sales history move detail file (prefixed with <code>G</code> or <code>Z</code>, used if <code>P$PMOV = 'Y'</code>).</li> <li>BBCNH: Canceled order header file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>BBCND: Canceled order detail file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>BBCNOR: Canceled order reason file (prefixed with <code>G</code> or <code>Z</code>).</li> <li>SHIPTO: Ship-to master file (prefixed with <code>G</code> or <code>Z</code>, used if <code>P$DSTC \u2260 'Q'</code>).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs based on the mode:</p> <ol> <li>BB802A: Processes open order header data (<code>ORH</code> mode).</li> <li>Parameters: None explicitly passed (relies on file overrides and open query).</li> <li>BB802B: Processes open order detail data (<code>ORD</code> mode).</li> <li>Parameters: None explicitly passed.</li> <li>BB802E: Processes sales history header data (<code>SAH</code> mode).</li> <li>Parameters: None explicitly passed.</li> <li>BB802F: Processes sales history detail data (<code>SAD</code> mode, <code>P$PMOV \u2260 'Y'</code>).</li> <li>Parameters: None explicitly passed.</li> <li>BB802P: Processes sales history move detail data (<code>SAD</code> mode, <code>P$PMOV = 'Y'</code>).</li> <li>Parameters: None explicitly passed.</li> <li>BB802H: Processes canceled order header data (<code>CNH</code> mode).</li> <li>Parameters: None explicitly passed.</li> <li>BB802I: Processes canceled order detail data (<code>CND</code> mode).</li> <li>Parameters: None explicitly passed.</li> <li>BB802G: Updates <code>BB802W</code> with ship-to destination city data (when <code>P$DSTC \u2260 'Q'</code>).</li> <li>Parameters: None explicitly passed.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802C%20CLP/#additional-notes","title":"Additional Notes","text":"<ul> <li>File Overrides: The program uses <code>OVRDBF</code> to dynamically map files to the correct library (<code>DATA</code> or <code>DATADEV</code>) and ensure shared access (<code>SHARE(*YES)</code>).</li> <li>Query Flexibility: The <code>OPNQRYF</code> command allows dynamic filtering via <code>&amp;QRYSLT</code>, supporting complex user-defined criteria from BB802.</li> <li>Temporary Files: All work files are created in <code>QTEMP</code> to ensure session-specific data and cleanup.</li> <li>Join Logic: Uses outer joins (<code>JDFTVAL(*YES)</code>) to include records even if join conditions are not met, ensuring comprehensive results.</li> <li>Commented Code: Debug messages and <code>CPYFRMQRYF</code> commands are commented out, indicating they were used for testing or development.</li> </ul> <p>This program is a critical component of the inquiry system, enabling dynamic data filtering and work file population to support the interactive interface of BB802.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/","title":"BB802E RPGLE","text":"<p>The BB802E RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with sales history header data from the <code>SA5SHP</code> file. It is called by the BB802C CLP program, which sets up the query environment and file overrides. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/#process-steps-of-the-bb802e-rpg-program","title":"Process Steps of the BB802E RPG Program","text":"<p>The program reads records from the <code>SA5SHP</code> file, processes them based on a level break (L1), and updates or adds corresponding records to the <code>BB802W</code> work file. The steps focus on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>shco</code> (company), <code>shcust</code> (customer), <code>shord</code> (order number), and <code>shinv</code> (invoice number).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>SA5SHP</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>SA5SHP</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>shco</code>, <code>shcust</code>, <code>shord</code>, and <code>shinv</code>.</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds or updates records in the <code>BB802W</code> work file based on <code>SA5SHP</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>shco</code>, <code>shcust</code>, <code>shord</code>, <code>shinv</code>) to check if a matching record exists in <code>BB802W</code> using <code>CHAIN</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>SA5SHP</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>shco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>shcust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>shord</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>shinv</code> (invoice number)</li> <li><code>w1ship</code> \u2190 <code>shship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>shpord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>shslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>shrtg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>shcarn</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>shsmd8</code> (ship date)</li> <li><code>w1frcd</code> \u2190 <code>shfrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>shsfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>shcafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>shcacd</code> (carrier code)</li> <li><code>w1trk#</code> \u2190 <code>shtrk#</code> (tracking number)</li> <li><code>w1oori</code> \u2190 <code>'I'</code> (invoice origin indicator)</li> <li>Additional fields:</li> <li><code>w1orpr</code> \u2190 <code>saorpr</code> (order process, added by JK01)</li> <li><code>w1tkby</code> \u2190 <code>shtkby</code> (taken by, added by JK02)</li> <li><code>w1rush</code> \u2190 <code>sarush</code> (rush order flag, added by JK02)</li> <li><code>w1gpby</code> \u2190 <code>shgpby</code> (group by, added by JK02)</li> <li><code>w1racd</code> \u2190 <code>shracd</code> (reason code, added by JK02)</li> <li><code>w1mulo</code> \u2190 <code>shmulo</code> (multi-order flag, added by JK02)</li> <li><code>w1mlcd</code> \u2190 <code>shmlcd</code> (multi-code, added by JK02)</li> <li><code>w1tolo</code> \u2190 <code>shtolo</code> (total order, added by JK02)</li> <li><code>w1loda</code> \u2190 <code>shloda</code> (load date, added by JK02)</li> <li><code>w1lovo</code> \u2190 <code>shlovo</code> (load volume, added by JK02)</li> <li><code>w1indt</code> \u2190 <code>shimdy</code> (invoice date, added by JK02)</li> <li><code>w1inva</code> \u2190 <code>shitot</code> (invoice amount, added by JK02)</li> <li><code>w1fccd</code> \u2190 <code>shfccd</code> (freight charge code, added by JK02)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>):</li> <li>Updates the existing record with <code>w1oori = 'B'</code> (indicating both order and invoice data).</li> <li>Updates the <code>BB802W</code> record (<code>update bb802wpf</code>).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>SA5SHP</code> records, closing files implicitly (as <code>SA5SHP</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds or updates records in <code>BB802W</code> from <code>SA5SHP</code> for sales history headers, using the invoice number (<code>shinv</code>) as a key component.</li> <li>If no matching record exists in <code>BB802W</code>, a new record is created with <code>w1oori = 'I'</code> (indicating invoice origin).</li> <li> <p>If a matching record exists, it is updated with <code>w1oori = 'B'</code> to indicate combined order and invoice data.</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>SA5SHP</code> records on a level break (<code>L1</code>) defined by <code>shco</code> (company), <code>shcust</code> (customer), <code>shord</code> (order number), and <code>shinv</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>SA5SHP</code> to <code>BB802W</code>, including key inquiry data (e.g., customer, order, invoice, ship-to, salesman, freight details).</li> <li> <p>Includes additional fields added in revisions JK01 (<code>w1orpr</code>) and JK02 (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, etc.) to support enhanced inquiry capabilities (e.g., invoice date, invoice amount, freight charge code).</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GSA5SHP</code> or <code>ZSA5SHP</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>CHAIN</code> to check for existing records in <code>BB802W</code>, ensuring no duplicates are created unnecessarily.</li> <li>Clears the record format before writing new records to prevent residual data.</li> <li> <p>Updates existing records to reflect combined data (<code>w1oori = 'B'</code>) when applicable.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>JK01: Added <code>w1orpr</code> (order process) to <code>BB802W</code> to capture order processing status.</li> <li>JK02: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>, <code>w1indt</code>, <code>w1inva</code>, <code>w1fccd</code>) to capture additional sales history data (e.g., taken by, invoice date, invoice amount).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>SA5SHP: Sales history header file (input primary, <code>ip</code>), contains sales header data (e.g., <code>shco</code>, <code>shcust</code>, <code>shord</code>, <code>shinv</code>, <code>shship</code>, etc.).</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1orpr</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802E%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>CHAIN</code> operation).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>shco</code>, <code>shcust</code>, <code>shord</code>, and <code>shinv</code>.</li> <li>Context: Called by BB802C in <code>SAH</code> mode (sales history header processing), where <code>SA5SHP</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> <li>Update Logic: Unlike similar programs (e.g., BB802A, BB802B), it updates existing records with <code>w1oori = 'B'</code> to indicate combined data, reflecting the integration of sales history with other inquiry data.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that sales history header data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/","title":"BB802F RPGLE","text":"<p>The BB802F RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with sales history detail data from the <code>BB802FQF</code> file, which is a logical file joining <code>SA5FILD</code> (sales history details) and <code>SA5SHP</code> (sales history headers). It is called by the BB802C CLP program, which sets up the query environment and file overrides. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/#process-steps-of-the-bb802f-rpg-program","title":"Process Steps of the BB802F RPG Program","text":"<p>The program reads records from the <code>BB802FQF</code> file, processes them based on a level break (L1), and updates or adds corresponding records to the <code>BB802W</code> work file. The steps focus on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>saco</code> (company), <code>sacust</code> (customer), <code>saord</code> (order number), and <code>sainvn</code> (invoice number).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BB802FQF</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BB802FQF</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>saco</code>, <code>sacust</code>, <code>saord</code>, and <code>sainvn</code>.</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds or updates records in the <code>BB802W</code> work file based on <code>BB802FQF</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>saco</code>, <code>sacust</code>, <code>saord</code>, <code>sainvn</code>) to check if a matching record exists in <code>BB802W</code> using <code>CHAIN</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BB802FQF</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>saco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>sacust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>saord</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>sainvn</code> (invoice number)</li> <li><code>w1ship</code> \u2190 <code>saship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>shpord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>shslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>shrtg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>shcarn</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>shsmd8</code> (ship date)</li> <li><code>w1frcd</code> \u2190 <code>shfrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>shsfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>shcafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>shcacd</code> (carrier code)</li> <li><code>w1trk#</code> \u2190 <code>shtrk#</code> (tracking number)</li> <li><code>w1loc</code> \u2190 <code>saloc</code> (location)</li> <li><code>w1prod</code> \u2190 <code>saprod</code> (product)</li> <li><code>w1cntr</code> \u2190 <code>sacntr</code> (container)</li> <li><code>w1qty</code> \u2190 <code>sactqt</code> (quantity, added by jk01)</li> <li><code>w1um</code> \u2190 <code>saum</code> (unit of measure, added by jk01)</li> <li><code>w1orpr</code> \u2190 <code>saorpr</code> (order process, added by jk01)</li> <li><code>w1oori</code> \u2190 <code>'I'</code> (invoice origin indicator)</li> <li>Additional fields (per jk02):</li> <li><code>w1tkby</code> \u2190 <code>shtkby</code> (taken by)</li> <li><code>w1rush</code> \u2190 <code>sarush</code> (rush order flag)</li> <li><code>w1gpby</code> \u2190 <code>shgpby</code> (group by)</li> <li><code>w1racd</code> \u2190 <code>shracd</code> (reason code)</li> <li><code>w1mulo</code> \u2190 <code>shmulo</code> (multi-order flag)</li> <li><code>w1mlcd</code> \u2190 <code>shmlcd</code> (multi-code)</li> <li><code>w1tolo</code> \u2190 <code>shtolo</code> (total order)</li> <li><code>w1loda</code> \u2190 <code>shloda</code> (load date)</li> <li><code>w1lovo</code> \u2190 <code>shlovo</code> (load volume)</li> <li><code>w1indt</code> \u2190 <code>shimdy</code> (invoice date)</li> <li><code>w1inva</code> \u2190 <code>shitot</code> (invoice amount)</li> <li><code>w1fccd</code> \u2190 <code>shfccd</code> (freight charge code)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>):</li> <li>Updates the existing record with <code>w1oori = 'B'</code> (indicating both order and invoice data).</li> <li>Updates the <code>BB802W</code> record (<code>update bb802wpf</code>).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802FQF</code> records, closing files implicitly (as <code>BB802FQF</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds or updates records in <code>BB802W</code> from <code>BB802FQF</code> (joining <code>SA5FILD</code> and <code>SA5SHP</code>) for sales history details, using the invoice number (<code>sainvn</code>) as a key component.</li> <li>If no matching record exists in <code>BB802W</code>, a new record is created with <code>w1oori = 'I'</code> (indicating invoice origin).</li> <li> <p>If a matching record exists, it is updated with <code>w1oori = 'B'</code> to indicate combined order and invoice data.</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BB802FQF</code> records on a level break (<code>L1</code>) defined by <code>saco</code> (company), <code>sacust</code> (customer), <code>saord</code> (order number), and <code>sainvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>BB802FQF</code>, combining detail data (<code>SA5FILD</code>: e.g., <code>saloc</code>, <code>saprod</code>, <code>sactqt</code>) and header data (<code>SA5SHP</code>: e.g., <code>shpord</code>, <code>shslmn</code>, <code>shsmd8</code>).</li> <li> <p>Includes additional fields added in revisions jk01 (<code>w1qty</code>, <code>w1um</code>, <code>w1orpr</code>) and jk02 (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, etc.) to support enhanced inquiry capabilities (e.g., quantity, invoice date, freight charge code).</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GSA5FILD</code>, <code>GSA5SHP</code> or <code>ZSA5FILD</code>, <code>ZSA5SHP</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>CHAIN</code> to check for existing records in <code>BB802W</code>, ensuring no duplicates are created unnecessarily.</li> <li>Clears the record format before writing new records to prevent residual data.</li> <li> <p>Updates existing records to reflect combined data (<code>w1oori = 'B'</code>) when applicable.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Added <code>w1qty</code> (quantity), <code>w1um</code> (unit of measure), and <code>w1orpr</code> (order process) to <code>BB802W</code> to include sales detail quantities and processing status.</li> <li>jk02: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>, <code>w1indt</code>, <code>w1inva</code>, <code>w1fccd</code>) to capture additional sales history data (e.g., taken by, invoice date, invoice amount).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802FQF: Logical file (input primary, <code>ip</code>), joins <code>SA5FILD</code> (sales history details) and <code>SA5SHP</code> (sales history headers), containing fields like <code>saco</code>, <code>sacust</code>, <code>saord</code>, <code>sainvn</code>, <code>saloc</code>, <code>saprod</code>, etc.</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1qty</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802F%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>CHAIN</code> operation).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>saco</code>, <code>sacust</code>, <code>saord</code>, and <code>sainvn</code>.</li> <li>Context: Called by BB802C in <code>SAD</code> mode (sales history detail processing, when <code>P$PMOV \u2260 'Y'</code>), where <code>BB802FQF</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> <li>Update Logic: Like BB802E, it updates existing records with <code>w1oori = 'B'</code> to indicate combined data, reflecting integration with other inquiry data.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that sales history detail data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/","title":"BB802G RPGLE","text":"<p>The BB802G RPGLE program is a component of the Customer Orders and Invoicing system, designed to update the <code>BB802W</code> work file with ship-to city and state information from the <code>SHIPTO</code> file. It is called by the BB802C CLP program as part of the Customer Order and Invoice Inquiry process to enhance inquiry data with location details. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/#process-steps-of-the-bb802g-rpg-program","title":"Process Steps of the BB802G RPG Program","text":"<p>The program reads records from the <code>BB802W</code> work file, retrieves corresponding ship-to data from the <code>SHIPTO</code> file based on the ship-to code (<code>w1ship</code>), and updates the work file with city (<code>w1dstc</code>) and state (<code>w1dsts</code>). The steps are focused on data enrichment with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes key lists.</li> <li> <p>Actions:</p> <ul> <li>Defines a key field <code>k$999</code> as like <code>w1ship</code> and initializes it to <code>999</code> for accessing the <code>SHIPTO</code> file in specific cases.</li> <li>Defines two key lists for accessing the <code>SHIPTO</code> file:</li> <li><code>klord999</code>: Uses <code>w1co</code> (company), <code>w1ord#</code> (order number), and <code>k$999</code> (fixed ship-to code <code>999</code>).</li> <li><code>klcstshp</code>: Uses <code>w1co</code> (company), <code>w1cust</code> (customer), and <code>w1ship</code> (ship-to code).</li> <li>No input parameters are received, indicating the program processes all records in <code>BB802W</code>.</li> </ul> </li> <li> <p>Main Processing Loop (implied, not explicitly coded):</p> </li> <li>Purpose: Reads <code>BB802W</code> records sequentially and updates them with ship-to data.</li> <li> <p>Actions:</p> <ul> <li>The program implicitly reads <code>BB802W</code> records (as it is defined as an update primary file, <code>up</code>).</li> <li>For each record, it evaluates the <code>w1ship</code> field to determine the appropriate key list for accessing <code>SHIPTO</code>.</li> </ul> </li> <li> <p>Ship-To Data Retrieval and Update:</p> </li> <li>Purpose: Retrieves city and state from <code>SHIPTO</code> and updates <code>BB802W</code>.</li> <li> <p>Actions:</p> <ul> <li>Initial Check:</li> <li>Performs a <code>SETLL</code> on <code>SHIPTO</code> using <code>klord999</code> (<code>w1co</code>, <code>w1ord#</code>, <code>k$999</code>) to check if a record exists for ship-to code <code>999</code>, setting indicator <code>*in80</code>.</li> <li>Conditional Logic (via <code>SELECT</code>):</li> <li>Case 1: <code>w1ship</code> between <code>001</code> and <code>899</code>:<ul> <li>Chains to <code>SHIPTO</code> using <code>klcstshp</code> (<code>w1co</code>, <code>w1cust</code>, <code>w1ship</code>).</li> <li>If a record is found (<code>*in99 = *off</code>):</li> <li>Updates <code>BB802W</code> with:<ul> <li><code>w1dstc</code> \u2190 <code>csctst</code> (city/state description)</li> <li><code>w1dsts</code> \u2190 <code>csstat</code> (state)</li> </ul> </li> <li>Writes the updated record (<code>update bb802wpf</code>).</li> </ul> </li> <li>Case 2: <code>w1ship</code> \u2265 <code>900</code> and <code>klord999</code> record exists (<code>*in80 = *on</code>):<ul> <li>Chains to <code>SHIPTO</code> using <code>klord999</code> (<code>w1co</code>, <code>w1ord#</code>, <code>k$999</code>).</li> <li>If a record is found (<code>*in99 = *off</code>):</li> <li>Updates <code>BB802W</code> with <code>w1dstc</code> and <code>w1dsts</code> as above.</li> <li>Writes the updated record (<code>update bb802wpf</code>).</li> </ul> </li> <li>Case 3: <code>w1ship</code> between <code>900</code> and <code>998</code> and <code>klord999</code> record does not exist (<code>*in80 = *off</code>):<ul> <li>Chains to <code>SHIPTO</code> using <code>klcstshp</code> (<code>w1co</code>, <code>w1cust</code>, <code>w1ship</code>).</li> <li>If a record is found (<code>*in99 = *off</code>):</li> <li>Updates <code>BB802W</code> with <code>w1dstc</code> and <code>w1dsts</code> as above.</li> <li>Writes the updated record (<code>update bb802wpf</code>).</li> </ul> </li> <li>If no matching <code>SHIPTO</code> record is found (<code>*in99 = *on</code>), the <code>BB802W</code> record is not updated.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802W</code> records, closing files implicitly (as <code>BB802W</code> and <code>SHIPTO</code> are defined with <code>up</code> and <code>if</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Update:</li> <li>Updates <code>BB802W</code> records with city (<code>w1dstc</code>) and state (<code>w1dsts</code>) from <code>SHIPTO</code> based on the ship-to code (<code>w1ship</code>).</li> <li> <p>Only updates records if a matching <code>SHIPTO</code> record is found.</p> </li> <li> <p>Ship-To Code Logic:</p> </li> <li>Handles ship-to codes differently based on their range:<ul> <li>Codes <code>001</code>\u2013<code>899</code>: Uses <code>klcstshp</code> (<code>w1co</code>, <code>w1cust</code>, <code>w1ship</code>) to access <code>SHIPTO</code>.</li> <li>Codes <code>900</code>\u2013<code>998</code>: Prefers <code>klord999</code> (<code>w1co</code>, <code>w1ord#</code>, <code>999</code>) if a record exists (<code>*in80 = *on</code>), otherwise falls back to <code>klcstshp</code>.</li> <li>Special case for code <code>999</code>: Uses <code>klord999</code> to look up a specific ship-to record tied to the order.</li> </ul> </li> <li> <p>This logic accommodates different ship-to code conventions (e.g., customer-specific vs. order-specific ship-to records).</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>SETLL</code> and <code>CHAIN</code> to verify the existence of <code>SHIPTO</code> records before updating <code>BB802W</code>.</li> <li> <p>Does not modify <code>BB802W</code> if no matching <code>SHIPTO</code> record is found (<code>*in99 = *on</code>).</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GSHIPTO</code> or <code>ZSHIPTO</code>) via overrides in the CLP.</p> </li> <li> <p>No Revisions:</p> </li> <li>No revisions are listed, indicating the program has remained stable since its creation in 2011.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802W: Work file (update primary, <code>up</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1ship</code>, <code>w1dstc</code>, <code>w1dsts</code>, etc.</li> <li>SHIPTO: Ship-to master file (input file, <code>if</code>), contains ship-to details like <code>csctst</code> (city/state description) and <code>csstat</code> (state).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802G%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*in80</code> for <code>SETLL</code> results on <code>klord999</code>, <code>*in99</code> for <code>CHAIN</code> results, and no user interface indicators (as it\u2019s non-interactive).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields and <code>cs</code> prefix for <code>SHIPTO</code> fields.</li> <li>Key Lists:</li> <li><code>klord999</code>: Used for ship-to code <code>999</code>, tying ship-to data to the order (<code>w1co</code>, <code>w1ord#</code>).</li> <li><code>klcstshp</code>: Used for customer-specific ship-to codes (<code>w1co</code>, <code>w1cust</code>, <code>w1ship</code>).</li> <li>Context: Called by BB802C after populating <code>BB802W</code> with order and invoice data (via BB802A, BB802B, BB802E, BB802F, BB802H, BB802I, BB802P) to add geographic data for inquiry display.</li> <li>Efficiency: The program processes <code>BB802W</code> sequentially, using conditional logic to optimize <code>SHIPTO</code> lookups based on ship-to code ranges.</li> <li>Relation to Other Programs: Complements other BB802 series programs by enriching <code>BB802W</code> with location data, enhancing the inquiry interface\u2019s display capabilities.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that ship-to city and state data are added to the <code>BB802W</code> work file for use in the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/","title":"BB802H RPGLE","text":"<p>The BB802H RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with canceled order header data from the <code>BB802HQF</code> file, which is a logical file joining <code>BBCNH</code> (canceled order headers) and <code>BBCNOR</code> (canceled order reasons). It is called by the BB802C CLP program in <code>CNH</code> mode (canceled order header processing) and is noted as being cloned from BB802A with modifications for canceled orders. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/#process-steps-of-the-bb802h-rpg-program","title":"Process Steps of the BB802H RPG Program","text":"<p>The program reads records from the <code>BB802HQF</code> file, processes them based on a level break (L1), and adds or updates corresponding records in the <code>BB802W</code> work file. The steps focus on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number), and <code>k$invn</code> (invoice number, defined as like <code>boinvn</code> and initialized to zeros).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BB802HQF</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BB802HQF</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number), and <code>boinvn</code> (invoice number).</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds records to the <code>BB802W</code> work file based on <code>BB802HQF</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>k$invn</code>) to check if a matching record exists in <code>BB802W</code> using <code>SETLL</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *off</code>), chains to <code>BB802W</code> to verify existence (<code>*in99 = *on</code> if not found).</li> <li>If the record does not exist (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BB802HQF</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>boco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>bocust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>bordno</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>k$invn</code> (invoice number, set to zeros)</li> <li><code>w1ship</code> \u2190 <code>boship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>bopord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>boslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>bortg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>bocar</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>borqd8</code> (request date)</li> <li><code>w1frcd</code> \u2190 <code>bofrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>bosfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>bocafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>bocacd</code> (carrier code)</li> <li><code>w1cnrs</code> \u2190 <code>bccnrs</code> (cancel reason, specific to canceled orders)</li> <li><code>w1oori</code> \u2190 <code>'C'</code> (canceled order origin indicator)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>), no update is performed (implicitly skips to the next record).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802HQF</code> records, closing files implicitly (as <code>BB802HQF</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds records to <code>BB802W</code> from <code>BB802HQF</code> (joining <code>BBCNH</code> and <code>BBCNOR</code>) for canceled order headers, using a fixed invoice number of zeros (<code>k$invn = *zeros</code>) to align with the query structure set by BB802C.</li> <li> <p>Only adds new records if no matching record exists in <code>BB802W</code> (based on <code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>k$invn</code>).</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BB802HQF</code> records on a level break (<code>L1</code>) defined by <code>boco</code> (company), <code>bocust</code> (customer), <code>bordno</code> (order number), and <code>boinvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>BB802HQF</code> to <code>BB802W</code>, including key inquiry data (e.g., customer, order, ship-to, salesman, freight details) and the cancel reason (<code>bccnrs</code>) specific to canceled orders.</li> <li> <p>Sets <code>w1oori = 'C'</code> to indicate the record originates from a canceled order.</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GBBCNH</code>, <code>GBBCNOR</code> or <code>ZBBCNH</code>, <code>ZBBCNOR</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>SETLL</code> and <code>CHAIN</code> to ensure no duplicate records are written to <code>BB802W</code>.</li> <li> <p>Clears the record format before writing to prevent residual data.</p> </li> <li> <p>Cloned from BB802A:</p> </li> <li>The program is cloned from BB802A (which processes open order headers from <code>BBORDH</code>) but adapted for canceled order headers (<code>BBCNH</code>).</li> <li>Key differences include:<ul> <li>Uses <code>BB802HQF</code> instead of <code>BBORDH</code>.</li> <li>Adds <code>w1cnrs</code> (cancel reason) to <code>BB802W</code>.</li> <li>Sets <code>w1oori = 'C'</code> instead of <code>'O'</code>.</li> </ul> </li> <li> <p>No additional fields from revisions (unlike BB802A, which has jk01 additions).</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>No revisions are listed, indicating the program has remained stable since its creation in 2014.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802HQF: Logical file (input primary, <code>ip</code>), joins <code>BBCNH</code> (canceled order headers) and <code>BBCNOR</code> (canceled order reasons), containing fields like <code>boco</code>, <code>bocust</code>, <code>bordno</code>, <code>boinvn</code>, <code>bccnrs</code>, etc.</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1cnrs</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802H%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>SETLL</code> and <code>CHAIN</code> operations).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>boco</code>, <code>bocust</code>, <code>bordno</code>, and <code>k$invn</code>.</li> <li>Context: Called by BB802C in <code>CNH</code> mode (canceled order header processing), where <code>BB802HQF</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> <li>Relation to BB802A: As a clone of BB802A, it follows a similar structure but is tailored for canceled orders, with the addition of the cancel reason field (<code>w1cnrs</code>) and a different origin indicator (<code>w1oori = 'C'</code>).</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that canceled order header data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/","title":"BB802I RPGLE","text":"<p>The BB802I RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with canceled order detail data from the <code>BB802IQF</code> file, which is a logical file joining <code>BBCND</code> (canceled order details), <code>BBCNH</code> (canceled order headers), and <code>BBCNOR</code> (canceled order reasons). It is called by the BB802C CLP program in <code>CND</code> mode (canceled order detail processing) and is noted as being cloned from BB802B with modifications for canceled orders. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/#process-steps-of-the-bb802i-rpg-program","title":"Process Steps of the BB802I RPG Program","text":"<p>The program reads records from the <code>BB802IQF</code> file, processes them based on a level break (L1), and adds records to the <code>BB802W</code> work file. The steps focus on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>bdco</code> (company), <code>bocust</code> (customer), <code>bdordn</code> (order number), and <code>boinvn</code> (invoice number).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BB802IQF</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BB802IQF</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>bdco</code> (company), <code>bocust</code> (customer), <code>bdordn</code> (order number), and <code>boinvn</code> (invoice number).</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds records to the <code>BB802W</code> work file based on <code>BB802IQF</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>) to check if a matching record exists in <code>BB802W</code> using <code>SETLL</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *off</code>), chains to <code>BB802W</code> to verify existence (<code>*in99 = *on</code> if not found).</li> <li>If the record does not exist (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BB802IQF</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>bdco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>bocust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>bdordn</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>boinvn</code> (invoice number)</li> <li><code>w1ship</code> \u2190 <code>boship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>bopord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>boslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>bortg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>bocar</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>borqd8</code> (request date)</li> <li><code>w1frcd</code> \u2190 <code>bofrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>bosfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>bocafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>bocacd</code> (carrier code)</li> <li><code>w1cnrs</code> \u2190 <code>bccnrs</code> (cancel reason)</li> <li><code>w1loc</code> \u2190 <code>bdloc</code> (location)</li> <li><code>w1prod</code> \u2190 <code>bdprod</code> (product)</li> <li><code>w1cntr</code> \u2190 <code>bdcntr</code> (container)</li> <li><code>w1um</code> \u2190 <code>bdum</code> (unit of measure)</li> <li><code>w1qty</code> \u2190 <code>bdqty</code> (quantity)</li> <li><code>w1oori</code> \u2190 <code>'C'</code> (canceled order origin indicator)</li> <li>Additional fields (per jk01):</li> <li><code>w1tkby</code> \u2190 <code>botkby</code> (taken by)</li> <li><code>w1rush</code> \u2190 <code>borush</code> (rush order flag)</li> <li><code>w1gpby</code> \u2190 <code>bogpby</code> (group by)</li> <li><code>w1racd</code> \u2190 <code>boracd</code> (reason code)</li> <li><code>w1mulo</code> \u2190 <code>bomulo</code> (multi-order flag)</li> <li><code>w1mlcd</code> \u2190 <code>bomlcd</code> (multi-code)</li> <li><code>w1tolo</code> \u2190 <code>botolo</code> (total order)</li> <li><code>w1loda</code> \u2190 <code>boloda</code> (load date)</li> <li><code>w1lovo</code> \u2190 <code>bolovo</code> (load volume)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>), no update is performed (implicitly skips to the next record).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802IQF</code> records, closing files implicitly (as <code>BB802IQF</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds records to <code>BB802W</code> from <code>BB802IQF</code> (joining <code>BBCND</code>, <code>BBCNH</code>, and <code>BBCNOR</code>) for canceled order details, using the invoice number (<code>boinvn</code>) as a key component.</li> <li> <p>Only adds new records if no matching record exists in <code>BB802W</code> (based on <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>).</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BB802IQF</code> records on a level break (<code>L1</code>) defined by <code>bdco</code> (company), <code>bocust</code> (customer), <code>bdordn</code> (order number), and <code>boinvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>BB802IQF</code>, combining detail data (<code>BBCND</code>: e.g., <code>bdloc</code>, <code>bdprod</code>, <code>bdqty</code>) and header data (<code>BBCNH</code>: e.g., <code>bopord</code>, <code>boslmn</code>, <code>borqd8</code>) with cancel reason (<code>bccnrs</code> from <code>BBCNOR</code>).</li> <li>Includes additional fields added in revision jk01 (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, etc.) to support enhanced inquiry capabilities.</li> <li> <p>Sets <code>w1oori = 'C'</code> to indicate the record originates from a canceled order.</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GBBCND</code>, <code>GBBCNH</code>, <code>GBBCNOR</code> or <code>ZBBCND</code>, <code>ZBBCNH</code>, <code>ZBBCNOR</code>) via overrides in the CLP.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>SETLL</code> and <code>CHAIN</code> to ensure no duplicate records are written to <code>BB802W</code>.</li> <li> <p>Clears the record format before writing to prevent residual data.</p> </li> <li> <p>Cloned from BB802B:</p> </li> <li>The program is cloned from BB802B (which processes open order details from <code>BBORDD</code>/<code>BBORDH</code>) but adapted for canceled order details (<code>BBCND</code>/<code>BBCNH</code>).</li> <li> <p>Key differences include:</p> <ul> <li>Uses <code>BB802IQF</code> instead of <code>BB802BQF</code>.</li> <li>Adds <code>w1cnrs</code> (cancel reason) to <code>BB802W</code>.</li> <li>Sets <code>w1oori = 'C'</code> instead of <code>'O'</code>.</li> <li>Includes <code>w1qty</code> and <code>w1um</code> directly (not as a revision, unlike BB802B where they were added in jk01).</li> </ul> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>) to capture additional canceled order data (e.g., taken by, rush flag, load volume).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802IQF: Logical file (input primary, <code>ip</code>), joins <code>BBCND</code> (canceled order details), <code>BBCNH</code> (canceled order headers), and <code>BBCNOR</code> (canceled order reasons), containing fields like <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, <code>boinvn</code>, <code>bdloc</code>, <code>bdprod</code>, <code>bccnrs</code>, etc.</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1cnrs</code>, <code>w1qty</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802I%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>SETLL</code> and <code>CHAIN</code> operations).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>bdco</code>, <code>bocust</code>, <code>bdordn</code>, and <code>boinvn</code>.</li> <li>Context: Called by BB802C in <code>CND</code> mode (canceled order detail processing), where <code>BB802IQF</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> <li>Relation to BB802B: As a clone of BB802B, it follows a similar structure but is tailored for canceled order details, with the addition of the cancel reason field (<code>w1cnrs</code>) and a different origin indicator (<code>w1oori = 'C'</code>).</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that canceled order detail data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/","title":"BB802P RPGLE","text":"<p>The BB802P RPGLE program is a component of the Customer Orders and Invoicing system, designed to populate a work file (<code>BB802W</code>) with sales history move detail data from the <code>BB802PQF</code> file, which is a logical file joining <code>SA5MOVD</code> (sales history move details) and <code>SA5SHP</code> (sales history headers). It is called by the BB802C CLP program in <code>SAD</code> mode when the product move flag (<code>P$PMOV = 'Y'</code>) is set, as part of the Customer Order and Invoice Inquiry system. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/#process-steps-of-the-bb802p-rpg-program","title":"Process Steps of the BB802P RPG Program","text":"<p>The program reads records from the <code>BB802PQF</code> file, processes them based on a level break (L1), and updates or adds corresponding records to the <code>BB802W</code> work file. The steps focus on data transfer with no user interaction. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives the input parameter: <code>p$fgrp</code> (1 character, file group: 'G' or 'Z').</li> <li>Defines a key list (<code>klwrk</code>) for accessing the work file <code>BB802W</code>, using fields: <code>saco</code> (company), <code>sacust</code> (customer), <code>saord</code> (order number), and <code>sainvn</code> (invoice number).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Reads <code>BB802PQF</code> records and processes them based on a level break.</li> <li> <p>Actions:</p> <ul> <li>Reads <code>BB802PQF</code> records sequentially, with level break indicators (<code>L1</code>) set on fields <code>saco</code>, <code>sacust</code>, <code>saord</code>, and <code>sainvn</code>.</li> <li>When the level break indicator <code>*inl1</code> is on, executes the <code>updwrkf</code> subroutine to process the record.</li> </ul> </li> <li> <p>Update Work File (<code>updwrkf</code> Subroutine):</p> </li> <li>Purpose: Adds or updates records in the <code>BB802W</code> work file based on <code>BB802PQF</code> data.</li> <li> <p>Actions:</p> <ul> <li>Uses the <code>klwrk</code> key list (<code>saco</code>, <code>sacust</code>, <code>saord</code>, <code>sainvn</code>) to check if a matching record exists in <code>BB802W</code> using <code>CHAIN</code> (sets <code>*in99</code> if no match).</li> <li>If no matching record exists (<code>*in99 = *on</code>):</li> <li>Clears the <code>BB802W</code> record format (<code>bb802wpf</code>).</li> <li>Maps fields from <code>BB802PQF</code> to <code>BB802W</code>:<ul> <li><code>w1co</code> \u2190 <code>saco</code> (company)</li> <li><code>w1cust</code> \u2190 <code>sacust</code> (customer)</li> <li><code>w1ord#</code> \u2190 <code>saord</code> (order number)</li> <li><code>w1inv#</code> \u2190 <code>sainvn</code> (invoice number)</li> <li><code>w1ship</code> \u2190 <code>saship</code> (ship-to code)</li> <li><code>w1pord</code> \u2190 <code>shpord</code> (purchase order)</li> <li><code>w1slmn</code> \u2190 <code>shslmn</code> (salesman)</li> <li><code>w1crid</code> \u2190 <code>shrtg1</code> (carrier ID)</li> <li><code>w1carn</code> \u2190 <code>shcarn</code> (carrier name)</li> <li><code>w1sdat</code> \u2190 <code>shsmd8</code> (ship date)</li> <li><code>w1frcd</code> \u2190 <code>shfrcd</code> (freight code)</li> <li><code>w1sfrt</code> \u2190 <code>shsfrt</code> (ship freight)</li> <li><code>w1cafr</code> \u2190 <code>shcafr</code> (carrier freight)</li> <li><code>w1cacd</code> \u2190 <code>shcacd</code> (carrier code)</li> <li><code>w1trk#</code> \u2190 <code>shtrk#</code> (tracking number)</li> <li><code>w1loc</code> \u2190 <code>saloc</code> (location)</li> <li><code>w1prod</code> \u2190 <code>saprod</code> (product)</li> <li><code>w1cntr</code> \u2190 <code>sacntr</code> (container)</li> <li><code>w1qty</code> \u2190 <code>sactqt</code> (quantity, added by jk01)</li> <li><code>w1um</code> \u2190 <code>saum</code> (unit of measure, added by jk01)</li> <li><code>w1orpr</code> \u2190 <code>saorpr</code> (order process, added by jk01)</li> <li><code>w1oori</code> \u2190 <code>'I'</code> (invoice origin indicator)</li> <li>Additional fields (per jk02):</li> <li><code>w1tkby</code> \u2190 <code>shtkby</code> (taken by)</li> <li><code>w1rush</code> \u2190 <code>sarush</code> (rush order flag)</li> <li><code>w1gpby</code> \u2190 <code>shgpby</code> (group by)</li> <li><code>w1racd</code> \u2190 <code>shracd</code> (reason code)</li> <li><code>w1mulo</code> \u2190 <code>shmulo</code> (multi-order flag)</li> <li><code>w1mlcd</code> \u2190 <code>shmlcd</code> (multi-code)</li> <li><code>w1tolo</code> \u2190 <code>shtolo</code> (total order)</li> <li><code>w1loda</code> \u2190 <code>shloda</code> (load date)</li> <li><code>w1lovo</code> \u2190 <code>shlovo</code> (load volume)</li> <li><code>w1indt</code> \u2190 <code>shimdy</code> (invoice date)</li> <li><code>w1inva</code> \u2190 <code>shitot</code> (invoice amount)</li> <li><code>w1fccd</code> \u2190 <code>shfccd</code> (freight charge code)</li> </ul> </li> <li>Writes the new record to <code>BB802W</code> (<code>write bb802wpf</code>).</li> <li>If a matching record exists (<code>*in99 = *off</code>):</li> <li>Updates the existing record with <code>w1oori = 'B'</code> (indicating both order and invoice data).</li> <li>Updates the <code>BB802W</code> record (<code>update bb802wpf</code>).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Completes processing and exits.</li> <li>Actions:<ul> <li>Ends the program after processing all <code>BB802PQF</code> records, closing files implicitly (as <code>BB802PQF</code> and <code>BB802W</code> are defined with <code>ip</code> and <code>uf</code> respectively).</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Work File Population:</li> <li>The program adds or updates records in <code>BB802W</code> from <code>BB802PQF</code> (joining <code>SA5MOVD</code> and <code>SA5SHP</code>) for sales history move details, using the invoice number (<code>sainvn</code>) as a key component.</li> <li>If no matching record exists in <code>BB802W</code>, a new record is created with <code>w1oori = 'I'</code> (indicating invoice origin).</li> <li> <p>If a matching record exists, it is updated with <code>w1oori = 'B'</code> to indicate combined order and invoice data.</p> </li> <li> <p>Level Break Processing:</p> </li> <li>Processes <code>BB802PQF</code> records on a level break (<code>L1</code>) defined by <code>saco</code> (company), <code>sacust</code> (customer), <code>saord</code> (order number), and <code>sainvn</code> (invoice number).</li> <li> <p>Ensures records are processed only when the level break occurs, optimizing performance.</p> </li> <li> <p>Field Mapping:</p> </li> <li>Maps fields from <code>BB802PQF</code>, combining move detail data (<code>SA5MOVD</code>: e.g., <code>saloc</code>, <code>saprod</code>, <code>sactqt</code>) and header data (<code>SA5SHP</code>: e.g., <code>shpord</code>, <code>shslmn</code>, <code>shsmd8</code>).</li> <li> <p>Includes additional fields added in revisions jk01 (<code>w1qty</code>, <code>w1um</code>, <code>w1orpr</code>) and jk02 (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, etc.) to support enhanced inquiry capabilities (e.g., quantity, invoice date, freight charge code).</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>Relies on <code>p$fgrp</code> ('G' or 'Z') set by BB802C to access the correct library (<code>GSA5MOVD</code>, <code>GSA5SHP</code> or <code>ZSA5MOVD</code>, <code>ZSA5SHP</code>) via overrides in the CLP.</p> </li> <li> <p>Product Move Support:</p> </li> <li> <p>Specifically designed for product move scenarios (<code>P$PMOV = 'Y'</code> in BB802C), processing <code>SA5MOVD</code> instead of <code>SA5FILD</code> to handle move-specific sales history details.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Uses <code>CHAIN</code> to check for existing records in <code>BB802W</code>, ensuring no duplicates are created unnecessarily.</li> <li>Clears the record format before writing new records to prevent residual data.</li> <li> <p>Updates existing records to reflect combined data (<code>w1oori = 'B'</code>) when applicable.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Added <code>w1qty</code> (quantity), <code>w1um</code> (unit of measure), and <code>w1orpr</code> (order process) to <code>BB802W</code> to include sales move detail quantities and processing status.</li> <li>jk02: Added fields to <code>BB802W</code> (<code>w1tkby</code>, <code>w1rush</code>, <code>w1gpby</code>, <code>w1racd</code>, <code>w1mulo</code>, <code>w1mlcd</code>, <code>w1tolo</code>, <code>w1loda</code>, <code>w1lovo</code>, <code>w1indt</code>, <code>w1inva</code>, <code>w1fccd</code>) to capture additional sales history data (e.g., taken by, invoice date, invoice amount).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files:</p> <ol> <li>BB802PQF: Logical file (input primary, <code>ip</code>), joins <code>SA5MOVD</code> (sales history move details) and <code>SA5SHP</code> (sales history headers), containing fields like <code>saco</code>, <code>sacust</code>, <code>saord</code>, <code>sainvn</code>, <code>saloc</code>, <code>saprod</code>, etc.</li> <li>BB802W: Work file (update file, <code>uf</code>), stores processed inquiry data in <code>QTEMP</code> with fields like <code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>, <code>w1qty</code>, etc.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. It operates independently, relying on file I/O operations and the environment set up by BB802C (e.g., file overrides and open query).</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/BB802P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses <code>*inl1</code> for level break processing and <code>*in99</code> for file access control (<code>CHAIN</code> operation).</li> <li>Field Prefixes: Uses <code>w1</code> prefix for <code>BB802W</code> fields, aligning with the work file structure.</li> <li>Key List: The <code>klwrk</code> key list ensures unique identification of records in <code>BB802W</code> using <code>saco</code>, <code>sacust</code>, <code>saord</code>, and <code>sainvn</code>.</li> <li>Context: Called by BB802C in <code>SAD</code> mode with <code>P$PMOV = 'Y'</code> (sales history move detail processing), where <code>BB802PQF</code> is queried with a selection string (<code>QRYSLT</code>) to filter records.</li> <li>Efficiency: The program uses a simple, non-interactive approach, focusing on data transfer to the work file, with no user interface or message handling.</li> <li>Update Logic: Like BB802E and BB802F, it updates existing records with <code>w1oori = 'B'</code> to indicate combined data, reflecting integration with other inquiry data.</li> <li>Relation to BB802F: This program is nearly identical to BB802F, but processes <code>SA5MOVD</code> instead of <code>SA5FILD</code>, supporting product move scenarios introduced in BB802C revision JK01.</li> </ul> <p>This program is a critical backend component of the inquiry system, ensuring that sales history move detail data is efficiently transferred to the <code>BB802W</code> work file for further processing by the BB802 inquiry interface.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/","title":"SA801 RPGLE","text":"<p>The SA801 RPGLE program is a Customer Invoice Inquiry application within the Customer Invoicing and Sales system, designed to display detailed information about customer invoices, including header and detail data, using subfiles. It is called from the main program BB802 and supports inquiries for invoices tied to specific customers, orders, and sales/accounts file groups. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/#process-steps-of-the-sa801-rpg-program","title":"Process Steps of the SA801 RPG Program","text":"<p>The program follows a structured flow to retrieve and display invoice details based on input parameters, handle user interactions via function keys, and manage subfile displays. The main steps are executed in the <code>srfmt</code> subroutine, with supporting subroutines handling specific tasks. Here\u2019s a breakdown of the key process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Purpose: Sets up the program environment and initializes variables.</li> <li> <p>Actions:</p> <ul> <li>Receives input parameters: <code>p$co</code> (company), <code>p$cust</code> (customer), <code>p$inv</code> (invoice number), <code>p$ord</code> (order number), <code>p$sagr</code> (sales/accounts file group: e.g., 'BCM', 'COP', 'DBB', or blank), <code>p$pmov</code> (product move: 'Y' or 'N'), <code>p$fgrp</code> (file group: 'G' or 'Z'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to format fields (<code>c$co</code>, <code>c$cust</code>, <code>c$inv</code>, <code>c$ord</code>) and sets <code>w$mode = 'INQ'</code> for inquiry mode.</li> <li>Initializes subfile control fields (<code>rrn1</code>, <code>rrn2</code>, <code>rrnsv1</code>, <code>rrnsv2</code>) to zero and sets page sizes (<code>pagsz1 = 12</code>, <code>pagsz2 = 12</code>).</li> <li>Sets up date fields using the program status data structure (<code>psds##</code>) to derive current date (<code>ps#dat</code>) in century-year-month-day format.</li> <li>Configures message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>) for error messaging.</li> <li>Sets subfile modes to folded (<code>sfmod1 = '1'</code>, <code>sfmod2 = '1'</code>, <code>*in45 = *on</code>) for initial display.</li> <li>Defines key lists (<code>klist</code>) for database access (e.g., <code>kl5shz</code>, <code>klcust</code>, <code>klslsman</code>, <code>klarterm</code>, <code>klincotm</code>, <code>klc1s1</code>, <code>klc2s1</code>).</li> <li>Sets the header (<code>c$hdr1</code>) to 'Customer Invoice Inquiry'.</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Purpose: Opens required database files with appropriate overrides based on <code>p$fgrp</code> and <code>p$sagr</code>.</li> <li> <p>Actions:</p> <ul> <li>Applies file overrides using arrays <code>ovg1</code>, <code>ovz1</code> (general files: <code>arcust</code>, <code>gstabl</code>, <code>sa5shz</code>) and <code>ovg2</code>, <code>ovz2</code> (invoice-specific files: <code>sa5find</code>, <code>sa5fixm</code>, <code>sa5movdl</code>, <code>sa5movml</code>).</li> <li>Overrides <code>sa5find</code> and <code>sa5fixm</code> based on <code>p$sagr</code> (e.g., <code>gsa5bcxm</code> for 'BCM', <code>gsa5coxm</code> for 'COP', <code>gsa5dbxm</code> for 'DBB', or <code>gsa5find</code>/<code>gsa5fixm</code> for blank).</li> <li>Executes <code>QCMDEXC</code> to apply overrides dynamically.</li> <li>Opens files: <code>arcust</code>, <code>gstabl</code>, <code>sa5shz</code>, <code>sa5find</code>, <code>sa5fixm</code>, <code>sa5movdl</code>, <code>sa5movml</code>.</li> </ul> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Purpose: Fetches invoice header and customer data for the specified invoice.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>sa5shz</code> using <code>kl5shz</code> (<code>p$co</code>, <code>p$cust</code>, <code>p$inv</code>, <code>p$ord</code>) to retrieve invoice header details.</li> <li>Chains to <code>arcust</code> using <code>klcust</code> to retrieve customer details (<code>arcust</code>).</li> <li>Chains to <code>gstabl</code> for salesman (<code>klslsman</code>) and incoterms (<code>klincotm</code>) descriptions.</li> <li>If <code>p$pmov = 'Y'</code>, reads <code>sa5movml</code> to retrieve salesman (<code>saslmn</code>); otherwise, uses <code>sa5fixm</code>.</li> <li>Formats data for display (e.g., <code>f$smnm</code>, <code>f$inct</code>).</li> </ul> </li> <li> <p>Process Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Purpose: Manages the main loop for displaying and processing panel formats and subfiles.</li> <li> <p>Actions:</p> <ul> <li>Clears the screen (<code>clrscr</code>).</li> <li>Initializes format fields (<code>f01mov</code>) and sets <code>w$fmt = 'SFL1'</code> for subfile display (changed from <code>FMT01</code> due to jk03).</li> <li>Enters a loop (<code>fmtagn</code>) to:</li> <li>Display the message subfile if needed (<code>wrtmsg</code>).</li> <li>Select and display the appropriate format based on <code>w$fmt</code>:<ul> <li><code>FMT01</code>: Invoice header format (<code>exfmt fmt01</code>, added by jk03).</li> <li><code>SFL1</code>: Invoice detail subfile (<code>srsfl1</code>).</li> <li><code>SFL2</code>: Miscellaneous charges subfile (<code>srsfl2</code>).</li> <li>Default: Displays <code>FMT01</code>.</li> </ul> </li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>).</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Processes user input for <code>FMT01</code> (<code>f01sr</code>).</li> </ul> </li> <li> <p>Process Format FMT01 (<code>f01sr</code> Subroutine):</p> </li> <li>Purpose: Handles user input on the invoice header format.</li> <li> <p>Actions:</p> <ul> <li>Processes function keys:</li> <li>F03: Exits the program (<code>fmtagn = *off</code>).</li> <li>F10: Resets cursor position to home (<code>row</code>, <code>col</code> cleared).</li> <li>ENTER: Validates input (<code>f01edt</code>), and if no errors (<code>*in50 = *off</code>), proceeds to the next format (<code>f01nxt</code>).</li> <li>Calls <code>f01pro</code> to set display attributes (e.g., highlight order process status 'F' in red).</li> </ul> </li> <li> <p>Determine Next Format for FMT01 (<code>f01nxt</code> Subroutine):</p> </li> <li>Purpose: Sets the next format to display.</li> <li> <p>Actions:</p> <ul> <li>Sets <code>w$fmt = 'SFL1'</code> to transition to the invoice detail subfile.</li> </ul> </li> <li> <p>Process Subfile SFL1 (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the invoice detail subfile display and user interactions.</li> <li> <p>Actions:</p> <ul> <li>Initializes subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>).</li> <li>Clears and writes the message subfile (<code>clrmsg</code>, <code>wrtmsg</code>).</li> <li>Positions the subfile (<code>sf1rep</code>) and enters a loop (<code>sf1agn</code>):</li> <li>Handles repositioning if <code>repsfl = *on</code> by updating <code>c1seq</code> and calling <code>sf1rep</code>.</li> <li>Displays the command line and message subfile if needed.</li> <li>Sets display indicator (<code>*in41</code>) based on subfile records (<code>rrn1 &gt; 0</code>).</li> <li>Toggles folded/unfolded mode (<code>*in45</code>) based on <code>sfmod1</code>.</li> <li>Displays subfile control (<code>exfmt sflctl1</code>).</li> <li>Processes function keys:<ul> <li>F03: Exits subfile and program (<code>sf1agn</code>, <code>fmtagn = *off</code>).</li> <li>F06: Calls <code>historddInq</code> for history inquiry (not shown in truncated code but implied from similar programs).</li> <li>F12: Returns to <code>FMT01</code> (<code>w$fmt = 'FMT01'</code>).</li> <li>F15: Clears subfile and reloads (<code>sf1clr</code>, <code>sf1lod</code>).</li> <li>F20: Displays miscellaneous charges subfile (<code>w$fmt = 'SFL2'</code>).</li> <li>ENTER: Processes subfile selections (<code>sf1prc</code>, not shown in truncated code).</li> <li>PAGEDN: Loads additional subfile records (<code>sf1lod</code>, not shown in truncated code).</li> </ul> </li> <li>Updates cursor position and subfile record number.</li> </ul> </li> <li> <p>Process Subfile SFL2 (<code>srsfl2</code> Subroutine):</p> </li> <li>Purpose: Manages the miscellaneous charges subfile.</li> <li> <p>Actions:</p> <ul> <li>Similar to <code>srsfl1</code>, initializes subfile mode, clears/writes message subfile, and positions records (<code>sf2rep</code>).</li> <li>Processes function keys:</li> <li>F03: Exits subfile and program.</li> <li>F12: Returns to <code>SFL1</code> (<code>w$fmt = 'SFL1'</code>).</li> <li>F15: Clears and reloads subfile.</li> <li>ENTER: Processes selections (<code>sf2prc</code>, not shown in truncated code).</li> <li>PAGEDN: Loads additional records (<code>sf2lod</code>, not shown in truncated code).</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>addmsg: Sends error messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>wrtmsg: Displays the message subfile (<code>msgctl</code>).</li> <li> <p>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>.</p> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr = *on</code> and returns.</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Invoice Inquiry Scope:</li> <li>Displays invoice details for a specific company (<code>p$co</code>), customer (<code>p$cust</code>), invoice number (<code>p$inv</code>), and order number (<code>p$ord</code>).</li> <li> <p>Supports different sales/accounts file groups (<code>p$sagr</code>: 'BCM', 'COP', 'DBB', or blank) for file overrides.</p> </li> <li> <p>File Overrides:</p> </li> <li>Files are overridden based on <code>p$fgrp</code> ('G' or 'Z') to access different libraries (e.g., <code>garcust</code> vs. <code>zarcust</code>).</li> <li>Additional overrides for <code>sa5find</code> and <code>sa5fixm</code> based on <code>p$sagr</code> to access group-specific files (e.g., <code>gsa5bcxm</code> for 'BCM').</li> <li> <p>Overrides for <code>sa5movdl</code> and <code>sa5movml</code> are applied when product moves are involved (<code>p$pmov = 'Y'</code>).</p> </li> <li> <p>Product Move Handling (jk02):</p> </li> <li>If <code>p$pmov = 'Y'</code>, uses <code>sa5movml</code> (miscellaneous move lines) and <code>sa5movdl</code> (detail move lines) to retrieve data; otherwise, uses <code>sa5fixm</code>.</li> <li> <p>Ensures salesman data is retrieved from the appropriate file based on product move status.</p> </li> <li> <p>FOB Code Handling (jb02):</p> </li> <li>Supports FOB codes in <code>sa5shz</code> (e.g., 'T' for FOB Shipping Point/Tax Destination).</li> <li> <p>Displays FOB descriptions (e.g., 'F.O.B. DESTINATION', 'F.O.B. SHIPPING POINT', 'FOB SHP PNT/TAX DEST') from the <code>com</code> array.</p> </li> <li> <p>Display and Navigation:</p> </li> <li>Highlights invoices with order process status 'F' in red (<code>*in76</code>).</li> <li>Supports folded/unfolded subfile views (<code>*in45</code>) for <code>SFL1</code> (invoice details) and <code>SFL2</code> (miscellaneous charges).</li> <li>Allows navigation between formats (<code>FMT01</code>, <code>SFL1</code>, <code>SFL2</code>) and supports inquiries via function keys.</li> <li> <p>Ensures proper subfile pagination and cursor positioning.</p> </li> <li> <p>Error Handling:</p> </li> <li>Validates input in <code>f01edt</code> (currently empty, likely to be implemented).</li> <li>Displays error or status messages (e.g., 'DELIVERY YES', 'DELIVERY NO') using the <code>com</code> array.</li> <li> <p>Clears errors after processing to maintain a clean user interface.</p> </li> <li> <p>Revision-Specific Rules:</p> </li> <li>jk01: Renames field <code>saf005</code> to <code>s@f005</code> to resolve duplicate field issues.</li> <li>jb02: Adds FOB code 'T' (FOB Shipping Point/Tax Destination) and includes it in <code>com</code> array.</li> <li>jk02: Adds support for product moves with <code>sa5movdl</code> and <code>sa5movml</code> files.</li> <li>jk03: Expands display to include <code>FMT01</code> for header information, shifting initial display to <code>SFL1</code>.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program accesses the following database files, all defined with <code>usropn</code> for manual opening and overrides:</p> <ol> <li>arcust: Customer master file (customer details).</li> <li>gstabl: General table file (salesman, terms, incoterms).</li> <li>sa5shz: Sales history header file (invoice header details).</li> <li>sa5find: Sales history detail file (invoice line items).</li> <li>sa5fixm: Sales history miscellaneous charges file.</li> <li>sa5movdl: Sales history move detail file (product moves, added by jk02).</li> <li>sa5movml: Sales history move miscellaneous file (product moves, added by jk02).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs:</p> <ol> <li>QMHSNDPM: Sends error messages to the program message queue.</li> <li>Parameters: <code>m@id</code>, <code>m@msgf</code>, <code>m@data</code>, <code>m@l</code>, <code>m@type</code>, <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@key</code>, <code>m@errc</code>.</li> <li>QMHRMVPM: Removes messages from the program message queue.</li> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> <li>QCMDEXC: Executes override commands for file access.</li> <li>Parameters: (implied, not explicitly defined in code snippet).</li> <li>GB730P (implied, based on similar programs like BB801): Likely called for history inquiry via F06, though not shown in truncated code.</li> <li>Parameters: Likely uses a data structure similar to <code>x$ordrhist</code> (e.g., <code>o$file</code>, <code>o$fgrp</code>, <code>f$co</code>, <code>p$cust</code>, <code>p$ord</code>, <code>o$seq</code>).</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/SA801%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Uses indicators (19, 21\u201339, 40\u201343, 49, 50\u201369, 70\u201379, 80, 88, 90\u201399) for screen control, subfile operations, and error handling.</li> <li>Field Prefixes: Organizes fields with prefixes (e.g., <code>f$</code> for display, <code>c$</code> for subfile control, <code>s1</code>/<code>s2</code> for subfile fields).</li> <li>Revisions: Includes updates for field renaming (jk01), FOB code support (jb02), product moves (jk02), and display expansion (jk03).</li> <li>Subfile Management: Supports two subfiles (<code>SFL1</code> for invoice details, <code>SFL2</code> for miscellaneous charges) with pagination and folded/unfolded views.</li> <li>Error Messaging: Uses <code>com</code> array for messages like delivery status and FOB descriptions, with dynamic message handling.</li> </ul> <p>This program provides a comprehensive interface for querying customer invoice details, with robust navigation, data retrieval, and validation features, integrated with the broader system via calls from BB802.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/","title":"Summary BB802 RPGLE","text":""},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#list-of-use-cases-implemented-by-the-bb802-call-stack","title":"List of Use Cases Implemented by the BB802 Call Stack","text":"<p>The BB802 call stack, comprising programs BB802A, BB802B, BB802E, BB802F, BB802P, BB802H, BB802I, BB802G, and BB800E, implements a Customer Order and Invoice Inquiry system. The system retrieves and displays data for customer orders, invoices, canceled orders, and related details, with additional functionality to display accessorials and marks. Below is a list of distinct use cases derived from these programs, focusing on their data processing and inquiry capabilities:</p> <ol> <li>Retrieve Open Order Header Data:</li> <li>Description: Queries and aggregates open order header data from <code>BBORDH</code> into the <code>BB802W</code> work file for inquiry display.</li> <li>Program: BB802A</li> <li> <p>Purpose: Supports inquiries for open orders, providing header-level details like customer, order number, ship-to, and salesman.</p> </li> <li> <p>Retrieve Open Order Detail Data:</p> </li> <li>Description: Queries and aggregates open order detail data from <code>BBORDD</code> and <code>BBORDH</code> (via <code>BB802BQF</code>) into the <code>BB802W</code> work file.</li> <li>Program: BB802B</li> <li> <p>Purpose: Provides detailed order information, including products, quantities, and locations, for open order inquiries.</p> </li> <li> <p>Retrieve Sales History Header Data:</p> </li> <li>Description: Queries and aggregates sales history header data from <code>SA5SHP</code> into the <code>BB802W</code> work file.</li> <li>Program: BB802E</li> <li> <p>Purpose: Supports inquiries for invoiced orders, providing header-level details like invoice number, ship date, and tracking number.</p> </li> <li> <p>Retrieve Sales History Detail Data (Standard):</p> </li> <li>Description: Queries and aggregates sales history detail data from <code>SA5FILD</code> and <code>SA5SHP</code> (via <code>BB802FQF</code>) into the <code>BB802W</code> work file.</li> <li>Program: BB802F</li> <li> <p>Purpose: Provides detailed invoice information, including products and quantities, for standard sales history inquiries.</p> </li> <li> <p>Retrieve Sales History Move Detail Data:</p> </li> <li>Description: Queries and aggregates sales history move detail data from <code>SA5MOVD</code> and <code>SA5SHP</code> (via <code>BB802PQF</code>) into the <code>BB802W</code> work file when product move flag (<code>P$PMOV = 'Y'</code>) is set.</li> <li>Program: BB802P</li> <li> <p>Purpose: Supports inquiries for move-specific sales history, focusing on product movement details.</p> </li> <li> <p>Retrieve Canceled Order Header Data:</p> </li> <li>Description: Queries and aggregates canceled order header data from <code>BBCNH</code> and <code>BBCNOR</code> (via <code>BB802HQF</code>) into the <code>BB802W</code> work file.</li> <li>Program: BB802H</li> <li> <p>Purpose: Supports inquiries for canceled orders, including cancel reasons, at the header level.</p> </li> <li> <p>Retrieve Canceled Order Detail Data:</p> </li> <li>Description: Queries and aggregates canceled order detail data from <code>BBCND</code>, <code>BBCNH</code>, and <code>BBCNOR</code> (via <code>BB802IQF</code>) into the <code>BB802W</code> work file.</li> <li>Program: BB802I</li> <li> <p>Purpose: Provides detailed information for canceled orders, including products and quantities.</p> </li> <li> <p>Enrich Work File with Ship-To Location Data:</p> </li> <li>Description: Updates the <code>BB802W</code> work file with city and state data from the <code>SHIPTO</code> file based on ship-to codes.</li> <li>Program: BB802G</li> <li> <p>Purpose: Enhances inquiry data with geographic details for display.</p> </li> <li> <p>Display Customer Order or Ship-To Accessorials and Marks:</p> </li> <li>Description: Queries and displays accessorials and marks data for customer orders (from <code>BBORA1</code>, <code>BBORDH</code>) or ship-to records (from <code>BBSHSA1</code>, <code>SHIPTO</code>) using a subfile interface.</li> <li>Program: BB800E</li> <li>Purpose: Provides detailed inquiry for accessorials and marks, supporting both order-specific and ship-to-specific data.</li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#function-requirement-document","title":"Function Requirement Document","text":"<p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#customer-order-and-invoice-inquiry-function","title":"Customer Order and Invoice Inquiry Function","text":""},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#purpose","title":"Purpose","text":"<p>The Customer Order and Invoice Inquiry function retrieves and aggregates data for open orders, canceled orders, sales history (including move details), and accessorials/marks for customer or ship-to inquiries, consolidating data into a work file for processing and optionally displaying accessorials/marks details.</p>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>p$co</code>, 2 digits): Identifies the company.</li> <li>Customer or Order Number (<code>p$csor</code>, 6 digits): Specifies the customer or order to query.</li> <li>Ship-To Code (<code>p$ship</code>, 3 digits): Specifies the ship-to location (optional, '000' for order-level inquiries).</li> <li>File Group (<code>p$fgrp</code>, 1 character): 'G' or 'Z' to select the appropriate library.</li> <li>Product Move Flag (<code>p$pmov</code>, 1 character): 'Y' to include sales history move details, else 'N'.</li> </ul>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Consolidated Inquiry Data: Aggregated data in the <code>BB802W</code> work file, including order, invoice, and canceled order details with city/state.</li> <li>Accessorials/Marks Data: Detailed accessorials and marks for orders or ship-to records (if requested).</li> </ul>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>p$co</code>, <code>p$csor</code>, <code>p$ship</code>, and <code>p$fgrp</code> are provided and valid.</li> <li> <p>Exit with error if parameters are missing or invalid.</p> </li> <li> <p>Apply File Overrides:</p> </li> <li> <p>Use <code>p$fgrp</code> ('G' or 'Z') to override file libraries (e.g., <code>GBBORDH</code>/<code>ZBBORDH</code>, <code>GSA5SHP</code>/<code>ZSA5SHP</code>).</p> </li> <li> <p>Aggregate Open Order Header Data:</p> </li> <li>Read <code>BBORDH</code> records matching <code>p$co</code> and <code>p$csor</code>.</li> <li> <p>Write to <code>BB802W</code> with fields: company, customer, order number, ship-to, purchase order, salesman, carrier, freight details, and <code>w1oori = 'O'</code>.</p> </li> <li> <p>Aggregate Open Order Detail Data:</p> </li> <li>Read <code>BB802BQF</code> (joining <code>BBORDD</code> and <code>BBORDH</code>) for matching records.</li> <li> <p>Write to <code>BB802W</code> with additional fields: location, product, container, quantity, unit of measure, and <code>w1oori = 'O'</code>.</p> </li> <li> <p>Aggregate Sales History Header Data:</p> </li> <li>Read <code>SA5SHP</code> records matching <code>p$co</code> and <code>p$csor</code>.</li> <li> <p>Write to <code>BB802W</code> with fields: invoice number, ship date, tracking number, and <code>w1oori = 'I'</code>. Update to <code>w1oori = 'B'</code> if matching order exists.</p> </li> <li> <p>Aggregate Sales History Detail Data:</p> </li> <li>If <code>p$pmov = 'Y'</code>, read <code>BB802PQF</code> (joining <code>SA5MOVD</code> and <code>SA5SHP</code>); else, read <code>BB802FQF</code> (joining <code>SA5FILD</code> and <code>SA5SHP</code>).</li> <li> <p>Write to <code>BB802W</code> with additional fields: location, product, container, quantity, unit of measure, order process, and <code>w1oori = 'I'</code>. Update to <code>w1oori = 'B'</code> if matching order exists.</p> </li> <li> <p>Aggregate Canceled Order Header Data:</p> </li> <li>Read <code>BB802HQF</code> (joining <code>BBCNH</code> and <code>BBCNOR</code>) for matching records.</li> <li> <p>Write to <code>BB802W</code> with fields: cancel reason, and <code>w1oori = 'C'</code>.</p> </li> <li> <p>Aggregate Canceled Order Detail Data:</p> </li> <li>Read <code>BB802IQF</code> (joining <code>BBCND</code>, <code>BBCNH</code>, and <code>BBCNOR</code>) for matching records.</li> <li> <p>Write to <code>BB802W</code> with additional fields: location, product, container, quantity, unit of measure, cancel reason, and <code>w1oori = 'C'</code>.</p> </li> <li> <p>Enrich with Ship-To Location:</p> </li> <li>For each <code>BB802W</code> record, read <code>SHIPTO</code> using:<ul> <li><code>w1co</code>, <code>w1cust</code>, <code>w1ship</code> for <code>w1ship</code> between <code>001</code>\u2013<code>899</code> or <code>900</code>\u2013<code>998</code> (if no order-specific record).</li> <li><code>w1co</code>, <code>w1ord#</code>, <code>999</code> for <code>w1ship \u2265 900</code> if order-specific record exists.</li> </ul> </li> <li> <p>Update <code>BB802W</code> with <code>w1dstc</code> (city) and <code>w1dsts</code> (state).</p> </li> <li> <p>Retrieve Accessorials/Marks (Optional):</p> <ul> <li>If <code>p$ship = '000'</code>, read <code>BBORA1</code> and <code>BBORDH</code> for order accessorials/marks.</li> <li>If <code>p$ship \u2260 '000'</code>, read <code>BBSHSA1</code> and <code>SHIPTO</code> for ship-to accessorials/marks.</li> <li>Return data for display or further processing.</li> </ul> </li> </ol>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Data Scope: Queries open orders (<code>BBORDH</code>, <code>BBORDD</code>), sales history (<code>SA5SHP</code>, <code>SA5FILD</code>/<code>SA5MOVD</code>), canceled orders (<code>BBCNH</code>, <code>BBCND</code>, <code>BBCNOR</code>), and accessorials/marks (<code>BBORA1</code>, <code>BBSHSA1</code>) based on <code>p$co</code> and <code>p$csor</code>.</li> <li>Uniqueness: Ensures no duplicate <code>BB802W</code> records using keys (<code>w1co</code>, <code>w1cust</code>, <code>w1ord#</code>, <code>w1inv#</code>).</li> <li>Origin Indicator:</li> <li><code>w1oori = 'O'</code>: Open order.</li> <li><code>w1oori = 'I'</code>: Invoice (sales history).</li> <li><code>w1oori = 'C'</code>: Canceled order.</li> <li><code>w1oori = 'B'</code>: Combined order and invoice (updated in <code>BB802E</code>, <code>BB802F</code>, <code>BB802P</code>).</li> <li>Ship-To Logic:</li> <li>For <code>w1ship</code> between <code>001</code>\u2013<code>899</code>, use customer-specific ship-to (<code>w1co</code>, <code>w1cust</code>, <code>w1ship</code>).</li> <li>For <code>w1ship</code> between <code>900</code>\u2013<code>998</code>, prefer order-specific ship-to (<code>w1co</code>, <code>w1ord#</code>, <code>999</code>) if available, else customer-specific.</li> <li>Product Move: If <code>p$pmov = 'Y'</code>, process <code>SA5MOVD</code> instead of <code>SA5FILD</code> for sales history details.</li> <li>Accessorials/Marks:</li> <li>Order-level (<code>p$ship = '000'</code>): Retrieve from <code>BBORA1</code> and validate with <code>BBORDH</code>.</li> <li>Ship-to level (<code>p$ship \u2260 '000'</code>): Retrieve from <code>BBSHSA1</code> and validate with <code>SHIPTO</code>, <code>ARCUST</code>.</li> <li>File Overrides: Use <code>p$fgrp</code> ('G' or 'Z') to select library (e.g., <code>GBBORDH</code> vs. <code>ZBBORDH</code>).</li> <li>Data Integrity: Clear <code>BB802W</code> records before writing to prevent residual data.</li> </ul>"},{"location":"order-entry/BB802%20Complete%20Order%20-%20Invoice%20Inquiry/Summary%20BB802%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>No explicit calculations are performed; the function aggregates and maps data fields directly.</li> <li>Date fields (e.g., <code>w1sdat</code>, <code>w1indt</code>) are copied as-is (e.g., <code>borqd8</code>, <code>shimdy</code>).</li> <li>Quantities (<code>w1qty</code>) and totals (<code>w1tolo</code>, <code>w1inva</code>, <code>w1lovo</code>) are copied from source files without manipulation.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB1016%20RPG36/","title":"BB1016 RPG36","text":""},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB1016%20RPG36/#process-steps-of-the-rpg-program-bb1016","title":"Process Steps of the RPG Program (BB1016)","text":"<p>This RPG program (BB1016) is a subroutine module called from other programs (e.g., BB850 for price history inquiry or BB101 for order entry) to perform product lookups and populate arrays for a lookup screen (S5 in the calling program). It supports two main lookup modes: by customer-specific products ('P') or by product description ('D'). The program selects different files and subroutines based on the calling program (PROGRM parameter, e.g., 'BB101' vs. others like 'BB850'). It reads records, filters them, and fills arrays with up to 15 products (S5L for line number, S5P for product code, S5D for description, S5A for customer alternate description, S5F for fluid code). The program is read-only and does not update data.</p> <p>The high-level process steps are as follows:</p> <ol> <li>Parameter Reception and Initialization:</li> <li>Receives parameters: CO (company, 2 digits), CUST (customer, 6 digits), SHIP (ship-to, 3 digits), PROD (lookup mode, 4 chars like 'P' or 'D'), DESC (description search string, 27 chars), arrays (S5L, S5P, S5D, S5A, S5F), and PROGRM (calling program name, 5 chars).</li> <li>Determines file and subroutine branch based on PROGRM:<ul> <li>If PROGRM = 'BB101', uses ARCUP36 for customer products and subroutines BL3S5P/BL3S5D.</li> <li>Otherwise (e.g., 'BB850'), uses ARCUP16 for customer products and subroutines BL1S5P/BL1S5D.</li> </ul> </li> <li> <p>The logic for each branch is similar but uses different key structures and files (ARCUP36 has a 16-byte key, ARCUP16 has a 41-byte key, likely including alternate description in the key for ARCUP16).</p> </li> <li> <p>Customer-Specific Product Lookup (If PROD = 'P*'):</p> </li> <li>Builds a search key (CPKEY or CPKEY1) using company, customer, and ship-to.</li> <li>For ARCUP16 (non-'BB101'): Appends S5A,15 (last alternate description from previous page, for paging/continuation) to the key (making it 41 bytes).</li> <li>For ARCUP36 ('BB101'): Key is 16 bytes (company+customer+ship-to, padded).</li> <li>Positions the file pointer (SETLL on ARCUP16 or ARCUP36).</li> <li>Calls the appropriate subroutine (BL1S5P or BL3S5P):<ul> <li>Clears arrays.</li> <li>Reads forward (READ), skipping deleted records (CPDEL = 'D').</li> <li>Filters for exact match on company, customer, and ship-to.</li> <li>Skips duplicate products (using PRSAVE to track last product code).</li> <li>For each valid record: Populates S5L (line 1-15), S5P (CPPROD), S5A (CPCPDS - customer alternate description).</li> <li>Chains to GSPROD using company + product code (KLPROD) to fetch standard description (S5D = TPDESC) and fluid code (S5F = TPFLCD). If not found, indicator 60 is set (but not handled explicitly).</li> <li>Stops at 15 records or end-of-file (indicator 38).</li> </ul> </li> <li> <p>Returns the populated arrays to the caller.</p> </li> <li> <p>Product Description Lookup (If PROD = 'D*'):</p> </li> <li>Builds a 36-byte key (G6KEY) using company + description search string (from DESC or last S5D,15 for paging) + '    ' padding.</li> <li>Positions the file pointer (SETLL on GSPRD6).</li> <li>Calls the appropriate subroutine (BL1S5D or BL3S5D):<ul> <li>Clears arrays.</li> <li>Reads forward (READ on GSPRD6), skipping deleted records (TBDEL = 'D').</li> <li>Filters for exact company match and sellable products (TBSELL = 'Y').</li> <li>For each valid record: Populates S5L (line 1-15), S5P (TBPROD), S5D (TBDESC - standard description), S5A (blank), S5F (TBFLCD - fluid code).</li> <li>Stops at 15 records or end-of-file (indicator 38).</li> </ul> </li> <li> <p>Returns the populated arrays to the caller.</p> </li> <li> <p>Termination:</p> </li> <li>Sets LR (last record) indicator on and exits, returning control to the caller with populated arrays.</li> <li>If no matching PROD mode ('P' or 'D'), or end-of-file reached early, arrays may remain blank/zero.</li> </ol> <p>The program supports paging: When called again (e.g., for next/previous page in the caller), it uses the last array values (e.g., S5A,15 or S5D,15) to continue from where it left off via SETLL.</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB1016%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces business logic for product lookups, tailored for order entry or inquiry contexts:</p> <ul> <li>Lookup Modes:</li> <li>'P*': Searches customer-specific products (from ARCUP16/36), prioritizing customer alternate descriptions (CPCPDS) if available. Supplements with standard description and fluid code from GSPROD.</li> <li> <p>'D*': Searches all sellable products by partial description (from GSPRD6), using standard descriptions only (S5A blank).</p> </li> <li> <p>Filtering and Validation:</p> </li> <li>Excludes deleted records (CPDEL/TBDEL = 'D').</li> <li>For customer lookups: Must match exact company, customer, and ship-to. Skips duplicates (same product code as previous).</li> <li>For description lookups: Must match company and be sellable (TBSELL = 'Y').</li> <li> <p>Limits results to 15 per call (for screen display).</p> </li> <li> <p>Data Enrichment:</p> </li> <li>Always fetches fluid code (S5F = 'N' for non-fluid, etc.) from product files.</li> <li> <p>Uses customer alternate description (S5A) only in customer-specific mode; otherwise blank.</p> </li> <li> <p>Program-Specific Handling:</p> </li> <li>For 'BB101' (order entry): Uses ARCUP36 with shorter key (no alternate desc in key).</li> <li> <p>For other programs (e.g., inquiries like BB850): Uses ARCUP16 with longer key (includes alternate desc for better indexing/searching).</p> </li> <li> <p>Changes from Modifications:</p> </li> <li>VV04: Added fluid code (S5F) population.</li> <li>JK01: Replaced GSTAB4 with GSPRD4 (but in code, it's GSPRD6); added company to GSPRD6 key (TBCONO).</li> <li> <p>JK02: Replaced GSTABL6 with GSPROD for product chaining (TPDESC/TPFLCD).</p> </li> <li> <p>Error Handling:</p> </li> <li>No explicit errors; if chain fails (indicator 60), fields like S5D/S5F remain blank. End-of-file (38) stops processing early.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB1016%20RPG36/#tables-used","title":"Tables Used","text":"<p>In RPG, \"tables\" refer to database files used for input. The program defines the following files (all input-only 'IF'):</p> <ul> <li>ARCUP16: Customer product file (used when PROGRM \u2260 'BB101'; keyed externally, 41-byte key, for customer-specific lookups with alternate descriptions).</li> <li>ARCUP36: Alternate customer product file (used when PROGRM = 'BB101'; keyed externally, 16-byte key, for customer-specific lookups).</li> <li>GSPROD: Product master file (keyed, used for chaining to fetch standard description and fluid code in customer lookups; replaced GSTABL6 per JK02).</li> <li>GSPRD6: Product file for description searches (keyed externally, 36-byte key, used in 'D*' mode; added per JK01).</li> </ul> <p>GSTABL6 is commented out (old table replaced by GSPROD).</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB1016%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: This program does not call any external programs; it is a self-contained subroutine that performs reads and chains internally.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/","title":"BB850 OCL","text":""},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>This .OCL file (BB850.ocl36.txt) appears to be an Operations Control Language (OCL) procedure used on IBM midrange systems (e.g., AS/400 or iSeries) to set up and execute an RPG (Report Program Generator) program named BB850, which is described as a \"PRICE HISTORY INQUIRY\" tool. OCL is not the RPG program itself but a scripting language that prepares the runtime environment, loads the program, assigns files (which act as database tables or data sources), and initiates execution. The OCL procedure handles setup for both the main program (BB850) and a called subprogram (BB1016).</p> <p>The process steps, based on the OCL syntax and structure, are as follows:</p> <ol> <li>Procedure Initialization: </li> <li>The procedure begins with <code>// SCPROCP ,,,,,,,,?9?</code>, which likely invokes a system procedure or sets up processing parameters (the placeholders like <code>,,,,,,,?9?</code> may represent default or variable values for job control).</li> <li> <p>Followed by <code>// GSY2K</code>, which could load a library or module related to Y2K compliance (common in legacy systems for date handling).</p> </li> <li> <p>Program Loading:</p> </li> <li> <p><code>// LOAD BB850</code> loads the main RPG program BB850 into memory for execution.</p> </li> <li> <p>File Assignments for the Main Program (BB850):</p> </li> <li>A series of <code>// FILE</code> statements assign physical files (database files or tables) to logical names or labels, with <code>DISP-SHR</code> indicating shared access (allowing concurrent read access by other processes).</li> <li> <p>This step maps external data sources to the program, enabling BB850 to read from these files during its price history inquiry logic (e.g., querying historical pricing data).</p> </li> <li> <p>File Assignments for the Called Program (BB1016):</p> </li> <li>Marked by the comment <code>** FOR CALLED PGM: BB1016</code>, additional <code>// FILE</code> statements assign files specifically for the subprogram BB1016, which is invoked by BB850.</li> <li> <p>This ensures the called program has its own file mappings, potentially for modular operations like data updates or calculations related to the inquiry.</p> </li> <li> <p>Program Execution:</p> </li> <li><code>// RUN</code> initiates the execution of the loaded program BB850.</li> <li>During runtime, BB850 would perform its RPG logic (e.g., reading files, processing data, generating reports or inquiries), and call BB1016 as needed.</li> <li>The procedure ends after this, with the system handling any output or termination.</li> </ol> <p>Overall, this OCL acts as a job control script to orchestrate the RPG program's environment. The actual RPG code (in BB850 and BB1016) isn't provided here, so the \"process steps\" are inferred from the OCL setup. The focus is on data access for a price history inquiry, likely involving customer, product, or contract data based on file names.</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB1016: This is explicitly noted as a called program (subprogram) within the OCL, invoked by the main program BB850. No other external programs are referenced.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/#tables-used","title":"Tables Used","text":"<p>In this context, \"tables\" refer to the database files assigned via the <code>// FILE</code> statements. These are physical or logical files on the system, treated as tables for data storage and retrieval. The files are listed below, grouped by their association (main program or called program). Note that some files have asterisks (**) in the original, possibly indicating comments or special notations, but they are still valid assignments. File names like GSTABL and GSTABL6 may represent aliases or versions of the same underlying table.</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/#for-main-program-bb850","title":"For Main Program (BB850):","text":"<ul> <li>BBPRCE (likely a price history file)</li> <li>BICUAX (possibly a customer or index file)</li> <li>BICUAY (possibly another customer or auxiliary file)</li> <li>BICONT (possibly a contract file)</li> <li>INLOC (possibly an inventory location file)</li> <li>GSTABL (possibly a general system table)</li> <li>GSPROD (possibly a product file)</li> <li>GSCTUM (possibly a customer or unit master file)</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20OCL/#for-called-program-bb1016","title":"For Called Program (BB1016):","text":"<ul> <li>ARCUP16 (possibly an archive or update file for program version 16)</li> <li>ARCUP36 (possibly an archive or update file for program version 36)</li> <li>GSTABL6 (possibly a versioned general system table)</li> <li>GSPRD6 (possibly a versioned product file)</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20RPG36/","title":"BB850 RPG36","text":""},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20RPG36/#process-steps-of-the-rpg-program-bb850","title":"Process Steps of the RPG Program (BB850)","text":"<p>This RPG program (BB850) is an interactive inquiry tool for viewing historical rack pricing data for products, based on user-input keys like company, location, product code, container, and unit of measure. It runs on an IBM midrange system (e.g., AS/400), using a workstation file (SCREEN) for display and input, and chains to various database files for validation and data retrieval. The program handles multiple screens (S1 for input, S2 for history display, S5 for product lookup) and supports navigation (e.g., roll up/down for paging through history). It initializes arrays to hold up to 5 records per page and manages rolling through historical data.</p> <p>The high-level process steps are as follows:</p> <ol> <li>Program Initialization ($SBLK Subroutine):</li> <li>Called on first run to blank the screen and set default values (e.g., company=10, location='001', container='001', unit='GAL').</li> <li>Initializes arrays for dates (DTE), times (TME), prices (PRC1-4), quantities (QTL1-4, MNQT), and flags (RKRQ for no rack price required, INAC for inactive).</li> <li> <p>Sets cursor position to product field and prepares for Screen S1 display.</p> </li> <li> <p>Main Loop and Screen Handling:</p> </li> <li>Loops until exit (DOWNE 'EJ' for end job).</li> <li>Determines the current screen (@SFID) and calls the appropriate subroutine ($S1, $S2, $S5) based on the screen just read.</li> <li>Handles exceptions ($XCPT) by displaying the next screen (@SFNEX), incrementing a counter (@CCNT), and clearing indicators.</li> <li> <p>Reads the workstation file (SCREEN) for user input, with LR (last record) indicator for end-of-file handling.</p> </li> <li> <p>Input Screen Processing (S1 - $S1 Subroutine):</p> </li> <li>Handles ENTER ($S1ENT) or command keys ($S1CK).</li> <li>Validates input fields:<ul> <li>Chains to BICONT for company validation (must exist and have invoicing style '5').</li> <li>Chains to INLOC for location validation.</li> <li>If product code is blank, triggers product lookup (S5) via $S5FIL.</li> <li>Chains to GSPROD for product validation (replaces old GSTABL chain).</li> <li>For non-fluid products (TPFLCD='N'), ensures container is blank.</li> <li>Chains to GSCTUM for container/unit of measure validation against the product.</li> </ul> </li> <li>If validation fails, displays error messages (e.g., \"INVALID COMPANY\") and sets indicators (e.g., 90 for error, cursor positioning).</li> <li> <p>If valid, resets file pointer (SETLL on BBPRCE using a limit key RKLIM), clears fields ($CLRFLD), fills history arrays ($S2FIL), and switches to S2.</p> </li> <li> <p>History Display Screen Processing (S2 - $S2 Subroutine):</p> </li> <li>Handles ENTER/roll up ($S2ENT - fetches next 5 records), roll down ($S2RBW - fetches previous 5 records), or command keys ($S2CK).</li> <li>In $S2FIL: Reads previous records (READP on BBPRCE), skips deleted records (RKDEL='D'), populates arrays with date/time, prices, quantities, and flags. Stops at 5 records per page or end-of-file.</li> <li>Manages paging with hold arrays (HDT/HTM) for date/time tracking across pages.</li> <li> <p>If no more records, switches back to S1.</p> </li> <li> <p>Product Lookup Screen Processing (S5 - $S5 Subroutine):</p> </li> <li>Called if product code is blank in S1.</li> <li>In $S5FIL: Prepares parameters (company, customer=0, ship=0, product='D*  ', description from input) and calls external program BB1016 to populate lookup arrays (S5L for line, S5P for product, S5D for description, S5A for alt description, S5F flag).</li> <li>Handles ENTER ($S5ENT): If a line is selected (LINE# &gt;0), copies selected product to KYPROD and returns to S1; else, fetches next page via BB1016.</li> <li> <p>Handles command keys ($S5CK): KA returns to S1 with fields cleared.</p> </li> <li> <p>Command Key and Exit Handling:</p> </li> <li>KG (likely F3 or similar) sets 'EJ' to exit the main loop.</li> <li>KA returns to S1 with fields cleared.</li> <li> <p>Clears indicators and messages ($CLRIND) before each display.</p> </li> <li> <p>Output and Termination:</p> </li> <li>Outputs to SCREEN via EXCPT for each format (S1, S2, S5), including key fields, names/descriptions, array data, and messages.</li> <li>Program ends when main loop exits (e.g., via KG), with LR set on final read.</li> </ol> <p>The program is interactive and stateful, relying on user input for inquiries and navigation. It does not update data\u2014only reads and displays.</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces several business logic rules, primarily around data validation and display for price history inquiries:</p> <ul> <li>Key Composition and Validation:</li> <li>Inquiry key is composite: Company (2 digits), Location (3), Product (4), Container (3), Unit of Measure (3).</li> <li>Company must exist in BICONT and have invoicing style '5' (BCINST='5'); otherwise, invalid.</li> <li>Location must exist in INLOC for the company.</li> <li>Product must exist in GSPROD; description is displayed from TPDESC.</li> <li>Container/Unit must match product in GSCTUM (via CTUMKY chain).</li> <li> <p>For non-fluid products (TPFLCD='N' in GSPROD), container must be blank (enforced post-JK02 change).</p> </li> <li> <p>Product Lookup:</p> </li> <li>If product code is blank, invoke lookup (S5) using partial description (KYPRDS).</li> <li>Lookup supports up to 15 lines (S5L array), with product code, description, and customer alt description.</li> <li> <p>Selection via LINE# copies product code back to input.</p> </li> <li> <p>Price History Retrieval and Display:</p> </li> <li>History from BBPRCE, keyed by RKKEY (company+location+product+container+unit).</li> <li>Skips deleted records (RKDEL='D').</li> <li>Displays up to 5 records per page, with fields: Date (CYMD converted to MM/DD/YY), Time (HH:MM), Rack Prices (4 levels, decimal), Qty Levels (4 levels + min qty), Flags (RKRQ='N' for no rack price, INAC='I' for inactive).</li> <li>Paging: Roll up for next, roll down for previous; tracks position with hold arrays (HDT/HTM up to 200 pages).</li> <li> <p>End-of-file displays message \"END OF FILE HAS BEEN REACHED\".</p> </li> <li> <p>Error Handling:</p> </li> <li>Specific messages for invalid inputs (e.g., \"INVALID PRODUCT\", \"CONTAINER CODE MUST BE BLANK FOR NF\").</li> <li>Sets indicators (e.g., 90 for general error, 71-74 for field-specific cursor positioning).</li> <li> <p>No data modifications\u2014read-only inquiry.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li> <p>Uses UDS fields for century (Y2KCEN='19') and compliance (Y2KCMP='80'), likely for date handling.</p> </li> <li> <p>Changes from Modifications:</p> </li> <li>VV04: Enforces blank container for non-fluid.</li> <li>JB05: Adds display for 'NO RACK PRICE' (RKRQ) and inactive flags (INAC).</li> <li>JB06: Enlarges price fields.</li> <li>JK01: Adds S5F parameter to BB1016 call.</li> <li>JK02: Switches product validation from GSTABL to GSPROD.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20RPG36/#tables-used","title":"Tables Used","text":"<p>In RPG, \"tables\" refer to database files (physical or logical) used for input/output. The program defines the following files (all input-only 'IF' except SCREEN as workstation 'CD'):</p> <ul> <li>SCREEN: Workstation file for interactive display/input (formats: BB850S1, BB850S2, BB850S5).</li> <li>BBPRCE: Price history file (keyed, used for chaining and reading historical records).</li> <li>BICONT: Company file (keyed, for company name and invoicing style validation).</li> <li>INLOC: Location file (keyed, for location name validation).</li> <li>GSCTUM: Customer unit master file (keyed, for container/unit validation against product).</li> <li>GSPROD: Product file (keyed, for product description and fluid code; replaced GSTABL per JK02).</li> <li>GSTABL: Commented out (old product table, replaced by GSPROD).</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/BB850%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>BB1016: Called for product description lookup in $S5FIL. Parameters include company, customer, ship-to, product wildcard, description search, arrays for results, flag (S5F), and program name ('BB850'). It populates the S5 lookup arrays.</li> </ul>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/Summary%20BB850%20OCL/","title":"Summary BB850 OCL","text":""},{"location":"order-entry/BB850%20Price%20History%20Inquiry/Summary%20BB850%20OCL/#list-of-use-cases","title":"List of Use Cases","text":"<p>Based on the call stack (OCL procedure BB850.ocl36.txt loading and running RPG program BB850.rpg36.txt, which calls BB1016.rpg36.txt for product lookups), the implemented use cases are as follows. These are derived from the program's interactive inquiry logic, data validations, and lookup functionality. Note that BB1016 is reusable (e.g., also for order entry in BB101), but in this stack, it's specifically for supporting the price history inquiry.</p> <ol> <li> <p>Price History Inquiry: Retrieve and display historical rack pricing data for a specific product based on a composite key (company, location, product code, container, unit of measure). Includes validation of input keys, paging through history records (up to 5 per page), skipping deleted records, and displaying fields like dates, times, multi-level prices, quantities, and flags (e.g., no rack price required, inactive).</p> </li> <li> <p>Product Code Lookup by Description or Customer-Specific Criteria: When product code is not provided or needs selection, perform a lookup to populate a list of up to 15 products matching a partial description or customer/ship-to specifics. Returns product codes, descriptions (standard and alternate), and fluid codes for selection, filtering out deleted or non-sellable items.</p> </li> </ol>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/Summary%20BB850%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Assuming each use case is reimagined as a non-interactive, batch-style function that accepts all required inputs upfront (e.g., via parameters) and returns structured output (e.g., JSON or dataset) without screen interactions. The functions focus on business requirements for data retrieval and validation, with concise steps and rules. Calculations are minimal (e.g., date/time conversions, array population) and explained where relevant.</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/Summary%20BB850%20OCL/#function-1-price-history-inquiry","title":"Function 1: Price History Inquiry","text":"<p>Purpose: Retrieve paginated historical rack pricing data for a given product key, validating inputs and applying business filters, to support inquiries without user interaction.</p> <p>Inputs: - Company (2 digits, required). - Location (3 digits, required). - Product Code (4 chars, optional; if blank, triggers Product Code Lookup function). - Container (3 chars, optional; must be blank for non-fluid products). - Unit of Measure (3 chars, required). - Page Number (integer, default 1; for pagination). - Page Size (integer, default 5; max records per page). - Direction (string: 'forward' or 'backward'; for paging).</p> <p>Outputs: - List of history records (up to page size), each with: Date (MM/DD/YY), Time (HH:MM), Rack Prices (4 levels, decimal), Quantity Levels (4 levels + min qty, integers), Flags (No Rack Price: 'N' or blank; Inactive: 'I' or blank). - Total Pages (estimated). - Error Message (if validation fails or no data).</p> <p>Process Steps: 1. Validate Inputs:    - Chain to BICONT: Company must exist and have invoicing style '5'.    - Chain to INLOC: Location must exist for the company.    - If Product Code blank: Call Product Code Lookup function with description search; use first matching code if available.    - Chain to GSPROD: Product must exist; if fluid code 'N', container must be blank.    - Chain to GSCTUM: Container and unit must match product.    - If any fail, return error (e.g., \"Invalid Company\").</p> <ol> <li>Position File Pointer:</li> <li>Build composite key (company + location + product + container + unit + high date/time for forward; adjust for backward paging using hold date/time).</li> <li> <p>SETLL on BBPRCE file using key limit.</p> </li> <li> <p>Retrieve Records:</p> </li> <li>Read records (READP for backward, READ for forward), skipping deleted (RKDEL = 'D').</li> <li>For each valid record (up to page size): Convert date (RKDAT6 * 100.0001 to MM/DD/YY), copy time (RKTIME to HH:MM), prices (RKPRCE/RKPR02-04 to decimals), quantities (RKMINQ/RKQT01-04 to integers), flags (RKRKRQ/RKINAC).</li> <li> <p>Track hold date/time for next page positioning.</p> </li> <li> <p>Handle Pagination and End:</p> </li> <li>If no more records, indicate end-of-file.</li> <li>Calculate total pages based on record count estimate (not exact; derived from reads).</li> </ol> <p>Business Rules: - Read-only; no updates. - History keyed by company/location/product/container/unit; sorted descending by date/time. - Non-fluid products (TPFLCD = 'N') prohibit non-blank containers. - Display multi-level pricing (up to 4) for tiered quantity-based racks. - Flags: 'N' indicates no rack price required; 'I' indicates inactive status. - Y2K-compliant date handling (century prefix '19').</p>"},{"location":"order-entry/BB850%20Price%20History%20Inquiry/Summary%20BB850%20OCL/#function-2-product-code-lookup","title":"Function 2: Product Code Lookup","text":"<p>Purpose: Search for product codes matching description or customer criteria, returning a list for selection, to assist in key completion without interactive screens.</p> <p>Inputs: - Company (2 digits, required). - Customer (6 digits, optional; for customer-specific mode). - Ship-To (3 digits, optional; for customer-specific mode). - Lookup Mode ('P' for customer-specific products; 'D' for description search; required). - Description (30 chars, optional; partial match for 'D*'). - Last Product/Description (for paging continuation). - Page Size (integer, default 15).</p> <p>Outputs: - List of products (up to page size), each with: Line Number, Product Code, Standard Description, Customer Alternate Description, Fluid Code ('N' for non-fluid). - Next Page Indicator (true if more records). - Error Message (if no matches).</p> <p>Process Steps: 1. Determine File and Mode:    - If from order entry context (e.g., PROGRM='BB101'): Use ARCUP36/GSPRD6.    - Otherwise: Use ARCUP16/GSPROD.    - For 'P*': Build key with company/customer/ship-to (+ alternate desc for paging in ARCUP16).</p> <ol> <li>Position and Read:</li> <li>SETLL on appropriate file (ARCUP16/36 for 'P'; GSPRD6 for 'D').</li> <li>Read forward, skipping deleted (CPDEL/TBDEL = 'D').</li> <li> <p>Filter: For 'P', match company/customer/ship-to, skip duplicates. For 'D', match company, require sellable (TBSELL = 'Y').</p> </li> <li> <p>Populate Results:</p> </li> <li>For each (up to page size): Copy product code, alternate desc (from ARCUP; blank for 'D*'), standard desc and fluid code (chain to GSPROD if needed).</li> </ol> <p>Business Rules: - 'P' prioritizes customer-specific (alternate desc if available); supplements with standard details. - 'D' searches all sellable products by partial description. - Exclude non-sellable or deleted items. - Fluid code enforces business distinctions (e.g., non-fluid impacts container rules in inquiries). - Paging uses last result for continuation (e.g., last alternate desc in 'P*').</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20OCL/","title":"BI920 OCL","text":"<p>The provided OCL (Operation Control Language) script is a procedure used on IBM midrange systems (such as AS/400 or IBM i) to prepare and execute an RPG (Report Program Generator) program named BI920, which appears to handle maintenance for a product tax master file. OCL is not the RPG program itself but a control language that sets up the environment, loads the program, defines required files, and initiates execution. Below, I'll explain the process steps based on the script, followed by the requested lists .</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20OCL/#process-steps","title":"Process Steps","text":"<p>The OCL script follows a sequential setup and execution flow typical for running batch or interactive RPG programs on IBM systems. Here's a step-by-step breakdown:</p> <ol> <li> <p>Procedure Initialization: The script begins with <code>// SCPROCP ,,,,,,,,?9?</code>, which likely initializes a procedure or sets parameters for the job. <code>SCPROCP</code> may be a custom or system command for procedure control, and the commas with <code>?9?</code> act as placeholders or parameter substitutes (common in OCL for dynamic values like library names or job parameters).</p> </li> <li> <p>Library or Environment Setup: The <code>// GSY2K</code> command loads or references a library or module named GSY2K. This could be related to Y2K compliance utilities (given the name), a global system setup, or a specific library containing shared routines or data definitions needed for the program.</p> </li> <li> <p>Program Loading: The <code>// LOAD BI920</code> command loads the compiled RPG program BI920 into memory. This prepares the executable code for running but does not yet execute it. BI920 is the core program responsible for the \"PRODUCT TAX MASTER FILE MAINTENANCE\" functionality, likely involving CRUD (Create, Read, Update, Delete) operations on tax-related product data.</p> </li> <li> <p>File Definitions: A series of <code>// FILE</code> commands define the physical or logical files (akin to database tables or datasets) that the RPG program will access. Each file is specified with:</p> </li> <li><code>NAME</code>: The logical name used by the program.</li> <li><code>LABEL</code>: A reference to the actual file label or dataset name (e.g., <code>?9?BIPRTX</code> uses <code>?9?</code> as a parameter substitute for a prefix like a library or volume).</li> <li><code>DISP-SHR</code>: Sets the disposition to shared access, allowing concurrent read/write by other jobs without exclusive locks.</li> </ol> <p>The files defined are:    - BIPRTX (likely the primary product tax master file).    - GSTABL (possibly a general system table for lookups or configurations).    - GSPROD (likely a product master file).    - BICONT (possibly a control file for batch or system constants).    - BISLTX (likely a sales tax or related tax configuration file).</p> <p>These definitions ensure the program can open and interact with the necessary data sources during execution.</p> <ol> <li> <p>Program Execution: The <code>// RUN</code> command initiates the execution of the loaded BI920 program. At this point, the RPG logic takes over, using the defined files to perform maintenance tasks (e.g., updating tax rates, adding/removing products, or validating data). The program would terminate upon completion, potentially producing output like reports or updated files.</p> </li> <li> <p>Job Termination: The script ends implicitly after <code>// RUN</code>, with the job concluding once BI920 finishes. Any errors (e.g., file not found) would be handled by the system's job control.</p> </li> </ol> <p>This OCL acts as a wrapper to automate the setup for BI920, ensuring consistent execution in a batch or scheduled environment. The actual business logic (e.g., calculations, validations) resides in the RPG source code of BI920, which is not provided here.</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>Based on the OCL script, no external programs are explicitly called. The script only loads and runs BI920 itself. Any subroutines or external calls would be defined within the RPG code of BI920 (e.g., via CALL opcodes), but those details are not available in this document.</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20OCL/#tables-used","title":"Tables Used","text":"<p>The script references the following files, which function as tables or datasets in the IBM environment: - BIPRTX (product tax master file). - GSTABL (general system table). - GSPROD (product master file). - BICONT (control file). - BISLTX (sales tax file).</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20RPG36/","title":"BI920 RPG36","text":""},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20RPG36/#process-steps","title":"Process Steps","text":"<p>The BI920 RPG program is an interactive screen-based maintenance utility for the Product Tax Master file (BIPRTX). It allows users to add, update, or delete tax configurations for products by company and state, with validation against related files. The program uses two main screens: BI920S01 for initial criteria input and BI920S02 for multi-record editing (up to 7 lines per screen, expanded from 5 to 10 tax codes per record). It operates in a loop until exit conditions are met (e.g., F3 or end of data). Below is a step-by-step breakdown of the program's flow :</p> <ol> <li>Initialization (Main Routine):</li> <li>Clear error messages (MSG1, MSG2) and set off indicators (81, 82, 90, 98).</li> <li>Handle function key KA: Set off indicators 01/02 and set on 81 (likely to enable/disable screen fields or modes).</li> <li>Handle function key KG: Execute RCDCHK subroutine (cleanup orphaned records), set on LR (last record, to exit program), and set off indicators 01/02.</li> <li>If indicator 09 is on (likely from prior validation), set on 81 (error mode).</li> <li> <p>Branch to screen handling: Execute S1 subroutine for screen 1 (criteria input) or S2 for screen 2 (data editing), based on indicators 01 or 02.</p> </li> <li> <p>Screen 1 Processing (S1 Subroutine - BI920S01):</p> </li> <li>Retrieve company name from BICONT using company code (CO) as key.<ul> <li>If not found (indicator 99 on), display error message \"INVALID COMPANY NUMBER ENTERED\" and set on indicators 81/90; exit subroutine.</li> </ul> </li> <li>Validate delivered code (DELV): Must be blank or 'Y'; otherwise, display \"DELIVERED MUST BE 'Y' OR BLANK\" and set on 81/90; exit.</li> <li>Clear arrays for product codes (PCD), descriptions (PDS), tax code arrays (CD1-CD0), and delete flags (DEL).</li> <li>Prepare key for reading products: Use 'PRODCD' type (commented out for GSTABL, now uses GSPROD). If start product (SPRD) is blank, use '  01'; else use SPRD.</li> <li>Position file pointer (SETLL) on GSPROD using prepared key (KLPROD).</li> <li>Set 'FIRST' flag to 'Y' for handling special 'MISC' product on first page.</li> <li>Execute FILARA subroutine to populate arrays for display on screen 2.</li> <li> <p>End subroutine, returning to main loop for screen display/output.</p> </li> <li> <p>Screen 2 Processing (S2 Subroutine - BI920S02):</p> </li> <li>Loop through up to 7 array entries (Y from 1 to 7):<ul> <li>If product code (PCD,Y) is blank, skip to next (bypass).</li> <li>Execute EDTXCD subroutine to validate tax codes for the entry.</li> <li>If error (90 on), exit loop early.</li> <li>Build key (PRTXKY) using company (CO), state (STAT), product (XXPROD from PCD,Y), and delivered (DELV).</li> <li>Check delete flag (DEL,Y = 'D'): Set indicator 94 on if deleting.</li> <li>Chain to BIPRTX using PRTXKY:</li> <li>If not found (99 on), not delete (N94), and not all blanks (N95): Add new record (EXCPT ADDPTX).</li> <li>If found (N99), not delete (N94), not all blanks (N95): Update record (EXCPT UPDPTX).</li> <li>If found (N99), not delete (N94), all blanks (95): No action (implicit delete by not writing).</li> <li>If found (N99) and delete (94): Delete record (EXCPT DELPTX).</li> </ul> </li> <li>Clear all S2 arrays (PCD, PDS, CD1-CD0, DEL) for next batch.</li> <li>Check if more records: If X (counter from FILARA) = 8 (end of page batch), read previous record from GSPROD and refill arrays via FILARA; else set on 81 (end of data).</li> <li> <p>End subroutine, returning to main loop.</p> </li> <li> <p>Tax Code Editing/Validation (EDTXCD Subroutine):</p> </li> <li>Check if all tax codes (CD1,Y to CD0,Y) are blank: Set 95 on if yes; skip further validation and exit (record will be ignored/deleted).</li> <li>If company invoice style (BCINST from BICONT) is '2' (no sales tax allowed):<ul> <li>Collect any 'T' tax codes into CODES error field.</li> <li>If CODES not blank, display \"SALES TAX NOT ALLOWED IF INVOICE STYLE 2\" with offending codes; set on 82/90; exit.</li> </ul> </li> <li>Validate each tax code (CD1,Y to CD0,Y) exists in BISLTX (CHAIN using STTXCD):<ul> <li>If not found (98 on), add to CODES error field.</li> <li>If CODES not blank, display \"TAX CODES NOT IN 'SALES TAX MASTER FILE'\" with offending codes; set on 82/90; exit.</li> </ul> </li> <li>For 'MISC' product (PCD,Y = 'MISC'):<ul> <li>Collect any non-'T' starting tax codes into CODES.</li> <li>If CODES not blank, display \"TAX CODE MUST BEGIN WITH 'T'\" with offending codes; set on 82/90; exit.</li> </ul> </li> <li> <p>End subroutine.</p> </li> <li> <p>Array Filling for Display (FILARA Subroutine):</p> </li> <li>Initialize counter X to 0.</li> <li>Loop until X=8 (max 7 display lines + check for more):<ul> <li>If first page ('FIRST'='Y'): Add 'MISC' as first entry with description \"MISCELLANEOUS INVOICE LINES\"; chain to BIPRTX for existing tax codes; set 'FIRST' to 'N'; bypass to next.</li> <li>Read next record from GSPROD (formerly GSTABL).</li> <li>Skip if end of file (70 on) or company mismatch (TPCONO != CO).</li> <li>Skip if not sellable product (TPSELL != 'Y').</li> <li>If X=8, exit loop (page full).</li> <li>Increment X; populate PCD,X with product code (TPPROD), PDS,X with description (TPDESC), XXPROD with TPPROD.</li> <li>Chain to BIPRTX: If found, populate tax code arrays (CD1,X to CD0,X) from record.</li> </ul> </li> <li>If X &gt; 0 after loop, set on 82 (data available for display).</li> <li> <p>End subroutine.</p> </li> <li> <p>Record Cleanup (RCDCHK Subroutine - Called on F3/Exit):</p> </li> <li>Position BIPRTX to beginning (SETLL with blank key).</li> <li>Loop reading BIPRTX records:<ul> <li>Skip if end (71 on).</li> <li>For non-'MISC' products: Build key from PTCONO + PTPROD; chain to GSPROD.</li> <li>If not found in GSPROD (99 on), delete the BIPRTX record (EXCPT DELPTX).</li> </ul> </li> <li> <p>End subroutine and program.</p> </li> <li> <p>Output Handling:</p> </li> <li>Screen outputs use EXFMT (implied by workstation file) with indicators controlling formats (81 for S01, 82 for S02).</li> <li>File updates use EXCPT to add/update/delete BIPRTX records.</li> <li>Program ends on LR (last record indicator).</li> </ol>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Company Validation: Must exist in BICONT; retrieves name (BCNAME) and invoice style (BCINST).</li> <li>Delivered Code: Must be blank (not delivered) or 'Y' (delivered); used in BIPRTX key.</li> <li>Product Selection: Only sellable products (TPSELL='Y' in GSPROD) are displayed/processed. Starts from specified product (SPRD) or '  01'. 'MISC' is a special non-product entry for miscellaneous invoice lines, always shown first.</li> <li>Tax Codes (Up to 10 per Product): Stored in PTTXC1 to PTTXC0 in BIPRTX. Must exist in BISLTX (sales tax master). Blanks are allowed but if all blank, record is not added/updated (implicit delete).</li> <li>Invoice Style Restriction: If BCINST='2', no tax codes starting with 'T' (sales tax) allowed.</li> <li>'MISC' Product Restriction: Tax codes must start with 'T'.</li> <li>Paging: Handles up to 7 products per screen; pages forward if more available.</li> <li>Delete Handling: 'D' in DEL array flags record for deletion. Cleanup on exit removes BIPRTX entries without matching GSPROD products.</li> <li>Error Handling: Displays specific messages for invalid inputs; sets error indicators (81,82,90) to highlight fields and prevent processing.</li> <li>Key Structure: BIPRTX keyed on company (PTCONO), state (PTSTAT), product (PTPROD), delivered (PTDELV).</li> </ul>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files as tables/datasets: - BIPRTX: Product Tax Master (update file; key: company + state + product + delivered; used for add/update/delete). - GSPROD: Product Master (input file; key: company + product; replaces GSTABL; provides product codes, descriptions, sellable flag). - BICONT: Billing Control (input file; key: implied by company; provides company name, invoice style). - BISLTX: Sales Tax Master (input file; key: tax code; validates tax codes). - SCREEN: Workstation file (display file for interactive screens BI920S01 and BI920S02). - MSG: Internal array of 6 error messages (e.g., \"INVALID COMPANY NUMBER ENTERED\").</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/BI920%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>None. The program does not use CALL opcodes or reference any external programs/subroutines beyond its own internal subroutines (S1, S2, EDTXCD, FILARA, RCDCHK). All operations are self-contained, with file I/O handled via CHAIN, READ, SETLL, and EXCPT.</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/","title":"Summary BI920 OCL","text":""},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>Based on the OCL script and RPG program BI920, which together form a call stack for maintaining the Product Tax Master file, the following use cases are implemented. These are derived from the program's interactive maintenance functionality, validations, and auxiliary processes:</p> <ol> <li> <p>Inquiry and Selection of Product Tax Records: Allows users to specify criteria (company, state, starting product code, delivered status) to retrieve and display batches of product tax records for viewing and editing, including paging through results and handling the special 'MISC' product.</p> </li> <li> <p>Addition of New Product Tax Records: Enables adding new entries to the Product Tax Master file for valid products, with up to 10 tax codes per record, ensuring all validations pass before committing.</p> </li> <li> <p>Update of Existing Product Tax Records: Permits modification of tax codes in existing Product Tax Master records, with re-validation and commit only if changes are non-blank and valid.</p> </li> <li> <p>Deletion of Product Tax Records: Supports marking records for deletion (via 'D' flag) or implicit deletion (by blanking all tax codes), physically removing them from the file.</p> </li> <li> <p>Validation of Tax Configurations: Enforces business rules during editing, such as checking tax codes against the Sales Tax Master, restricting sales tax based on company invoice style, and ensuring 'MISC' products use only 'T'-prefixed tax codes .</p> </li> <li> <p>Cleanup of Orphaned Product Tax Records: On program exit (via F3 key), automatically scans and deletes Product Tax Master records without matching sellable products in the Product Master file.</p> </li> </ol> <p>These use cases are interconnected within the single interactive program flow but can be considered distinct based on user actions and program subroutines.</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/#function-requirement-document-maintain-product-tax-configurations","title":"Function Requirement Document: Maintain Product Tax Configurations","text":"<p>This document assumes the primary use case (encompassing inquiry, add, update, delete, and validation) is implemented as a non-interactive function <code>MaintainProductTax</code>. The function receives all inputs upfront (e.g., via parameters or a data structure) and processes them in batch, returning success/failure with logs or updated records. It focuses on business requirements for tax maintenance in a billing system, with concise steps and rules. No UI interaction; all operations are file-based.</p>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/#function-overview","title":"Function Overview","text":"<ul> <li>Purpose: Automate maintenance of product tax configurations by company and state, ensuring accurate tax application in billing/invoicing. Handles add/update/delete for tax codes linked to products, with validation against master data.</li> <li>Inputs:</li> <li>Company Code (CO: 2-char, required; must exist in BICONT).</li> <li>State Code (STAT: 2-char, required).</li> <li>Delivered Flag (DELV: 1-char; 'Y' or blank).</li> <li>Starting Product Code (SPRD: 4-char; optional, defaults to '  01').</li> <li>List of Product Tax Changes: Array of structures, each with:<ul> <li>Product Code (PTPROD: 4-char; 'MISC' or from GSPROD).</li> <li>Tax Codes (up to 10: 4-char each; blank if unchanged).</li> <li>Delete Flag ('D' or blank).</li> </ul> </li> <li>Outputs:</li> <li>Success Flag (boolean).</li> <li>Error Log (array of messages with details, e.g., invalid tax codes).</li> <li>Updated Records (optional: list of affected BIPRTX entries).</li> <li>Dependencies: Read access to GSPROD, BICONT, BISLTX; Update access to BIPRTX.</li> </ul>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Input Criteria:</li> <li>Retrieve company details from BICONT using CO as key.</li> <li>If company not found, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Validate DELV: Must be 'Y' or blank; else error: \"DELIVERED MUST BE 'Y' OR BLANK\".</li> <li> <p>Retrieve invoice style (BCINST) from BICONT for later rules.</p> </li> <li> <p>Retrieve and Prepare Product List:</p> </li> <li>Position on GSPROD using key (CO + SPRD or '  01').</li> <li>Include 'MISC' as first pseudo-product if starting from beginning.</li> <li>Fetch sellable products (TPSELL = 'Y') sequentially, up to batch size (e.g., all matching inputs).</li> <li> <p>For each product in input changes list, match against fetched products or 'MISC'; ignore non-matches.</p> </li> <li> <p>Validate Tax Changes:</p> </li> <li> <p>For each product change:</p> <ul> <li>If all tax codes blank and not delete, skip (no action).</li> <li>If BCINST = '2', prohibit any 'T'-prefixed tax codes; error: \"SALES TAX NOT ALLOWED IF INVOICE STYLE 2\" with offending codes.</li> <li>Validate each tax code exists in BISLTX (key: STTXCD); error: \"TAX CODES NOT IN 'SALES TAX MASTER FILE'\" with invalid codes.</li> <li>If product = 'MISC', ensure non-blank tax codes start with 'T'; error: \"TAX CODE MUST BEGIN WITH 'T'\" with offending codes.</li> </ul> </li> <li> <p>Apply Changes to BIPRTX:</p> </li> <li>Build key (PRTXKY: CO + STAT + PTPROD + DELV).</li> <li>For each valid change:<ul> <li>If record exists:</li> <li>If delete flag = 'D' or all tax codes blank: Delete record.</li> <li>Else: Update with new tax codes (PTTXC1 to PTTXC0).</li> <li>If record not exists and tax codes non-blank: Add new record with 'A' audit flag.</li> </ul> </li> <li> <p>Commit all changes atomically if no errors.</p> </li> <li> <p>Cleanup Orphaned Records:</p> </li> <li>Scan all BIPRTX records for the company/state.</li> <li>For non-'MISC' products, verify existence in GSPROD (sellable).</li> <li> <p>Delete any unmatched records.</p> </li> <li> <p>Return Results:</p> </li> <li>If errors, rollback changes and return error log.</li> <li>Else, return success with any updated records.</li> </ol>"},{"location":"order-entry/BB920%20Prod%20Tax%20File%20Add-Update/Summary%20BI920%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Tax Applicability: Tax codes determine billing taxes per product/state; up to 10 per record for multi-tax scenarios (e.g., federal, state, local).</li> <li>'MISC' Handling: Special entry for miscellaneous invoice lines; always processed first; restricts to transaction ('T') taxes only.</li> <li>Sellable Products Only: Products must have TPSELL = 'Y' in GSPROD; non-sellable skipped during retrieval.</li> <li>Blank Tax Codes: All blanks imply no tax; do not add/update record (effective delete if existing).</li> <li>Invoice Style Restriction: BCINST = '2' blocks sales taxes to comply with company billing policies.</li> <li>Key Uniqueness: Records unique by company + state + product + delivered; no duplicates allowed.</li> <li>Audit/Deletion: Added records flagged 'A'; deleted flagged 'D' (but physically removed).</li> <li>No Calculations: No arithmetic involved; purely validation and data maintenance.</li> <li>Error Prioritization: Halt on first validation failure per record; collect all errors for logging.</li> </ul> <p>This function encapsulates the program's logic as a batch process, suitable for API or automated integration.</p>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20OCL/","title":"BB927 OCL","text":""},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>This .OCL file (BB927.ocl36.txt) appears to be an Operations Control Language (OCL) procedure for an IBM System/36 environment, which orchestrates the execution of a sort utility followed by an RPG (Report Program Generator) program to process and print a product code cross-reference file. The procedure handles file sorting and then invokes the main RPG program for reporting or printing. Below is a step-by-step breakdown of the process:</p> <ol> <li>Procedure Invocation and Environment Setup:</li> <li>The procedure begins with <code>// SCPROCP ,,,,,,,,?9?</code>, which invokes a stored procedure named SCPROCP. The commas represent parameter placeholders, and <code>?9?</code> is likely a variable or parameter value (possibly a library or file prefix).</li> <li> <p><code>// GSY2K</code> sets up or switches to a specific library or environment (GSY2K), which may contain necessary programs or files for the job.</p> </li> <li> <p>Load Sort Utility:</p> </li> <li> <p><code>// LOAD #GSORT</code> loads the sort program <code>#GSORT</code> into memory. This is a utility program used for sorting records in the input file.</p> </li> <li> <p>Define Input and Output Files for Sorting:</p> </li> <li><code>// FILE NAME-INPUT,LABEL-?9?BBPRXR,DISP-SHR</code>: Defines the input file named INPUT, which points to the physical file <code>?9?BBPRXR</code> (shared disposition, allowing concurrent access).</li> <li> <p><code>// FILE NAME-OUTPUT,LABEL-?9?BB927S,RECORDS-999000,EXTEND-999000,RETAIN-J</code>: Defines the output file named OUTPUT, which points to <code>?9?BB927S</code>. It allocates space for up to 999,000 records, allows extension by another 999,000 records if needed, and retains the file after job completion (RETAIN-J).</p> </li> <li> <p>Execute the Sort Operation:</p> </li> <li><code>// RUN</code>: Initiates the execution of the loaded <code>#GSORT</code> program.</li> <li>Sort specifications are provided:<ul> <li><code>HSORTR    32A        3X  60   N</code>: Defines the sort header \u2013 likely specifying a record length of 60 bytes, with alphanumeric (A) and zoned decimal (X) fields, and no sequence checking (N).</li> <li><code>I C   1   1NECD</code>: Input control specification \u2013 processes records starting from position 1, with 1 record, using NEC D (possibly a character set or edit code).</li> <li><code>FNC   2   3                       COMPANY #</code>: Sort key on positions 2-3 (company number, numeric or character).</li> <li><code>FNC  28  33                       XREF SET</code>: Sort key on positions 28-33 (cross-reference set).</li> <li><code>FNC   4  23                       PRODUCT XREF</code>: Sort key on positions 4-23 (product cross-reference).</li> <li><code>FDC   1  60</code>: Full data copy \u2013 copies the entire 60-byte record to the output.</li> </ul> </li> <li>This step sorts the input file (<code>BBPRXR</code>) by the specified keys (company #, XREF set, product XREF) and writes the sorted records to the output file (<code>BB927S</code>).</li> <li> <p><code>// END</code>: Terminates the sort execution.</p> </li> <li> <p>Load Main RPG Program:</p> </li> <li> <p><code>// LOAD BB927</code>: Loads the RPG program named <code>BB927</code> into memory. This is likely the core program responsible for processing the sorted data and generating the print output (based on the procedure's title: \"PRINT PRODUCT CODE CROSS REFERENCE FILE\").</p> </li> <li> <p>Define Files for the RPG Program:</p> </li> <li><code>// FILE NAME-BBPRXR,LABEL-?9?BB927S,DISP-SHR</code>: Redefines the file <code>BBPRXR</code> to point to the sorted output from the previous step (<code>?9?BB927S</code>, shared disposition). This serves as the primary input for the RPG program.</li> <li><code>// FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHR</code>: Defines an additional input file <code>BICONT</code> (possibly a control or index file).</li> <li><code>// FILE NAME-GSTABL,LABEL-?9?GSTABL,DISP-SHR</code>: Defines <code>GSTABL</code> (likely a table file containing lookup data).</li> <li> <p><code>// FILE NAME-GSPROD,LABEL-?9?GSPROD,DISP-SHR</code>: Defines <code>GSPROD</code> (likely a product master file or table).</p> </li> <li> <p>Execute the RPG Program:</p> </li> <li><code>// RUN</code>: Initiates the execution of the loaded <code>BB927</code> program.</li> <li>The program processes the sorted input file (<code>BBPRXR</code> alias for <code>BB927S</code>) using the additional files (<code>BICONT</code>, <code>GSTABL</code>, <code>GSPROD</code>) to generate the product code cross-reference report or printout. (The exact RPG logic isn't shown in the .OCL, but it typically involves reading records, performing calculations/lookups, and outputting formatted reports.)</li> </ol> <p>The overall flow sorts the cross-reference data for efficient processing, then runs the RPG program to print or report on it. The procedure assumes a batch environment and handles file retention for potential reuse.</p>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li><code>#GSORT</code>: A sort utility program loaded and run to sort the input file based on specified keys.</li> <li><code>BB927</code>: The main RPG program loaded and executed to process the sorted data and produce the output (e.g., printing the cross-reference).</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li><code>GSTABL</code>: Explicitly defined as a file, likely a table containing static or lookup data (e.g., codes, descriptions).</li> <li><code>GSPROD</code>: Defined as a file, possibly a product table or master file used for lookups or joins during processing. (Note: <code>BICONT</code> and <code>BBPRXR</code>/<code>BB927S</code> are more like data or control files rather than tables, but <code>GSTABL</code> and <code>GSPROD</code> fit the naming convention for table-like structures in this context.)</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20RPG36/","title":"BB927 RPG36","text":""},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>This RPG III program (BB927) is designed to print a formatted report of the product code cross-reference file, processing sorted input records and enriching them with lookup data from supporting files. It operates in a level-break structure typical of RPG report programs, where records are grouped by key fields (company number at level L2, cross-reference set at level L1). The program assumes the input file (BBPRXR) has been pre-sorted (as done in the calling OCL procedure) by company number, cross-reference set, and product cross-reference. Below is a step-by-step breakdown of the program's execution:</p> <ol> <li>File Initialization and Input Reading:</li> <li>The program reads records sequentially from the primary input file BBPRXR (a 60-byte disk file). Each record triggers indicator 01 (NS 01).</li> <li>Fields are extracted from the input record: BXDEL (delete code), BXCONO (company number), BXPXRC (product cross-reference), BXPROD (product code), BXXSET (cross-reference set), and BXCNTR (container code).</li> <li> <p>Level indicators L1 and L2 are automatically set by RPG based on control breaks: L2 fires when BXCONO changes (higher-level group, e.g., new company), L1 when BXXSET changes (sub-group, e.g., new cross-reference set within a company).</p> </li> <li> <p>Level Break Processing at L2 (Company Level):</p> </li> <li>When a new company group starts (L2 indicator on), the program chains (keys into) the BICONT file using BXCONO to retrieve the company name (BCNAME).<ul> <li>If the record is not found (indicator 99 on), BCNAME is set to blanks.</li> </ul> </li> <li>Captures the current system time (12-digit format) and moves it to TIME (6 digits) and DATE (6 digits, in YYMMDD format).</li> <li>Resets the page counter (PAGE) to 0.</li> <li>Prepares table lookup keys: Sets TBLKEY to 'PRODCD' (commented out in modification), XSKEY to 'BBXSET' followed by BXCONO moved to HLD6 (a 6-byte hold field).</li> <li> <p>This step handles header setup for a new company section in the report.</p> </li> <li> <p>Level Break Processing at L1 (Cross-Reference Set Level):</p> </li> <li>When a new cross-reference set group starts (L1 indicator on), the program updates XSKEY with BXXSET and chains to GSTABL using XSKEY to retrieve the cross-reference set description (XSDESC from TBDESC).<ul> <li>If not found (indicator 98 on), XSDESC is blanked.</li> </ul> </li> <li> <p>Prepares product lookup: Moves BXPROD to HLD6, then sets KLPROD to HLD6 and chains to GSPROD to retrieve the product description (PRDESC from TPDESC).</p> <ul> <li>If not found (indicator 98 on), PRDESC is blanked.</li> <li>Note: A modification (JK01) replaces the original GSTABL chain for product description with GSPROD, and adds TPFLCD (possibly a flag code) from GSPROD.</li> </ul> </li> <li> <p>Detail Record Processing (Indicator 01):</p> </li> <li>For each input record read, the program outputs a detail line to the printer file (PRINT), including:<ul> <li>BXDEL (delete flag).</li> <li>BXPXRC (product cross-reference).</li> <li>BXPROD (product code).</li> <li>BXCNTR (container code).</li> <li>PRDESC (product description from lookup).</li> <li>XSDESC (cross-reference set description).</li> <li>BXXSET (cross-reference set code).</li> </ul> </li> <li> <p>This occurs after any level breaks are handled.</p> </li> <li> <p>Header and Formatting Output:</p> </li> <li>Headers are printed on level breaks (L1 or overflow OF with NL1 for new page):<ul> <li>Company-level header (line 103): Prints BCNAME, 'PAGE' label with PAGE number, 'DATE' label with DATE.</li> <li>Report title header (line 2): Prints XSDESC, BXXSET, and fixed text ' PRODUCT CODE CROSS REFERENCE FILE ', along with 'TIME' and TIME value.</li> <li>Column headings (line 1): Fixed labels like 'CUSTOMER PRODUCT CD', 'ARG CODE', 'ARG CNTR', 'CUSTOMER NAME', 'XREF CODE'.</li> </ul> </li> <li>Overflow handling (OF) ensures headers repeat on new pages.</li> <li> <p>Paging is managed with PAGE incrementing implicitly on overflow.</p> </li> <li> <p>End of Processing:</p> </li> <li>The program cycles through all records in BBPRXR until end-of-file.</li> <li>No explicit termination logic is shown, but RPG automatically ends after the last record, closing files and ending the job.</li> </ol> <p>The program is cycle-driven (RPG's automatic read-process-output loop), with calculations interspersed for lookups and formatting. Modifications (JK01) update the product description lookup to use GSPROD instead of GSTABL, reflecting a change in data sourcing (e.g., from a general table to a product-specific file).</p>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Data Grouping and Sorting Assumption: Records must be pre-sorted by company number (positions 2-3), cross-reference set (28-33), and product cross-reference (4-23) for level breaks to function correctly. This enforces hierarchical reporting: companies &gt; cross-reference sets &gt; individual product references.</li> <li>Delete Handling: Records with BXDEL = 'D' (or TBDEL/TPDEL in tables) are printed but flagged, indicating they are marked for deletion (likely soft deletes).</li> <li>Lookup Rules:</li> <li>Company name (BCNAME) is always attempted from BICONT; defaults to blank if missing.</li> <li>Cross-reference set description (XSDESC) from GSTABL; blank if not found.</li> <li>Product description (PRDESC) from GSPROD (post-modification); blank if not found. Original logic used GSTABL with key 'PRODCD' + product code.</li> <li>Validation and Defaults: No explicit error handling beyond blanking missing descriptions. Assumes valid keys; no additional edits or calculations (e.g., no arithmetic on quantities).</li> <li>Report Structure: </li> <li>Hierarchical: New company triggers full header reset (page=0, time/date capture).</li> <li>New cross-reference set triggers sub-header and description refresh.</li> <li>Detail lines include enriched data (descriptions) for readability.</li> <li>Modification Impact (JK01): Shifts product description sourcing to GSPROD, potentially for more detailed or up-to-date data (e.g., GSPROD has 512-byte records vs. GSTABL's 256). Adds TPFLCD field, though not used in output.</li> <li>Output Focus: Purely a print report; no updates to files. Emphasizes cross-references between products, containers, and sets, useful for inventory or catalog management.</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>GSTABL: Keyed table file (256-byte records, key length 12). Used for looking up cross-reference set descriptions (TBDESC) via XSKEY. Also checks for delete flag (TBDEL).</li> <li>GSPROD: Keyed table file (512-byte records, key length 6). Used (post-modification) for looking up product descriptions (TPDESC) via KLPROD. Includes delete flag (TPDEL) and additional field TPFLCD (flag code, not used in output).</li> <li>BICONT: Keyed control file (256-byte records, key length 2). Used for company name lookups (BCNAME) via BXCONO. Not explicitly a \"table\" but functions as a lookup source.</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/BB927%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. The program performs all operations internally via file chains and built-in RPG functions (e.g., TIME, Z-ADD). No CALL opcodes or external program invocations are present. It is invoked by the parent OCL procedure but does not call others.</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/","title":"Summary BB927 OCL","text":""},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>Based on the provided call stack (OCL procedure invoking #GSORT for sorting, followed by BB927 RPG program for processing and printing), the following use cases are implemented. These represent distinct functional purposes within the overall process of handling product code cross-references, though they are interconnected in a single batch workflow:</p> <ol> <li> <p>Data Sorting for Hierarchical Reporting: Sort the raw product cross-reference data (from file BBPRXR) by key fields (company number, cross-reference set, product cross-reference) to enable grouped, efficient reporting. This prepares data for business analysis or auditing, ensuring records are organized logically without duplication or manual intervention.</p> </li> <li> <p>Enriched Report Generation and Printing: Produce a formatted printed report of product code cross-references, including lookups for company names, product descriptions, and cross-reference set descriptions. This supports business needs like inventory reconciliation, catalog verification, or customer reference checks, with hierarchical grouping (by company and set) and flagging of deleted records.</p> </li> <li> <p>Data Lookup and Enrichment: Perform real-time lookups from supporting files (BICONT for company details, GSTABL for set descriptions, GSPROD for product details post-modification) to add descriptive context to raw codes. This use case enhances data usability for decision-making, such as identifying product-container relationships or validating cross-references.</p> </li> <li> <p>Audit and Deletion Flagging: Identify and flag records marked for deletion (via 'D' codes in input or lookup files) in the output report, allowing business users to review soft-deleted items without permanent data loss. This supports compliance, error correction, or cleanup processes.</p> </li> </ol> <p>These use cases collectively form a batch reporting pipeline, with no interactive elements; they assume pre-existing data files as inputs.</p>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#function-requirement-document-generateproductcrossreferencereport","title":"Function Requirement Document: GenerateProductCrossReferenceReport","text":""},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#overview","title":"Overview","text":"<p>This function represents the core use case of generating a product code cross-reference report as a large, non-interactive batch process. It takes input data sources (equivalent to files BBPRXR, BICONT, GSTABL, GSPROD) and produces a structured report output (e.g., a printable file or data array) without screen interactions. The function handles sorting, lookups, grouping, and formatting to provide a hierarchical, enriched view of cross-reference data for business reporting needs like inventory management, product catalog auditing, or customer reference validation.</p>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#inputs","title":"Inputs","text":"<ul> <li>CrossReferenceData: Array or dataset of records containing: DeleteFlag (1 char), CompanyNumber (2 chars), ProductXRef (20 chars), ProductCode (4 chars), XRefSet (6 chars), ContainerCode (3 chars). Assumed pre-validated; represents raw cross-references.</li> <li>CompanyLookupData: Dataset keyed by CompanyNumber, providing CompanyName (30 chars).</li> <li>SetLookupData: Dataset keyed by composite key (e.g., 'BBXSET' + CompanyNumber + XRefSet), providing SetDescription (30 chars) and DeleteFlag (1 char).</li> <li>ProductLookupData: Dataset keyed by ProductCode (6 chars), providing ProductDescription (30 chars), DeleteFlag (1 char), and optional FlagCode (1 char).</li> <li>SystemDateTime: Current date and time for report headers (auto-captured if not provided).</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#outputs","title":"Outputs","text":"<ul> <li>ReportData: Structured array or file with:</li> <li>Headers: CompanyName, PageNumber, ReportDate, ReportTime, XRefSetDescription, XRefSetCode, Fixed title \" PRODUCT CODE CROSS REFERENCE FILE \".</li> <li>Column Headings: \"CUSTOMER PRODUCT CD\", \"ARG CODE\", \"ARG CNTR\", \"CUSTOMER NAME\", \"XREF CODE\".</li> <li>Detail Lines: Per record - DeleteFlag, ProductXRef, ProductCode, ContainerCode, ProductDescription, XRefSetDescription, XRefSetCode.</li> <li>Paging: New pages on group breaks or overflow, with repeated headers.</li> </ul>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Sort Input Data: Sort CrossReferenceData by CompanyNumber (ascending), XRefSet (ascending), ProductXRef (ascending) to enable hierarchical grouping.</li> <li>Initialize Report: Capture system date/time; reset page counter to 0.</li> <li>Process Groups (Hierarchical Loop):</li> <li>For each new CompanyNumber group:<ul> <li>Lookup CompanyName from CompanyLookupData; default to blank if not found.</li> <li>Print company-level header with CompanyName, PageNumber, Date.</li> </ul> </li> <li>For each new XRefSet group within company:<ul> <li>Lookup SetDescription from SetLookupData using composite key; default to blank if not found.</li> <li>Print set-level header with SetDescription, XRefSetCode, title, Time.</li> <li>Print column headings.</li> </ul> </li> <li>For each detail record:<ul> <li>Lookup ProductDescription from ProductLookupData using ProductCode; default to blank if not found.</li> <li>Output detail line with all fields, including enriched descriptions.</li> </ul> </li> <li>Handle End-of-Data: Close report after processing all records.</li> </ol>"},{"location":"order-entry/BB927%20Prod%20Code%20Cross%20Ref%20Print/Summary%20BB927%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Grouping Hierarchy: Report must group by CompanyNumber (major) and XRefSet (minor) for logical organization; new groups trigger header refreshes and page resets (for company).</li> <li>Delete Flagging: Include DeleteFlag in output if 'D' (from input or lookups); treat as soft delete\u2014do not skip records, but flag for business review (e.g., cleanup or audit).</li> <li>Lookup Defaults: Use blanks for missing descriptions to avoid report errors; assume keys are valid\u2014no additional validation.</li> <li>Formatting: Fixed-width output (e.g., ProductXRef at positions 2-23, etc.); dates in YYMMDD, times in HHMMSS; page numbering starts at 1 per company.</li> <li>Modifications: Product lookups use ProductLookupData (GSPROD equivalent) for descriptions; ignore legacy SetLookupData for products.</li> <li>Calculations: No arithmetic; only string moves, key composites (e.g., 'BBXSET' + CompanyNumber for set lookup), and system time/date extraction. Page increment on overflow (implicit, e.g., every ~60 lines assuming printer limits).</li> <li>Assumptions/Constraints: Input data pre-sorted or sortable; no updates to source data; batch-only (no real-time); supports up to 999,000 records (from OCL allocation).</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935/","title":"BB935","text":""},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935/#process-steps","title":"Process Steps","text":"<p>This RPG program (BB935) is designed for maintaining or inquiring about product code references in a billing system. It operates in two modes: Maintenance (MNT) for adding/updating records, or Inquiry (INQ) for viewing only. The program receives parameters (company code, cross-reference set, product cross-reference, mode, file group, and a return flag) and interacts with a display screen (FMT01 format) to allow user input/validation. It uses a workstation display file (bb935d) for user interaction.</p> <p>Here's a step-by-step breakdown of the program's execution:</p> <ol> <li>Initialization (*INZSR subroutine):</li> <li>Receives entry parameters: Company (p$co), XRef Set (p$xset), Prod XRef (p$pxrc), Mode (p$mode: 'MNT' or 'INQ'), File Group (p$fgrp: 'G' or 'Z'), and Return Flag (p$flag).</li> <li>Moves parameters to screen fields (f$co, f$xset, f$pxrc).</li> <li>Sets up various work fields, message handling, and key lists for file access.</li> <li> <p>Defines constants for function keys (e.g., F03=Exit, F04=Prompt, F12=Return).</p> </li> <li> <p>Open Database Tables (OPNTBL subroutine):</p> </li> <li>Applies file overrides based on the file group parameter (p$fgrp):<ul> <li>If 'G', overrides to G-prefixed libraries (e.g., gbicont, gbbprxy).</li> <li>If 'Z', overrides to Z-prefixed libraries (e.g., zbicont, zbbprxy).</li> </ul> </li> <li>Executes overrides using QCMDEXC API.</li> <li> <p>Opens files: bicont, bbprxy, gsprod, gscntr1.</p> </li> <li> <p>Retrieve Data for Passed Parameters (RTVDTA subroutine):</p> </li> <li>Chains (reads) to bbprxy using keys (company, XRef set, Prod XRef). If no record found, clears the record format.</li> <li>Chains to bicont using company code to fetch company name (bcname). If not found, clears the name.</li> <li>Sets screen header based on mode: \"Product Code Reference Maintenance/Inquiry\" for MNT, or \"Product Code Reference Inquiry\" for INQ.</li> <li> <p>In INQ mode, protects input fields (IN70 = ON).</p> </li> <li> <p>Process Panel Formats (SRFMT subroutine):</p> </li> <li>Clears the screen and initializes FMT01 fields.</li> <li>Enters a loop to display and process the panel (FMT01) until exit.</li> <li>Handles message subfile if errors exist (writes to MSGCTL).</li> <li>Displays FMT01 and processes user input based on function keys or ENTER.</li> <li> <p>Resets error indicators (IN50-IN69) and clears messages after processing.</p> </li> <li> <p>Process Format Input (F01SR subroutine):</p> </li> <li>Handles function keys:<ul> <li>F04: Prompts for field lookups (calls external programs LGSPROD or LGSCNTR1 based on cursor position).</li> <li>F10: Positions cursor to home.</li> <li>F12: Exits the loop and program.</li> </ul> </li> <li> <p>For ENTER key (or INQ mode navigation):</p> <ul> <li>Edits input fields (F01EDT subroutine).</li> <li>If no errors and in MNT mode, updates/adds to database (UPDDBF subroutine).</li> <li>Determines next action (F01NXT): If no input changes, exits the loop (sets fmtagn = *OFF). (Note: FMT02 is commented out, so it always stays on FMT01.)</li> </ul> </li> <li> <p>Edit Format Input (F01EDT subroutine):</p> </li> <li>Validates Product Code (bxprod): Chains to gsprod; if invalid, adds error message 'ERR0010' and sets IN50/IN51.</li> <li>Validates Container Code (bxcntr): Chains to gscntr1; if invalid, adds error message 'ERR0010' and sets IN50/IN52.</li> <li>(Quantity Type validation is commented out.)</li> <li> <p>In INQ mode, clears errors and messages (no validation needed).</p> </li> <li> <p>Update Database (UPDDBF subroutine):</p> </li> <li>Saves current record values.</li> <li>Chains to bbprxy: If record exists and changed, updates it; if unchanged, does nothing.</li> <li>If no record exists, writes a new record with screen values.</li> <li>Sets return flag (p$flag = '1') if a record was added/updated.</li> <li> <p>Sets w$exists if a record now exists.</p> </li> <li> <p>Initialize Format Fields (F01MOV subroutine):</p> </li> <li>Calls F01EDT to populate descriptions.</li> <li> <p>Clears errors if any.</p> </li> <li> <p>Format Protection (F01PRO subroutine):</p> </li> <li> <p>Sets field protection indicators (IN70-IN74): In INQ mode, protects key fields (IN70-IN73 = *ON).</p> </li> <li> <p>Prompt Processing (PROMPT subroutine):</p> <ul> <li>Determines cursor position.</li> <li>Calls external lookup programs based on field (e.g., LGSPROD for product, LGSCNTR1 for container).</li> <li>Sets *IN19 to indicate format change.</li> </ul> </li> <li> <p>Message Handling:</p> <ul> <li>ADDMSG: Sends messages to program message queue using QMHSNDPM API.</li> <li>WRTMSG: Writes to message subfile.</li> <li>CLRMSG: Removes messages using QMHRMVPM API.</li> </ul> </li> <li> <p>Program End:</p> <ul> <li>Closes all files.</li> <li>Sets INLR = ON and returns.</li> </ul> </li> </ol> <p>The program loops on FMT01 until F12 or no changes in INQ mode. It ensures data integrity through validations and handles user prompts for lookups.</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935/#business-rules","title":"Business Rules","text":"<ul> <li>Modes:</li> <li>MNT: Allows input, validation, add/update to bbprxy. Fields are editable.</li> <li> <p>INQ: Read-only; fields protected (IN70 = ON). No updates; clears errors automatically.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Product Code (bxprod) must exist in gsprod (fetches description tpdesc).</li> <li>Container Code (bxcntr) must exist in gscntr1 (fetches description tcdesl).</li> <li>Error 'ERR0010' for invalid codes (likely \"Record not found\").</li> <li> <p>(Commented: Quantity Type must be 'Y' or 'N'; invalid triggers 'ERR0000' with message \"Invalid Response...? or ?\".)</p> </li> <li> <p>Database Operations:</p> </li> <li>Reads from bicont for company name.</li> <li>Add/Update only in MNT mode; uses chain to check existence.</li> <li>New records populated with screen fields (company, XRef set, Prod XRef).</li> <li> <p>Return flag (p$flag) set to '1' on successful add/update.</p> </li> <li> <p>File Groups:</p> </li> <li> <p>'G' or 'Z' determines library overrides (e.g., production vs. test data sets).</p> </li> <li> <p>User Interaction:</p> </li> <li>F04 prompts lookups.</li> <li>F12 exits without saving (in INQ) or after saving (in MNT).</li> <li>Errors displayed in message subfile; must be cleared before proceeding.</li> <li> <p>No deletion functionality (only add/update/inquiry).</p> </li> <li> <p>Assumptions:</p> </li> <li>Called from a main OCL (Operating Control Language) procedure.</li> <li>Handles U.S. Dollars as a constant (c#US$), but not used in logic.</li> <li>Date/Time conversions defined but not actively used in visible logic.</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935/#tables-used","title":"Tables Used","text":"<p>The program uses the following AS/400 files (tables). All are user-opened (USROPN) except the display file. Overrides apply based on file group.</p> <ul> <li>bb935d: Workstation display file (CF E) for screen interaction (formats: FMT01, MSGCTL, CLRSCR).</li> <li>bicont: Input-only file (IF E K) for company details (key: company code; fetches bcname).</li> <li>gscntr1: Input-only file (IF E K) for container code validation (key: container code; fetches tcdesl).</li> <li>gsprod: Input-only file (IF E K) for product code validation (key: company + product code; fetches tpdesc). Renamed field: tpfil5 to x@fil5.</li> <li>bbprxy: Update/Add file (UF A E K) for product cross-references (key: company + XRef set + Prod XRef; record format bbprxrpf). Fields include bxcono, bxxset, bxpxrc, bxprod, bxcntr, etc.</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935/#external-programs-called","title":"External Programs Called","text":"<ul> <li>LGSPROD: Called for product code lookup (F04 on BXPROD field). Parameters: Company (out), Product Code (in/out), File Group (out).</li> <li>LGSCNTR1: Called for container code lookup (F04 on BXCNTR field). Parameters: Container Code (in/out), File Group (out).</li> <li>QMHSNDPM: System API to send program messages (for error/display messages).</li> <li>QMHRMVPM: System API to remove program messages.</li> <li>QCMDEXC: System API to execute commands (for file overrides).</li> <li>(Commented/Unused: DTP010R for date validation, not called in this code.)</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935P/","title":"BB935P","text":""},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935P/#process-steps","title":"Process Steps","text":"<p>This RPGLE program (BB935P) is an interactive display program for managing \"Product Code Reference Entries\" in a billing system. It uses a subfile (SFL1) to list and manipulate cross-reference entries from the BBPRXY file. The program operates in two modes: 'MNT' (maintenance, allowing create/change/delete) or 'INQ' (inquiry only). It also supports file group overrides ('G' or 'Z') for data segregation (e.g., production vs. test environments).</p> <p>The high-level flow is: 1. Initialization (*INZSR subroutine):    - Receives entry parameters: <code>p$mode</code> (MNT/INQ) and <code>p$fgrp</code> (G/Z).    - Sets up work fields, keys, message handling, and date/time stamps.    - Defines key lists for file access (e.g., KLSFL1 for chaining to BBPRXY).    - Prepares subfile parameters (e.g., page size of 28 records).</p> <ol> <li>Open Database Tables (OPNTBL subroutine):</li> <li>Applies database file overrides using QCMDEXC based on <code>p$fgrp</code>:<ul> <li>For 'G': Overrides to files like GBICONT, GBBPRXY, etc.</li> <li>For 'Z': Overrides to files like ZBICONT, ZBBPRXY, etc.</li> </ul> </li> <li> <p>Opens all files (input-only, some with keys).</p> </li> <li> <p>Process Subfile (SRSFL1 subroutine):</p> </li> <li>Clears and initializes the message subfile.</li> <li>Sets initial subfile mode (folded/unfolded) and filters (e.g., exclude deleted entries by default).</li> <li>Enables global field protection if in 'INQ' mode.</li> <li>Repositions the file cursor based on user filters (company, xref set, product xref, product, container, quantity).</li> <li>Loads the subfile with records (SF1LOD subroutine):<ul> <li>Clears subfile if needed.</li> <li>Edits control fields (e.g., validates company via BICONT).</li> <li>Positions and reads records from BBPRXYRD (renamed BBPRXY) using SETLL/READE.</li> <li>Applies filters (e.g., skip deleted if toggled off, match on product/container/quantity if specified).</li> <li>Formats each subfile line (SF1FMT: populates fields, looks up descriptions from GSPROD and GSCNTR1).</li> <li>Applies color coding (SF1COL: blue for deleted entries).</li> <li>Writes up to 28 records per page.</li> </ul> </li> <li>Displays the subfile control and command line.</li> <li> <p>Handles user input in a loop until exit (F3):</p> <ul> <li>Processes function keys: F3 (exit), F4 (field prompting), F5 (refresh), F8 (toggle deleted filter), F10 (position to control), Page Down (load next page).</li> <li>Validates and processes direct access options (1=create, 2=change, 4=delete, 5=display) entered in the control area (SF1DIR subroutine).</li> <li>On Enter: Reads changed subfile records (SF1PRC/SF1CHG) and processes selected options (calls external programs).</li> <li>Repositions subfile on filters or after actions (SF1REP).</li> <li>Handles errors/messages (e.g., invalid company, duplicate entries).</li> </ul> </li> <li> <p>End of Program:</p> </li> <li>Closes all files.</li> <li>Sets INLR = ON and returns.</li> </ol> <p>Throughout, the program uses message subfiles for errors/confirmations (e.g., via ADDMSG, WRTMSG, CLRMSG subroutines, calling QMHSNDPM/QMHRMVPM APIs). Cursor positioning and subfile navigation ensure user-friendly interaction (e.g., SFLRCDNBR for paging).</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935P/#business-rules","title":"Business Rules","text":"<ul> <li>Access Modes:</li> <li>'MNT': Allows create (opt 1), change (opt 2), delete/reactivate (opt 4).</li> <li> <p>'INQ': Read-only; fields protected (*IN70 on), options like create/change disabled.</p> </li> <li> <p>Record Existence and Validation:</p> </li> <li>Company must exist in BICONT; invalid company triggers error 'ERR0010'.</li> <li>For create (opt 1): Requires xref set and product xref; checks for duplicates (error 'ERR0101' if exists and active, or notes if deleted).</li> <li>For change/delete: Cannot modify/delete already deleted records (errors like 'ERR0000' with custom messages).</li> <li> <p>Direct access (options in control area): Validates before processing; e.g., must specify values for create.</p> </li> <li> <p>Deleted Records Handling:</p> </li> <li>Records marked 'D' in BXDEL field.</li> <li>F8 toggles include/exclude deleted (default exclude).</li> <li>Deleted records shown in blue (*IN72).</li> <li> <p>Delete (opt 4) marks as 'D' (or reactivates to blank); cannot change deleted records.</p> </li> <li> <p>Filtering and Positioning:</p> </li> <li>Subfile can be filtered by company, xref set (from GSTABL), product xref, product (from GSPROD), container (from GSCNTR1), quantity.</li> <li>Positioning uses SETLL on BBPRXYRD keys (company + xref set + product xref).</li> <li> <p>Refresh (F5) clears filters and reloads.</p> </li> <li> <p>Prompting (F4):</p> </li> <li> <p>Prompts for xref set (calls LGSTABL), product (LGSPROD), container (LGSCNTR1).</p> </li> <li> <p>Error Handling:</p> </li> <li>Uses message IDs (e.g., 'ERR0103' for missing values) from GSMSGF.</li> <li>Displays in message subfile; clears on refresh.</li> <li> <p>No internet/package installs; relies on pre-installed libraries (e.g., numpy not relevant here as it's RPG).</p> </li> <li> <p>Other:</p> </li> <li>Subfile folded/unfolded toggle (not user-controlled; initial folded).</li> <li>Confirmations for actions (e.g., \"Code X/Y has been created\").</li> <li>No direct file updates in this program; delegates to called programs.</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935P/#tables-used","title":"Tables Used","text":"<p>The program uses the following physical/logical files (all input-only except the display file). Overrides apply based on p$fgrp ('G' or 'Z' prefixes files accordingly). All are keyed except where noted.</p> File Name Description Usage Key Fields (if applicable) BB935PD Display file (workstation) with subfile SFL1. CF (control format) E (external). SFILE for subfile. N/A (display file). BICONT Company master file. IF E K (keyed). USROPN. Company (BCCONO assumed). BBPRXY Product cross-reference file. IF E K. USROPN. Company (BXCONO), Xref Set (BXXSET), Product Xref (BXPXRC). GSTABL General table file (for xref sets). IF E K. USROPN. Table Type (TBTYPE, e.g., 'BBXSET'), Table Code (TBCODE). GSPROD Product master file. IF E K. USROPN. Company (TPCONO assumed), Product (TPPROD). GSCNTR1 Container master file. IF E K. USROPN. Container Code (TCCODE assumed). BBPRXYRD Renamed record format of BBPRXY (BBPRXRPF to BBPRXRPR). IF E K. USROPN. Same as BBPRXY (used for reading to avoid format conflicts)."},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB935P/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs/modules (via CALL opcode) for specific actions. Parameters are passed as listed (e.g., company, xref set, mode).</p> Program Name Description When Called Key Parameters BB935 Detail maintenance/display program for product xref entries. Opt 1 (create), 2 (change), 5 (display). Mode 'MNT' or 'INQ'. Company, Xref Set, Product Xref, Mode, File Group, Return Flag. BB9354 Delete/reactivate program for product xref entries. Opt 4 (delete). Company, Xref Set, Product Xref, File Group, Return Flag. LGSTABL Prompt/lookup for table codes (xref sets). F4 on C1XSET field. Xref Set Type ('BBXSET'), Code (returned), File Group. LGSPROD Prompt/lookup for products. F4 on C1PROD field. Company, Product (input/output), File Group. LGSCNTR1 Prompt/lookup for containers. F4 on C1CNTR field. Container (input/output), File Group. QMHSNDPM System API to send program messages. ADDMSG subroutine (for errors/confirmations). Message ID, File, Data, Length, Type, Queue, Stack Count, Key, Error Code. QMHRMVPM System API to remove program messages. CLRMSG subroutine. Queue, Stack Count, Key, Remove Option, Error Code. QCMDEXC System API to execute commands (file overrides). OPNTBL subroutine. Command String, Length."},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB954/","title":"BB954","text":""},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB954/#process-steps","title":"Process Steps","text":"<p>This RPGLE program (BB9354) is designed to handle the deletion or reactivation of a product cross-reference record in the Bradford Billing system. It is interactive, using a display file to present a confirmation window to the user. The program receives parameters from a calling program (likely a CL program, as OCL refers to older System/36 Operating Control Language, but this appears to be IBM i/AS/400 RPG). It performs basic validation, data retrieval, user interaction, and updates to the database. Below is a step-by-step breakdown of the process:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives input parameters: Company code (P$CO), Cross-reference set (P$XSET), Product cross-reference (P$PXRC), File group (P$FGRP, either 'G' or 'Z' to determine file overrides), and a return flag (P$FLAG).</li> <li>Initializes work fields, date/time stamps, message handling variables, and key lists (e.g., KLPRXY for chaining to files).</li> <li>Moves parameters to display fields for the user interface.</li> <li> <p>Sets default output parameters to blanks.</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides using QCMDEXC API based on the file group (P$FGRP):<ul> <li>If 'G', overrides BICONT to GBICONT and BBPRXY to GBBPRXY.</li> <li>If 'Z', overrides BICONT to ZBICONT and BBPRXY to ZBBPRXY.</li> <li>This allows switching between different data sets (e.g., production vs. test or grouped data).</li> </ul> </li> <li> <p>Opens the files BICONT (input-only) and BBPRXY (update).</p> </li> <li> <p>Retrieve Data for Passed Parameters (RTVDTA Subroutine):</p> </li> <li>Chains (reads) the BBPRXY file using the key list (Company, X-Ref Set, Prod X-Ref) to fetch the record.</li> <li>If the record is not found (IN99 = ON), closes all files and exits the program immediately.</li> <li>Chains to BICONT to retrieve the company name (BCNAME); if not found, clears the name field.</li> <li>Determines the mode based on the delete flag (BXDEL) in the record:<ul> <li>If BXDEL \u2260 'D' (active record), sets header to \"Product Cross Reference Delete\" and function key to F23=Delete.</li> <li>If BXDEL = 'D' (deleted record), sets header to \"Product Cross Reference Re-Activate\", function key to F22=ReActivate, and highlights in red (IN72 = ON).</li> </ul> </li> <li> <p>This step ensures the record exists and prepares the UI based on its status.</p> </li> <li> <p>Process Panel Formats (SRFMT Subroutine):</p> </li> <li>Enters a loop to display and handle the confirmation window (DELWDW format in display file BB9354D).</li> <li>Writes any pending messages to the message subfile if needed (using WRTMSG).</li> <li>Displays the window with the retrieved data (company name, headers, function keys).</li> <li>Processes user input:<ul> <li>F12: Cancels the operation and exits the loop without changes.</li> <li>F23 (if record is active, IN72 = OFF): Chains to BBPRXY, sets BXDEL = 'D' (mark as deleted), updates the record, sets return flag P$FLAG = 'D', and exits.</li> <li>F22 (if record is deleted, IN72 = ON): Chains to BBPRXY, sets BXDEL = 'A' (mark as active), updates the record, sets return flag P$FLAG = 'A', and exits.</li> <li>Other keys: Loops back for re-display if invalid.</li> </ul> </li> <li> <p>Clears messages after input (using CLRMSG) and handles errors via indicators (e.g., IN50-IN69 for screen errors).</p> </li> <li> <p>Message Handling:</p> </li> <li>ADDMSG: Sends diagnostic messages to the program message queue using QMHSNDPM API. Calculates message data length and sets a flag for display.</li> <li>WRTMSG: Writes the message subfile control record (MSGCTL) to display messages on the screen.</li> <li> <p>CLRMSG: Removes messages from the queue using QMHRMVPM API and clears the display flag. Saves/restores current record format and page RRN to avoid disrupting the UI.</p> </li> <li> <p>Program End:</p> </li> <li>Closes all files.</li> <li>Sets INLR = ON and returns to the caller with the updated P$FLAG (indicating delete 'D', reactivate 'A', or unchanged).</li> </ol> <p>The program is straightforward and focuses on a single record operation with user confirmation. It uses indicators extensively for UI control (e.g., IN72 for delete/reactivate mode, IN49 for message subfile display).</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB954/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for managing product cross-reference records:</p> <ul> <li>Record Existence Check: The program immediately exits if the specified record (based on Company, X-Ref Set, Prod X-Ref) does not exist in BBPRXY. This prevents operations on non-existent data.</li> <li>Delete/Reactivate Logic: </li> <li>Deletion is \"soft\" \u2013 it sets a flag (BXDEL = 'D') rather than physically removing the record, allowing for reactivation.</li> <li>Reactivation sets BXDEL = 'A' (or presumably blanks, but code uses 'A').</li> <li>Only allows deletion if the record is active (BXDEL \u2260 'D') and reactivation if deleted (BXDEL = 'D').</li> <li>Updates are conditional on a successful chain (read) to avoid overwriting non-existent or locked records.</li> <li>File Grouping: Supports two data sets ('G' or 'Z') via overrides, likely for segregation (e.g., general vs. zoned data, or different environments). Overrides ensure shared access is disabled (SHARE(*NO)).</li> <li>User Interface Rules:</li> <li>Displays a confirmation window with dynamic headers and function keys based on record status.</li> <li>Fields are protected based on indicators (IN70-IN79), and deleted records are highlighted in red.</li> <li>Function keys: F12 for cancel, F23 for delete (active records), F22 for reactivate (deleted records).</li> <li>Messages are handled via a subfile for errors or diagnostics, cleared after each interaction.</li> <li>No Complex Validation: Minimal input validation beyond existence checks; assumes parameters are valid from the caller. No business calculations (e.g., no date expirations enforced despite a comment on *IN71 for expired records).</li> <li>Security/Access: Uses USROPN for files, implying controlled opening. Updates require a successful chain, implying record-level locking.</li> <li>Return to Caller: Passes back a flag (P$FLAG) indicating the action taken ('D' for delete, 'A' for reactivate), allowing the calling program (e.g., CL) to proceed accordingly.</li> </ul> <p>These rules focus on safe, reversible record management with user confirmation to prevent accidental deletions.</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB954/#tables-used","title":"Tables Used","text":"<p>In RPG terms, these are files (declared via F-specs). The program uses overrides to point to specific physical files based on the file group parameter:</p> <ul> <li>BICONT: Input-only keyed disk file (IF E K DISK USROPN). Used to retrieve company name (BCNAME). Overridden to:</li> <li>GBICONT (for 'G' group).</li> <li>ZBICONT (for 'Z' group).</li> <li>BBPRXY: Update keyed disk file (UF E K DISK USROPN). Primary file for product cross-reference records. Contains fields like BXCONO (company), BXXSET (x-ref set), BXPXRC (prod x-ref), BXDEL (delete flag). Overridden to:</li> <li>GBBPRXY (for 'G' group).</li> <li>ZBBPRXY (for 'Z' group).</li> <li>BB9354D: Display file (CF E WORKSTN INFDS(DSPF_DS)). Used for the user interface (formats: DELWDW for window, WDWOVR for overlay, MSGCTL/MSGCLR for message subfile).</li> </ul> <p>No other database files are accessed.</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/BB954/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external system APIs (not custom user programs):</p> <ul> <li>QMHSNDPM: IBM i API to send program messages (used in ADDMSG for error/diagnostic messaging).</li> <li>QMHRMVPM: IBM i API to remove program messages (used in CLRMSG to clear the message queue).</li> <li>QCMDEXC: IBM i API to execute CL commands (used in OPNTBL to apply file overrides via OVRDBF commands).</li> </ul> <p>No other custom external programs are called; all logic is internal to this RPG program. The program itself is called from an external caller (likely a CL program, referred to as \"main OCL\").</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/","title":"Summary BB935P RPGLE","text":""},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#list-of-use-cases-implemented-in-the-call-stack","title":"List of Use Cases Implemented in the Call Stack","text":"<p>The call stack consists of three RPG programs: <code>BB935P</code>, <code>BB935</code>, and <code>BB9354</code>, which together manage product code cross-reference entries in a billing system. Below are the identified use cases based on the functionality provided by these programs:</p> <ol> <li>Browse and Filter Product Cross-Reference Entries (BB935P):</li> <li>Description: Allows users to view a list of product cross-reference records (<code>BBPRXY</code>) in a subfile, with filtering options by company, XRef set, product XRef, product, container, and quantity. Supports toggling between including/excluding deleted records.</li> <li>Actions: Browse records, reposition based on filters, select records for further actions (create, change, delete, display).</li> <li> <p>Modes: Maintenance (MNT) for selecting actionable options; Inquiry (INQ) for view-only access.</p> </li> <li> <p>Create a New Product Cross-Reference Entry (BB935P \u2192 BB935):</p> </li> <li>Description: Enables creation of a new product cross-reference record by specifying company, XRef set, and product XRef in the footer (option 1) or selecting option 1 on the subfile, then entering details in a single-record screen.</li> <li> <p>Actions: Validates inputs, ensures record doesn\u2019t exist or isn\u2019t deleted, and writes a new record to <code>BBPRXY</code>.</p> </li> <li> <p>Change an Existing Product Cross-Reference Entry (BB935P \u2192 BB935):</p> </li> <li>Description: Allows modification of an existing, non-deleted product cross-reference record by selecting option 2 on the subfile or footer, then editing fields (e.g., product, container, quantity) in a single-record screen.</li> <li> <p>Actions: Validates inputs, updates the record if changed, and confirms the update.</p> </li> <li> <p>Delete a Product Cross-Reference Entry (BB935P \u2192 BB9354):</p> </li> <li>Description: Marks an active product cross-reference record as deleted (<code>BXDEL = 'D'</code>) by selecting option 4 on the subfile or footer, with a confirmation window.</li> <li> <p>Actions: Verifies record existence, updates <code>BXDEL</code>, and confirms deletion.</p> </li> <li> <p>Reactivate a Deleted Product Cross-Reference Entry (BB935P \u2192 BB9354):</p> </li> <li>Description: Reactivates a deleted product cross-reference record (<code>BXDEL = 'D'</code> to <code>BXDEL = 'A'</code>) by selecting option 4 on a deleted record in the subfile, with a confirmation window.</li> <li> <p>Actions: Verifies record is deleted, updates <code>BXDEL</code>, and confirms reactivation.</p> </li> <li> <p>Display a Product Cross-Reference Entry (BB935P \u2192 BB935):</p> </li> <li>Description: Views details of a product cross-reference record in a read-only single-record screen by selecting option 5 on the subfile.</li> <li> <p>Actions: Retrieves and displays record details without allowing edits.</p> </li> <li> <p>Prompt for Valid Field Values (BB935P, BB935):</p> </li> <li>Description: Provides lookup functionality for fields like XRef set, product, and container to ensure valid entries during browsing or maintenance.</li> <li>Actions: Calls external programs (<code>LGSTABL</code>, <code>LGSPROD</code>, <code>LGSCNTR1</code>) to retrieve valid codes and descriptions.</li> </ol> <p>These use cases cover the core functionality of browsing, managing, and validating product cross-reference entries, with <code>BB935P</code> handling the list interface, <code>BB935</code> managing record-level create/change/display, and <code>BB9354</code> focusing on delete/reactivate operations.</p> <p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#functional-requirements-product-cross-reference-management-function","title":"Functional Requirements: Product Cross-Reference Management Function","text":""},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#overview","title":"Overview","text":"<p>The <code>ProductXRefManagement</code> function manages product cross-reference records in a billing system, supporting creation, modification, deletion, reactivation, and display of records in the <code>BBPRXY</code> file, with validation against related master files (<code>BICONT</code>, <code>GSPROD</code>, <code>GSCNTR1</code>, <code>GSTABL</code>). It processes inputs programmatically, replacing interactive screen logic with a single function call, and operates in Maintenance (MNT) or Inquiry (INQ) mode.</p>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>P$CO</code>, numeric): Identifies the company (validated against <code>BICONT</code>).</li> <li>XRef Set (<code>P$XSET</code>, 6 chars): Cross-reference set identifier (validated against <code>GSTABL</code> for type <code>BBXSET</code>).</li> <li>Product XRef (<code>P$PXRC</code>, 20 chars): Product cross-reference identifier.</li> <li>Product Code (<code>BXPROD</code>, variable length): Product identifier (validated against <code>GSPROD</code>).</li> <li>Container Code (<code>BXCNTR</code>, variable length): Container identifier (validated against <code>GSCNTR1</code>).</li> <li>Quantity Type (<code>BXQTTY</code>, 1 char): Indicates quantity type ('Y' or 'N'; optional, validation commented out in original code).</li> <li>Operation (<code>OPERATION</code>, string): Specifies action (<code>CREATE</code>, <code>CHANGE</code>, <code>DELETE</code>, <code>REACTIVATE</code>, <code>DISPLAY</code>).</li> <li>Mode (<code>P$MODE</code>, 3 chars): <code>MNT</code> for edit operations, <code>INQ</code> for view-only.</li> <li>File Group (<code>P$FGRP</code>, 1 char): <code>Z</code> or <code>G</code> for file library overrides (e.g., test vs. production).</li> <li>Filter Options (for browse, optional):</li> <li>Include Deleted (<code>INCLUDE_DEL</code>, boolean): True to include deleted records (<code>BXDEL = 'D'</code>), false to exclude.</li> <li>Position Filters (company, XRef set, product XRef, product, container, quantity): For browsing records.</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Return Flag (<code>P$FLAG</code>, 1 char): Indicates result:</li> <li><code>1</code>: Successful create or change.</li> <li><code>D</code>: Successful deletion.</li> <li><code>A</code>: Successful reactivation.</li> <li><code>0</code>: No action or failure.</li> <li>Error Messages (list of strings): Validation or processing errors.</li> <li>Record Data (for <code>DISPLAY</code> or <code>BROWSE</code>, struct): Returns fields (company, XRef set, product XRef, product, container, quantity, descriptions, deletion status) for one or multiple records.</li> <li>Company Name (<code>BCNAME</code>, variable length): Retrieved from <code>BICONT</code>.</li> <li>Product Description (<code>TPDESC</code>, variable length): Retrieved from <code>GSPROD</code>.</li> <li>Container Description (<code>TCDESL</code>, variable length): Retrieved from <code>GSCNTR1</code>.</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Apply File Overrides:</li> <li> <p>Use <code>P$FGRP</code> (<code>Z</code> or <code>G</code>) to override file libraries (<code>BICONT</code>, <code>BBPRXY</code>, <code>GSPROD</code>, <code>GSCNTR1</code>, <code>GSTABL</code>) for environment-specific access (e.g., <code>ZBICONT</code> vs. <code>GBICONT</code>).</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Company: Chain to <code>BICONT</code> to verify existence; retrieve <code>BCNAME</code>. Return error <code>ERR0010</code> if not found.</li> <li>XRef Set (for <code>CREATE</code>, <code>CHANGE</code>, <code>BROWSE</code>): Chain to <code>GSTABL</code> (type <code>BBXSET</code>) to validate; return error if invalid.</li> <li>Product (if provided): Chain to <code>GSPROD</code> to verify existence; retrieve <code>TPDESC</code>. Return error <code>ERR0010</code> if not found.</li> <li>Container (if provided): Chain to <code>GSCNTR1</code> to verify existence; retrieve <code>TCDESL</code>. Return error <code>ERR0010</code> if not found.</li> <li>Quantity Type (if provided, commented in original): Must be 'Y' or 'N'; return error \"Invalid Response...? or ?\" if invalid.</li> <li>Record Existence (for <code>CHANGE</code>, <code>DELETE</code>, <code>REACTIVATE</code>, <code>DISPLAY</code>): Chain to <code>BBPRXY</code> with key (<code>P$CO</code>, <code>P$XSET</code>, <code>P$PXRC</code>). Return error <code>ERR0102</code> if not found.</li> <li> <p>Create Checks: For <code>CREATE</code>, ensure record doesn\u2019t exist (<code>ERR0101</code>) or isn\u2019t deleted (<code>ERR0108</code>).</p> </li> <li> <p>Process Operation:</p> </li> <li>BROWSE:<ul> <li>Position to records in <code>BBPRXY</code> using filters (company, XRef set, product XRef, product, container, quantity).</li> <li>Exclude deleted records (<code>BXDEL = 'D'</code>) unless <code>INCLUDE_DEL</code> is true.</li> <li>Retrieve up to 28 records (page size); fetch descriptions from <code>GSPROD</code> and <code>GSCNTR1</code>.</li> <li>Return list of records with fields and descriptions.</li> </ul> </li> <li>CREATE (<code>MNT</code> mode):<ul> <li>Validate inputs; ensure <code>P$XSET</code> and <code>P$PXRC</code> are provided (<code>ERR0103</code> if missing).</li> <li>Write new record to <code>BBPRXY</code> with <code>BXDEL = 'A'</code>, <code>BXCONO = P$CO</code>, <code>BXXSET = P$XSET</code>, <code>BXPXRC = P$PXRC</code>, and other fields.</li> <li>Set <code>P$FLAG = '1'</code>.</li> <li>Return confirmation message: \"Code [XSET]/[PXRC] has been created\".</li> </ul> </li> <li>CHANGE (<code>MNT</code> mode):<ul> <li>Validate record is not deleted (<code>BXDEL \u2260 'D'</code>; error <code>ERR0108</code>).</li> <li>Update <code>BBPRXY</code> record with new <code>BXPROD</code>, <code>BXCNTR</code>, <code>BXQTTY</code> if changed.</li> <li>Set <code>P$FLAG = '1'</code>.</li> <li>Return confirmation message: \"Code [XSET]/[PXRC] has been changed\".</li> </ul> </li> <li>DELETE (<code>MNT</code> mode):<ul> <li>Validate record is active (<code>BXDEL \u2260 'D'</code>).</li> <li>Update <code>BBPRXY</code> setting <code>BXDEL = 'D'</code>.</li> <li>Set <code>P$FLAG = 'D'</code>.</li> <li>Return confirmation message: \"Code [XSET]/[PXRC] has been deleted\".</li> </ul> </li> <li>REACTIVATE (<code>MNT</code> mode):<ul> <li>Validate record is deleted (<code>BXDEL = 'D'</code>).</li> <li>Update <code>BBPRXY</code> setting <code>BXDEL = 'A'</code>.</li> <li>Set <code>P$FLAG = 'A'</code>.</li> <li>Return confirmation message: \"Code [XSET]/[PXRC] has been reactivated\".</li> </ul> </li> <li> <p>DISPLAY (<code>INQ</code> mode):</p> <ul> <li>Retrieve record from <code>BBPRXY</code>; fetch descriptions from <code>GSPROD</code>, <code>GSCNTR1</code>.</li> <li>Return record data without updates.</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>Return error messages for invalid inputs or failed operations.</li> <li> <p>Clear messages after processing.</p> </li> <li> <p>Return Results:</p> </li> <li>Output <code>P$FLAG</code>, error messages, and record data (single record for <code>CREATE</code>, <code>CHANGE</code>, <code>DELETE</code>, <code>REACTIVATE</code>, <code>DISPLAY</code>; list for <code>BROWSE</code>).</li> </ol>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Modes:</li> <li><code>MNT</code>: Allows <code>CREATE</code>, <code>CHANGE</code>, <code>DELETE</code>, <code>REACTIVATE</code>. Validates and updates <code>BBPRXY</code>.</li> <li><code>INQ</code>: Allows <code>DISPLAY</code>, <code>BROWSE</code>. No updates; read-only.</li> <li>Record Status:</li> <li><code>BXDEL = 'D'</code> marks a deleted record; <code>BXDEL = 'A'</code> marks an active record.</li> <li>Cannot change deleted records (<code>ERR0108</code>).</li> <li>Cannot create if record exists (<code>ERR0101</code>) or is deleted (<code>ERR0108</code>).</li> <li>Validation:</li> <li>Company must exist in <code>BICONT</code> (<code>ERR0010</code>).</li> <li>XRef set must exist in <code>GSTABL</code> (type <code>BBXSET</code>).</li> <li>Product must exist in <code>GSPROD</code> (<code>ERR0010</code>).</li> <li>Container must exist in <code>GSCNTR1</code> (<code>ERR0010</code>).</li> <li>Quantity type (if enforced) must be 'Y' or 'N'.</li> <li>Browse:</li> <li>Filters by company, XRef set, product XRef, product, container, quantity.</li> <li>Excludes deleted records unless specified.</li> <li>Maximum 28 records per call.</li> <li>Messages:</li> <li>Confirmations for create, change, delete, reactivate.</li> <li>Errors for invalid inputs or operations (e.g., <code>ERR0101</code>, <code>ERR0102</code>, <code>ERR0103</code>, <code>ERR0108</code>, <code>ERR0010</code>).</li> <li>File Overrides:</li> <li><code>P$FGRP</code> (<code>Z</code> or <code>G</code>) determines library (e.g., <code>ZBICONT</code> vs. <code>GBICONT</code>).</li> </ul>"},{"location":"order-entry/BB935P%20Prod%20Code%20Cross%20Ref%20Add-Update/Summary%20BB935P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Message Length: For error/confirmation messages, calculate length using <code>%len(%trim(m@data))</code> for <code>QMHSNDPM</code>.</li> <li>Timestamp: Current date/time (<code>T#CYMD</code>) retrieved via <code>TIME</code> opcode but not used in updates.</li> <li>Record Comparison: For <code>CHANGE</code>, compare saved record (<code>SVDS</code>) with updated fields (<code>WKDS01</code>) to detect changes before updating.</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/","title":"BI921 OCL","text":"<p>The provided document, <code>BI921.ocl36.txt</code>, is an Operation Control Language (OCL) program for an IBM System/36 or AS/400 environment, designed to manage the processing of a \"Product Tax Master List.\" It is related to the previously analyzed <code>BI921P.ocl36.txt</code> and <code>BI921P.rpg36.txt</code>, as it continues the workflow by sorting data and executing a report generation program. Below, I\u2019ll explain the process steps, identify external programs called, and list the tables/files used.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program <code>BI921.ocl36.txt</code> orchestrates the sorting of tax-related data and the execution of a report generation program. Here\u2019s a step-by-step breakdown of the process :</p> <ol> <li>Header and Metadata:</li> <li>The file starts with a comment: <code>** PRODUCT TAX MASTER LIST **</code>, indicating its purpose, which is to generate or process a product tax master list.</li> <li> <p>The comment <code>// GSY2K</code> suggests a system check or configuration for Year 2000 (Y2K) compliance, ensuring proper handling of date-related data.</p> </li> <li> <p>Set Local Data Based on Condition:</p> </li> <li><code>// IF ?L'111,3'?/CO LOCAL OFFSET-1,DATA-'IAC'</code><ul> <li>Checks if the value at position 111, length 3 (likely from a user data structure or parameter) equals 'CO'.</li> <li>If true, sets a local variable at offset 1 to 'IAC' (possibly a company-specific code or flag).</li> </ul> </li> <li><code>// ELSE LOCAL OFFSET-1,DATA-'I*C'</code><ul> <li>If the condition is false, sets the local variable at offset 1 to 'I*C' (likely a wildcard or default code).</li> </ul> </li> <li> <p>This step customizes the job based on whether specific companies ('CO') or all companies are selected.</p> </li> <li> <p>Sort Data Using #GSORT:</p> </li> <li><code>// LOAD #GSORT</code>: Loads the system sort utility <code>#GSORT</code>, a standard IBM System/36 program for sorting data files.</li> <li><code>// FILE NAME-INPUT,LABEL-?9?BIPRTX,DISP-SHR</code>:<ul> <li>Specifies the input file <code>BIPRTX</code> with a label prefixed by <code>?9?</code> (a dynamic parameter, e.g., library or job number).</li> <li><code>DISP-SHR</code> indicates shared access, allowing concurrent reads.</li> </ul> </li> <li><code>// FILE NAME-OUTPUT,LABEL-?9?BI921,RECORDS-999000,EXTEND-999000,RETAIN-J</code>:<ul> <li>Specifies the output file <code>BI921</code> with the same <code>?9?</code> prefix.</li> <li><code>RECORDS-999000,EXTEND-999000</code> allocates space for up to 999,000 records, with the ability to extend by the same amount.</li> <li><code>RETAIN-J</code> retains the output file after job completion for further processing.</li> </ul> </li> <li><code>// RUN</code>:<ul> <li>Executes the sort operation with the following specifications (<code>HSORTR</code> and subsequent lines):</li> <li><code>HSORTR 9A 3X 64 N</code>: Defines the sort header:<ul> <li><code>9A</code>: 9-character alphanumeric key.</li> <li><code>3X</code>: 3 fields to sort.</li> <li><code>64</code>: Record length of 64 bytes.</li> <li><code>N</code>: No sequence checking (ascending order by default).</li> </ul> </li> <li>Conditional Input Specifications:<ul> <li>Three conditional checks (<code>I*</code> blocks) filter records based on company numbers:</li> <li><code>I C 1NECD ?L'1,3'? 2 3EQC?L'114,2'?</code>: Includes records where the company number (positions 2-3) matches the value at position 114, length 2 (likely <code>KYCO1</code> from <code>BI921P</code>).</li> <li><code>IOC 1NECD ?L'1,3'? 2 3EQC?L'116,2'?</code>: Includes records where the company number matches the value at position 116, length 2 (<code>KYCO2</code>).</li> <li><code>IOC 1NECD ?L'1,3'? 2 3EQC?L'118,2'?</code>: Includes records where the company number matches the value at position 118, length 2 (<code>KYCO3</code>).</li> <li>These conditions filter <code>BIPRTX</code> records based on user-selected company numbers (if <code>KYALCO</code> = 'CO') or include all records if no specific companies are selected.</li> </ul> </li> <li>Sort Fields:<ul> <li><code>FNC 2 3 CO #</code>: Sorts by company number (positions 2-3).</li> <li><code>FNC 4 5 STATE</code>: Sorts by state code (positions 4-5).</li> <li><code>FNC 6 9 PRODUCE CODE</code>: Sorts by produce code (positions 6-9).</li> <li><code>FNC 10 10 DELVRD CODE</code>: Sorts by delivered code (position 10).</li> </ul> </li> <li><code>FDC 1 64</code>: Includes the entire record (positions 1-64) in the output.</li> </ul> </li> <li> <p>// END: Completes the sort operation, producing a sorted file <code>?9?BI921</code>.</p> </li> <li> <p>Execute Report Generation Program:</p> </li> <li><code>// LOAD BI921</code>: Loads the <code>BI921</code> program, likely an RPG program responsible for generating the final product tax master list report.</li> <li>File Specifications:<ul> <li><code>// FILE NAME-BIPRTX,LABEL-?9?BI921</code>: Uses the sorted output file <code>?9?BI921</code> (from the previous step) as input, referred to as <code>BIPRTX</code>.</li> <li><code>// FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHRRM</code>: Uses the <code>BICONT</code> file (shared read mode) for company data (as seen in <code>BI921P</code>).</li> <li><code>** FILE NAME-GSTABL,LABEL-?9?GSTABL,DISP-SHRRM</code>: Specifies the <code>GSTABL</code> file (shared read mode), likely containing tax table data. The double asterisk (<code>**</code>) suggests this line might be commented out or conditionally included.</li> <li><code>** FILE NAME-GSPROD,LABEL-?9?GSPROD,DISP-SHRRM</code>: Specifies the <code>GSPROD</code> file (shared read mode), likely containing product data. This line is also commented out or conditional.</li> </ul> </li> <li><code>// RUN</code>: Executes the <code>BI921</code> program, which processes the sorted <code>BIPRTX</code> file and other files to generate the report.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. #GSORT: A system sort utility used to sort the <code>BIPRTX</code> file based on company number, state, produce code, and delivered code. 2. BI921: An RPG (or similar) program loaded and executed to generate the product tax master list report using the sorted <code>BI921</code> file and other data files.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following files: 1. BIPRTX (Input to #GSORT):    - Label: <code>?9?BIPRTX</code>.    - Purpose: Input file containing product tax data to be sorted.    - Access: Shared (<code>DISP-SHR</code>). 2. BI921 (Output from #GSORT, Input to BI921):    - Label: <code>?9?BI921</code>.    - Purpose: Sorted output file from <code>#GSORT</code>, used as input for the <code>BI921</code> program.    - Attributes: Up to 999,000 records, extensible, retained after job (<code>RETAIN-J</code>). 3. BICONT:    - Label: <code>?9?BICONT</code>.    - Purpose: Contains company data (e.g., company codes and names), used by the <code>BI921</code> program.    - Access: Shared read mode (<code>DISP-SHRRM</code>). 4. GSTABL (Commented/Conditional):    - Label: <code>?9?GSTABL</code>.    - Purpose: Likely contains tax table data (e.g., tax rates or rules).    - Access: Shared read mode (<code>DISP-SHRRM</code>).    - Note: Commented out (<code>**</code>), so it may not be used unless uncommented or included conditionally. 5. GSPROD (Commented/Conditional):    - Label: <code>?9?GSPROD</code>.    - Purpose: Likely contains product data (e.g., product codes or descriptions).    - Access: Shared read mode (<code>DISP-SHRRM</code>).    - Note: Commented out (<code>**</code>), so it may not be used unless uncommented or included conditionally.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program sets a local variable based on whether specific companies ('CO') or all companies are selected (<code>KYALCO</code>). It then sorts the <code>BIPRTX</code> file using <code>#GSORT</code> based on company number, state, produce code, and delivered code, producing a sorted file <code>BI921</code>. Finally, it executes the <code>BI921</code> program, which uses the sorted <code>BI921</code> file, <code>BICONT</code>, and possibly <code>GSTABL</code> and <code>GSPROD</code> to generate the product tax master list report.</li> <li>External Programs Called:</li> <li><code>#GSORT</code>: System sort utility for sorting <code>BIPRTX</code>.</li> <li><code>BI921</code>: RPG program for report generation.</li> <li>Tables/Files Used:</li> <li><code>BIPRTX</code>: Input tax data file.</li> <li><code>BI921</code>: Sorted output file used as input for report generation.</li> <li><code>BICONT</code>: Company data file.</li> <li><code>GSTABL</code> (conditional): Tax table data.</li> <li><code>GSPROD</code> (conditional): Product data.</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20OCL/#notes","title":"Notes","text":"<ul> <li>The <code>?9?</code> placeholders indicate dynamic parameters (e.g., library or job number) passed from the calling environment, likely set by the earlier <code>BI921P</code> program.</li> <li>The commented lines for <code>GSTABL</code> and <code>GSPROD</code> suggest they may be optional or included based on specific conditions not visible in this OCL.</li> <li>The <code>BI921</code> program is likely the final step in generating the report, using the sorted data and additional files. If you have the RPG source code for <code>BI921</code>, I can provide further details on its logic.</li> <li>The process ties back to <code>BI921P</code>, which validated user input (company selection, job queue, etc.), and this OCL uses those parameters (e.g., <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> at positions 114, 116, 118) to filter and sort data.</li> </ul> <p>If you have additional files (e.g., <code>BI921</code> RPG source) or need further analysis of specific components, let me know! I can also search for related information if required.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/","title":"BI921 RPG36","text":"<p>The provided document, <code>BI921.rpg36.txt</code>, is an RPG (Report Program Generator) program for an IBM System/36 or AS/400 environment, named <code>BI921</code>. It is called by the OCL program <code>BI921.ocl36.txt</code> and is responsible for generating the \"Product Tax Master List\" report. The program processes sorted tax data, retrieves company and product information, and formats it for printing. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the RPG source code.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>BI921</code> RPG program reads sorted tax data from the <code>BIPRTX</code> file, retrieves related company and product information, and generates a formatted report on a printer. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization (Header and File Definitions):</li> <li>Line 0002 (H-Spec): The header specification (<code>H P064 B</code>) defines the program as <code>BI921</code>, with <code>P064</code> as an identifier and <code>B</code> indicating batch mode.</li> <li>Lines 0004-0007 (F-Specs):<ul> <li><code>BIPRTX</code>: Primary input file (<code>IP</code>), disk-based, 64 bytes per record, containing sorted tax data.</li> <li><code>BICONT</code>: Input file (<code>IC</code>), disk-based, 256 bytes per record, indexed (<code>2AI</code>), with 2 keys, used for company data.</li> <li><code>GSTABL</code>: Commented out (<code>**</code>), previously used for product data but replaced (per modification note <code>JK01</code>).</li> <li><code>GSPROD</code>: Input file (<code>IF</code>), disk-based, 512 bytes per record, indexed (<code>6AI</code>), with 8 keys, used for product data (replacing <code>GSTABL</code> per <code>JK01</code>).</li> <li><code>PRINT</code>: Output file (<code>O</code>), printer-based, 132 bytes per record, used for the report output.</li> </ul> </li> <li>Lines 0008-0009 (E-Specs):<ul> <li><code>SEP</code>: Array of 66 elements, 2 bytes each, used for separator lines in the report.</li> <li><code>MSG</code>: Array of 5 elements, 40 bytes each, with one message defined: \"MISCELLANEOUS INVOICE LINES\" (used for 'MISC' product codes).</li> </ul> </li> <li> <p>Lines 0010-0024 (I-Specs):</p> <ul> <li><code>BIPRTX</code> (format <code>NS 01</code>):</li> <li><code>PTDEL</code> (1): Delete code ('D' indicates deleted records).</li> <li><code>PTCONO</code> (2-3): Company number.</li> <li><code>PTSTAT</code> (4-5): State code.</li> <li><code>PTPROD</code> (6-9): Product code.</li> <li><code>PTDELV</code> (10): Delivered code.</li> <li><code>PTTXC1</code> to <code>PTTXC0</code> (11-50): Tax codes 1-10 (expanded from 5 to 10 per <code>LT01</code> modification).</li> <li><code>BICONT</code>: <code>BCNAME</code> (4-33): Company name.</li> <li><code>GSPROD</code>:</li> <li><code>TPDEL</code> (1): Delete flag.</li> <li><code>TPDESC</code> (14-43): Product description (complete).</li> <li><code>TPDES1</code> (14-33): Partial product description (used in output).</li> <li><code>TPPRGP</code> (89-90): Product group code.</li> <li><code>TPPRCL</code> (127-129): Product class code.</li> <li><code>TPABDS</code> (145-154): Short description.</li> <li><code>TPFLCD</code> (252): Additional field (possibly a flag or code).</li> </ul> </li> <li> <p>Main Program Logic (C-Specs):</p> </li> <li>Lines 0026-0032 (Level 2 Processing):<ul> <li>Executes for each company (<code>L2</code> control break, based on <code>PTCONO</code> change):</li> <li>Sets <code>SEP</code> to '* ' for report formatting.</li> <li>Captures current time (<code>TIME TIMDAT 120</code>) and moves it to <code>TIME</code> (positions 7-12) and <code>DATE</code> (positions 1-6).</li> <li>Chains to <code>BICONT</code> using <code>PTCONO</code> to retrieve <code>BCNAME</code> (company name). If not found (indicator 92), processing continues without a name.</li> </ul> </li> <li> <p>Lines 0035-0048 (Level 1 Processing):</p> <ul> <li>Executes for each <code>BIPRTX</code> record (<code>01</code> input):</li> <li>Constructs a key (<code>KLPROD</code>) by combining <code>PTCONO</code> (company number) and <code>PTPROD</code> (product code).</li> <li>Chains to <code>GSPROD</code> using <code>KLPROD</code> to retrieve product description (<code>TPDESC</code>, <code>TPDES1</code>, etc.). If not found (indicator 90), sets <code>TPDESC</code> to blanks.</li> <li>If <code>PTPROD</code> is 'MISC' and indicator 90 is on (product not found), sets <code>TPDESC</code> to \"MISCELLANEOUS INVOICE LINES\" (<code>MSG,1</code>).</li> <li>Note: The commented <code>GSTABL</code> logic (<code>TBKEY</code>, <code>TBKEY6</code>) was replaced by <code>GSPROD</code> (per <code>JK01</code>).</li> </ul> </li> <li> <p>Report Output (O-Specs, Lines 0050-0088):</p> </li> <li>Header Output (Lines 0050-0075):<ul> <li>At control level <code>L2</code> (company change) or overflow (<code>OF</code>), prints:</li> <li>Company name (<code>BCNAME</code>) at position 30.</li> <li>\"PAGE\" and page number (<code>PAGE</code>) at positions 104-108.</li> <li>\"DATE\" and formatted date (<code>DATE</code>) at positions 120-129.</li> <li>Report title \"PRODUCT TAX MASTER LIST\" at position 78.</li> <li>\"TIME\" and formatted time (<code>TIME</code>) at positions 120-129.</li> <li>Separator line (<code>SEP</code>) at position 132.</li> <li>Column headers: \"STATE\" (5), \"PRODUCT CODE\" (11), \"DELV\" (38), \"TAX CODES ...\" (69).</li> </ul> </li> <li>Detail Output (Lines 0076-0088):<ul> <li>At control level <code>L1</code> (each record) and input record (<code>01</code>):</li> <li>Prints state (<code>PTSTAT</code>) at position 3.</li> <li>Product code (<code>PTPROD</code>) at position 11.</li> <li>Product description (<code>TPDES1</code>) at position 33.</li> <li>Delivered code (<code>PTDELV</code>) at position 37.</li> <li>Tax codes <code>PTTXC1</code> to <code>PTTXC0</code> at positions 49, 56, 63, 70, 77, 84, 91, 98, 105, 112.</li> <li>Output occurs only for non-deleted records (implicitly, as <code>PTDEL='D'</code> is not checked but could skip processing).</li> </ul> </li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#business-rules","title":"Business Rules","text":"<p>Based on the program logic and comments, the following business rules apply: 1. Data Inclusion:    - Only non-deleted records from <code>BIPRTX</code> (where <code>PTDEL \u2260 'D'</code>) are processed, though the program does not explicitly check <code>PTDEL</code>.    - Records are grouped by company (<code>PTCONO</code>), with headers printed on company changes (<code>L2</code>).</p> <ol> <li>Product Description Handling:</li> <li>Product descriptions are retrieved from <code>GSPROD</code> using a composite key (<code>KLPROD = PTCONO + PTPROD</code>).</li> <li>If a product is not found in <code>GSPROD</code> (indicator 90), the description is blanked.</li> <li> <p>If the product code is 'MISC' and not found, the description is set to \"MISCELLANEOUS INVOICE LINES\".</p> </li> <li> <p>Tax Code Expansion:</p> </li> <li> <p>Per modification <code>LT01</code> (07/82/2011), tax codes were expanded from 5 (<code>PTTXC1</code> to <code>PTTXC5</code>) to 10 (<code>PTTXC1</code> to <code>PTTXC0</code>), allowing more tax codes per product.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes a header with company name, date, time, and page number, printed on company changes or page overflow.</li> <li>Detail lines list state, product code, product description, delivered code, and up to 10 tax codes.</li> <li> <p>Separator lines (<code>SEP = '* '</code>) and column headers are printed for clarity.</p> </li> <li> <p>Data Validation:</p> </li> <li>Company numbers (<code>PTCONO</code>) are validated against <code>BICONT</code> to retrieve company names. If not found (indicator 92), the name is omitted.</li> <li>Product codes are validated against <code>GSPROD</code>. If not found, descriptions are handled as described above.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The RPG program uses the following files: 1. BIPRTX:    - Type: Primary input file (<code>IP</code>), disk-based, 64 bytes per record.    - Purpose: Contains sorted tax data (from <code>BI921.ocl36.txt</code> sort).    - Fields: <code>PTDEL</code> (delete code), <code>PTCONO</code> (company number), <code>PTSTAT</code> (state), <code>PTPROD</code> (product code), <code>PTDELV</code> (delivered code), <code>PTTXC1</code> to <code>PTTXC0</code> (tax codes 1-10). 2. BICONT:    - Type: Input file (<code>IC</code>), disk-based, 256 bytes, indexed (<code>2AI</code>).    - Purpose: Provides company names (<code>BCNAME</code>) for report headers.    - Fields: <code>BCNAME</code> (company name). 3. GSPROD:    - Type: Input file (<code>IF</code>), disk-based, 512 bytes, indexed (<code>6AI</code>).    - Purpose: Provides product descriptions and related data (replaced <code>GSTABL</code> per <code>JK01</code>).    - Fields: <code>TPDEL</code> (delete flag), <code>TPDESC</code> (full description), <code>TPDES1</code> (partial description), <code>TPPRGP</code> (product group), <code>TPPRCL</code> (product class), <code>TPABDS</code> (short description), <code>TPFLCD</code> (flag/code). 4. GSTABL (Commented Out):    - Type: Input file (<code>IC</code>), disk-based, 256 bytes, indexed (<code>12AI</code>).    - Purpose: Previously used for product descriptions but replaced by <code>GSPROD</code> (per <code>JK01</code>).    - Fields: <code>TBDESC</code> (description, commented out). 5. PRINT:    - Type: Output file (<code>O</code>), printer-based, 132 bytes per record.    - Purpose: Outputs the formatted product tax master list report.    - Fields: Includes <code>BCNAME</code>, <code>DATE</code>, <code>TIME</code>, <code>PAGE</code>, <code>SEP</code>, <code>PTSTAT</code>, <code>PTPROD</code>, <code>TPDES1</code>, <code>PTDELV</code>, <code>PTTXC1</code> to <code>PTTXC0</code>, and literals (e.g., \"PRODUCT TAX MASTER LIST\"). 6. MSG (Array/Table):    - Type: Program-defined array (5 elements, 40 bytes each).    - Purpose: Stores messages, with one defined: \"MISCELLANEOUS INVOICE LINES\" for 'MISC' product codes.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs (no <code>CALL</code> operations in the C-Specs). It is invoked by the OCL program <code>BI921.ocl36.txt</code> and performs its task independently, relying on file inputs and printer output.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program processes sorted tax data from <code>BIPRTX</code>, retrieves company names from <code>BICONT</code> and product descriptions from <code>GSPROD</code>, and generates a report on <code>PRINT</code>. It groups output by company (<code>L2</code>), prints headers with company, date, time, and page information, and details each record with state, product code, description, delivered code, and up to 10 tax codes. Special handling applies for 'MISC' products.</li> <li>Business Rules:</li> <li>Groups records by company with headers on changes.</li> <li>Retrieves company names from <code>BICONT</code>, defaulting to blank if not found.</li> <li>Retrieves product descriptions from <code>GSPROD</code>, using \"MISCELLANEOUS INVOICE LINES\" for 'MISC' codes if not found.</li> <li>Supports 10 tax codes per product (expanded per <code>LT01</code>).</li> <li>Formats report with separators and column headers.</li> <li>Tables/Files Used:</li> <li><code>BIPRTX</code>: Sorted tax data.</li> <li><code>BICONT</code>: Company names.</li> <li><code>GSPROD</code>: Product descriptions.</li> <li><code>GSTABL</code>: Commented out, previously used for product data.</li> <li><code>PRINT</code>: Report output.</li> <li><code>MSG</code>: Message array for 'MISC' products.</li> <li>External Programs Called: None.</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921%20RPG36/#notes","title":"Notes","text":"<ul> <li>Modifications:</li> <li><code>LT01</code> (07/82/2011): Expanded tax codes from 5 to 10 (<code>PTTXC6</code> to <code>PTTXC0</code>).</li> <li><code>JK01</code> (01/31/23): Replaced <code>GSTABL</code> with <code>GSPROD</code> for product data, updating file access and fields.</li> <li>Context with OCL: The OCL program <code>BI921.ocl36.txt</code> sorts <code>BIPRTX</code> into <code>?9?BI921</code>, which this program reads as <code>BIPRTX</code>. It also uses <code>BICONT</code>, <code>GSTABL</code> (if uncommented), and <code>GSPROD</code> as specified in the OCL.</li> <li>Limitations: The program assumes <code>BIPRTX</code> is pre-sorted (by <code>#GSORT</code> in the OCL) and does not explicitly filter deleted records (<code>PTDEL='D'</code>), though this may be handled by the sort or prior validation in <code>BI921P</code>.</li> </ul> <p>If you need further analysis (e.g., sample data, report format visualization, or integration with <code>BI921P</code>), or if you want me to search for related information, let me know!</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20OCL/","title":"BI921P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>BI921P.ocl36.txt</code>, used in IBM System/36 or AS/400 environments to control job execution and data processing. OCL is a scripting language for managing job flows, file operations, and program execution on these systems. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and list the tables or files used.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program <code>BI921P</code> appears to manage a job related to a \"Product Tax Master List.\" Here\u2019s a step-by-step breakdown of the process based on the provided code:</p> <ol> <li>Header and Metadata:</li> <li>The file starts with a comment: <code>** PRODUCT TAX MASTER LIST **</code>, indicating the purpose of the program, likely related to managing or processing a product tax master list.</li> <li> <p>The next comment, <code>// SCPROCP ,,,,,,,,?9?</code>, suggests a reference to a procedure or job step with a placeholder <code>?9?</code>, which is likely a parameter or variable replaced at runtime (e.g., a job number, library, or specific identifier).</p> </li> <li> <p>Initialize Environment:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>: This command clears all local variables or sets them to blank, ensuring a clean environment for the job execution. It prevents residual data from previous runs from affecting the current job.</p> </li> <li> <p>System Compliance Check:</p> </li> <li> <p><code>// GSY2K</code>: This likely refers to a system check or configuration for Year 2000 (Y2K) compliance, ensuring date-related processing is handled correctly. It may invoke a system-level routine or set a flag for date formatting.</p> </li> <li> <p>Load Program:</p> </li> <li> <p><code>// LOAD BI921P</code>: This command loads the <code>BI921P</code> program into memory for execution. The program name suggests it\u2019s the main RPG (Report Program Generator) program responsible for the core logic of processing the product tax master list.</p> </li> <li> <p>File Specification:</p> </li> <li> <p><code>// FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHR</code>:</p> <ul> <li>Specifies a file named <code>BICONT</code> to be used by the program.</li> <li><code>LABEL-?9?BICONT</code> indicates the file\u2019s label, where <code>?9?</code> is a placeholder for a dynamic value (e.g., a library or prefix).</li> <li><code>DISP-SHR</code> (Disposition: Shared) means the file is opened in shared mode, allowing multiple jobs or processes to access it concurrently without exclusive locking.</li> </ul> </li> <li> <p>Run the Program:</p> </li> <li> <p><code>// RUN</code>: Executes the loaded <code>BI921P</code> program. This is where the RPG program\u2019s logic (not shown in the OCL) processes the data, likely generating or updating the product tax master list.</p> </li> <li> <p>Conditional Job Control:</p> </li> <li><code>// IF ?L'129,6'?/CANCEL GOTO END</code>:<ul> <li>Checks a condition based on a local variable or system parameter at position 129, character 6 (likely a status code or flag).</li> <li>If the condition evaluates to <code>CANCEL</code>, the job branches to the <code>END</code> tag, terminating the job.</li> <li>This acts as a safety check to abort the job if a specific error or condition is met.</li> </ul> </li> <li><code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,BI921,,,,,,,,,?9?</code>:<ul> <li>Checks another condition at position 120, character 1, for a value of <code>Y</code>.</li> <li>If true, the job is submitted to a job queue (<code>JOBQ</code>) in the library specified by <code>?CLIB?</code>, running the program <code>BI921</code> with parameters (including <code>?9?</code> as a placeholder).</li> <li>This suggests the job can be queued for asynchronous execution under certain conditions.</li> </ul> </li> <li> <p><code>// ELSE BI921 ,,,,,,,,?9?</code>:</p> <ul> <li>If the condition at position 120,1 is not <code>Y</code>, the <code>BI921</code> program is executed directly (synchronously) with the <code>?9?</code> parameter.</li> <li>The commas indicate placeholders for additional parameters that may be optional or defaulted.</li> </ul> </li> <li> <p>End of Job:</p> </li> <li><code>// TAG END</code>: Marks the <code>END</code> label, where the job jumps if the <code>CANCEL</code> condition is met.</li> <li><code>// LOCAL BLANK-*ALL</code>: Clears local variables again, ensuring no residual data remains after job completion.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly references the following external program: - BI921: This is the main RPG program executed or queued by the OCL script. It\u2019s loaded via <code>// LOAD BI921P</code> and referenced in the conditional job queue (<code>JOBQ ?CLIB?,BI921</code>) or direct execution (<code>BI921 ,,,,,,,,?9?</code>).</p> <p>No other external programs are explicitly mentioned in the OCL code.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following file: - BICONT: Specified in <code>// FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHR</code>. This is likely a data file (table) containing product tax information or related data processed by the <code>BI921</code> program. The <code>?9?</code> in the label suggests a dynamic prefix or library name.</p> <p>No additional files or tables are explicitly mentioned in the OCL code. However, the RPG program <code>BI921</code> may reference additional files or tables internally, which are not visible in the OCL script.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment, checks for Y2K compliance, loads the <code>BI921P</code> program, specifies the <code>BICONT</code> file, runs the program, and uses conditional logic to either queue or execute <code>BI921</code> based on system parameters. It includes error checking to cancel the job if needed and cleans up variables at the end.</li> <li>External Programs Called: <code>BI921</code> (RPG program).</li> <li>Tables/Files Used: <code>BICONT</code> (data file with a dynamic label).</li> </ul> <p>If you have the RPG source code for <code>BI921</code> or additional context about the system (e.g., parameter values for <code>?9?</code> or <code>?CLIB?</code>), I can provide a more detailed analysis of the program\u2019s logic or file interactions. Let me know if you\u2019d like me to search for related information or analyze further!</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/","title":"BI921P RPG36","text":"<p>The provided document, <code>BI921P.rpg36.txt</code>, is an RPG (Report Program Generator) program written for an IBM System/36 or AS/400 environment. This program, <code>BI921P</code>, is called from the OCL program <code>BI921P.ocl36.txt</code> (previously analyzed) and is responsible for processing a \"Product Tax Master List.\" Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the RPG source code.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>BI921P</code> handles user input for company selection and job queue settings, validates the input, and interacts with a file to prepare data for the product tax master list. Here\u2019s a detailed breakdown of the process steps, derived from the RPG code:</p> <ol> <li>Program Initialization (Header and File Definitions):</li> <li>Line 0002 (H-Spec): The header specification (<code>H    P064</code>) defines program attributes, such as <code>P064</code> for program identification and <code>B</code> for batch mode. The program name is <code>BI921P</code>.</li> <li>Line 0004-0005 (F-Specs):<ul> <li><code>SCREEN</code>: Defines a workstation file (<code>WORKSTN</code>) for interactive screen input/output, with a record length of 500 bytes, used for user prompts.</li> <li><code>BICONT</code>: Defines a disk file (<code>DISK</code>) with input (<code>I</code>) and update (<code>F</code>) capabilities, 256 bytes per record, indexed (<code>L</code>), with 2 access paths (<code>2AI</code>) and 2 keys (<code>2</code>).</li> </ul> </li> <li>Line 0006-0007 (E-Specs):<ul> <li><code>COM</code>: An array of 5 elements, each 40 bytes, used to store error messages (defined in the <code>COM</code> table at the end).</li> <li><code>DCO</code>: An array of 10 elements, each 35 bytes, used to store company codes and names retrieved from <code>BICONT</code>.</li> </ul> </li> <li> <p>Line 0008-0027 (I-Specs):</p> <ul> <li>Defines input formats for <code>SCREEN</code> (format <code>BI921PS1</code>) and <code>BICONT</code>.</li> <li><code>SCREEN</code> input fields: <code>KYALCO</code> (company selection, e.g., 'ALL' or 'CO'), <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (company numbers), <code>KYJOBQ</code> (job queue flag, 'Y' or 'N'), <code>KYCOPY</code> (number of copies), and <code>KYCANC</code> (cancel flag).</li> <li><code>BICONT</code> input fields: <code>BCDEL</code> (delete flag), <code>BCCO</code> (company code), <code>BCNAME</code> (company name).</li> <li><code>UDS</code> (User Data Structure) maps fields from positions 111-134, mirroring screen input fields for program control.</li> </ul> </li> <li> <p>Main Program Logic (C-Specs):</p> </li> <li>Line 0030-0034: Initializes variables:<ul> <li>Clears <code>MSG</code> (error message) to blanks.</li> <li>Turns off indicators 51, 52, 53, 54, 81, and 90, which control screen display and error conditions.</li> </ul> </li> <li>Line 0035-0037: For key group <code>KG</code> (likely a control condition), sets <code>KYCANC</code> to 'CANCEL' and turns off indicators 01 and 09, preparing for potential job cancellation.</li> <li>Line 0038-0039: If indicator 09 is on (initial call or specific condition), executes the <code>ONETIM</code> subroutine to initialize data.</li> <li>Line 0041: If indicator 01 is on (screen input received), executes the <code>S1</code> subroutine to validate input and process data.</li> <li> <p>Line 0043: Defines an <code>END</code> tag, marking the end of the main program logic.</p> </li> <li> <p>ONETIM Subroutine (Lines 0046-0066):</p> </li> <li>Purpose: Initializes data by reading the <code>BICONT</code> file and populating the <code>DCO</code> array with company codes and names.</li> <li> <p>Steps:</p> <ul> <li>Clears <code>DCO</code> array to blanks (<code>MOVEL*BLANKS DCO</code>).</li> <li>Initializes counter <code>X</code> to 1 and <code>BCLIM</code> (limit) to 00.</li> <li>Sets the file cursor to the beginning of <code>BICONT</code> using <code>BCLIM</code> (<code>SETLLBICONT</code>).</li> <li>Reads <code>BICONT</code> records in a loop (<code>READ BICONT</code>):</li> <li>If end-of-file (indicator 10), branches to <code>ENDONE</code>.</li> <li>If <code>BCDEL</code> (delete flag) is 'D' (indicating a deleted record), skips to the next record (<code>AGNONE</code>).</li> <li>Moves <code>BCCO</code> (company code) and <code>BCNAME</code> (company name) to <code>DCO</code> array at index <code>X</code>.</li> <li>Increments <code>X</code> and checks if <code>X</code> reaches 10; if not, continues reading (<code>GOTO AGNONE</code>).</li> <li>Sets defaults: <code>KYALCO</code> to 'ALL', <code>KYJOBQ</code> to 'N', and <code>KYCOPY</code> to 01.</li> <li>Ends the subroutine (<code>ENDSR</code>).</li> </ul> </li> <li> <p>S1 Subroutine (Lines 0068-0127):</p> </li> <li>Purpose: Validates user input from the <code>SCREEN</code> file and checks company numbers against <code>BICONT</code>.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Selection (Lines 0072-0088):</li> <li>Checks if <code>KYALCO</code> is 'ALL' or 'CO':<ul> <li>If neither, sets indicators 81 and 90, moves error message <code>COM,1</code> (\"SECOND ENTRY MUST BE 'CO' OR 'ALL'\") to <code>MSG</code>, and exits (<code>GOTO ENDS1</code>).</li> </ul> </li> <li>If <code>KYALCO</code> is 'CO', checks if <code>KYCO1</code>, <code>KYCO2</code>, and <code>KYCO3</code> are all 00 (no companies entered):<ul> <li>If true, sets indicators 81, 90, and 51, moves error message <code>COM,2</code> (\"IF CO, THEN ENTER VALID COMPANIES\") to <code>MSG</code>, and exits.</li> </ul> </li> <li>If <code>KYALCO</code> is 'ALL', checks if any of <code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code> are non-zero:<ul> <li>If true, sets indicators 81, 90, and 51, moves error message <code>COM,3</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\") to <code>MSG</code>, and exits.</li> </ul> </li> <li>Validate Company Numbers (Lines 0093-0114):</li> <li>If <code>KYALCO</code> is 'CO' (indicator 10), validates each non-zero company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>):<ul> <li>Uses <code>CHAIN</code> to search <code>BICONT</code> for the company number.</li> <li>If not found (indicator 10), sets error indicators (81, 90, 51/52/53), moves error message <code>COM,4</code> (\"INVALID COMPANY NUMBER\") to <code>MSG</code>, and exits.</li> </ul> </li> <li>Validate Job Queue Selection (Lines 0117-0123):</li> <li>Checks if <code>KYJOBQ</code> is 'Y', 'N', or blank:<ul> <li>If invalid, sets indicators 81, 90, and 54, moves error message <code>COM,5</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\") to <code>MSG</code>, and exits.</li> </ul> </li> <li>Validate Number of Copies (Lines 0125-0126):</li> <li>If <code>KYCOPY</code> is 00, sets it to 01 (default minimum).</li> <li>Ends the subroutine (<code>ENDS1</code>).</li> </ul> </li> <li> <p>Output to Screen (Lines 0130-0139):</p> </li> <li>Defines the output format for <code>SCREEN</code> when indicator 81 is on (error or display condition).</li> <li>Writes to format <code>BI921PFM</code> with fields: <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>DCO</code> (company data), <code>KYJOBQ</code>, <code>KYCOPY</code>, and <code>MSG</code> (error message).</li> <li>Displays the screen with user inputs and any error messages for correction.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The RPG program enforces the following business rules, as defined in the validation logic and the <code>COM</code> table at the end of the code:</p> <ol> <li>Company Selection Rule:</li> <li>The <code>KYALCO</code> field must be either 'ALL' (process all companies) or 'CO' (process specific companies).</li> <li> <p>Error Message (COM,1): \"SECOND ENTRY MUST BE 'CO' OR 'ALL'\" is displayed if <code>KYALCO</code> is neither.</p> </li> <li> <p>Company Number Input Rules:</p> </li> <li>If <code>KYALCO</code> is 'CO', at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be entered (non-zero).<ul> <li>Error Message (COM,2): \"IF CO, THEN ENTER VALID COMPANIES\" is displayed if all company numbers are 00.</li> </ul> </li> <li> <p>If <code>KYALCO</code> is 'ALL', no company numbers should be entered (all must be 00).</p> <ul> <li>Error Message (COM,3): \"IF ALL, THEN DO NOT ENTER COMPANIES\" is displayed if any company number is non-zero.</li> </ul> </li> <li> <p>Company Number Validation:</p> </li> <li> <p>Each non-zero company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) must exist in the <code>BICONT</code> file.</p> <ul> <li>Error Message (COM,4): \"INVALID COMPANY NUMBER\" is displayed if a company number is not found in <code>BICONT</code>.</li> </ul> </li> <li> <p>Job Queue Selection:</p> </li> <li> <p>The <code>KYJOBQ</code> field must be 'Y' (submit to job queue) or 'N' (run interactively).</p> <ul> <li>Error Message (COM,5): \"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\" is displayed if <code>KYJOBQ</code> is invalid (e.g., blank or another value).</li> </ul> </li> <li> <p>Number of Copies:</p> </li> <li>The <code>KYCOPY</code> field (number of copies for the report) must be at least 01. If 00 is entered, it is automatically set to 01.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The RPG program uses the following files: 1. SCREEN:    - Type: Workstation file (<code>WORKSTN</code>).    - Purpose: Handles interactive input/output for user prompts and error messages.    - Format: <code>BI921PS1</code> (input) and <code>BI921PFM</code> (output).    - Fields: <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCANC</code>, <code>DCO</code> (output), <code>MSG</code> (output).</p> <ol> <li>BICONT:</li> <li>Type: Disk file (<code>DISK</code>), input and update capable, indexed with 2 keys.</li> <li>Purpose: Stores company data (codes and names) used for validation and populating the <code>DCO</code> array.</li> <li> <p>Fields: <code>BCDEL</code> (delete flag), <code>BCCO</code> (company code), <code>BCNAME</code> (company name).</p> </li> <li> <p>COM (Array/Table):</p> </li> <li>Type: Program-defined array (5 elements, 40 bytes each).</li> <li>Purpose: Stores error messages for display on the screen.</li> <li>Content (defined at the end):<ul> <li><code>COM,1</code>: \"SECOND ENTRY MUST BE 'CO' OR 'ALL'\"</li> <li><code>COM,2</code>: \"IF CO, THEN ENTER VALID COMPANIES\"</li> <li><code>COM,3</code>: \"IF ALL, THEN DO NOT ENTER COMPANIES\"</li> <li><code>COM,4</code>: \"INVALID COMPANY NUMBER\"</li> <li><code>COM,5</code>: \"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\"</li> </ul> </li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs (no <code>CALL</code> operations are present in the C-Specs). However: - The OCL program (<code>BI921P.ocl36.txt</code>) references a program named <code>BI921</code>, which is likely the compiled version of this RPG program (<code>BI921P</code>). The OCL may queue or execute <code>BI921</code> based on the <code>KYJOBQ</code> value set by this program. - No other external programs are called within the RPG code itself.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/BI921P%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes by clearing variables and reading the <code>BICONT</code> file to populate company data (<code>ONETIM</code> subroutine). It then validates user input from the <code>SCREEN</code> file (<code>S1</code> subroutine), checking company selection (<code>KYALCO</code>), company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>), job queue flag (<code>KYJOBQ</code>), and number of copies (<code>KYCOPY</code>). Invalid inputs trigger error messages displayed on the screen. The program prepares data for the product tax master list but does not generate the report itself (likely handled by <code>BI921</code> in a subsequent step).</li> <li>Business Rules:</li> <li><code>KYALCO</code> must be 'ALL' or 'CO'.</li> <li>If 'CO', valid company numbers must be entered; if 'ALL', no company numbers should be entered.</li> <li>Company numbers must exist in <code>BICONT</code>.</li> <li><code>KYJOBQ</code> must be 'Y' or 'N'.</li> <li><code>KYCOPY</code> defaults to 01 if 00.</li> <li>Tables/Files Used: <code>SCREEN</code> (workstation file), <code>BICONT</code> (disk file), <code>COM</code> (error message array).</li> <li>External Programs Called: None directly in the RPG code; <code>BI921</code> is referenced in the OCL, likely the compiled RPG program.</li> </ul> <p>If you have additional details (e.g., the logic of <code>BI921</code> or related programs, or specific data in <code>BICONT</code>), I can provide further analysis. Let me know if you\u2019d like me to search for related information or clarify specific aspects!</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/","title":"Summary BI921P OCL","text":"<p>The call stack consists of two OCL programs (<code>BI921P.ocl36.txt</code> and <code>BI921.ocl36.txt</code>) and two RPG programs (<code>BI921P.rpg36.txt</code> and <code>BI921.rpg36.txt</code>) that together implement the workflow for generating a \"Product Tax Master List\" on an IBM System/36 or AS/400 system. Below, I\u2019ll identify the use cases implemented by this call stack and then provide a concise function requirement document for one of the use cases, reimagined as a large function that processes inputs directly rather than relying on interactive screen input.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#use-cases-implemented-by-the-call-stack","title":"Use Cases Implemented by the Call Stack","text":"<p>The call stack implements the following use cases for generating and managing the Product Tax Master List:</p> <ol> <li>Generate Product Tax Master List for All Companies:</li> <li>Description: Produces a report listing tax details (state, product code, delivered code, and up to 10 tax codes) for all companies in the <code>BICONT</code> file, sorted by company number, state, product code, and delivered code.</li> <li>Components Involved:<ul> <li><code>BI921P.ocl36.txt</code>: Validates user input, allowing <code>KYALCO='ALL'</code> to select all companies and sets <code>KYJOBQ</code> to determine if the job runs interactively or in a job queue.</li> <li><code>BI921P.rpg36.txt</code>: Prompts for and validates input (<code>KYALCO='ALL'</code>, no company numbers entered, <code>KYJOBQ='Y' or 'N'</code>, <code>KYCOPY\u22651</code>), retrieves company names from <code>BICONT</code> for display, and sets parameters for the OCL.</li> <li><code>BI921.ocl36.txt</code>: Sets a flag (<code>IAC</code> or <code>I*C</code>) based on <code>KYALCO</code>, sorts the <code>BIPRTX</code> file into <code>BI921</code> using <code>#GSORT</code> (no company filtering for 'ALL'), and runs <code>BI921</code> to generate the report.</li> <li><code>BI921.rpg36.txt</code>: Reads sorted <code>BIPRTX</code> data, retrieves company names from <code>BICONT</code> and product descriptions from <code>GSPROD</code>, and prints the report with headers (company, date, time, page) and details (state, product code, description, delivered code, tax codes).</li> </ul> </li> <li>Inputs: Selection of all companies (<code>KYALCO='ALL'</code>), job queue flag (<code>KYJOBQ</code>), number of copies (<code>KYCOPY</code>).</li> <li> <p>Output: A printed report listing tax details for all companies.</p> </li> <li> <p>Generate Product Tax Master List for Specific Companies:</p> </li> <li>Description: Produces a report for up to three user-specified company numbers, validated against <code>BICONT</code>, sorted by company number, state, product code, and delivered code.</li> <li>Components Involved:<ul> <li><code>BI921P.ocl36.txt</code>: Validates input, ensuring <code>KYALCO='CO'</code> with valid company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>), and sets job queue and copy parameters.</li> <li><code>BI921P.rpg36.txt</code>: Validates company numbers against <code>BICONT</code>, ensures at least one valid company is entered, and handles error messages for invalid inputs.</li> <li><code>BI921.ocl36.txt</code>: Filters <code>BIPRTX</code> records by specified company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) during the <code>#GSORT</code> operation and runs <code>BI921</code> for the report.</li> <li><code>BI921.rpg36.txt</code>: Processes filtered <code>BIPRTX</code> data, retrieves company names and product descriptions, and generates the report for the selected companies.</li> </ul> </li> <li>Inputs: Specific company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>), <code>KYALCO='CO'</code>, job queue flag (<code>KYJOBQ</code>), number of copies (<code>KYCOPY</code>).</li> <li> <p>Output: A printed report listing tax details for the specified companies.</p> </li> <li> <p>Validate and Prepare Input Parameters for Report Generation:</p> </li> <li>Description: Collects and validates user inputs (company selection, job queue option, number of copies) to ensure correct parameters are passed to the report generation process.</li> <li>Components Involved:<ul> <li><code>BI921P.ocl36.txt</code>: Checks for cancellation conditions and queues or runs <code>BI921</code> based on <code>KYJOBQ</code>.</li> <li><code>BI921P.rpg36.txt</code>: Prompts for and validates <code>KYALCO</code> ('ALL' or 'CO'), company numbers (valid in <code>BICONT</code> if 'CO'), <code>KYJOBQ</code> ('Y' or 'N'), and <code>KYCOPY</code> (\u22651), displaying error messages for invalid inputs.</li> </ul> </li> <li>Inputs: <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>.</li> <li> <p>Output: Validated parameters passed to the OCL for further processing.</p> </li> <li> <p>Sort Tax Data for Reporting:</p> </li> <li>Description: Sorts the product tax data by company number, state, product code, and delivered code, filtering by specific companies if required.</li> <li>Components Involved:<ul> <li><code>BI921.ocl36.txt</code>: Uses <code>#GSORT</code> to sort <code>BIPRTX</code> into <code>BI921</code>, applying filters for company numbers if <code>KYALCO='CO'</code>.</li> </ul> </li> <li>Inputs: <code>BIPRTX</code> file, company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) if filtering.</li> <li>Output: Sorted <code>BI921</code> file for use by the report program.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Below is a function requirement document for the primary use case: Generate Product Tax Master List (covering both \"All Companies\" and \"Specific Companies\"), reimagined as a single function that takes inputs directly rather than using interactive screen prompts. This consolidates the core functionality of the call stack, focusing on business requirements and necessary calculations.</p> <p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#function-requirement-document-generate-product-tax-master-list","title":"Function Requirement Document: Generate Product Tax Master List","text":""},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#function-name","title":"Function Name","text":"<p><code>GenerateProductTaxMasterList</code></p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#purpose","title":"Purpose","text":"<p>Generate a formatted Product Tax Master List report, listing tax details (state, product code, description, delivered code, and up to 10 tax codes) for all companies or specific user-selected companies, sorted by company number, state, product code, and delivered code.</p>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>companySelection (String): Either 'ALL' (include all companies) or 'CO' (specific companies).</li> <li>companyNumbers (Array of Strings, max 3): Company numbers (2 digits each, e.g., '01', '02', '03') when <code>companySelection='CO'</code>. Empty or null if 'ALL'.</li> <li>jobQueue (String): 'Y' (run in job queue) or 'N' (run interactively).</li> <li>numCopies (Integer): Number of report copies (minimum 1).</li> <li>taxDataFile (File): Input file containing tax data (equivalent to <code>BIPRTX</code>).</li> <li>companyDataFile (File): File containing company data (equivalent to <code>BICONT</code>).</li> <li>productDataFile (File): File containing product data (equivalent to <code>GSPROD</code>).</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>report (File): A formatted report file (equivalent to <code>PRINT</code>) containing the Product Tax Master List, grouped by company with headers and detail lines.</li> <li>errorMessage (String, optional): Error message if validation fails (e.g., invalid company number).</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>companySelection</code> is 'ALL' or 'CO'. If invalid, return error: \"Company selection must be 'ALL' or 'CO'.\"</li> <li>If <code>companySelection='CO'</code>, validate that at least one <code>companyNumbers</code> entry is non-zero and exists in <code>companyDataFile</code>. If invalid, return error: \"Invalid company number\" or \"At least one valid company must be entered.\"</li> <li>If <code>companySelection='ALL'</code>, ensure all <code>companyNumbers</code> are empty or zero. If not, return error: \"No company numbers allowed when selecting 'ALL'.\"</li> <li>Ensure <code>jobQueue</code> is 'Y' or 'N'. If invalid, return error: \"Job queue must be 'Y' or 'N'.\"</li> <li> <p>If <code>numCopies &lt; 1</code>, set to 1.</p> </li> <li> <p>Sort Tax Data:</p> </li> <li>Read <code>taxDataFile</code> (64-byte records: delete code, company number, state, product code, delivered code, 10 tax codes).</li> <li>Filter out records where delete code is 'D'.</li> <li>If <code>companySelection='CO'</code>, filter records where company number matches any in <code>companyNumbers</code>.</li> <li>Sort records by:<ul> <li>Company number (positions 2-3).</li> <li>State (positions 4-5).</li> <li>Product code (positions 6-9).</li> <li>Delivered code (position 10).</li> </ul> </li> <li> <p>Store sorted data in a temporary file.</p> </li> <li> <p>Generate Report:</p> </li> <li>For each unique company number in the sorted data:<ul> <li>Retrieve company name from <code>companyDataFile</code> using company number. If not found, use blank.</li> <li>Print header: company name, date (MMDDYY), time (HHMMSS), page number, and title \"PRODUCT TAX MASTER LIST.\"</li> </ul> </li> <li>For each record:<ul> <li>Retrieve product description from <code>productDataFile</code> using company number and product code. If not found, use blank; if product code is 'MISC', use \"MISCELLANEOUS INVOICE LINES.\"</li> <li>Print detail line: state, product code, product description (first 20 characters), delivered code, tax codes 1-10.</li> </ul> </li> <li>Repeat for <code>numCopies</code> copies.</li> <li> <p>Output to a printer-compatible file.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>jobQueue='Y'</code>, queue the report generation for asynchronous execution.</li> <li>If <code>jobQueue='N'</code>, execute immediately.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Selection:</li> <li>'ALL' includes all non-deleted companies in <code>companyDataFile</code>.</li> <li>'CO' requires 1-3 valid company numbers (2 digits, existing in <code>companyDataFile</code>).</li> <li>If 'CO', at least one company number must be valid and non-zero.</li> <li> <p>If 'ALL', no company numbers may be specified.</p> </li> <li> <p>Data Filtering:</p> </li> <li>Exclude tax records where delete code is 'D'.</li> <li> <p>For 'CO', include only records matching specified company numbers.</p> </li> <li> <p>Product Description:</p> </li> <li>Use <code>productDataFile</code> for descriptions. If not found, use blank.</li> <li> <p>For product code 'MISC', use \"MISCELLANEOUS INVOICE LINES\" if no description is found.</p> </li> <li> <p>Tax Codes:</p> </li> <li>Support up to 10 tax codes per product (4 bytes each).</li> <li> <p>Print all tax codes in the report, even if blank.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Group by company number, with headers on company change or page overflow.</li> <li>Include date (MMDDYY), time (HHMMSS), and incremental page number.</li> <li> <p>Detail lines include state (2 chars), product code (4 chars), description (20 chars), delivered code (1 char), and tax codes (4 chars each).</p> </li> <li> <p>Copies:</p> </li> <li>Minimum 1 copy; default to 1 if input is 0 or negative.</li> </ol>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date and Time: Capture system date (MMDDYY) and time (HHMMSS) for report headers.</li> <li>Page Number: Increment per company change or page overflow (132 characters per line, assuming 66 lines per page).</li> <li>Sorting: Multi-level sort on company number (2 bytes), state (2 bytes), product code (4 bytes), delivered code (1 byte).</li> <li>Key Construction: Combine company number and product code for <code>productDataFile</code> lookup (6-byte key).</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for validation failures (e.g., invalid <code>companySelection</code>, <code>companyNumbers</code>, or <code>jobQueue</code>).</li> <li>Log errors for missing company or product data but continue processing with blanks.</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (<code>taxDataFile</code>, <code>companyDataFile</code>, <code>productDataFile</code>) are pre-populated and accessible.</li> <li>Output is a printer-compatible file (132 bytes per line).</li> <li>System supports queuing for <code>jobQueue='Y'</code>.</li> </ul>"},{"location":"order-entry/BI921P%20Prod%20Tax%20File%20Print/Summary%20BI921P%20OCL/#notes","title":"Notes","text":"<ul> <li>Use Case Selection: The function requirement document focuses on the primary use case (Generate Product Tax Master List) as it encompasses both \"All Companies\" and \"Specific Companies,\" combining the core functionality of the call stack. The other use cases (validation and sorting) are subsumed as steps within this function.</li> <li>Non-Interactive Design: The function assumes direct input parameters, replacing the interactive screen input from <code>BI921P.rpg36.txt</code>. This aligns with the requirement to treat the use case as a large function.</li> <li>Commented Files: The <code>GSTABL</code> file (commented out in <code>BI921.rpg36.txt</code> and <code>BI921.ocl36.txt</code>) is excluded, assuming <code>GSPROD</code> is the active product file per modification <code>JK01</code>.</li> <li>Error Messages: The function retains the error message logic from <code>BI921P.rpg36.txt</code> but applies it to input validation.</li> </ul> <p>If you need a function requirement document for the other use cases (e.g., validation or sorting as standalone functions) or further details, let me know! I can also refine the document or provide additional artifacts (e.g., pseudocode or sample report format).</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928%20RPGLE/","title":"GS928 RPGLE","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928%20RPGLE/#process-steps-of-the-rpg-program-gs928","title":"Process Steps of the RPG Program (GS928)","text":"<p>The program GS928 is an interactive RPG III program for maintaining or inquiring about Product/Container entries on an IBM i (AS/400) system. It is designed to be called from another program (e.g., GS928P, as referenced in the query) and operates in either maintenance (MNT) or inquiry (INQ) mode based on input parameters. The core functionality involves displaying a single-panel format (FMT01) for viewing or editing a specific Product/Container record, validating input, and performing create/update operations on the database if in MNT mode. It handles user input via function keys, manages errors/messages, and applies field protection rules. Note that a second format (FMT02) is commented out, suggesting it may be incomplete or unused. The program does not use subfiles; it's a simple panel-based entry/inquiry screen.</p> <p>The high-level process flow is as follows:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: <code>p$co</code> (company), <code>p$prod</code> (product code), <code>p$cntr</code> (container code), <code>p$mode</code> (MNT for maintenance or INQ for inquiry), <code>p$fgrp</code> (file group: 'G' or 'Z' to determine file overrides), and <code>p$flag</code> (output flag to indicate success).</li> <li>Moves input parameters to display fields (<code>f$co</code>, <code>f$prod</code>, <code>f$cntr</code>).</li> <li>Sets up work fields, key lists (e.g., for chaining to GSPRCT and GSPROD), message handling fields, and default values.</li> <li>Defines constants for function keys (e.g., F3=Exit (but not used), F4=Prompt, F12=Previous/Exit).</li> <li> <p>Prepares output parameters and clears flags.</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides using QCMDEXC based on <code>p$fgrp</code> (e.g., overrides to GGS files for 'G' or ZGS files for 'Z').</li> <li>Opens files: GSPRCT (for update/add), BICONT, GSPROD, and GSCNTR1.</li> <li>Chains to BICONT to validate/fetch company (though no error if not found).</li> <li>Chains to GSPROD to fetch product description (<code>tpdesc</code> to <code>f$prds</code>).</li> <li> <p>Chains to GSCNTR1 to fetch container description (<code>tcdesc</code> to <code>f$ctds</code>).</p> </li> <li> <p>Retrieve Data for Passed Parameters (RTVDTA Subroutine):</p> </li> <li>Chains to GSPRCT using the passed keys (<code>p$co</code>, <code>p$prod</code>, <code>p$cntr</code>).</li> <li>If record not found, clears the record buffer and sets <code>w$exists</code> to *OFF (indicating a create scenario in MNT mode).</li> <li>If found, sets <code>w$exists</code> to *ON.</li> <li>Sets the screen header (<code>c$hdr1</code>) based on mode: \"Product/Container Entry Maintenance\" for MNT or \"Product/Container Inquiry\" for INQ.</li> <li> <p>Applies global field protection (IN70=ON) in INQ mode.</p> </li> <li> <p>Process Panel Formats (SRFMT Subroutine - Main Processing Loop):</p> </li> <li>Clears the screen.</li> <li>Initializes panel fields from database (F01MOV subroutine, which also calls F01EDT to validate but clears errors if any).</li> <li>Sets initial format to 'FMT01'.</li> <li>Enters a loop to handle user interaction:<ul> <li>Displays message subfile if errors/messages exist (WRTMSG subroutine); otherwise, clears the screen.</li> <li>Sets IN19=OFF (no format change).</li> <li>Displays the format (EXFMT FMT01) after applying protection (F01PRO subroutine).</li> <li>Clears error indicators (IN50-IN69).</li> <li>Clears cursor position variables (<code>row</code>, <code>col</code>).</li> <li>Clears message subfile if displayed (CLRMSG subroutine).</li> <li>Processes the current format (F01SR subroutine):</li> <li>Handles function keys:<ul> <li>F4: Calls PROMPT subroutine for field prompting (but the subroutine is empty/no-op in the provided code; no actual prompting occurs).</li> <li>F10: Positions cursor to home (clears <code>row</code> and <code>col</code>).</li> <li>F12: Exits the loop (sets <code>fmtagn</code>=*OFF).</li> </ul> </li> <li>In INQ mode, skips to next format determination (F01NXT).</li> <li>On ENTER (default case):<ul> <li>Edits input (F01EDT subroutine).</li> <li>If no errors (IN50=OFF) and in MNT mode, updates the database (UPDDBF subroutine).</li> <li>Determines next format (F01NXT subroutine; but since FMT02 is commented, it effectively exits the loop if no input change).</li> </ul> </li> </ul> </li> <li> <p>Loops until exit (F12) or no further actions (e.g., no input change in IN19=OFF).</p> </li> <li> <p>Edit Format Input (F01EDT Subroutine):</p> </li> <li>Validates that description line 1 (<code>ptdes1</code>) is not blank; if blank, adds error message 'ERR0012' and sets IN50/IN51=*ON.</li> <li> <p>In INQ mode, clears all errors and messages.</p> </li> <li> <p>Format Protection Schemes (F01PRO Subroutine):</p> </li> <li>Clears protection indicators (IN70-IN74=*OFF).</li> <li>In INQ mode (not MNT), protects all fields (IN70-IN73=*ON).</li> <li> <p>In MNT mode, if record exists (<code>w$exists</code>=ON), protects key fields (IN71=*ON).</p> </li> <li> <p>Update Database (UPDDBF Subroutine):</p> </li> <li>Saves current record buffer to <code>svds</code>.</li> <li>Chains to GSPRCT.</li> <li>If record found:<ul> <li>If fields have changed (<code>svds</code> != current buffer), restores from <code>svds</code> and updates the record.</li> <li>Forces end-of-data (FEOD) if no change.</li> </ul> </li> <li>If not found (create scenario):<ul> <li>Clears record, restores from <code>svds</code>, sets keys, sets delete flag <code>ptdel</code>='A' (active), and writes new record.</li> </ul> </li> <li> <p>Sets output <code>p$flag</code>='1' on success (create or update).</p> </li> <li> <p>Initialize Format Fields (F01MOV Subroutine):</p> </li> <li> <p>Calls F01EDT for initial validation but clears errors if any.</p> </li> <li> <p>Error and Message Handling:</p> </li> <li>Adds messages to program message queue (ADDMSG subroutine using QMHSNDPM).</li> <li>Writes/clears message subfile (WRTMSG and CLRMSG subroutines using QMHRMVPM).</li> <li> <p>Displays errors (e.g., blank description) and sets indicators for field highlighting.</p> </li> <li> <p>Program End:</p> <ul> <li>Closes all files.</li> <li>Sets INLR = ON and returns (with <code>p$flag</code> indicating if changes were made).</li> </ul> </li> </ol> <p>The program is straightforward for single-record maintenance/inquiry, with no subfile or multi-record handling. It assumes the calling program (e.g., GS928P) manages listing/browsing.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Mode-Specific Behavior:</li> <li>In MNT (maintenance) mode: Allows editing and saving (create/update). Key fields are protected if the record already exists (<code>w$exists</code>=*ON). Updates only if fields have changed.</li> <li> <p>In INQ (inquiry) mode: All fields are protected (IN70-IN73=*ON). No database updates; clears any errors for display-only.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Description line 1 (<code>ptdes1</code>) is required and cannot be blank (error 'ERR0012').</li> <li>Keys (company, product, container) are validated indirectly via chaining (descriptions fetched if exist), but no explicit errors if invalid (assumes caller validated).</li> <li> <p>New records are created with <code>ptdel</code>='A' (active status).</p> </li> <li> <p>Database Operations:</p> </li> <li>Create: Only if record not found; writes new with keys and 'A' status.</li> <li>Update: Only if record found and fields changed; no delete/reactivate logic here (handled elsewhere, e.g., GS9284).</li> <li> <p>No direct deletes; uses soft-delete flag <code>ptdel</code>.</p> </li> <li> <p>User Interface Rules:</p> </li> <li>Fields protected based on mode and existence.</li> <li>Headers change by mode.</li> <li>Function keys: F4 (prompting, but unimplemented), F10 (home cursor), F12 (exit/return to caller).</li> <li> <p>Errors displayed via message subfile; input changes tracked via *IN19.</p> </li> <li> <p>General:</p> </li> <li>File overrides ensure data separation ('G' vs. 'Z' groups, possibly for different environments/companies).</li> <li>Output flag <code>p$flag</code>='1' signals successful create/update to caller.</li> <li>No auditing/timestamps beyond what's in the file (e.g., no user/time stamps added here).</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following database files (PF for physical, LF for logical) and display file. Files are input-only unless noted, and are overridden based on <code>p$fgrp</code> (to GGS for 'G' or ZGS for 'Z'):</p> <ul> <li>GS928D: Display file (CF - control format, E - external). Used for workstation interaction (FMT01 panel and message subfile).</li> <li>GSPRCT: Primary file (UF A - update full procedural with add, E - externally described, K - keyed). Used for chaining, updating, and writing Product/Container records.</li> <li>BICONT: Input file (IF, E, K). Used to validate/fetch company details (chained but no data used beyond existence).</li> <li>GSPROD: Input file (IF, E, K). Used to fetch product description (with renamed field TPFIL5 to X@FIL5).</li> <li>GSCNTR1: Input file (IF, E, K). Used to fetch container description.</li> </ul> <p>All files are opened with USROPN and shared access controlled via overrides.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>This program does not call any external RPG or custom programs. It only uses system utilities (via CALL):</p> <ul> <li>QCMDEXC: Executes override commands for file redirection.</li> <li>QMHSNDPM: Sends messages to the program message queue.</li> <li>QMHRMVPM: Removes messages from the program message queue.</li> </ul> <p>Note: The PROMPT subroutine is present but empty (no actual calls to prompting programs like LGSPROD or LGSCNTR, unlike in GS928P).</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9284%20RPGLE/","title":"GS9284 RPGLE","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9284%20RPGLE/#process-steps-of-the-rpg-program-gs9284","title":"Process Steps of the RPG Program (GS9284)","text":"<p>The program GS9284 is an interactive RPG III program designed to handle the InActivate or ReActivate operations for Product/Container entries on an IBM i (AS/400) system. It is called from another program (e.g., GS928P, as referenced in the query) and operates on a single Product/Container record identified by input parameters (company, product, container). The program displays a window (ACTWDW) to confirm the InActivate or ReActivate action, updates the GSPRCT file accordingly, and returns a status flag to the caller. It uses a simple user interface with no subfile, focusing solely on toggling the <code>ptdel</code> field between 'A' (active) and 'I' (inactive).</p> <p>The high-level process flow is as follows:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: <code>p$co</code> (company), <code>p$prod</code> (product code), <code>p$cntr</code> (container code), <code>p$fgrp</code> (file group: 'G' or 'Z' for file overrides), and <code>p$flag</code> (output flag to indicate action: 'I' for InActivate, 'A' for ReActivate).</li> <li>Moves input parameters to display fields (<code>f$co</code>, <code>f$prod</code>, <code>f$cntr</code>).</li> <li>Sets up work fields, key lists (for chaining to GSPRCT), and message handling fields.</li> <li>Initializes the window loop flag (<code>winagn</code> = *ON) and message queue fields.</li> <li>Defines constants for function keys: F12 (exit), F22 (ReActivate), F23 (InActivate).</li> <li> <p>Prepares date validation parameters (though unused in this code).</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides using QCMDEXC based on <code>p$fgrp</code> (e.g., overrides to GSPRCT as GGS for 'G' or ZGS for 'Z').</li> <li> <p>Opens the GSPRCT file (update/add mode with USROPN).</p> </li> <li> <p>Retrieve Data (RTVDTA Subroutine):</p> </li> <li>Chains to GSPRCT using the passed keys (<code>f$co</code>, <code>f$prod</code>, <code>f$cntr</code>).</li> <li>If the record is found (IN99=OFF):<ul> <li>If <code>ptdel</code> = 'I' (inactive), sets the window header to \"Product/Cntr Entry ReActivate\" (<code>hdr(01)</code>), function key label to \"F22=ReActivate\" (<code>fky(01)</code>), and enables F22 (IN72=ON).</li> <li>Otherwise (active), sets the window header to \"Product/Cntr Entry InActivate\" (<code>hdr(02)</code>), function key label to \"F23=InActivate\" (<code>fky(02)</code>), and enables F23 (IN73=ON).</li> </ul> </li> <li> <p>No action if the record is not found (no error message; proceeds to display window).</p> </li> <li> <p>Process Window (PRCWDW Subroutine - Main Processing Loop):</p> </li> <li>Enters a loop controlled by <code>winagn</code>:<ul> <li>Displays the message subfile if errors/messages exist (WRTMSG subroutine); otherwise, clears it (MSGCLR).</li> <li>Displays the window format (EXFMT ACTWDW).</li> <li>Clears the message subfile if displayed (CLRMSG subroutine).</li> <li>Clears error indicators (IN50-IN69).</li> <li>Processes user input:</li> <li>F12: Exits the loop (<code>winagn</code> = *OFF), effectively canceling the operation.</li> <li>F22 or F23: <ul> <li>Calls WINEDT (which invokes CHKACT, though CHKACT is empty/no-op).</li> <li>If no errors (IN50=OFF), updates the database (WINUPD subroutine) and exits the loop.</li> </ul> </li> <li>Other (e.g., ENTER): Calls WINEDT (no-op since CHKACT is empty), loops again.</li> </ul> </li> <li> <p>Loops until F12 or a successful F22/F23 action.</p> </li> <li> <p>Edit Window Input (WINEDT and CHKACT Subroutines):</p> </li> <li>WINEDT calls CHKACT, but CHKACT is empty (no validation logic implemented).</li> <li> <p>No input fields are validated in the window; the program relies on the function key pressed (F22/F23).</p> </li> <li> <p>Update Database (WINUPD Subroutine):</p> </li> <li>Processes based on the function key:<ul> <li>F22 (ReActivate):</li> <li>Chains to GSPRCT.</li> <li>If record found and <code>ptdel</code> = 'I', sets <code>ptdel</code> = 'A' (active), updates the record, and sets <code>p$flag</code> = 'A'.</li> <li>No action if not found or not inactive.</li> <li>F23 (InActivate):</li> <li>Chains to GSPRCT.</li> <li>If record found and <code>ptdel</code> \u2260 'I', sets <code>ptdel</code> = 'I' (inactive), updates the record, and sets <code>p$flag</code> = 'I'.</li> <li>No action if not found or already inactive.</li> </ul> </li> <li> <p>No error messages are added if the chain fails or the status is inappropriate.</p> </li> <li> <p>Error and Message Handling:</p> </li> <li>Uses ADDMSG to send messages to the program message queue (QMHSNDPM), though no messages are explicitly added in this code.</li> <li>WRTMSG writes the message subfile; CLRMSG clears it (using QMHRMVPM).</li> <li> <p>No specific error handling (e.g., for invalid records or failed updates).</p> </li> <li> <p>Program End:</p> </li> <li>Closes all files.</li> <li>Sets INLR = ON and returns (with <code>p$flag</code> indicating 'A', 'I', or unchanged if no action).</li> </ol> <p>The program is minimal, focusing solely on toggling the active/inactive status of a Product/Container record via a confirmation window. It assumes the calling program (e.g., GS928P) validates the record\u2019s existence and appropriateness before calling.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9284%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Purpose:</li> <li>Toggles the <code>ptdel</code> field in GSPRCT between 'A' (active) and 'I' (inactive) based on user action (F22 for ReActivate, F23 for InActivate).</li> <li> <p>Returns a flag (<code>p$flag</code>) to indicate the action taken: 'A' for ReActivate, 'I' for InActivate, or unchanged (blank) if no update occurs.</p> </li> <li> <p>Validation Rules:</p> </li> <li>No explicit input validation (CHKACT is empty; no checks on input fields or record state beyond <code>ptdel</code>).</li> <li>For F22 (ReActivate): Only updates if the record exists and is currently inactive (<code>ptdel</code> = 'I').</li> <li>For F23 (InActivate): Only updates if the record exists and is not already inactive (<code>ptdel</code> \u2260 'I').</li> <li> <p>No error messages for invalid scenarios (e.g., record not found or wrong status); simply skips the update.</p> </li> <li> <p>Database Operations:</p> </li> <li>Updates the <code>ptdel</code> field in GSPRCT; no other fields are modified.</li> <li>No create or delete operations; only updates existing records.</li> <li> <p>Uses soft-delete logic (<code>ptdel</code> = 'I' for inactive, 'A' for active).</p> </li> <li> <p>User Interface Rules:</p> </li> <li>Displays a confirmation window (ACTWDW) with dynamic headers and function key labels:<ul> <li>If record is inactive: Shows \"Product/Cntr Entry ReActivate\" and enables F22.</li> <li>If active: Shows \"Product/Cntr Entry InActivate\" and enables F23.</li> </ul> </li> <li>Function keys:<ul> <li>F12: Cancels and exits without changes.</li> <li>F22: ReActivates the record (sets <code>ptdel</code> = 'A').</li> <li>F23: InActivates the record (sets <code>ptdel</code> = 'I').</li> </ul> </li> <li> <p>No cursor positioning logic (commented out).</p> </li> <li> <p>General:</p> </li> <li>File overrides ensure data separation ('G' vs. 'Z' groups, likely for different environments/companies).</li> <li>Assumes the calling program provides valid keys and checks for record validity.</li> <li>No auditing/timestamps (e.g., no user or date updates in the record).</li> <li>Minimal error handling; relies on caller for feedback (e.g., GS928P adds confirmation messages like \"has been InActivated\").</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9284%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, overridden based on <code>p$fgrp</code> (to GGS for 'G' or ZGS for 'Z'):</p> <ul> <li>GS9284D: Display file (CF - control format, E - external). Used for the confirmation window (ACTWDW) and message subfile.</li> <li>GSPRCT: Primary file (UF A - update full procedural with add, E - externally described, K - keyed). Used for chaining and updating the <code>ptdel</code> field.</li> </ul> <p>All files are opened with USROPN and shared access controlled via overrides. No additional validation files (e.g., BICONT, GSPROD, GSCNTR1) are used, unlike GS928 or GS928P.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9284%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external RPG or custom programs. It only uses system utilities (via CALL):</p> <ul> <li>QCMDEXC: Executes override commands for file redirection (GSPRCT to GGS or ZGS).</li> <li>QMHSNDPM: Sends messages to the program message queue (though no messages are sent in this code).</li> <li>QMHRMVPM: Removes messages from the program message queue.</li> </ul> <p>No additional programs (e.g., for prompting or validation) are called, making this a lightweight, focused utility for status toggling.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9285%20RPGLE/","title":"GS9285 RPGLE","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9285%20RPGLE/#process-steps-of-the-rpg-program-gs9285","title":"Process Steps of the RPG Program (GS9285)","text":"<p>The program GS9285 is a batch-oriented RPG III program designed to print a listing of Product/Container entries from the GSPRCT file on an IBM i (AS/400) system. It is called from another program (e.g., GS928P, as referenced in the query) and generates a formatted report to the QSYSPRT printer file. The program is straightforward, reading all records from GSPRCT sequentially and printing them with headers, handling page overflows, and applying file overrides based on the input parameter <code>p$fgrp</code> ('G' or 'Z'). It does not involve interactive user input or a display file, focusing solely on report generation.</p> <p>The high-level process flow is as follows:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives a single entry parameter: <code>p$fgrp</code> (file group: 'G' or 'Z' to determine file overrides).</li> <li>Sets the report header (<code>c$hdr1</code>) to \"Product/Container Listing by Co#/Prod/Cntr\" from <code>hdr(01)</code>.</li> <li>Sets the print overflow flag (<code>prtovr</code> = *ON) to ensure headers are printed initially.</li> <li>Calls the OPNTBL subroutine to apply file overrides and open the GSPRCT file.</li> <li> <p>Initializes date/time fields (<code>t#time</code>, <code>t#mdcy</code>, <code>t#hms</code>) for use in report headers.</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides for GSPRCT using QCMDEXC based on <code>p$fgrp</code>:<ul> <li>For 'G', overrides to GGS* files (e.g., GSPRCT to GGSPRCT).</li> <li>For 'Z', overrides to ZGS* files (e.g., GSPRCT to ZGSPRCT).</li> </ul> </li> <li> <p>Opens the GSPRCT file (input-only, USROPN).</p> </li> <li> <p>Print Listing (PRTLIST Subroutine - Main Processing Logic):</p> </li> <li>Calls OPENPRTF to open the printer file (QSYSPRT) with overrides.</li> <li>Reads GSPRCT sequentially until end-of-file (INLR = ON):<ul> <li>For each record, checks for overflow (OVRFLO subroutine).</li> <li>Prints detail line (EXCEPT DTL01) with fields: company (<code>ptcono</code>), product (<code>ptprod</code>), container (<code>ptcntr</code>), description 1 (<code>ptdes1</code>), description 2 (<code>ptdes2</code>), and delete flag (<code>ptdel</code>).</li> </ul> </li> <li> <p>Calls CLOSPRTF to close the printer file and clean up overrides.</p> </li> <li> <p>Process Overflow (OVRFLO Subroutine):</p> </li> <li>Checks the overflow indicator (*INOF).</li> <li>If overflow (INOF = ON), sets <code>prtovr</code> = ON and indicators IN81-*IN85 to trigger header printing.</li> <li> <p>If <code>prtovr</code> = *ON, prints the report header (EXCEPT HDR01) and resets <code>prtovr</code>.</p> </li> <li> <p>Open Print File (OPENPRTF Subroutine):</p> </li> <li>Constructs a printer override command by concatenating <code>ovr(01)</code> (PAGESIZE, LPI, CPI, OVRFLW) and <code>ovr(02)</code> (OUTQ, FORMTYPE, HOLD, SAVE).</li> <li>Executes the override using QCMDEXC.</li> <li> <p>Opens the QSYSPRT printer file.</p> </li> <li> <p>Close Print File (CLOSPRTF Subroutine):</p> </li> <li>Closes the QSYSPRT printer file.</li> <li> <p>Executes a delete override command (<code>ovr(03)</code>: DLTOVR) using QCMDEXC to clean up.</p> </li> <li> <p>Program End:</p> </li> <li>Closes all files (via CLOSPRTF and implicit GSPRCT closure).</li> <li>Sets INLR = ON and returns.</li> </ol> <p>The program is minimal, designed to produce a static report without user interaction or complex logic. It prints all records in GSPRCT, regardless of their active/inactive status (<code>ptdel</code>), sorted by company, product, and container (implied by the keyed file).</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9285%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Purpose:</li> <li>Generates a printed report of all Product/Container records from GSPRCT, including company, product, container, descriptions, and delete flag.</li> <li> <p>The report is spooled to the job\u2019s output queue (OUTQ(JOB)) with HOLD(YES) and SAVE(*YES), allowing users to review/release later.</p> </li> <li> <p>Report Format:</p> </li> <li>Header (printed on first page and after overflow):<ul> <li>Line 1: \"American Refining Group\" (left), report title (<code>c$hdr1</code>, center), page number (right).</li> <li>Line 2: Job name, program name (left), date in MM/DD/CCYY format (right).</li> <li>Line 3: User ID, file group (<code>p$fgrp</code>, left), time in HH:MM:SS format (right).</li> <li>Line 4: Underline (array <code>str</code>).</li> <li>Line 5: Column headers (Co, Prod, Cntr, Description-1, Description-2, Del).</li> <li>Line 6: Underline (array <code>str</code>).</li> </ul> </li> <li>Detail Lines:<ul> <li>Fields: <code>ptcono</code> (company), <code>ptprod</code> (product), <code>ptcntr</code> (container), <code>ptdes1</code> (description 1), <code>ptdes2</code> (description 2), <code>ptdel</code> (delete flag: 'A' or 'I').</li> <li>Printed sequentially, one record per line.</li> </ul> </li> <li> <p>Page size: 68 lines, 164 characters wide, 8 lines per inch, 15 characters per inch, overflow at line 62.</p> </li> <li> <p>Data Selection:</p> </li> <li>Reads all records from GSPRCT sequentially, with no filtering (e.g., includes both active and inactive records).</li> <li> <p>Sorted by key fields (company, product, container) as defined in the file\u2019s key structure.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>Uses <code>p$fgrp</code> to determine whether to access GGS ('G') or ZGS ('Z') files, ensuring data separation (e.g., for different companies or environments).</p> </li> <li> <p>General:</p> </li> <li>No validation or error handling for missing/invalid records; assumes GSPRCT is accessible.</li> <li>No user interaction; the report is generated automatically upon call.</li> <li>No auditing (e.g., no tracking of who ran the report beyond job/user in headers).</li> <li>Printer file settings ensure the report is held and saved for later retrieval.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9285%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, overridden based on <code>p$fgrp</code> (to GGS for 'G' or ZGS for 'Z'):</p> <ul> <li>GSPRCT: Input file (IF - input full procedural, E - externally described, K - keyed). Primary data source containing Product/Container records (fields: <code>ptcono</code>, <code>ptprod</code>, <code>ptcntr</code>, <code>ptdes1</code>, <code>ptdes2</code>, <code>ptdel</code>).</li> <li>QSYSPRT: Printer file (O - output, F - fixed length 164 characters, USROPN). Used to generate the report with headers and detail lines.</li> </ul> <p>Both files are opened with USROPN, and GSPRCT is overridden to GGSPRCT or ZGSPRCT based on <code>p$fgrp</code>.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS9285%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls only one system utility (via CALL):</p> <ul> <li>QCMDEXC: Executes override commands for:</li> <li>GSPRCT file redirection (to GGSPRCT or ZGSPRCT).</li> <li>QSYSPRT printer settings (PAGESIZE, LPI, CPI, OVRFLW, OUTQ, FORMTYPE, HOLD, SAVE) and cleanup (DLTOVR).</li> </ul> <p>No external RPG or custom programs are called, making this a self-contained report generator.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928P%20RPGLE/","title":"GS928P RPGLE","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928P%20RPGLE/#process-steps-of-the-rpg-program-gs928p","title":"Process Steps of the RPG Program (GS928P)","text":"<p>The program GS928P is an interactive RPG III program for managing Product/Container entries on an IBM i (AS/400) system. It operates in either maintenance (MNT) or inquiry (INQ) mode, based on input parameters. The core functionality revolves around displaying and processing a subfile (SFL) list of records from the GSPRCT file, allowing users to browse, position, filter (include/exclude inactive entries), and perform actions like create, change, inactivate/reactivate, display, or print. It handles user input via function keys, validates data, manages errors/messages, and calls external programs for specific actions.</p> <p>The high-level process flow is as follows:</p> <ol> <li>Initialization (*INZSR Subroutine):</li> <li>Receives entry parameters: <code>p$mode</code> (MNT for maintenance or INQ for inquiry) and <code>p$fgrp</code> (file group: 'G' or 'Z' to determine file overrides).</li> <li>Sets up work fields, key lists (e.g., for chaining to files), message handling fields, and default values (e.g., subfile page size = 14 records).</li> <li>Prepares date/time stamps and message queue fields.</li> <li> <p>Defines constants for function keys (e.g., F3=Exit, F5=Refresh).</p> </li> <li> <p>Open Database Tables (OPNTBL Subroutine):</p> </li> <li>Applies file overrides using QCMDEXC based on <code>p$fgrp</code> (e.g., overrides to GGS files for 'G' or ZGS files for 'Z').</li> <li> <p>Opens input files: GSPRCT, GSPRCTRD (renamed record format), BICONT, GSPROD, and GSCNTR1.</p> </li> <li> <p>Process Subfile (SRSFL1 Subroutine - Main Processing Loop):</p> </li> <li>Clears the message subfile and initializes subfile control fields (e.g., company, product, container filters).</li> <li>Sets initial subfile mode (folded/unfolded) and global protection (protect fields in INQ mode).</li> <li>Positions the file cursor using user-provided filters (SF1REP subroutine).</li> <li>Enters a loop to handle user interaction:<ul> <li>Displays command line, message subfile (if needed), and subfile control.</li> <li>Writes the subfile control format (SFLCTL1) and reads user input (EXFMT).</li> <li>Clears message indicators and determines cursor position for redisplay.</li> <li>Processes function keys and user actions before reading subfile changes:</li> <li>F3: Exit the program.</li> <li>F4: Prompt for fields (e.g., product or container) using external programs (PROMPT subroutine).</li> <li>F5: Refresh the subfile (clear reposition fields and reload).</li> <li>F8: Toggle include/exclude inactive entries filter (updates display label and reloads subfile).</li> <li>F15: Calls external program for printing a listing and adds a confirmation/error message.</li> <li>Page Down: Loads additional subfile records (SF1LOD subroutine).</li> <li>Direct access: If option/company/product/container fields are filled in the control area, processes direct create/change/delete/display (SF1DIR subroutine).</li> <li>If ENTER is pressed, processes subfile changes (SF1PRC subroutine): Reads changed subfile records (READC), validates, and handles selected options (e.g., 2=Change, 4=InActivate/ReActivate, 5=Display).</li> <li>Processes function keys and user actions after reading subfile changes:</li> <li>Repositions subfile if position-to fields (company/product/container) are changed.</li> <li>F10: Positions cursor to control record.</li> </ul> </li> <li>Loops until exit (F3) or no further actions.</li> <li>Handles repositioning (SF1REP): Clears subfile, edits control input (SF1CTE), positions file, and reloads records.</li> <li>Loads subfile records (SF1LOD): Reads from GSPRCTRD, skips inactive if filtered, formats fields (SF1FMT), applies color coding (SF1COL for deleted/inactive), and writes to subfile.</li> <li> <p>Clears subfile (SF1CLR) when needed (e.g., for repositioning).</p> </li> <li> <p>Process Subfile Options (SF1CHG and Related Subroutines):</p> </li> <li> <p>For each selected subfile record:</p> <ul> <li>Retains key values (company, product, container).</li> <li>Chains to GSPRCT for validation.</li> <li>Calls external programs based on option:</li> <li>Option 1 (Create, direct only): Validates keys, calls external program for creation, adds confirmation message, repositions subfile.</li> <li>Option 2 (Change): Checks if record is active, calls external program for change, adds confirmation message.</li> <li>Option 4 (InActivate/ReActivate): Calls external program, processes return flag ('I' or 'A'), adds confirmation message.</li> <li>Option 5 (Display): Calls external program in INQ mode.</li> <li>Updates subfile record after processing (formats and colors it again).</li> </ul> </li> <li> <p>Direct Access Processing (SF1DIR Subroutine):</p> </li> <li>Validates direct input fields (e.g., company exists in BICONT, product in GSPROD, container in GSCNTR1).</li> <li>Checks for existence/duplicates in GSPRCT.</li> <li> <p>If valid, processes the option (create/change/delete/display) directly without subfile selection.</p> </li> <li> <p>Error and Message Handling:</p> </li> <li>Validates inputs (e.g., cannot modify inactive records).</li> <li>Adds messages to program message queue (ADDMSG subroutine using QMHSNDPM).</li> <li>Writes/clears message subfile (WRTMSG and CLRMSG subroutines using QMHRMVPM).</li> <li> <p>Displays errors (e.g., invalid keys) and sets indicators for field highlighting.</p> </li> <li> <p>Prompting (PROMPT Subroutine):</p> </li> <li> <p>Based on cursor field (e.g., product or container), calls external programs to prompt and return values.</p> </li> <li> <p>Program End:</p> </li> <li>Closes all files.</li> <li>Sets INLR = ON and returns.</li> </ol> <p>The program emphasizes error handling, validation (e.g., chaining for existence), and user-friendly features like subfile folding, color coding (blue for deleted/inactive), and function key support. It does not perform direct database updates; instead, it calls external programs for CRUD operations.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external RPG or utility programs for specific actions (parameters are passed via PARM statements):</p> <ul> <li>GS9285: Called for printing a Product/Container listing (F15). Parameters: file group (<code>p$fgrp</code>).</li> <li>GS928: Called for create (option 1), change (option 2), or display (option 5). Parameters: company, product, container, mode (MNT/INQ), file group, return flag.</li> <li>GS9284: Called for inactivate/reactivate (option 4). Parameters: company, product, container, file group, return flag.</li> <li>LGSPROD: Called for prompting product code (F4 on product field). Parameters: company, product, file group.</li> <li>LGSCNTR: Called for prompting container code (F4 on container field). Parameters: container key, file group.</li> </ul> <p>System utilities called (via CALL): - QCMDEXC: Executes override commands for file redirection. - QMHSNDPM: Sends messages to the program message queue. - QMHRMVPM: Removes messages from the program message queue.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/GS928P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following database files (PF for physical, LF for logical) and display file. Files are input-only unless noted, and are overridden based on <code>p$fgrp</code> (to GGS for 'G' or ZGS for 'Z'):</p> <ul> <li>GS928PD: Display file (CF - control format, E - external). Used for workstation interaction, including subfile (SFL1) and message subfile.</li> <li>GSPRCT: Primary file (IF - input full procedural, E - externally described, K - keyed). Used for chaining and updating Product/Container records.</li> <li>GSPRCTRD: Renamed record format of GSPRCT (IF, E, K). Used for reading/positioning records in the subfile.</li> <li>BICONT: Input file (IF, E, K). Used to validate company numbers.</li> <li>GSPROD: Input file (IF, E, K). Used to validate product codes (with renamed field TPFIL5 to X@FIL5).</li> <li>GSCNTR1: Input file (IF, E, K). Used to validate container codes.</li> </ul> <p>All files are opened with USROPN and shared access controlled via overrides. No direct writes/updates occur in this program; modifications are handled by called programs.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/","title":"Summary GS928P RPGLE","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#list-of-use-cases-implemented-in-the-gs928p-call-stack","title":"List of Use Cases Implemented in the GS928P Call Stack","text":"<p>The call stack consists of four RPG III programs: GS928P (main interactive program), GS928 (maintenance/inquiry), GS9284 (inactivate/reactivate), and GS9285 (print listing). These programs collectively implement a system for managing Product/Container entries on an IBM i (AS/400) system, supporting both interactive user operations and batch reporting. Below are the identified use cases based on the functionality provided by the call stack:</p> <ol> <li>Browse and Filter Product/Container Entries (GS928P):</li> <li>Description: Users can view a list of Product/Container records in a subfile, filter by company, product, or container, and toggle inclusion/exclusion of inactive records.</li> <li>Actions: Scroll through records, reposition the list based on input criteria, and refresh the display.</li> <li> <p>Details: Supports inquiry (INQ) and maintenance (MNT) modes, with inactive records optionally filtered out (F8 toggle).</p> </li> <li> <p>Create a New Product/Container Entry (GS928P, GS928):</p> </li> <li>Description: Users can create a new Product/Container record by entering details directly or selecting an option from the subfile.</li> <li>Actions: Validate input (company, product, container existence), call GS928 to create the record, and display a confirmation message.</li> <li> <p>Details: Only available in MNT mode; ensures description is not blank and keys are unique.</p> </li> <li> <p>Update an Existing Product/Container Entry (GS928P, GS928):</p> </li> <li>Description: Users can modify an existing Product/Container record\u2019s details (e.g., descriptions) via the subfile or direct input.</li> <li>Actions: Validate that the record is active and input is valid, call GS928 to update, and display a confirmation message.</li> <li> <p>Details: Only in MNT mode; key fields are protected if the record exists.</p> </li> <li> <p>InActivate or ReActivate a Product/Container Entry (GS928P, GS9284):</p> </li> <li>Description: Users can mark a Product/Container record as inactive ('I') or reactivate it ('A') via the subfile.</li> <li>Actions: Select a record, call GS9284 to toggle the <code>ptdel</code> field, and display a confirmation message.</li> <li> <p>Details: Only in MNT mode; ensures the record\u2019s current state allows the action (e.g., cannot inactivate an already inactive record).</p> </li> <li> <p>Display a Product/Container Entry (GS928P, GS928):</p> </li> <li>Description: Users can view details of a specific Product/Container record in a read-only format.</li> <li>Actions: Select a record or enter keys directly, call GS928 in INQ mode to display details.</li> <li> <p>Details: Available in both MNT and INQ modes; no database changes.</p> </li> <li> <p>Print a Product/Container Listing (GS928P, GS9285):</p> </li> <li>Description: Users can generate a printed report of all Product/Container records, including active and inactive.</li> <li>Actions: Trigger via F15, call GS9285 to produce a spooled report with headers and details.</li> <li> <p>Details: Includes all records, sorted by company, product, and container; report is held and saved for later retrieval.</p> </li> <li> <p>Prompt for Valid Product or Container Codes (GS928P, LGSPROD, LGSCNTR):</p> </li> <li>Description: Users can prompt for valid product or container codes to populate input fields.</li> <li>Actions: Press F4 on product or container fields, call LGSPROD or LGSCNTR to return valid codes.</li> <li>Details: Ensures valid input by fetching from GSPROD or GSCNTR1; only in MNT mode.</li> </ol> <p>These use cases cover the full scope of the system\u2019s functionality, from browsing and editing to reporting and input assistance, supporting both interactive and batch operations.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#function-requirement-document-productcontainer-management-system","title":"Function Requirement Document: Product/Container Management System","text":"<p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#productcontainer-management-system-requirements","title":"Product/Container Management System Requirements","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#overview","title":"Overview","text":"<p>This document outlines the functional requirements for a Product/Container Management System that manages records containing company, product, and container data. The system supports creating, updating, inactivating/reactivating, displaying, and printing records, with validation and reporting capabilities. Functions are designed to process inputs programmatically (no screen interaction) and return results or status flags.</p>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#business-requirements-and-process-steps","title":"Business Requirements and Process Steps","text":""},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#1-browse-and-filter-productcontainer-records","title":"1. Browse and Filter Product/Container Records","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company (optional), product (optional), container (optional), includeInactive (boolean).</li> <li>Outputs: List of records (company, product, container, description1, description2, deleteFlag).</li> <li>Process Steps:</li> <li>Apply file overrides for GSPRCT based on file group ('G' \u2192 GGSPRCT, 'Z' \u2192 ZGSPRCT).</li> <li>If company, product, or container provided, position cursor to matching records.</li> <li>Read GSPRCT sequentially, filtering out inactive records (deleteFlag = 'I') if includeInactive = false.</li> <li>Return records with fields: company, product, container, description1, description2, deleteFlag.</li> <li>Business Rules:</li> <li>Records sorted by company, product, container.</li> <li>Include all records if no filters provided.</li> <li>Inactive records (deleteFlag = 'I') excluded unless includeInactive = true.</li> <li>Calculations: None.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#2-create-a-new-productcontainer-record","title":"2. Create a New Product/Container Record","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company, product, container, description1, description2.</li> <li>Outputs: Success flag (1 = success, 0 = failure), error message (if any).</li> <li>Process Steps:</li> <li>Apply file overrides for GSPRCT, BICONT, GSPROD, GSCNTR1 based on file group.</li> <li>Validate inputs:<ul> <li>Company exists in BICONT.</li> <li>Product exists in GSPROD.</li> <li>Container exists in GSCNTR1.</li> <li>Description1 is not blank.</li> <li>Record (company, product, container) does not exist in GSPRCT.</li> </ul> </li> <li>If valid, write new record to GSPRCT with deleteFlag = 'A' (active).</li> <li>Return success flag and error message (if validation fails).</li> <li>Business Rules:</li> <li>Duplicate records (same company, product, container) are not allowed.</li> <li>Description1 is mandatory.</li> <li>New records are always active (deleteFlag = 'A').</li> <li>Calculations: None.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#3-update-an-existing-productcontainer-record","title":"3. Update an Existing Product/Container Record","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company, product, container, description1, description2.</li> <li>Outputs: Success flag (1 = success, 0 = failure), error message (if any).</li> <li>Process Steps:</li> <li>Apply file overrides for GSPRCT, BICONT, GSPROD, GSCNTR1.</li> <li>Validate inputs:<ul> <li>Record exists in GSPRCT and deleteFlag = 'A' (active).</li> <li>Description1 is not blank.</li> </ul> </li> <li>If valid and fields changed, update description1 and description2 in GSPRCT.</li> <li>Return success flag and error message (if validation fails).</li> <li>Business Rules:</li> <li>Cannot update inactive records (deleteFlag = 'I').</li> <li>Key fields (company, product, container) cannot be changed.</li> <li>Description1 is mandatory.</li> <li>Calculations: Compare input fields with existing record to detect changes.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#4-inactivate-or-reactivate-a-productcontainer-record","title":"4. InActivate or ReActivate a Product/Container Record","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company, product, container, action ('I' = InActivate, 'A' = ReActivate).</li> <li>Outputs: Status flag ('I' = inactivated, 'A' = reactivated, blank = no action), error message (if any).</li> <li>Process Steps:</li> <li>Apply file override for GSPRCT.</li> <li>Validate:<ul> <li>Record exists in GSPRCT.</li> <li>For InActivate: deleteFlag \u2260 'I'.</li> <li>For ReActivate: deleteFlag = 'I'.</li> </ul> </li> <li>If valid, update deleteFlag in GSPRCT ('I' or 'A').</li> <li>Return status flag and error message (if validation fails).</li> <li>Business Rules:</li> <li>Cannot inactivate an already inactive record.</li> <li>Cannot reactivate an already active record.</li> <li>Only updates deleteFlag; other fields unchanged.</li> <li>Calculations: None.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#5-display-a-productcontainer-record","title":"5. Display a Product/Container Record","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company, product, container.</li> <li>Outputs: Record details (company, product, container, description1, description2, deleteFlag), error message (if any).</li> <li>Process Steps:</li> <li>Apply file overrides for GSPRCT, BICONT, GSPROD, GSCNTR1.</li> <li>Chain to GSPRCT using keys.</li> <li>If found, fetch product description from GSPROD and container description from GSCNTR1.</li> <li>Return record details and error message (if not found).</li> <li>Business Rules:</li> <li>Returns data regardless of active/inactive status.</li> <li>No database changes.</li> <li>Calculations: None.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#6-print-productcontainer-listing","title":"6. Print Product/Container Listing","text":"<ul> <li>Inputs: File group ('G' or 'Z').</li> <li>Outputs: Success flag (1 = success, 0 = failure), spooled report.</li> <li>Process Steps:</li> <li>Apply file override for GSPRCT and printer overrides for QSYSPRT (PAGESIZE=68x164, LPI=8, CPI=15, OVRFLW=62, OUTQ=JOB, HOLD=YES, SAVE=*YES).</li> <li>Open QSYSPRT and print headers (company name, title, job/user info, date/time, column headers).</li> <li>Read GSPRCT sequentially, printing each record (company, product, container, description1, description2, deleteFlag).</li> <li>Handle page overflow at line 62, reprinting headers.</li> <li>Close QSYSPRT, delete overrides, and return success flag.</li> <li>Business Rules:</li> <li>Includes all records (active and inactive), sorted by company, product, container.</li> <li>Report is held and saved in the job\u2019s output queue for later retrieval.</li> <li>Calculations: Page number increment for headers.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#7-prompt-for-valid-product-or-container-code","title":"7. Prompt for Valid Product or Container Code","text":"<ul> <li>Inputs: File group ('G' or 'Z'), company (for product), field type ('product' or 'container').</li> <li>Outputs: Valid code (product or container), description, error message (if any).</li> <li>Process Steps:</li> <li>Apply file overrides for GSPROD (product) or GSCNTR1 (container).</li> <li>For product: Chain to GSPROD using company and product code, return code and description.</li> <li>For container: Chain to GSCNTR1 using container code, return code and description.</li> <li>Return error if code not found.</li> <li>Business Rules:</li> <li>Ensures only valid codes are returned.</li> <li>Product validation requires company context.</li> <li>Calculations: None.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#general-business-rules","title":"General Business Rules","text":"<ul> <li>File Overrides: Use 'G' for GG files or 'Z' for ZG files to separate data (e.g., by company or environment).</li> <li>Data Validation: </li> <li>Company, product, and container must exist in BICONT, GSPROD, and GSCNTR1, respectively, for create/update/display.</li> <li>Description1 is mandatory for create/update.</li> <li>Inactive records (deleteFlag = 'I') cannot be updated but can be displayed or reactivated.</li> <li>Error Handling: Return error messages for invalid inputs (e.g., non-existent keys, blank description1, duplicate records).</li> <li>Auditing: No user or timestamp updates in the database; relies on file-level auditing (if any).</li> <li>Concurrency: File overrides use SHARE(*NO) to prevent conflicts.</li> </ul>"},{"location":"order-entry/GS928P%20Prod-Cntr%20Description%20Overrides/Summary%20GS928P%20RPGLE/#assumptions","title":"Assumptions","text":"<ul> <li>Input parameters are provided by a calling system (no interactive screens).</li> <li>GSPRCT contains fields: ptcono (company), ptprod (product), ptcntr (container), ptdes1 (description1), ptdes2 (description2), ptdel (delete flag: 'A' or 'I').</li> <li>BICONT, GSPROD, and GSCNTR1 provide reference data for validation.</li> <li>QSYSPRT is configured for report output.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/","title":"GS929 RPGLE","text":"<p>The RPG program <code>GS929</code> is a workstation program designed for product load maintenance and inquiry within an IBM i (AS/400) environment. It is called from the main program <code>GS929P</code> to handle the creation, modification, and display of individual product load records. The program interacts with a display file and database files, providing a user interface for entering or viewing product load details, with validation to ensure data integrity. Below, I outline the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#process-steps-of-gs929","title":"Process Steps of GS929","text":"<p>The program follows a structured flow to manage product load records through two panel formats (<code>FMT01</code> and <code>FMT02</code>). The steps are organized around the mainline logic and subroutines:</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#1-initialization-inzsr-subroutine","title":"1. Initialization (*INZSR Subroutine)","text":"<ul> <li>Purpose: Sets up initial parameters and variables.</li> <li>Steps:<ul> <li>Receives input parameters: <code>p$cono</code> (company), <code>p$loc</code> (load location), <code>p$prod</code> (product), <code>p$cntr</code> (container), <code>p$prty</code> (priority), <code>p$seq#</code> (sequence number), <code>p$racd</code> (responsibility area), <code>p$mlcd</code> (major location), <code>p$type</code> (product type), <code>p$mode</code> (run mode: 'MNT' for maintenance or 'INQ' for inquiry), <code>p$fgrp</code> (file group: 'Z' or 'G'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to format fields (<code>f$</code>) and holding fields (<code>h$</code>) for processing and comparison.</li> <li>Defines output parameters (<code>o$</code>), key lists (<code>klprct</code>, <code>klprcth</code>, <code>klprod</code>), and work fields.</li> <li>Initializes message handling fields, display file fields, and format control flags (<code>fmtagn</code>, <code>delagn</code>, <code>dspmsg</code>).</li> <li>Sets up a data structure (<code>wkds01</code>) to mirror the <code>prdlod1</code> file record format.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#2-open-database-tables-opntbl-subroutine","title":"2. Open Database Tables (opntbl Subroutine)","text":"<ul> <li>Purpose: Opens required database files with appropriate overrides.</li> <li>Steps:<ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' and applies file overrides from <code>ovg</code> or <code>ovz</code> arrays using the <code>QCMDEXC</code> system API.</li> <li>Opens files: <code>prdlod1</code>, <code>bicont</code>, <code>gsprod</code>, and <code>gscntr1</code>.</li> <li>Retrieves descriptions for the product (<code>f$prds</code> from <code>gsprod</code>) and container (<code>f$ctds</code> from <code>gscntr1</code>) if records exist.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#3-retrieve-data-for-passed-parameters-rtvdta-subroutine","title":"3. Retrieve Data for Passed Parameters (rtvdta Subroutine)","text":"<ul> <li>Purpose: Retrieves existing record data or initializes a new record.</li> <li>Steps:<ul> <li>Chains to <code>prdlod1</code> using the key list <code>klprct</code> to check for an existing record.</li> <li>If no record is found (<code>*in99 = *on</code>):</li> <li>Sets <code>*in46</code> to indicate a new record.</li> <li>Clears the <code>prdlodpf</code> record format.</li> <li>Marks the record as non-existent (<code>w$exists = *off</code>).</li> <li>If a record is found, sets <code>w$exists</code> to <code>*on</code>.</li> <li>Sets the screen header (<code>c$hdr1</code>) and protection mode (<code>*in70</code>) based on <code>p$mode</code>:</li> <li>'MNT': Enables input (<code>*in70 = *off</code>, header = \"Product/Load Entry Maintenance\").</li> <li>'INQ': Protects fields (<code>*in70 = *on</code>, header = \"Product/Load Inquiry\").</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#4-process-panel-formats-srfmt-subroutine","title":"4. Process Panel Formats (srfmt Subroutine)","text":"<ul> <li>Purpose: Manages the display and interaction with the two panel formats (<code>FMT01</code> and <code>FMT02</code>).</li> <li>Steps:<ul> <li>Clears the screen (<code>clrscr</code>).</li> <li>Initializes the first panel format (<code>FMT01</code>) by calling <code>f01mov</code>.</li> <li>Enters a loop (<code>fmtagn</code>) to process panels:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears the screen.</li> <li>Resets the format change indicator (<code>*in19</code>).</li> <li>Displays the appropriate format based on <code>w$fmt</code>:<ul> <li><code>FMT01</code>: Calls <code>f01pro</code> and displays with <code>EXFMT</code>.</li> <li><code>FMT02</code>: Calls <code>f02pro</code> and displays with <code>EXFMT</code>.</li> <li>Default: Falls back to <code>FMT01</code>.</li> </ul> </li> <li>Clears error indicators (<code>*in50-*in69</code>).</li> <li>Clears cursor position (<code>row</code>, <code>col</code>).</li> <li>Clears the message subfile if needed (<code>clrmsg</code>).</li> <li>Processes the current format based on the record name (<code>rcdnam</code>):<ul> <li><code>FMT01</code>: Calls <code>f01sr</code>.</li> <li><code>FMT02</code>: Calls <code>f02sr</code>.</li> </ul> </li> <li>Exits the loop when <code>fmtagn</code> is turned off (e.g., F12 is pressed).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#5-process-fmt01-f01sr-subroutine","title":"5. Process FMT01 (f01sr Subroutine)","text":"<ul> <li>Purpose: Handles user input for the first panel format.</li> <li>Steps:<ul> <li>Processes function keys and input:</li> <li>F04: Calls <code>prompt</code> for field prompting.</li> <li>F10: Resets the cursor to the home position.</li> <li>F12: Exits the program by setting <code>fmtagn</code> to <code>*off</code>.</li> <li>INQ Mode: Moves to the next format (<code>f01nxt</code>).</li> <li>Enter: Validates input (<code>f01edt</code>), updates the database if in 'MNT' mode (<code>upddbf</code>), and moves to the next format if no errors.</li> <li>If validation passes (<code>*in50 = *off</code>), updates the database and proceeds to <code>FMT02</code>.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#6-determine-next-format-f01nxt-subroutine","title":"6. Determine Next Format (f01nxt Subroutine)","text":"<ul> <li>Purpose: Transitions to the next panel format (<code>FMT02</code>).</li> <li>Steps:<ul> <li>Calls <code>f02mov</code> to populate <code>FMT02</code> fields.</li> <li>Sets <code>w$fmt</code> to 'FMT02'.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#7-edit-fmt01-input-f01edt-subroutine","title":"7. Edit FMT01 Input (f01edt Subroutine)","text":"<ul> <li>Purpose: Validates input fields in <code>FMT01</code>.</li> <li>Steps:<ul> <li>Checks if key fields (<code>f$prty</code>, <code>f$seq#</code>) have changed and verifies that the new key combination does not already exist in <code>prdlod1</code> using <code>klprct</code>.</li> <li>Validates fields:</li> <li>Category Description (<code>pddesc</code>): Cannot be blank (<code>ERR0012</code>).</li> <li>Common Names (<code>pdcomm</code>): Cannot be blank (<code>ERR0012</code>).</li> <li>Status (<code>pdstat</code>): Must be 'A' (active) or 'I' (inactive) (<code>ERR0000</code>, message: \"Status - Must be 'A' or 'I'\").</li> <li>Carrier Type (<code>pdcaty</code>): Must be 'TRUCK' or 'RAILCAR' (<code>ERR0000</code>, message: \"Carrier Type - Must be 'TRUCK' or 'RAILCAR'\").</li> <li>Truck Blend (<code>pdtkbl</code>): Must be 'Y' or 'N' (<code>ERR0014</code>).</li> <li>Responsible Person (<code>pdresp</code>): Cannot be blank (<code>ERR0012</code>).</li> <li>Loading Priority (<code>f$prty</code>): Cannot be zero (<code>ERR0000</code>, message: \"Loading Priority - Must be a Range of 1-9\").</li> <li>Sets error indicators (<code>*in50</code>, <code>*in51-*in56</code>, <code>*in77</code>) and sends error messages (<code>addmsg</code>) if validation fails.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#8-process-fmt02-f02sr-subroutine","title":"8. Process FMT02 (f02sr Subroutine)","text":"<ul> <li>Purpose: Handles user input for the second panel format, which includes scheduling fields (e.g., <code>Sun</code>, <code>Mon</code>, etc.).</li> <li>Steps:<ul> <li>Processes function keys:</li> <li>F04: Calls <code>prompt</code> for field prompting.</li> <li>F05: Resets scheduling fields to 'N' (<code>f02rst</code>) and redisplays <code>FMT02</code>.</li> <li>F09: Toggles all scheduling fields to 'Y' or 'N' (<code>f02tgl</code>) and redisplays.</li> <li>F12: Returns to <code>FMT01</code> or exits if no changes were made.</li> <li>F14: Updates the database (<code>upddbf</code>) and exits.</li> <li>Enter: Validates input (<code>f02edt</code>), updates the database if in 'MNT' mode, and exits if no errors.</li> <li>If validation passes, updates the database and exits the program.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#9-edit-fmt02-input-f02edt-subroutine","title":"9. Edit FMT02 Input (f02edt Subroutine)","text":"<ul> <li>Purpose: Validates scheduling fields in <code>FMT02</code>.</li> <li>Steps:<ul> <li>Ensures at least one scheduling field (e.g., <code>pdsund</code>, <code>pdmond</code>, etc.) is set to 'Y'.</li> <li>Validates that scheduling fields are either 'Y' or 'N'.</li> <li>Sets error indicators and sends messages (<code>ERR0016</code>, <code>ERR0017</code>) if validation fails.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#10-update-database-upddbf-subroutine","title":"10. Update Database (upddbf Subroutine)","text":"<ul> <li>Purpose: Updates or creates a record in <code>prdlod1</code>.</li> <li>Steps:<ul> <li>Saves the current record state (<code>wkds01</code> to <code>svds</code>).</li> <li>Chains to <code>prdlod1</code> using <code>klprcth</code> to check for an existing record.</li> <li>If the record exists (<code>*in80 = *off</code>):</li> <li>Updates the record with new values if key fields or data have changed.</li> <li>Sets <code>p$flag</code> to '1' to indicate a successful update.</li> <li>If the record does not exist:</li> <li>Clears the <code>prdlodpf</code> record format.</li> <li>Populates fields from input parameters (<code>f$cono</code>, <code>f$loc</code>, etc.).</li> <li>Sets the delete flag (<code>pddel</code>) to 'A' (active).</li> <li>Writes a new record to <code>prdlod1</code>.</li> <li>Sets <code>p$flag</code> to '1'.</li> <li>Updates <code>pdprty</code> and <code>pdseq#</code> with <code>f$prty</code> and <code>f$seq#</code>.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#11-field-prompting-prompt-subroutine","title":"11. Field Prompting (prompt Subroutine)","text":"<ul> <li>Purpose: Placeholder for field prompting (incomplete in the provided code).</li> <li>Steps:<ul> <li>Determines the cursor location for returning from a prompt window.</li> <li>Sets <code>*in19</code> to indicate a format change.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#12-move-data-to-panel-formats-f01mov-f02mov-subroutines","title":"12. Move Data to Panel Formats (f01mov, f02mov Subroutines)","text":"<ul> <li>f01mov: Populates <code>FMT01</code> fields from <code>prdlod1</code> or input parameters, retrieves company name (<code>bcname</code>), and sets scheduling flags.</li> <li>f02mov: Populates <code>FMT02</code> scheduling fields (e.g., <code>pdsund</code>, <code>pdmond</code>) from <code>prdlod1</code> using data structures (<code>Sun</code>, <code>Mon</code>, etc.).</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#13-reset-and-toggle-scheduling-fields-f02rst-f02tgl-subroutines","title":"13. Reset and Toggle Scheduling Fields (f02rst, f02tgl Subroutines)","text":"<ul> <li>f02rst: Resets all scheduling fields to 'N'.</li> <li>f02tgl: Toggles scheduling fields between 'Y' and 'N' based on the current state of <code>pdsund</code>.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#14-message-handling-addmsg-wrtmsg-clrmsg-subroutines","title":"14. Message Handling (addmsg, wrtmsg, clrmsg Subroutines)","text":"<ul> <li>addmsg: Sends error or informational messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>wrtmsg: Writes the message subfile (<code>msgctl</code>) for display.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#15-program-termination","title":"15. Program Termination","text":"<ul> <li>Closes all files and sets <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during validation and processing:</p> <ol> <li>Record Existence:</li> <li>When changing key fields (<code>f$prty</code>, <code>f$seq#</code>), the new combination must not already exist in <code>prdlod1</code> (<code>ERR0000</code>, message: \"Cannot Change, Record Already Exists\").</li> <li>Mandatory Fields:</li> <li>Category Description (<code>pddesc</code>) and Common Names (<code>pdcomm</code>) cannot be blank (<code>ERR0012</code>).</li> <li>Responsible Person (<code>pdresp</code>) cannot be blank (<code>ERR0012</code>).</li> <li>Status Validation:</li> <li>Status (<code>pdstat</code>) must be 'A' (active) or 'I' (inactive) (<code>ERR0000</code>, message: \"Status - Must be 'A' or 'I'\").</li> <li>Carrier Type:</li> <li>Carrier Type (<code>pdcaty</code>) must be 'TRUCK' or 'RAILCAR' (<code>ERR0000</code>, message: \"Carrier Type - Must be 'TRUCK' or 'RAILCAR'\").</li> <li>Truck Blend:</li> <li>Truck Blend (<code>pdtkbl</code>) must be 'Y' or 'N' (<code>ERR0014</code>).</li> <li>Loading Priority:</li> <li>Loading Priority (<code>f$prty</code>) must be between 1 and 9, not zero (<code>ERR0000</code>, message: \"Loading Priority - Must be a Range of 1-9\").</li> <li>Product Type:</li> <li>Product Type (<code>p$type</code>) must be 'BULK', 'PACKAGED', or 'RAILCAR' (enforced by <code>GS929P</code>, but referenced here).</li> <li>Scheduling Fields:</li> <li>At least one scheduling field (e.g., <code>pdsund</code>, <code>pdmond</code>) must be 'Y' (<code>ERR0016</code>).</li> <li>Scheduling fields must be 'Y' or 'N' (<code>ERR0017</code>).</li> <li>Mode-Based Access:</li> <li>In 'MNT' mode, users can edit and update records.</li> <li>In 'INQ' mode, fields are protected (<code>*in70 = *on</code>), allowing only viewing.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files: 1. prdlod1: Product load file (update/add mode, <code>UF A</code>). 2. bicont: Company file (input-only, used to retrieve company name). 3. gsprod: Product file (input-only, used to retrieve product description). 4. gscntr1: Container file (input-only, used to retrieve container description).</p> <p>All files are user-opened (<code>USROPN</code>) and use file overrides based on the <code>p$fgrp</code> parameter ('G' or 'Z').</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. QCMDEXC: Executes file override commands for database files (<code>opntbl</code>). 2. QMHSNDPM: Sends messages to the program message queue (<code>addmsg</code>). 3. QMHRMVPM: Removes messages from the program message queue (<code>clrmsg</code>).</p> <p>Note: The <code>prompt</code> subroutine is incomplete in the provided code, so no additional lookup programs (e.g., <code>LINLOC</code>, <code>LGSPROD</code>) are called, unlike in <code>GS929P</code>.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929%20RPGLE/#summary","title":"Summary","text":"<p><code>GS929</code> is a focused RPG program called by <code>GS929P</code> to handle the maintenance and inquiry of individual product load records. It uses two panel formats (<code>FMT01</code> for key fields and metadata, <code>FMT02</code> for scheduling) and enforces strict business rules to ensure data integrity. The program supports creating new records, updating existing ones, and displaying records in inquiry mode, with robust validation for fields like status, carrier type, and scheduling. It interacts with four database files and uses system APIs for message handling and file overrides, ensuring seamless integration with the broader application.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/","title":"GS9293 RPGLE","text":"<p>The RPG program <code>GS9293</code> is designed to copy product load records within an IBM i (AS/400) environment. It is called from the main program <code>GS929P</code> to create a new product load record by duplicating an existing record with new key values specified by the user. The program does not have a user interface (no display file) and focuses solely on database operations. Below, I outline the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#process-steps-of-gs9293","title":"Process Steps of GS9293","text":"<p>The program follows a straightforward flow to copy a product load record from one set of key values to another. The steps are organized around the mainline logic and subroutines:</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#1-initialization-inzsr-subroutine","title":"1. Initialization (*INZSR Subroutine)","text":"<ul> <li>Purpose: Sets up initial parameters and variables.</li> <li>Steps:<ul> <li>Receives a single input parameter, <code>p$elist</code>, a 125-byte data structure containing:</li> <li><code>p$cono</code>: Company number (2 bytes, numeric).</li> <li><code>p$floc</code>: From location (3 bytes, character).</li> <li><code>p$fprod</code>: From product code (4 bytes, character).</li> <li><code>p$fcntr</code>: From container code (3 bytes, character).</li> <li><code>p$fprty</code>: From priority (1 byte, numeric).</li> <li><code>p$fseq#</code>: From sequence number (3 bytes, numeric).</li> <li><code>p$fracd</code>: From responsibility area code (5 bytes, character).</li> <li><code>p$fmlcd</code>: From major location code (4 bytes, character).</li> <li><code>p$ftype</code>: From product type (30 bytes, character).</li> <li><code>p$tloc</code>: To location (3 bytes, character).</li> <li><code>p$tprod</code>: To product code (4 bytes, character).</li> <li><code>p$tcntr</code>: To container code (3 bytes, character).</li> <li><code>p$tprty</code>: To priority (1 byte, numeric).</li> <li><code>p$tseq#</code>: To sequence number (3 bytes, numeric).</li> <li><code>p$tracd</code>: To responsibility area code (5 bytes, character).</li> <li><code>p$tmlcd</code>: To major location code (4 bytes, character).</li> <li><code>p$ttype</code>: To product type (30 bytes, character).</li> <li><code>p$fgrp</code>: File group ('Z' or 'G', 1 byte, character).</li> <li>Defines key lists (<code>klFrmProd</code> and <code>klToProd</code>) for accessing the <code>prdlod1</code> file based on the \"from\" and \"to\" key fields.</li> <li>Initializes a data structure (<code>wkds01</code>) to mirror the <code>prdlod</code> file record format and a save data structure (<code>svds</code>) to hold the record being copied.</li> <li>Sets up time and date conversion data structures (<code>time12</code>, <code>d#cymd</code>) and program status data structure (<code>psds##</code>) for environment values.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#2-open-database-tables-opntbl-subroutine","title":"2. Open Database Tables (opntbl Subroutine)","text":"<ul> <li>Purpose: Opens the <code>prdlod1</code> file with the appropriate file override.</li> <li>Steps:<ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z'.</li> <li>Applies the corresponding file override from the <code>ovg</code> (for 'G') or <code>ovz</code> (for 'Z') array using the <code>QCMDEXC</code> system API to override <code>prdlod1</code> to <code>gprdlod1</code> or <code>zprdlod1</code>.</li> <li>Opens the <code>prdlod1</code> file (update/add mode, <code>UF A</code>).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#3-write-new-product-load-record-writeprod-subroutine","title":"3. Write New Product Load Record (WriteProd Subroutine)","text":"<ul> <li>Purpose: Copies an existing product load record to a new record with the specified \"to\" key values.</li> <li>Steps:<ul> <li>Clears the save data structure (<code>svds</code>).</li> <li>Chains to <code>prdlod1</code> using the \"from\" key list (<code>klFrmProd</code>) to retrieve the source record.</li> <li>If the source record is found (<code>*in99 = *off</code>):</li> <li>Saves the source record into <code>svds</code> using <code>wkds01</code>.</li> <li>Chains to <code>prdlod1</code> using the \"to\" key list (<code>klToProd</code>) to check if a record with the target keys already exists.</li> <li>If no target record exists (<code>*in99 = *on</code>):<ul> <li>Clears the <code>prdlodpf</code> record format.</li> <li>Restores the source record from <code>svds</code> to <code>wkds01</code>.</li> <li>Updates key fields with the \"to\" values (<code>p$tloc</code>, <code>p$tprod</code>, <code>p$tcntr</code>, <code>p$tprty</code>, <code>p$tseq#</code>, <code>p$tracd</code>, <code>p$tmlcd</code>, <code>p$ttype</code>, <code>p$cono</code>).</li> <li>Writes the new record to <code>prdlod1</code>.</li> </ul> </li> <li>If the source record is not found or the target record already exists, no action is taken (the program silently skips the write operation).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#4-program-termination","title":"4. Program Termination","text":"<ul> <li>Closes all files (<code>prdlod1</code>) and sets <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during the copy operation:</p> <ol> <li>Source Record Existence:</li> <li> <p>The source record, identified by the \"from\" key fields (<code>p$cono</code>, <code>p$floc</code>, <code>p$fprod</code>, <code>p$fcntr</code>, <code>p$fprty</code>, <code>p$fseq#</code>, <code>p$fracd</code>, <code>p$fmlcd</code>, <code>p$ftype</code>), must exist in <code>prdlod1</code>. If it does not, no copy is performed.</p> </li> <li> <p>Target Record Non-Existence:</p> </li> <li> <p>The target record, identified by the \"to\" key fields (<code>p$cono</code>, <code>p$tloc</code>, <code>p$tprod</code>, <code>p$tcntr</code>, <code>p$tprty</code>, <code>p$tseq#</code>, <code>p$tracd</code>, <code>p$tmlcd</code>, <code>p$ttype</code>), must not already exist in <code>prdlod1</code>. If it does, the copy operation is skipped to prevent overwriting existing records.</p> </li> <li> <p>Key Field Consistency:</p> </li> <li>The company number (<code>p$cono</code>) is retained from the source to the target record, ensuring the copy operation stays within the same company context.</li> <li> <p>The \"to\" key fields replace the corresponding \"from\" key fields in the new record, while all other fields (e.g., descriptions, scheduling data) are copied verbatim from the source record.</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>The file group (<code>p$fgrp</code>) determines whether the program accesses <code>gprdlod1</code> ('G') or <code>zprdlod1</code> ('Z'), ensuring the correct file is used based on the input parameter.</p> </li> <li> <p>No User Interaction:</p> </li> <li>The program operates without a user interface, relying on input parameters provided by the calling program (<code>GS929P</code>). No validation errors are displayed, and the program assumes the input parameters have been validated by the caller.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. prdlod1: Product load file (update/add mode, <code>UF A</code>, user-opened).    - Overrides to <code>gprdlod1</code> or <code>zprdlod1</code> based on <code>p$fgrp</code> ('G' or 'Z').</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes the file override command for <code>prdlod1</code> in the <code>opntbl</code> subroutine.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9293%20RPGLE/#summary","title":"Summary","text":"<p><code>GS9293</code> is a concise RPG program called by <code>GS929P</code> to copy a product load record from one set of key values to another in the <code>prdlod1</code> file. It retrieves the source record, ensures the target record does not already exist, and writes a new record with updated key fields while preserving other data. The program enforces business rules to prevent overwriting existing records and ensures the correct file is accessed based on the file group. With no user interface, it relies on the calling program for input validation and user interaction, making it a focused backend utility for record duplication.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/","title":"GS9294 RPGLE","text":"<p>The RPG program <code>GS9294</code> is designed to inactivate or reactivate product load records within an IBM i (AS/400) environment. It is called from the main program <code>GS929P</code> to toggle the status of a product load record between active ('A') and inactive ('I') using a display file interface. The program provides a confirmation window (<code>actwdw</code>) for the user to approve the action. Below, I outline the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#process-steps-of-gs9294","title":"Process Steps of GS9294","text":"<p>The program follows a structured flow to manage the inactivation or reactivation of product load records. The steps are organized around the mainline logic and subroutines:</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#1-initialization-inzsr-subroutine","title":"1. Initialization (*INZSR Subroutine)","text":"<ul> <li>Purpose: Sets up initial parameters and variables.</li> <li>Steps:<ul> <li>Receives input parameters:</li> <li><code>p$cono</code>: Company number.</li> <li><code>p$loc</code>: Loading location.</li> <li><code>p$prod</code>: Product code.</li> <li><code>p$cntr</code>: Container code.</li> <li><code>p$prty</code>: Loading priority.</li> <li><code>p$seq#</code>: Sequence number.</li> <li><code>p$racd</code>: Responsibility area code.</li> <li><code>p$mlcd</code>: Major location code.</li> <li><code>p$type</code>: Product type.</li> <li><code>p$fgrp</code>: File group ('Z' or 'G').</li> <li><code>p$flag</code>: Return flag (output, indicates 'A' for reactivated or 'I' for inactivated).</li> <li>Defines format fields (<code>f$</code>) to match input parameters and key list (<code>klprdlod</code>) for database access.</li> <li>Moves input parameters to format fields (<code>f$cono</code>, <code>f$loc</code>, etc.) for use in the key list.</li> <li>Initializes the window processing flag (<code>winagn = *on</code>) to enter the main processing loop.</li> <li>Sets up message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>) and a parameter list (<code>pld010</code>) for potential date validation (not used in the provided code).</li> <li>Initializes the display file data structure (<code>dspf_ds</code>) for screen interaction.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#2-open-database-tables-opntbl-subroutine","title":"2. Open Database Tables (opntbl Subroutine)","text":"<ul> <li>Purpose: Opens the <code>prdlod1</code> file with the appropriate file override.</li> <li>Steps:<ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z'.</li> <li>Applies the corresponding file override from the <code>ovg</code> (for 'G') or <code>ovz</code> (for 'Z') array using the <code>QCMDEXC</code> system API to override <code>prdlod1</code> to <code>gprdlod1</code> or <code>zprdlod1</code>.</li> <li>Opens the <code>prdlod1</code> file (update/add mode, <code>UF A</code>, user-opened).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#3-retrieve-data-rtvdta-subroutine","title":"3. Retrieve Data (rtvdta Subroutine)","text":"<ul> <li>Purpose: Retrieves the product load record and sets up the confirmation window.</li> <li>Steps:<ul> <li>Chains to <code>prdlod1</code> using the key list <code>klprdlod</code> to retrieve the record.</li> <li>If the record is found (<code>*in99 = *off</code>):</li> <li>Checks the delete flag (<code>pddel</code>):<ul> <li>If <code>pddel = 'I'</code> (inactive):</li> <li>Sets the window header (<code>f$hdr</code>) to \"Product/Load Entry ReActivate\" (<code>hdr(01)</code>).</li> <li>Sets the function key label (<code>f$fkyd</code>) to \"F22=ReActivate\" (<code>fky(01)</code>).</li> <li>Enables indicator <code>*in72</code> to highlight the reactivation option.</li> <li>If <code>pddel \u2260 'I'</code> (active):</li> <li>Sets the window header to \"Product/Load Entry InActivate\" (<code>hdr(02)</code>).</li> <li>Sets the function key label to \"F23=InActivate\" (<code>fky(02)</code>).</li> <li>Enables indicator <code>*in73</code> to highlight the inactivation option.</li> </ul> </li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#4-process-window-prcwdw-subroutine","title":"4. Process Window (prcwdw Subroutine)","text":"<ul> <li>Purpose: Manages the confirmation window (<code>actwdw</code>) for user interaction.</li> <li>Steps:<ul> <li>Enters a loop (<code>winagn</code>) to process the window until the user exits or confirms an action:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears the screen (<code>msgclr</code>).</li> <li>Displays the confirmation window using <code>EXFMT actwdw</code>.</li> <li>Clears the message subfile if displayed (<code>clrmsg</code>).</li> <li>Resets error indicators (<code>*in50-*in69</code>).</li> <li>Processes user input based on the function key pressed:<ul> <li>F12: Exits the window by setting <code>winagn</code> to <code>*off</code>, leaving <code>p$flag</code> unchanged.</li> <li>F22 or F23: Validates input (<code>winedt</code>) and updates the database (<code>winupd</code>) if no errors (<code>*in50 = *off</code>), then exits the loop.</li> <li>Other (e.g., Enter): Validates input (<code>winedt</code>) and redisplays the window if errors exist.</li> </ul> </li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#5-edit-window-input-winedt-subroutine","title":"5. Edit Window Input (winedt Subroutine)","text":"<ul> <li>Purpose: Validates user input in the confirmation window.</li> <li>Steps:<ul> <li>Calls <code>chkact</code> to perform validation (the subroutine is empty in the provided code, indicating no additional checks are implemented).</li> <li>No explicit validation logic is present, so the subroutine effectively passes control to <code>winupd</code> when F22 or F23 is pressed.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#6-check-activity-chkact-subroutine","title":"6. Check Activity (chkact Subroutine)","text":"<ul> <li>Purpose: Intended to check activity prior to inactivation/reactivation.</li> <li>Steps:<ul> <li>The subroutine is empty in the provided code, suggesting no specific checks (e.g., for dependent records or constraints) are performed before updating the record status.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#7-update-database-winupd-subroutine","title":"7. Update Database (winupd Subroutine)","text":"<ul> <li>Purpose: Updates the <code>prdlod1</code> record\u2019s status based on the user\u2019s action.</li> <li>Steps:<ul> <li>Processes based on the function key:</li> <li>F22 (ReActivate):<ul> <li>Chains to <code>prdlod1</code> using <code>klprdlod</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is inactive (<code>pddel = 'I'</code>):</li> <li>Sets <code>pddel</code> to 'A' (active).</li> <li>Updates the <code>prdlodpf</code> record.</li> <li>Sets <code>p$flag</code> to 'A' to indicate successful reactivation.</li> </ul> </li> <li>F23 (InActivate):<ul> <li>Chains to <code>prdlod1</code> using <code>klprdlod</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is not already inactive (<code>pddel \u2260 'I'</code>):</li> <li>Sets <code>pddel</code> to 'I' (inactive).</li> <li>Updates the <code>prdlodpf</code> record.</li> <li>Sets <code>p$flag</code> to 'I' to indicate successful inactivation.</li> </ul> </li> <li>If the record does not exist or the status condition is not met, no update is performed, and <code>p$flag</code> remains unchanged.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#8-message-handling-addmsg-wrtmsg-clrmsg-subroutines","title":"8. Message Handling (addmsg, wrtmsg, clrmsg Subroutines)","text":"<ul> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code> (not used in the provided logic, as no errors are explicitly raised).</li> <li>wrtmsg: Writes the message subfile (<code>msgctl</code>) for display.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#9-program-termination","title":"9. Program Termination","text":"<ul> <li>Closes all files (<code>prdlod1</code>, <code>gs9294d</code>) and sets <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Record Existence:</li> <li> <p>The product load record, identified by the key fields (<code>p$cono</code>, <code>p$loc</code>, <code>p$prod</code>, <code>p$cntr</code>, <code>p$prty</code>, <code>p$seq#</code>, <code>p$racd</code>, <code>p$mlcd</code>, <code>p$type</code>), must exist in <code>prdlod1</code> for any action to be performed.</p> </li> <li> <p>Status Transition:</p> </li> <li>Reactivation (F22): Only records with a delete flag (<code>pddel</code>) of 'I' (inactive) can be reactivated. The flag is updated to 'A' (active), and <code>p$flag</code> is set to 'A'.</li> <li> <p>Inactivation (F23): Only records with a delete flag not equal to 'I' (typically 'A' for active) can be inactivated. The flag is updated to 'I', and <code>p$flag</code> is set to 'I'.</p> </li> <li> <p>User Confirmation:</p> </li> <li> <p>The user must confirm the action via the <code>actwdw</code> window using F22 (reactivate) or F23 (inactivate). No action is taken without explicit confirmation.</p> </li> <li> <p>File Group Handling:</p> </li> <li> <p>The file group (<code>p$fgrp</code>) determines whether the program accesses <code>gprdlod1</code> ('G') or <code>zprdlod1</code> ('Z'), ensuring the correct file is used.</p> </li> <li> <p>No Additional Validation:</p> </li> <li> <p>The empty <code>chkact</code> subroutine suggests no additional business rules (e.g., checking for dependent records or constraints) are enforced before changing the record status.</p> </li> <li> <p>Error Handling:</p> </li> <li>The program does not generate error messages in the provided code (no calls to <code>addmsg</code>), relying on the calling program (<code>GS929P</code>) to handle any validation errors.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. prdlod1: Product load file (update/add mode, <code>UF A</code>, user-opened).    - Overrides to <code>gprdlod1</code> or <code>zprdlod1</code> based on <code>p$fgrp</code> ('G' or 'Z').</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. QCMDEXC: Executes the file override command for <code>prdlod1</code> in the <code>opntbl</code> subroutine. 2. QMHSNDPM: Sends messages to the program message queue (defined in <code>addmsg</code>, but not used in the provided logic). 3. QMHRMVPM: Removes messages from the program message queue (<code>clrmsg</code>).</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9294%20RPGLE/#summary","title":"Summary","text":"<p><code>GS9294</code> is a focused RPG program called by <code>GS929P</code> to inactivate or reactivate product load records in the <code>prdlod1</code> file. It presents a confirmation window (<code>actwdw</code>) to the user, allowing them to toggle the record\u2019s status between active ('A') and inactive ('I') using function keys F22 and F23. The program enforces simple business rules to ensure the record exists and is in the appropriate state before updating, with no additional validation checks in the provided code. It interacts with a single database file and uses system APIs for file overrides and message handling, relying on the calling program for input validation and error messaging.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/","title":"GS9295 RPGLE","text":"<p>The RPG program <code>GS9295</code> is designed to print a product load listing within an IBM i (AS/400) environment. It is called from the main program <code>GS929P</code> (via the F15 function key) to generate a report of product load records from the <code>prdlodx</code> file, outputting the results to a printer file (<code>qsysprt</code>). The program does not have a user interface and focuses solely on reading database records and formatting them for printing. Below, I outline the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#process-steps-of-gs9295","title":"Process Steps of GS9295","text":"<p>The program follows a straightforward flow to produce a printed report of product load records. The steps are organized around the mainline logic and subroutines:</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#1-initialization-inzsr-subroutine","title":"1. Initialization (*INZSR Subroutine)","text":"<ul> <li>Purpose: Sets up initial parameters and variables.</li> <li>Steps:<ul> <li>Receives a single input parameter: <code>p$fgrp</code> (file group, 'Z' or 'G').</li> <li>Sets the report header (<code>c$hdr1</code>) to \"Product/Load Listing\" from the <code>hdr</code> array.</li> <li>Sets the print overflow flag (<code>prtovr</code>) to <code>*on</code> to ensure the header is printed initially.</li> <li>Calls the <code>opntbl</code> subroutine to open the database file.</li> <li>Initializes data structures:</li> <li>Time conversion (<code>t#time</code>) for date and time formatting.</li> <li>Date conversion (<code>d#cymd</code>) for handling date fields.</li> <li>Program status data structure (<code>psds##</code>) for job, user, and timestamp information.</li> <li>Printer file data structure (<code>prtf_opn</code>) for printer file details.</li> <li>Defines a string array (<code>str</code>) for formatting report lines (likely used for separators or labels).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#2-open-database-tables-opntbl-subroutine","title":"2. Open Database Tables (opntbl Subroutine)","text":"<ul> <li>Purpose: Opens the <code>prdlodx</code> file with the appropriate file override.</li> <li>Steps:<ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z'.</li> <li>Applies file overrides from the <code>ovg</code> (for 'G') or <code>ovz</code> (for 'Z') array using the <code>QCMDEXC</code> system API to override <code>prdlodx</code> to <code>gprdlodx</code> or <code>zprdlodx</code>.</li> <li>Opens the <code>prdlodx</code> file (input-only, <code>IF</code>, user-opened).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#3-print-listing-prtlist-subroutine","title":"3. Print Listing (prtlist Subroutine)","text":"<ul> <li>Purpose: Reads records from <code>prdlodx</code> and prints them to <code>qsysprt</code>.</li> <li>Steps:<ul> <li>Calls <code>openprtf</code> to open the printer file.</li> <li>Enters a loop until the last record is read (<code>*inlr = *on</code>):</li> <li>Reads the next record from <code>prdlodx</code>.</li> <li>If a record is found (<code>*inlr = *off</code>):<ul> <li>Checks for overflow and prints headers if needed (<code>ovrflo</code>).</li> <li>Prints the detail line (<code>dtl01</code>) using the <code>EXCEPT</code> operation.</li> </ul> </li> <li>Calls <code>closprtf</code> to close the printer file.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#4-process-overflow-ovrflo-subroutine","title":"4. Process Overflow (ovrflo Subroutine)","text":"<ul> <li>Purpose: Manages page overflow and prints report headers.</li> <li>Steps:<ul> <li>Checks if the overflow indicator (<code>*inof</code>) is on.</li> <li>If overflow occurs:</li> <li>Sets <code>prtovr</code> to <code>*on</code> to trigger header printing.</li> <li>Sets indicators <code>*in81-*in85</code> to '1' for header formatting.</li> <li>If <code>prtovr</code> is on:</li> <li>Prints the header (<code>hdr01</code>) using <code>EXCEPT</code>.</li> <li>Resets <code>prtovr</code> to <code>*off</code>.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#5-open-print-file-openprtf-subroutine","title":"5. Open Print File (openprtf Subroutine)","text":"<ul> <li>Purpose: Opens the <code>qsysprt</code> printer file with overrides.</li> <li>Steps:<ul> <li>Constructs an override command by concatenating <code>ovr(01)</code> and <code>ovr(02)</code> (defines page size, lines per inch, characters per inch, overflow line, output queue, form type, hold, and save options).</li> <li>Executes the override using <code>QCMDEXC</code>.</li> <li>Opens the <code>qsysprt</code> file (output, 164 characters wide, user-opened).</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#6-close-print-file-closprtf-subroutine","title":"6. Close Print File (closprtf Subroutine)","text":"<ul> <li>Purpose: Closes the <code>qsysprt</code> file and removes overrides.</li> <li>Steps:<ul> <li>Closes the <code>qsysprt</code> file.</li> <li>Executes the <code>DLTOVR</code> command from <code>ovr(03)</code> using <code>QCMDEXC</code> to delete the printer file override.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#7-program-termination","title":"7. Program Termination","text":"<ul> <li>Implicitly closes any open files and ends the program (no explicit <code>close *all</code> or <code>*inlr = *on</code> in the mainline, but standard RPG behavior applies).</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>File Group Handling:</li> <li> <p>The file group (<code>p$fgrp</code>) determines whether the program accesses <code>gprdlodx</code> ('G') or <code>zprdlodx</code> ('Z'), ensuring the correct product load file is used.</p> </li> <li> <p>Report Content:</p> </li> <li>The report includes all records from <code>prdlodx</code> without filtering (e.g., no exclusion of inactive or deleted records).</li> <li>Each detail line (<code>dtl01</code>) includes:<ul> <li><code>pdcono</code>: Company number.</li> <li><code>pdloc</code>: Loading location.</li> <li><code>pdprod</code>: Product code.</li> <li><code>pdcntr</code>: Container code.</li> <li><code>pdseq#</code>: Sequence number.</li> <li><code>pdracd</code>: Responsibility area code.</li> <li><code>pdmlcd</code>: Major location code.</li> <li><code>pdtype</code>: Product type.</li> <li><code>pdresp</code>: Responsible person.</li> <li><code>pdhazm</code>: Hazardous material code.</li> <li><code>pdprty</code>: Loading priority.</li> </ul> </li> <li> <p>The header (<code>hdr01</code>) includes:</p> <ul> <li>Company name (\"American Refining Group\").</li> <li>Report title (<code>c$hdr1</code>: \"Product/Load Listing\").</li> <li>Job name, program name, user, file group, page number, date, and time.</li> </ul> </li> <li> <p>Printer File Configuration:</p> </li> <li>The report is formatted with a page size of 68 lines by 164 characters, 8 lines per inch, 15 characters per inch, and an overflow at line 62.</li> <li> <p>The output is sent to the job\u2019s output queue (<code>OUTQ(*JOB)</code>), with the spool file held (<code>HOLD(*YES)</code>) and saved (<code>SAVE(*YES)</code>).</p> </li> <li> <p>No User Interaction:</p> </li> <li> <p>The program operates without a user interface, relying on the input parameter <code>p$fgrp</code> from the calling program (<code>GS929P</code>) and producing a report without requiring user input.</p> </li> <li> <p>No Error Handling:</p> </li> <li>The program does not implement explicit error checking or messaging for database or printer operations, assuming the input parameter and file access are valid.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. prdlodx: Product load file (input-only, <code>IF</code>, user-opened).    - Overrides to <code>gprdlodx</code> or <code>zprdlodx</code> based on <code>p$fgrp</code> ('G' or 'Z').</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes file override commands for <code>prdlodx</code> (<code>opntbl</code>) and <code>qsysprt</code> (<code>openprtf</code>, <code>closprtf</code>).</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS9295%20RPGLE/#summary","title":"Summary","text":"<p><code>GS9295</code> is a simple RPG program called by <code>GS929P</code> to generate a printed report of all product load records from the <code>prdlodx</code> file. It reads records sequentially, formats them into a detailed listing with headers, and outputs to the <code>qsysprt</code> printer file. The program enforces minimal business rules, primarily ensuring the correct file is accessed based on the file group and formatting the report with predefined attributes. It relies on <code>QCMDEXC</code> for file and printer overrides and assumes valid input from the calling program, with no user interaction or error handling.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/","title":"GS929P RPGLE","text":"<p>The RPG program <code>GS929P</code> is designed to manage product load entries within an IBM i (AS/400) environment. It is a workstation program that interacts with a display file and multiple database files to allow users to work with product load data, including creating, updating, copying, inactivating/reactivating, and displaying records. Below, I will outline the process steps of the program, list the external programs called, and identify the database tables used.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#process-steps-of-gs929p","title":"Process Steps of GS929P","text":"<p>The program follows a structured flow to manage product load entries through a subfile-based user interface. The steps are organized around the mainline logic and subroutines, as described below:</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#1-initialization-inzsr-subroutine","title":"1. Initialization (*INZSR Subroutine)","text":"<ul> <li>Purpose: Sets up initial parameters and defines variables.</li> <li>Steps:<ul> <li>Receives entry parameters: <code>p$mode</code> (run mode: 'MNT' for maintenance or 'INQ' for inquiry) and <code>p$fgrp</code> (file group: 'Z' or 'G').</li> <li>Defines fields for repositioning (<code>r$</code>), holding control fields (<code>h$</code>), and output parameters (<code>o$</code>).</li> <li>Initializes subfile control fields, such as <code>rrn1</code> (relative record number) and <code>pagsz1</code> (page size set to 14).</li> <li>Sets up headers, message handling fields, and key lists for database access.</li> <li>Captures the current date and time for use in the program.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#2-open-database-tables-opntbl-subroutine","title":"2. Open Database Tables (opntbl Subroutine)","text":"<ul> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li>Steps:<ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the corresponding file overrides (<code>ovg</code> or <code>ovz</code> arrays) using the <code>QCMDEXC</code> system API.</li> <li>Opens the following files: <code>prdlod1</code>, <code>prdlodrd</code>, <code>bicont</code>, <code>gsprod</code>, <code>gscntr1</code>, <code>gsmlcd</code>, and <code>inloc</code>.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#3-process-subfile-srsfl1-subroutine","title":"3. Process Subfile (srsfl1 Subroutine)","text":"<ul> <li>Purpose: Manages the display and interaction with the subfile (<code>sfl1</code>) for product load entries.</li> <li>Steps:<ul> <li>Clears the message subfile and writes initial messages.</li> <li>Initializes subfile mode (<code>sfmod1</code> set to '1' for folded display) and control fields (<code>c1co</code>, <code>c1loc</code>, etc.).</li> <li>Sets global protection mode (<code>*in70</code>) based on <code>p$mode</code> ('MNT' allows editing; 'INQ' protects fields).</li> <li>Repositions the file cursor using <code>sf1rep</code>.</li> <li>Enters a main loop (<code>sf1agn</code>) that:</li> <li>Handles repositioning if requested (<code>repsfl</code> flag).</li> <li>Displays the command line and message subfile.</li> <li>Checks for existing subfile records to enable/disable display (<code>*in41</code>).</li> <li>Toggles between folded/unfolded subfile mode (<code>*in45</code>).</li> <li>Displays the subfile control record (<code>sflctl1</code>) using <code>EXFMT</code>.</li> <li>Clears message subfile if needed.</li> <li>Processes user input based on function keys and direct access fields:<ul> <li>F03: Exits the program.</li> <li>F04: Calls the <code>prompt</code> subroutine for field prompting.</li> <li>F05: Refreshes the subfile by clearing reposition fields.</li> <li>F08: Toggles include/exclude inactive entries filter (<code>w$inact</code>).</li> <li>F15: Calls <code>GS9295</code> to print a product/load listing.</li> <li>Direct Access (d1opt): Processes direct input for creating or editing records (<code>sf1dir</code>).</li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li>Enter: Processes subfile changes (<code>sf1prc</code>).</li> <li>User Positioning: Repositions the subfile if control fields change (<code>sf1rep</code>).</li> <li>F10: Resets the cursor to the control record.</li> </ul> </li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#4-reposition-subfile-sf1rep-subroutine","title":"4. Reposition Subfile (sf1rep Subroutine)","text":"<ul> <li>Purpose: Clears and repositions the subfile based on user input.</li> <li>Steps:<ul> <li>Clears the subfile (<code>sf1clr</code>) and resets <code>rrn1</code>.</li> <li>Validates control field input (<code>sf1cte</code>).</li> <li>Positions the file cursor using <code>SETLL</code> on <code>prdlodrd</code>.</li> <li>Loads the subfile (<code>sf1lod</code>).</li> <li>Retains control field values for future repositioning.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#5-load-subfile-records-sf1lod-subroutine","title":"5. Load Subfile Records (sf1lod Subroutine)","text":"<ul> <li>Purpose: Populates the subfile with records from <code>prdlodrd</code>.</li> <li>Steps:<ul> <li>Sets the starting relative record number (<code>rrn1</code>) to the last saved value (<code>rrnsv1</code>).</li> <li>Loads up to <code>pagsz1</code> (14) records per page.</li> <li>Reads records from <code>prdlodrd</code> and applies filters:</li> <li>Excludes deleted/inactive records if <code>w$inact</code> is off.</li> <li>Filters based on control fields (<code>c1racd</code>, <code>c1mlcd</code>, <code>c1type</code>, <code>c1hazm</code>, <code>c1prty</code>, <code>c1resp</code>).</li> <li>Formats each subfile line (<code>sf1fmt</code>) and applies color coding (<code>sf1col</code>).</li> <li>Writes records to the subfile and updates <code>rrn1</code>.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#6-format-subfile-detail-line-sf1fmt-subroutine","title":"6. Format Subfile Detail Line (sf1fmt Subroutine)","text":"<ul> <li>Purpose: Populates subfile fields with data from the database record.</li> <li>Steps:<ul> <li>Clears the subfile record.</li> <li>Moves data from <code>prdlodrd</code> fields (e.g., <code>pdcono</code>, <code>pdloc</code>, <code>pdprod</code>) to subfile fields (<code>s1co</code>, <code>s1loc</code>, <code>s1prod</code>, etc.).</li> <li>Sets the delete flag (<code>s1del</code>) if the record is marked as deleted or inactive.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#7-subfile-color-coding-sf1col-subroutine","title":"7. Subfile Color Coding (sf1col Subroutine)","text":"<ul> <li>Purpose: Applies color coding to subfile records.</li> <li>Steps:<ul> <li>Sets indicator <code>*in72</code> to color the record blue if it is marked as deleted or inactive (<code>s1del</code> is 'D' or 'I').</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#8-direct-access-processing-sf1dir-subroutine","title":"8. Direct Access Processing (sf1dir Subroutine)","text":"<ul> <li>Purpose: Handles direct input for creating or editing records.</li> <li>Steps:<ul> <li>Validates input fields for option 1 (create):</li> <li>Checks for valid company number (<code>bicont</code>), loading location (<code>inloc</code>), product code (<code>gsprod</code>), container code (<code>gscntr1</code>), responsibility area/major location (<code>gsmlcd</code>), and product type (<code>BULK</code>, <code>PACKAGED</code>, <code>RAILCAR</code>).</li> <li>Ensures load priority is not zero and sequence number is valid.</li> <li>Verifies the record does not already exist (<code>klsfl1</code>).</li> <li>Processes the selected option (1: create, 2: change, 3: copy, 4: inactivate/reactivate, 5: display) by calling appropriate subroutines (<code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s03</code>, <code>sf1s04</code>, <code>sf1s05</code>).</li> <li>Clears direct input fields upon successful processing.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#9-process-subfile-on-enter-sf1prc-subroutine","title":"9. Process Subfile on Enter (sf1prc Subroutine)","text":"<ul> <li>Purpose: Processes changes made to subfile records when the user presses Enter.</li> <li>Steps:<ul> <li>Reads changed subfile records (<code>READC sfl1</code>).</li> <li>Calls <code>sf1chg</code> to process each changed record.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#10-process-subfile-record-change-sf1chg-subroutine","title":"10. Process Subfile Record Change (sf1chg Subroutine)","text":"<ul> <li>Purpose: Handles changes to a subfile record based on the selected option.</li> <li>Steps:<ul> <li>Retains selected values in <code>s$</code> fields.</li> <li>Processes options:</li> <li>Option 2: Change (calls <code>sf1s02</code> if not deleted/inactive).</li> <li>Option 3: Copy (calls <code>sf1s03</code>).</li> <li>Option 4: Inactivate/Reactivate (calls <code>sf1s04</code>).</li> <li>Option 5: Display (calls <code>sf1s05</code>).</li> <li>Updates the subfile record after processing.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#11-subfile-option-subroutines-sf1s01-sf1s02-sf1s03-sf1s04-sf1s05","title":"11. Subfile Option Subroutines (sf1s01, sf1s02, sf1s03, sf1s04, sf1s05)","text":"<ul> <li>sf1s01 (Create):<ul> <li>Calls <code>GS929</code> with parameters to create a new record.</li> <li>Sends a confirmation message if successful (<code>o$flag = '1'</code>).</li> <li>Triggers subfile repositioning.</li> </ul> </li> <li>sf1s02 (Change):<ul> <li>Validates that the record is not deleted/inactive.</li> <li>Calls <code>GS929</code> to update the record.</li> <li>Sends a confirmation message if successful.</li> </ul> </li> <li>sf1s03 (Copy):<ul> <li>Calls <code>sf1cpy</code> to handle copying via a window interface.</li> </ul> </li> <li>sf1s04 (Inactivate/Reactivate):<ul> <li>Calls <code>GS9294</code> to inactivate or reactivate the record.</li> <li>Sends a confirmation message based on the return flag ('I' for inactivated, 'A' for reactivated).</li> </ul> </li> <li>sf1s05 (Display):<ul> <li>Calls <code>GS929</code> in inquiry mode to display the record.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#12-copy-product-load-records-sf1cpy-subroutine","title":"12. Copy Product Load Records (sf1cpy Subroutine)","text":"<ul> <li>Purpose: Manages the copy operation via a window (<code>sflcpy1</code>).</li> <li>Steps:<ul> <li>Initializes window fields and retrieves company name (<code>bcname</code>).</li> <li>Displays the copy window and processes input:</li> <li>F04: Calls <code>prompt</code> for field prompting.</li> <li>F12: Cancels the copy operation.</li> <li>F22: Processes the copy input.</li> <li>Validates input (<code>sf1cpyedt</code>) and calls <code>GS9293</code> to create the copied record.</li> <li>Sends a confirmation message and triggers subfile repositioning.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#13-edit-copy-window-input-sf1cpyedt-subroutine","title":"13. Edit Copy Window Input (sf1cpyedt Subroutine)","text":"<ul> <li>Purpose: Validates input in the copy window.</li> <li>Steps:<ul> <li>Checks for valid loading location, product code, container code, responsibility area/major location, load priority, sequence number, and product type.</li> <li>Ensures the target record does not already exist.</li> <li>Sets error indicators and messages if validation fails.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#14-field-prompting-prompt-subroutine","title":"14. Field Prompting (prompt Subroutine)","text":"<ul> <li>Purpose: Provides lookup functionality for input fields.</li> <li>Steps:<ul> <li>Based on the current record format (<code>SFLCTL1</code> or <code>SFLCPY1</code>) and field, calls external programs:</li> <li><code>LINLOC</code> for location (<code>D1LOC</code>, <code>C1LOC</code>, <code>S$TLOC</code>).</li> <li><code>LGSPROD</code> for product code (<code>D1PROD</code>, <code>C1PROD</code>, <code>S$TPROD</code>).</li> <li><code>LGSCNTR1</code> for container code (<code>D1CNTR</code>, <code>C1CNTR</code>, <code>S$TCNTR</code>).</li> <li><code>LGSMLCD</code> for responsibility area/major location (<code>D1RACD</code>, <code>C1RACD</code>, <code>S$TRACD</code>).</li> <li>Updates fields with returned values if valid.</li> </ul> </li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#15-message-handling-addmsg-wrtmsg-clrmsg-subroutines","title":"15. Message Handling (addmsg, wrtmsg, clrmsg Subroutines)","text":"<ul> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>wrtmsg: Writes the message subfile (<code>msgctl</code>) for display.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code> and resets the message flag.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#16-program-termination","title":"16. Program Termination","text":"<ul> <li>Closes all files and sets <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. QCMDEXC: Executes file override commands for database files. 2. GS929: Handles create, change, and display operations for product load records (called in <code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s05</code>). 3. GS9293: Processes the copy operation for product load records (called in <code>sf1cpy</code>). 4. GS9294: Manages inactivate/reactivate operations (called in <code>sf1s04</code>). 5. GS9295: Generates a product/load listing (called for F15). 6. LINLOC: Provides lookup for loading location (called in <code>prompt</code>). 7. LGSPROD: Provides lookup for product code (called in <code>prompt</code>). 8. LGSCNTR1: Provides lookup for container code (called in <code>prompt</code>). 9. LGSMLCD: Provides lookup for responsibility area/major location (called in <code>prompt</code>). 10. QMHSNDPM: Sends messages to the program message queue (called in <code>addmsg</code>). 11. QMHRMVPM: Removes messages from the program message queue (called in <code>clrmsg</code>).</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files (all input-only and user-opened): 1. prdlod1: Primary product load file. 2. prdlodrd: Product load file with renamed record format (<code>prdlodpf</code> to <code>prdlodpr</code>). 3. bicont: Company file for validating company numbers. 4. gsprod: Product file for validating product codes. 5. gscntr1: Container file for validating container codes. 6. gsmlcd: Responsibility area/major location file for validation. 7. inloc: Location file for validating loading locations.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/GS929P%20RPGLE/#summary","title":"Summary","text":"<p><code>GS929P</code> is a comprehensive RPG program for managing product load entries through a subfile-based interface. It supports creating, changing, copying, inactivating/reactivating, and displaying records, with robust validation and error handling. The program integrates with multiple database files and external programs to provide lookup and processing capabilities, ensuring data integrity and user interaction efficiency.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/","title":"Summary GS929P RPGLE","text":""},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#list-of-use-cases-implemented-in-the-gs929-program-call-stack","title":"List of Use Cases Implemented in the GS929 Program Call Stack","text":"<p>The call stack consists of five RPG programs (<code>GS929P</code>, <code>GS929</code>, <code>GS9293</code>, <code>GS9294</code>, <code>GS9295</code>) that collectively manage product load records in an IBM i (AS/400) environment. Below is a comprehensive list of use cases implemented across these programs, derived from their functionality and interactions. Each use case represents a distinct user-driven or system-driven process for managing product load data.</p> <ol> <li>Browse Product Load Records (GS929P):</li> <li>Description: Allows users to view a list of product load records in a subfile, with options to filter by various criteria (e.g., company, location, product, container, priority, sequence number, responsibility area, major location, product type, hazardous material code, or responsible person) and toggle the inclusion of inactive records.</li> <li>Trigger: Initiated when the user runs <code>GS929P</code> in inquiry ('INQ') or maintenance ('MNT') mode without specifying a direct record.</li> <li> <p>Outcome: Displays a scrollable list of records, allowing navigation and selection for further actions.</p> </li> <li> <p>Create a New Product Load Record (GS929P, GS929):</p> </li> <li>Description: Enables users to create a new product load record by entering key fields and detailed data, with validation to ensure the record does not already exist and meets data requirements.</li> <li>Trigger: User selects option '1' in the subfile direct access field (<code>d1opt</code>) in <code>GS929P</code>, which calls <code>GS929</code> to capture detailed input.</li> <li> <p>Outcome: A new record is written to the <code>prdlod1</code> file, and the subfile is refreshed.</p> </li> <li> <p>Update an Existing Product Load Record (GS929P, GS929):</p> </li> <li>Description: Allows users to modify an existing product load record\u2019s key fields (e.g., priority, sequence number) or non-key fields (e.g., descriptions, scheduling), ensuring the updated key combination is unique.</li> <li>Trigger: User selects option '2' in the subfile (<code>s1opt</code>) in <code>GS929P</code>, which calls <code>GS929</code> for editing.</li> <li> <p>Outcome: The record is updated in <code>prdlod1</code>, and a confirmation message is displayed.</p> </li> <li> <p>Copy a Product Load Record (GS929P, GS9293):</p> </li> <li>Description: Permits users to duplicate an existing product load record to a new record with different key values, copying all non-key fields verbatim.</li> <li>Trigger: User selects option '3' in the subfile (<code>s1opt</code>) in <code>GS929P</code>, which opens a copy window (<code>sflcpy1</code>) and calls <code>GS9293</code> to perform the copy.</li> <li> <p>Outcome: A new record is created in <code>prdlod1</code>, and the subfile is refreshed.</p> </li> <li> <p>Inactivate or Reactivate a Product Load Record (GS929P, GS9294):</p> </li> <li>Description: Allows users to toggle a product load record\u2019s status between active ('A') and inactive ('I') via a confirmation window.</li> <li>Trigger: User selects option '4' in the subfile (<code>s1opt</code>) in <code>GS929P</code>, which calls <code>GS9294</code> to display the confirmation window and update the status.</li> <li> <p>Outcome: The record\u2019s <code>pddel</code> field is updated to 'A' or 'I', and a confirmation message is sent.</p> </li> <li> <p>Display a Product Load Record (GS929P, GS929):</p> </li> <li>Description: Enables users to view the details of a product load record in a read-only mode without modifying it.</li> <li>Trigger: User selects option '5' in the subfile (<code>s1opt</code>) in <code>GS929P</code>, which calls <code>GS929</code> in inquiry mode.</li> <li> <p>Outcome: The record details are displayed across two panel formats (<code>FMT01</code>, <code>FMT02</code>) without allowing changes.</p> </li> <li> <p>Print a Product Load Listing (GS929P, GS9295):</p> </li> <li>Description: Generates a printed report of all product load records, including key fields and additional details, formatted for a printer.</li> <li>Trigger: User presses F15 in <code>GS929P</code>, which calls <code>GS9295</code> to produce the report.</li> <li>Outcome: A spool file is generated in the job\u2019s output queue with the product load listing.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#function-requirement-document-product-load-management-function","title":"Function Requirement Document: Product Load Management Function","text":""},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#function-name","title":"Function Name","text":"<p><code>manageProductLoad</code></p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#purpose","title":"Purpose","text":"<p>To encapsulate the core functionality of the GS929 call stack for managing product load records, including browsing, creating, updating, copying, inactivating/reactivating, and printing records, using input parameters instead of screen interactions.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Operation: String (e.g., 'BROWSE', 'CREATE', 'UPDATE', 'COPY', 'INACTIVATE', 'REACTIVATE', 'DISPLAY', 'PRINT').</li> <li>FileGroup: String ('G' or 'Z') \u2013 Specifies the file group (<code>gprdlod1</code> or <code>zprdlod1</code>).</li> <li>RecordKey (for all operations except BROWSE and PRINT):</li> <li><code>company</code>: Numeric (2) \u2013 Company number.</li> <li><code>location</code>: String (3) \u2013 Loading location.</li> <li><code>product</code>: String (4) \u2013 Product code.</li> <li><code>container</code>: String (3) \u2013 Container code.</li> <li><code>priority</code>: Numeric (1) \u2013 Loading priority (1-9).</li> <li><code>sequence</code>: Numeric (3) \u2013 Sequence number.</li> <li><code>respArea</code>: String (5) \u2013 Responsibility area code.</li> <li><code>majorLoc</code>: String (4) \u2013 Major location code.</li> <li><code>prodType</code>: String (30) \u2013 Product type ('BULK', 'PACKAGED', 'RAILCAR').</li> <li>RecordData (for CREATE, UPDATE, COPY):</li> <li><code>categoryDesc</code>: String \u2013 Category description (non-blank).</li> <li><code>commonNames</code>: String \u2013 Common names (non-blank).</li> <li><code>status</code>: String ('A' or 'I') \u2013 Record status.</li> <li><code>carrierType</code>: String ('TRUCK' or 'RAILCAR') \u2013 Carrier type.</li> <li><code>truckBlend</code>: String ('Y' or 'N') \u2013 Truck blend indicator.</li> <li><code>respPerson</code>: String \u2013 Responsible person (non-blank).</li> <li><code>hazmatCode</code>: String ('X' or blank) \u2013 Hazardous material code.</li> <li><code>schedule</code>: Array of String (7 days, 25 slots each, 'Y' or 'N') \u2013 Scheduling flags.</li> <li>CopyToKey (for COPY):</li> <li>Same fields as <code>RecordKey</code> but for the target record.</li> <li>FilterCriteria (for BROWSE):</li> <li><code>company</code>, <code>location</code>, <code>product</code>, <code>container</code>, <code>priority</code>, <code>sequence</code>, <code>respArea</code>, <code>majorLoc</code>, <code>prodType</code>, <code>hazmatCode</code>, <code>respPerson</code>: Optional fields for filtering.</li> <li><code>includeInactive</code>: Boolean \u2013 Include inactive records.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Status: String \u2013 'SUCCESS', 'ERROR', or specific status ('A' for reactivated, 'I' for inactivated).</li> <li>Message: String \u2013 Error or confirmation message (e.g., \"Record created successfully\").</li> <li>RecordList (for BROWSE): Array of records containing <code>RecordKey</code> and <code>RecordData</code> fields.</li> <li>SpoolFile (for PRINT): Reference to the generated spool file.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>FileGroup</code> is 'G' or 'Z'.</li> <li>For CREATE, UPDATE, COPY: Validate <code>RecordKey</code> fields (non-blank, valid ranges, <code>prodType</code> in ['BULK', 'PACKAGED', 'RAILCAR'], <code>priority</code> in 1-9).</li> <li>For CREATE, UPDATE, COPY: Validate <code>RecordData</code> (<code>categoryDesc</code>, <code>commonNames</code>, <code>respPerson</code> non-blank; <code>status</code> in ['A', 'I']; <code>carrierType</code> in ['TRUCK', 'RAILCAR']; <code>truckBlend</code> in ['Y', 'N']; <code>hazmatCode</code> in ['X', '']; at least one <code>schedule</code> slot is 'Y').</li> <li>For COPY: Validate <code>CopyToKey</code> fields similarly.</li> <li> <p>For BROWSE: Validate optional <code>FilterCriteria</code> fields for format.</p> </li> <li> <p>Open Database File:</p> </li> <li>Apply file override for <code>prdlod1</code> (or <code>prdlodx</code> for PRINT) based on <code>FileGroup</code> using <code>QCMDEXC</code> (<code>gprdlod1</code> for 'G', <code>zprdlod1</code> for 'Z').</li> <li> <p>Open the file (<code>prdlod1</code> for CREATE, UPDATE, COPY, INACTIVATE, REACTIVATE, DISPLAY; <code>prdlodx</code> for PRINT).</p> </li> <li> <p>Execute Operation:</p> </li> <li>BROWSE:<ul> <li>Read <code>prdlod1</code> records, applying <code>FilterCriteria</code>.</li> <li>Exclude inactive records (<code>pddel = 'I'</code>) if <code>includeInactive</code> is false.</li> <li>Return matching records in <code>RecordList</code>.</li> </ul> </li> <li>CREATE:<ul> <li>Check if the record with <code>RecordKey</code> exists in <code>prdlod1</code> using key list.</li> <li>If not exists, create a new record with <code>RecordKey</code> and <code>RecordData</code>, set <code>pddel</code> to 'A', and write to <code>prdlod1</code>.</li> <li>Return <code>Status = 'SUCCESS'</code>, <code>Message = 'Record created successfully'</code>.</li> </ul> </li> <li>UPDATE:<ul> <li>Chain to <code>prdlod1</code> with <code>RecordKey</code>.</li> <li>If exists and not inactive (<code>pddel \u2260 'I'</code>), update with new <code>RecordKey</code> and <code>RecordData</code> if key fields changed (ensure new key is unique).</li> <li>Return <code>Status = 'SUCCESS'</code>, <code>Message = 'Record updated successfully'</code>.</li> </ul> </li> <li>COPY:<ul> <li>Chain to <code>prdlod1</code> with <code>RecordKey</code> to retrieve source record.</li> <li>If exists, chain to <code>prdlod1</code> with <code>CopyToKey</code> to ensure it does not exist.</li> <li>Create a new record with <code>CopyToKey</code> and source <code>RecordData</code>, set <code>pddel</code> to 'A', and write to <code>prdlod1</code>.</li> <li>Return <code>Status = 'SUCCESS'</code>, <code>Message = 'Record copied successfully'</code>.</li> </ul> </li> <li>INACTIVATE:<ul> <li>Chain to <code>prdlod1</code> with <code>RecordKey</code>.</li> <li>If exists and not inactive (<code>pddel \u2260 'I'</code>), set <code>pddel</code> to 'I' and update the record.</li> <li>Return <code>Status = 'I'</code>, <code>Message = 'Record inactivated'</code>.</li> </ul> </li> <li>REACTIVATE:<ul> <li>Chain to <code>prdlod1</code> with <code>RecordKey</code>.</li> <li>If exists and inactive (<code>pddel = 'I'</code>), set <code>pddel</code> to 'A' and update the record.</li> <li>Return <code>Status = 'A'</code>, <code>Message = 'Record reactivated'</code>.</li> </ul> </li> <li>DISPLAY:<ul> <li>Chain to <code>prdlod1</code> with <code>RecordKey</code>.</li> <li>If exists, return <code>RecordKey</code> and <code>RecordData</code> in <code>RecordList</code> (single record).</li> <li>Return <code>Status = 'SUCCESS'</code>, <code>Message = 'Record retrieved'</code>.</li> </ul> </li> <li> <p>PRINT:</p> <ul> <li>Open <code>qsysprt</code> with overrides (page size 68x164, 8 LPI, 15 CPI, overflow at line 62, hold and save spool file).</li> <li>Read all <code>prdlodx</code> records sequentially.</li> <li>Print headers (company name, report title, job/user info, date, time, page) and detail lines (<code>pdcono</code>, <code>pdloc</code>, <code>pdprod</code>, <code>pdcntr</code>, <code>pdseq#</code>, <code>pdracd</code>, <code>pdmlcd</code>, <code>pdtype</code>, <code>pdresp</code>, <code>pdhazm</code>, <code>pdprty</code>) with overflow handling.</li> <li>Close <code>qsysprt</code> and delete overrides.</li> <li>Return <code>Status = 'SUCCESS'</code>, <code>Message = 'Report generated'</code>, <code>SpoolFile</code> reference.</li> </ul> </li> <li> <p>Close Files:</p> </li> <li>Close <code>prdlod1</code> or <code>prdlodx</code> and <code>qsysprt</code> (for PRINT).</li> <li>Remove any file overrides using <code>QCMDEXC</code>.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Record Existence:</li> <li>CREATE and COPY: The target record must not exist in <code>prdlod1</code>.</li> <li>UPDATE, INACTIVATE, REACTIVATE, DISPLAY: The record must exist.</li> <li> <p>COPY: The source record must exist.</p> </li> <li> <p>Field Validation:</p> </li> <li>Key fields: Non-blank, <code>priority</code> in 1-9, <code>prodType</code> in ['BULK', 'PACKAGED', 'RAILCAR'].</li> <li> <p>Data fields: <code>categoryDesc</code>, <code>commonNames</code>, <code>respPerson</code> non-blank; <code>status</code> in ['A', 'I']; <code>carrierType</code> in ['TRUCK', 'RAILCAR']; <code>truckBlend</code> in ['Y', 'N']; <code>hazmatCode</code> in ['X', '']; at least one <code>schedule</code> slot is 'Y'.</p> </li> <li> <p>Status Transitions:</p> </li> <li>INACTIVATE: Only active records (<code>pddel \u2260 'I'</code>) can be inactivated (<code>pddel = 'I'</code>).</li> <li> <p>REACTIVATE: Only inactive records (<code>pddel = 'I'</code>) can be reactivated (<code>pddel = 'A'</code>).</p> </li> <li> <p>File Group:</p> </li> <li> <p><code>FileGroup</code> ('G' or 'Z') determines the file (<code>gprdlod1</code> or <code>zprdlod1</code>/<code>gprdlodx</code> or <code>zprdlodx</code>).</p> </li> <li> <p>Report Formatting (PRINT):</p> </li> <li>Includes all records without filtering.</li> <li>Formatted with headers (job, user, date, time, page) and detail lines, with overflow at line 62.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Page Numbering (PRINT): Incremented automatically by the printer file (<code>page</code> field).</li> <li>Date and Time Formatting: Uses <code>ps#mdy</code> and <code>ps#hms</code> from <code>psds##</code> to format the current date (<code>t#mdcy</code>) and time (<code>t#hms</code>) in the report header.</li> <li>Overflow Handling (PRINT): Triggers header reprint when the overflow indicator (<code>*inof</code>) is set at line 62.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#error-handling","title":"Error Handling","text":"<ul> <li>Return <code>Status = 'ERROR'</code> and a specific <code>Message</code> for:</li> <li>Invalid <code>FileGroup</code>.</li> <li>Missing or invalid key/data fields.</li> <li>Record already exists (CREATE, COPY).</li> <li>Record does not exist (UPDATE, INACTIVATE, REACTIVATE, DISPLAY).</li> <li>Invalid status transitions (INACTIVATE, REACTIVATE).</li> </ul> <p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#function-requirement-document-product-load-management","title":"Function Requirement Document: Product Load Management","text":""},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#function-name_1","title":"Function Name","text":"<p><code>manageProductLoad</code></p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#purpose_1","title":"Purpose","text":"<p>To manage product load records by browsing, creating, updating, copying, inactivating/reactivating, displaying, or printing records using input parameters.</p>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#inputs_1","title":"Inputs","text":"<ul> <li>Operation: String ('BROWSE', 'CREATE', 'UPDATE', 'COPY', 'INACTIVATE', 'REACTIVATE', 'DISPLAY', 'PRINT').</li> <li>FileGroup: String ('G' or 'Z').</li> <li>RecordKey (except BROWSE, PRINT):</li> <li><code>company</code>: Numeric (2).</li> <li><code>location</code>: String (3).</li> <li><code>product</code>: String (4).</li> <li><code>container</code>: String (3).</li> <li><code>priority</code>: Numeric (1, 1-9).</li> <li><code>sequence</code>: Numeric (3).</li> <li><code>respArea</code>: String (5).</li> <li><code>majorLoc</code>: String (4).</li> <li><code>prodType</code>: String (30, 'BULK', 'PACKAGED', 'RAILCAR').</li> <li>RecordData (CREATE, UPDATE, COPY):</li> <li><code>categoryDesc</code>: String (non-blank).</li> <li><code>commonNames</code>: String (non-blank).</li> <li><code>status</code>: String ('A', 'I').</li> <li><code>carrierType</code>: String ('TRUCK', 'RAILCAR').</li> <li><code>truckBlend</code>: String ('Y', 'N').</li> <li><code>respPerson</code>: String (non-blank).</li> <li><code>hazmatCode</code>: String ('X', '').</li> <li><code>schedule</code>: Array of String (7 days, 25 slots, 'Y' or 'N').</li> <li>CopyToKey (COPY): Same as <code>RecordKey</code>.</li> <li>FilterCriteria (BROWSE): Optional <code>RecordKey</code> fields plus <code>hazmatCode</code>, <code>respPerson</code>, <code>includeInactive</code> (Boolean).</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#outputs_1","title":"Outputs","text":"<ul> <li>Status: String ('SUCCESS', 'ERROR', 'A', 'I').</li> <li>Message: String (e.g., \"Record created successfully\").</li> <li>RecordList (BROWSE, DISPLAY): Array of <code>RecordKey</code> and <code>RecordData</code>.</li> <li>SpoolFile (PRINT): Spool file reference.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#process-steps_1","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Validate <code>FileGroup</code>, <code>RecordKey</code>, <code>RecordData</code>, <code>CopyToKey</code>, <code>FilterCriteria</code>.</li> <li>Open File:</li> <li>Override and open <code>prdlod1</code> (or <code>prdlodx</code> for PRINT) based on <code>FileGroup</code>.</li> <li>Execute Operation:</li> <li>BROWSE: Filter and return records in <code>RecordList</code>.</li> <li>CREATE: Write new record if unique.</li> <li>UPDATE: Update existing record if unique.</li> <li>COPY: Copy source record to new key if unique.</li> <li>INACTIVATE: Set <code>pddel</code> to 'I' if active.</li> <li>REACTIVATE: Set <code>pddel</code> to 'A' if inactive.</li> <li>DISPLAY: Return record details.</li> <li>PRINT: Print all records with headers.</li> <li>Close Files: Close files and remove overrides.</li> </ol>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#business-rules_1","title":"Business Rules","text":"<ul> <li>Record must not exist for CREATE, COPY; must exist for UPDATE, INACTIVATE, REACTIVATE, DISPLAY.</li> <li>Key fields: Non-blank, <code>priority</code> 1-9, <code>prodType</code> in ['BULK', 'PACKAGED', 'RAILCAR'].</li> <li>Data fields: Non-blank <code>categoryDesc</code>, <code>commonNames</code>, <code>respPerson</code>; valid <code>status</code>, <code>carrierType</code>, <code>truckBlend</code>, <code>hazmatCode</code>; at least one <code>schedule</code> 'Y'.</li> <li>INACTIVATE: Only active records. REACTIVATE: Only inactive records.</li> <li>PRINT: All records, formatted with headers, overflow at line 62.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#calculations_1","title":"Calculations","text":"<ul> <li>Page Numbering (PRINT): Auto-incremented by printer file.</li> <li>Date/Time: Formatted from <code>ps#mdy</code>, <code>ps#hms</code> for report header.</li> </ul>"},{"location":"order-entry/GS929P%20Prod%20Loading%20File%20Maint-Inq/Summary%20GS929P%20RPGLE/#error-handling_1","title":"Error Handling","text":"<ul> <li>Return 'ERROR' for invalid inputs, record existence issues, or status transition violations.</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20OCL/","title":"GS973 OCL","text":""},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>This .OCL file (GS973.ocl36.txt) appears to be an Operation Control Language (OCL) procedure for IBM System/36 (indicated by the .ocl36 extension and syntax), designed to set up and execute an RPG (Report Program Generator) program named GS973. The OCL acts as a job control script to prepare the environment for running the RPG program, which handles \"Product / Container Master Maintenance\" (likely CRUD operations on product and container data masters). The OCL procedure is named SCPROCP and accepts parameters (with the 9th parameter, ?9?, used as a variable placeholder, probably for a library prefix).</p> <p>The process steps executed by this OCL procedure are as follows:</p> <ol> <li> <p>Procedure Initialization and Parameter Handling: The procedure starts with SCPROCP and a parameter list (,,,,,,,,?9?), where empty commas represent default or unused parameters, and ?9? is a substitutable variable (likely user-supplied at runtime, e.g., a library name like 'PROD' or 'TEST').</p> </li> <li> <p>Environment Setup via GSY2K: The statement <code>// GSY2K</code> invokes or includes a separate procedure or command named GSY2K. This is likely a setup routine (possibly related to Year 2000 compliance, given the \"Y2K\" naming convention), which configures the runtime environment, such as date formats, global variables, or system settings before the main program loads.</p> </li> <li> <p>Load the Main RPG Program: The command <code>// LOAD GS973</code> loads the compiled RPG program GS973 into memory, preparing it for execution.</p> </li> <li> <p>File Definitions and Assignments: Four <code>// FILE</code> statements define and assign database files to the program, specifying their labels (physical file names prefixed with the ?9? parameter) and disposition (DISP-SHR for shared access, allowing concurrent read/write by other jobs):</p> </li> <li><code>// FILE NAME-PRCNTR,LABEL-?9?PRCNTR,DISP-SHR</code>: Assigns logical file PRCNTR to physical file ?9?PRCNTR.</li> <li><code>// FILE NAME-GSPROD,LABEL-?9?GSPROD,DISP-SHR</code>: Assigns logical file GSPROD to physical file ?9?GSPROD.</li> <li><code>// FILE NAME-GSCNTR,LABEL-?9?GSCNTR,DISP-SHR</code>: Assigns logical file GSCNTR to physical file ?9?GSCNTR.</li> <li><code>// FILE NAME-INCONT,LABEL-?9?INCONT,DISP-SHR</code>: Assigns logical file INCONT to physical file ?9?INCONT.</li> </ol> <p>These files are opened in shared mode, enabling the RPG program to access them for reading/writing data related to product and container maintenance.</p> <ol> <li>Execute the Program: The <code>// RUN</code> command initiates the execution of the loaded GS973 RPG program, which performs the core business logic (e.g., updating master records) using the defined files.</li> </ol> <p>The OCL procedure ends after the program run, with any output or errors handled by the system. Note that the actual internal logic of the RPG program GS973 (e.g., calculations, screen interactions, or reports) is not detailed in the OCL; this file only orchestrates its execution.</p>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>GS973: The primary RPG program loaded and executed for the maintenance tasks. This is the main external program being invoked.</li> <li>GSY2K: Likely a separate OCL procedure or utility program called at the start for environment setup (e.g., Y2K date handling). No other details are provided in the file.</li> </ul> <p>No additional subprograms or calls are explicitly mentioned in the OCL.</p>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20OCL/#tables-used","title":"Tables Used","text":"<p>The following database files (tables) are defined and used by the RPG program GS973. These are likely keyed physical or logical files in the System/36 database, containing data for products and containers:</p> File Name (Logical) Physical Label Description/Purpose (Inferred) Access Mode PRCNTR ?9?PRCNTR Likely a product-container relation or cross-reference table. Shared (DISP-SHR) GSPROD ?9?GSPROD Product master table, storing core product details. Shared (DISP-SHR) GSCNTR ?9?GSCNTR Container master table, storing container specifications. Shared (DISP-SHR) INCONT ?9?INCONT Possibly an input control or inventory container table for incoming data. Shared (DISP-SHR) <p>These files are prefixed with the runtime parameter ?9? (e.g., if ?9? is 'LIB/', the physical file for PRCNTR would be 'LIB/PRCNTR'). The RPG program would perform operations like chain, read, update, or write on these files.</p>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20RPG36/","title":"GS973 RPG36","text":""},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20RPG36/#process-steps-of-the-rpg-program-gs973","title":"Process Steps of the RPG Program GS973","text":"<p>This RPG III program (for IBM System/36) performs interactive maintenance on product-container master records. It uses a workstation display file (SCREEN) with two screen formats: S1 (input/validation screen for company, product, and container) and S2 (review/update screen showing descriptions, last sold date, and status). The program runs in a loop until exit, handling user input, validations, data retrieval from files, and updates. It initializes the current date (in YYYYMMDD format) for potential updates to the \"last sold date\" field.</p> <p>The high-level process flow is as follows:</p> <ol> <li>Initialization and Main Loop Setup:</li> <li>The program enters a main loop (<code>DOWNE 'EJ'</code>) that continues until an exit condition (e.g., command key for end job) is met.</li> <li>It checks the current screen ID (@SFID) and branches to the appropriate subroutine: $SBLK (for initial blank screen), $S1 (for S1 screen processing), or $S2 (for S2 screen processing).</li> <li>After processing, it calls $XCPT to display the next screen, then reads user input from the SCREEN file (with LR indicator for last record if needed).</li> <li> <p>Command keys (e.g., via @VKEY from INFDS) trigger specific actions like enter (0) or command key processing (2).</p> </li> <li> <p>Initial Blank Screen Handling ($SBLK):</p> </li> <li>Clears fields: company (CO), product (PROD), container (CNTR).</li> <li>Sets indicator 99 (likely for conditioning fields or highlights).</li> <li>Prepares the current date in YYYYMMDD format (using TIME opcode and calculations) for potential use in updates.</li> <li> <p>Sets @SFNEX and @SFID to 'S1' to transition to the input screen.</p> </li> <li> <p>S1 Screen Processing ($S1):</p> </li> <li>Handles input from S1 screen (company, product, container).</li> <li> <p>Branches based on @VKEY: to $S1ENT for ENTER key (validations and data retrieval) or $S1CK for command keys.</p> </li> <li> <p>S1 Validations and Data Retrieval ($S1ENT):</p> </li> <li>Validates company (CO): Must not be zero/blank; chains to INCONT file to confirm existence (error if not found: \"COMPANY NOT IN CONTROL FILE\").</li> <li>Validates product (PROD): Must not be blank (error: \"PRODUCT CANNOT BE BLANK\").</li> <li>Container (CNTR): Validation for blank is commented out, so it appears optional.</li> <li>Chains to PRCNTR using SCKEY (composite key: likely CO + PROD + CNTR) to retrieve record.<ul> <li>Error if not found: \"INVALID COMBINATION ENTERED\".</li> <li>If found, checks deletion flag (PNDEL='D'): Error \"THIS RECORD MARKED AS DELETED\".</li> <li>Checks inactive flag (PNDEL='I'): Error \"THIS RECORD MARKED AS INACTIVE\".</li> </ul> </li> <li>Retrieves product description: Chains to GSPROD using PRDKEY (CO + PROD), moves TPDESC to PRDESC.</li> <li>Retrieves container description: Chains to GSCNTR using CNTR, moves TCDESC to CNDESC.</li> <li> <p>If all valid, sets @SFNEX to 'S2' to transition to review screen.</p> </li> <li> <p>S1 Command Key Handling ($S1CK):</p> </li> <li> <p>KG (likely F3 or exit key): Sets @SFNEX to 'EJ' to end the loop and job.</p> </li> <li> <p>S2 Screen Processing ($S2):</p> </li> <li>Handles input from S2 screen (displays retrieved data plus status input).</li> <li> <p>Branches based on @VKEY: to $S2ENT for ENTER key (update processing) or $S2CK for command keys.</p> </li> <li> <p>S2 Update Processing ($S2ENT):</p> </li> <li>Re-chains to PRCNTR to confirm record.</li> <li>If status (STAT) is 'A' (accept), sets indicator 51 and outputs update to PRCNTR: Updates last sold date (PNLSD8) to current date and status (PNSTAT) to 'A'.</li> <li>Calls CLRFLD to blank out fields (STAT, etc.) and reset to S1 screen.</li> <li> <p>If not 'A', no update occurs, and it resets to S1.</p> </li> <li> <p>S2 Command Key Handling ($S2CK):</p> </li> <li>KA (likely reset/clear key): Clears all fields (CO, PROD, CNTR, STAT, PRDESC, CNDESC) and resets to S1 screen.</li> <li> <p>KG: Sets @SFNEX to 'EJ' to exit.</p> </li> <li> <p>Screen Display and Indicator Management ($XCPT):</p> </li> <li>Increments screen counter (@CCNT).</li> <li>If @SFNEX matches @SFID, sets indicator 98 (likely for refresh).</li> <li>Outputs the appropriate screen format: @S1 or @S2, including fields like CO, PROD, CNTR, messages, descriptions, last sold date (formatted as MM/DD/YY), and status.</li> <li> <p>Calls CLRIND to reset error indicators (90-83) and blank messages.</p> </li> <li> <p>Field Clearing and Reset (CLRFLD and CLRIND):</p> <ul> <li>CLRFLD: Blanks STAT, sets 99, resets to S1.</li> <li>CLRIND: Turns off error indicators, blanks MSG1/MSG2.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Errors set indicators (e.g., 90 for company, 81 for general, 82 for product/combination) and display messages (MSG1/MSG2).</li> <li>Program stays on the current screen for corrections.</li> </ul> </li> <li> <p>Loop Exit:</p> <ul> <li>When @SFNEX='EJ', the main loop ends, and the program terminates (implicit end via LR).</li> </ul> </li> </ol>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20RPG36/#business-rules","title":"Business Rules","text":"<ul> <li>Required Fields: Company (CO) must be non-zero and exist in the company control file (INCONT). Product (PROD) must not be blank. Container (CNTR) is effectively optional (blank check commented out).</li> <li>Validation of Combination: The company + product + container must exist in PRCNTR and not be marked deleted ('D') or inactive ('I').</li> <li>Data Retrieval: Product and container descriptions are fetched from GSPROD and GSCNTR only if the combination is valid.</li> <li>Status Update: On S2, status (PNSTAT) can be set to 'A' (accept) or possibly 'O' (override, inferred from field comment). If 'A', the last sold date (PNLSD8) is updated to the current system date, enforcing a business rule that acceptance records the sale date.</li> <li>No Adds/Deletes: The program supports updates only (to status and last sold date in PRCNTR). No new records are added, and deletions are checked but not performed here.</li> <li>Date Handling: Current date is always computed at startup and used for updates (format: YYYYMMDD internally, MM/DD/YY on screen).</li> <li>Error Messaging: Specific messages for blanks, invalid combinations, non-existent company, deleted/inactive records. Messages are displayed on screen without halting.</li> <li>User Interface Rules: Screens are chained (S1 to S2 on valid input, back to S1 after update). Command keys allow reset (KA) or exit (KG). Indicators control field protection/highlighting (e.g., 99 for blanks, 51 for conditional output).</li> <li>Shared Access: Files are opened in shared mode (from OCL), allowing concurrent use, but no explicit locking in RPG code.</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables) for input, validation, and updates. All are disk files with keyed access:</p> File Name Type Key Length Record Length Purpose/Description Fields Accessed (Key Examples) SCREEN Workstation (Display) N/A 1000 Interactive screens S1 (input/validation) and S2 (review/update). CO (company), PROD (product), CNTR (container), STAT (status), PRDESC (product desc), CNDESC (container desc), PNLSD8 (last sold date), MSG1/MSG2 (errors). PRCNTR Update (UF) 9 bytes 51 Product-container master; main file for maintenance. Checked for existence, deletion/inactive status; updated with status and last sold date. Key: Likely IAKEY (company + product + container). Fields: PNDEL (delete flag), PNCONO (company), PNPROD (product), PNCNTR (container), PNLSD8 (last sold date), PNSTAT (status: 'A' accept, 'O' override). GSPROD Input (IF) 6 bytes 512 Product master; read-only for descriptions and details. Key: PRDKEY (company + product). Fields: TPDEL (delete), TPCONO (company), TPPROD (product), TPDESC (description). GSCNTR Input (IF) 3 bytes 512 Container master; read-only for descriptions. Key: CNTR (container code). Fields: TCDEL (delete), TCCNTR (container), TCDESC (description). INCONT Input (IC) 2 bytes 512 Company control file; validates company existence. Key: CO (company number). No specific fields read beyond existence check."},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/GS973%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. The program uses only internal subroutines (e.g., $S1, $S2, $XCPT) and does not contain CALL opcodes or references to external programs/procedures. All logic is self-contained within GS973.</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/","title":"Summary GS973 OCL","text":""},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>Based on the call stack (OCL procedure SCPROCP loading and executing RPG program GS973), the program implements interactive maintenance for product-container master records. The core functionality focuses on validation, inquiry, and limited updates to status and last sold date. The following use cases are supported:</p> <ol> <li> <p>Inquire on Product-Container Combination: Validate and retrieve details (including product description, container description, current status, and last sold date) for a given company, product, and container combination. This ensures the combination exists, is active, and displays associated master data.</p> </li> <li> <p>Accept Product-Container Combination: Update the status of a valid product-container combination to 'Accept' ('A'), which records the current system date as the last sold date. This enforces acceptance tracking without allowing overrides or other changes in this program.</p> </li> <li> <p>Reset or Exit Maintenance: Clear input fields and reset to the initial input state, or exit the maintenance process entirely, without saving changes.</p> </li> </ol> <p>No additional use cases are implemented, such as adding new combinations, deleting records, overriding status ('O'), or bulk processing.</p>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#function-requirement-document-maintain-product-container-combination","title":"Function Requirement Document: Maintain Product-Container Combination","text":""},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#overview","title":"Overview","text":"<p>This function encapsulates the core use cases as a non-interactive, batch-style process. It accepts inputs (company number, product code, container code, and optional status) and performs validation, data retrieval, and conditional update in a single call. Outputs include retrieved details or error messages. The function replaces screen interactions with parameter-based input, focusing on business logic for inventory additive master maintenance.</p>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (CO): Required integer (non-zero).</li> <li>Product Code (PROD): Required string (non-blank).</li> <li>Container Code (CNTR): Optional string (may be blank, but combination must exist if provided).</li> <li>Status (STAT): Optional string ('A' for accept; ignored otherwise).</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Success Response: Structure containing:</li> <li>Product Description (from GSPROD).</li> <li>Container Description (from GSCNTR).</li> <li>Last Sold Date (PNLSD8, formatted as YYYYMMDD).</li> <li>Current/Updated Status (PNSTAT).</li> <li>Error Response: Message string (e.g., \"COMPANY NUMBER CANNOT BE BLANK\", \"INVALID COMBINATION ENTERED\").</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Check CO is non-zero and exists in company control file (INCONT).</li> <li>Check PROD is non-blank.</li> <li>Form composite key (CO + PROD + CNTR) and check existence in PRCNTR.</li> <li> <p>If record found in PRCNTR, ensure not deleted (PNDEL \u2260 'D') or inactive (PNDEL \u2260 'I').</p> </li> <li> <p>Retrieve Data:</p> </li> <li>Fetch product details from GSPROD using key (CO + PROD), extract description (TPDESC).</li> <li>Fetch container details from GSCNTR using CNTR, extract description (TCDESC).</li> <li> <p>From PRCNTR, retrieve current last sold date (PNLSD8) and status (PNSTAT).</p> </li> <li> <p>Conditional Update:</p> </li> <li>If STAT = 'A', update PRCNTR record:<ul> <li>Set PNSTAT to 'A'.</li> <li>Set PNLSD8 to current system date (computed as YYYYMMDD).</li> </ul> </li> <li> <p>No update if STAT \u2260 'A' or invalid.</p> </li> <li> <p>Return Results:</p> </li> <li>On success: Return retrieved/updated details.</li> <li>On error: Return specific error message and halt.</li> </ol>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Validation Rules: Company must exist and be active; product required; combination must be valid, active, and not deleted. Errors prevent further processing.</li> <li>Update Restriction: Only 'Accept' status triggers update; no support for 'Override' or other values. Update implies acceptance of the combination for sales/inventory purposes.</li> <li>Date Calculation: Current date derived from system time, converted to YYYYMMDD via: Extract YYMMDD from time, multiply by 10000.01 for YMD format, prefix '20' for century (Y2K handling).</li> <li>Data Integrity: Read-only access to GSPROD and GSCNTR for descriptions; updates limited to PRCNTR status and date fields. Shared file access assumed for concurrency.</li> <li>No Creation/Deletion: Function assumes existing records; does not add new combinations or delete/mark inactive.</li> </ul>"},{"location":"order-entry/GS973%20Prod-Cntr%20Override%20Sale%20Status/Summary%20GS973%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Database Tables: INCONT (company validation), PRCNTR (main record), GSPROD (product details), GSCNTR (container details).</li> <li>No external programs called; all logic self-contained.</li> </ul>"}]}