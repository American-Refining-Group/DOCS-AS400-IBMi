{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ARG AS400 IBMi Documentation","text":""},{"location":"#modules","title":"Modules","text":""},{"location":"#accounts-payable","title":"Accounts Payable","text":""},{"location":"#accounts-receivable","title":"Accounts Receivable","text":""},{"location":"#order-entry","title":"Order Entry","text":""},{"location":"#billing","title":"Billing","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/","title":"AP100 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, <code>AP100.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400 or iSeries) for Accounts Payable (A/P) voucher entry and editing. Below is an explanation of the process steps, followed by a list of external programs called and tables (files) used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates the A/P voucher entry and edit process, handling validation, file management, and user interaction for regular A/P transactions, freight invoices from the LMS system, or other entry methods. Here\u2019s a breakdown of the steps:</p> <ol> <li>Initial Validation and Inventory Check:</li> <li>The program checks if an inventory process (<code>INTSZZ</code>) is in progress by evaluating <code>DATAF1-?9?INTSZZ</code>.</li> <li>If true, it displays messages indicating that the inventory process is ongoing, instructs the user to try again later, pauses for user input (press 0 to cancel), and branches to the <code>END</code> tag, halting execution.</li> <li> <p>This prevents A/P voucher posting during specific inventory processes to avoid data conflicts.</p> </li> <li> <p>Wire Transfer (WT) Handling:</p> </li> <li>The program checks if the transaction involves a wire transfer (<code>?3?/WT</code>).</li> <li>If true, it sets <code>P20</code> to <code>'APWT?WS?'</code> and adds a local data field at offset 198 with <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>If false, it sets <code>P20</code> to <code>'APTR?WS?'</code> and clears the data field at offset 198.</li> <li> <p>This distinguishes wire transfer transactions from regular A/P transactions.</p> </li> <li> <p>LMS Freight Invoice vs. Regular A/P Check:</p> </li> <li>The program determines whether the process is for freight invoices imported from the LMS system or regular A/P transactions.</li> <li>Rule: If an A/P transaction file (<code>?9??20?</code>) exists, LMS processing is not allowed.</li> <li>If the A/P transaction file does not exist, the program displays a selection screen (<code>AP100S</code>) for the user to choose between LMS automatic processing or regular A/P entry.</li> <li> <p>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists, the program deletes the A/P transaction file (<code>APTX?WS?</code>) using <code>GSDELETE</code>.</p> </li> <li> <p>User Selection for Entry Method:</p> </li> <li>The program loads the <code>AP100S</code> screen to allow the user to select the entry method:<ul> <li>ARGLMS: Triggers the <code>AP125</code> program for LMS processing (with parameter <code>N</code>) and branches to <code>END</code>.</li> <li>PAPER: Triggers the <code>AP125</code> program for paper-based A/P entry (with parameter <code>P</code>) and branches to <code>END</code>.</li> <li>FLEXI: Triggers the <code>AP106</code> program for flexible entry and branches to <code>END</code>.</li> <li>CANCEL: If the user cancels (<code>?L'129,6'?/CANCEL</code>), the program branches to <code>END</code>.</li> </ul> </li> <li> <p>If the A/P transaction file exists (<code>?F'A,?9?APTR?WS?'?/00000000</code>) or <code>DATAF1-?9??20?</code> is true, the program skips to the <code>AROUND</code> tag, bypassing the selection screen.</p> </li> <li> <p>File and Index Creation:</p> </li> <li>If the A/P transaction file (<code>?9??20?</code>) does not exist, the program creates it using <code>BLDFILE</code> with 500 records, 404 bytes each, and specific key fields.</li> <li>It also builds an index for the A/P transaction file (<code>?9?APTX?WS?</code>) with keys at positions 12, 5, 385, and 20.</li> <li>For the inventory transaction holding file (<code>INTZH1</code>), it builds an index if it exists (<code>DATAF1-?9?INTZH1</code>).</li> <li> <p>If the job cost file (<code>JCCOST</code>) exists, it creates a file with 999,000 records, 256 bytes each.</p> </li> <li> <p>File Definitions for AP100:</p> </li> <li>The program defines multiple files for the <code>AP100</code> program, including <code>APTRAN</code>, <code>APTRANX</code>, <code>APTRNX</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPNHC</code>, <code>APCONT</code>, <code>APDATE</code>, <code>APVEND</code>, <code>APVENDX</code>, <code>GLMAST</code>, <code>JCCOST</code>, <code>GSTABL</code>, <code>POFILE</code>, <code>POADDR</code>, <code>APINVH</code>, <code>APHSTHC</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>POPROJ</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>BICONT</code>, <code>GSCTUM</code>, <code>FRCINH</code>, and <code>FRCFBH</code>.</li> <li>These files are opened with shared access (<code>DISP-SHR</code>) and extended as needed (e.g., <code>EXTEND-100</code> for <code>APTRAN</code>).</li> <li> <p>The program then runs <code>AP100</code> for voucher entry.</p> </li> <li> <p>Post-Entry Processing:</p> </li> <li>If the A/P transaction file is empty (<code>?F'A,?9??20?'?/00000000</code>), the program branches to <code>END</code>.</li> <li>It sets local variables at offsets 135 (<code>?WS?</code>) and 221 (<code>?9??20?</code>).</li> <li> <p>It deletes and rebuilds the A/P check transaction file (<code>APCT?WS?</code>) with 500 records, 80 bytes each.</p> </li> <li> <p>Voucher Transaction Edit (AP110):</p> </li> <li>The program loads <code>AP110</code> for editing A/P voucher transactions.</li> <li>It defines files like <code>APTRAN</code>, <code>APCONT</code>, <code>APCHKR</code>, <code>APCHKT</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>GSTABL</code>, <code>APSTAT</code>, <code>APVEND</code>, <code>INFIL1</code>, and <code>INTZH1</code>.</li> <li>It overrides the printer file (<code>APLIST</code>) to output to <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The program runs <code>AP110</code> to edit transactions.</p> </li> <li> <p>Prepaid Check Edit (AP115):</p> </li> <li>If the LMS file (<code>DATAF1-?9?LMS?WS?</code>) exists or the A/P check transaction file (<code>APCT?WS?</code>) is empty, the program skips to <code>NOPPD</code>.</li> <li>Otherwise, it loads <code>AP115</code> for prepaid check editing, defining files like <code>APCHKT</code>, <code>APCHKTX</code>, <code>APCHKR</code>, and <code>APCONT</code>.</li> <li> <p>It overrides the printer file (<code>APLIST</code>) similarly and runs <code>AP115</code>.</p> </li> <li> <p>Purchase Order Edit (Skipped):</p> <ul> <li>The program explicitly skips the purchase order edit section by branching to <code>END</code>.</li> <li>If executed, it would:</li> <li>Sort the A/P transaction file (<code>?9??20?</code>) into <code>?9?APPO?WS?</code> using <code>#GSORT</code> with specific sort criteria (company, P/O number, entry sequence).</li> <li>Load <code>AP120</code> for A/P and purchase order voucher editing, using files like <code>APTRAN</code>, <code>APTRANH</code>, <code>APCONT</code>, and <code>POFILE</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>The program clears all local variables (<code>LOCAL BLANK-*ALL</code>) and ends execution at the <code>END</code> tag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP100S: Displays the selection screen for choosing the entry method (LMS, paper, or flexible). 2. AP100: Handles A/P voucher entry. 3. AP106: Processes flexible A/P entry (triggered by <code>FLEXI</code> selection). 4. AP110: Edits A/P voucher transactions. 5. AP115: Edits prepaid checks. 6. AP120: Handles A/P and purchase order voucher editing (skipped in this execution). 7. AP125: Processes LMS or paper-based A/P entry (triggered by <code>ARGLMS</code> or <code>PAPER</code> selection). 8. #GSORT: Sorts the A/P transaction file for purchase order editing (skipped).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), primarily opened with shared access (<code>DISP-SHR</code>): 1. APTRAN: A/P transaction file (<code>?9??20?</code>). 2. APTRANX: Alternate A/P transaction file (<code>?9??20?</code>). 3. APTRNX: A/P transaction index file (<code>?9?APTX?WS?</code>). 4. APOPEN: A/P open items file (<code>?9?APOPEN</code>). 5. APOPENH: A/P open items history file (<code>?9?APOPNH</code>). 6. APOPNHC: A/P open items history control file (<code>?9?APOPNHC</code>). 7. APCONT: A/P control file (<code>?9?APCONT</code>). 8. APDATE: A/P date file (<code>?9?APDATE</code>). 9. APVEND: A/P vendor file (<code>?9?APVEND</code>). 10. APVENDX: A/P vendor index file (<code>?9?APVENX</code>). 11. GLMAST: General ledger master file (<code>?9?GLMAST</code>). 12. JCCOST: Job cost file (<code>?9?JCCOST</code>). 13. GSTABL: General system table (<code>?9?GSTABL</code>). 14. POFILE: Purchase order file (<code>?9?POFILE</code>). 15. POADDR: Purchase order address file (<code>?9?POADDR</code>). 16. APINVH: A/P invoice history file (<code>?9?APINVH</code>). 17. APHSTHC: A/P history control file (<code>?9?APHSTHC</code>). 18. INFIL1: Inventory file 1 (<code>?9?INFIL1</code>). 19. INTZH1: Inventory transaction holding file (<code>?9?INTZH1</code>). 20. POPROJ: Purchase order project file (<code>?9?POPROJ</code>). 21. SA5FIUD: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUD</code>). 22. SA5FIUM: Sales file (unknown purpose, possibly related to financial updates) (<code>?9?SA5FIUM</code>). 23. SA5MOUD: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUD</code>). 24. SA5MOUM: Sales file (unknown purpose, possibly related to monthly updates) (<code>?9?SA5MOUM</code>). 25. BICONT: Business intelligence control file (<code>?9?BICONT</code>). 26. GSCTUM: General system control table (unknown purpose) (<code>?9?GSCTUM</code>). 27. FRCINH: Freight invoice history file (<code>?9?FRCINH</code>). 28. FRCFBH: Freight feedback history file (<code>?9?FRCFBH</code>). 29. APCHKR: A/P check register file (<code>?9?APCHKR</code>). 30. APCHKT: A/P check transaction file (<code>?9?APCT?WS?</code>). 31. APCHKTX: Alternate A/P check transaction file (<code>?9?APCT?WS?</code>). 32. APSTAT: A/P status file (<code>?9?APSTAT</code>). 33. APPO?WS?: Sorted A/P purchase order file (used by <code>#GSORT</code>, temporary).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20OCL/#summary","title":"Summary","text":"<p>The <code>AP100.ocl36.txt</code> OCL program manages the A/P voucher entry and edit process, ensuring no conflicts with inventory processes, handling wire transfers, and allowing user selection between LMS freight invoices, paper-based, or flexible A/P entry. It creates and indexes necessary files, runs appropriate programs (<code>AP100</code>, <code>AP106</code>, <code>AP110</code>, <code>AP115</code>, <code>AP125</code>, <code>#GSORT</code>), and skips purchase order editing. The program uses a comprehensive set of files to store transaction, vendor, inventory, and financial data, ensuring proper integration with the broader A/P system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/","title":"AP100 RPG","text":"<p>The provided <code>AP100.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by the OCL program <code>AP100.ocl36.txt</code>. It handles the entry and validation of Accounts Payable (A/P) voucher transactions, including header and detail records, with support for various payment types (e.g., wire transfers, ACH, employee expenses) and validations for inventory, purchase orders, and vendor data. Below is an explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#process-steps-of-the-rpg-program-ap100","title":"Process Steps of the RPG Program (AP100)","text":"<p>The RPG program <code>AP100</code> manages the interactive entry and editing of A/P voucher transactions through multiple screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates input, retrieves data from files, and updates transaction records. Here are the key process steps:</p> <ol> <li>Initialization:</li> <li>Clears variables and sets indicators to their initial state (e.g., <code>Z-ADD *ZERO</code>, <code>MOVE *BLANKS</code>, <code>SETOF</code>).</li> <li>Sets the process type (<code>PTYP</code>) to <code>'NORMAL'</code> if blank (modification <code>JK01</code>).</li> <li>Retrieves the current system date and time (<code>TIME</code>), formats it into various date fields (<code>SYTIME</code>, <code>SYDATE</code>, <code>SYDYMD</code>, <code>MONTH</code>, <code>YEAR</code>), and calculates century for date handling (<code>Y2KCEN</code>).</li> <li>Checks for wire transfer (<code>LDAWT = 'WT'</code>) or employee expense (<code>LDAWT = 'EE'</code>) flags, setting indicators <code>22</code> or <code>23</code> accordingly.</li> <li> <p>Initializes keys for file access (e.g., <code>TERMKY</code> for terms, <code>GSCKEY</code> for carrier ID).</p> </li> <li> <p>Screen Processing:</p> </li> <li>The program uses multiple screen formats:<ul> <li>AP100S1: Collects company number (<code>CONO</code>), vendor number (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher number (<code>CNVO</code>), and purchase order number (<code>PONO</code>).</li> <li>AP100S2: Displays and collects header information (e.g., vendor details, invoice amount, invoice number, dates, hold codes).</li> <li>AP100S3: Handles detail line entry (e.g., expense G/L, amount, discount, purchase order, gallons, receipt number).</li> <li>AP100S5: Allows entry of a vendor number (<code>VEND#</code>) for lookup or navigation.</li> </ul> </li> <li> <p>The main loop (<code>DO</code> at line 0446) processes user input based on the screen format triggered (indicators <code>01</code>, <code>02</code>, <code>03</code>, <code>05</code> for <code>S1</code>, <code>S2</code>, <code>S3</code>, <code>S5</code> subroutines).</p> </li> <li> <p>S1 Subroutine (AP100S1 Screen):</p> </li> <li>Validates the company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted (<code>ACDEL = 'D'</code>), displays error message (<code>COM,1</code>) and exits.</li> <li>Checks if vendor (<code>VEND</code>), entry number (<code>ENT#</code>), canceled voucher (<code>CNVO</code>), or purchase order (<code>PONO</code>) are blank or zero. If so, displays error (<code>COM,31</code>) and exits.</li> <li>Searches for vendor information (<code>VNSRCH</code> subroutine) if vendor is valid. If not found, displays error (<code>COM,32</code>).</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for new entries (<code>ADDNEW</code> mode) or validates existing entry numbers (<code>ENT#</code>) against <code>APTRAN</code>.</li> <li>Checks if job cost (<code>ACJCYN = 'Y'</code>) or purchase order (<code>ACPOYN = 'Y'</code>) processing is active, setting indicators <code>65</code> and <code>67</code>.</li> <li> <p>Updates <code>APCONT</code> with the next entry number and writes the record.</p> </li> <li> <p>S2 Subroutine (AP100S2 Screen):</p> </li> <li>Retrieves or clears header information (vendor name, address, invoice amount, dates, hold codes, etc.).</li> <li>Validates vendor number (<code>VEND</code>) against <code>APVEND</code>. If invalid, deleted (<code>VNDEL = 'D'</code>), or inactive (<code>VNDEL = 'I'</code>), displays errors (<code>COM,2</code> or <code>COM,67</code>).</li> <li>Applies vendor defaults (e.g., hold code <code>VNHOLD</code>, single check <code>VNSNGL</code>, expense G/L <code>VNEXGL</code>, terms <code>VNTERM</code>).</li> <li>For employee vendors (<code>VNPRID \u2260 0</code>), sets hold code to <code>'E'</code> and uses employee expense G/L (<code>ACEEGL</code>).</li> <li>Validates hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and prepay codes (<code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>), setting appropriate hold descriptions (<code>HLDD</code>).</li> <li>Checks invoice number (<code>INV#</code>) for duplicates in <code>APTRANX</code>, <code>APOPEN</code>, <code>APOPNHC</code>, or <code>APHSTHC</code>. If found, requires override codes (<code>COM2,2</code>, <code>COM2,3</code>).</li> <li>Calculates due date (<code>DUDT</code>) and discount due date (<code>DSDT</code>) using terms from <code>GSTABL</code> (subroutines <code>@DTE1</code>, <code>@DTE2</code>, <code>TMDATP</code>).</li> <li>Ensures invoice amount (<code>IAMT</code>) is non-zero and matches detail totals (<code>CLCTOT</code> subroutine).</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), calls <code>AP1011</code> to populate detail lines with calculated freight amounts.</p> </li> <li> <p>S3 Subroutine (AP100S3 Screen):</p> </li> <li>Validates detail line fields (e.g., expense G/L <code>EXGL</code>, amount <code>AMT</code>, discount <code>DISC</code>, purchase order <code>PONO</code>, gallons <code>GALN</code>, receipt <code>RCPT</code>).</li> <li>Ensures expense G/L (<code>EXGL</code>) matches company (<code>LNCO</code>) and is valid in <code>GLMAST</code>. If deleted (<code>GLDEL = 'D'</code>) or inactive (<code>GLDEL = 'I'</code>), displays error (<code>COM,7</code>).</li> <li>Applies vendor default expense G/L (<code>VNEXGL</code>) if blank.</li> <li>Validates discounts: Ensures <code>DISC</code> and <code>DSPC</code> (discount percentage) are not both non-zero (<code>COM,35</code>) and that a discount G/L (<code>ACDSGL</code>) exists (<code>COM,36</code>).</li> <li>For sales orders (<code>SORN \u2260 0</code>), prohibits receipt numbers or gallons (<code>COM,57</code>).</li> <li>Validates gallons/receipt requirements based on <code>VNGRRQ</code> and <code>GLAPCD</code>:<ul> <li>If <code>VNGRRQ = 'Y'</code>, requires gallons (<code>GALN</code>) and receipt (<code>RCPT</code>) (<code>COM,71</code>, <code>COM,72</code>).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits gallons and receipt (<code>COM,73</code>, <code>COM,74</code>).</li> <li>Ensures G/L requires gallons (<code>GLAPCD = 'Y'</code>) if vendor requires them, and vice versa (<code>COM,75</code>, <code>COM,76</code>).</li> </ul> </li> <li>If <code>GLPOCD = 'Y'</code> (PO required for G/L), ensures <code>PONO</code> is entered (<code>COM,78</code>).</li> <li>Validates receipt numbers (<code>RCPT</code>) against <code>INFIL1</code> or <code>INTZH1</code>, checking quantities and prior postings (<code>COM,40</code>, <code>COM,42</code>, <code>COM,43</code>).</li> <li>Ensures receipt code (<code>CLCD</code>) is <code>'O'</code> or <code>'C'</code> (<code>COM,44</code>).</li> <li>Calculates freight amounts (<code>FRAM</code>) for detail lines if total freight (<code>FRTL</code>) is non-zero, ensuring detail amounts sum to invoice total (<code>IAMT</code>).</li> <li> <p>Updates or adds detail records to <code>APTRAN</code>.</p> </li> <li> <p>S5 Subroutine (AP100S5 Screen):</p> </li> <li>Handles vendor lookup by number (<code>VEND#</code>) or name search (<code>ABBR</code>).</li> <li>If <code>VEND#</code> is entered, sets <code>VEND</code> and clears <code>ABBR</code>, then returns to <code>S1</code>.</li> <li> <p>If blank, performs a name search (<code>NRLFWD</code> subroutine) to display vendor options.</p> </li> <li> <p>Roll Forward/Backward Handling:</p> </li> <li>ROLFWD: Navigates to the next detail line in <code>APTRANX</code>, populating fields (<code>DETGET</code>) and validating (<code>S3EDIT</code>).</li> <li> <p>ROLLBK: Navigates to the previous detail line or header, populating fields (<code>DETGET</code> or <code>HDRGET</code>) and validating (<code>S3EDIT</code> or <code>S2EDIT</code>).</p> </li> <li> <p>Date Handling:</p> </li> <li>Subroutines <code>@DTE1</code> and <code>@DTE2</code> convert between Gregorian and Julian dates for due date and discount date calculations.</li> <li> <p>Ensures due dates (<code>DUDT</code>) and discount due dates (<code>DSDT</code>) are valid and not on holidays/weekends (<code>APDATE</code> file, modification <code>MG17</code>).</p> </li> <li> <p>Freight Invoice Validation:</p> </li> <li> <p>Checks <code>FRCFBH</code> and <code>FRCINH</code> for freight invoices:</p> <ul> <li>For <code>NORMAL</code> mode, ensures <code>FRAPST</code> (A/P status) is blank (<code>COM,60</code>).</li> <li>For <code>PAPER</code> mode, ensures <code>FRINTY = 'P'</code> (<code>COM,62</code>).</li> <li>For <code>ARGLMS</code> mode, ensures <code>FRINTY = 'O'</code> or <code>'S'</code> (<code>COM,61</code>).</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>Adds or updates header records in <code>APTRAN</code> (e.g., <code>EADD 70</code>, <code>E 70N95</code>).</li> <li>Adds or updates detail records in <code>APTRAN</code> (e.g., <code>EADD 71</code>, <code>E 71N96</code>).</li> <li>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</li> <li>Updates one-time vendor information in <code>APTRAN</code> if needed.</li> <li>Writes to <code>APOPENH</code> for open invoices.</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Displays error messages from the <code>COM</code> and <code>COM2</code> arrays for various validation failures (e.g., invalid vendor, duplicate invoice, missing fields).</li> <li>Sets indicator <code>90</code> to highlight errors and prevent progression until corrected.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>Ends the program when the user presses the end-of-job key (<code>KG</code>), setting the last record indicator (<code>LR</code>) and exiting.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor Validation:</li> <li>Company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li> <p>Vendor number (<code>VEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>) or inactive (<code>VNDEL \u2260 'I'</code>).</p> </li> <li> <p>Invoice Number Uniqueness:</p> </li> <li> <p>Invoice numbers (<code>INV#</code>) must be unique within the batch (<code>APTRANX</code>) and not exist in open (<code>APOPEN</code>, <code>APOPNHC</code>) or paid (<code>APHSTHC</code>) invoices unless overridden (<code>MG10</code>).</p> </li> <li> <p>Hold and Prepay Codes:</p> </li> <li>Hold codes (<code>HOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li> <p>Prepay codes (<code>PAID</code>) must be <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code>, with a corresponding check number (<code>PPCK</code>) if applicable.</p> </li> <li> <p>Gallons and Receipt Validation:</p> </li> <li>If the vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), both <code>GALN</code> and <code>RCPT</code> must be entered.</li> <li>If <code>VNGRRQ = 'N'</code>, gallons and receipts are prohibited.</li> <li>If the G/L account requires gallons (<code>GLAPCD = 'Y'</code>), <code>GALN</code> must be entered and match the sign of the amount (<code>AMT</code>).</li> <li> <p>Receipt numbers (<code>RCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with valid quantities and no prior A/P postings.</p> </li> <li> <p>Purchase Order Requirements:</p> </li> <li> <p>If the G/L account requires a purchase order (<code>GLPOCD = 'Y'</code>), a valid <code>PONO</code> must be entered.</p> </li> <li> <p>Discount Validation:</p> </li> <li>Discount amount (<code>DISC</code>) and percentage (<code>DSPC</code>) cannot both be non-zero.</li> <li>A discount G/L (<code>ACDSGL</code>) must exist if discounts are used.</li> <li> <p>Discount due date (<code>DSDT</code>) must be entered if discounts are applied, or an error is raised (<code>MG20</code>).</p> </li> <li> <p>Freight Invoices:</p> </li> <li>Freight invoices must be processed in the correct mode (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>) based on invoice type (<code>FRINTY</code>) in <code>FRCFBH</code> or <code>FRCINH</code>.</li> <li> <p>Freight amounts (<code>FRTL</code>) are allocated to detail lines, with calculations ensuring detail totals match the invoice total.</p> </li> <li> <p>Sales Order Restrictions:</p> </li> <li> <p>If a sales order number (<code>SORN</code>) is entered, receipt numbers and gallons are not allowed.</p> </li> <li> <p>Date Handling:</p> </li> <li>Due dates and discount due dates are calculated based on vendor terms (<code>VNTERM</code>) from <code>GSTABL</code>.</li> <li> <p>Dates are adjusted to avoid holidays and weekends (<code>APDATE</code>).</p> </li> <li> <p>Amount Validation:</p> <ul> <li>Invoice amount (<code>IAMT</code>) must be non-zero and match the sum of detail line amounts (<code>AMT</code> + <code>FRAM</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes (e.g., <code>UC</code> for update/create, <code>IF</code> for input, <code>ID</code> for indexed):</p> <ol> <li>SCREEN: Workstation file for interactive display (1200 bytes, <code>WORKSTN</code>).</li> <li>APTRAN: A/P transaction file (404 bytes, update/create, key length 10).</li> <li>APTRANX: A/P transaction index file (404 bytes, input, key length 10).</li> <li>APTRNX: A/P transaction index file (404 bytes, input, external key, 27 bytes).</li> <li>APOPEN: A/P open items file (384 bytes, input, key length 16).</li> <li>APOPENH: A/P open items history file (384 bytes, update/create, key length 16).</li> <li>APOPNHC: A/P open items history control file (384 bytes, input, key length 32).</li> <li>APCONT: A/P control file (256 bytes, update/create, key length 2).</li> <li>APVEND: A/P vendor file (579 bytes, input, key length 7).</li> <li>APVENDX: A/P vendor index file (579 bytes, input, external key, 17 bytes).</li> <li>GLMAST: General ledger master file (256 bytes, input, key length 11).</li> <li>GSTABL: General system table (256 bytes, input, key length 12).</li> <li>APINVH: A/P invoice history file (64 bytes, input, key length 32).</li> <li>APHSTHC: A/P history control file (384 bytes, input, key length 32).</li> <li>INFIL1: Inventory file (448 bytes, input, external key, 9 bytes).</li> <li>INTZH1: Inventory transaction holding file (592 bytes, input, external key, 9 bytes).</li> <li>SA5FIUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5FIUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>SA5MOUD: Sales file (detail, 1024 bytes, input, external key, 14 bytes).</li> <li>SA5MOUM: Sales file (misc, 1024 bytes, input, key length 14).</li> <li>FRCINH: Freight invoice history file (206 bytes, input, key length 33).</li> <li>FRCFBH: Freight feedback history file (206 bytes, input, key length 39).</li> <li>APDATE: A/P date file (19 bytes, input, key length 10).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP1011: Called to populate freight detail lines with calculated percentage amounts when a sales order (<code>SORN</code>) and freight total (<code>FRTL</code>) are present. It uses the <code>SALES</code> data structure as a parameter.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20RPG/#summary","title":"Summary","text":"<p>The <code>AP100</code> RPG program is a critical component of the A/P voucher entry system, handling interactive input through multiple screens (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>). It validates company, vendor, invoice, and detail line data, ensuring compliance with business rules such as unique invoice numbers, valid hold/prepay codes, gallons/receipt requirements, and freight invoice processing. The program integrates with numerous files for transaction, vendor, inventory, and financial data, and calls <code>AP1011</code> for freight detail calculations. It enforces strict validations to maintain data integrity and supports various payment types and processing modes (e.g., <code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/","title":"AP100 Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#list-of-use-cases-implemented-by-the-ap100-ap110-and-ap115-programs","title":"List of Use Cases Implemented by the AP100, AP110, and AP115 Programs","text":"<p>The RPG programs <code>AP100</code>, <code>AP110</code>, and <code>AP115</code> form a call stack for processing Accounts Payable (A/P) voucher transactions on IBM midrange systems (e.g., AS/400 or iSeries). Together, they implement a single cohesive use case:</p> <ol> <li>Use Case: Process and Validate A/P Voucher Transactions</li> <li>Description: This use case involves the entry, validation, editing, and reporting of A/P voucher transactions, including header and detail records, for various payment types (e.g., prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). The process ensures data integrity, validates against vendor, company, G/L, and inventory data, and generates reports for errors and totals.</li> <li>Components:<ul> <li>AP100: Handles interactive entry and validation of voucher transactions via screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>), updating transaction files (<code>APTRAN</code>, <code>APCONT</code>) and calling <code>AP1011</code> for freight calculations.</li> <li>AP110: Validates voucher transactions from <code>APTRAN</code>, checks for errors (e.g., duplicate invoices, invalid G/Ls), updates prepaid check records (<code>APCHKT</code>), and produces an edit report (<code>APLIST</code>).</li> <li>AP115: Validates prepaid checks, ensuring non-void checks are not already open and void checks match the full amount, generating an error report (<code>APLIST</code>).</li> </ul> </li> </ol> <p>This single use case encompasses the entire workflow of entering, validating, and reporting A/P voucher transactions, with each program handling a specific aspect of the process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#function-requirement-document-process-and-validate-ap-voucher-transactions_1","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#overview","title":"Overview","text":"<p>This function processes and validates Accounts Payable (A/P) voucher transactions, including header and detail records, for various payment types (prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). It ensures data integrity by validating inputs against company, vendor, G/L, and inventory data, calculates due dates and discounts, updates transaction and check files, and generates reports for errors and totals.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): 2-digit identifier for the company.</li> <li>Vendor Number (<code>VEND</code>): 5-digit identifier for the vendor.</li> <li>Entry Number (<code>ENT#</code>): 5-digit transaction identifier (auto-generated or user-provided).</li> <li>Invoice Number (<code>INV#</code>): 20-character vendor invoice number.</li> <li>Invoice Amount (<code>IAMT</code>): 11.2-digit total invoice amount.</li> <li>Invoice Date (<code>INDT</code>): 6-digit vendor invoice date (MMDDYY).</li> <li>Due Date (<code>DUDT</code>): 6-digit due date (MMDDYY, calculated or user-provided).</li> <li>Discount Due Date (<code>DSDT</code>): 6-digit discount due date (MMDDYY, calculated or user-provided).</li> <li>Hold Code (<code>HOLD</code>): 1-character code (<code>H</code>=hold, <code>A</code>=ACH, <code>W</code>=wire transfer, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepay Code (<code>PAID</code>): 1-character code (<code>P</code>=prepaid, <code>A</code>=ACH, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepaid Check Number (<code>PPCK</code>): 6-digit check number for prepaid transactions.</li> <li>Single Check Flag (<code>SNGL</code>): 1-character flag (<code>S</code>=single check).</li> <li>Canceled Voucher (<code>CNVO</code>): 5-digit canceled voucher number.</li> <li>Purchase Order Number (<code>PONO</code>): 30-character purchase order number.</li> <li>Sales Order Number (<code>SORN</code>): 6-digit sales order number.</li> <li>Carrier ID (<code>CAID</code>): 6-character carrier identifier.</li> <li>Process Type (<code>PTYP</code>): 6-character process type (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</li> <li>Freight Total (<code>FRTL</code>): 7.2-digit total freight amount to allocate.</li> <li>Detail Lines:</li> <li>Sequence Number (<code>ENSQ</code>): 3-digit line sequence.</li> <li>Expense G/L (<code>EXGL</code>): 8-digit expense general ledger account.</li> <li>Amount (<code>AMT</code>): 8.2-digit line amount.</li> <li>Discount Amount (<code>DISC</code>): 8.2-digit discount amount.</li> <li>Discount Percentage (<code>DSPC</code>): 3.2-digit discount percentage.</li> <li>Gallons (<code>GALN</code>): 4.2-digit gallons quantity.</li> <li>Receipt Number (<code>RCPT</code>): 7-digit receipt number.</li> <li>Receipt Code (<code>CLCD</code>): 1-character code (<code>O</code>=open, <code>C</code>=closed).</li> <li>Freight Amount (<code>FRAM</code>): 4.2-digit freight amount per line.</li> <li>Product Amount (<code>PRAM</code>): 6.2-digit product amount per line.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>APTRAN</code>: Transaction header and detail records.</li> <li><code>APCHKT</code>: Prepaid check records.</li> <li><code>APCONT</code>: Updated with next entry number.</li> <li><code>APSTAT</code>: Error status (<code>Y</code> for errors, <code>N</code> otherwise).</li> <li>Report (<code>APLIST</code>): Printed report listing transaction details, errors, warnings, and totals (invoices, prepaid amounts, vendor hash).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Validate company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted, return error.</li> <li>Initialize accumulators for invoice counts, amounts, discounts, and prepaid totals.</li> <li> <p>Set process type (<code>PTYP</code>) to <code>NORMAL</code> if blank.</p> </li> <li> <p>Validate Header:</p> </li> <li>Ensure <code>CONO</code> exists in <code>APCONT</code>, not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Validate <code>VEND</code> against <code>APVEND</code>, ensuring not deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and name not blank.</li> <li>Verify <code>INV#</code> is non-blank and unique (check <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>Ensure <code>INDT</code> is non-zero and not older than one year (warning only).</li> <li>Ensure <code>IAMT</code> is non-zero and matches sum of detail amounts (<code>AMT</code> + <code>FRAM</code>).</li> <li>Validate <code>HOLD</code> (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and <code>PAID</code> (<code>P</code>, <code>A</code>, <code>E</code>, <code>U</code>).</li> <li>If <code>PAID</code> is set, ensure <code>PPCK</code> is provided.</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code> using terms (<code>VNTERM</code>) from <code>GSTABL</code> (net days, discount days).</li> <li>Validate <code>ATAPGL</code> and <code>ATBKGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>SORN \u2260 0</code>, prohibit <code>RCPT</code> and <code>GALN</code>.</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), allocate amounts to detail lines (call <code>AP1011</code>).</p> </li> <li> <p>Validate Detail Lines:</p> </li> <li>Validate <code>EXGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>GLPOCD = 'Y'</code>, ensure <code>PONO</code> is non-blank.</li> <li>Validate gallons/receipts:<ul> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, ensure <code>GLAPCD = 'Y'</code>.</li> <li>If <code>RCPT \u2260 0</code>, validate against <code>INFIL1</code> or <code>INTZH1</code> for sufficient quantity (<code>GALN \u2264 IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and no prior A/P postings.</li> <li>Ensure <code>CLCD</code> is <code>'O'</code> or <code>'C'</code>.</li> </ul> </li> <li>Validate discounts:<ul> <li>Ensure <code>DISC</code> and <code>DSPC</code> are not both non-zero.</li> <li>If <code>DISC</code> or <code>DSPC</code> is non-zero, require <code>ACDSGL \u2260 0</code>.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li>If <code>DSDT \u2260 0</code> and <code>DSDT \u2264 system date</code>, issue warning.</li> <li>Calculate <code>DISC = AMT * (DSPC / 100)</code> if <code>DSPC \u2260 0</code>.</li> </ul> </li> <li> <p>Calculate net amount: <code>NETAMT = AMT - DISC</code>.</p> </li> <li> <p>Validate Prepaid Checks:</p> </li> <li>For <code>PAID</code> transactions, update <code>APCHKT</code> with check amount (<code>ACCKAM = AMT - DISC</code>).</li> <li>Ensure non-void checks are not already open (<code>AMCODE \u2260 'O'</code>).</li> <li> <p>Ensure void checks are open (<code>AMCODE = 'O'</code>) and match full amount (<code>L1CKAM = AMCKAM</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Write/update <code>APTRAN</code> with header and detail records.</li> <li>Update <code>APCONT</code> with next entry number (<code>ACNXTE</code>).</li> <li>Write/update <code>APCHKT</code> with prepaid check records.</li> <li> <p>Write <code>APSTAT</code> with error status (<code>Y</code> or <code>N</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Produce <code>APLIST</code> report with:<ul> <li>Headers: Company, date, time, workstation, process type.</li> <li>Details: Entry, vendor, invoice number, description, amounts, G/L, status.</li> <li>Errors/Warnings: List entry numbers with issues (e.g., invalid vendor, duplicate invoice).</li> <li>Totals: Invoice count, amounts, discounts, prepaid totals, vendor hash.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor:</li> <li><code>CONO</code> must exist in <code>APCONT</code>, not deleted.</li> <li> <p><code>VEND</code> must exist in <code>APVEND</code>, not deleted or inactive, with non-blank name.</p> </li> <li> <p>Invoice:</p> </li> <li><code>INV#</code> must be non-blank and unique (unless prepaid, canceled, or wire transfer).</li> <li><code>IAMT</code> must be non-zero and match detail totals.</li> <li> <p><code>INDT</code> must be non-zero; warn if older than one year.</p> </li> <li> <p>Payment Types:</p> </li> <li><code>HOLD</code>: <code>'H'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>.</li> <li><code>PAID</code>: <code>'P'</code>, <code>'A'</code>, <code>'E'</code>, <code>'U'</code>, with <code>PPCK</code> required if set.</li> <li> <p><code>SNGL = 'S'</code> for single check processing.</p> </li> <li> <p>Gallons and Receipts:</p> </li> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, require <code>GLAPCD = 'Y'</code>.</li> <li><code>RCPT</code> must exist in <code>INFIL1</code> or <code>INTZH1</code> with sufficient quantity.</li> <li> <p><code>CLCD</code> must be <code>'O'</code> or <code>'C'</code>.</p> </li> <li> <p>Purchase Orders:</p> </li> <li> <p>If <code>GLPOCD = 'Y'</code>, require <code>PONO</code>.</p> </li> <li> <p>Discounts:</p> </li> <li><code>DISC</code> and <code>DSPC</code> cannot both be non-zero.</li> <li>Require <code>ACDSGL</code> if <code>DISC</code> or <code>DSPC</code> is non-zero.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li> <p>Warn if <code>DSDT \u2264 system date</code>.</p> </li> <li> <p>Prepaid Checks:</p> </li> <li>Non-void checks must not be open.</li> <li>Void checks must be open and match full amount.</li> <li> <p>Update <code>ACCKAM = AMT - DISC</code>.</p> </li> <li> <p>Freight:</p> </li> <li>If <code>FRTL \u2260 0</code>, allocate amounts to detail lines via <code>AP1011</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Due Date (<code>DUDT</code>): Calculated from <code>INDT</code> + <code>TBNETD</code> (net days from <code>GSTABL</code>), adjusted for holidays/weekends.</li> <li>Discount Due Date (<code>DSDT</code>): Calculated from <code>INDT</code> + <code>TBDISD</code> (discount days from <code>GSTABL</code>).</li> <li>Discount Amount (<code>DISC</code>): If <code>DSPC \u2260 0</code>, <code>DISC = AMT * (DSPC / 100)</code>.</li> <li>Net Amount (<code>NETAMT</code>): <code>NETAMT = AMT - DISC</code>.</li> <li>Check Amount (<code>ACCKAM</code>): <code>ACCKAM = AMT - DISC</code> for prepaid checks.</li> <li>Receipt Quantity: <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code> (from <code>INFIL1</code> or <code>INTZH1</code>).</li> <li>Totals:</li> <li><code>L1AMT = \u03a3(AMT)</code>, <code>L1PAMT = \u03a3(PRAM)</code>, <code>L1FAMT = \u03a3(FRAM)</code>, <code>L1DISC = \u03a3(DISC)</code>, <code>L1NET = L1AMT - L1DISC</code> (per entry).</li> <li><code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code> accumulate <code>L1</code> totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP100%20Summary/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Program Called: <code>AP1011</code> (for freight amount allocation to detail lines when <code>FRTL \u2260 0</code>).</li> <li>Files:</li> <li>Input: <code>APCONT</code>, <code>APVEND</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>APTRNX</code>, <code>APOPNHC</code>, <code>APINVH</code>.</li> <li>Update: <code>APTRAN</code>, <code>APCHKT</code>, <code>APSTAT</code>.</li> <li>Output: <code>APLIST</code> (report).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/","title":"AP110 RPG","text":"<p>The <code>AP110.rpg36.txt</code> is an RPG III program for IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP110.ocl36.txt</code>). It performs validation and editing of Accounts Payable (A/P) voucher transactions, ensuring data integrity for headers and detail lines. The program generates a printed report (<code>APLIST</code>) listing transaction details, errors, and totals for invoice amounts, discounts, and prepaid checks. It includes modifications for ACH payments, employee expenses, utility auto-payments, FlexiCapture invoice uploads, and validations for gallons, receipts, and purchase orders. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#process-steps-of-the-rpg-program-ap110","title":"Process Steps of the RPG Program (AP110)","text":"<p>The <code>AP110</code> program processes A/P voucher transactions from the <code>APTRAN</code> file, validates them against various files (e.g., <code>APVEND</code>, <code>GLMAST</code>, <code>APCONT</code>), and produces a detailed error report via <code>APLIST</code>. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0092\u20130107):</li> <li>Executes at the total level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves system date and time (<code>TIME</code>) and stores them in <code>TIMDAT</code>, <code>SYSTIM</code>, <code>SYSDAT</code>, and <code>SYSYMD</code> (year-month-day format).</li> <li>Converts system date to 8-digit format (<code>SYSDT8</code>) for comparisons.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> <li>Initializes page number (<code>PAGE</code>) and accumulators (<code>L2CNT</code>, <code>L2VHSH</code>, <code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>) to zero.</li> </ul> </li> <li>Validates company number (<code>ATCONO</code>) against <code>APCONT</code>. If not found (<code>92</code>), sets error indicator.</li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes detail accumulators (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to zero.</li> <li>For wire transfer transactions (<code>WIREDS \u2260 *BLANKS</code>), prints a header (<code>PRTHDR</code>) for each entry.</li> </ul> </li> <li> <p>Main Processing Loop (Lines 0109\u20130125):</p> </li> <li>Processes header records (<code>01</code>, <code>L1</code>) and detail records (<code>02</code>, <code>L1</code>) from <code>APTRAN</code>:<ul> <li>For header records (<code>01</code>), executes the <code>HDR</code> subroutine.</li> <li>For detail records (<code>02</code>, non-deleted <code>N51</code>), executes the <code>DET</code> subroutine.</li> </ul> </li> <li>Accumulates totals at <code>L1</code> (if no delete, <code>N51</code>):<ul> <li>Adds detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>) to <code>L2</code> totals (<code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>).</li> <li>For prepaid (<code>28</code>), ACH (<code>24</code>), wire transfer (<code>25</code>), or employee expense (<code>32</code>) payments, accumulates amounts into <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, or <code>L2PPE</code>.</li> </ul> </li> <li> <p>Updates <code>APSTAT</code> with error status (<code>'Y'</code> if errors exist, <code>'N'</code> otherwise) using <code>STATKY</code> (company and workstation).</p> </li> <li> <p>HDR Subroutine (Lines 0127\u20130144):</p> </li> <li> <p>Validates header records:</p> <ul> <li>If the header is deleted (<code>ATHDEL = 'D'</code>), sets indicator <code>51</code> and skips to <code>ENDHDR</code>.</li> <li>Increments invoice count (<code>L2CNT</code>) and vendor hash total (<code>L2VHSH</code>).</li> <li>Validates retention percentage (<code>ATRTPC \u2260 0</code>, sets <code>26</code>), hold code (<code>ATHOLD = 'H'</code>, sets <code>77</code>), canceled voucher (<code>ATCNVO \u2260 0</code>, sets <code>27</code>), prepaid code (<code>ATPAID = 'P'</code>, sets <code>28</code>; <code>= 'A'</code>, sets <code>24</code>; <code>= 'E'</code>, sets <code>32</code>; <code>= 'U'</code>, sets <code>33</code>), single check (<code>ATSNGL = 'S'</code>, sets <code>29</code>), and sales order (<code>ATSORN \u2260 0</code>, sets <code>19</code>).</li> <li>Checks hold description (<code>ATHLDD</code>) for blanks (sets <code>77</code> if blank).</li> <li>Calls <code>HEADCK</code> subroutine for additional header validations.</li> </ul> </li> <li> <p>HEADCK Subroutine (Lines MG02):</p> </li> <li> <p>Validates company, vendor, and invoice details:</p> <ul> <li>Chains <code>ATCONO</code> to <code>APCONT</code>. If not found (<code>99</code>), sets error <code>95</code>.</li> <li>Chains vendor key (<code>ATCONO</code>, <code>ATVEND</code>) to <code>APVEND</code>. If not found (<code>99</code>), deleted (<code>VNDEL = 'D'</code>), inactive (<code>VNDEL = 'I'</code>), or vendor name blank (<code>VNVNAM = *BLANKS</code>), sets error <code>95</code>.</li> <li>Retrieves terms code (<code>VNTERM</code>) from <code>GSTABL</code>. If not found (<code>99</code>), clears term description (<code>TRMDSC</code>).</li> <li>Ensures invoice date (<code>ATINDT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Compares invoice date (<code>ATIND8</code>) to system date minus one year (<code>SYSDT8 - 10000</code>). If older, sets warning <code>96</code> (MG09).</li> <li>Ensures invoice amount (<code>ATIAMT</code>) is non-zero. If zero, sets error <code>95</code>.</li> <li>Ensures invoice number (<code>ATINV#</code>) is not blank. If blank, sets error <code>95</code>.</li> <li>For non-prepaid (<code>N28</code>), non-canceled (<code>N27</code>), non-wire-transfer (<code>N25</code>) transactions with non-zero vendor (<code>ATVEND \u2260 0</code>):</li> <li>Checks for duplicate invoices in <code>APTRNX</code> (<code>INVKEY = XXKEY</code>, <code>XXENT \u2260 ATENT#</code>, sets <code>95</code> if found).</li> <li>Checks <code>APINVH</code> for duplicate invoice keys (<code>INVKEY = AIKEY</code>, sets <code>95</code> if found, MGXX).</li> <li>Checks <code>APOPNHC</code> for duplicate invoice (<code>OCCONO = ATCONO</code>, <code>OCVEND = ATVEND</code>, <code>OCINVN = ATINV#</code>, sets <code>95</code> if found).</li> <li>Validates A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>DET Subroutine (Lines 0146\u20130169):</p> </li> <li> <p>Validates detail records:</p> <ul> <li>If the detail is deleted (<code>ATDDEL = 'D'</code>), sets <code>52</code> and skips to <code>ENDDTL</code>.</li> <li>Checks if gallons (<code>ATGALN \u2260 0</code>, sets <code>60</code>) or job number (<code>ATJOB# \u2260 *BLANKS</code>, sets <code>30</code>) are present.</li> <li>Validates discount:</li> <li>If discount percentage (<code>ATDSPC \u2260 0</code>), ensures discount amount (<code>ATDISC</code>) is zero (sets <code>10</code> if both non-zero).</li> <li>If <code>ATDSPC \u2260 0</code>, calculates <code>ATDISC = ATAMT * (ATDSPC / 100)</code>.</li> <li>Calculates net amount (<code>NETAMT = ATAMT - ATDISC</code>).</li> <li>Accumulates detail amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1NET</code>).</li> <li>For prepaid transactions (<code>28</code>), calls <code>PPDCHK</code> subroutine.</li> <li>Calls <code>DETLCK</code> subroutine for additional detail validations.</li> </ul> </li> <li> <p>PPDCHK Subroutine (Lines 0171\u20130183):</p> </li> <li> <p>Validates prepaid checks:</p> <ul> <li>Chains check key (<code>CKKY21</code>) to <code>APCHKT</code>. If not found (<code>N90</code>), adds <code>ATAMT</code> to <code>ACCKAM</code>. If found (<code>90</code>), sets <code>ACCKAM = ATAMT</code>.</li> <li>Subtracts discount (<code>ATDISC</code>) from <code>ACCKAM</code>.</li> <li>Writes or updates <code>APCHKT</code> with the prepaid check record (<code>PPDREC</code>).</li> <li>Writes the prepaid check detail to <code>APLIST</code>.</li> </ul> </li> <li> <p>DETLCK Subroutine (Lines MG02\u2013MGXX):</p> </li> <li> <p>Validates detail line fields:</p> <ul> <li>Validates gallons/receipt requirements based on vendor (<code>VNGRRQ</code>) and G/L (<code>GLAPCD</code>):</li> <li>If <code>VNGRRQ = 'Y'</code>, requires <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is zero).</li> <li>If <code>VNGRRQ = 'N'</code>, prohibits <code>ATGALN</code> and <code>ATRCPT</code> (sets <code>95</code> if either is non-zero).</li> <li>If <code>GLAPCD = 'Y'</code> and <code>ATAMT &gt; 0</code>, requires <code>ATGALN</code> (sets <code>95</code> if zero).</li> <li>If <code>ATGALN &gt; 0</code>, requires <code>GLAPCD = 'Y'</code> (sets <code>95</code> if not).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>, MG08), ensures <code>ATPONO</code> is not blank (sets <code>95</code> if blank).</li> <li>Validates receipt number (<code>ATRCPT \u2260 0</code>):</li> <li>Chains <code>RCTKEY</code> to <code>INFIL1</code> or <code>INTZH1</code>. If not found (<code>47</code> and <code>77</code>), sets error <code>95</code>.</li> <li>Accumulates net quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and A/P quantity (<code>APQTY = IHAPTQ + IHAPTF</code>).</li> <li>If <code>ATGALN &gt; RNQTY</code>, sets error <code>95</code> and <code>46</code>.</li> <li>Ensures receipt code (<code>ATCLCD</code>) is <code>'O'</code> or <code>'C'</code> (sets <code>95</code> if not).</li> <li>Validates discount:</li> <li>If <code>ATDISC \u2260 0</code> or <code>ATDSPC \u2260 0</code>, requires a discount G/L (<code>ACDSGL \u2260 0</code>, sets <code>95</code> if not).</li> <li>If <code>ATDSD8 \u2260 0</code> and <code>ATDSD8 \u2264 SYSDT8</code>, sets warning <code>96</code> (MGXX).</li> <li>If terms have no discount (<code>TBDISC = 0</code>), prohibits <code>ATDSPC</code> or <code>ATDISC</code> (sets <code>95</code> if non-zero).</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), ensures <code>ATDSPC = TBDISC</code> (sets <code>95</code> if not) or requires <code>ATDISC</code> and <code>ATDSPC</code> to be non-zero (sets <code>95</code> if both zero).</li> <li>Validates expense G/L (<code>ATEXGL</code>) against <code>GLMAST</code>. If not found (<code>99</code>), deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets error <code>95</code>.</li> </ul> </li> <li> <p>Output to APLIST (Lines 0195\u20130340):</p> </li> <li> <p>Generates a formatted report:</p> <ul> <li>Header (L2): Prints company name (<code>ACNAME</code>), page number, date (<code>SYSDAT</code>), time (<code>SYSTIM</code>), and static text (\"ACCOUNTS PAYABLE VOUCHER EDIT\").</li> <li>Detail (01, N51): Prints header details (<code>ATENT#</code>, <code>ATVEND</code>, <code>ATVNAM</code>, <code>ATINV#</code>, <code>ATINDT</code>, <code>TRMDSC</code>, <code>ATAPGL</code>, <code>ATDUDT</code>, <code>ATDSDT</code>, <code>ATBKGL</code>, <code>ATSNGL</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATCNVO</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>).</li> <li>Detail (02, N51, N52): Prints detail line details (<code>ATPONO</code>, <code>ATDDES</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>NETAMT</code>, <code>ATEXGL</code>, <code>ATEXCO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>).</li> <li>Errors/Warnings: Prints error (<code>95</code>) or warning (<code>96</code>) messages with entry number (<code>ATENT#</code>).</li> <li>Totals (L1, N51): Prints entry totals (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1NET</code>) and prepaid details (<code>ATPPCK</code>, <code>ATPCKD</code>).</li> <li>Totals (L2): Prints invoice totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>, <code>L2NET</code>), prepaid totals (<code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code>), invoice count (<code>L2CNT</code>), and vendor hash total (<code>L2VHSH</code>).</li> </ul> </li> <li> <p>File Updates:</p> </li> <li>Writes or updates <code>APCHKT</code> with prepaid check records (<code>PPDREC</code>).</li> <li> <p>Writes or updates <code>APSTAT</code> with error status (<code>STATAD</code>, <code>STATUP</code>).</p> </li> <li> <p>Termination:</p> <ul> <li>Processes all records in <code>APTRAN</code>, generates the report, and terminates when no more records are found.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Header Validation:</li> <li>Company number (<code>ATCONO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Vendor number (<code>ATVEND</code>) must exist in <code>APVEND</code>, not be deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and have a non-blank name (<code>VNVNAM \u2260 *BLANKS</code>).</li> <li>Invoice date (<code>ATINDT</code>) must be non-zero and not older than one year prior to the system date (warning only, MG09).</li> <li>Invoice amount (<code>ATIAMT</code>) must be non-zero.</li> <li>Invoice number (<code>ATINV#</code>) must be non-blank and unique (checked against <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>A/P G/L (<code>ATAPGL</code>) and bank G/L (<code>ATBKGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>Hold codes (<code>ATHOLD</code>) must be <code>'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Prepaid codes (<code>ATPAID</code>) must be <code>'P'</code> (prepaid), <code>'A'</code> (ACH), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-payment).</li> <li>Single check (<code>ATSNGL = 'S'</code>) and retention percentage (<code>ATRTPC \u2260 0</code>) are flagged if present.</li> <li> <p>Canceled voucher (<code>ATCNVO \u2260 0</code>) is flagged if present.</p> </li> <li> <p>Detail Validation:</p> </li> <li>Expense G/L (<code>ATEXGL</code>) must exist in <code>GLMAST</code>, not be deleted (<code>GLDEL \u2260 'D'</code>), and not inactive (<code>GLDEL \u2260 'I'</code>).</li> <li>If G/L requires a purchase order (<code>GLPOCD = 'Y'</code>), <code>ATPONO</code> must be non-blank.</li> <li>Gallons and receipt validation:<ul> <li>If vendor requires gallons/receipts (<code>VNGRRQ = 'Y'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be non-zero.</li> <li>If vendor does not require gallons/receipts (<code>VNGRRQ = 'N'</code>), <code>ATGALN</code> and <code>ATRCPT</code> must be zero.</li> <li>If G/L requires gallons (<code>GLAPCD = 'Y'</code>), <code>ATGALN</code> must be non-zero for positive amounts (<code>ATAMT &gt; 0</code>).</li> <li>If <code>ATGALN &gt; 0</code>, G/L must require gallons (<code>GLAPCD = 'Y'</code>).</li> <li>Receipt number (<code>ATRCPT</code>) must exist in <code>INFIL1</code> or <code>INTZH1</code>, with sufficient quantity (<code>ATGALN \u2264 RNQTY</code>) and no prior A/P postings (removed in MG04).</li> <li>Receipt code (<code>ATCLCD</code>) must be <code>'O'</code> (open) or <code>'C'</code> (closed).</li> </ul> </li> <li> <p>Discount validation:</p> <ul> <li>Discount amount (<code>ATDISC</code>) and percentage (<code>ATDSPC</code>) cannot both be non-zero.</li> <li>If <code>ATDISC</code> or <code>ATDSPC</code> is non-zero, a discount G/L (<code>ACDSGL</code>) must exist.</li> <li>If terms have no discount (<code>TBDISC = 0</code>), <code>ATDISC</code> and <code>ATDSPC</code> must be zero.</li> <li>If terms have a discount (<code>TBDISC \u2260 0</code>), <code>ATDSPC</code> must match <code>TBDISC</code>, or both <code>ATDISC</code> and <code>ATDSPC</code> must be non-zero.</li> <li>If discount due date (<code>ATDSD8</code>) is non-zero and not later than the system date (<code>SYSDT8</code>), a warning (<code>96</code>) is issued.</li> </ul> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>Prepaid check amounts (<code>ACCKAM</code>) are updated in <code>APCHKT</code> by adding or setting <code>ATAMT - ATDISC</code>.</li> <li> <p>Prepaid check details are written to the report.</p> </li> <li> <p>Error and Warning Handling:</p> </li> <li>Errors (<code>95</code>) are flagged for critical validation failures (e.g., invalid company, vendor, G/L, duplicate invoice).</li> <li>Warnings (<code>96</code>) are flagged for non-critical issues (e.g., invoice date older than one year, discount date expired).</li> <li> <p>Errors are written to <code>APSTAT</code> (<code>AXERR = 'Y'</code>) and reported in <code>APLIST</code>.</p> </li> <li> <p>Reporting:</p> </li> <li>The report includes headers, detail lines, entry totals, and grand totals for invoices, prepaid amounts, and vendor hash.</li> <li>Errors and warnings are listed with entry numbers for correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APTRAN:</li> <li>Primary input file (<code>IP</code>), 404 bytes, key length 10, contains voucher header and detail records.</li> <li> <p>Fields: <code>ATHDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATVEND</code>, <code>ATCNVO</code>, <code>ATAPGL</code>, <code>ATIDES</code>, <code>ATINDT</code>, <code>ATDUDT</code>, <code>ATSNGL</code>, <code>ATHOLD</code>, <code>ATHLDD</code>, <code>ATPAID</code>, <code>ATPPCK</code>, <code>ATVNAM</code>, <code>ATVAD1\u20134</code>, <code>ATBKGL</code>, <code>ATIAMT</code>, <code>ATRTGL</code>, <code>ATRTPC</code>, <code>ATPCKD</code>, <code>ATIND8</code>, <code>ATDUD8</code>, <code>ATPCK8</code>, <code>ATFRTL</code>, <code>ATPIVN</code>, <code>ATPIIN</code>, <code>ATSORN</code>, <code>ATSSRN</code>, <code>ATCAID</code>, <code>ATPTYP</code>, <code>ATDSDT</code>, <code>ATDSD8</code>, <code>ATINV#</code>, <code>ATDDEL</code>, <code>ATENSQ</code>, <code>ATCORD</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATUNMS</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPRAM</code>, <code>ATFRAM</code>, <code>ATPONO</code>.</p> </li> <li> <p>APTRNX:</p> </li> <li>Input file (<code>IF</code>), 404 bytes, key length 27, external key, used for duplicate invoice checking.</li> <li> <p>Fields: <code>XXCO</code>, <code>XXENT</code>, <code>XXVEND</code>, <code>XXINV</code>.</p> </li> <li> <p>APOPNHC:</p> </li> <li>Input file (<code>IF</code>), 384 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>OCDEL</code>, <code>OCCONO</code>, <code>OCVEND</code>, <code>OCVONO</code>, <code>OCINDS</code>, <code>OCINVN</code>.</p> </li> <li> <p>APVEND:</p> </li> <li>Input file (<code>IF</code>), 579 bytes, key length 7, used for vendor validation.</li> <li> <p>Fields: <code>VNDEL</code>, <code>VNVNAM</code>, <code>VNAD1\u20134</code>, <code>VNGRRQ</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNEXGL</code>, <code>VNTERM</code>, <code>VNCAID</code>, <code>VNPRID</code>, <code>VNACLS</code>, <code>VNACOS</code>, <code>VNARTE</code>, <code>VNABK#</code>.</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 2, used for company validation.</li> <li> <p>Fields: <code>ACDEL</code>, <code>ACNAME</code>, <code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACDSGL</code>, <code>ACNXTE</code>, <code>ACJCYN</code>, <code>ACRTGL</code>, <code>ACPOYN</code>, <code>ACEEGL</code>.</p> </li> <li> <p>APCHKT:</p> </li> <li>Update file (<code>UF</code>), 80 bytes, key length 21, used for prepaid check validation.</li> <li> <p>Fields: <code>ACCKAM</code>, <code>ATPCKD</code>, <code>ATPCK8</code>, <code>ATHOLD</code>.</p> </li> <li> <p>GLMAST:</p> </li> <li>Input file (<code>IF</code>), 256 bytes, key length 11, used for G/L validation.</li> <li> <p>Fields: <code>GLDEL</code>, <code>GLDESC</code>, <code>GLAPCD</code>, <code>GLPOCD</code>.</p> </li> <li> <p>APINVH:</p> </li> <li>Input file (<code>IF</code>), 64 bytes, key length 32, used for duplicate invoice checking.</li> <li> <p>Fields: <code>AIKEY</code>, <code>AIVONO</code>.</p> </li> <li> <p>APSTAT:</p> </li> <li>Update file (<code>UF</code>), 14 bytes, key length 12, used to store error status.</li> <li> <p>Fields: <code>AXCODE</code>, <code>AXCONO</code>, <code>AXWSTN</code>, <code>AXERR</code>.</p> </li> <li> <p>GSTABL:</p> <ul> <li>Input file (<code>IF</code>), 256 bytes, key length 12, used for terms validation.</li> <li>Fields: <code>TBDEL</code>, <code>TBDESC</code>, <code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>, <code>TBADON</code>, <code>TBDISD</code>.</li> </ul> </li> <li> <p>INFIL1:</p> <ul> <li>Input file (<code>IF</code>), 448 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>INTZH1:</p> <ul> <li>Input file (<code>IF</code>), 592 bytes, key length 9, external key, used for receipt validation.</li> <li>Fields: <code>IHNQTY</code>, <code>IHNQTF</code>, <code>IHUNMS</code>, <code>IHAPLP</code>, <code>IHAPTQ</code>, <code>IHAPTF</code>, <code>IHAPTD</code>.</li> </ul> </li> <li> <p>APLIST:</p> <ul> <li>Output printer file (<code>O</code>), 164 bytes, used to generate the voucher edit report.</li> <li>Contains headers, detail lines, error/warning messages, and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP110</code> program does not call any external programs. It operates independently, processing input files, performing validations, and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP110%20RPG/#summary","title":"Summary","text":"<p>The <code>AP110</code> RPG program validates A/P voucher transactions by processing header and detail records from <code>APTRAN</code>. It enforces strict business rules, including company, vendor, G/L, invoice, gallons/receipt, purchase order, and discount validations. Errors (<code>95</code>) and warnings (<code>96</code>) are flagged and reported in <code>APLIST</code>, with error status updated in <code>APSTAT</code>. The program supports ACH, wire transfer, employee expense, and utility auto-payment transactions, and includes enhancements for FlexiCapture invoice uploads. It accumulates totals for invoices, prepaid amounts, and vendor hash, producing a comprehensive report for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/","title":"AP115 RPG","text":"<p>The <code>AP115.rpg36.txt</code> is an RPG III program designed for the IBM midrange systems (e.g., AS/400 or iSeries), called by an OCL program (e.g., <code>AP115.ocl36.txt</code>). It performs validation and editing of prepaid checks, ensuring that checks are valid, not already open (unless being voided), and that voided checks match the full check amount. The program generates a printed report (<code>APLIST</code>) listing any errors or discrepancies found during the validation process. Below is a detailed explanation of the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#process-steps-of-the-rpg-program-ap115","title":"Process Steps of the RPG Program (AP115)","text":"<p>The <code>AP115</code> program processes prepaid check transactions by reading records from the <code>APCHKT</code> and <code>APCHKTX</code> files, validating them against <code>APCHKR</code>, and reporting errors via the <code>APLIST</code> printer file. The key steps are as follows:</p> <ol> <li>Initialization (Lines 0042\u20130054):</li> <li>Executes at the detail level (<code>L2</code>) to initialize variables:<ul> <li>Retrieves the current system date and time (<code>TIME</code> instruction) and stores them in <code>TIMDAT</code>, <code>TIME</code>, and <code>DATE</code>.</li> <li>Sets a separator (<code>SEP</code>) to <code>'* '</code> for formatting the printed report.</li> <li>Initializes the page number (<code>PAGE</code>) to 0.</li> </ul> </li> <li>Validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file:<ul> <li>If found (<code>N98</code>), moves the company name (<code>ACNAME</code>) to <code>CONAME</code>.</li> <li>If not found (<code>98</code>), sets <code>CONAME</code> to blanks.</li> </ul> </li> <li> <p>At the detail level (<code>L1</code>):</p> <ul> <li>Initializes check amount accumulator (<code>L1CKAM</code>) and void amount (<code>L1VOID</code>) to 0.</li> <li>Clears indicators <code>10</code>, <code>11</code>, <code>12</code> (used for check status), and <code>81</code>, <code>91</code> (used for printing and error handling).</li> </ul> </li> <li> <p>Main Processing (Lines 0055\u20130058):</p> </li> <li>Accumulates the check amount (<code>ATCKAM</code>) into <code>L1CKAM</code> at the detail level (<code>L1</code>), setting indicators <code>10</code> (non-void check) or <code>11</code> (void check) based on the transaction type.</li> <li> <p>Calls the <code>L1TOT</code> subroutine to validate each check record.</p> </li> <li> <p>L1TOT Subroutine (Lines 0061\u20130081):</p> </li> <li>Validates the check record by chaining the check key (<code>ATCKEY</code>) to the <code>APCHKR</code> file:<ul> <li>For non-void checks (<code>10</code> indicator on):</li> <li>If the check exists in <code>APCHKR</code> and is open (<code>AMCODE = 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK IS ALREADY OPEN\").</li> <li>If the check does not exist (<code>91</code> on), proceeds without error.</li> <li>For void checks (<code>11</code> indicator on):</li> <li>If the check does not exist in <code>APCHKR</code> or is not open (<code>AMCODE \u2260 'O'</code>), sets indicator <code>91</code> and calls <code>L1PRT</code> to report an error (\"CHECK MUST BE OPEN TO BE VOIDED\").</li> <li>Calculates the void amount (<code>L1VOID = -L1CKAM</code>) and compares it to the actual check amount (<code>AMCKAM</code>). If they do not match, sets indicator <code>12</code> and calls <code>L1PRT</code> to report an error (\"WHOLE CHECK AMOUNT MUST BE VOIDED\").</li> </ul> </li> <li> <p>Ends the subroutine (<code>ENDL1T</code>).</p> </li> <li> <p>L1PRT Subroutine (Lines 0083\u20130099):</p> </li> <li> <p>Prints error records to the <code>APLIST</code> printer file:</p> <ul> <li>Sets the lower limit (<code>SETLL</code>) for <code>APCHKTX</code> using the check key (<code>ATKY21</code>).</li> <li>Reads <code>APCHKTX</code> records in a loop (<code>AGNL1P</code> tag) until end-of-file (<code>09</code> indicator) or a key mismatch (<code>AXCKEY \u2260 ATCKEY</code>).</li> <li>For each matching record:</li> <li>Sets indicators <code>80</code> (print detail) and <code>81</code> (control printing).</li> <li>Writes the record to <code>APLIST</code> using the <code>EXCPT</code> operation.</li> <li>Resets indicator <code>80</code> after printing.</li> <li>Continues reading until all matching records are processed (<code>ENDL1P</code>).</li> </ul> </li> <li> <p>Output to APLIST (Lines 0102\u20130148):</p> </li> <li> <p>Generates a formatted report with headers and detail lines:</p> <ul> <li>Header (L2):</li> <li>Prints company name (<code>CONAME</code>), page number (<code>PAGE</code>), date (<code>DATE</code>), workstation ID (<code>WSID</code>), wire transfer description (<code>WIREDS</code>), and time (<code>TIME</code>).</li> <li>Includes static text like \"PREPAID CHECK EDIT\" and column headers (\"CO #\", \"PPD CHECK\", \"BANK G/L\", \"ENT#\", \"CHK AMOUNT\", \"ACTUAL CHECK AMOUNT\").</li> <li>Detail Lines (80):</li> <li>Prints company number (<code>AXCONO</code>), prepaid check number (<code>AXPPCK</code>), bank G/L account (<code>AXBKGL</code>), entry number (<code>AXENT#</code>), check amount (<code>AXCKAM</code>), and check date (<code>AXCKDT</code>).</li> <li>Total Lines (81):</li> <li>Prints total check amount (<code>L1CKAM</code>) and actual check amount (<code>AMCKAM</code>).</li> <li>Includes error messages based on indicators:<ul> <li><code>10N91</code>: \"CHECK IS ALREADY OPEN\".</li> <li><code>11 91</code>: \"CHECK MUST BE OPEN TO BE VOIDED\".</li> <li><code>12 11N91</code>: \"WHOLE CHECK AMOUNT MUST BE VOIDED\".</li> </ul> </li> <li>Uses separator (<code>SEP</code>) for formatting between sections.</li> </ul> </li> <li> <p>Termination:</p> </li> <li>The program processes all records in <code>APCHKT</code> and <code>APCHKTX</code>, generating the report and terminating when no more records are found.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Check Validation:</li> <li>Non-void checks (<code>AMCODE \u2260 'V'</code>) must not already exist in <code>APCHKR</code> as open (<code>AMCODE = 'O'</code>). If they are open, an error is reported.</li> <li>Void checks (<code>AMCODE = 'V'</code>) must exist in <code>APCHKR</code> and be open (<code>AMCODE = 'O'</code>). If not, an error is reported.</li> <li> <p>For void checks, the entire check amount (<code>L1CKAM</code>) must match the actual check amount (<code>AMCKAM</code>) in <code>APCHKR</code>. If not, an error is reported.</p> </li> <li> <p>Error Reporting:</p> </li> <li>Errors are printed to the <code>APLIST</code> report for each invalid check, including company number, check number, bank G/L, entry number, check amount, and error message.</li> <li> <p>The report includes totals for check amounts and highlights discrepancies.</p> </li> <li> <p>Company Validation:</p> </li> <li> <p>The company number (<code>ATCONO</code>) must exist in <code>APCONT</code>. If not, the company name is blanked out.</p> </li> <li> <p>Formatting and Output:</p> </li> <li>The report includes headers with company, date, time, and workstation details, followed by detail lines for each check and totals for check amounts.</li> <li>Errors are clearly marked with descriptive messages to guide correction.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined with specific attributes:</p> <ol> <li>APCHKT:</li> <li>Primary input file (<code>IP</code>), 80 bytes, key length 21, used to read prepaid check transactions.</li> <li> <p>Fields: <code>ATCONO</code> (company), <code>ATBKGL</code> (bank G/L), <code>ATPPCK</code> (prepaid check number), <code>ATCKAM</code> (check amount), <code>ATCKDT</code> (check date).</p> </li> <li> <p>APCHKTX:</p> </li> <li>Indexed input file (<code>ID</code>), 80 bytes, key length 21, used to retrieve additional check details.</li> <li> <p>Fields: <code>AXCONO</code> (company), <code>AXBKGL</code> (bank G/L), <code>AXPPCK</code> (prepaid check number), <code>AXENT#</code> (entry number), <code>AXCKAM</code> (check amount), <code>AXCKDT</code> (check date).</p> </li> <li> <p>APCHKR:</p> </li> <li>Input file (<code>IC</code>), 128 bytes, key length 16, used to validate check status.</li> <li> <p>Fields: <code>AMCODE</code> (check status: 'D', 'O', 'R', 'V'), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APCONT:</p> </li> <li>Input file (<code>IC</code>), 256 bytes, key length 2, used to validate company number and retrieve company name.</li> <li> <p>Fields: <code>ACNAME</code> (company name).</p> </li> <li> <p>APLIST:</p> </li> <li>Output printer file (<code>O</code>), 132 bytes, used to generate the prepaid check edit report.</li> <li>Contains headers, detail lines, totals, and error messages.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP115</code> program does not call any external programs. It operates independently, processing input files and generating the report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP115%20RPG/#summary","title":"Summary","text":"<p>The <code>AP115</code> RPG program validates prepaid checks by checking their status in <code>APCHKR</code> and ensuring compliance with business rules (e.g., non-void checks must not be open, void checks must be open and fully voided). It processes records from <code>APCHKT</code> and <code>APCHKTX</code>, validates against <code>APCONT</code> and <code>APCHKR</code>, and produces a detailed error report via <code>APLIST</code>. The program enforces data integrity for check processing, ensuring that only valid checks are processed and errors are clearly reported for correction. No external programs are called, making it a self-contained validation routine.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/","title":"Summary AP100","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#list-of-use-cases-implemented-by-the-ap100-ap110-and-ap115-programs","title":"List of Use Cases Implemented by the AP100, AP110, and AP115 Programs","text":"<p>The RPG programs <code>AP100</code>, <code>AP110</code>, and <code>AP115</code> form a call stack for processing Accounts Payable (A/P) voucher transactions on IBM midrange systems (e.g., AS/400 or iSeries). Together, they implement a single cohesive use case:</p> <ol> <li>Use Case: Process and Validate A/P Voucher Transactions</li> <li>Description: This use case involves the entry, validation, editing, and reporting of A/P voucher transactions, including header and detail records, for various payment types (e.g., prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). The process ensures data integrity, validates against vendor, company, G/L, and inventory data, and generates reports for errors and totals.</li> <li>Components:<ul> <li>AP100: Handles interactive entry and validation of voucher transactions via screen formats (<code>AP100S1</code>, <code>AP100S2</code>, <code>AP100S3</code>, <code>AP100S5</code>), updating transaction files (<code>APTRAN</code>, <code>APCONT</code>) and calling <code>AP1011</code> for freight calculations.</li> <li>AP110: Validates voucher transactions from <code>APTRAN</code>, checks for errors (e.g., duplicate invoices, invalid G/Ls), updates prepaid check records (<code>APCHKT</code>), and produces an edit report (<code>APLIST</code>).</li> <li>AP115: Validates prepaid checks, ensuring non-void checks are not already open and void checks match the full amount, generating an error report (<code>APLIST</code>).</li> </ul> </li> </ol> <p>This single use case encompasses the entire workflow of entering, validating, and reporting A/P voucher transactions, with each program handling a specific aspect of the process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#function-requirement-document-process-and-validate-ap-voucher-transactions","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#function-requirement-document-process-and-validate-ap-voucher-transactions_1","title":"Function Requirement Document: Process and Validate A/P Voucher Transactions","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#overview","title":"Overview","text":"<p>This function processes and validates Accounts Payable (A/P) voucher transactions, including header and detail records, for various payment types (prepaid checks, ACH, wire transfers, employee expenses, utility auto-payments). It ensures data integrity by validating inputs against company, vendor, G/L, and inventory data, calculates due dates and discounts, updates transaction and check files, and generates reports for errors and totals.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): 2-digit identifier for the company.</li> <li>Vendor Number (<code>VEND</code>): 5-digit identifier for the vendor.</li> <li>Entry Number (<code>ENT#</code>): 5-digit transaction identifier (auto-generated or user-provided).</li> <li>Invoice Number (<code>INV#</code>): 20-character vendor invoice number.</li> <li>Invoice Amount (<code>IAMT</code>): 11.2-digit total invoice amount.</li> <li>Invoice Date (<code>INDT</code>): 6-digit vendor invoice date (MMDDYY).</li> <li>Due Date (<code>DUDT</code>): 6-digit due date (MMDDYY, calculated or user-provided).</li> <li>Discount Due Date (<code>DSDT</code>): 6-digit discount due date (MMDDYY, calculated or user-provided).</li> <li>Hold Code (<code>HOLD</code>): 1-character code (<code>H</code>=hold, <code>A</code>=ACH, <code>W</code>=wire transfer, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepay Code (<code>PAID</code>): 1-character code (<code>P</code>=prepaid, <code>A</code>=ACH, <code>E</code>=employee expense, <code>U</code>=utility auto-payment).</li> <li>Prepaid Check Number (<code>PPCK</code>): 6-digit check number for prepaid transactions.</li> <li>Single Check Flag (<code>SNGL</code>): 1-character flag (<code>S</code>=single check).</li> <li>Canceled Voucher (<code>CNVO</code>): 5-digit canceled voucher number.</li> <li>Purchase Order Number (<code>PONO</code>): 30-character purchase order number.</li> <li>Sales Order Number (<code>SORN</code>): 6-digit sales order number.</li> <li>Carrier ID (<code>CAID</code>): 6-character carrier identifier.</li> <li>Process Type (<code>PTYP</code>): 6-character process type (<code>NORMAL</code>, <code>PAPER</code>, <code>ARGLMS</code>).</li> <li>Freight Total (<code>FRTL</code>): 7.2-digit total freight amount to allocate.</li> <li>Detail Lines:</li> <li>Sequence Number (<code>ENSQ</code>): 3-digit line sequence.</li> <li>Expense G/L (<code>EXGL</code>): 8-digit expense general ledger account.</li> <li>Amount (<code>AMT</code>): 8.2-digit line amount.</li> <li>Discount Amount (<code>DISC</code>): 8.2-digit discount amount.</li> <li>Discount Percentage (<code>DSPC</code>): 3.2-digit discount percentage.</li> <li>Gallons (<code>GALN</code>): 4.2-digit gallons quantity.</li> <li>Receipt Number (<code>RCPT</code>): 7-digit receipt number.</li> <li>Receipt Code (<code>CLCD</code>): 1-character code (<code>O</code>=open, <code>C</code>=closed).</li> <li>Freight Amount (<code>FRAM</code>): 4.2-digit freight amount per line.</li> <li>Product Amount (<code>PRAM</code>): 6.2-digit product amount per line.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>APTRAN</code>: Transaction header and detail records.</li> <li><code>APCHKT</code>: Prepaid check records.</li> <li><code>APCONT</code>: Updated with next entry number.</li> <li><code>APSTAT</code>: Error status (<code>Y</code> for errors, <code>N</code> otherwise).</li> <li>Report (<code>APLIST</code>): Printed report listing transaction details, errors, warnings, and totals (invoices, prepaid amounts, vendor hash).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Validate company number (<code>CONO</code>) against <code>APCONT</code>. If invalid or deleted, return error.</li> <li>Initialize accumulators for invoice counts, amounts, discounts, and prepaid totals.</li> <li> <p>Set process type (<code>PTYP</code>) to <code>NORMAL</code> if blank.</p> </li> <li> <p>Validate Header:</p> </li> <li>Ensure <code>CONO</code> exists in <code>APCONT</code>, not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Validate <code>VEND</code> against <code>APVEND</code>, ensuring not deleted (<code>VNDEL \u2260 'D'</code>), not inactive (<code>VNDEL \u2260 'I'</code>), and name not blank.</li> <li>Verify <code>INV#</code> is non-blank and unique (check <code>APTRNX</code>, <code>APINVH</code>, <code>APOPNHC</code> for non-prepaid, non-canceled, non-wire-transfer transactions).</li> <li>Ensure <code>INDT</code> is non-zero and not older than one year (warning only).</li> <li>Ensure <code>IAMT</code> is non-zero and matches sum of detail amounts (<code>AMT</code> + <code>FRAM</code>).</li> <li>Validate <code>HOLD</code> (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) and <code>PAID</code> (<code>P</code>, <code>A</code>, <code>E</code>, <code>U</code>).</li> <li>If <code>PAID</code> is set, ensure <code>PPCK</code> is provided.</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code> using terms (<code>VNTERM</code>) from <code>GSTABL</code> (net days, discount days).</li> <li>Validate <code>ATAPGL</code> and <code>ATBKGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>SORN \u2260 0</code>, prohibit <code>RCPT</code> and <code>GALN</code>.</li> <li> <p>For freight invoices (<code>FRTL \u2260 0</code>), allocate amounts to detail lines (call <code>AP1011</code>).</p> </li> <li> <p>Validate Detail Lines:</p> </li> <li>Validate <code>EXGL</code> against <code>GLMAST</code>, ensuring not deleted or inactive.</li> <li>If <code>GLPOCD = 'Y'</code>, ensure <code>PONO</code> is non-blank.</li> <li>Validate gallons/receipts:<ul> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, ensure <code>GLAPCD = 'Y'</code>.</li> <li>If <code>RCPT \u2260 0</code>, validate against <code>INFIL1</code> or <code>INTZH1</code> for sufficient quantity (<code>GALN \u2264 IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>) and no prior A/P postings.</li> <li>Ensure <code>CLCD</code> is <code>'O'</code> or <code>'C'</code>.</li> </ul> </li> <li>Validate discounts:<ul> <li>Ensure <code>DISC</code> and <code>DSPC</code> are not both non-zero.</li> <li>If <code>DISC</code> or <code>DSPC</code> is non-zero, require <code>ACDSGL \u2260 0</code>.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li>If <code>DSDT \u2260 0</code> and <code>DSDT \u2264 system date</code>, issue warning.</li> <li>Calculate <code>DISC = AMT * (DSPC / 100)</code> if <code>DSPC \u2260 0</code>.</li> </ul> </li> <li> <p>Calculate net amount: <code>NETAMT = AMT - DISC</code>.</p> </li> <li> <p>Validate Prepaid Checks:</p> </li> <li>For <code>PAID</code> transactions, update <code>APCHKT</code> with check amount (<code>ACCKAM = AMT - DISC</code>).</li> <li>Ensure non-void checks are not already open (<code>AMCODE \u2260 'O'</code>).</li> <li> <p>Ensure void checks are open (<code>AMCODE = 'O'</code>) and match full amount (<code>L1CKAM = AMCKAM</code>).</p> </li> <li> <p>Update Files:</p> </li> <li>Write/update <code>APTRAN</code> with header and detail records.</li> <li>Update <code>APCONT</code> with next entry number (<code>ACNXTE</code>).</li> <li>Write/update <code>APCHKT</code> with prepaid check records.</li> <li> <p>Write <code>APSTAT</code> with error status (<code>Y</code> or <code>N</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Produce <code>APLIST</code> report with:<ul> <li>Headers: Company, date, time, workstation, process type.</li> <li>Details: Entry, vendor, invoice number, description, amounts, G/L, status.</li> <li>Errors/Warnings: List entry numbers with issues (e.g., invalid vendor, duplicate invoice).</li> <li>Totals: Invoice count, amounts, discounts, prepaid totals, vendor hash.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Vendor:</li> <li><code>CONO</code> must exist in <code>APCONT</code>, not deleted.</li> <li> <p><code>VEND</code> must exist in <code>APVEND</code>, not deleted or inactive, with non-blank name.</p> </li> <li> <p>Invoice:</p> </li> <li><code>INV#</code> must be non-blank and unique (unless prepaid, canceled, or wire transfer).</li> <li><code>IAMT</code> must be non-zero and match detail totals.</li> <li> <p><code>INDT</code> must be non-zero; warn if older than one year.</p> </li> <li> <p>Payment Types:</p> </li> <li><code>HOLD</code>: <code>'H'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>.</li> <li><code>PAID</code>: <code>'P'</code>, <code>'A'</code>, <code>'E'</code>, <code>'U'</code>, with <code>PPCK</code> required if set.</li> <li> <p><code>SNGL = 'S'</code> for single check processing.</p> </li> <li> <p>Gallons and Receipts:</p> </li> <li>If <code>VNGRRQ = 'Y'</code>, require <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>VNGRRQ = 'N'</code>, prohibit <code>GALN</code> and <code>RCPT</code>.</li> <li>If <code>GLAPCD = 'Y'</code> and <code>AMT &gt; 0</code>, require <code>GALN</code>.</li> <li>If <code>GALN &gt; 0</code>, require <code>GLAPCD = 'Y'</code>.</li> <li><code>RCPT</code> must exist in <code>INFIL1</code> or <code>INTZH1</code> with sufficient quantity.</li> <li> <p><code>CLCD</code> must be <code>'O'</code> or <code>'C'</code>.</p> </li> <li> <p>Purchase Orders:</p> </li> <li> <p>If <code>GLPOCD = 'Y'</code>, require <code>PONO</code>.</p> </li> <li> <p>Discounts:</p> </li> <li><code>DISC</code> and <code>DSPC</code> cannot both be non-zero.</li> <li>Require <code>ACDSGL</code> if <code>DISC</code> or <code>DSPC</code> is non-zero.</li> <li>If <code>TBDISC = 0</code>, prohibit <code>DISC</code> and <code>DSPC</code>.</li> <li>If <code>TBDISC \u2260 0</code>, ensure <code>DSPC = TBDISC</code> or both <code>DISC</code> and <code>DSPC</code> are non-zero.</li> <li> <p>Warn if <code>DSDT \u2264 system date</code>.</p> </li> <li> <p>Prepaid Checks:</p> </li> <li>Non-void checks must not be open.</li> <li>Void checks must be open and match full amount.</li> <li> <p>Update <code>ACCKAM = AMT - DISC</code>.</p> </li> <li> <p>Freight:</p> </li> <li>If <code>FRTL \u2260 0</code>, allocate amounts to detail lines via <code>AP1011</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#calculations","title":"Calculations","text":"<ul> <li>Due Date (<code>DUDT</code>): Calculated from <code>INDT</code> + <code>TBNETD</code> (net days from <code>GSTABL</code>), adjusted for holidays/weekends.</li> <li>Discount Due Date (<code>DSDT</code>): Calculated from <code>INDT</code> + <code>TBDISD</code> (discount days from <code>GSTABL</code>).</li> <li>Discount Amount (<code>DISC</code>): If <code>DSPC \u2260 0</code>, <code>DISC = AMT * (DSPC / 100)</code>.</li> <li>Net Amount (<code>NETAMT</code>): <code>NETAMT = AMT - DISC</code>.</li> <li>Check Amount (<code>ACCKAM</code>): <code>ACCKAM = AMT - DISC</code> for prepaid checks.</li> <li>Receipt Quantity: <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code> (from <code>INFIL1</code> or <code>INTZH1</code>).</li> <li>Totals:</li> <li><code>L1AMT = \u03a3(AMT)</code>, <code>L1PAMT = \u03a3(PRAM)</code>, <code>L1FAMT = \u03a3(FRAM)</code>, <code>L1DISC = \u03a3(DISC)</code>, <code>L1NET = L1AMT - L1DISC</code> (per entry).</li> <li><code>L2AMT</code>, <code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2DISC</code>, <code>L2NET</code>, <code>L2PPD</code>, <code>L2PPA</code>, <code>L2PPW</code>, <code>L2PPE</code> accumulate <code>L1</code> totals.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/Summary%20AP100/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Program Called: <code>AP1011</code> (for freight amount allocation to detail lines when <code>FRTL \u2260 0</code>).</li> <li>Files:</li> <li>Input: <code>APCONT</code>, <code>APVEND</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>INFIL1</code>, <code>INTZH1</code>, <code>APTRNX</code>, <code>APOPNHC</code>, <code>APINVH</code>.</li> <li>Update: <code>APTRAN</code>, <code>APCHKT</code>, <code>APSTAT</code>.</li> <li>Output: <code>APLIST</code> (report).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/","title":"AP106 OCL","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#ap106-ocl-program","title":"AP106 OCL Program","text":"<p>This is an Operation Control Language (OCL) file (AP106.ocl36.txt) used on the IBM i (AS/400) system to handle Accounts Payable (A/P) voucher entry uploads for FlexiCapture import files. Below is a detailed explanation of the process steps, external programs called, and tables/files used in this program, based on the provided OCL code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#overview","title":"Overview","text":"<p>The OCL file automates the process of uploading A/P voucher entries from a FlexiCapture import file into the IBM i system. It ensures that the upload process is synchronized with other system operations (e.g., Profound Genie) by introducing pauses and checks. The program processes the uploaded data, saves it to a history table, and prepares it for further processing by other programs (e.g., AP107, AP110). It also interacts with PC-based batch files for file uploads and manages various database files on the IBM i system.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initial Checks for A/P Voucher Entry File (APTR?WS?)</li> <li>The program checks if there are records in the A/P voucher entry file (<code>?9?APTR?WS?</code>) using conditional statements (<code>IFF</code>).</li> <li>If records exist, it displays messages indicating:<ul> <li>\"There are records in the A/P voucher entry file.\"</li> <li>\"You must post the batch before you can run the import from FlexiCapture on this workstation.\"</li> </ul> </li> <li> <p>A <code>PAUSE</code> is introduced to ensure the FlexiCapture upload process completes before further processing (to address synchronization issues with Profound Genie).</p> </li> <li> <p>Clear and Rebuild A/P Voucher Entry Files</p> </li> <li>If the A/P voucher entry file exists (<code>DATAF1-?9?APTR?WS?</code>), the program:<ul> <li>Clears the file using <code>CLRPFM ?9?APTR?WS?</code>.</li> <li>Rebuilds the file with <code>BLDFILE ?9?APTR?WS?,I,RECORDS,500,404,,,2,10</code>, specifying 500 records, a record length of 404 bytes, and other parameters.</li> </ul> </li> <li> <p>If the index file exists (<code>DATAF1-?9?APTX?WS?</code>), it builds an index using <code>BLDINDEX ?9?APTX?WS?,2,2,?9?APTR?WS?,+,,,12,5,385,20</code>.</p> </li> <li> <p>Set Program Variable</p> </li> <li> <p>The variable <code>P20</code> is set to <code>'APTR?WS?'</code> to reference the A/P voucher entry file.</p> </li> <li> <p>Start PC Organizer and Run FlexiCapture Upload</p> </li> <li>The program calls <code>STRPCOCLP</code> to start the PC Organizer, which prepares the system for PC-based commands.</li> <li>It executes a PC batch file (<code>STRPCCMD</code>) located at <code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUPD.BAT</code> to upload the journal entry file. This batch file is executed regardless of the <code>?9?/G</code> condition (same command in both <code>IF</code> and <code>ELSE</code> branches).</li> <li> <p>A <code>PAUSE</code> is displayed with the message \"TYPE 0, ENTER TO CONTINUE AFTER UPLOAD PROCESS IS COMPLETE,\" ensuring the user waits for the upload to finish.</p> </li> <li> <p>Run AP107 Program</p> </li> <li>The program loads <code>AP107</code> and opens two files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APFLEXH</code> (the history table for FlexiCapture uploads).</li> </ul> </li> <li> <p>The <code>AP107</code> program processes the uploaded data and saves it to the history table (<code>APFLEXH</code>).</p> </li> <li> <p>Run AP106 Program</p> </li> <li>The program loads itself (<code>AP106</code>) and opens several files:<ul> <li><code>APINVUP</code> (the uploaded journal entry file).</li> <li><code>APTRAN</code> (A/P transaction file, labeled <code>?9?APTR?WS?</code>).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APDATE</code> (A/P date file).</li> </ul> </li> <li> <p>The <code>AP106</code> program processes the uploaded data into the A/P transaction file and validates it against control, vendor, and other reference files.</p> </li> <li> <p>Clear and Rebuild A/P Check Temporary File</p> </li> <li>The program deletes the A/P check temporary file (<code>APCT?WS?</code>) using <code>GSDELETE APCT?WS?,,,,,,,,?9?</code>.</li> <li> <p>It rebuilds the file with <code>BLDFILE ?9?APCT?WS?,I,RECORDS,500,80,,,2,21</code>, specifying 500 records and a record length of 80 bytes.</p> </li> <li> <p>Run AP110 Program</p> </li> <li>The program loads <code>AP110</code> and opens multiple files:<ul> <li><code>APTRAN</code> (A/P transaction file).</li> <li><code>APCONT</code> (A/P control file).</li> <li><code>APCHKR</code> (A/P check register file).</li> <li><code>APCHKT</code> (A/P check temporary file, labeled <code>?9?APCT?WS?</code>).</li> <li><code>APTRNX</code> (A/P transaction index file, labeled <code>?9?APTX?WS?</code>).</li> <li><code>GLMAST</code> (general ledger master file).</li> <li><code>APOPNHC</code> (A/P open history control file).</li> <li><code>GSTABL</code> (general system table).</li> <li><code>APINVH</code> (A/P invoice history file).</li> <li><code>APSTAT</code> (A/P status file).</li> <li><code>APVEND</code> (A/P vendor file).</li> <li><code>INFIL1</code> (information file 1).</li> <li><code>INTZH1</code> (internal history file 1).</li> </ul> </li> <li>It overrides the printer file <code>APLIST</code> to output to either <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on the <code>?9?/G</code> condition.</li> <li> <p>The <code>AP110</code> program processes the A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>Clear Uploaded File</p> </li> <li> <p>The program clears the <code>APINVUP</code> file using <code>CLRPFM ?9?APINVUP</code> to prepare for the next upload.</p> </li> <li> <p>End of Program</p> <ul> <li>The program jumps to the <code>END</code> tag, clears local variables (<code>LOCAL BLANK-*ALL</code>), and terminates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>STRPCOCLP</li> <li> <p>This program starts the PC Organizer, enabling the execution of PC-based commands (e.g., batch files) from the IBM i system.</p> </li> <li> <p>AP107</p> </li> <li> <p>Processes the uploaded journal entry file (<code>APINVUP</code>) and saves it to the FlexiCapture history table (<code>APFLEXH</code>).</p> </li> <li> <p>AP106</p> </li> <li> <p>The OCL file itself is loaded as a program to process the uploaded data into the A/P transaction file (<code>APTRAN</code>) and validate it against control, vendor, and other files.</p> </li> <li> <p>AP110</p> </li> <li> <p>Processes A/P transactions, generates checks, and updates related files (e.g., general ledger, invoice history).</p> </li> <li> <p>APINVUP.BAT</p> </li> <li>A PC batch file (<code>C:\\Program Files (x86)\\FLEXICAPTURE_UPLOAD\\APINVUP.BAT</code>) executed via <code>STRPCCMD</code> to upload the journal entry file from the PC to the IBM i system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files on the IBM i system, identified by their labels and purposes:</p> File Name Label Purpose Used in Program APINVUP ?9?APINVUP Stores the uploaded journal entry file from FlexiCapture. AP107, AP106 APFLEXH ?9?APFLEXH History table for FlexiCapture uploads (saves uploaded file details). AP107 APTRAN ?9?APTR?WS? A/P transaction file (stores voucher entries). AP106, AP110 APCONT ?9?APCONT A/P control file (contains control data for A/P processing). AP106, AP110 APVEND ?9?APVEND A/P vendor file (contains vendor information). AP106, AP110 GSTABL ?9?GSTABL General system table (contains system-wide configuration data). AP106, AP110 APDATE ?9?APDATE A/P date file (stores date-related data for A/P processing). AP106 APCHKR ?9?APCHKR A/P check register file (tracks issued checks). AP110 APCHKT ?9?APCT?WS? A/P check temporary file (temporary storage for check data). AP110 APTRNX ?9?APTX?WS? A/P transaction index file (index for A/P transaction file). AP110 GLMAST ?9?GLMAST General ledger master file (stores G/L account information). AP110 APOPNHC ?9?APOPNHC A/P open history control file (tracks open A/P history). AP110 APINVH ?9?APINVH A/P invoice history file (stores historical invoice data). AP110 APSTAT ?9?APSTAT A/P status file (tracks status of A/P transactions). AP110 INFIL1 ?9?INFIL1 Information file 1 (general-purpose data file). AP110 INTZH1 ?9?INTZH1 Internal history file 1 (internal history data). AP110 <p>Notes on File Labels: - <code>?9?</code> is a library prefix (likely a system or company-specific library). - <code>?WS?</code> is a workstation identifier, making file names unique per workstation. - <code>DISP-SHR</code> indicates shared access, allowing multiple processes to read the file. - <code>EXTEND-100</code> specifies additional record capacity for files like <code>APTRAN</code> and <code>APCHKT</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Synchronization with Profound Genie: The <code>PAUSE</code> statements address a timing issue where Profound Genie processes the FlexiCapture upload before it completes. This ensures proper sequencing.</li> <li>FlexiCapture Integration: The program relies on FlexiCapture to generate the <code>APINVUP</code> file, which is uploaded via a PC batch file (<code>APINVUP.BAT</code>).</li> <li>Variable Substitution: Variables like <code>?9?</code>, <code>?WS?</code>, <code>?USER?</code>, and <code>?20?</code> are dynamically replaced at runtime with system-specific values (e.g., library, workstation ID, user ID).</li> <li>Printer Overrides: The <code>OVRPRTF</code> commands redirect the <code>APLIST</code> report to different output queues (<code>APEDIT</code> or <code>TESTOUTQ</code>) based on the <code>?9?/G</code> condition, likely for testing or production environments.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20OCL/#summary","title":"Summary","text":"<ul> <li>Process: The OCL file checks for existing A/P records, clears and rebuilds necessary files, uploads a journal entry file from FlexiCapture, processes it through programs <code>AP107</code>, <code>AP106</code>, and <code>AP110</code>, and updates various A/P and G/L files. It includes pauses to ensure synchronization with external processes like Profound Genie.</li> <li>External Programs: <code>STRPCOCLP</code>, <code>AP107</code>, <code>AP106</code>, <code>AP110</code>, and the PC batch file <code>APINVUP.BAT</code>.</li> <li>Files Used: 16 database files, including <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, and others, for storing and processing A/P transactions, vendor data, checks, and G/L information.</li> </ul> <p>Let me know if you need further clarification or details about specific sections!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/","title":"AP106 Summary","text":"<p>Based on the provided OCL (<code>AP106.ocl36.txt</code>) and RPG programs (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>), along with the call stack (<code>STRPCOCLP</code> \u2192 <code>APINVUP.BAT</code> \u2192 <code>AP107</code> \u2192 <code>AP106</code> \u2192 <code>AP110</code>), I will first identify the use cases implemented by the entire process. Then, assuming the primary use case is implemented as a single large function that takes inputs programmatically (rather than through screen interactions), I will provide a Function Requirements Document that concisely outlines the process steps and business rules, using pseudo-code where necessary to clarify logic.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The call stack implements a cohesive process for uploading, archiving, processing, and finalizing Accounts Payable (A/P) voucher entries from a FlexiCapture import file. While multiple tasks are performed across the programs, they collectively support a single overarching use case:</p> <ol> <li>UC1: Process FlexiCapture Import File into A/P Vouchers and Generate Checks</li> <li>Description: Upload a FlexiCapture journal entry file, archive it for audit purposes, convert it into A/P voucher entries (header and detail records), validate and calculate due/discount dates, apply vendor hold statuses, store purchase order numbers, and process transactions to generate checks and update financial files, ensuring synchronization with Profound Genie.</li> <li>Details: <ul> <li><code>STRPCOCLP</code> and <code>APINVUP.BAT</code> handle the file upload.</li> <li><code>AP107</code> archives the import file to <code>APFLEXH</code> with audit metadata.</li> <li><code>AP106</code> processes the import file into <code>APTRAN</code>, handling validations, due date calculations, and vendor hold statuses.</li> <li><code>AP110</code> processes transactions, generates checks, and updates related files.</li> <li>Pauses in the OCL ensure synchronization with Profound Genie.</li> </ul> </li> <li>Source: OCL (<code>AP106.ocl36.txt</code>), RPG (<code>AP107.rpg36.txt</code>, <code>AP106.rpg36.txt</code>).</li> </ol> <p>This single use case encompasses all the functionality, as the programs work together to achieve the end-to-end process of importing and processing A/P vouchers. Subtasks (e.g., duplicate invoice handling, due date validation) are part of this use case rather than standalone use cases, as they are tightly integrated steps within the same workflow.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document","title":"Function Requirements Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#function-requirements-document-processflexicaptureapvouchers","title":"Function Requirements Document: ProcessFlexiCaptureAPVouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#1-purpose","title":"1. Purpose","text":"<p>This document defines the requirements for a function, <code>ProcessFlexiCaptureAPVouchers</code>, that programmatically processes a FlexiCapture import file into Accounts Payable (A/P) vouchers on the IBM i (AS/400) system, archives the data, applies validations, and generates checks, replacing screen-based interactions with direct input parameters.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#2-scope","title":"2. Scope","text":"<p>The function handles the end-to-end process of: - Uploading a FlexiCapture journal entry file. - Archiving the file with audit metadata. - Converting import data into A/P voucher header and detail records. - Validating and calculating due/discount dates, handling duplicates, and applying vendor hold statuses. - Processing transactions to generate checks and update financial files. - Ensuring synchronization with external systems (e.g., Profound Genie).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#3-function-signature","title":"3. Function Signature","text":"<pre><code>FUNCTION ProcessFlexiCaptureAPVouchers(\n  input_file: File(APINVUP),\n  workstation_id: String,\n  user_id: String,\n  library: String\n) RETURNS (\n  success: Boolean,\n  error_message: String\n)\n</code></pre>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#inputs","title":"Inputs","text":"<ul> <li><code>input_file</code>: FlexiCapture import file (<code>APINVUP</code>, 1090 bytes) containing invoice data (e.g., invoice number, vendor, amount, PO number).</li> <li><code>workstation_id</code>: Workstation identifier (e.g., <code>?WS?</code>).</li> <li><code>user_id</code>: User identifier (e.g., <code>?USER?</code>).</li> <li><code>library</code>: IBM i library prefix (e.g., <code>?9?</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#outputs","title":"Outputs","text":"<ul> <li><code>success</code>: True if processing completes without errors, False otherwise.</li> <li><code>error_message</code>: Description of any errors encountered (e.g., \"Records exist in APTR?WS?\", \"Invalid vendor\").</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#4-process-steps","title":"4. Process Steps","text":"<ol> <li>Validate Input and Existing Records</li> <li>Check if <code>APTR?WS?</code> (A/P transaction file) contains unposted records.</li> <li> <p>If records exist, return <code>success=False</code>, <code>error_message=\"You must post the batch before running the import\"</code>.</p> </li> <li> <p>Upload and Archive Import File</p> </li> <li>Read <code>input_file</code> and copy each record to <code>APFLEXH</code> (history table, 1129 bytes).</li> <li>Append audit metadata: current date (YYYYMMDD), time (HHMMSS), <code>user_id</code>, <code>workstation_id</code>.</li> <li> <p>Ensure no data loss during archiving.</p> </li> <li> <p>Clear and Rebuild Transaction Files</p> </li> <li>Clear <code>APTR?WS?</code> (404 bytes) and <code>APCT?WS?</code> (80 bytes).</li> <li>Rebuild <code>APTR?WS?</code> (500 records, 404 bytes) and <code>APCT?WS?</code> (500 records, 80 bytes).</li> <li> <p>Build index <code>APTX?WS?</code> for <code>APTR?WS?</code>.</p> </li> <li> <p>Process Import Records into Vouchers</p> </li> <li> <p>For each record in <code>input_file</code>:</p> <ul> <li>Validate Invoice:</li> <li>If <code>AUPATH</code> is blank, skip record.</li> <li>Retrieve vendor data (<code>VNVNAM</code>, <code>VNTERM</code>, <code>VNHOLD</code>) from <code>APVEND</code> using <code>AUVEND</code>.</li> <li>Retrieve control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>) from <code>APCONT</code>.</li> <li>Handle Duplicates:</li> <li>If <code>AUINV#</code>, <code>AUVEND</code>, Shadowsocks5://github.com/GrokAI/xAI-Grok-Playground/blob/main/docs/GrokCreatedByxAI.md#AUVEND<code>,</code>AUBTCH` match previous record, add as detail line to existing voucher.</li> <li>Otherwise, assign new entry number (<code>ACNXTE</code>) from <code>APCONT</code> and increment it.</li> <li>Calculate Dates:</li> <li>Compute due date (<code>DUDT</code>) using <code>VNTERM</code> (net days <code>TBNETD</code> or prox days <code>TBPRXD</code> from <code>GSTABL</code>) or default to invoice date (<code>AUDATE</code>) or 30 days.</li> <li>Compute discount due date (<code>DSDT</code>) using <code>TBDISD</code> from <code>GSTABL</code> or set to zero.</li> <li>Adjust <code>DUDT</code> and <code>DSDT</code> for holidays/weekends using <code>APDATE</code> (<code>ADNED8</code>).</li> <li>Apply Hold Status:</li> <li>Set <code>HLDD</code> based on <code>VNHOLD</code>: <code>A</code> (\" Sexually explicit content: =ACH<code>,</code>U<code>= AUTOPAY,</code>E` = EMPLOYEE EXPENSE.</li> <li>Write header record to <code>APTRAN</code> with fields like <code>ATVEND</code>, <code>AUINV#</code>, <code>ATDUDT</code>, <code>ATDSDT</code>.</li> <li>Write detail record to <code>APTRAN</code> with fields like <code>ATAMT</code>, <code>AUDDSC</code>, <code>AUDGL#</code>, <code>AUPONM</code>.</li> <li>Write to History Table:</li> <li>Copy entire record to <code>APFLEXH</code>, appending audit metadata.</li> <li>Generate Checks:</li> <li>Process <code>APTRAN</code> records to create checks in <code>APCHKT</code>.</li> <li>Update related files (<code>GLMAST</code>, <code>APINVH</code>, etc.).</li> </ul> </li> <li> <p>Finalize Processing</p> </li> <li>Output reports (<code>APLIST</code>) to appropriate queue (<code>QUSRSYS/APEDIT</code> or <code>TESTOUTQ</code>).</li> <li>Clear <code>APINVUP</code> after processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#5-business-rules","title":"5. Business Rules","text":"<ul> <li>Duplicate Prevention: Group records with identical <code>AUINV#</code>, <code>AUVEND</code>, <code>AUBTCH</code> as detail lines for a single voucher.</li> <li>Date Validation:</li> <li>Convert <code>AUDATE</code> to MMDDYY format (<code>INDT</code>).</li> <li>Calculate <code>DUDT</code> and <code>DSDT</code>, adjusting for holidays/weekends using <code>APDATE</code>.</li> <li>Hold Status:</li> <li>Apply <code>VNHOLD</code> values (<code>A</code>, <code>U</code>, <code>E</code>) to set <code>HLDD</code> (ACH, Autopay, Employee Expense).</li> <li>PO Number Storage: Store <code>AUPONM</code> as <code>ATPONO</code> in <code>APTRAN</code>.</li> <li>Audit Metadata: Include <code>DATE8</code>, <code>TIME6</code>, <code>USER</code>, <code>WRKSTN</code> in <code>APFLEXH</code>.</li> <li>Synchronization: Pause after upload to ensure Profound Genie processes only completed uploads.</li> <li>Y2K Compliance: Use century prefix (<code>20</code> or <code>19</code>) based on comparison with <code>Y2KCMP</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#6-non-functional-requirements","title":"6. Non-Functional Requirements","text":"<ul> <li>Performance: Process up to 500 records efficiently.</li> <li>Reliability: Ensure no data loss during upload, archiving, or processing.</li> <li>Security: Restrict access to authorized users via <code>USER</code> and <code>WRKSTN</code>.</li> <li>Auditability: Maintain complete history in <code>APFLEXH</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Valid import file format (1090 bytes).</li> <li>Up-to-date <code>APVEND</code>, <code>APCONT</code>, <code>GSTABL</code>, <code>APDATE</code> data.</li> <li>21st-century dates only.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#8-constraints","title":"8. Constraints","text":"<ul> <li>Fixed file path for <code>APINVUP.BAT</code>.</li> <li>No external file I/O or network calls outside IBM i.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#9-dependencies","title":"9. Dependencies","text":"<ul> <li>FlexiCapture system for input file.</li> <li>Profound Genie for post-processing.</li> <li>IBM i files: <code>APINVUP</code>, <code>APFLEXH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, <code>APCHKT</code>, <code>APCHKR</code>, <code>APTRNX</code>, <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>APSTAT</code>, <code>INFIL1</code>, <code>INTZH1</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106%20Summary/#additional-notes","title":"Additional Notes","text":"<ul> <li>Single Use Case: The process is a single, integrated use case, as all programs (<code>AP107</code>, <code>AP106</code>, <code>AP110</code>) and the OCL work together to achieve the end-to-end goal of processing A/P vouchers and generating checks. Subtasks (e.g., duplicate handling, date calculations) are components of this function.</li> <li>Programmatic Inputs: The function assumes direct input of the file and metadata, eliminating screen-based pauses (e.g., \"TYPE 0, ENTER TO CONTINUE\") by using parameters like <code>workstation_id</code> and <code>user_id</code>.</li> <li>Artifact ID: A new UUID (<code>7a2b9f4c-6c1d-4b8a-9f7e-2c3d8e5f9a1b</code>) is used, as this is a new artifact unrelated to the previous one.</li> </ul> <p>Let me know if you need further clarification or adjustments to the document!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/","title":"AP106","text":"<p>The provided RPG program (<code>AP106.rpg36</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#overview","title":"Overview","text":"<p>The <code>AP106</code> RPG program processes data from a FlexiCapture import file (<code>APINVUP</code>) and converts it into A/P voucher entries in the A/P transaction file (<code>APTRAN</code>). It validates vendor information, calculates due dates and discount due dates (adjusting for holidays and weekends), handles duplicate invoices based on batch numbers, and stores purchase order (PO) numbers. The program writes header and detail records to the transaction file and updates control data, ensuring proper integration with the A/P module.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Sets initial values for variables (e.g., zeros for <code>Z5</code>, <code>Z3</code>; blanks for <code>MSG</code>, <code>MSG2</code>).</li> <li>Sets <code>PTYP</code> to <code>'FLEXI'</code> to indicate FlexiCapture import.</li> <li>Initializes indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>90</code>) and retrieves system date/time (<code>TIMDAT</code>, <code>SYDATE</code>, <code>SYTIME</code>).</li> <li>Converts the system date to YYMMDD format (<code>SYDYMD</code>) and extracts month (<code>MONTH</code>) and year (<code>YEAR</code>).</li> <li> <p>Sets indicator <code>09</code> to control the main processing loop.</p> </li> <li> <p>Check for Valid Import File</p> </li> <li> <p>Verifies that the import file path (<code>AUPATH</code>) is not blank. If blank, the program jumps to the <code>END</code> tag and terminates.</p> </li> <li> <p>Retrieve A/P Control Information</p> </li> <li>Chains to the A/P control file (<code>APCONT</code>) using indicator <code>10</code> to retrieve control data.</li> <li> <p>Stores the A/P G/L account (<code>ACAPGL</code>) in <code>APGL</code> and the cash G/L account (<code>ACCAGL</code>) in <code>BKGL</code>.</p> </li> <li> <p>Process Import File Records</p> </li> <li>Reads records from the import file (<code>APINVUP</code>) using the <code>01</code> input specification.</li> <li>For each record, performs the following:<ul> <li>Check for Duplicate Invoices:</li> <li>Compares the current invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) with saved values (<code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>).</li> <li>If they match, treats the record as an additional detail line for the existing voucher and skips to the <code>AROUND</code> tag to process the detail.</li> <li>Get Entry Number:</li> <li>Retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code>.</li> <li>If the entry number (<code>ENT#</code>) is zero, chains to <code>APTRAN</code> to check for conflicts, increments <code>ACNXTE</code> and <code>ENT#</code>, and updates <code>APCONT</code> via <code>RELAPC</code> exception output.</li> <li>If <code>ENT#</code> is non-zero, assigns a new entry number, updates <code>ACNXTE</code>, and sets <code>RECSTS</code> to <code>'ADDNEW'</code>.</li> <li>Handles overflow if <code>ENT#</code> reaches 99999.</li> <li>Validate Invoice Date:</li> <li>Converts the invoice date (<code>AUDATE</code>) to MMDDYY format (<code>INDT</code>).</li> <li>Extracts month (<code>MM</code>), day (<code>DD</code>), and year (<code>YY</code>) for further processing.</li> <li>Retrieve Vendor Information:</li> <li>Chains to the vendor file (<code>APVEND</code>) using <code>AUVEND</code> to retrieve vendor details (e.g., name <code>VNVNAM</code>, addresses <code>VNAD1</code>\u2013<code>VNAD4</code>, hold status <code>VNHOLD</code>, terms <code>VNTERM</code>).</li> <li>Stores vendor data in fields like <code>VNAM</code>, <code>VAD1</code>\u2013<code>VAD4</code>.</li> <li>Calculate Due Date:</li> <li>If the due date (<code>DUDT</code>) is zero and the vendor is not a one-time vendor (<code>AUVEND \u2260 0</code>), calls the <code>CLCDUE</code> subroutine to calculate the due date based on vendor terms (<code>VNTERM</code>).</li> <li>Uses the general system table (<code>GSTABL</code>) to retrieve net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) for due date calculation.</li> <li>If no terms are defined, defaults to the invoice date (<code>INDT</code>) or 30 days.</li> <li>Calculate Discount Due Date (MG18):</li> <li>If the discount due date (<code>DSDT</code>) is zero and the vendor is not one-time, calls the <code>CLCDSC</code> subroutine to calculate the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code>.</li> <li>Sets <code>DSDT</code> to zero if no discount days are defined.</li> <li>Validate Due Date for Holidays/Weekends (MG17):</li> <li>Chains to the A/P date file (<code>APDATE</code>) using the calculated due date (<code>DUDT8</code>) to check for holidays or weekends.</li> <li>If a holiday/weekend is found, replaces <code>DUDT</code> with a non-holiday/weekend date (<code>ADNED8</code>).</li> <li>Validate Discount Due Date (MG18):</li> <li>Similarly checks the discount due date (<code>DSD8</code>) against <code>APDATE</code> and updates <code>DSDT</code> if necessary.</li> <li>Handle Vendor Hold Status:</li> <li>Sets the hold description (<code>HLDD</code>) based on the vendor hold status (<code>VNHOLD</code>):<ul> <li><code>'A'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR ACH\".</li> <li><code>'U'</code>: Sets <code>HLDD</code> to \"ON HOLD FOR AUTOPAY\".</li> <li><code>'E'</code>: Sets <code>HLDD</code> to \"EMPLOYEE EXPENSE\" and updates <code>BKGL</code> to the employee expense G/L (<code>ACEEGL</code>).</li> </ul> </li> <li>Write Header Record:</li> <li>Calls the <code>HDRADD</code> subroutine to write a header record to <code>APTRAN</code> using the <code>HEADER</code> exception output.</li> <li>Includes fields like entry number (<code>ACNXTE</code>), vendor number (<code>AUVEND</code>), invoice number (<code>AUINV#</code>), due date (<code>DUDT</code>), and vendor details.</li> <li>Process Detail Record:</li> <li>Populates detail fields (e.g., amount <code>AMT</code>, description <code>DDES</code>, G/L account <code>EXGL</code>, PO number <code>PONO</code>) from the import record.</li> <li>Calculates discount percentage (<code>DSPC</code>) by multiplying <code>AUDSPC</code> by 10 if non-zero.</li> <li>Writes a detail record to <code>APTRAN</code> using the <code>DETAIL</code> exception output.</li> <li>Increments the line number (<code>NXLINE</code>) for the next detail.</li> <li>Save Current Record:</li> <li>Saves the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), batch ID (<code>AUBTCH</code>), and entry number (<code>ENT#</code>) to <code>SVINV#</code>, <code>SVVEND</code>, <code>SVBTCH</code>, and <code>SVENT#</code> for comparison with the next record.</li> <li>Reset Variables:</li> <li>Clears variables (e.g., <code>ENT#</code>, <code>TOTAL</code>, <code>SNGL</code>, <code>HOLD</code>) for the next record.</li> </ul> </li> <li> <p>If the current invoice and vendor match the saved values, writes additional detail lines without creating a new header.</p> </li> <li> <p>End Processing</p> </li> <li>Loops back to process the next import record until the end of the file.</li> <li>Terminates at the <code>END</code> tag, closing files and ending the program.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#business-rules","title":"Business Rules","text":"<ol> <li>Duplicate Invoice Handling (MG19):</li> <li>If the invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), and batch ID (<code>AUBTCH</code>) match the previous record, the program treats it as an additional detail line for the same voucher rather than creating a new voucher.</li> <li> <p>This prevents duplicate vouchers for the same invoice within the same batch.</p> </li> <li> <p>Due Date Calculation:</p> </li> <li>For non-one-time vendors (<code>AUVEND \u2260 0</code>), calculates the due date based on the vendor\u2019s payment terms (<code>VNTERM</code>) from <code>GSTABL</code>:<ul> <li>Uses net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) to determine the due date.</li> <li>Defaults to the invoice date (<code>INDT</code>) or 30 days if no terms are defined.</li> </ul> </li> <li> <p>Adjusts the due date to avoid holidays and weekends using the <code>APDATE</code> table (MG17).</p> </li> <li> <p>Discount Due Date Calculation (MG18):</p> </li> <li>Calculates the discount due date based on discount days (<code>TBDISD</code>) from <code>GSTABL</code> for non-one-time vendors.</li> <li>Sets the discount due date to zero if no discount days are defined.</li> <li> <p>Adjusts for holidays and weekends using <code>APDATE</code>.</p> </li> <li> <p>Vendor Hold Status:</p> </li> <li> <p>Applies hold descriptions based on the vendor\u2019s hold status (<code>VNHOLD</code>):</p> <ul> <li><code>'A'</code>: On hold for ACH payments.</li> <li><code>'U'</code>: On hold for autopay.</li> <li><code>'E'</code>: Employee expense, with the G/L account updated to <code>ACEEGL</code>.</li> </ul> </li> <li> <p>Invoice Date Validation:</p> </li> <li>Ensures the invoice date (<code>AUDATE</code>) is converted to a valid MMDDYY format (<code>INDT</code>).</li> <li> <p>Handles century calculation for Y2K compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</p> </li> <li> <p>PO Number Storage (MG20):</p> </li> <li> <p>Stores the PO number (<code>AUPONM</code>) from the import file in the A/P transaction file (<code>ATPONO</code>) for both header and detail records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Increments the next entry number (<code>ACNXTE</code>) from <code>APCONT</code> for each new voucher.</li> <li> <p>Handles overflow (entry number &gt; 99999) by resetting and updating <code>ACNXTE</code>.</p> </li> <li> <p>Detail Line Description (MG17):</p> </li> <li> <p>Copies the invoice description (<code>AUHDSC</code>) from the header to the detail record (<code>DDES</code>) for new records.</p> </li> <li> <p>Discount Percentage:</p> </li> <li>If a discount percentage (<code>AUDSPC</code>) is provided, multiplies it by 10 to store in <code>DSPC</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APTRAN APTRAN A/P transaction file storing voucher header and detail records. Update (UF) Writing header/detail records, checking entry numbers. APCONT APCONT A/P control file containing G/L accounts and next entry number. Update (UF) Retrieving/updating control data (<code>ACNXTE</code>, <code>ACAPGL</code>, <code>ACCAGL</code>). APVEND APVEND A/P vendor file containing vendor details (e.g., name, address, terms). Input (IF) Retrieving vendor information. GSTABL GSTABL General system table containing payment terms (e.g., net days, discount days). Input (IF) Retrieving terms for due date calculation. APDATE APDATE A/P date file containing non-holiday/weekend dates for due date validation. Input (IF) Adjusting due/discount dates for holidays/weekends. <p>File Details: - APINVUP: Record length 1090 bytes, contains fields like invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), and PO number (<code>AUPONM</code>). - APTRAN: Record length 404 bytes, stores header (e.g., <code>ATVEND</code>, <code>ATDUDT</code>) and detail (e.g., <code>ATAMT</code>, <code>ATPONO</code>) records. - APCONT: Record length 256 bytes, includes next entry number (<code>ACNXTE</code>) and G/L accounts. - APVEND: Record length 579 bytes, includes vendor name, addresses, and terms. - GSTABL: Record length 256 bytes, includes terms data like net days (<code>TBNETD</code>) and discount days (<code>TBDISD</code>). - APDATE: Record length 19 bytes, maps calculated due dates to non-holiday/weekend dates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called via <code>CALL</code> operations in this RPG program. However, the program relies on subroutines defined within itself for specific tasks:</p> <ol> <li>CLCDUE: Calculates the due date based on vendor terms (<code>VNTERM</code>), using net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>).</li> <li>CLCDSC: Calculates the discount due date based on discount days (<code>TBDISD</code>).</li> <li>HDRADD: Writes the header record to <code>APTRAN</code>.</li> <li>TMDATN: Adds net days to the invoice date to calculate the due date.</li> <li>TMDATS: Adds discount days to the invoice date to calculate the discount due date.</li> <li>TMDATP: Calculates the due date for prox terms (e.g., next month\u2019s specific day).</li> <li>@DTE1: Converts a Gregorian date (MMDDYY) to Julian format for date calculations.</li> <li>@DTE2: Converts a Julian date back to Gregorian format.</li> </ol> <p>These subroutines handle date calculations, record writing, and terms processing internally.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#additional-notes","title":"Additional Notes","text":"<ul> <li>Modifications:</li> <li>MG17 (04/19/22): Added holiday/weekend due date adjustment and invoice description copying.</li> <li>MG18 (06/05/22): Added discount due date calculation and validation.</li> <li>MG19 (08/17/22): Added batch ID comparison for duplicate invoice handling.</li> <li>MG20 (11/05/23): Added PO number storage in <code>APTRAN</code>.</li> <li>Y2K Compliance: The program handles century calculations for dates using <code>Y2KCEN</code> (e.g., 19 for 1900s, 20 for 2000s) and <code>Y2KCMP</code> (e.g., 80 to determine century).</li> <li>Indicators: Uses indicators (e.g., <code>50</code>, <code>51</code>, <code>60</code>, <code>61</code>, <code>79</code>, <code>92</code>, <code>99</code>) to control file access, error handling, and record processing.</li> <li>File Access: Uses <code>CHAIN</code> for keyed access to <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, <code>APDATE</code>, and <code>APTRAN</code>, ensuring efficient retrieval and updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP106/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initializes variables, checks the import file, retrieves control data, processes each import record (validating dates, vendors, and terms), writes header and detail records to <code>APTRAN</code>, and updates <code>APCONT</code>.</li> <li>Business Rules: Handles duplicate invoices, calculates/adjusts due and discount dates, applies vendor hold statuses, stores PO numbers, and ensures Y2K-compliant date processing.</li> <li>Files Used: <code>APINVUP</code> (input), <code>APTRAN</code> (transactions), <code>APCONT</code> (control), <code>APVEND</code> (vendors), <code>GSTABL</code> (terms), <code>APDATE</code> (dates).</li> <li>External Programs: None called explicitly; relies on internal subroutines (<code>CLCDUE</code>, <code>CLCDSC</code>, etc.).</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/","title":"AP107","text":"<p>The provided RPG program (<code>AP107.rpg36.txt</code>) is executed as part of the Accounts Payable (A/P) voucher entry upload process for FlexiCapture imports on the IBM i (AS/400) system, as referenced in the OCL file (<code>AP106.ocl36.txt</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called in this RPG program.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#overview","title":"Overview","text":"<p>The <code>AP107</code> RPG program is a simple utility that reads records from the FlexiCapture import file (<code>APINVUP</code>) and writes them to the FlexiCapture history table (<code>APFLEXH</code>) for record-keeping. It captures metadata such as the date, time, user, and workstation, ensuring an audit trail of uploaded data. This program is called before <code>AP106</code> to archive the import data prior to further processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization</li> <li>Upon reading each record from the input file (<code>APINVUP</code>) (indicated by <code>01</code>), the program retrieves the current system date and time using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits, HHMMSSYYYYMMDD format).</li> <li>Extracts the time (<code>SYTIME</code>, HHMMSS) and date (<code>SYDATE</code>, MMDDYY) from <code>TIMDAT</code>.</li> <li>Converts the date to YYMMDD format (<code>SYDYMD</code>) by multiplying <code>SYDATE</code> by 10000.01.</li> <li>Extracts the month (<code>MONTH</code>) from <code>SYDATE</code>.</li> <li>Formats the date as an 8-digit field (<code>DATE8</code>, YYYYMMDD) by combining a century prefix (<code>20</code>) with <code>SYDYMD</code>.</li> <li>Stores the time in a 6-digit field (<code>TIME6</code>, HHMMSS).</li> <li> <p>Retrieves the user ID (<code>USER</code>) and workstation ID (<code>WRKSTN</code>) from the User Data Structure (UDS, fields at positions 400\u2013409 and 410\u2013414).</p> </li> <li> <p>Write to History Table</p> </li> <li>For each record read from <code>APINVUP</code>, the program writes a record to the FlexiCapture history table (<code>APFLEXH</code>) using the <code>DADD</code> exception output (indicated by <code>01</code>).</li> <li> <p>The output record includes:</p> <ul> <li>The entire input record split into six segments (<code>REC1</code>\u2013<code>REC6</code>, covering positions 1\u20131090 of <code>APINVUP</code>).</li> <li>The formatted date (<code>DATE8</code>, positions 1091\u20131098).</li> <li>The formatted time (<code>TIME6</code>, positions 1099\u20131104).</li> <li>The user ID (<code>USER</code>, positions 1105\u20131114).</li> <li>The workstation ID (<code>WRKSTN</code>, positions 1115\u20131129).</li> </ul> </li> <li> <p>Loop and Termination</p> </li> <li>The program continues reading and processing <code>APINVUP</code> records until the end of the file.</li> <li>No explicit termination logic is shown, but the program ends naturally when all input records are processed, closing files automatically.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#business-rules","title":"Business Rules","text":"<ol> <li>Audit Trail Creation:</li> <li>Every record from the FlexiCapture import file (<code>APINVUP</code>) is archived in the history table (<code>APFLEXH</code>) without modification.</li> <li> <p>Metadata (date, time, user, workstation) is appended to each record to track when and by whom the data was uploaded.</p> </li> <li> <p>Data Preservation:</p> </li> <li>The program does not validate or modify the input data; it copies all fields (<code>REC1</code>\u2013<code>REC6</code>) directly to the output file.</li> <li> <p>This ensures a complete and unaltered record of the import data for auditing or recovery purposes.</p> </li> <li> <p>System Metadata:</p> </li> <li>The program uses system-provided date/time (<code>TIMDAT</code>) and user/workstation information from the UDS to populate audit fields.</li> <li>The date is formatted as YYYYMMDD (<code>DATE8</code>) with a hardcoded century prefix (<code>20</code>), assuming all dates are in the 2000s.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following database files, identified by their file names, labels, and purposes:</p> File Name Label Purpose Access Type Used For APINVUP APINVUP Input file containing FlexiCapture import data (e.g., invoice, vendor, amount). Input (IP) Reading import records. APFLEXH APFLEXH FlexiCapture history table storing archived import records with audit metadata. Output (O) Writing history records. <p>File Details: - APINVUP:   - Record length: 1090 bytes.   - Fields include invoice number (<code>AUINV#</code>), vendor number (<code>AUVEND</code>), total amount (<code>AUTOTL</code>), PO number (<code>AUPONM</code>), and others.   - Also mapped to six segments (<code>REC1</code>\u2013<code>REC6</code>) for direct copying (positions 1\u2013256, 257\u2013512, 513\u2013750, 751\u2013810, 811\u20131000, 1001\u20131090). - APFLEXH:   - Record length: 1129 bytes.   - Includes the 1090 bytes from <code>APINVUP</code> (<code>REC1</code>\u2013<code>REC6</code>) plus additional fields:     - <code>DATE8</code> (8 bytes, YYYYMMDD, positions 1091\u20131098).     - <code>TIME6</code> (6 bytes, HHMMSS, positions 1099\u20131104).     - <code>USER</code> (10 bytes, user ID, positions 1105\u20131114).     - <code>WRKSTN</code> (15 bytes, workstation ID, positions 1115\u20131129).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP107</code> program does not explicitly call any external programs or subroutines via <code>CALL</code> operations.</li> <li>All processing is self-contained, relying on basic RPG operations (<code>TIME</code>, <code>MOVEL</code>, <code>MOVE</code>, <code>MULT</code>) and file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#additional-notes","title":"Additional Notes","text":"<ul> <li>Simplicity: The program is straightforward, designed solely to archive <code>APINVUP</code> records in <code>APFLEXH</code> with audit metadata. It lacks complex logic or validation, deferring such tasks to other programs (e.g., <code>AP106</code>).</li> <li>Y2K Assumption: The program assumes all dates are in the 21st century by prefixing <code>20</code> to the year in <code>DATE8</code>. This may cause issues for dates before 2000 or after 2099, though unlikely given the context.</li> <li>UDS Usage: The User Data Structure (UDS) provides user and workstation information, which is standard in IBM i RPG programs for audit purposes.</li> <li>File Access:</li> <li><code>APINVUP</code> is read sequentially as a primary file (<code>IP</code>).</li> <li><code>APFLEXH</code> is an output file (<code>O</code>) with records added (<code>A</code>) via exception output (<code>DADD</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP106%20Flexi%20Capture/AP107/#summary","title":"Summary","text":"<ul> <li>Process Steps: Reads each record from <code>APINVUP</code>, captures system date/time and user/workstation metadata, and writes the record plus metadata to <code>APFLEXH</code>.</li> <li>Business Rules: Archives all import records without modification, appending audit metadata (date, time, user, workstation) for tracking.</li> <li>Files Used: <code>APINVUP</code> (input, import data), <code>APFLEXH</code> (output, history with audit metadata).</li> <li>External Programs: None; all logic is internal.</li> </ul> <p>Let me know if you need further clarification or additional details about specific sections or logic!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/","title":"AP1012 RPG","text":"<p>The <code>AP1012.rpg</code> program is an RPG III program running on an IBM AS/400 (iSeries) system, designed to create detail lines for accounts payable (A/P) voucher entries in the <code>APTRAN</code> file by prorating freight charges based on sales detail or miscellaneous records. It is called from the <code>AP125.rpg</code> program (which is invoked by the <code>AP125.ocl36.txt</code> OCL script) and processes data from sales files (<code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>) to allocate freight amounts. Below, I detail the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#process-steps-of-the-ap1012-program","title":"Process Steps of the AP1012 Program","text":"<p>The program calculates freight amounts for A/P voucher detail lines by prorating the total freight amount (<code>FRTTOT</code>) across sales detail or miscellaneous records, based on gallons or miscellaneous amounts. It handles both detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) and miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records, with adjustments for invoice dates and product codes.</p> <ol> <li>Initialization:</li> <li>Parameters: Receives a <code>SALES</code> data structure with:<ul> <li><code>SACO</code>: Company number (2 digits).</li> <li><code>SAORD</code>: Order number (6 digits).</li> <li><code>SASRN#</code>: Shipping reference number (3 digits).</li> <li><code>SASEQ</code>: Sequence number (3 digits).</li> <li><code>FRTTOT</code>: Total freight to allocate (7.2 digits).</li> <li><code>VEND</code>: Vendor number (5 digits).</li> <li><code>ENTNUM</code>: A/P entry number (5 digits).</li> <li><code>EXGL</code>: Expense G/L (8 digits).</li> <li><code>DSPC</code>: Discount percentage (4.3 digits, per <code>MG03</code>).</li> <li><code>CMPDT8</code>: Comparison date (invoice date minus one year, per <code>JB06</code>).</li> <li><code>S@FIMO</code>: File indicator (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>, per <code>JB06</code>).</li> <li><code>S@DM</code>: Detail/misc indicator (<code>D</code> for detail, <code>M</code> for misc, per <code>JB06</code>).</li> </ul> </li> <li>Initializes fields (<code>ZERO6</code>, <code>ZERO7</code>, <code>ZERO9</code>, <code>ZERO11</code>) to zero.</li> <li> <p>If <code>S@FIMO</code> is blank, calls <code>GETS@</code> to determine the appropriate file (<code>SA5FI</code> or <code>SA5MO</code>) and record type (<code>D</code> or <code>M</code>).</p> </li> <li> <p>Subroutine GETS@ (Determine File and Record Type):</p> </li> <li>If <code>SAORD</code> and <code>SASRN#</code> are non-zero, constructs a key (<code>SAIUKY</code>) using <code>SACO</code>, <code>SAORD</code>, and <code>SASRN#</code>.</li> <li>Checks files in order:<ul> <li><code>SA5FIUD</code>: If a valid record is found with <code>S5SHD8 &gt;= CMPDT8</code>, sets <code>S@FIMO = 'F'</code>, <code>S@DM = 'D'</code>.</li> <li><code>SA5MOUD</code>: If found, sets <code>S@FIMO = 'M'</code>, <code>S@DM = 'D'</code>.</li> <li><code>SA5FIUM</code>: If found, sets <code>S@FIMO = 'F'</code>, <code>S@DM = 'M'</code>.</li> <li><code>SA5MOUM</code>: If found, sets <code>S@FIMO = 'M'</code>, <code>S@DM = 'M'</code>.</li> </ul> </li> <li> <p>Stops when a valid record is found (<code>SA5FND</code>).</p> </li> <li> <p>Calculate Total Gallons (Detail Records):</p> </li> <li>Constructs a key (<code>SAKEY</code>) using <code>SACO</code>, <code>SAORD</code>, and <code>SASRN#</code>.</li> <li>Sets the lower limit for <code>SA5FIUD</code> or <code>SA5MOUD</code> based on <code>S@FIMO</code>.</li> <li>Reads through <code>SA5FIUD</code> (if <code>S@FIMO \u2260 'M'</code>) or <code>SA5MOUD</code> (if <code>S@FIMO = 'M'</code>).</li> <li>For matching records (<code>S5CO# = SACO</code>, <code>S5ORD# = SAORD</code>, <code>S5SRN# = SASRN#</code>, <code>S5SHD8 &gt;= CMPDT8</code>):<ul> <li>Adds <code>S5NGAL</code> (net gallons) to <code>TTLQTY</code>.</li> <li>Increments <code>COUNT1</code> (number of detail lines).</li> </ul> </li> <li> <p>If <code>TTLQTY</code> and <code>COUNT1</code> are zero, skips to miscellaneous record processing (<code>SKIP3</code>).</p> </li> <li> <p>Prorate Freight for Detail Records:</p> </li> <li>Resets <code>SAKEY</code> to \"000\" and re-reads <code>SA5FIUD</code> or <code>SA5MOUD</code>.</li> <li>For each matching record:<ul> <li>Calculates the percentage (<code>PCTHLD = S5NGAL / TTLQTY</code>) if <code>TTLQTY</code> is non-zero.</li> <li>Computes freight amount (<code>AMT,Y = PCTHLD * FRTTOT</code>).</li> <li>Stores in <code>AMTITM</code> and <code>LINAMT</code>.</li> <li>Increments <code>COUNT2</code> (line counter) and array index <code>Y</code>.</li> </ul> </li> <li>For the last record (<code>COUNT2 = COUNT1</code>):<ul> <li>Calculates total computed amount (<code>CLCAMT</code> = sum of <code>AMT</code>).</li> <li>Adjusts <code>AMTITM</code> and <code>LINAMT</code>:</li> <li>If <code>FRTTOT = CLCAMT</code>, no adjustment.</li> <li>If <code>FRTTOT &gt; CLCAMT</code>, adds difference (<code>DIFF1</code>) to <code>AMTITM</code>.</li> <li>If <code>FRTTOT &lt; CLCAMT</code>, subtracts difference (<code>DIFF2</code>) from <code>AMTITM</code>.</li> </ul> </li> <li> <p>Calls <code>GOOD</code> to write the detail line to <code>APTRAN</code>.</p> </li> <li> <p>Subroutine MFRTO (Miscellaneous Freight Total):</p> </li> <li> <p>For invoices with only miscellaneous records (no detail lines, per <code>JB08</code>):</p> <ul> <li>Reads <code>SA5FIUM</code> or <code>SA5MOUM</code> based on <code>S@FIMO</code>.</li> <li>For matching records (<code>SMCO# = SACO</code>, <code>SMORD# = SAORD</code>, <code>SMSRN# = SASRN#</code>, <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, <code>SMSHD8 &gt;= CMPDT8</code>):</li> <li>Adds <code>SMMAMT</code> to <code>TTLMFT</code> (total miscellaneous freight).</li> <li>Increments <code>COUNTM</code> (miscellaneous line count).</li> </ul> </li> <li> <p>Prorate Freight for Miscellaneous Records:</p> </li> <li> <p>If no detail records were found (<code>TTLQTY = 0</code>, <code>COUNT1 = 0</code>):</p> <ul> <li>Reads <code>SA5FIUM</code> or <code>SA5MOUM</code> based on <code>S@FIMO</code>.</li> <li>For matching records (<code>SMCO# = SACO</code>, <code>SMORD# = SAORD</code>, <code>SMSRN# = SASRN#</code>, <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, <code>SMSHD8 &gt;= CMPDT8</code>):</li> <li>Calculates miscellaneous amount (<code>CLCAMT = SMMAMT * SMMQTY</code>).</li> <li>For non-last records (<code>COUNT3 &lt; COUNTM</code>):<ul> <li>Computes percentage (<code>PCTHLD = CLCAMT / TTLMFT</code>).</li> <li>Calculates freight amount (<code>FRTAMT = FRTTOT * PCTHLD</code>).</li> <li>Adds <code>FRTAMT</code> to <code>CLCTOT</code> (running total).</li> </ul> </li> <li>For the last record:<ul> <li>Sets <code>FRTAMT = FRTTOT - CLCTOT</code> to ensure total matches <code>FRTTOT</code>.</li> </ul> </li> <li>Calls <code>GETFRT</code> to write the miscellaneous detail line to <code>APTRAN</code>.</li> </ul> </li> <li> <p>Subroutine GOOD (Write Detail Line for Detail Records):</p> </li> <li>Retrieves freight G/L (<code>FEGL</code>):<ul> <li>If product code (<code>S5PROD</code>) contains an alpha character (per <code>JB02</code>), chains to <code>GSCTUM</code> using <code>S5CO#</code>, <code>S5PROD</code>, <code>S5CNTR</code>, and <code>S5UM</code> to get <code>CUFEGL</code>.</li> <li>Otherwise, chains to <code>GSTABL</code> (table <code>CNTRPF</code>) using <code>S5TANK</code> to get <code>TBFEG4</code>, appending <code>S5PROD</code>.</li> <li>If still zero, chains to <code>BICONT</code> to get default <code>BCFRGL</code>.</li> </ul> </li> <li>Constructs <code>APKEY</code> using <code>S5CO#</code> and <code>COUNT2</code>.</li> <li>Chains to <code>APTRAN</code> to check for an existing record.</li> <li>Sets description (<code>DDES = 'XXXXXXXXX XXXX XXX FRTCHG'</code>).</li> <li> <p>Writes (<code>ADDT</code>) or updates (<code>UPDT</code>) the detail line with <code>LINAMT</code>, <code>FEGL</code>, <code>DSPC</code>, etc.</p> </li> <li> <p>Subroutine GETFRT (Write Detail Line for Miscellaneous Records):</p> </li> <li>Sets freight G/L (<code>FEGL = SMGLNO</code>).</li> <li>Constructs <code>APKEY</code> using <code>SMCO#</code> and <code>COUNT3</code>.</li> <li>Chains to <code>APTRAN</code> to check for an existing record.</li> <li>Sets description (<code>DDES = 'MISC CHARGE'</code>).</li> <li> <p>Writes (<code>ADDTM</code>) or updates (<code>UPDTM</code>) the detail line with <code>FRTAMT</code>, <code>FEGL</code>, <code>DSPC</code>, etc.</p> </li> <li> <p>Program Termination:</p> </li> <li>Sets <code>*INLR = *ON</code> to end the program.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Freight Proration:</li> <li>For detail records (<code>SA5FIUD</code> or <code>SA5MOUD</code>), prorates freight (<code>FRTTOT</code>) based on net gallons (<code>S5NGAL / TTLQTY</code>).</li> <li>For miscellaneous records (<code>SA5FIUM</code> or <code>SA5MOUM</code>), prorates freight based on miscellaneous amount (<code>SMMAMT * SMMQTY / TTLMFT</code>, per <code>JB08</code>).</li> <li> <p>Ensures the sum of prorated amounts equals <code>FRTTOT</code> by adjusting the last record.</p> </li> <li> <p>File Selection:</p> </li> <li>Uses <code>S@FIMO</code> (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>) and <code>S@DM</code> (<code>D</code> for detail, <code>M</code> for misc) to determine the correct file (<code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, <code>SA5MOUM</code>).</li> <li> <p>If <code>S@FIMO</code> is blank, <code>GETS@</code> determines the file by checking for valid records (per <code>JB07</code>).</p> </li> <li> <p>Date Restriction:</p> </li> <li> <p>Only processes records with a ship date (<code>S5SHD8</code> or <code>SMSHD8</code>) within one year of the invoice date (<code>CMPDT8</code>, per <code>JB06</code>).</p> </li> <li> <p>G/L Account Determination:</p> </li> <li>For detail records with alpha product codes, retrieves freight G/L (<code>CUFEGL</code>) from <code>GSCTUM</code> (per <code>JB02</code>).</li> <li>For numeric product codes, uses <code>TBFEG4</code> from <code>GSTABL</code> (table <code>CNTRPF</code>) with <code>S5PROD</code> appended.</li> <li> <p>Defaults to <code>BCFRGL</code> from <code>BICONT</code> if no G/L is found.</p> </li> <li> <p>Miscellaneous Records:</p> </li> <li>Only processes miscellaneous records with <code>SMMSTY = 'F'</code> (freight) and non-zero <code>SMGLNO</code> (per <code>MG05</code>, <code>JB08</code>).</li> <li> <p>Handles invoices with only miscellaneous lines (no detail records, per <code>JB08</code>).</p> </li> <li> <p>Discount Application:</p> </li> <li> <p>Applies discount percentage (<code>DSPC</code>) from the <code>SALES</code> data structure to detail lines (per <code>MG03</code>).</p> </li> <li> <p>Detail Line Creation:</p> </li> <li>Creates <code>APTRAN</code> detail lines with fields like <code>FEGL</code>, <code>LINAMT</code> (or <code>FRTAMT</code>), <code>DSPC</code>, and default values (e.g., <code>CLCD = 'C'</code>, <code>POSQ = '000'</code>).</li> <li>Uses fixed descriptions: <code>XXXXXXXXX XXXX XXX FRTCHG</code> for detail records, <code>MISC CHARGE</code> for miscellaneous records.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Update Files:</li> <li> <p><code>APTRAN</code>: Accounts Payable transaction file (404 bytes, keyed by company and entry number).</p> </li> <li> <p>Input Files:</p> </li> <li><code>SA5FIUD</code>: Sales detail file (1024 bytes, keyed by company, customer, order, ship to, SRN).</li> <li><code>SA5FIUM</code>: Sales miscellaneous file (1024 bytes, keyed by company, customer, order, SRN).</li> <li><code>SA5MOUD</code>: Move detail file (1024 bytes, keyed by company, customer, order, ship to, SRN, per <code>JB06</code>).</li> <li><code>SA5MOUM</code>: Move miscellaneous file (1024 bytes, keyed by company, customer, order, SRN, per <code>JB06</code>).</li> <li><code>GSTABL</code>: General table file (256 bytes, keyed by table type <code>CNTRPF</code> for freight G/L).</li> <li><code>BICONT</code>: Billing control file (256 bytes, keyed by company for default freight G/L).</li> <li><code>GSCTUM</code>: Customer table file (64 bytes, keyed by company, product code, container code, unit of measure, per <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None. The program does not call any external programs.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP1012%20RPG/#summary","title":"Summary","text":"<p>The <code>AP1012.rpg</code> program creates A/P voucher detail lines in <code>APTRAN</code> by prorating freight charges (<code>FRTTOT</code>) across sales detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) or miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records. It calculates freight amounts based on gallons for detail records or miscellaneous amounts for misc records, ensuring the total matches <code>FRTTOT</code>. It retrieves freight G/L accounts from <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code>, applies discounts, and restricts records to within one year of the invoice date. The program handles invoices with only miscellaneous lines and writes detail lines with appropriate descriptions.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/","title":"AP125 OCL","text":"<p>The provided OCL (Operation Control Language) script, <code>AP125.ocl36.txt</code>, is part of an IBM AS/400 (iSeries) system and appears to be related to Accounts Payable (A/P) voucher transaction processing. It is called from another OCL script that sets up voucher entry tables. Below, I will explain the process steps of this OCL program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script performs a series of steps to prepare and process Accounts Payable voucher transactions. Here's a breakdown of the steps based on the script:</p> <ol> <li>Invoice Type Selection:</li> <li> <p>The script starts with a comment indicating <code>AP ARGLMS OR PAPER</code> and a parameter <code>?8?</code> for selecting the invoice type (<code>N</code> or <code>P</code>). This suggests the script supports different processing modes for invoices <code>P</code> = PAPER FREIGHT manual entry, <code>N</code> = ARGLMS invoices coming from a different legacy application.</p> </li> <li> <p>File Creation/Verification:</p> </li> <li>The script checks for the existence of specific files using <code>IFF</code> (If) conditions:<ul> <li><code>DATAF1-?9??20?</code>: Verifies if the file <code>?9??20?</code> exists. If it does, it builds a file (<code>BLDFILE</code>) with specific attributes (500 records, 404 bytes per record, etc.).</li> <li><code>DATAF1-?9?APTX?WS?</code>: If this file exists, it builds an index (<code>BLDINDEX</code>) for it with specific key fields and attributes.</li> <li><code>DATAF1-?9?LMS?WS?</code>: If this file exists, it builds another file with similar attributes.</li> </ul> </li> <li> <p>These steps ensure that necessary temporary or work files (<code>?9??20?</code>, <code>?9?APTX?WS?</code>, <code>?9?LMS?WS?</code>) are created or validated before proceeding.</p> </li> <li> <p>Override Database Files (OVRDBF):</p> </li> <li>The script uses multiple <code>OVRDBF</code> commands to override the default file definitions, specifying the library (<code>*LIBL/?9?</code>) and member (<code>*FIRST</code>) for various files. This ensures the program uses the correct files from the specified library. The files overridden include:<ul> <li><code>APCONT</code>, <code>GSTABL</code>, <code>FRCINH</code>, <code>FRCFBH</code>, <code>FRCINH4</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APVENY</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>GSCTUM</code>, <code>APDATE</code>, <code>BICONT</code>, <code>APTRAN</code>.</li> </ul> </li> <li> <p>These overrides are critical to ensure the correct data files are accessed during processing.</p> </li> <li> <p>Call External Program (AP125P):</p> </li> <li>The script calls an external program named <code>AP125P</code> with parameters:<ul> <li><code>'10'</code>: Likely a mode or control parameter.</li> <li><code>'?8?'</code>: The invoice type (<code>N</code> or <code>P</code>).</li> <li><code>'MNT'</code>: Indicates maintenance mode (possibly for voucher entry or editing).</li> <li><code>'?9?'</code>: A library or file prefix (dynamic substitution variable).</li> </ul> </li> <li> <p>This program (<code>AP125P</code>) likely performs the core logic for voucher transaction processing, such as editing or validating transactions.</p> </li> <li> <p>Conditional File Deletion and Creation:</p> </li> <li>The commented-out <code>GSDELETE APCT?WS?</code> suggests a potential step to delete an existing work file (not executed in this script).</li> <li>A commented-out <code>BLDFILE ?9?APCT?WS?</code> indicates a step to create a temporary file with 500 records and 80 bytes per record (not executed).</li> <li> <p>A <code>LOCAL OFFSET-221,DATA-'?9??20?'</code> command suggests setting a local variable or data area with the file name <code>?9??20?</code>.</p> </li> <li> <p>Conditional Exit:</p> </li> <li> <p>The <code>IFF DATAF1-?9??20? GOTO END</code> checks if the file <code>?9??20?</code> exists. If it does not, the script jumps to the <code>END</code> tag, bypassing the subsequent steps.</p> </li> <li> <p>Voucher Transaction Edit (AP110):</p> </li> <li>If the file <code>?9??20?</code> exists, the script proceeds to the <code>LOAD AP110</code> section, which is responsible for A/P voucher transaction editing.</li> <li>File Definitions:<ul> <li>The script defines multiple files with their labels and attributes (e.g., <code>DISP-SHR</code> for shared access, <code>EXTEND-100</code> for extending file size). The files include:</li> <li><code>APTRAN</code> (labeled <code>?9??20?</code>): Likely the main transaction file.</li> <li><code>APCONT</code>, <code>APCHKR</code>, <code>APCHKT</code> (labeled <code>?9?APCT?WS?</code>), <code>APTRNX</code> (labeled <code>?9?APTX?WS?</code>), <code>GLMAST</code>, <code>APOPNHC</code>, <code>APINVH</code>, <code>GSTABL</code>, <code>APSTAT</code>, <code>APVEND</code>, <code>INFIL1</code>, <code>INTZH1</code>.</li> </ul> </li> <li>Printer Overrides:<ul> <li>If the condition <code>?9?/G</code> is true, the script overrides the printer file <code>APLIST</code> to output to <code>QUSRSYS/APEDIT</code>.</li> <li>If <code>?9?/G</code> is false, it overrides <code>APLIST</code> to output to <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Execution:</p> <ul> <li>The <code>RUN</code> command executes the <code>AP110</code> program, which performs the voucher transaction edit, likely validating or processing transactions and generating a report.</li> </ul> </li> <li> <p>End of Script:</p> </li> <li>The <code>TAG END</code> marks the end of the script, where processing terminates if the earlier <code>GOTO END</code> condition is met.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external programs: 1. AP125P:    - Called with parameters: <code>'10'</code>, <code>'?8?'</code>, <code>'MNT'</code>, <code>'?9?'</code>.    - Likely responsible for the main processing of voucher transactions (e.g., data entry, validation, or updates). 2. AP110:    - Loaded in the voucher transaction edit section.    - Handles the editing or validation of A/P voucher transactions and possibly generates a report.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script references the following files (tables) for processing:</p> <ol> <li>From OVRDBF Commands:</li> <li><code>APCONT</code>: Accounts Payable control file.</li> <li><code>GSTABL</code>: General system table.</li> <li><code>FRCINH</code>, <code>FRCFBH</code>, <code>FRCINH4</code>: Likely related to financial or reconciliation data.</li> <li><code>GLMAST</code>: General Ledger master file.</li> <li><code>APVEND</code>: Vendor master file.</li> <li><code>APVENY</code>: Additional vendor file (possibly for secondary vendor data).</li> <li><code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>: Likely related to specific application modules (e.g., financial or manufacturing).</li> <li><code>GSCTUM</code>: General system customer or control file.</li> <li><code>APDATE</code>: Accounts Payable date file.</li> <li><code>BICONT</code>: Possibly a billing or contract control file.</li> <li> <p><code>APTRAN</code>: Accounts Payable transaction file (labeled <code>?9??20?</code>).</p> </li> <li> <p>From AP110 Section:</p> </li> <li><code>APTRAN</code> (labeled <code>?9??20?</code>): Main transaction file.</li> <li><code>APCONT</code> ( labeled <code>?9?APCONT</code>): Control file.</li> <li><code>APCHKR</code>: Check register file.</li> <li><code>APCHKT</code> (labeled <code>?9?APCT?WS?</code>): Temporary check file.</li> <li><code>APTRNX</code> (labeled <code>?9?APTX?WS?</code>): Transaction index file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>): General Ledger master.</li> <li><code>APOPNHC</code>: Open invoice header file.</li> <li><code>APINVH</code>: Invoice header file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>): General system table.</li> <li><code>APSTAT</code>: Accounts Payable status file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>): Vendor master.</li> <li><code>INFIL1</code>, <code>INTZH1</code>: Additional files, possibly for interface or temporary data.</li> <li> <p><code>APLIST</code>: Printer file for output (report).</p> </li> <li> <p>Temporary/Work Files:</p> </li> <li><code>?9??20?</code>: Main transaction work file.</li> <li><code>?9?APTX?WS?</code>: Transaction index work file.</li> <li><code>?9?LMS?WS?</code>: Additional work file.</li> <li><code>?9?APCT?WS?</code>: Temporary check file.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20OCL/#summary","title":"Summary","text":"<p>The <code>AP125.ocl36.txt</code> OCL script is designed to set up and process Accounts Payable voucher transactions. It performs the following high-level steps: 1. Validates or creates necessary work files. 2. Overrides database files to ensure correct file access. 3. Calls the <code>AP125P</code> program for core voucher processing. 4. If the main transaction file exists, it loads the <code>AP110</code> program to edit or validate transactions and generate reports. 5. Uses printer overrides to direct output to specific queues.</p> <p>External Programs: - <code>AP125P</code> - <code>AP110</code></p> <p>Tables/Files: - Core files: <code>APCONT</code>, <code>GSTABL</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APVENY</code>, <code>APDATE</code>, <code>APTRAN</code>, etc. - Temporary/work files: <code>?9??20?</code>, <code>?9?APTX?WS?</code>, <code>?9?LMS?WS?</code>, <code>?9?APCT?WS?</code>. - Printer file: <code>APLIST</code>.</p> <p>This script is tightly integrated with the AS/400 environment, relying on dynamic file naming (via <code>?9?</code> and <code>?8?</code>) and external RPG programs to handle the business logic. If you need further clarification or details about specific files or programs, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/","title":"AP125 RPGLE","text":"<p>The <code>AP125.rpg</code> program is an RPG III program running on an IBM AS/400 (iSeries) system, designed to create voucher transactions from freight invoice data, likely called from the <code>AP125.ocl36.txt</code> OCL script after the <code>AP125P</code> program has selected invoices for batch processing. It processes freight invoice headers (<code>FRCINH</code> or <code>FRCFBH</code>) to generate accounts payable transactions in the <code>APTRAN</code> file, including header and detail records. Below, I will detail the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#process-steps-of-the-ap125-program","title":"Process Steps of the AP125 Program","text":"<p>The program is structured to process freight invoices, validate data, calculate due dates, and create or update accounts payable transactions. The main process steps are:</p> <ol> <li>Initialization:</li> <li>Parameters: Receives input parameters:<ul> <li><code>CO</code>: Company code (2 digits).</li> <li><code>CAID</code>: Carrier ID (6 characters).</li> <li><code>CAIN</code>: Invoice number (25 characters).</li> <li><code>RCD</code>: Record type (<code>FRCFBHP4</code> for freight billed balance header, otherwise <code>FRCINHP4</code>, per revision <code>JB06</code>).</li> <li><code>RDNO</code>: Reference number (numeric, defined like <code>FRRDNO</code>).</li> </ul> </li> <li>Initializes fields and indicators, setting indicators 81-83, 50-53, 60-69, and 51-62 to off.</li> <li> <p>Sets up key fields for file access (e.g., <code>TERMKY</code> for <code>APTERM</code>, <code>BBCAKY</code> for <code>BBCAID</code>).</p> </li> <li> <p>Subroutine S1 (Main Processing):</p> </li> <li>Validate Company: Chains to <code>APCONT</code> using <code>CO</code> to retrieve company details (e.g., <code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACRTGL</code>, <code>ACNXTE</code>). If not found, sets indicator 50.</li> <li>Retrieve Invoice Data:<ul> <li>Constructs a key (<code>FRCKEY</code> or <code>FRCK39</code>) using <code>CO</code>, <code>CAID</code>, <code>CAIN</code>, and <code>RDNO</code> (for <code>FRCFBH</code>).</li> <li>Chains to <code>FRCINH</code> (if <code>RCD \u2260 'FRCFBHP4'</code>) or <code>FRCFBH</code> (if <code>RCD = 'FRCFBHP4'</code>, per <code>JB06</code>) to retrieve invoice details.</li> <li>If found, populates transaction fields:</li> <li><code>ATINV#</code>: Invoice number (<code>FRCAIN</code>).</li> <li><code>INTY</code>: Invoice type (<code>FRINTY</code>).</li> <li><code>ATINDT</code>/<code>INDT</code>: Invoice date (<code>FRIYMD</code> converted to MMDDYY).</li> <li><code>ATIAMT</code>/<code>IAMT</code>/<code>ATFRTL</code>/<code>FRTL</code>: Invoice amount (<code>FRINAM - FRFBOA</code>, per <code>JB06</code>).</li> <li><code>ATSORN</code>/<code>SORN</code>: Sales order number (<code>FRRDNO</code>).</li> <li><code>ATSSRN</code>/<code>SSRN</code>: Sales sequence number (<code>FRSRN</code>).</li> <li>Sets indicators 51 (<code>INTY = 'P'</code>) or 52 (<code>INTY = 'O'</code>) for invoice description.</li> </ul> </li> <li>Generate Entry Number:<ul> <li>If <code>ENT#</code> is zero, sets <code>RECSTS = 'ADDNEW'</code>, retrieves the next entry number (<code>ACNXTE</code>) from <code>APCONT</code>, increments it, and updates <code>APCONT</code>.</li> <li>Ensures <code>ENT#</code> does not exceed 99999, adjusting <code>ACNXTE</code> accordingly.</li> </ul> </li> <li>Retrieve Vendor Information:<ul> <li>Chains to <code>APVENY</code> using <code>CO</code> and <code>CAID</code> to get the vendor number (<code>VYVEND</code>).</li> <li>Chains to <code>APVEND</code> using <code>CO</code> and <code>VEND</code> to retrieve vendor details (<code>VNVNAM</code>, <code>VNAD1</code>, <code>VNAD2</code>, <code>VNAD3</code>, <code>VNAD4</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNTERM</code>, <code>VNEXGL</code>).</li> <li>Sets hold description (<code>HLDD</code>) based on <code>VNHOLD</code> (per <code>JB02</code> and <code>MG18</code>):</li> <li><code>H</code>: \"VENDOR ON HOLD\" (COM,01).</li> <li><code>A</code>: \"ON HOLD FOR ACH\" (COM,02).</li> <li><code>W</code>: \"ON HOLD FOR WIRE TRANSFER\" (COM,03).</li> <li><code>U</code>: \"ON HOLD FOR UTILITY AUTO-PAYMENT\" (COM,04).</li> </ul> </li> <li> <p>Output: Writes or updates the transaction header in <code>APTRAN</code> via the <code>EXCPT</code> operation.</p> </li> <li> <p>Subroutine S2 (Header Processing and Detail Setup):</p> </li> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (constructed from <code>COENT</code> and \"000\") to check for an existing header.</li> <li>If not found, populates header fields from <code>APCONT</code> (<code>APGL</code>, <code>BKGL</code>, <code>RTGL</code>) and vendor data.</li> <li>Calls <code>S2EDIT</code> to validate header fields.</li> <li>Calls <code>HDRADD</code> to write/update the transaction header.</li> <li>Calls <code>ROLFWD</code> to initiate detail line processing.</li> <li> <p>Sets indicator 81 to trigger further processing.</p> </li> <li> <p>Subroutine S2EDIT (Header Validation):</p> </li> <li>Validate Invoice Date:<ul> <li>Moves <code>INDT</code> to <code>MMDDYY</code> and calls <code>DTEDIT</code> to validate the date.</li> </ul> </li> <li>Calculate Due Date:<ul> <li>If <code>DUDT</code> is zero and <code>VEND</code> is non-zero, calls <code>CLCDUE</code> to calculate the due date based on vendor terms (<code>VNTERM</code>).</li> <li>Otherwise, sets <code>DUDT = INDT</code>.</li> </ul> </li> <li>Validate Due Date:<ul> <li>Converts <code>DUDT</code> to <code>MMDDYY</code> and validates via <code>DTEDIT</code>.</li> <li>Adjusts for century (<code>Y2KCEN</code>) to create <code>INDT8</code> and <code>DUDT8</code> (8-digit dates).</li> <li>Checks <code>APDATE</code> (per <code>MG17</code>) to replace <code>DUDT8</code> with a non-holiday/non-weekend date (<code>ADNED8</code>).</li> </ul> </li> <li> <p>Validate G/L Accounts:</p> <ul> <li>Chains to <code>GLMAST</code> to validate <code>APGL</code>, <code>BKGL</code>, and <code>RTGL</code>, retrieving descriptions (<code>APGLNM</code>, <code>BKGLNM</code>, <code>RTGLNM</code>). Sets indicators 61, 62, or 63 if invalid.</li> </ul> </li> <li> <p>Subroutine CLCDUE (Calculate Due Date):</p> </li> <li>If <code>VNTERM</code> is non-zero, chains to <code>GSTABL</code> (table <code>APTERM</code>) to retrieve terms (<code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>, <code>TBDISD</code>).</li> <li>If valid, retrieves discount percentage (<code>TBDISC</code> to <code>SVDSPC</code>, per <code>MG03</code>).</li> <li> <p>Calls <code>TMDATN</code> (net days) or <code>TMDATP</code> (prox days) to calculate <code>DUDT</code>.</p> </li> <li> <p>Subroutine TMDATN (Net Days Calculation):</p> </li> <li>Converts <code>INDT</code> to Julian format (<code>G$JD</code>) via <code>@DTE1</code>.</li> <li>Adds net days (<code>TBNETD</code>) to <code>G$JD</code>.</li> <li> <p>Converts back to Gregorian format (<code>$MDY</code>) via <code>@DTE2</code> to set <code>DUDT</code>.</p> </li> <li> <p>Subroutine TMDATP (Prox Days Calculation):</p> </li> <li> <p>Adjusts <code>INDT</code> by incrementing the month (and year if December) and sets the day to <code>TBPRXD</code> to calculate <code>DUDT</code>.</p> </li> <li> <p>Subroutine DTEDIT (Date Validation):</p> </li> <li>Validates <code>MMDDYY</code> by breaking it into month, day, and year.</li> <li>Checks:<ul> <li>Month (1-12).</li> <li>Day (1-31, or 1-28/29 for February, accounting for leap years).</li> </ul> </li> <li> <p>Sets indicator 99 if invalid.</p> </li> <li> <p>Subroutine @DTE1 (Gregorian to Julian Conversion):</p> </li> <li>Converts a Gregorian date (<code>$MDY</code>, <code>$CN</code>) to Julian days (<code>G$JD</code>) for dates between March 1, 1900, and February 28, 2100.</li> <li> <p>Calculates the day of the week (<code>G$JW</code>).</p> </li> <li> <p>Subroutine @DTE2 (Julian to Gregorian Conversion):</p> <ul> <li>Converts a Julian date (<code>G$JD</code>) back to Gregorian format (<code>$MDY</code>, <code>$CN</code>).</li> </ul> </li> <li> <p>Subroutine ROLFWD (Detail Line Processing):</p> <ul> <li>If <code>SORN</code> and <code>SSRN</code> are non-zero and <code>RECSTS = 'ADDNEW'</code>, populates a <code>SALES</code> data structure with <code>CO</code>, <code>SORN</code>, <code>SSRN</code>, <code>ENT#</code>, <code>VEND</code>, <code>FRTL</code>, <code>SVDSPC</code>, and <code>CMPDT8</code> (invoice date minus one year, per <code>JB05</code>).</li> <li>Calls <code>AP1012</code> to populate freight detail lines with calculated percentage amounts.</li> <li>Resets <code>RECSTS</code> and sets <code>KEYENT</code> to \"001\" for the first detail line.</li> </ul> </li> <li> <p>Subroutine S3 (Detail Line Processing):</p> <ul> <li>If <code>FRTL</code> and <code>PRAM</code> are non-zero, calculates the freight amount (<code>FRAM = PRAM * FRTL</code>) and adds it to <code>HOLDAM</code> and <code>SVTTL</code>.</li> <li>Adjusts <code>FRAM</code> if <code>IAMT &gt; SVTTL</code> to balance the invoice amount.</li> <li>Combines <code>PRAM</code> and <code>FRAM</code> to set <code>AMT</code>.</li> <li>If <code>AMT</code> is zero, clears the header (<code>HDRCLR</code>) and exits.</li> <li>Calls <code>S3EDIT</code> to validate detail fields.</li> <li>Calls <code>DETADD</code> to write the detail line.</li> <li>Calls <code>DETCLR</code> to clear detail fields.</li> <li>Calls <code>ROLFWD</code> to process additional lines.</li> <li>Updates <code>FRCINH</code> or <code>FRCFBH</code> (setting <code>FRAPST = 'Y'</code>) based on <code>RCD</code>.</li> <li>Writes the updated record via <code>EXCPT</code> (<code>APINST</code> for <code>FRCINH</code>, <code>APINSF</code> for <code>FRCFBH</code>).</li> </ul> </li> <li> <p>Subroutine S3EDIT (Detail Validation):</p> <ul> <li>Sets default expense G/L (<code>EXGL</code>) from <code>VNEXGL</code> if not specified.</li> <li>Chains to <code>GLMAST</code> to validate <code>EXGL</code>, setting indicator 50 if invalid.</li> </ul> </li> <li> <p>Subroutine HDRADD (Add/Update Header):</p> <ul> <li>Chains to <code>APTRAN</code> and writes/updates the header record using <code>EXCPT</code>.</li> </ul> </li> <li> <p>Subroutine DETADD (Add Detail Line):</p> <ul> <li>Writes the detail line to <code>APTRAN</code> using <code>EXCPT</code>.</li> </ul> </li> <li> <p>Subroutine HDRCLR (Clear Header Fields):</p> <ul> <li>Clears header fields (e.g., <code>SVAPGL</code>, <code>SVBKGL</code>, <code>HDEL</code>, <code>ENT#</code>, <code>VNAM</code>, etc.).</li> </ul> </li> <li> <p>Subroutine DETCLR (Clear Detail Fields):</p> <ul> <li>Clears detail fields (e.g., <code>SVLNGL</code>, <code>SVLNCO</code>, <code>DDEL</code>, <code>AMT</code>, <code>DISC</code>, etc.).</li> </ul> </li> <li> <p>Subroutine ROLLBK (Rollback Processing):</p> <ul> <li>Rolls back detail lines by decrementing <code>NXLINE</code> and chaining to <code>APTRAN</code>.</li> <li>If a header is reached, calls <code>S2EDIT</code> to validate and sets indicator 82.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Sets <code>*INLR = *ON</code> to end the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Invoice Processing:</li> <li>Processes invoices from <code>FRCINH</code> or <code>FRCFBH</code> based on <code>RCD</code> (<code>FRCFBHP4</code> for freight billed balance, per <code>JB06</code>).</li> <li> <p>Adjusts invoice amount (<code>ATIAMT = FRINAM - FRFBOA</code>, per <code>JB06</code>) to account for freight balancing order override total.</p> </li> <li> <p>Hold Status:</p> </li> <li>Supports hold codes (<code>VNHOLD</code>): <code>H</code> (hold), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>U</code> (utility auto-payment, per <code>MG18</code>).</li> <li> <p>Assigns corresponding descriptions to <code>HLDD</code> (per <code>JB02</code>, <code>MG18</code>).</p> </li> <li> <p>Due Date Calculation:</p> </li> <li>Calculates due date (<code>DUDT</code>) based on vendor terms (<code>VNTERM</code>) using net days (<code>TBNETD</code>) or prox days (<code>TBPRXD</code>) from <code>GSTABL</code>.</li> <li>Adjusts due date to avoid holidays/weekends using <code>APDATE</code> (<code>ADNED8</code>, per <code>MG17</code>).</li> <li> <p>Defaults to invoice date (<code>INDT</code>) if no terms are specified.</p> </li> <li> <p>Discount Handling:</p> </li> <li> <p>Retrieves discount percentage (<code>TBDISC</code>) from <code>GSTABL</code> and applies it to <code>SVDSPC</code> (per <code>MG03</code>).</p> </li> <li> <p>Date Validation:</p> </li> <li>Validates invoice and due dates for valid months, days, and leap years.</li> <li> <p>Handles century adjustments for Y2K compliance.</p> </li> <li> <p>G/L Account Validation:</p> </li> <li> <p>Validates accounts payable (<code>APGL</code>), bank (<code>BKGL</code>), and retention (<code>RTGL</code>) G/L accounts against <code>GLMAST</code>.</p> </li> <li> <p>Detail Line Calculation:</p> </li> <li>Calculates freight amount (<code>FRAM</code>) as a proportion of <code>PRAM</code> and <code>FRTL</code>.</li> <li> <p>Ensures total line amount (<code>AMT = PRAM + FRAM</code>) aligns with the invoice amount (<code>IAMT</code>).</p> </li> <li> <p>Freight Detail Lines:</p> </li> <li> <p>Calls <code>AP1012</code> to populate detail lines with calculated freight percentages, using sales order (<code>SORN</code>), sequence number (<code>SSRN</code>), and invoice date minus one year (<code>CMPDT8</code>, per <code>JB05</code>).</p> </li> <li> <p>Transaction Creation:</p> </li> <li>Creates header and detail records in <code>APTRAN</code> with vendor, G/L, and freight details.</li> <li>Updates <code>FRCINH</code> or <code>FRCFBH</code> to mark invoices as processed (<code>FRAPST = 'Y'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Update Files:</li> <li><code>APTRAN</code>: Accounts Payable transaction file (header and detail records, 404 bytes, keyed by company and entry number).</li> <li><code>APCONT</code>: Accounts Payable control file (256 bytes, keyed by company).</li> <li><code>FRCINH</code>: Freight Invoice Header (206 bytes, keyed by company, carrier ID, invoice number).</li> <li> <p><code>FRCFBH</code>: Freight Billed Balance Header (206 bytes, keyed by company, carrier ID, invoice number, reference number, per <code>JB06</code>).</p> </li> <li> <p>Input Files:</p> </li> <li><code>APVEND</code>: Vendor master file (579 bytes, keyed by company and vendor number).</li> <li><code>APVENY</code>: Vendor cross-reference file (320 bytes, keyed by company and carrier ID).</li> <li><code>GLMAST</code>: General Ledger master file (256 bytes, keyed by company and G/L account).</li> <li><code>GSTABL</code>: General table file (256 bytes, keyed by table type <code>APTERM</code> for terms).</li> <li><code>APDATE</code>: Due date adjustment file (19 bytes, keyed by company and due date, per <code>MG17</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP1012:</li> <li>Called in <code>ROLFWD</code> to populate freight detail lines with calculated percentage amounts, passing the <code>SALES</code> data structure.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP125.rpg</code> program processes freight invoices from <code>FRCINH</code> or <code>FRCFBH</code> to create accounts payable transactions in <code>APTRAN</code>. It validates company, vendor, and G/L data, calculates due dates (adjusted for holidays/weekends), applies discounts, and generates header and detail records. The program handles freight balancing adjustments, hold statuses, and detail line calculations via <code>AP1012</code>. It ensures data integrity through extensive validation and updates the source invoice records upon completion.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/","title":"AP125P RPGLE","text":"<p>The <code>AP125P.rpgle</code> program is an RPGLE program running on an IBM AS/400 (iSeries) system, designed for \"Freight Invoice Import Selection\" as part of an Accounts Payable (A/P) process. It is called from the <code>AP125.ocl36.txt</code> OCL script and facilitates the selection and management of freight invoices for batch processing. Below, I will explain the process steps, business rules, tables used, and external programs called, based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#process-steps-of-the-ap125p-program","title":"Process Steps of the AP125P Program","text":"<p>The program is structured to manage a subfile (SFL) interface for selecting freight invoices, allowing users to add or remove invoices from a batch, validate inputs, and create batches for further processing. The main process steps are:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>a$co</code>: Company code (2 digits).</li> <li><code>p$inty</code>: Invoice type filter (<code>P</code> for paper, <code>N</code> for non-paper).</li> <li><code>p$mode</code>: Run mode (<code>MNT</code> for maintenance, otherwise inquiry).</li> <li><code>p$fgrp</code>: File group (<code>G</code> or <code>Z</code>, determining which library files to use).</li> </ul> </li> <li>Initializes work fields, subfile control fields (e.g., <code>rrn1</code>, <code>pagsz1</code>), and key lists for file access.</li> <li> <p>Sets up message handling and default headers/comments.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>Overrides database files based on the <code>p$fgrp</code> parameter (<code>G</code> or <code>Z</code>) using <code>QCMDEXC</code> to execute override commands (e.g., <code>ovrdbf</code> for <code>apcont</code>, <code>frbinh</code>, etc.).</li> <li> <p>Opens input files (<code>apcont</code>, <code>frbinh</code>, <code>frcinh</code>, <code>frcfbh</code>, <code>bbcaid</code>, <code>frcinhj4</code>) and the add/update file (<code>ap125pw</code>).</p> </li> <li> <p>Create or Clear Work File (<code>crtwrkf</code> Subroutine):</p> </li> <li>Calls the external program <code>AP125PC</code> to create or clear the work file <code>ap125pw</code>.</li> <li>Overrides the <code>ap125pw</code> file to <code>qtemp/ap125pw</code> with <code>share(*no)</code>.</li> <li> <p>Opens the <code>ap125pw</code> file for add/update operations.</p> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Clears any existing messages (<code>clrmsg</code>) and writes initial messages (<code>wrtmsg</code>).</li> <li>Initialize Subfile: Sets the subfile mode to folded (<code>sfmod1 = '1'</code>, <code>*in45 = *on</code>) and initializes control fields (e.g., <code>c1co</code> from <code>a$co</code>, <code>c1mode</code> to <code>All</code>).</li> <li>Global Protection: Sets <code>*in70</code> based on <code>p$mode</code> (<code>*off</code> for <code>MNT</code>, <code>*on</code> for inquiry mode, protecting fields in inquiry mode).</li> <li>Position File: Calls <code>sf1rep</code> to position the file and load the subfile.</li> <li> <p>Main Loop:</p> <ul> <li>Displays the subfile control (<code>sflctl1</code>) and command line (<code>sflcmd1</code>).</li> <li>Checks for subfile records to enable display (<code>*in41</code>).</li> <li>Handles user inputs (function keys and Enter):</li> <li>F03 (Exit): Checks for pending selections in <code>ap125pw</code>. If present, displays a confirmation window (<code>f03wdw</code>) via <code>sf1f03</code>. Exits if confirmed.</li> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting (e.g., for <code>c1caid</code> using <code>LBBCAID</code>).</li> <li>F05 (All/Review Toggle): Toggles between <code>All</code> and <code>Review</code> modes, updating <code>c1mode</code> and repositioning the subfile.</li> <li>F06 (Create Batch and Exit): Displays a confirmation window (<code>f06wdw</code>) via <code>sf1crtbat</code> and creates a batch by calling <code>crtbat</code>.</li> <li>F22 (Add All): Adds all displayed invoices to the batch via <code>sf1prcall</code>.</li> <li>F23 (Remove All): Removes all displayed invoices from the batch via <code>sf1prcall</code>.</li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li>Enter: Processes subfile changes (<code>sf1prc</code>).</li> <li>Positioning: Repositions the subfile if <code>c1caid</code>, <code>c1fmdy</code>, or <code>c1tmdy</code> change (<code>sf1rep</code>).</li> <li>F10: Moves the cursor to the control record.</li> </ul> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes options (<code>sf1chg</code>).</li> <li>Handles options:<ul> <li>Option 1 (Add): Adds the invoice to the batch (<code>sf1s01</code>) if in <code>MNT</code> mode.</li> <li>Option 4 (Remove): Removes the invoice from the batch (<code>sf1s04</code>) if in <code>MNT</code> mode.</li> </ul> </li> <li> <p>Updates subfile fields and colors (<code>sf1fmt</code>, <code>sf1col</code>) and writes the updated record.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Validates control fields (<code>sf1cte</code>) and positions the file (<code>frcinhj4</code>) using <code>setll</code>.</li> <li> <p>Loads subfile records (<code>sf1lod</code>) and retains control field values for repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li>Validates:<ul> <li>Company (<code>c1co</code>): Chains to <code>apcont</code> to verify the company code and retrieve the company name (<code>c1conm</code>).</li> <li>Carrier ID (<code>c1caid</code>): Chains to <code>bbcaid</code> to verify the carrier ID and retrieve the carrier name (<code>c1crnm</code>). If blank, sets to <code>*All</code>.</li> <li>From/To Invoice Dates (<code>c1fmdy</code>, <code>c1tmdy</code>): Calls <code>GSDTEDIT</code> to validate dates and convert to <code>c1fdat</code>/<code>c1tdat</code>. Errors trigger messages (<code>ERR0020</code>).</li> </ul> </li> <li> <p>Adds error messages to the message subfile if validation fails.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Reads records from <code>frcinhj4</code> (replacing <code>frcinh4</code>) for the specified company (<code>c1co</code>).</li> <li>Retrieves the order ship date (<code>boshd8</code>) from <code>frbinh</code> (replacing invoice date per revision <code>dc01</code>).</li> <li>Applies filters (<code>sf1fltr</code>) and skips records that don\u2019t match criteria.</li> <li>Formats (<code>sf1fmt</code>) and color-codes (<code>sf1col</code>) subfile lines, then writes them to the subfile.</li> <li> <p>Sets <code>s1nosflrecs</code> if no records are found.</p> </li> <li> <p>Apply Filters (<code>sf1fltr</code> Subroutine):</p> </li> <li>Filters records based on:<ul> <li>Approval status (<code>fralst \u2260 'Y'</code> or <code>frapst \u2260 'N'</code>).</li> <li>Invoice type (<code>frinty</code> must match <code>p$inty</code>).</li> <li>Non-zero invoice amount (<code>s1inam \u2260 0</code>, per revision <code>jb03</code>).</li> <li>Carrier ID (<code>c1caid</code> must match <code>frcaid</code> if specified).</li> </ul> </li> <li> <p>Sets <code>s1fltr</code> to <code>*on</code> to skip records that fail filters.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> <ul> <li>Populates subfile fields (<code>s1caid</code>, <code>s1cain</code>, <code>s1inty</code>, <code>s1rdno</code>, <code>s1srn</code>, <code>s1inam</code>, <code>s1smdy</code>) from <code>frcinhj4</code> or <code>frbinh</code>.</li> <li>Adjusts invoice amount (<code>s1inam = frinam - frfboa</code>, per revision <code>jb02</code>).</li> <li>Checks if the record is already in <code>ap125pw</code> and sets <code>s1flag</code> to <code>'*'</code> if present.</li> </ul> </li> <li> <p>Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Placeholder for color-coding subfile records (currently empty but reserved for visual indicators).</li> </ul> </li> <li> <p>Add Invoice to Batch (<code>sf1s01</code> Subroutine):</p> <ul> <li>Chains to <code>ap125pw</code> to check if the record exists.</li> <li>If not, writes a new record with company, carrier ID, invoice number, record type (<code>s1rcd</code>), and reference number (<code>s1rdno</code>).</li> <li>Updates the total invoice amount (<code>c1inam</code>).</li> </ul> </li> <li> <p>Remove Invoice from Batch (<code>sf1s04</code> Subroutine):</p> <ul> <li>Chains to <code>ap125pw</code> to locate the record.</li> <li>If found, deletes it and subtracts the invoice amount from <code>c1inam</code>.</li> </ul> </li> <li> <p>Process All Records (<code>sf1prcall</code> and <code>sf1prcall2</code> Subroutines):</p> <ul> <li>Displays a window (<code>addwdw</code> for adding, <code>rmvwdw</code> for removing) and processes all displayed records.</li> <li>Iterates through <code>frcinhj4</code>, applies filters, and calls <code>sf1s01</code> (add) or <code>sf1s04</code> (remove) based on <code>w$add</code>.</li> </ul> </li> <li> <p>Create Batch (<code>crtbat</code> Subroutine):</p> <ul> <li>Reads <code>ap125pw</code> records and chains to <code>frcinh</code> or <code>frcfbh</code> based on <code>w1rcd</code>.</li> <li>For approved (<code>fralst = 'Y'</code>, <code>frapst = 'N'</code>) records, calls <code>AP125</code> with parameters (<code>o$co</code>, <code>o$caid</code>, <code>o$cain</code>, <code>o$rcd</code>, <code>o$rdno</code>) to create the batch.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>For the <code>C1CAID</code> field, calls <code>LBBCAID</code> to prompt for a carrier ID, passing <code>c1co</code>, <code>c1caid</code>, and <code>p$fgrp</code>.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li><code>addmsg</code>: Sends error messages (e.g., <code>ERR0010</code>, <code>ERR0020</code>) to the program message queue using <code>QMHSNDPM</code>.</li> <li><code>wrtmsg</code>: Displays the message subfile (<code>msgctl</code>).</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files and sets <code>*inlr = *on</code> to end the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Invoice Filtering:    - Only approved invoices (<code>fralst = 'Y'</code>, <code>frapst = 'N'</code>) are eligible for selection.    - Invoices must match the specified invoice type (<code>p$inty</code>, <code>P</code> or <code>N</code>).    - Invoices with zero amounts are excluded (revision <code>jb03</code>).    - Carrier ID (<code>c1caid</code>) must match if specified, otherwise all carriers are included.</p> <ol> <li>Invoice Amount Adjustment:</li> <li> <p>The displayed invoice amount (<code>s1inam</code>) is calculated as <code>frinam - frfboa</code> (Freight Balancing Order Override Total, revision <code>jb02</code>).</p> </li> <li> <p>Date Usage:</p> </li> <li> <p>Uses the order ship date (<code>boshd8</code> from <code>frbinh</code>) instead of the invoice date (<code>frindt</code>, revision <code>dc01</code>) for filtering and display.</p> </li> <li> <p>Batch Processing:</p> </li> <li>Invoices are added to or removed from <code>ap125pw</code> based on user selections (options 1 or 4, or F22/F23).</li> <li> <p>Batch creation (<code>crtbat</code>) only processes approved invoices with valid status codes.</p> </li> <li> <p>Mode-Based Access:</p> </li> <li>In <code>MNT</code> mode, users can add/remove invoices and create batches.</li> <li> <p>In inquiry mode, fields are protected (<code>*in70 = *on</code>), preventing modifications.</p> </li> <li> <p>Validation:</p> </li> <li>Company code (<code>c1co</code>) must exist in <code>apcont</code>.</li> <li>Carrier ID (<code>c1caid</code>) must exist in <code>bbcaid</code> (revision <code>jk01</code>).</li> <li> <p>Dates (<code>c1fmdy</code>, <code>c1tmdy</code>) must be valid, checked via <code>GSDTEDIT</code>.</p> </li> <li> <p>Subfile Behavior:</p> </li> <li>Supports <code>All</code> (all eligible invoices) and <code>Review</code> (only invoices in <code>ap125pw</code>) modes.</li> <li>Displays a \"No Records Found\" message if no invoices meet the criteria.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>Display File:</li> <li> <p><code>ap125pd</code>: Display file with subfile <code>sfl1</code>, used for the user interface.</p> </li> <li> <p>Input Files:</p> </li> <li><code>apcont</code>: Accounts Payable control file (company data).</li> <li><code>frbinh</code>: Freight Out Balancing Customer Invoice Header (for order ship date).</li> <li><code>frcinh</code>: Freight Invoice Header.</li> <li><code>frcfbh</code>: Freight Billed Balance Header (revision <code>jb02</code>).</li> <li><code>bbcaid</code>: Carrier ID table (replacing <code>gstabl</code>, revision <code>jk01</code>).</li> <li> <p><code>frcinhj4</code>: Multi-file logical file combining <code>frcinh</code> and <code>frcfbh</code> (replacing <code>frcinh4</code>, revision <code>jb02</code>).</p> </li> <li> <p>Add/Update File:</p> </li> <li><code>ap125pw</code>: Work file in <code>qtemp</code> for storing selected invoices.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP125PC:</li> <li> <p>Called in <code>crtwrkf</code> to create or clear the <code>ap125pw</code> work file.</p> </li> <li> <p>GSDTEDIT:</p> </li> <li> <p>Called in <code>sf1cte</code> to validate and convert dates (<code>c1fmdy</code>, <code>c1tmdy</code>).</p> </li> <li> <p>AP125:</p> </li> <li> <p>Called in <code>crtbat</code> to create the invoice batch, passing company, carrier ID, invoice number, record type, and reference number.</p> </li> <li> <p>LBBCAID:</p> </li> <li> <p>Called in <code>prompt</code> to provide carrier ID prompting, replacing <code>LGSTABL</code> (revision <code>jk01</code>).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute override commands (<code>ovrdbf</code>) in <code>opntbl</code> and <code>crtwrkf</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send error messages to the program message queue in <code>addmsg</code>.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear the message subfile in <code>clrmsg</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/AP125P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP125P</code> program is a user-interactive RPGLE program for selecting freight invoices for batch processing. It uses a subfile interface to display invoices from <code>frcinhj4</code>, allows users to add/remove invoices to/from <code>ap125pw</code>, and creates batches via <code>AP125</code>. Key features include filtering by approval status, invoice type, and non-zero amounts, using order ship dates, and supporting maintenance/inquiry modes. The program integrates with multiple files and external programs to validate data and manage the batch process.</p> <p>If you need further details or clarification on specific subroutines, business rules, or file structures, please let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/","title":"Summary AP1012","text":"<p>Below is a Functional Requirements Document (FRD) for the RPG programs <code>AP1011</code> and <code>AP1012</code>, which are designed to create Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details or miscellaneous freight amounts. Since both programs are intended to perform the same function with minor differences, this FRD consolidates the requirements for a single system, noting any variations where applicable. The document is structured to provide a clear, comprehensive description of the system's purpose, functionality, data requirements, and constraints.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#functional-requirements-document-ap-voucher-freight-allocation-system","title":"Functional Requirements Document: A/P Voucher Freight Allocation System","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#1-document-information","title":"1. Document Information","text":"<ul> <li>Document Title: Functional Requirements Document for A/P Voucher Freight Allocation System</li> <li>Document ID: FRD-AP1011-AP1012-001</li> <li>Version: 1.0</li> <li>Date: July 01, 2025</li> <li>Prepared By: Grok 3, xAI</li> <li>Purpose: To define the functional requirements for the A/P Voucher Freight Allocation System, implemented by RPG programs <code>AP1011</code> and <code>AP1012</code>, which prorate carrier freight costs across sales detail or miscellaneous lines for Accounts Payable voucher entry.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#2-system-overview","title":"2. System Overview","text":"<p>The A/P Voucher Freight Allocation System processes sales invoice data to allocate carrier freight costs across detail or miscellaneous lines based on net gallons or freight amounts, respectively. The system generates or updates A/P transaction records in the <code>APTRAN</code> file, ensuring accurate freight cost distribution and proper General Ledger (G/L) account assignment. The system supports both regular sales invoices (with detail lines) and miscellaneous-only invoices (without detail lines).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#21-objectives","title":"2.1 Objectives","text":"<ul> <li>Calculate total net gallons for freight allocation from sales detail records.</li> <li>Prorate freight costs across detail lines based on net gallons or miscellaneous lines based on freight amounts.</li> <li>Assign appropriate freight G/L accounts based on product codes or miscellaneous types.</li> <li>Create or update A/P transaction records with prorated freight amounts, discounts, and relevant details.</li> <li>Ensure data integrity by filtering records within one year of the invoice date.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#22-scope","title":"2.2 Scope","text":"<ul> <li>In-Scope:</li> <li>Processing sales detail records from <code>SA5FIUD</code> or <code>SA5MOUD</code> and miscellaneous records from <code>SA5FIUM</code> or <code>SA5MOUM</code>.</li> <li>Retrieving freight G/L accounts from <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code>.</li> <li>Writing or updating A/P transaction records in <code>APTRAN</code>.</li> <li>Handling discounts and ensuring total freight allocation matches the input freight amount.</li> <li>Out-of-Scope:</li> <li>Generation of sales invoices or modification of source data in <code>SA5FI*</code> or <code>SA5MO*</code> files.</li> <li>Validation of input parameters beyond what is provided in the <code>SALES</code> data structure.</li> <li>Integration with external systems beyond file I/O.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#3-functional-requirements","title":"3. Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#31-input-processing","title":"3.1 Input Processing","text":"<ul> <li>FR-001: The system shall accept input parameters via a <code>SALES</code> data structure with the following fields:</li> <li><code>SACO</code> (2 bytes): Company number.</li> <li><code>SAORD</code> (6 bytes): Order number.</li> <li><code>SASRN#</code> (3 bytes): Shipping reference number.</li> <li><code>SASEQ</code> (3 bytes): Sequence number.</li> <li><code>FRTTOT</code> (7,2): Total freight amount to allocate.</li> <li><code>VEND</code> (5 bytes): Vendor number.</li> <li><code>ENTNUM</code> (5 bytes): Entry number.</li> <li><code>EXGL</code> (8 bytes): Expense G/L number.</li> <li><code>DSPC</code> (4,3): Discount percentage.</li> <li><code>CMPDT8</code> (8 bytes): Comparison date (YYYYMMDD) for filtering records.</li> <li><code>S@FIMO</code> (1 byte): Table indicator (<code>F</code> for <code>SA5FI*</code>, <code>M</code> for <code>SA5MO*</code>).</li> <li><code>S@DM</code> (1 byte): Record type (<code>D</code> for detail, <code>M</code> for miscellaneous).</li> <li>FR-002: If <code>S@FIMO</code> is blank, the system shall determine the appropriate table (<code>SA5FI*</code> or <code>SA5MO*</code>) and record type (<code>D</code> or <code>M</code>) by searching for valid records in <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, or <code>SA5MOUM</code> matching <code>SACO</code>, <code>SAORD</code>, <code>SASRN#</code>, and <code>CMPDT8</code> (specific to <code>AP1012</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#32-data-retrieval-and-filtering","title":"3.2 Data Retrieval and Filtering","text":"<ul> <li>FR-003: The system shall read detail records from <code>SA5FIUD</code> (sales detail) or <code>SA5MOUD</code> (move detail) when <code>S@FIMO = 'F'</code> or <code>S@FIMO = 'M'</code>, respectively, filtering by:</li> <li><code>S5CO# = SACO</code> (company number).</li> <li><code>S5ORD# = SAORD</code> (order number).</li> <li><code>S5SRN# = SASRN#</code> (shipping reference number).</li> <li><code>S5SHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li>FR-004: The system shall read miscellaneous records from <code>SA5FIUM</code> (sales miscellaneous) or <code>SA5MOUM</code> (move miscellaneous) when no detail records are found, filtering by:</li> <li><code>SMCO# = SACO</code> (company number).</li> <li><code>SMORD# = SAORD</code> (order number).</li> <li><code>SMSRN# = SASRN#</code> (shipping reference number).</li> <li><code>SMSHD8 &gt;= CMPDT8</code> (ship date within one year of invoice date).</li> <li><code>SMMSTY = 'F'</code> (freight type).</li> <li><code>SMGLNO \u2260 0</code> (non-zero G/L number).</li> <li>FR-005: The system shall retrieve freight G/L numbers (<code>FEGL</code>) as follows:</li> <li>For detail records with alpha characters in <code>S5PROD</code> (product code), use <code>CUFEGL</code> from <code>GSCTUM</code> based on <code>S5CO#</code>, <code>S5PROD</code>, <code>S5CNTR</code>, and <code>S5UM</code>.</li> <li>For detail records with numeric <code>S5PROD</code>, combine <code>TBFEG4</code> (first 4 digits) from <code>GSTABL</code> (keyed by <code>CNTRPF</code> and <code>S5TANK</code>) with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li>For miscellaneous records, use <code>SMGLNO</code> directly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#33-freight-proration","title":"3.3 Freight Proration","text":"<ul> <li>FR-006: For detail records:</li> <li>Calculate total net gallons (<code>TTLQTY</code>) by summing <code>S5NGAL</code> from filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>S5NGAL / TTLQTY</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>AMTITM</code>) for each line.</li> <li>Adjust the last record\u2019s amount to ensure the sum of all amounts equals <code>FRTTOT</code>:<ul> <li>If sum equals <code>FRTTOT</code>, no adjustment.</li> <li>If sum is less than <code>FRTTOT</code>, add the difference to the last record.</li> <li>If sum is greater than <code>FRTTOT</code>, subtract the difference from the last record.</li> </ul> </li> <li>FR-007: For miscellaneous records (when no detail records exist):</li> <li>Calculate total miscellaneous freight (<code>TTLMFT</code>) by summing <code>SMMAMT * SMMQTY</code> for filtered records.</li> <li>Calculate the percentage (<code>PCTHLD</code>) for each record as <code>(SMMAMT * SMMQTY) / TTLMFT</code>.</li> <li>Multiply <code>PCTHLD</code> by <code>FRTTOT</code> to compute the freight amount (<code>FRTAMT</code>) for each line.</li> <li>For the last record, set <code>FRTAMT = FRTTOT - sum(previous FRTAMT)</code> to ensure the total matches <code>FRTTOT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#34-ap-transaction-processing","title":"3.4 A/P Transaction Processing","text":"<ul> <li>FR-008: The system shall write or update records in <code>APTRAN</code> (A/P transaction file) as follows:</li> <li>Key Fields: <code>S5CO#</code> or <code>SMCO#</code> (company number), <code>ENTNUM</code> (entry number), <code>COUNT2</code> or <code>COUNT3</code> (sequence number).</li> <li>Common Fields:<ul> <li>Record type: <code>A</code> (active).</li> <li>Vendor number: <code>VEND</code>.</li> <li>Freight G/L: <code>FEGL</code>.</li> <li>Description: <code>FRTCHG</code> (detail) or <code>MISC CHARGE</code> (miscellaneous) from <code>MSG</code> array.</li> <li>Order number: <code>SAORD</code> or <code>SMORD#</code>.</li> <li>Shipping reference number: <code>SASRN#</code> or <code>SMSRN#</code>.</li> <li>Discount percentage: <code>DSPC</code>.</li> <li>Status: <code>C</code> (closed).</li> <li>Zero-filled fields for unused amounts (e.g., <code>ATDISC</code>, <code>ATQTY</code>, <code>ATGALN</code>, etc.).</li> </ul> </li> <li>Detail-Specific Fields:<ul> <li>Product code: <code>S5PROD</code>.</li> <li>Container code: <code>S5CNTR</code>.</li> <li>Amount: <code>LINAMT</code> (prorated freight).</li> </ul> </li> <li>Miscellaneous-Specific Fields:<ul> <li>Amount: <code>FRTAMT</code> (adjusted for last record).</li> </ul> </li> <li>FR-009: If an <code>APTRAN</code> record exists for the key (<code>CHAIN</code> succeeds), update it (<code>UPDT</code> or <code>UPDTM</code>); otherwise, write a new record (<code>ADDT</code> or <code>ADDTM</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#35-error-handling-and-data-validation","title":"3.5 Error Handling and Data Validation","text":"<ul> <li>FR-010: The system shall skip records marked as deleted (<code>S5DEL = 'D'</code> or <code>SMDEL = 'D'</code>).</li> <li>FR-011: If no valid records are found in <code>SA5FIUD</code>/<code>SA5MOUD</code> or <code>SA5FIUM</code>/<code>SA5MOUM</code>, the system shall exit without writing to <code>APTRAN</code>.</li> <li>FR-012: If <code>TTLQTY = 0</code> for detail records or <code>TTLMFT = 0</code> for miscellaneous records, set <code>PCTHLD</code> to zero to avoid division by zero.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#4-data-requirements","title":"4. Data Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#41-input-files","title":"4.1 Input Files","text":"<ul> <li>SA5FIUD (Sales Detail, 1024 bytes, keyed):</li> <li>Fields: <code>S5DEL</code>, <code>S5CO#</code>, <code>S5CUST</code>, <code>S5SHIP</code>, <code>S5PROD</code>, <code>PRD1-4</code>, <code>S5TANK</code>, <code>S5ORD#</code>, <code>S5UM</code>, <code>S5NGAL</code>, <code>S5CNTR</code>, <code>S5SHD8</code>, <code>S5SRN#</code>.</li> <li>SA5MOUD (Move Detail, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUD</code>.</li> <li>SA5FIUM (Sales Miscellaneous, 1024 bytes, keyed):</li> <li>Fields: <code>SMDEL</code>, <code>SMCO#</code>, <code>SMCUST</code>, <code>SMSHIP</code>, <code>SMMQTY</code>, <code>SMMAMT</code>, <code>SMORD#</code>, <code>SMSEQ</code>, <code>SMMSTY</code>, <code>SMGLNO</code>, <code>SMIND8</code>, <code>SMSHD8</code>, <code>SMSRN#</code>.</li> <li>SA5MOUM (Move Miscellaneous, 1024 bytes, keyed):</li> <li>Same fields as <code>SA5FIUM</code>.</li> <li>GSTABL (General Table, 256 bytes, keyed):</li> <li>Field: <code>TBFEG4</code> (freight G/L first 4 digits).</li> <li>BICONT (Business Control, 256 bytes, keyed):</li> <li>Field: <code>BCFRGL</code> (default freight G/L).</li> <li>GSCTUM (Customer Table, 64 bytes, keyed):</li> <li>Field: <code>CUFEGL</code> (freight expense G/L).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#42-output-file","title":"4.2 Output File","text":"<ul> <li>APTRAN (A/P Transaction, 404 bytes, keyed):</li> <li>Fields: <code>ATDDEL</code>, <code>ATCONO</code>, <code>ATENT#</code>, <code>ATENSQ</code>, <code>ATVEND</code>, <code>ATEXCO</code>, <code>ATEXGL</code>, <code>ATDDES</code>, <code>ATAMT</code>, <code>ATDISC</code>, <code>ATDSPC</code>, <code>ATITEM</code>, <code>ATQTY</code>, <code>ATJOB#</code>, <code>ATCCOD</code>, <code>ATCTYP</code>, <code>ATJQTY</code>, <code>ATPONO</code>, <code>ATGALN</code>, <code>ATRCPT</code>, <code>ATCLCD</code>, <code>ATPOSQ</code>, <code>ATPRAM</code>, <code>ATFRAM</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#43-data-structures","title":"4.3 Data Structures","text":"<ul> <li>SALES: Input parameter structure with fields listed in FR-001.</li> <li>Internal Arrays:</li> <li><code>PCT</code> (999, 7,3): Percentage for each line.</li> <li><code>AMT</code> (999, 11,2): Freight amounts for each line.</li> <li><code>MSG</code> (2, 25 bytes): Descriptions (<code>FRTCHG</code>, <code>MISC CHARGE</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#5-non-functional-requirements","title":"5. Non-Functional Requirements","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#51-performance","title":"5.1 Performance","text":"<ul> <li>NFR-001: The system shall process invoices with up to 999 detail or miscellaneous lines within 5 seconds per invoice.</li> <li>NFR-002: The system shall handle concurrent processing of multiple invoices without data corruption.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#52-reliability","title":"5.2 Reliability","text":"<ul> <li>NFR-003: The system shall ensure that the sum of prorated freight amounts equals <code>FRTTOT</code> within a tolerance of \u00b10.01.</li> <li>NFR-004: The system shall maintain data integrity by locking <code>APTRAN</code> records during updates.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#53-compatibility","title":"5.3 Compatibility","text":"<ul> <li>NFR-005: The system shall operate on IBM AS/400 or compatible systems supporting RPG/36 (<code>AP1011</code>) and RPG IV (<code>AP1012</code>).</li> <li>NFR-006: The system shall use standard file formats for <code>SA5FI*</code>, <code>SA5MO*</code>, <code>GSTABL</code>, <code>BICONT</code>, <code>GSCTUM</code>, and <code>APTRAN</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#54-maintainability","title":"5.4 Maintainability","text":"<ul> <li>NFR-007: Changes to <code>AP1011</code> must be mirrored in <code>AP1012</code> to maintain functional consistency, as noted in the file headers.</li> <li>NFR-008: The system shall include clear comments and change logs (e.g., JB02, MG03, JB07, JB08) to track modifications.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#6-constraints","title":"6. Constraints","text":"<ul> <li>C-001: The system assumes input parameters in the <code>SALES</code> data structure are valid and does not perform extensive validation.</li> <li>C-002: Records older than one year from the invoice date (<code>S5SHD8</code> or <code>SMSHD8 &lt; CMPDT8</code>) are excluded.</li> <li>C-003: The system relies on the presence of <code>GSTABL</code>, <code>BICONT</code>, and <code>GSCTUM</code> for G/L number retrieval.</li> <li>C-004: <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, while <code>AP1012</code> can derive them via the <code>GETS@</code> subroutine.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#7-assumptions","title":"7. Assumptions","text":"<ul> <li>Input data in <code>SA5FI*</code> and <code>SA5MO*</code> files is accurate and consistent.</li> <li>The <code>APTRAN</code> file supports both create and update operations.</li> <li>The <code>CMPDT8</code> date is provided in YYYYMMDD format and represents a valid comparison date.</li> <li>Discounts (<code>DSPC</code>) are applicable to all transaction lines.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#8-differences-between-ap1011-and-ap1012","title":"8. Differences Between AP1011 and AP1012","text":"<ul> <li>GETS@ Subroutine:</li> <li>AP1012: Includes a <code>GETS@</code> subroutine to determine <code>S@FIMO</code> and <code>S@DM</code> when blank, enhancing flexibility.</li> <li>AP1011: Assumes <code>S@FIMO</code> and <code>S@DM</code> are provided, potentially limiting its use in certain scenarios.</li> <li>File Access Mode:</li> <li>AP1011: <code>APTRAN</code> defined as <code>UC</code> (update/create).</li> <li>AP1012: <code>APTRAN</code> defined as <code>UF</code> (update/file), potentially allowing broader access.</li> <li>Change Log Dates:</li> <li>AP1011: JB07 dated 07/10/2024.</li> <li>AP1012: JB07 dated 04/01/2019, indicating possible synchronization issues.</li> <li>File Definition Syntax:</li> <li>AP1011: Uses <code>EXTK</code> and <code>L14AI</code> for some file definitions, reflecting RPG/36 syntax.</li> <li>AP1012: Uses simpler <code>14AI</code>, reflecting RPG IV conventions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#9-future-considerations","title":"9. Future Considerations","text":"<ul> <li>Synchronize the <code>GETS@</code> subroutine across both programs to ensure consistent handling of blank <code>S@FIMO</code> and <code>S@DM</code>.</li> <li>Standardize file access modes (<code>UC</code> vs. <code>UF</code>) to avoid potential operational differences.</li> <li>Implement additional input validation to handle invalid or missing parameters.</li> <li>Consider consolidating <code>AP1011</code> and <code>AP1012</code> into a single program to reduce maintenance overhead.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#10-approval","title":"10. Approval","text":"<ul> <li>Prepared By: Grok 3, xAI</li> <li>Reviewed By: [Pending Stakeholder Review]</li> <li>Approved By: [Pending Stakeholder Approval]</li> <li>Date Approved: [Pending]</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#additional-technical-details-","title":"Additional Technical Details --","text":"<p>The two RPG programs, <code>AP1011.rpg36.txt</code> and <code>AP1012.rpg.txt</code>, are designed to perform the same function: creating Accounts Payable (A/P) voucher entry detail totals by prorating carrier freight based on sales details (gallons) or miscellaneous freight amounts. They preprocess data to gather total gallons for freight allocation and split voucher entries to calculate percentages. Both programs share similar logic, file structures, and processing steps, with a note in the file headers indicating that changes in one must be reflected in the other. However, there are minor differences, primarily in file access modes and a specific subroutine present only in <code>AP1012</code>. Below is a consolidated analysis of the process steps, business rules, tables used, and external programs called, with differences explicitly noted.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#process-steps","title":"Process Steps","text":"<p>Both programs follow these steps to prorate freight costs and create A/P transaction records:</p> <ol> <li>Input Parameter Processing:</li> <li> <p>Receive input via a parameter list (<code>SALES</code> data structure) containing fields like company number (<code>SACO</code>), order number (<code>SAORD</code>), shipping reference number (<code>SASRN#</code>), freight total (<code>FRTTOT</code>), vendor number (<code>VEND</code>), entry number (<code>ENTNUM</code>), expense G/L (<code>EXGL</code>), discount percentage (<code>DSPC</code>), comparison date (<code>CMPDT8</code>), and table indicators (<code>S@FIMO</code>, <code>S@DM</code>).</p> </li> <li> <p>Determine Table Access (AP1012 only):</p> </li> <li> <p>In <code>AP1012</code>, if <code>S@FIMO</code> is blank, the <code>GETS@</code> subroutine determines whether to use <code>SA5FI</code> or <code>SA5MO</code> tables and whether to process detail (<code>D</code>) or miscellaneous (<code>M</code>) records by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for matching records.</p> </li> <li> <p>Calculate Total Net Gallons:</p> </li> <li>Read through <code>SA5FIUD</code> (detail) or <code>SA5MOUD</code> (move detail) based on <code>S@FIMO</code> (<code>F</code> for <code>SA5FI</code>, <code>M</code> for <code>SA5MO</code>).</li> <li>Filter records by company (<code>S5CO# = SACO</code>), order (<code>S5ORD# = SAORD</code>), shipping reference number (<code>S5SRN# = SASRN#</code>), and ship date (<code>S5SHD8 &gt;= CMPDT8</code>, within one year of invoice date).</li> <li> <p>Sum net gallons (<code>S5NGAL</code>) into <code>TTLQTY</code> and count records (<code>COUNT1</code>).</p> </li> <li> <p>Handle No Detail Records:</p> </li> <li> <p>If no detail records are found (<code>TTLQTY = 0</code> and <code>COUNT1 = 0</code>), proceed to process miscellaneous records (<code>SA5FIUM</code> or <code>SA5MOUM</code>).</p> </li> <li> <p>Prorate Freight Based on Detail Records:</p> </li> <li>Re-read <code>SA5FIUD</code> or <code>SA5MOUD</code> to calculate the percentage of total gallons (<code>S5NGAL / TTLQTY</code>) for each record.</li> <li>Multiply the percentage (<code>PCTHLD</code>) by the total freight (<code>FRTTOT</code>) to compute the freight amount (<code>AMT,Y</code>) for each line.</li> <li>Store the amount in <code>AMTITM</code> and <code>LINAMT</code> (array elements).</li> <li>Adjust the last record\u2019s amount to ensure the sum matches <code>FRTTOT</code>:<ul> <li>If <code>FRTTOT = sum(AMT)</code>, write records.</li> <li>If <code>FRTTOT &gt; sum(AMT)</code>, add the difference to the last record.</li> <li>If <code>FRTTOT &lt; sum(AMT)</code>, subtract the difference from the last record.</li> </ul> </li> <li> <p>Call the <code>GOOD</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Prorate Freight Based on Miscellaneous Records:</p> </li> <li>If no detail records exist, call the <code>MFRTO</code> subroutine to calculate the total miscellaneous freight amount (<code>TTLMFT</code>) and count (<code>COUNTM</code>) from <code>SA5FIUM</code> or <code>SA5MOUM</code> where <code>SMMSTY = 'F'</code> (freight) and <code>SMGLNO \u2260 0</code>.</li> <li>Read <code>SA5FIUM</code> or <code>SA5MOUM</code>, calculate the percentage (<code>CLCAMT / TTLMFT</code>) for each record, and apply it to <code>FRTTOT</code> to get <code>FRTAMT</code>.</li> <li>For the last record, adjust <code>FRTAMT</code> to ensure the sum equals <code>FRTTOT</code>.</li> <li> <p>Call the <code>GETFRT</code> subroutine to write or update <code>APTRAN</code> records.</p> </li> <li> <p>Write/Update A/P Transaction Records:</p> </li> <li>In the <code>GOOD</code> subroutine:<ul> <li>Retrieve the freight G/L number (<code>FEGL</code>) based on product code (<code>S5PROD</code>):</li> <li>If the product code contains an alpha character, use <code>GSCTUM</code> (<code>CUFEGL</code>).</li> <li>Otherwise, combine the first 4 digits from <code>GSTABL</code> (<code>TBFEG4</code>) and the product code, or use the default from <code>BICONT</code> (<code>BCFRGL</code>).</li> <li>Write (<code>ADDT</code>) or update (<code>UPDT</code>) <code>APTRAN</code> with fields like company number, entry number, vendor, freight G/L, description, order, SRN, product code, container code, amount, and discount.</li> </ul> </li> <li> <p>In the <code>GETFRT</code> subroutine:</p> <ul> <li>Use the miscellaneous G/L number (<code>SMGLNO</code>) as <code>FEGL</code>.</li> <li>Write (<code>ADDTM</code>) or update (<code>UPDTM</code>) <code>APTRAN</code> with similar fields, using <code>FRTAMT</code> for the amount.</li> </ul> </li> <li> <p>Exit:</p> </li> <li>Set the last record indicator (<code>LR</code>) and terminate.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#business-rules","title":"Business Rules","text":"<p>The following business rules govern the processing in both programs:</p> <ol> <li>Freight Allocation:</li> <li>Freight (<code>FRTTOT</code>) is prorated across detail lines based on net gallons (<code>S5NGAL / TTLQTY</code>) or across miscellaneous lines based on freight amounts (<code>CLCAMT / TTLMFT</code>).</li> <li> <p>The last record\u2019s amount is adjusted to ensure the total allocated freight matches <code>FRTTOT</code>.</p> </li> <li> <p>Table Selection:</p> </li> <li>Use <code>SA5FIUD</code> or <code>SA5MOUD</code> for detail records and <code>SA5FIUM</code> or <code>SA5MOUM</code> for miscellaneous records, determined by <code>S@FIMO</code> (<code>F</code> or <code>M</code>).</li> <li> <p>Records are filtered by company, order, SRN, and ship date (within one year of invoice date, <code>S5SHD8 &gt;= CMPDT8</code>).</p> </li> <li> <p>Freight G/L Determination:</p> </li> <li>For detail records with alpha product codes, retrieve <code>FEGL</code> from <code>GSCTUM</code>.</li> <li>For numeric product codes, combine <code>TBFEG4</code> from <code>GSTABL</code> with <code>S5PROD</code>, or use <code>BCFRGL</code> from <code>BICONT</code> if not found.</li> <li> <p>For miscellaneous records, use <code>SMGLNO</code> as <code>FEGL</code>.</p> </li> <li> <p>Record Writing:</p> </li> <li>Write new <code>APTRAN</code> records if no existing record is found (<code>CHAIN APTRAN</code> fails).</li> <li>Update existing <code>APTRAN</code> records if found.</li> <li> <p>Include discounts (<code>DSPC</code>) in <code>APTRAN</code> records.</p> </li> <li> <p>Miscellaneous Records:</p> </li> <li>Process miscellaneous records only if no detail records exist.</li> <li>Only records with <code>SMMSTY = 'F'</code> (freight) and non-zero <code>SMGLNO</code> are used for freight proration.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#differences-in-business-rules","title":"Differences in Business Rules","text":"<ul> <li>S@FIMO and S@DM Handling (JB07):</li> <li>In <code>AP1012</code>, the <code>GETS@</code> subroutine is added to determine <code>S@FIMO</code> and <code>S@DM</code> when they are blank, by checking <code>SA5FIUD</code>, <code>SA5MOUD</code>, <code>SA5FIUM</code>, and <code>SA5MOUM</code> for valid records. This logic is absent in <code>AP1011</code>, implying <code>AP1011</code> assumes <code>S@FIMO</code> and <code>S@DM</code> are always provided.</li> <li>Date of Change JB07:</li> <li><code>AP1011</code>: JB07 dated 07/10/2024.</li> <li><code>AP1012</code>: JB07 dated 04/01/2019, indicating a potential discrepancy in update synchronization, though the logic appears identical.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#tables-used","title":"Tables Used","text":"<p>Both programs use the same tables: - SA5FIUD: Sales detail file (input, 1024 bytes, keyed). - SA5FIUM: Sales miscellaneous file (input, 1024 bytes, keyed). - SA5MOUD: Move detail file (input, 1024 bytes, keyed, added in JB06). - SA5MOUM: Move miscellaneous file (input, 1024 bytes, keyed, added in JB06). - GSTABL: General table for freight G/L number lookup (input, 256 bytes, keyed). - BICONT: Business control file for default freight G/L (input, 256 bytes, keyed). - GSCTUM: Customer table for freight expense G/L (input, 64 bytes, keyed, added in JB02). - APTRAN: A/P transaction file (update in <code>AP1011</code>, update/input in <code>AP1012</code>, 404 bytes, keyed).</p> <p>Difference: - <code>AP1011</code> defines <code>APTRAN</code> with <code>UC</code> (update/create), while <code>AP1012</code> uses <code>UF</code> (update/file). This suggests <code>AP1012</code> may have broader file access capabilities, though the logic uses <code>UC</code>-style operations (write/update).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#external-programs-called","title":"External Programs Called","text":"<ul> <li>Neither program explicitly calls external programs (no <code>CALL</code> statements). All processing is handled via subroutines (<code>GOOD</code>, <code>GETFRT</code>, and <code>MFRTO</code> in both; <code>GETS@</code> in <code>AP1012</code> only).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#summary-of-differences","title":"Summary of Differences","text":"<ol> <li>GETS@ Subroutine:</li> <li>Present in <code>AP1012</code> to handle blank <code>S@FIMO</code> and <code>S@DM</code>, absent in <code>AP1011</code>.</li> <li>File Access Mode:</li> <li><code>APTRAN</code> is <code>UC</code> in <code>AP1011</code> and <code>UF</code> in <code>AP1012</code>.</li> <li>JB07 Date:</li> <li>Different dates for the JB07 change (07/10/2024 in <code>AP1011</code>, 04/01/2019 in <code>AP1012</code>).</li> <li>Field Length Consistency:</li> <li>Both programs updated the <code>AMT</code> array to 11,2 in JB07/JB08, but some commented lines suggest prior inconsistencies (e.g., 7,2 in <code>AP1011</code>).</li> <li>File Definition Syntax:</li> <li><code>AP1011</code> includes <code>EXTK</code> and <code>L14AI</code> in some file definitions, while <code>AP1012</code> uses simpler <code>14AI</code>. This may reflect platform-specific syntax (e.g., RPG/36 vs. RPG IV) but does not affect logic.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP1012/#conclusion","title":"Conclusion","text":"<p>Both programs perform identical core functions with minor differences in handling input parameters (<code>GETS@</code> in <code>AP1012</code>) and file access modes. The presence of <code>GETS@</code> in <code>AP1012</code> makes it more robust for cases where table indicators are not provided. The file header warning about synchronizing changes suggests these differences may be oversights or platform-specific adaptations. Developers should ensure <code>GETS@</code> is added to <code>AP1011</code> or confirm that <code>S@FIMO</code> and <code>S@DM</code> are always provided to maintain consistency.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/","title":"Summary AP125","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#freight-voucher-usecase-ap125-and-ap1012-programs","title":"Freight Voucher Usecase AP125 and AP1012 Programs","text":"<p>The <code>AP125.rpg</code> and <code>AP1012.rpg</code> programs together implement a single primary use case, as they form a cohesive process for creating accounts payable (A/P) voucher transactions from freight invoices. The use case is described below:</p> <ol> <li>Create A/P Voucher Transactions from Freight Invoices:</li> <li>Description: This use case processes freight invoices from the <code>FRCINH</code> or <code>FRCFBH</code> files to generate A/P voucher transactions in the <code>APTRAN</code> file, including header and detail records. It calculates due dates, applies discounts, prorates freight amounts across sales detail or miscellaneous records, and validates general ledger (G/L) accounts and vendor information. The process ensures accurate allocation of freight charges and compliance with payment terms and hold statuses.</li> <li>Inputs: Company code (<code>CO</code>), carrier ID (<code>CAID</code>), invoice number (<code>CAIN</code>), record type (<code>RCD</code>), reference number (<code>RDNO</code>), and sales-related data (order number, shipping reference number, freight total, etc.).</li> <li>Outputs: A/P transaction header and detail records in <code>APTRAN</code>, updated freight invoice records in <code>FRCINH</code> or <code>FRCFBH</code>, marked as processed.</li> <li>Components:<ul> <li><code>AP125.rpg</code>: Handles header creation, vendor validation, due date calculation, and G/L validation, and calls <code>AP1012.rpg</code> for detail line creation.</li> <li><code>AP1012.rpg</code>: Prorates freight amounts across sales detail (<code>SA5FIUD</code>, <code>SA5MOUD</code>) or miscellaneous (<code>SA5FIUM</code>, <code>SA5MOUM</code>) records and creates detail lines in <code>APTRAN</code>.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#function-requirement-create-ap-voucher-transactions-from-freight-invoices","title":"Function Requirement: Create A/P Voucher Transactions from Freight Invoices","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#purpose","title":"Purpose","text":"<p>Automate the creation of accounts payable (A/P) voucher transactions from freight invoices, including header and detail records, by processing invoice data, validating vendor and G/L information, calculating due dates, applying discounts, and prorating freight amounts across sales detail or miscellaneous records.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>CO</code>): 2-digit code identifying the company.</li> <li>Carrier ID (<code>CAID</code>): 6-character identifier for the carrier.</li> <li>Invoice Number (<code>CAIN</code>): 25-character freight invoice number.</li> <li>Record Type (<code>RCD</code>): Indicates invoice source (<code>FRCFBHP4</code> for freight billed balance header, else <code>FRCINHP4</code>).</li> <li>Reference Number (<code>RDNO</code>): Numeric reference number for <code>FRCFBH</code> invoices.</li> <li>Sales Data (via <code>SALES</code> data structure):</li> <li>Order Number (<code>SAORD</code>): 6-digit sales order number.</li> <li>Shipping Reference Number (<code>SASRN#</code>): 3-digit shipping reference number.</li> <li>Freight Total (<code>FRTTOT</code>): Total freight amount to allocate (7.2 digits).</li> <li>Vendor Number (<code>VEND</code>): 5-digit vendor number.</li> <li>Entry Number (<code>ENTNUM</code>): 5-digit A/P entry number.</li> <li>Discount Percentage (<code>DSPC</code>): 4.3-digit discount percentage.</li> <li>Comparison Date (<code>CMPDT8</code>): Invoice date minus one year (8 digits).</li> <li>File Indicator (<code>S@FIMO</code>): <code>F</code> (SA5FI files) or <code>M</code> (SA5MO files).</li> <li>Detail/Misc Indicator (<code>S@DM</code>): <code>D</code> (detail) or <code>M</code> (miscellaneous).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#outputs","title":"Outputs","text":"<ul> <li>A/P Transaction Records: Header and detail records in <code>APTRAN</code> with validated vendor, G/L, and prorated freight amounts.</li> <li>Updated Freight Invoice Records: <code>FRCINH</code> or <code>FRCFBH</code> records marked as processed (<code>FRAPST = 'Y'</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Invoice Data:</li> <li>Access <code>FRCINH</code> (if <code>RCD \u2260 'FRCFBHP4'</code>) or <code>FRCFBH</code> (if <code>RCD = 'FRCFBHP4'</code>) using <code>CO</code>, <code>CAID</code>, <code>CAIN</code>, and <code>RDNO</code>.</li> <li> <p>Extract invoice number (<code>FRCAIN</code>), type (<code>FRINTY</code>), date (<code>FRIYMD</code>), amount (<code>FRINAM - FRFBOA</code>), sales order (<code>FRRDNO</code>), and shipping reference (<code>FRSRN</code>).</p> </li> <li> <p>Validate Company and Generate Entry Number:</p> </li> <li>Retrieve company details (<code>ACAPGL</code>, <code>ACCAGL</code>, <code>ACRTGL</code>, <code>ACNXTE</code>) from <code>APCONT</code> using <code>CO</code>.</li> <li> <p>Assign a new entry number (<code>ENT#</code>) from <code>ACNXTE</code> for new transactions, incrementing and updating <code>ACNXTE</code>.</p> </li> <li> <p>Retrieve Vendor Information:</p> </li> <li>Get vendor number (<code>VYVEND</code>) from <code>APVENY</code> using <code>CO</code> and <code>CAID</code>.</li> <li>Retrieve vendor details (<code>VNVNAM</code>, <code>VNAD1-4</code>, <code>VNHOLD</code>, <code>VNSNGL</code>, <code>VNTERM</code>, <code>VNEXGL</code>) from <code>APVEND</code> using <code>CO</code> and <code>VEND</code>.</li> <li> <p>Set hold description (<code>HLDD</code>) based on hold code (<code>VNHOLD</code>):</p> <ul> <li><code>H</code>: \"VENDOR ON HOLD\"</li> <li><code>A</code>: \"ON HOLD FOR ACH\"</li> <li><code>W</code>: \"ON HOLD FOR WIRE TRANSFER\"</li> <li><code>U</code>: \"ON HOLD FOR UTILITY AUTO-PAYMENT\"</li> </ul> </li> <li> <p>Calculate Due Date:</p> </li> <li>If <code>VNTERM</code> is non-zero, retrieve terms (<code>TBNETD</code>, <code>TBPRXD</code>, <code>TBDISC</code>) from <code>GSTABL</code> (table <code>APTERM</code>).</li> <li>Calculate due date:<ul> <li>For net days (<code>TBNETD</code>): Add <code>TBNETD</code> to invoice date (<code>FRIYMD</code>) using Julian date conversion.</li> <li>For prox days (<code>TBPRXD</code>): Set to <code>TBPRXD</code> day of the next month.</li> <li>Default to invoice date if no terms.</li> </ul> </li> <li> <p>Adjust due date to a non-holiday/non-weekend date using <code>APDATE</code> (<code>ADNED8</code>).</p> </li> <li> <p>Validate G/L Accounts:</p> </li> <li> <p>Validate A/P (<code>APGL</code>), bank (<code>BKGL</code>), and retention (<code>RTGL</code>) accounts against <code>GLMAST</code>, retrieving descriptions.</p> </li> <li> <p>Create A/P Header:</p> </li> <li> <p>Write/update header in <code>APTRAN</code> with invoice, vendor, G/L, due date, hold status, and discount (<code>DSPC</code>) data.</p> </li> <li> <p>Prorate Freight and Create Detail Lines:</p> </li> <li>Call <code>AP1012</code> with <code>SALES</code> data structure to prorate <code>FRTTOT</code> across sales records.</li> <li>For Detail Records (<code>SA5FIUD</code> or <code>SA5MOUD</code>):<ul> <li>Calculate total gallons (<code>TTLQTY</code>) for records with <code>S5SHD8 &gt;= CMPDT8</code>.</li> <li>Prorate freight: <code>AMT = (S5NGAL / TTLQTY) * FRTTOT</code>.</li> <li>Adjust the last record to ensure the sum equals <code>FRTTOT</code>.</li> <li>Retrieve freight G/L (<code>FEGL</code>):</li> <li>If product code (<code>S5PROD</code>) has alpha characters, use <code>CUFEGL</code> from <code>GSCTUM</code>.</li> <li>Else, use <code>TBFEG4</code> from <code>GSTABL</code> (table <code>CNTRPF</code>) with <code>S5PROD</code> appended.</li> <li>Default to <code>BCFRGL</code> from <code>BICONT</code>.</li> <li>Write detail line to <code>APTRAN</code> with <code>FEGL</code>, <code>AMT</code>, <code>DSPC</code>, and description \"XXXXXXXXX XXXX XXX FRTCHG\".</li> </ul> </li> <li> <p>For Miscellaneous Records (<code>SA5FIUM</code> or <code>SA5MOUM</code>):</p> <ul> <li>If no detail records, calculate total miscellaneous freight (<code>TTLMFT</code>) for records with <code>SMMSTY = 'F'</code>, <code>SMGLNO \u2260 0</code>, and <code>SMSHD8 &gt;= CMPDT8</code>.</li> <li>Prorate freight: <code>FRTAMT = (SMMAMT * SMMQTY / TTLMFT) * FRTTOT</code>.</li> <li>Adjust the last record to match <code>FRTTOT</code>.</li> <li>Use <code>SMGLNO</code> as <code>FEGL</code>.</li> <li>Write detail line to <code>APTRAN</code> with <code>FRTAMT</code>, <code>DSPC</code>, and description \"MISC CHARGE\".</li> </ul> </li> <li> <p>Update Freight Invoice:</p> </li> <li>Mark <code>FRCINH</code> or <code>FRCFBH</code> as processed (<code>FRAPST = 'Y'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#business-rules","title":"Business Rules","text":"<ul> <li>Invoice Source: Process <code>FRCINH</code> or <code>FRCFBH</code> based on <code>RCD</code> (<code>FRCFBHP4</code> for freight billed balance).</li> <li>Freight Adjustment: Subtract <code>FRFBOA</code> from <code>FRINAM</code> for invoice amount.</li> <li>Hold Status: Support <code>H</code> (hold), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>U</code> (utility auto-payment) with corresponding descriptions.</li> <li>Due Date: Calculate based on <code>VNTERM</code> (net or prox days) or default to invoice date; adjust for non-holiday/weekend.</li> <li>Discounts: Apply <code>TBDISC</code> from <code>GSTABL</code> to detail lines.</li> <li>Date Restriction: Process sales records with ship date within one year of invoice date (<code>S5SHD8</code> or <code>SMSHD8 &gt;= CMPDT8</code>).</li> <li>Freight Proration:</li> <li>Detail records: Prorate based on net gallons (<code>S5NGAL</code>).</li> <li>Miscellaneous records: Prorate based on <code>SMMAMT * SMMQTY</code> for freight-type records (<code>SMMSTY = 'F'</code>).</li> <li>Ensure total prorated amounts equal <code>FRTTOT</code>.</li> <li>G/L Validation: Validate all G/L accounts against <code>GLMAST</code>; use <code>GSCTUM</code>, <code>GSTABL</code>, or <code>BICONT</code> for freight G/L.</li> <li>Record Selection: Use <code>S@FIMO</code> (<code>F</code> or <code>M</code>) and <code>S@DM</code> (<code>D</code> or <code>M</code>) to select appropriate sales files; determine dynamically if blank.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#calculations","title":"Calculations","text":"<ul> <li>Due Date (Net Days): <code>DUDT = INDT + TBNETD</code> (converted via Julian date).</li> <li>Due Date (Prox Days): <code>DUDT = TBPRXD</code> day of the next month from <code>INDT</code>.</li> <li>Freight Proration (Detail): <code>AMT = (S5NGAL / TTLQTY) * FRTTOT</code>; adjust last record to match <code>FRTTOT</code>.</li> <li>Freight Proration (Misc): <code>FRTAMT = ((SMMAMT * SMMQTY) / TTLMFT) * FRTTOT</code>; adjust last record to match <code>FRTTOT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li>Update: <code>APTRAN</code>, <code>APCONT</code>, <code>FRCINH</code>, <code>FRCFBH</code>.</li> <li>Input: <code>APVEND</code>, <code>APVENY</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>APDATE</code>, <code>SA5FIUD</code>, <code>SA5FIUM</code>, <code>SA5MOUD</code>, <code>SA5MOUM</code>, <code>BICONT</code>, <code>GSCTUM</code>.</li> <li>External Program: <code>AP1012</code> (called by <code>AP125</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#assumptions","title":"Assumptions","text":"<ul> <li>Input data is valid and exists in the respective files.</li> <li><code>APTRAN</code> can accommodate new or updated records without conflicts.</li> <li>Sales records are available within the one-year date range.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP100%20OCL%20Voucher%20Entry/AP125%20ARGLMS/Summary%20AP125/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid company, vendor, or G/L accounts: Skip record creation and log errors (via indicators).</li> <li>No matching sales records: Skip detail line creation.</li> <li>Invalid dates: Reject and log errors.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/","title":"AP105 Call Stack Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#use-cases-implemented-by-the-program-call-stack","title":"Use Cases Implemented by the Program Call Stack","text":"<p>The call stack consists of the following programs: - AP105PCL.clp (IBM i CLP): Entry point, sets up file overrides and calls other programs. - AP105P.rpg (IBM i RPG): Validates A/P SOGAS ACH payment data and generates error reports. - AP105.ocl36 (System/36 OCL): Manages file setup and calls System/36 programs. - AP105.rpg36 (System/36 RPG): Processes A/P voucher entry and creates transaction records. - AP105A (System/36 program, not provided): Copies data to a history file.</p> <p>Based on the analysis of these programs, the primary use case implemented by this call stack is:</p> <ol> <li>Validate and Process A/P SOGAS ACH Payment Vouchers:</li> <li>This use case involves validating ACH payment data from an upload file, ensuring owners and vendors exist, adjusting due dates to avoid holidays/weekends, creating A/P voucher transactions, applying hold status based on vendor settings, and archiving processed data to a history file.</li> </ol> <p>No additional distinct use cases are evident, as the programs work together to achieve this single, cohesive process.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-document-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements Document: Process A/P SOGAS ACH Payment Vouchers","text":"<p>Document Title: Process A/P SOGAS ACH Payment Vouchers Artifact ID: 7a8b9c0d-e29b-41d4-a716-446655440001 Content Type: text/markdown</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#function-requirements-process-ap-sogas-ach-payment-vouchers","title":"Function Requirements: Process A/P SOGAS ACH Payment Vouchers","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#purpose","title":"Purpose","text":"<p>To validate A/P SOGAS ACH payment data, create voucher transactions, adjust due dates, apply vendor hold status, and archive processed data without requiring interactive screen input.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#inputs","title":"Inputs","text":"<ul> <li>File Group Prefix (FGRP): 1-character string to prefix file names (e.g., environment identifier).</li> <li>Payment Data (APSOGAS): Records containing:</li> <li>Owner Number (ANOWNR, 7 chars)</li> <li>Check Amount (ANCHAM, packed decimal)</li> <li>Check Name (ANCHNM, 7 chars)</li> <li>Due Date (ANDUDT, 10 chars, MMDDYY format)</li> <li>Description (DESC, 13 chars, from LDA)</li> <li>Control Flags (LDA):</li> <li>Canadian Tax Flag (CANTAX, 'Y' or blank)</li> <li>Upload Type (UPTYPE, 'T' or blank)</li> <li>Century Data (Y2KCEN, Y2KCMP for date calculations)</li> <li>Reference Data:</li> <li>APSGACH: Owner-to-vendor mappings (AGOWNR, AGVEND).</li> <li>APVEND: Vendor details (VNVEND, VNHOLD, VNTERM, etc.).</li> <li>APCONT: Control data (ACAPGL, ACCAGL, ACNXTE).</li> <li>APDATE: Non-holiday/weekend due dates (ADDUD8, ADNED8).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Transaction File (APTRAN): Header and detail records for A/P vouchers.</li> <li>History File (APSOGSH): Archived payment data.</li> <li>Error Report (LIST132): Validation errors (owner/vendor not found, counts).</li> <li>Updated Control File (APCONT): Updated next entry number (ACNXTE).</li> <li>Local Data Area (LDA): Updated with error flag (ERRORS = 'Y' or blank).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#process-steps-pseudocode-summary","title":"Process Steps (Pseudocode Summary)","text":"<ol> <li>Initialize:</li> <li>Construct file names: APSOGAS = FGRP + 'APSOGAS', APSGACH = FGRP + 'APSGACH', etc.</li> <li>Override files to use FGRP-prefixed names.</li> <li>Initialize counters (COUNT, ERRCNT = 0).</li> <li>Set system date/time (SYDYMD = YYYYMMDD).</li> <li>If CANTAX = 'Y', set CanadianTaxFlag = true.</li> <li>If UPTYPE = 'T', set UploadTypeFlag = true.</li> <li> <p>If !CanadianTaxFlag &amp;&amp; !UploadTypeFlag, set ERRORS = 'Y', exit.</p> </li> <li> <p>Validate Payment Data:</p> </li> <li> <p>For each APSOGAS record:</p> <ul> <li>Chain APSGACH with ANOWNR:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>Chain APVEND with AGVEND from APSGACH:</li> <li>If not found, increment ERRCNT, set ERRORS = 'Y', write error to LIST132, skip.</li> <li>If VNHOLD = 'H', set HoldFlag = true.</li> </ul> </li> <li> <p>Adjust Due Date:</p> </li> <li>Convert ANDUDT to DUDT8 (YYYYMMDD).</li> <li> <p>Chain APDATE with DUDT8:</p> <ul> <li>If found, replace DUDT8 with ADNED8 (non-holiday/weekend date).</li> </ul> </li> <li> <p>Create Voucher:</p> </li> <li>Retrieve ACAPGL (A/P GL), ACCAGL (Bank GL), ACNXTE (next entry) from APCONT.</li> <li>If ENT# = 0, set ENT# = ACNXTE, increment ACNXTE.</li> <li>If ENT# \u2265 99999, reset ACNXTE = 1.</li> <li>Write APTRAN header:<ul> <li>Fields: 'A', '10', ENT#, VNVEND, ANCHNM, DUDT8, HoldFlag ? 'H' : 'A', etc.</li> </ul> </li> <li>Write APTRAN detail:<ul> <li>Fields: '10', ENT#, NXLINE, VNVEND, EXGL (CANTAX ? 12010009 : 12010008), ANCHAM, etc.</li> </ul> </li> <li> <p>Increment NXLINE, ENT#.</p> </li> <li> <p>Archive Data:</p> </li> <li> <p>Copy APSOGAS record to APSOGSH with user ID and workstation ID.</p> </li> <li> <p>Clean Up:</p> </li> <li>Update APCONT with new ACNXTE.</li> <li>Delete file overrides.</li> <li>Clear LDA (positions 1\u2013512).</li> <li>If ERRORS = 'Y', exit; else continue.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#business-requirements","title":"Business Requirements","text":"<ul> <li>Dynamic File Naming: Use FGRP to prefix file names for environment flexibility.</li> <li>Validation:</li> <li>ANOWNR must exist in APSGACH.</li> <li>AGVEND must exist in APVEND.</li> <li>Log errors to LIST132 if validations fail.</li> <li>Due Date Adjustment: Replace due date with non-holiday/weekend date from APDATE.</li> <li>Hold Status: If VNHOLD = 'H', mark voucher as 'H' with 'VENDOR ON HOLD'; else 'A' with 'ON HOLD FOR ACH'.</li> <li>GL Assignment: Use 12010009 for Canadian tax (CANTAX = 'Y'); else 12010008.</li> <li>Entry Number Management: Ensure unique ENT# from ACNXTE, reset at 99999.</li> <li>Archiving: Copy processed APSOGAS records to APSOGSH with audit data (user, workstation).</li> <li>Error Handling: Set ERRORS = 'Y' in LDA for invalid CANTAX/UPTYPE or validation failures, skip further processing.</li> <li>Y2K Compliance: Adjust dates using Y2KCEN/Y2KCMP for century correctness.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#constraints","title":"Constraints","text":"<ul> <li>No interactive screen input; process all data programmatically.</li> <li>Files are shared (DISP-SHR) for concurrent access.</li> <li>APTRAN is extended by 100 records.</li> <li>All files use first member (*FIRST).</li> <li>Century handling assumes Y2KCEN = 19, Y2KCMP = 80.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20Call%20Stack%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (APSOGAS, APSGACH, APVEND, APCONT, APDATE) are populated and accessible.</li> <li>APSOGSH is available for archiving.</li> <li>LDA is initialized with valid CANTAX, UPTYPE, Y2KCEN, Y2KCMP values.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/","title":"AP105 OCL","text":"<p>Let\u2019s analyze the provided System/36 OCL (Operation Control Language) program <code>AP105.ocl36.txt</code>, which is called by the CLP program <code>AP105PCL.clp</code> via the <code>STRS36PRC</code> command. This program is part of the A/P SOGAS ACH payment processing system and runs in a System/36 environment. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#process-steps","title":"Process Steps","text":"<p>The OCL program <code>AP105.ocl36</code> performs the following steps:</p> <ol> <li>Clear and Build Temporary Files:</li> <li>Checks if the file <code>?9?APTR?WS?</code> exists:<ul> <li>If it exists, clears the physical file using <code>CLRPFM ?9?APTR?WS?</code>.</li> </ul> </li> <li>If it does not exist, builds a new file <code>?9?APTR?WS?</code> with:<ul> <li>Type: Indexed (<code>I</code>)</li> <li>Initial records: 500</li> <li>Record length: 404 bytes</li> <li>Reserved records: 2</li> <li>Key length: 10 bytes</li> </ul> </li> <li> <p>If the index file <code>?9?APTX?WS?</code> does not exist, builds an index for <code>?9?APTR?WS?</code> with:</p> <ul> <li>Key length: 2 bytes</li> <li>Alternate key at position 12, length 5</li> <li>Alternate key at position 385, length 20</li> </ul> </li> <li> <p>Load and Run Program AP105:</p> </li> <li>Loads the program <code>AP105</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>) and dynamic labeling based on the <code>?9?</code> parameter (likely the <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSGACH</code> labeled as <code>?9?APSGACH</code></li> <li><code>APTRAN</code> labeled as <code>?9?APTR?WS?</code> with an extension of 100 records</li> <li><code>APCONT</code> labeled as <code>?9?APCONT</code></li> <li><code>APVEND</code> labeled as <code>?9?APVEND</code></li> <li><code>GSTABL</code> labeled as <code>?9?GSTABL</code></li> <li><code>APDATE</code> labeled as <code>?9?APDATE</code></li> </ul> </li> <li> <p>Executes the <code>AP105</code> program (<code>RUN</code>).</p> </li> <li> <p>Create and Copy to History Table:</p> </li> <li>Sets local data:<ul> <li>At offset 400, stores the user ID (<code>?USER?</code>).</li> <li>At offset 410, stores the workstation ID (<code>?WS?</code>).</li> </ul> </li> <li>Loads the program <code>AP105A</code>.</li> <li>Declares the following files with shared access (<code>DISP-SHR</code>):<ul> <li><code>APSOGAS</code> labeled as <code>?9?APSOGAS</code></li> <li><code>APSOGSH</code> labeled as <code>?9?APSOGSH</code> (likely a history file)</li> </ul> </li> <li> <p>Executes the <code>AP105A</code> program (<code>RUN</code>).</p> </li> <li> <p>Clear Local Data:</p> </li> <li>Clears all local data (<code>LOCAL BLANK-*ALL</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Labeling:</li> <li> <p>File names are dynamically constructed using the <code>?9?</code> parameter (substituted with <code>&amp;P$FGRP</code> from <code>AP105PCL.clp</code>), allowing the program to work with different file groups or environments.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Ensures the temporary file <code>?9?APTR?WS?</code> is cleared if it exists or created if it does not, with a predefined structure (500 records, 404 bytes, 10-byte key).</li> <li> <p>Builds an index file <code>?9?APTX?WS?</code> for efficient access to <code>?9?APTR?WS?</code> if needed.</p> </li> <li> <p>File Sharing:</p> </li> <li> <p>All files are opened with shared access (<code>DISP-SHR</code>), allowing concurrent access by other processes or users.</p> </li> <li> <p>History Tracking:</p> </li> <li> <p>The program copies data from <code>APSOGAS</code> to a history file <code>APSOGSH</code> using <code>AP105A</code>_`, indicating that processed payment data is archived for historical or audit purposes.</p> </li> <li> <p>User and Workstation Tracking:</p> </li> <li> <p>Stores the user ID and workstation ID in local data (offsets 400 and 410) for auditing or logging purposes during the history copy process.</p> </li> <li> <p>File Extension:</p> </li> <li>Extends the <code>APTRAN</code> file by 100 records, ensuring sufficient space for transaction data during processing.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Labeled as <code>?9?APSOGAS</code> (e.g., <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Contains A/P SOGAS ACH payment data (likely source data for voucher entry/editing).</p> </li> <li> <p>APSGACH:</p> </li> <li>Labeled as <code>?9?APSGACH</code>.</li> <li> <p>Contains ACH-related data, likely for owner or vendor validation.</p> </li> <li> <p>APTRAN:</p> </li> <li>Labeled as <code>?9?APTR?WS?</code>.</li> <li> <p>Temporary transaction file, cleared or built with 500 records, 404 bytes, and a 10-byte key. Extended by 100 records during processing.</p> </li> <li> <p>APTX:</p> </li> <li>Labeled as <code>?9?APTX?WS?</code>.</li> <li> <p>Index file for <code>APTRAN</code>, with keys at positions 12 (5 bytes) and 385 (20 bytes).</p> </li> <li> <p>APCONT:</p> </li> <li>Labeled as <code>?9?APCONT</code>.</li> <li> <p>Likely contains control or configuration data for A/P processing.</p> </li> <li> <p>APVEND:</p> </li> <li>Labeled as <code>?9?APVEND</code>.</li> <li> <p>Vendor master file containing vendor details.</p> </li> <li> <p>GSTABL:</p> </li> <li>Labeled as <code>?9?GSTABL</code>.</li> <li> <p>Likely a general system table containing configuration or reference data.</p> </li> <li> <p>APDATE:</p> </li> <li>Labeled as <code>?9?APDATE</code>.</li> <li> <p>Likely contains date-related data for A/P processing (e.g., payment or due dates).</p> </li> <li> <p>APSOGSH:</p> </li> <li>Labeled as <code>?9?APSOGSH</code>.</li> <li>History file for archiving processed <code>APSOGAS</code> data.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program invokes the following external programs:</p> <ol> <li>AP105:</li> <li>Loaded and executed with <code>LOAD AP105</code> and <code>RUN</code>.</li> <li> <p>Processes A/P voucher entry and editing for SOGAS ACH payment creation, using the files <code>APSOGAS</code>, <code>APSGACH</code>, <code>APTRAN</code>, <code>APCONT</code>, <code>APVEND</code>, <code>GSTABL</code>, and <code>APDATE</code>.</p> </li> <li> <p>AP105A:</p> </li> <li>Loaded and executed with <code>LOAD AP105A</code> and <code>RUN</code>.</li> <li>Copies data from <code>APSOGAS</code> to the history file <code>APSOGSH</code>, likely for audit or record-keeping purposes.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: Clear or build temporary files (<code>APTRAN</code>, <code>APTX</code>), load and run <code>AP105</code> for voucher entry/editing, set user/workstation data, load and run <code>AP105A</code> to copy to history file, and clear local data.</li> <li>Business Rules: Dynamic file naming with <code>?9?</code> parameter, shared file access, temporary file management, history tracking, and user/workstation logging.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (ACH data), <code>APTRAN</code> (temporary transactions), <code>APTX</code> (index for <code>APTRAN</code>), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>GSTABL</code> (system table), <code>APDATE</code> (date data), <code>APSOGSH</code> (history file).</li> <li>External Programs Called: <code>AP105</code> (voucher entry/editing), <code>AP105A</code> (history copy).</li> </ul> <p>This OCL program manages the file setup and execution of A/P voucher processing and archiving for SOGAS ACH payments in a System/36 environment, integrating with the IBM i system via dynamic file naming.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/","title":"AP105 RPG","text":"<p>Let\u2019s analyze the provided System/36 RPG program <code>AP105.rpg36</code>, which is called by the OCL program <code>AP105.ocl36</code> via the <code>STRS36PRC</code> command in the CLP program <code>AP105PCL.clp</code>. This program is part of the A/P SOGAS ACH payment processing system, specifically for voucher entry and editing. Below, I\u2019ll outline the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105.rpg36</code> performs the following steps:</p> <ol> <li>File and Data Structure Declarations:</li> <li>Defines files:<ul> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APTRAN</code>: Update file with keyed access (404 bytes, 10-byte key, disk).</li> <li><code>APCONT</code>: Update file with keyed access (256 bytes, 2-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>APDATE</code>: Input file with keyed access (19 bytes, 10-byte key, disk).</li> </ul> </li> <li> <p>Defines data structures:</p> <ul> <li><code>CKDATE</code> (6 bytes) with subfields <code>CKDMM</code> (month), <code>CKDDD</code> (day), <code>CKDYY</code> (year).</li> <li>User Data Structure (UDS) for Local Data Area (LDA) with fields:</li> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>LDAWT</code> (positions 198\u2013199, wire transfer flag)</li> <li><code>Y2KCEN</code> (positions 509\u2013510, century, e.g., 19 for 1900s)</li> <li><code>Y2KCMP</code> (positions 511\u2013512, comparison year, e.g., 80)</li> </ul> </li> <li> <p>Initialization:</p> </li> <li>Initializes variables:<ul> <li><code>Z5</code> and <code>Z3</code> (5- and 3-digit numerics) to 0.</li> <li><code>MSG</code> and <code>MSG2</code> (40-character message fields) to blanks.</li> <li><code>PTYP</code> (process type) to 'SOGAS '.</li> <li>Clears indicators <code>50</code>, <code>51</code>, <code>53</code>, <code>60</code>, <code>61</code>, <code>55</code>, and <code>91</code>.</li> </ul> </li> <li> <p>If indicator <code>09</code> is off:</p> <ul> <li>Clears <code>TERMKY</code> (12 characters) and sets it to 'APTERM'.</li> <li>Clears <code>GSCKEY</code> (12 characters).</li> <li>Sets <code>POKEY</code> (11 characters) to '000'.</li> <li>Captures system time (<code>TIMDAT</code>, 12 digits) and extracts:</li> <li><code>SYTIME</code> (6-digit time).</li> <li><code>SYDATE</code> (6-digit date).</li> <li><code>SYDYMD</code> (YYYYMMDD format) by multiplying <code>SYDATE</code> by 10000.01.</li> <li><code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>Sets indicator <code>09</code> on.</li> </ul> </li> <li> <p>Retrieve Control Data:</p> </li> <li>Chains to <code>APCONT</code> using a hardcoded key <code>10</code> (indicator <code>50</code> on if not found).</li> <li>Sets <code>APGL</code> (A/P GL number) from <code>ACAPGL</code>.</li> <li> <p>Sets <code>BKGL</code> (bank GL number) from <code>ACCAGL</code>.</p> </li> <li> <p>Prepare Entry Number:</p> </li> <li>Builds a company entry key <code>COENT</code> (7 characters) by combining '10' and <code>ENT#</code> (entry number).</li> <li> <p>Sets <code>CHKAMT</code> (11.2 digits) to <code>ANCHAM</code> (check amount from <code>APSOGAS</code>).</p> </li> <li> <p>Process Dates and Invoice Data:</p> </li> <li>Builds invoice and due dates:<ul> <li>Constructs <code>YMD6</code> (6 digits) from <code>DUDMM</code> (month), <code>DUDDD</code> (day), and <code>DUDYY</code> (year) from <code>APSOGAS</code>.</li> <li>Converts system date <code>SYDYMD</code> to <code>MMDDYY</code> format (6 digits) by multiplying by 100.0001.</li> <li>Sets <code>INDT</code> (invoice date) to <code>MMDDYY</code>.</li> <li>Sets invoice number <code>INV#</code> to <code>ANCHNM</code> (check name) or <code>DESC</code> (description from LDA).</li> </ul> </li> <li>Validates invoice date (<code>INDT</code>):<ul> <li>Converts to <code>IYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts century <code>IYY</code> (2 digits).</li> <li>If <code>IYY</code> &gt;= <code>Y2KCMP</code> (e.g., 80), sets <code>ICN</code> (century) to <code>Y2KCEN</code> (e.g., 19); otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>INDT8</code> (8-digit date) using <code>ICN</code> and <code>IYMD</code>.</li> <li>Subtracts 1 year from <code>INDT8</code> to get <code>CMPDT8</code>.</li> </ul> </li> <li> <p>Validates due date (<code>DUDT</code>):</p> <ul> <li>Converts <code>YMD6</code> to <code>DUDT</code> (MMDDYY) by multiplying by 100.0001.</li> <li>Extracts century <code>DYY</code> (2 digits).</li> <li>If <code>DYY</code> &gt;= <code>Y2KCMP</code>, sets <code>DCN</code> to <code>Y2KCEN</code>; otherwise, adds 1 to <code>Y2KCEN</code>.</li> <li>Builds <code>DUDT8</code> (8-digit date) using <code>DCN</code> and <code>YMD6</code>.</li> <li>Chains to <code>APDATE</code> using <code>DUDT8</code> as the key (<code>DATEKY</code>).</li> <li>If found (indicator <code>92</code> off), replaces <code>DUDT8</code> and <code>DUDT</code> with <code>ADNED8</code> (non-holiday/weekend due date from <code>APDATE</code>).</li> </ul> </li> <li> <p>Validate Vendor:</p> </li> <li>Chains to <code>APSGACH</code> using <code>ANOWNR</code> (owner number from <code>APSOGAS</code>) (indicator <code>99</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, builds <code>VNKEY</code> (7 characters) using '10' and <code>AGVEND</code> (vendor number from <code>APSGACH</code>).</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code> (indicator <code>53</code> on if not found).</li> <li>If not found, jumps to <code>SKIP1</code> tag.</li> <li>If found, moves vendor data to fields:<ul> <li><code>VNAM</code> (vendor name), <code>VAD1\u2013VAD4</code> (address lines).</li> </ul> </li> <li> <p>If <code>VNHOLD</code> = 'H', sets indicator <code>55</code> on (vendor on hold).</p> </li> <li> <p>Add Transaction Header:</p> </li> <li>Calls subroutine <code>HDRADD</code>:<ul> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (entry key) (indicator <code>95</code> on if found).</li> <li>Sets indicator <code>70</code> on, writes header record (<code>EXCPTHEADER</code>), and sets <code>70</code> off.</li> </ul> </li> <li>Increments <code>NXLINE</code> (next line number, 3 digits) by 1.</li> <li>Writes detail record (<code>EXCPTDETAIL</code>).</li> <li> <p>Increments <code>ENT#</code> (entry number).</p> </li> <li> <p>Check and Update Entry Number:</p> </li> <li>If <code>ENT#</code> = 0 (indicator <code>60</code> on):<ul> <li>Builds <code>KEYENT</code> (10 characters) from <code>COENT</code> or '000' if not set.</li> <li>Chains to <code>APTRAN</code> using <code>KEYENT</code> (indicator <code>51</code> on if found).</li> <li>If found, writes <code>RELAPC</code> exception to release <code>APCONT</code> and jumps to <code>ENDS1</code>.</li> </ul> </li> <li> <p>If <code>ENT#</code> \u2260 0:</p> <ul> <li>Sets <code>RECSTS</code> to 'ADDNEW'.</li> <li>Sets <code>ENT#</code> to <code>ACNXTE</code> (next entry number from <code>APCONT</code>).</li> <li>Increments <code>ACNXTE</code> and <code>ENT#</code> unless <code>ENT#</code> \u2265 99999 (indicator <code>61</code> on), then resets <code>ACNXTE</code> to 1.</li> <li>Updates <code>COENT</code> with <code>ENT#</code>.</li> <li>Writes <code>APCONT</code> update (<code>EXCPT</code> with indicator <code>79</code>) and clears <code>79</code>.</li> </ul> </li> <li> <p>Initialize Fields:</p> </li> <li> <p>Clears or initializes fields for the next record:</p> <ul> <li><code>CNVO</code>, <code>PPCK</code>, <code>PCKD</code>, <code>IAMT</code>, <code>RTGL</code>, <code>RTPC</code>, <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>SVDSPC</code>, <code>POSQ</code>, <code>PRAM</code>, <code>FRAM</code>, <code>SVLNGL</code>, <code>GALN</code>, <code>RCPT</code>, <code>JQTY</code>, <code>AMT</code>, <code>DISC</code> (numeric fields to 0).</li> <li><code>SNGL</code>, <code>HOLD</code>, <code>HLDD</code>, <code>RTGLNM</code>, <code>DDES</code>, <code>EXGLNM</code>, <code>JOB#</code>, <code>CTYP</code>, <code>ITEM</code>, <code>CAID</code> (character fields to blanks).</li> <li><code>CLCD</code> to 'C' (open/closed status).</li> <li><code>DSPC</code> to 0 if <code>SVDSPC</code> = 0.</li> <li>Sets <code>EXGL</code> (expense GL) to 12010008 (if <code>CANTAX</code> \u2260 'Y') or 12010009 (if <code>CANTAX</code> = 'Y').</li> </ul> </li> <li> <p>Output Records:</p> <ul> <li>Writes to <code>APTRAN</code>:</li> <li>Header Record (<code>EXCPTHEADER</code>):<ul> <li>Record type 'A', company '10', <code>ENT#</code>, <code>Z3</code>, <code>VNVEND</code>, <code>CNVO</code>, <code>APGL</code>, <code>ANCHNM</code>, <code>INV#</code>, <code>DUDT</code> (twice), <code>SNGL</code>, hold status ('A' or 'H' based on <code>VNHOLD</code>), hold description, <code>PPCK</code>, <code>VNAM</code>, <code>VAD1\u2013VAD4</code>, <code>BKGL</code>, <code>CHKAMT</code>, <code>RTPC</code>, <code>ATRTGL</code>, <code>DUDT8</code> (twice), <code>FRTL</code>, <code>SORN</code>, <code>SSRN</code>, <code>CAID</code>, <code>VNTERM</code>, <code>PTYP</code>, <code>INV#</code>.</li> </ul> </li> <li>Detail Record (<code>EXCPTDETAIL</code>):<ul> <li><code>DDEL</code>, company '10', <code>ENT#</code>, <code>NXLINE</code>, <code>VNVEND</code>, expense company '10', <code>EXGL</code> (12010008 or 12010009), <code>INV#</code>, <code>CHKAMT</code>, <code>DISC</code>, <code>DSPC</code>, <code>ITEM</code>, <code>LNQTY</code>, <code>JOB#</code>, <code>CTYP</code>, <code>JQTY</code>, <code>PONO</code>, <code>GALN</code>, <code>RCPT</code>, <code>CLCD</code> ('C'), <code>POSQ</code>, <code>CHKAMT</code>, <code>FRAM</code>.</li> </ul> </li> <li>Updates <code>APCONT</code>:</li> <li>Updates <code>ACNXTE</code> (next entry number) if indicator <code>79</code> is on.</li> <li>Releases <code>APCONT</code> via <code>RELAPC</code> exception.</li> </ul> </li> <li> <p>Loop Control:</p> <ul> <li>Jumps to <code>SKIP1</code> tag on validation failures (e.g., <code>APSGACH</code> or <code>APVEND</code> not found).</li> <li>Continues processing <code>APSOGAS</code> records until the end of the file.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Dynamic File Access:</li> <li> <p>Uses files dynamically labeled with a prefix (e.g., <code>?9?</code> from <code>AP105.ocl36</code>, derived from <code>&amp;P$FGRP</code> in <code>AP105PCL.clp</code>), supporting multiple file groups or environments.</p> </li> <li> <p>Vendor and Owner Validation:</p> </li> <li>Validates that <code>ANOWNR</code> from <code>APSOGAS</code> exists in <code>APSGACH</code> (indicator <code>99</code>).</li> <li>Validates that <code>AGVEND</code> from <code>APSGACH</code> exists in <code>APVEND</code> (indicator <code>53</code>).</li> <li> <p>Skips processing if either validation fails.</p> </li> <li> <p>Hold Status Handling:</p> </li> <li> <p>If <code>VNHOLD</code> = 'H' in <code>APVEND</code>, sets indicator <code>55</code> and marks the transaction header with 'H' and 'VENDOR ON HOLD' in the hold description; otherwise, uses 'A' and 'ON HOLD FOR ACH'.</p> </li> <li> <p>Due Date Adjustment:</p> </li> <li> <p>Replaces the due date (<code>DUDT8</code>) with a non-holiday/non-weekend date from <code>APDATE</code> (<code>ADNED8</code>) if found, ensuring payments are scheduled on valid business days.</p> </li> <li> <p>Invoice Description:</p> </li> <li> <p>Copies the invoice description from <code>DESC</code> (LDA) or <code>ANCHNM</code> (check name) to <code>INV#</code> for new records.</p> </li> <li> <p>Entry Number Management:</p> </li> <li>Manages entry numbers (<code>ENT#</code>, <code>ACNXTE</code>) to ensure unique transaction identifiers, resetting to 1 if <code>ENT#</code> reaches 99999.</li> <li> <p>Updates <code>APCONT</code> with the next entry number (<code>ACNXTE</code>).</p> </li> <li> <p>Canadian Tax Handling:</p> </li> <li> <p>If <code>CANTAX</code> = 'Y', uses expense GL 12010009; otherwise, uses 12010008.</p> </li> <li> <p>Transaction Structure:</p> </li> <li>Creates header and detail records in <code>APTRAN</code> for each valid <code>APSOGAS</code> record, populating fields like vendor details, GL accounts, amounts, and dates.</li> <li> <p>Ensures detail records are linked to headers via <code>ENT#</code> and <code>NXLINE</code>.</p> </li> <li> <p>Y2K Date Handling:</p> </li> <li>Adjusts dates for century compliance using <code>Y2KCEN</code> and <code>Y2KCMP</code> to determine whether to use the current or next century.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (1\u20137): Owner number.</li> <li><code>ANNAME</code> (8\u201342): Name.</li> <li><code>ANCHNM</code> (43\u201349): Check name.</li> <li><code>ANDATE</code> (50\u201359): Date (subfields: <code>CKDMM</code> 50\u201351, <code>CKDDD</code> 53\u201354, <code>CKDYY</code> 58\u201359).</li> <li><code>ANCHAM</code> (60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (66\u201375): Start date.</li> <li><code>ANENTE</code> (76\u201385): Entry date.</li> <li><code>ANDUDT</code> (86\u201395): Due date (subfields: <code>DUDMM</code> 86\u201387, <code>DUDDD</code> 89\u201390, <code>DUDYY</code> 92\u201393).</li> </ul> </li> <li> <p>Source of payment data for voucher creation.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (1\u20137): Owner number.</li> <li><code>AGVEND</code> (8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> and retrieve <code>AGVEND</code>.</p> </li> <li> <p>APTRAN (Update, Keyed, 404 bytes, 10-byte key):</p> </li> <li>Header Fields:<ul> <li><code>ATHDEL</code> (1): Header delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATAPGL</code> (24\u201331): A/P GL number.</li> <li><code>ATIDES</code> (42\u201366): Invoice description.</li> <li><code>ATINDT</code> (67\u201372): Invoice date.</li> <li><code>ATDUDT</code> (73\u201378): Due date.</li> <li><code>ATSNGL</code> (79): Single check flag.</li> <li><code>ATHOLD</code> (80): Hold flag.</li> <li><code>ATHLDD</code> (81\u2013105): Hold description.</li> <li><code>ATPAID</code> (106): Prepaid flag.</li> <li><code>ATPPCK</code> (107\u2013112): Prepaid check number.</li> <li><code>ATVNAM</code> (113\u2013142): Vendor name.</li> <li><code>ATVAD1\u2013ATVAD4</code> (143\u2013262): Address lines.</li> <li><code>ATBKGL</code> (263\u2013270): Bank GL number.</li> <li><code>ATIAMT</code> (271\u2013281): Invoice amount.</li> <li><code>ATRTGL</code> (282\u2013289): Retention GL.</li> <li><code>ATRTPC</code> (290\u2013295): Retention percentage.</li> <li><code>ATPCKD</code> (296\u2013301): Prepaid check date.</li> <li><code>ATFRTL</code> (326\u2013332): Freight to allocate.</li> <li><code>ATSORN</code> (348\u2013353): Sales order number.</li> <li><code>ATSSRN</code> (354\u2013356): Sales SRN number.</li> <li><code>ATCAID</code> (357\u2013362): Carrier ID.</li> <li><code>ATTERM</code> (363\u2013364): Vendor payment terms.</li> <li><code>ATPTYP</code> (365\u2013370): Process type.</li> <li><code>ATDSDT</code> (371\u2013376): Discount due date.</li> <li><code>ATINV#</code> (385\u2013404): Vendor invoice number.</li> </ul> </li> <li>Detail Fields:<ul> <li><code>ATDDEL</code> (1): Detail delete flag.</li> <li><code>ATENSQ</code> (9\u201311): Entry sequence number.</li> <li><code>ATVEND</code> (12\u201316): Vendor number.</li> <li><code>ATEXCO</code> (18\u201319): Expense company.</li> <li><code>ATEXGL</code> (20\u201327): Expense GL number.</li> <li><code>ATDDES</code> (28\u201352): Detail description.</li> <li><code>ATAMT</code> (53\u201358, packed): Detail line amount.</li> <li><code>ATDISC</code> (59\u201364, packed): Discount.</li> <li><code>ATDSPC</code> (65\u201369): Discount percentage.</li> <li><code>ATITEM</code> (79\u201391): Inventory item number.</li> <li><code>ATQTY</code> (92\u201397, packed): Inventory quantity.</li> <li><code>ATJOB#</code> (100\u2013105): Job number.</li> <li><code>ATCCOD</code> (108\u2013113): Job cost code.</li> <li><code>ATCTYP</code> (114\u2013115): Job cost type.</li> <li><code>ATJQTY</code> (116\u2013119, packed): Job cost quantity.</li> <li><code>ATPONO</code> (120\u2013125): Purchase order number.</li> <li><code>ATGALN</code> (126\u2013129, packed): Gallons.</li> <li><code>ATRCPT</code> (130\u2013136): Receipt number.</li> <li><code>ATCLCD</code> (137): Open/closed status.</li> <li><code>ATPOSQ</code> (138\u2013140): PO line sequence.</li> <li><code>ATPRAM</code> (141\u2013146, packed): Product amount.</li> <li><code>ATFRAM</code> (147\u2013150, packed): Freight amount.</li> </ul> </li> <li> <p>Stores transaction header and detail records.</p> </li> <li> <p>APCONT (Update, Keyed, 256 bytes, 2-byte key):</p> </li> <li>Fields:<ul> <li><code>ACDEL</code> (1): Delete flag.</li> <li><code>ACAPGL</code> (34\u201341): A/P GL number.</li> <li><code>ACCAGL</code> (42\u201349): Cash GL number.</li> <li><code>ACDSGL</code> (50\u201357): Discounts GL number.</li> <li><code>ACNXTE</code> (76\u201380): Next entry number.</li> <li><code>ACJCYN</code> (87): Job cost active flag.</li> <li><code>ACRTGL</code> (88\u201395): Retention GL number.</li> <li><code>ACPOYN</code> (96): PO active flag.</li> <li><code>ACEEGL</code> (97\u2013104): Employee expense GL number.</li> </ul> </li> <li> <p>Stores control data and manages entry numbers.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (1): Record code.</li> <li><code>VNCO</code> (2\u20133): Company number.</li> <li><code>VNVEND</code> (4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (9\u201338): Vendor name.</li> <li><code>VNAD1\u2013VNAD4</code> (39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (240): Hold invoices flag.</li> <li><code>VNSNGL</code> (241): Single check flag.</li> <li><code>VNEXGL</code> (254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (388\u2013390): ACH class.</li> <li><code>VNACOS</code> (391): ACH checking or savings.</li> <li><code>VNARTE</code> (392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate and retrieve vendor details.</p> </li> <li> <p>APDATE (Input, Keyed, 19 bytes, 10-byte key):</p> </li> <li>Fields:<ul> <li><code>ADDEL</code> (1): Delete flag.</li> <li><code>ADCO</code> (2\u20133): Company.</li> <li><code>ADDUD8</code> (4\u201311): Calculated due date.</li> <li><code>ADNED8</code> (12\u201319): New due date (non-holiday/weekend).</li> </ul> </li> <li>Used to adjust due dates to valid business days.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It relies on subroutines (<code>HDRADD</code>) and file operations.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files and data structures, initialize variables, retrieve control data, process dates and invoice numbers, validate vendors, adjust due dates, add header and detail records to <code>APTRAN</code>, manage entry numbers, and update <code>APCONT</code>.</li> <li>Business Rules: Validates owners and vendors, adjusts due dates for holidays/weekends, applies hold status for vendors, manages entry numbers, supports Canadian tax GL accounts, and ensures Y2K-compliant dates.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APTRAN</code> (transaction headers/details), <code>APCONT</code> (control data), <code>APVEND</code> (vendor data), <code>APDATE</code> (due date adjustments).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program processes <code>APSOGAS</code> records to create A/P vouchers in <code>APTRAN</code>, validates data, adjusts dates, and handles vendor hold status, preparing transactions for ACH payment export.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/","title":"AP105P RPG","text":"<p>Let\u2019s analyze the provided RPG program <code>AP105P.rpg</code> to extract the process steps, business rules, tables used, and external programs called. This program is called by the CLP program <code>AP105PCL.clp</code> and is part of the A/P SOGAS ACH payment processing system on IBM i.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#process-steps","title":"Process Steps","text":"<p>The RPG program <code>AP105P.rpg</code> performs the following steps:</p> <ol> <li>File Declarations:</li> <li>Defines the following files:<ul> <li><code>AP105PSC</code>: Workstation file (screen display file).</li> <li><code>APSOGAS</code>: Input primary file (127 bytes, disk).</li> <li><code>APSGACH</code>: Input file with keyed access (64 bytes, 7-byte key, disk).</li> <li><code>APVEND</code>: Input file with keyed access (579 bytes, 7-byte key, disk).</li> <li><code>LIST132</code>: Output printer file (132 bytes).</li> </ul> </li> <li> <p>Defines the User Data Structure (UDS) for Local Data Area (LDA) fields:</p> <ul> <li><code>CANCEL</code> (positions 100\u2013105)</li> <li><code>ERRORS</code> (position 106)</li> <li><code>DESC</code> (positions 107\u2013119)</li> <li><code>CANTAX</code> (position 120, Canadian tax upload flag)</li> <li><code>UPTYPE</code> (position 121, positive/negative dollar values flag)</li> </ul> </li> <li> <p>Parameter Input:</p> </li> <li> <p>Accepts a single 1-character parameter <code>@FGRP</code> via <code>*ENTRY PLIST</code>.</p> </li> <li> <p>Initialization (Indicator 09 Off):</p> </li> <li> <p>If indicator <code>09</code> is off (likely controlled by file status or program logic):</p> <ul> <li>Initializes counters:</li> <li><code>COUNT</code> (5-digit numeric) to 0.</li> <li><code>ERRCNT</code> (5-digit numeric, error count) to 0.</li> <li><code>DUP</code> (5-digit numeric, duplicate count) to 0.</li> <li><code>DATES</code> (5-digit numeric) to 0.</li> <li><code>ERRORS</code> (LDA position 106) to blanks.</li> <li>Captures system time and date:</li> <li>Stores current time/date in <code>TIMDAT</code> (12 digits).</li> <li>Extracts time to <code>SYTIME</code> (6 digits).</li> <li>Extracts date to <code>SYDATE</code> (6 digits).</li> <li>Converts <code>SYDATE</code> to <code>SYDYMD</code> (YYYYMMDD format) by multiplying by 10000.01.</li> <li>Extracts <code>MONTH</code> (2 digits) and <code>YEAR</code> (2 digits) from <code>SYDATE</code>.</li> <li>Sets indicators:</li> <li>Sets indicator <code>09</code> and <code>51</code> on.</li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> on.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> on.</li> <li>If both <code>54</code> and <code>55</code> are off, sets indicator <code>56</code> on and sets <code>ERRORS</code> to 'Y', then turns off indicators <code>50</code> and <code>51</code>.</li> </ul> </li> <li> <p>Increment Counter:</p> </li> <li> <p>Increments <code>COUNT</code> by 1 for each record processed.</p> </li> <li> <p>Validation of <code>APSOGAS</code> Record:</p> </li> <li>Uses <code>ANOWNR</code> (owner number, positions 1\u20137) from <code>APSOGAS</code> to chain (lookup) in <code>APSGACH</code>.</li> <li>If the chain fails (indicator <code>99</code> on, record not found):<ul> <li>Increments <code>ERRCNT</code>.</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Jumps to <code>SKIP</code> tag (bypassing further processing for this record).</li> </ul> </li> <li> <p>If the chain succeeds (indicator <code>99</code> off):</p> <ul> <li>Builds a 7-character key <code>VNKEY</code> by combining a hardcoded '10' with <code>AGVEND</code> (vendor number) from <code>APSGACH</code>.</li> <li>Chains to <code>APVEND</code> using <code>VNKEY</code>.</li> <li>If the chain to <code>APVEND</code> fails (indicator <code>53</code> on, vendor not found):</li> <li>Sets indicator <code>50</code> on, <code>51</code> off.</li> <li>Sets <code>ERRORS</code> to 'Y'.</li> <li>Increments <code>ERRCNT</code>.</li> <li>Writes an exception output (<code>EXCPT</code>) to <code>LIST132</code>.</li> <li>Jumps to <code>SKIP</code> tag.</li> </ul> </li> <li> <p>Clear and Display Screen:</p> </li> <li>If indicator <code>50</code> is off, clears indicator <code>56</code>.</li> <li> <p>Executes <code>EXFMT</code> (write/read) for <code>SCREEN1</code> in the <code>AP105PSC</code> display file.</p> </li> <li> <p>Output to Printer:</p> </li> <li>Writes to <code>LIST132</code> (printer file) with fields:<ul> <li><code>ANOWNR</code> (positions 1\u201310)</li> <li><code>ERRCNT</code> (positions 11\u201317)</li> <li><code>ANNAME</code> (positions 18\u201355)</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Owner Validation:</li> <li> <p>Each <code>APSOGAS</code> record\u2019s <code>ANOWNR</code> must exist in <code>APSGACH</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and processing skips to the next record.</p> </li> <li> <p>Vendor Validation:</p> </li> <li> <p>The vendor number (<code>AGVEND</code>) from <code>APSGACH</code> must exist in <code>APVEND</code>. If not, an error is logged (<code>ERRCNT</code> incremented, <code>ERRORS</code> set to 'Y'), and an exception report is generated.</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>Errors are tracked via <code>ERRCNT</code> and the <code>ERRORS</code> flag in the LDA (position 106). If errors occur, the program may signal to the calling CLP (<code>AP105PCL</code>) to skip further processing (e.g., S/36 procedure <code>AP105</code>).</p> </li> <li> <p>Canadian Tax and Upload Type Checks:</p> </li> <li>If <code>CANTAX</code> = 'Y', sets indicator <code>54</code> to flag Canadian tax-related processing.</li> <li>If <code>UPTYPE</code> = 'T', sets indicator <code>55</code> to flag specific dollar value handling (positive/negative).</li> <li> <p>If neither condition is met (<code>54</code> and <code>55</code> off), sets <code>ERRORS</code> to 'Y' and indicator <code>56</code> on, indicating a validation failure.</p> </li> <li> <p>Dynamic File Processing:</p> </li> <li> <p>The program processes records from <code>APSOGAS</code> and validates against <code>APSGACH</code> and <code>APVEND</code>, ensuring data integrity for A/P SOGAS ACH payments.</p> </li> <li> <p>Reporting:</p> </li> <li>Outputs errors or processing results to a printer file (<code>LIST132</code>) for reporting, including owner number, error count, and name.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables):</p> <ol> <li>APSOGAS (Input Primary, 127 bytes):</li> <li>Fields:<ul> <li><code>ANOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>ANNAME</code> (positions 8\u201342): Name.</li> <li><code>ANCHNM</code> (positions 43\u201349): Check name.</li> <li><code>ANDATE</code> (positions 50\u201359): Date.</li> <li><code>ANCHAM</code> (positions 60\u201365, packed): Check amount.</li> <li><code>ANSTDT</code> (positions 66\u201375): Start date.</li> <li><code>ANENTE</code> (positions 76\u201385): Entry date.</li> <li><code>ANDUDT</code> (positions 86\u201395): Due date.</li> </ul> </li> <li> <p>Used as the primary input file for payment data.</p> </li> <li> <p>APSGACH (Input, Keyed, 64 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>AGOWNR</code> (positions 1\u20137): Owner number.</li> <li><code>AGVEND</code> (positions 8\u201312): Vendor number.</li> </ul> </li> <li> <p>Used to validate <code>ANOWNR</code> from <code>APSOGAS</code>.</p> </li> <li> <p>APVEND (Input, Keyed, 579 bytes, 7-byte key):</p> </li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1): Record code.</li> <li><code>VNCO</code> (positions 2\u20133): Company number.</li> <li><code>VNVEND</code> (positions 4\u20138): Vendor number.</li> <li><code>VNVNAM</code> (positions 9\u201338): Vendor name.</li> <li><code>VNAD1</code> to <code>VNAD4</code> (positions 39\u2013158): Address lines.</li> <li><code>VNHOLD</code> (position 240): Hold invoices flag.</li> <li><code>VNSNGL</code> (position 241): Single check flag.</li> <li><code>VNEXGL</code> (positions 254\u2013261): Expense GL and sub-account.</li> <li><code>VNTERM</code> (positions 262\u2013263): AP terms code.</li> <li><code>VNCAID</code> (positions 294\u2013299): Carrier ID.</li> <li><code>VNPRID</code> (positions 384\u2013387, packed): ADP payroll ID.</li> <li><code>VNACLS</code> (positions 388\u2013390): ACH class.</li> <li><code>VNACOS</code> (position 391): ACH checking or savings.</li> <li><code>VNARTE</code> (positions 392\u2013400): ACH bank routing code.</li> <li><code>VNABK#</code> (positions 401\u2013417): ACH bank account number.</li> </ul> </li> <li> <p>Used to validate vendors associated with <code>AGVEND</code> from <code>APSGACH</code>.</p> </li> <li> <p>LIST132 (Output, Printer, 132 bytes):</p> </li> <li> <p>Used to generate a report with <code>ANOWNR</code>, <code>ERRCNT</code>, and <code>ANNAME</code>.</p> </li> <li> <p>AP105PSC (Workstation, Display File):</p> </li> <li>Contains <code>SCREEN1</code> for interactive display (written and read via <code>EXFMT</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The program does not explicitly call any external programs via <code>CALL</code> or other mechanisms. It interacts with the display file <code>AP105PSC</code> and printer file <code>LIST132</code> but does not invoke other RPG or CL programs.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105P%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare files, initialize counters and LDA, process <code>APSOGAS</code> records, validate against <code>APSGACH</code> and <code>APVEND</code>, handle errors, display screen, and output to printer.</li> <li>Business Rules: Validates owner and vendor numbers, tracks errors in LDA, handles Canadian tax and upload type flags, and generates error reports.</li> <li>Tables Used: <code>APSOGAS</code> (payment data), <code>APSGACH</code> (owner validation), <code>APVEND</code> (vendor details), <code>LIST132</code> (printer output), <code>AP105PSC</code> (display file).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG program validates A/P SOGAS ACH payment records, ensuring owners and vendors exist in the respective files, and reports errors via a printer file and interactive screen.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/","title":"AP105PCL CLP","text":"<p>Let\u2019s analyze the provided AS400 IBM i CLP (Control Language Program) <code>AP105PCL.clp</code> to extract the process steps, business rules, programs called, and tables used.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#process-steps","title":"Process Steps","text":"<p>The program performs the following sequential steps:</p> <ol> <li>Declare Variables:</li> <li>Defines a parameter <code>&amp;P$FGRP</code> (1-character input parameter).</li> <li> <p>Declares character variables:</p> <ul> <li><code>&amp;APSOGAS</code> (10 characters)</li> <li><code>&amp;APSOGASH</code> (10 characters)</li> <li><code>&amp;APSGACH</code> (10 characters)</li> <li><code>&amp;APVEND</code> (10 characters)</li> <li><code>&amp;PARM9</code> (10 characters)</li> </ul> </li> <li> <p>Construct File Names:</p> </li> <li>Concatenates the input parameter <code>&amp;P$FGRP</code> with fixed strings to create file names:<ul> <li><code>&amp;APSOGAS</code> = <code>&amp;P$FGRP</code> + 'APSOGAS'</li> <li><code>&amp;APSOGASH</code> = <code>&amp;P$FGRP</code> + 'APSOGASH'</li> <li><code>&amp;APSGACH</code> = <code>&amp;P$FGRP</code> + 'APSGACH'</li> <li><code>&amp;APVEND</code> = <code>&amp;P$FGRP</code> + 'APVEND'</li> </ul> </li> <li> <p>Constructs a parameter string <code>&amp;PARM9</code> by concatenating ',,,,,,,,' with <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Override Database Files:</p> </li> <li> <p>Overrides the logical files to point to the physical files in the library list (<code>*LIBL</code>):</p> <ul> <li><code>APSOGAS</code> to <code>&amp;APSOGAS</code> (first member)</li> <li><code>APSOGASH</code> to <code>&amp;APSOGASH</code> (first member)</li> <li><code>APSGACH</code> to <code>&amp;APSGACH</code> (first member)</li> <li><code>APVEND</code> to <code>&amp;APVEND</code> (first member)</li> </ul> </li> <li> <p>Call Program:</p> </li> <li> <p>Calls the program <code>AP105P</code>, passing the parameter <code>&amp;P$FGRP</code>.</p> </li> <li> <p>Check Local Data Area (LDA):</p> </li> <li>Checks if position 106 of the LDA (Local Data Area) contains 'Y'.</li> <li> <p>If true:</p> <ul> <li>Clears the LDA (positions 1 to 512) to blanks.</li> <li>Returns (exits the program).</li> </ul> </li> <li> <p>Start S/36 Procedure:</p> </li> <li>If the LDA condition is not met, calls the S/36 procedure <code>AP105</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li> <p>Note: A commented-out line suggests a hardcoded parameter <code>',,,,,,,,G'</code> was previously used.</p> </li> <li> <p>Clean Up:</p> </li> <li>Deletes all file overrides (<code>DLTOVR FILE(*ALL)</code>).</li> <li> <p>Clears the LDA (positions 1 to 512) to blanks.</p> </li> <li> <p>End Program:</p> </li> <li>Ends the program with <code>ENDPGM</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#business-rules","title":"Business Rules","text":"<p>The program includes the following business rules:</p> <ol> <li>Dynamic File Naming:</li> <li> <p>File names are dynamically constructed by prefixing the input parameter <code>&amp;P$FGRP</code> to fixed file suffixes (<code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>). This implies the program supports multiple file groups or environments based on the input parameter.</p> </li> <li> <p>Conditional Logic Based on LDA:</p> </li> <li> <p>If position 106 of the LDA contains 'Y', the program clears the LDA and exits without invoking the S/36 procedure. This suggests that <code>AP105P</code> may set this flag to indicate a condition (e.g., error or completion) that skips further processing.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>The program ensures that file operations use the correct files by overriding them to the dynamically named files in the library list, ensuring flexibility across different file groups or environments.</p> </li> <li> <p>S/36 Compatibility:</p> </li> <li>The use of <code>STRS36PRC</code> indicates compatibility with System/36 procedures, suggesting this program may be part of a legacy system or migration to IBM i.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#programs-called","title":"Programs Called","text":"<p>The program invokes the following:</p> <ol> <li>AP105P:</li> <li>A program called via <code>CALL PGM(AP105P)</code> with the parameter <code>&amp;P$FGRP</code>.</li> <li> <p>Likely an IBM i program that processes A/P SOGAS ACH payments, possibly setting the LDA flag at position 106.</p> </li> <li> <p>AP105:</p> </li> <li>A System/36 procedure called via <code>STRS36PRC PRC(AP105)</code> with the parameter <code>&amp;PARM9</code> (',,,,,,,,' + <code>&amp;P$FGRP</code>).</li> <li>This procedure likely performs additional processing for A/P SOGAS ACH payments in a System/36 environment.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables):</p> <ol> <li>APSOGAS:</li> <li>Overridden to <code>&amp;APSOGAS</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGAS').</li> <li> <p>Likely contains A/P SOGAS ACH payment data.</p> </li> <li> <p>APSOGASH:</p> </li> <li>Overridden to <code>&amp;APSOGASH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSOGASH').</li> <li> <p>Likely a header file or summary data for A/P SOGAS ACH payments.</p> </li> <li> <p>APSGACH:</p> </li> <li>Overridden to <code>&amp;APSGACH</code> (constructed as <code>&amp;P$FGRP</code> + 'APSGACH').</li> <li> <p>Likely contains ACH-specific data for A/P SOGAS payments.</p> </li> <li> <p>APVEND:</p> </li> <li>Overridden to <code>&amp;APVEND</code> (constructed as <code>&amp;P$FGRP</code> + 'APVEND').</li> <li>Likely a vendor master file containing vendor details for A/P payments.</li> </ol> <p>These files are accessed from the library list (<code>*LIBL</code>) and use the first member (<code>*FIRST</code>).</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP105PCL%20CLP%20SOGAS/AP105PCL%20CLP/#summary","title":"Summary","text":"<ul> <li>Process Steps: Declare variables, construct file names, override files, call <code>AP105P</code>, check LDA, call S/36 procedure <code>AP105</code> (if LDA condition not met), clean up overrides, clear LDA, and end.</li> <li>Business Rules: Dynamic file naming based on <code>&amp;P$FGRP</code>, conditional exit based on LDA position 106, file overrides for flexibility, and S/36 compatibility.</li> <li>Programs Called: <code>AP105P</code> (IBM i program), <code>AP105</code> (System/36 procedure).</li> <li>Tables Used: <code>APSOGAS</code>, <code>APSOGASH</code>, <code>APSGACH</code>, <code>APVEND</code>.</li> </ul> <p>This program serves as a wrapper to check and process A/P SOGAS ACH payment files, bridging IBM i and System/36 environments.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/","title":"AP200 OCL","text":"<p>The provided document is an AS/400 Operation Control Language (OCL) procedure (<code>AP200.ocl36.txt</code>) that manages the Purchase Journal for posting voucher transactions in an Accounts Payable (A/P) system. Below, I\u2019ll explain the process steps in a clear, structured manner, breaking down the key operations, checks, and logic flow of the OCL file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#overview","title":"Overview","text":"<p>The <code>AP200</code> OCL procedure automates the posting of A/P voucher or wire transfer transactions to the Purchase Journal. It performs validations, sorts data, updates files, and generates reports. The procedure includes error handling, file management, and integration with other processes (e.g., inventory, job costing). It also supports wire transfer (<code>WT</code>) processing and ensures that certain conditions are met before proceeding.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#1-initial-setup-and-metadata","title":"1. Initial Setup and Metadata","text":"<ul> <li>Comments and Revisions:</li> <li>The file includes metadata about revisions, such as:<ul> <li><code>JB01</code> (09/14/14, Jan Beccari): Added posting to inventory transaction holding (<code>INTZH</code>).</li> <li><code>JK01</code> (03/27/15, Jimmy Krajacic): Added support for carrier freight invoices (<code>FRCINV</code>) when a voucher is deleted.</li> <li><code>JB</code> (06/07/21): Prevents A/P voucher posting during inventory beginning-of-week processing (<code>INTSZZ</code>).</li> </ul> </li> <li>Wire Transfer Check:</li> <li>The procedure checks if the user selected the \"Wire Transfer\" journal option (<code>WT</code>).<ul> <li>If <code>?3?/WT</code>, sets <code>P20='APWT?WS?'</code> (wire transfer file).</li> <li>Otherwise, sets <code>P20='APTR?WS?'</code> (standard transaction file).</li> </ul> </li> <li>Switch Initialization:</li> <li>Initializes <code>SWITCH</code> to <code>00000000</code> for conditional logic.</li> <li>Sets <code>SWITCH 10000000</code> if specific file conditions are met (e.g., <code>DATAF1-?9??20?</code> or <code>?F'A,?9??20?'?/00000000</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#2-pre-posting-validations","title":"2. Pre-Posting Validations","text":"<p>The procedure performs several checks to ensure the system is in a valid state for posting:</p> <ul> <li>No Voucher or Wire Transaction File:</li> <li> <p>If <code>SWITCH1-1</code> (indicating no A/P voucher or wire transaction file exists):</p> <ul> <li>Displays: \"NO A/P VOUCHER OR WIRE TRANSACTION FILE TO POST\".</li> <li>Prompts user to press <code>0, ENTER</code> to cancel.</li> <li>Jumps to <code>END</code>.</li> </ul> </li> <li> <p>Payment Cycle Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?APPT?WS?</code> (payment cycle file exists):</p> <ul> <li>Deletes <code>?9?APPT?WS?,F1</code> if conditions allow.</li> <li>Displays a warning: \"THE PAYMENT CYCLE MUST BE ENDED FROM THIS WORKSTATION BEFORE THIS PURCHASE JOURNAL CAN BE RUN\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Concurrent Purchase Register:</p> </li> <li> <p>If <code>ACTIVE-AP200</code> (another A/P purchase register is running):</p> <ul> <li>Displays: \"AN A/P PURCHASE REGISTER IS ALREADY IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Inventory Beginning-of-Week Conflict:</p> </li> <li> <p>If <code>DATAF1-?9?INTSZZ</code> (inventory beginning-of-week process is active):</p> <ul> <li>Displays: \"INVENTORY BEGINNING OF WEEK IS IN PROGRESS. PLEASE TRY AGAIN IN A FEW MINUTES\".</li> <li>Prompts user to cancel and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Voucher Batch Errors:</p> </li> <li>Checks <code>?9?APSTAT</code> for errors in the voucher table (from <code>AP110</code>).</li> <li>If <code>?L'231,3'?/YES</code> (errors exist):<ul> <li>Displays: \"ERRORS EXIST IN THE BATCH. PLEASE RETURN TO THE BATCH AND CORRECT THE ERRORS\".</li> <li>Pauses and jumps to <code>END</code>.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#3-file-and-variable-initialization","title":"3. File and Variable Initialization","text":"<ul> <li>Clear Variables:</li> <li>Sets <code>LOCAL BLANK-*ALL</code> to clear local variables.</li> <li>Set Journal Type:</li> <li>If <code>?3?/WT</code>, sets <code>OFFSET-198,DATA-'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets <code>OFFSET-198,DATA-'                       '</code>.</li> <li>Set Workstation:</li> <li>Sets <code>OFFSET-300,DATA-'?WS?'</code> (workstation ID).</li> <li>Create Temporary File:</li> <li>Builds <code>?9?APPT?WS?</code> (payment transaction file) with 200 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#4-load-and-run-initial-program-ap200p","title":"4. Load and Run Initial Program (<code>AP200P</code>)","text":"<ul> <li>Program: <code>AP200P</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>APPYTR</code>: Payment transaction file (<code>?9?APPT?WS?</code>).</li> <li><code>GSTABL</code>, <code>GSCONT</code>, <code>GLCONT</code>: Shared general ledger and system control files.</li> <li>Action:</li> <li>Runs <code>AP200P</code> to process initial transaction data.</li> <li>Cancel Check:</li> <li>If <code>?L'129,6'?/CANCEL</code>, deletes <code>APPT?WS?</code> and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#5-file-cleanup-and-temporary-file-creation","title":"5. File Cleanup and Temporary File Creation","text":"<ul> <li>Delete Temporary Files:</li> <li>Deletes <code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APJC?WS?</code> using <code>GSDELETE</code>.</li> <li>Create Job Cost Transaction File:</li> <li>Builds <code>?9?APJC?WS?</code> with 999,000 records, 128 bytes each.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#6-sort-transactions-gsort","title":"6. Sort Transactions (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9??20?</code> (transaction file).</li> <li>Output File: <code>?9?APXX?WS?</code> (sorted transaction file, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Vendor (<code>FNC 12 16</code>).</li> <li>Entry/Entry Sequence (<code>FNC 4 11</code>).</li> </ul> </li> <li>Copies fields 1\u2013256 and 257\u2013404 (<code>FDC</code>).</li> <li>Action:</li> <li>Executes sort to organize transactions for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#7-run-main-purchase-journal-program-ap200","title":"7. Run Main Purchase Journal Program (<code>AP200</code>)","text":"<ul> <li>Program: <code>AP200</code></li> <li>Files:</li> <li><code>APTRAN</code>: Sorted transactions (<code>?9?APXX?WS?</code>).</li> <li><code>APCONT</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>: A/P control, vendor, and open item files (shared).</li> <li><code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>: A/P history files (shared).</li> <li><code>APINVH</code>: Invoice header file (shared).</li> <li><code>POFILEH</code>, <code>POFILED</code>: Purchase order files (shared).</li> <li><code>JCTRAN</code>: Job cost transactions (<code>?9?APJC?WS?</code>).</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>APPYTR</code>: Payment transactions (<code>?9?APPT?WS?</code>).</li> <li><code>FRCINH</code>, <code>FRCFBH</code>: Freight invoice files (shared).</li> <li>Printer Overrides:</li> <li>If <code>?9?/G</code>, sets output queue to <code>QUSRSYS/APPOST</code>.</li> <li>Otherwise, sets output queue to <code>QUSRSYS/TESTOUTQ</code>.</li> <li>Action:</li> <li>Runs <code>AP200</code> to process transactions, update A/P files, and generate the Purchase Journal report.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#8-sort-journal-register-gsort","title":"8. Sort Journal Register (<code>#GSORT</code>)","text":"<ul> <li>Program: <code>#GSORT</code></li> <li>Input File: <code>?9?APPJ?WS?</code> (journal register).</li> <li>Output File: <code>?9?APPK?WS?</code> (sorted journal register, 999,000 records).</li> <li>Sort Criteria:</li> <li>Sorts by:<ul> <li>Company (<code>FNC 2 3</code>).</li> <li>Control/Distribution (<code>FNC 12 12</code>).</li> <li>A/P, Expense, Inter-Company (<code>FNC 106 115</code>).</li> <li>G/L Account (<code>FNC 13 20</code>).</li> </ul> </li> <li>Includes records where field 1 is not empty (<code>I C 1 1NECD</code>).</li> <li>Action:</li> <li>Sorts the journal register for further processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#9-run-journal-summary-program-ap205","title":"9. Run Journal Summary Program (<code>AP205</code>)","text":"<ul> <li>Program: <code>AP205</code></li> <li>Files:</li> <li><code>APPJJR</code>: Journal register (<code>?9?APPJ?WS?</code>).</li> <li><code>AP205S</code>: Sorted journal register (<code>?9?APPK?WS?</code>).</li> <li><code>APCONT</code>: A/P control file (shared).</li> <li><code>TEMGEN</code>: Temporary general ledger file (shared).</li> <li>Printer Overrides:</li> <li>Same as <code>AP200</code> (output queue <code>APPOST</code> or <code>TESTOUTQ</code>).</li> <li>Action:</li> <li>Runs <code>AP205</code> to summarize journal entries and produce reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#10-post-job-cost-transactions-conditional","title":"10. Post Job Cost Transactions (Conditional)","text":"<ul> <li>Condition:</li> <li>If <code>?F'A,?9?APJC?WS?'?/00000000</code> (job cost transaction file exists) and procedure <code>JC200</code> exists in the library (<code>?CLIB?</code>).</li> <li>Action:</li> <li>Calls <code>JC200</code> with <code>APJC?WS?</code> to post job cost transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#11-post-ap-invoices-to-inventory-receipts-ap210","title":"11. Post A/P Invoices to Inventory Receipts (<code>AP210</code>)","text":"<ul> <li>Program: <code>AP210</code></li> <li>Files:</li> <li><code>APTRAN</code>: Transaction file (<code>?9??20?</code>).</li> <li><code>INFIL1</code>, <code>INTZH1</code>: Inventory files (shared).</li> <li>Printer:</li> <li>Output to <code>APLIST</code> (device <code>PJ</code>, form <code>JBAP</code>, priority 0).</li> <li>Action:</li> <li>Posts A/P invoices to inventory receipt records.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#12-cleanup-temporary-files","title":"12. Cleanup Temporary Files","text":"<ul> <li>Action:</li> <li>Deletes temporary files using <code>GSDELETE</code>:<ul> <li><code>APPJ?WS?</code>, <code>APPK?WS?</code>, <code>APTX?WS?</code>, <code>APXX?WS?</code>.</li> <li><code>?20?</code>, <code>APCT?WS?</code>, <code>APJC?WS?</code>.</li> <li><code>APPT?WS?</code> (if no records exist).</li> </ul> </li> <li>Condition:</li> <li>If <code>DATAF1-?9?APPT?WS?</code>, skips deletion and jumps to <code>END</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#13-automatic-prepaid-invoice-processing","title":"13. Automatic Prepaid Invoice Processing","text":"<ul> <li>Action:</li> <li>Displays: \"AUTOMATIC PROCESSING OF PREPAID INVOICES IS EXECUTING\".</li> <li>Calls procedures:<ul> <li><code>AP150</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP160</code> (auto mode, parameter <code>?3?</code>).</li> <li><code>AP250</code> (auto mode, parameter <code>?3?</code>).</li> </ul> </li> <li>Purpose:</li> <li>Processes prepaid invoices automatically.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#14-final-cleanup","title":"14. Final Cleanup","text":"<ul> <li>LMS Identifier Deletion:</li> <li>If <code>DATAF1-?9?LMS?WS?</code> (LMS batch identifier exists), deletes <code>LMS?WS?</code>.</li> <li>Reset State:</li> <li>Clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Resets <code>SWITCH</code> to <code>00000000</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#15-end-of-procedure","title":"15. End of Procedure","text":"<ul> <li>Tag: <code>END</code></li> <li>Action:</li> <li>Terminates the procedure after all processing or upon cancellation/error.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#key-features-and-notes","title":"Key Features and Notes","text":"<ul> <li>Error Handling:</li> <li>The procedure includes robust checks to prevent conflicts (e.g., concurrent processes, payment cycle locks, inventory conflicts).</li> <li>User prompts ensure manual intervention when errors occur.</li> <li>File Management:</li> <li>Temporary files (<code>APPJ?WS?</code>, <code>APPK?WS?</code>, etc.) are created and deleted to manage data during processing.</li> <li>Shared files (e.g., <code>APCONT</code>, <code>APVEND</code>) are accessed in shared mode (<code>DISP-SHR</code>) to allow concurrent access.</li> <li>Sorting:</li> <li>Two sorting steps (<code>#GSORT</code>) organize transactions and journal entries for accurate posting and reporting.</li> <li>Modularity:</li> <li>Calls external programs (<code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>JC200</code>) and procedures (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>) for specific tasks.</li> <li>Wire Transfer Support:</li> <li>Differentiates between standard transactions (<code>APTR?WS?</code>) and wire transfers (<code>APWT?WS?</code>).</li> <li>Inventory Integration:</li> <li>Posts to inventory receipts (<code>AP210</code>) and prevents conflicts with inventory processes (<code>INTSZZ</code>).</li> <li>Freight Invoices:</li> <li>Supports carrier freight invoice processing (<code>FRCINV</code>) when vouchers are deleted.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#flow-summary","title":"Flow Summary","text":"<ol> <li>Validate environment (no conflicts, no errors in voucher batch).</li> <li>Initialize variables and files (set <code>WT</code>, create <code>APPT?WS?</code>).</li> <li>Process initial transactions (<code>AP200P</code>).</li> <li>Sort transactions (<code>#GSORT</code> to <code>APXX?WS?</code>).</li> <li>Post to Purchase Journal (<code>AP200</code>, update A/P and related files).</li> <li>Sort journal register (<code>#GSORT</code> to <code>APPK?WS?</code>).</li> <li>Summarize journal (<code>AP205</code>).</li> <li>Post job cost transactions (if applicable, <code>JC200</code>).</li> <li>Post to inventory receipts (<code>AP210</code>).</li> <li>Process prepaid invoices (<code>AP150</code>, <code>AP160</code>, <code>AP250</code>).</li> <li>Clean up (delete temporary files, reset state).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#assumptions-and-clarifications","title":"Assumptions and Clarifications","text":"<ul> <li>Parameters:</li> <li><code>?9?</code>: Library name (dynamic).</li> <li><code>?WS?</code>: Workstation ID.</li> <li><code>?3?</code>: Likely a mode or batch parameter.</li> <li><code>?20?</code>: File name (<code>APTR?WS?</code> or <code>APWT?WS?</code> based on <code>WT</code>).</li> <li>System Context:</li> <li>Runs on IBM AS/400 with RPG programs and OCL.</li> <li>Assumes a multi-user environment with shared files.</li> <li>External Dependencies:</li> <li>Programs: <code>AP200P</code>, <code>AP200</code>, <code>AP205</code>, <code>AP210</code>, <code>#GSORT</code>, <code>JC200</code>.</li> <li>Procedures: <code>AP150</code>, <code>AP160</code>, <code>AP250</code>.</li> <li>Files: A/P, inventory, purchase order, job cost, and freight invoice files.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with labels indicating temporary or shared files: 1. APTRAN (<code>?9??20?</code>, either <code>APTR?WS?</code> or <code>APWT?WS?</code>): Transaction file for vouchers or wire transfers. 2. APPYTR (<code>?9?APPT?WS?</code>): Payment transaction file (temporary). 3. GSTABL (<code>?9?GSTABL</code>, shared): General system table. 4. GSCONT (<code>?9?GSCONT</code>, shared): General system control file. 5. GLCONT (<code>?9?GLCONT</code>, shared): General ledger control file. 6. APCONT (<code>?9?APCONT</code>, shared): A/P control file. 7. APVEND (<code>?9?APVEND</code>, shared): Vendor master file. 8. APOPEN (<code>?9?APOPEN</code>, shared): Open A/P file. 9. APOPENH (<code>?9?APOPNH</code>, shared): Open A/P header file. 10. APOPEND (<code>?9?APOPND</code>, shared): Open A/P detail file. 11. APOPENV (<code>?9?APOPNV</code>, shared): Open A/P vendor file. 12. APHISTH (<code>?9?APHSTH</code>, shared): A/P history header file. 13. APHISTD (<code>?9?APHSTD</code>, shared): A/P history detail file. 14. APHISTV (<code>?9?APHSTV</code>, shared): A/P history vendor file. 15. APINVH (<code>?9?APINVH</code>, shared): A/P invoice header file. 16. POFILEH (<code>?9?POFILH</code>, shared): Purchase order header file. 17. POFILED (<code>?9?POFILD</code>, shared): Purchase order detail file. 18. JCTRAN (<code>?9?APJC?WS?</code>, temporary): Job cost transaction file. 19. APPJJR (<code>?9?APPJ?WS?</code>, temporary): Journal register file. 20. AP205S (<code>?9?APPK?WS?</code>, temporary): Sorted journal register file. 21. FRCINH (<code>?9?FRCINH</code>, shared): Freight invoice header file. 22. FRCFBH (<code>?9?FRCFBH</code>, shared): Freight bill header file. 23. TEMGEN (<code>?9?TEMGEN</code>, shared): Temporary general ledger file. 24. INFIL1 (<code>?9?INFIL1</code>, shared): Inventory file. 25. INTZH1 (<code>?9?INTZH1</code>, shared): Inventory transaction holding file. 26. APSTAT (<code>?9?APSTAT</code>): A/P status file for error checking. 27. LMS?WS? (<code>?9?LMS?WS?</code>, temporary): LMS system identifier file. 28. APXX?WS? (<code>?9?APXX?WS?</code>, temporary): Sorted transaction file. 29. APTX?WS? (<code>?9?APTX?WS?</code>, temporary): Temporary transaction file. 30. APCT?WS? (<code>?9?APCT?WS?</code>, temporary): Temporary A/P control file.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/","title":"AP200 RPG","text":"<p>The RPG program <code>AP200</code> is an Accounts Payable (A/P) Purchase Register program that processes vendor invoices, vouchers, and related transactions. Below is a detailed analysis of the process steps, business rules, tables used, and external programs called based on the provided source code.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#process-steps","title":"Process Steps","text":"<p>The program follows a structured flow to process A/P transactions, including header and detail records, cancellations, intercompany transfers, and updates to various files. The main steps are:</p> <ol> <li>Initialization (ONCE routine):</li> <li>Executes once at program start.</li> <li>Converts the journal date (<code>JRDATE</code>) to a year-month-day format (<code>PJYMD</code>).</li> <li>Handles Y2K logic to determine the century (<code>JCN</code>).</li> <li>Initializes variables (e.g., <code>Z5</code>, <code>Z6</code>, <code>Z7</code>, <code>Z8</code>, <code>Z9</code>, <code>Z10</code>, <code>Z4</code>, <code>ONE1</code>, <code>ONE3</code>, <code>TWO1</code>, <code>THREE1</code>) to zeros or specific values.</li> <li> <p>Sets the <code>POKEY</code> to '000' and increments the <code>ONCE</code> counter.</p> </li> <li> <p>Level 2 Processing (L2DET subroutine):</p> </li> <li>Initializes page number, captures system time and date.</li> <li>Converts system date (<code>SYSDAT</code>) to a year-month-day format (<code>SYSYMD</code>).</li> <li>Chains to <code>APCONT</code> to retrieve company data and next voucher number (<code>ACNXVO</code>).</li> <li>Determines journal ID (<code>JRNID</code>) based on wire transfer flag (<code>WIRE</code>):<ul> <li>'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> <li>Updates <code>ACJRNL</code> (journal number) and writes to <code>APCONT</code> if not found.</li> <li> <p>Initializes level 2 accumulators (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</p> </li> <li> <p>Level 1 Processing (L1DET subroutine):</p> </li> <li>Initializes level 1 accumulators (<code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Resets indicators (e.g., 03, 10, 12, 13, 19, 24, 25, 32).</li> <li> <p>Initializes sequence number (<code>SEQ#</code>).</p> </li> <li> <p>Header Record Processing (EACH01 subroutine):</p> </li> <li>Processes header records from <code>APTRAN</code>.</li> <li>Checks if the voucher is deleted (<code>ATHDEL = 'D'</code>):<ul> <li>If deleted, updates <code>FRCFBH</code> and <code>FRCINH</code> to blank <code>FRAPST</code> if it was 'Y'.</li> <li>Skips further processing for deleted vouchers.</li> </ul> </li> <li>Converts dates (<code>ATINDT</code>, <code>ATDUDT</code>, <code>ATPCKD</code>, <code>ATDSDT</code>) to internal format.</li> <li>Validates vendor number (<code>ATVEND</code>), canceled voucher (<code>ATCNVO</code>), prepaid status (<code>ATPAID</code>), single check (<code>ATSNGL</code>), and hold codes (<code>ATHOLD</code>).</li> <li>Assigns voucher number (<code>VOUCHR</code>) from <code>NXTVO</code> or retention voucher (<code>RTVO</code>) if applicable.</li> <li>Processes prepaid vouchers (check, ACH, wire transfer, employee expense) by updating <code>APPYTR</code>.</li> <li>Handles canceled vouchers by calling the <code>CANCEL</code> subroutine.</li> <li> <p>Checks for retention (<code>ATRTPC</code>) and calculates retention amounts if applicable.</p> </li> <li> <p>Detail Record Processing (EACH02 subroutine):</p> </li> <li>Processes detail records from <code>APTRAN</code>.</li> <li>Handles gallons (<code>ATGALN</code>) and receipt number (<code>ATRCPT</code>) for printing.</li> <li>Calculates discounts based on discount percent (<code>ATDSPC</code>) and amount (<code>ATAMT</code>).</li> <li>Processes retention amounts (<code>ATRTAM</code>, <code>ATRTDS</code>) if applicable.</li> <li>Updates payment transaction records (<code>APPYTR</code>) for discounts.</li> <li>Accumulates amounts (<code>L1AMT</code>, <code>L1PAMT</code>, <code>L1FAMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>).</li> <li>Checks for intercompany transfers by calling <code>INTRCO</code> if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li> <p>Updates purchase order files (<code>POFILEH</code>, <code>POFILED</code>) if <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is not blank.</p> </li> <li> <p>Cancel Voucher Processing (CANCEL subroutine):</p> </li> <li>Processes canceled vouchers (<code>ATCNVO</code>).</li> <li>Builds a key (<code>OPKY12</code>) using company and vendor data.</li> <li>Reads <code>APOPEN</code> to find matching records.</li> <li>Updates <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on record type (<code>OPRCTY</code>).</li> <li> <p>Writes history records to <code>APHISTH</code>, <code>APHISTD</code>, or <code>APHISTV</code>.</p> </li> <li> <p>Level 1 Totals (L1TOT subroutine):</p> </li> <li>Accumulates level 1 totals into level 2 totals (<code>L2PAMT</code>, <code>L2FAMT</code>, <code>L2AMT</code>, <code>L2DISC</code>).</li> <li>Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Writes invoice header (<code>APINVH</code>) if vendor is not zero.</li> <li> <p>Writes totals to <code>APPRINT</code>.</p> </li> <li> <p>Intercompany Transfers (INTRCO subroutine):</p> </li> <li>Processes intercompany transfers when company numbers differ.</li> <li>Sets debit and credit company codes (<code>IDRCO</code>, <code>ICRCO</code>) and G/L accounts (<code>IDRGL</code>, <code>ICRGL</code>).</li> <li>Writes journal entries to <code>APPJJR</code> for debit and credit sides.</li> <li> <p>Handles retention amounts separately if applicable.</p> </li> <li> <p>Output Processing:</p> </li> <li>Writes records to output files (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>APPJJR</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APINVH</code>, <code>POFILEH</code>, <code>POFILED</code>, <code>FRCINH</code>, <code>FRCFBH</code>).</li> <li>Generates a purchase register report via <code>APPRINT</code>.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate A/P processing:</p> <ol> <li>Voucher Number Assignment:</li> <li>Voucher numbers are assigned from <code>ACNXVO</code> in <code>APCONT</code> and incremented.</li> <li>Retention vouchers (<code>RTVO</code>) are assigned separately if <code>ATRTPC</code> is non-zero.</li> <li> <p>Canceled vouchers use the original voucher number (<code>ATCNVO</code>).</p> </li> <li> <p>Prepaid Vouchers:</p> </li> <li>Prepaid vouchers are flagged with <code>ATPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), or <code>'E'</code> (employee expense).</li> <li> <p>Payment transactions are written to <code>APPYTR</code> for prepaid vouchers.</p> </li> <li> <p>Hold Vouchers:</p> </li> <li>Vouchers can be held with <code>ATHOLD = 'H'</code> (hold), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay).</li> <li> <p>Hold descriptions (<code>ATHLDD</code>) are printed for held vouchers.</p> </li> <li> <p>Discounts:</p> </li> <li>Discounts are calculated if <code>ATDSPC</code> (discount percent) is non-zero.</li> <li>Discount amount (<code>ATDISC</code>) is computed as <code>ATAMT * (ATDSPC / 100)</code>.</li> <li> <p>Discounts are accumulated in <code>L1DISC</code> and written to <code>APPYTR</code>.</p> </li> <li> <p>Retention:</p> </li> <li>Retention is processed if <code>ATRTPC</code> (retention percent) is non-zero.</li> <li>Retention amount (<code>ATRTAM</code>) is calculated as <code>ATAMT * (ATRTPC / 100)</code>.</li> <li> <p>Retention vouchers are written to <code>APOPENH</code>, <code>APOPEND</code>, and <code>APOPENV</code> with a hold code (<code>'H'</code>) and description ('RETENTION').</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li>If <code>ATCONO \u2260 ATEXCO</code>, intercompany journal entries are written to <code>APPJJR</code>.</li> <li> <p>Debit and credit entries use the intercompany G/L account (<code>ACICGL</code>).</p> </li> <li> <p>Purchase Order Integration:</p> </li> <li>If <code>ACPOYN = 'Y'</code> and <code>ATPONO</code> is non-blank, updates <code>POFILEH</code> (header) and <code>POFILED</code> (detail).</li> <li> <p>Updates applied amount (<code>POAPPU</code>), received quantity (<code>PDRCQT</code>), and A/P voucher amount (<code>PDAPV$</code>).</p> </li> <li> <p>Deleted Vouchers:</p> </li> <li>If <code>ATHDEL = 'D'</code>, blanks <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> if it was 'Y'.</li> <li> <p>Skips further processing for deleted vouchers.</p> </li> <li> <p>Single Check and Canceled Vouchers:</p> </li> <li>Single check vouchers are flagged with <code>ATSNGL = 'S'</code>.</li> <li> <p>Canceled vouchers are processed by updating <code>APOPEN</code> and writing to <code>APHIST</code>.</p> </li> <li> <p>Y2K Date Handling:</p> <ul> <li>Adjusts century for dates based on <code>Y2KCMP</code> and <code>Y2KCEN</code>.</li> </ul> </li> <li> <p>Journal ID Assignment:</p> <ul> <li>Assigns <code>JRNID</code> as 'WT' for wire transfers, 'EE' for employee expenses, or 'PJ' otherwise.</li> </ul> </li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>Voucher Processing:</li> <li>Processes header (<code>NS 01</code>) and detail (<code>NS 02</code>) records from <code>APTRAN</code>, skipping deleted vouchers (<code>ATHDEL = 'D'</code>).</li> <li>Assigns new voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers and retention vouchers.</li> <li> <p>Supports multiple payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), and utility auto-pay (<code>U</code>).</p> </li> <li> <p>Freight Invoice Handling:</p> </li> <li>Clears <code>FRAPST</code> to blank in <code>FRCINH</code> or <code>FRCFBH</code> if a voucher is deleted and <code>FRAPST = 'Y'</code>.</li> <li> <p>Prioritizes <code>FRCFBH</code> (freight bill override header) over <code>FRCINH</code> (carrier invoice header) when checking freight status.</p> </li> <li> <p>Discounts and Retentions:</p> </li> <li>Calculates discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>).</li> <li> <p>For retentions (<code>ATRTPC \u2260 0</code>), computes retention amount (<code>ATRTAM</code>) and adjusts <code>ATAMT</code>. For 100% retention, moves <code>ATAMT</code> to <code>ATRTAM</code> and zeros <code>ATAMT</code>.</p> </li> <li> <p>Intercompany Transfers:</p> </li> <li> <p>Generates journal entries (<code>APPJJR</code>) for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</p> </li> <li> <p>Cancellation:</p> </li> <li> <p>Marks canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code> and writes history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>).</p> </li> <li> <p>Vendor and Invoice Updates:</p> </li> <li>Updates vendor balances (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) with voucher and retention amounts.</li> <li> <p>Records invoice details in <code>APINVH</code> for non-one-time vendors.</p> </li> <li> <p>Journal Entries:</p> </li> <li> <p>Generates <code>APPJJR</code> entries for A/P, expense, and intercompany accounts, including retention and non-retention transactions.</p> </li> <li> <p>Purchase Order Updates:</p> </li> <li> <p>Disabled (skipped via <code>GOTO SKIP</code>), but intended to update <code>POFILEH</code> (<code>POAPPU</code>) and <code>POFILED</code> (<code>PDRCQT</code>, <code>PDAPV$</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</p> </li> <li> <p>Reporting:</p> </li> <li>Produces a detailed Purchase Register with company, voucher, and line item details, including special fields like sales order, carrier ID, and process type.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#tables-used","title":"Tables Used","text":"<p>The program interacts with the following files (tables):</p> File Name Type Description Usage <code>APTRAN</code> Input A/P Transaction File Reads header and detail records <code>APCONT</code> Update A/P Control File Retrieves company data, updates <code>ACJRNL</code>, <code>ACNXVO</code> <code>APVEND</code> Update A/P Vendor File Updates vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) <code>APOPEN</code> Input A/P Open File Reads open vouchers for cancellation <code>APOPENH</code> Update A/P Open Header File Writes/updates header records <code>APOPEND</code> Update A/P Open Detail File Writes detail records <code>APOPENV</code> Update A/P Open Vendor File Writes vendor records <code>APINVH</code> Input A/P Invoice Header File Writes invoice header records <code>POFILEH</code> Update Purchase Order Header File Updates applied amounts (<code>POAPPU</code>) <code>POFILED</code> Update Purchase Order Detail File Updates received qty (<code>PDRCQT</code>), voucher amounts <code>APHISTH</code> Output A/P History Header File Writes history header records <code>APHISTD</code> Output A/P History Detail File Writes history detail records <code>APHISTV</code> Output A/P History Vendor File Writes history vendor records <code>APPJJR</code> Output A/P Journal File Writes journal entries <code>APPYTR</code> Update A/P Payment Transaction File Writes/updates payment transactions <code>FRCINH</code> Update Freight Invoice Header File Updates <code>FRAPST</code> for deleted vouchers <code>FRCFBH</code> Update Freight Bill Override Header File Updates <code>FRAPST</code> for deleted vouchers <code>APPRINT</code> Output A/P Purchase Register Report Generates the purchase register report"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using the <code>CALL</code> opcode. All processing is handled within the program through subroutines and file operations. The subroutines used are:</p> <ul> <li><code>L2DET</code>: Level 2 detail processing.</li> <li><code>L1DET</code>: Level 1 detail processing.</li> <li><code>EACH01</code>: Header record processing.</li> <li><code>EACH02</code>: Detail record processing.</li> <li><code>CANCEL</code>: Cancel voucher processing.</li> <li><code>L1TOT</code>: Level 1 totals processing.</li> <li><code>INTRCO</code>: Intercompany transfer processing.</li> </ul> <p>No external programs are invoked, as the program is self-contained for A/P processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200%20RPG/#summary","title":"Summary","text":"<p>The <code>AP200</code> RPG program is a comprehensive A/P Purchase Register system that processes vendor invoices, assigns voucher numbers, handles prepaid and held vouchers, calculates discounts and retentions, and supports intercompany transfers and purchase order integration. It uses 16 files for input, update, and output operations and enforces strict business rules for data integrity. No external programs are called, and all logic is managed via internal subroutines.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/","title":"AP200P RPG","text":"<p>The <code>AP200P.rpg36.txt</code> file is an RPG III program (<code>AP200P</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to prompt for and validate input parameters for the Purchase Journal and Cash Disbursements Journal, including dates and accounting periods. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP200P</code> program serves as the initial step in the Purchase Journal process within <code>AP200.ocl36.txt</code>. It prompts the user for key input parameters, such as the Purchase Journal date (<code>PJDATE</code>), Cash Disbursements Journal date (<code>CDDATE</code>), and accounting periods/years (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>). It validates these inputs against system controls and writes validated data to the payment transaction file (<code>APPYTR</code>) for further processing. This program ensures that the journal process starts with accurate and valid parameters, particularly for handling prepaid, ACH, wire transfer, or employee expense transactions.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early in the workflow (<code>LOAD AP200P</code>) to set up the necessary parameters before transaction processing and journal generation.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Clear Indicators and Variables:<ul> <li>Clears indicators <code>81</code> and <code>90</code> (<code>SETOF 8190</code>).</li> <li>Initializes <code>MSG30</code> (message field) to blanks.</li> <li>Sets zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>) to 0 for use in output.</li> </ul> </li> <li> <p>Cancel Check:</p> <ul> <li>If function key <code>KG</code> (cancel) is pressed, sets <code>CANCEL</code> to <code>'CANCEL'</code>, sets last record indicator (<code>LR</code>), clears <code>81</code>, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine):</p> </li> <li>Check for Prepaid Transactions:<ul> <li>Sets lower limit (<code>SETLL</code>) on <code>APTRAN</code> to check for records.</li> <li>Reads <code>APTRAN</code> until end-of-file (<code>09</code>) or a non-deleted record is found (<code>N08</code>).</li> <li>Checks <code>ATPAID</code> (payment type) for:</li> <li><code>'P'</code> (prepaid, sets <code>21</code> and <code>22</code>).</li> <li><code>'A'</code> (ACH, sets <code>21</code> and <code>23</code>, per <code>JB01</code>).</li> <li><code>'W'</code> (wire transfer, sets <code>21</code> and <code>24</code>, per <code>JB01</code>).</li> <li><code>'E'</code> (employee expense, sets <code>21</code> and <code>25</code>, per <code>JB01</code>).</li> <li>If no prepaid/ACH/wire/employee transactions exist (<code>N21</code>), sets indicator <code>20</code>.</li> </ul> </li> <li> <p>Accounting Period Check:</p> <ul> <li>Chains to <code>GSCONT</code> to check <code>GX13GL</code> (13 accounting periods flag).</li> <li>If <code>GX13GL = 'Y'</code> or no prepaid transactions exist (<code>N20</code>), sets indicator <code>19</code> (prompt for period/year).</li> <li>If prepaid transactions exist (<code>21</code>), sets indicator <code>18</code> (prompt for Cash Disbursements date).</li> </ul> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine):</p> </li> <li>Purchase Journal Date Validation:<ul> <li>Moves <code>PJDATE</code> to <code>DATE</code> and calls <code>DATCHK</code> to validate the date format.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>PJDATE</code> to <code>PJYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>PJYR</code>) and determines century (<code>PJCN</code>):</li> <li>If <code>PJYR &gt;= Y2KCMP</code> (80), sets <code>PJCN</code> to <code>Y2KCEN</code> (19).</li> <li>Otherwise, sets <code>PJCN</code> to <code>Y2KCEN + 1</code> (20).</li> <li>Combines into <code>PJYMD8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Cash Disbursements Date Validation (if Prepaid):<ul> <li>If prepaid transactions exist (<code>21</code>), validates <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>If invalid (<code>79</code>), sets <code>8190</code>, displays error, and jumps to <code>ENDS1</code>.</li> <li>Converts <code>CDDATE</code> to <code>CDYMD</code> (YYYYMMDD) and determines century (<code>CN</code>), forming <code>CDDAT8</code>.</li> </ul> </li> <li>Purchase Journal Period/Year Validation (if 13 Periods):<ul> <li>If <code>16</code> (13 periods), validates <code>KYPD</code> (period, 1\u201313):</li> <li>If <code>KYPD &lt; 1</code> or <code>&gt; 13</code>, sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Retrieves period end date (<code>TBPDDT</code>) from <code>GSTABL</code> using <code>KYPD</code> and <code>KYPDYY</code>:</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Converts <code>TBPDDT</code> to <code>HIDATE</code> (YYYYMMDD) and <code>HIDAT8</code> (century + YYYYMMDD).</li> <li>Compares <code>PJYMD8</code> to <code>HIDAT8</code> (high date); if <code>PJYMD8 &gt; HIDAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Determines low date for previous period (e.g., period 1 uses period 13 of prior year):</li> <li>Retrieves <code>TBPDDT</code> for previous period from <code>GSTABL</code>.</li> <li>If not found (<code>10</code>), sets <code>819050</code>, displays error (<code>MSG,5</code>), and jumps to <code>ENDS1</code>.</li> <li>Compares <code>PJYMD8</code> to <code>LODAT8</code> (low date); if <code>PJYMD8 &lt; LODAT8</code>, sets <code>819050</code>, displays error (<code>MSG,6</code>), and jumps to <code>ENDS1</code>.</li> <li>Fiscal Year Check:</li> <li>Chains to <code>GLCONT</code> to get last fiscal year closed (<code>GCLSYR</code>).</li> <li>If not found (<code>99</code>), clears date fields.</li> <li>Compares <code>PJDATE</code> (month/year) to fiscal year boundaries; if outside current fiscal year, sets <code>819051</code>, displays error (<code>MSG,7</code>), and jumps to <code>ENDS1</code>.</li> </ul> </li> <li>Cash Disbursements Period/Year Validation (if 13 Periods):<ul> <li>Similar validation for <code>CDPD</code> and <code>CDPDYY</code> using <code>GSTABL</code> and date comparisons.</li> <li>Displays errors (<code>MSG,5</code> or <code>MSG,6</code>) if invalid.</li> </ul> </li> <li> <p>Set Output:</p> <ul> <li>Sets <code>JRDATE</code> to <code>PJDATE</code> and <code>JRYMD8</code> to <code>PJYMD8</code>.</li> <li>Clears <code>CANCEL</code>.</li> <li>Sets indicator <code>82</code> (valid input) and clears <code>81</code>.</li> </ul> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine):</p> </li> <li>Displays confirmation screen (<code>AP200PS2</code>) with input values.</li> <li>If user enters <code>YORN = 'Y'</code>, sets <code>LR</code> (last record), clears <code>81</code>, and proceeds.</li> <li> <p>Otherwise, clears <code>PJDATE</code>, sets <code>0181</code>, clears <code>0282</code>, and redisplays screen.</p> </li> <li> <p>Date Check (<code>DATCHK</code> Subroutine):</p> </li> <li> <p>Validates date format (<code>MMDDYY</code>):</p> <ul> <li>Breaks down into month (<code>$MONTH</code>), day (<code>$DAY</code>), year (<code>$YR</code>).</li> <li>Checks month (1\u201312); sets <code>79</code> if invalid.</li> <li>Validates day based on month:</li> <li>For February, checks leap year:<ul> <li>Non-century years: Divides year by 4 (or multiplies by 0.25).</li> <li>Century years: Combines century and year, divides by 400 (or multiplies by 0.0025).</li> <li>Leap year: Allows up to 29 days; non-leap year: 28 days.</li> </ul> </li> <li>Other months: Allows 30 days for April, June, September, November; 31 days for others.</li> <li>Sets <code>79</code> if day is invalid.</li> </ul> </li> <li> <p>Write to Output File:</p> </li> <li> <p>If valid (<code>LR 21</code>), writes to <code>APPYTR</code>:</p> <ul> <li>Includes zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, and payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, or <code>'E'</code> based on <code>ATPAID</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Jumps to <code>END</code> on cancel or error.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Prepaid Transaction Check:</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Prompts for Cash Disbursements date (<code>CDDATE</code>) only if such transactions exist (<code>21</code>).</li> <li>13 Accounting Periods:</li> <li>If <code>GX13GL = 'Y'</code> in <code>GSCONT</code>, validates period/year (<code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>) against <code>GSTABL</code> period end dates.</li> <li>Ensures dates fall within valid period boundaries (high and low dates).</li> <li>Date Validation:</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> for correct format and fiscal year.</li> <li>Checks leap years for February dates, handling century calculations for Y2K compliance.</li> <li>Fiscal Year Check:</li> <li>Ensures <code>PJDATE</code> is within the current fiscal year based on <code>GCLSYR</code> and first fiscal month (<code>GCFFMO</code>).</li> <li>User Confirmation:</li> <li>Requires user confirmation (<code>YORN = 'Y'</code>) to proceed with validated inputs.</li> <li>Error Handling:</li> <li>Displays error messages for invalid dates, periods, or fiscal year mismatches.</li> <li>Cancels processing if user presses <code>KG</code> or inputs are invalid.</li> <li>ACH/Wire Support (<code>JB01</code>, 05/01/13):</li> <li>Supports ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types in addition to prepaid (<code>'P'</code>).</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Input with Delete, <code>ID</code>):<ul> <li>A/P transaction file (404 bytes).</li> <li>Fields: <code>ATPAID</code> (payment type: <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> <li>Keys: Positions 9 and 10 (company and other keys).</li> </ul> </li> <li><code>GSCONT</code> (Chained Input, <code>IC</code>):<ul> <li>System control file (512 bytes).</li> <li>Fields: <code>GX13GL</code> (13 accounting periods flag).</li> </ul> </li> <li><code>GLCONT</code> (Input, <code>IF</code>):<ul> <li>General ledger control file (256 bytes).</li> <li>Fields: <code>GCDEL</code> (delete flag), <code>GCCO</code> (company number), <code>GCNAME</code> (company name), <code>GCADR1\u20133</code> (address), <code>GCFFMO</code> (first fiscal month), <code>GCNXGJ</code> (next general journal), <code>GCICGL</code> (intercompany G/L), <code>GCLSYR</code> (last fiscal year closed), <code>GCRETC</code> (retained earnings current year), <code>GCYTDP</code> (YTD profit), <code>GCRETP</code> (retained earnings prior years), <code>GCINLN</code> (total income line), <code>GCCONS</code> (consolidated company code), <code>GCCOLM</code> (consolidated column), <code>GCBSGL</code> (balance sheet rounding G/L), <code>GCISGL</code> (income statement rounding G/L), <code>GCMINV</code> (month inventory cost flag), <code>GCLSY4</code> (last fiscal year closed, century), <code>GCLMCC</code> (last month closed for costing), <code>GCCOUM</code> (costing unit of measure).</li> </ul> </li> <li><code>GSTABL</code> (Chained Input, <code>IC</code>):<ul> <li>General ledger table file (256 bytes).</li> <li>Fields: <code>TBPDDT</code> (period end date).</li> <li>Key: Positions 1\u201312 (constructed from period and year).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>CP</code>):<ul> <li>Display file for user prompts (<code>AP200PS1</code>, <code>AP200PS2</code>).</li> <li>Fields: <code>PJDATE</code> (Purchase Journal date), <code>CDDATE</code> (Cash Disbursements date), <code>KYPD</code> (PJ period), <code>KYPDYY</code> (PJ year), <code>CDPD</code> (CD period), <code>CDPDYY</code> (CD year), <code>YORN</code> (confirmation), <code>MSG30</code> (error message).</li> </ul> </li> <li>Output:</li> <li><code>APPYTR</code> (Output, <code>O</code>):<ul> <li>Payment transaction file (128 bytes).</li> <li>Fields: Zero fields (<code>Z5</code>, <code>Z2</code>, <code>Z8</code>, <code>Z6</code>), <code>CDDATE</code>, <code>CDDAT8</code>, <code>CDPD</code>, <code>CDPDYY</code>, payment type flag (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>).</li> </ul> </li> <li><code>SCREEN</code> (Workstation, <code>O</code>):<ul> <li>Outputs prompts and error messages (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation).</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP200P</code> program does not call external programs. It relies on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP200P</code> is called early (<code>LOAD AP200P</code>) to: - Prompt the user for Purchase Journal and Cash Disbursements Journal dates and periods. - Validate inputs against system controls (<code>GSCONT</code>, <code>GLCONT</code>, <code>GSTABL</code>) for date format, period validity, and fiscal year compliance. - Write validated parameters to <code>APPYTR</code> for use in subsequent steps (e.g., <code>AP200</code>, <code>AP205</code>, <code>AP210</code>). - Handle special cases like prepaid, ACH, wire transfer, or employee expense transactions. - Ensure the process aborts gracefully on user cancellation or invalid inputs.</p> <p>This step is critical for initializing the Purchase Journal process with accurate parameters, ensuring downstream processing (sorting, posting, and reporting) uses valid dates and periods.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (05/01/13): Added support for ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), and employee expense (<code>'E'</code>) payment types.</li> <li>Date Handling:</li> <li>Robust date validation with leap year checks and Y2K compliance (19xx vs. 20xx).</li> <li>Period Validation:</li> <li>Supports 13 accounting periods if enabled (<code>GX13GL = 'Y'</code>), with strict period/year checks.</li> <li>User Interaction:</li> <li>Uses two screens (<code>AP200PS1</code> for input, <code>AP200PS2</code> for confirmation) to ensure user validation.</li> <li>Error Messages:</li> <li>Provides clear feedback for invalid inputs (e.g., invalid date, period, or fiscal year).</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#ap200p-process-summary","title":"AP200P Process Summary","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#purpose","title":"Purpose","text":"<p><code>AP200P</code> is an RPG III program called in the <code>AP200</code> OCL procedure to prompt for and validate Purchase Journal and Cash Disbursements Journal parameters, including dates and accounting periods, and write them to <code>APPYTR</code>.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#process-steps_1","title":"Process Steps","text":"<ol> <li>Initialization: Clears indicators, messages, and zero fields. Checks for user cancel (<code>KG</code>).</li> <li>One-Time Setup (<code>ONETIM</code>):</li> <li>Checks <code>APTRAN</code> for prepaid (<code>'P'</code>), ACH (<code>'A'</code>), wire transfer (<code>'W'</code>), or employee expense (<code>'E'</code>) transactions.</li> <li>Sets flags for prompting Cash Disbursements date (<code>21</code>) or period/year (<code>19</code>, <code>18</code>).</li> <li>Screen 1 (<code>S1</code>):</li> <li>Validates <code>PJDATE</code> and <code>CDDATE</code> using <code>DATCHK</code>.</li> <li>Converts dates to YYYYMMDD and handles Y2K (19xx/20xx).</li> <li>Validates periods (<code>KYPD</code>, <code>CDPD</code>) against <code>GSTABL</code> for 13 accounting periods.</li> <li>Checks fiscal year against <code>GLCONT</code>.</li> <li>Displays errors if invalid.</li> <li>Screen 2 (<code>S2</code>):</li> <li>Prompts for confirmation (<code>YORN = 'Y'</code>).</li> <li>Clears <code>PJDATE</code> if not confirmed.</li> <li>Date Check (<code>DATCHK</code>):</li> <li>Validates date format, month, day, and leap year.</li> <li>Write to <code>APPYTR</code>:</li> <li>Outputs validated dates, periods, and payment type to <code>APPYTR</code>.</li> <li>End: Closes files or jumps to <code>END</code> on cancel/error.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#business-rules_1","title":"Business Rules","text":"<ul> <li>Prompts for <code>CDDATE</code> only if prepaid/ACH/wire/employee transactions exist.</li> <li>Validates periods (1\u201313) if <code>GX13GL = 'Y'</code> in <code>GSCONT</code>.</li> <li>Ensures dates are within period boundaries and current fiscal year.</li> <li>Supports ACH/wire/employee payments (<code>JB01</code>).</li> <li>Displays error messages for invalid inputs.</li> <li>Requires user confirmation to proceed.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#tablesfiles","title":"Tables/Files","text":"<ul> <li>Input:</li> <li><code>APTRAN</code>: Transaction file (<code>ATPAID</code>).</li> <li><code>GSCONT</code>: System control (<code>GX13GL</code>).</li> <li><code>GLCONT</code>: G/L control (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li><code>GSTABL</code>: G/L table (<code>TBPDDT</code>).</li> <li><code>SCREEN</code>: Workstation input (<code>PJDATE</code>, <code>CDDATE</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>CDPD</code>, <code>CDPDYY</code>, <code>YORN</code>).</li> <li>Output:</li> <li><code>APPYTR</code>: Payment transaction file (dates, periods, payment type).</li> <li><code>SCREEN</code>: Workstation output (prompts, errors).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#external-programs","title":"External Programs","text":"<ul> <li>None (uses subroutines: <code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>DATCHK</code>).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP200P%20RPG/#role-in-ap200-ocl_1","title":"Role in AP200 OCL","text":"<p>Initializes Purchase Journal by prompting and validating dates/periods, writing to <code>APPYTR</code> for downstream processing.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/","title":"AP205 RPG","text":"<p>The <code>AP205.rpg36.txt</code> file is an RPG III program (<code>AP205</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to summarize Accounts Payable (A/P) transactions for the Purchase Journal. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP205</code> program is responsible for summarizing A/P journal entries from the Purchase Journal process initiated by <code>AP200</code>. It processes sorted journal register records (<code>APPJJR</code>), accumulates amounts for summarized A/P entries, and writes summarized or detailed journal entries to a temporary general ledger file (<code>TEMGEN</code>) and a printed report (<code>APPRINT</code>). This step finalizes the journal entries for A/P transactions, ensuring they are properly formatted for general ledger integration and reporting.</p> <p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to produce a summarized output, which is critical for financial reporting and ledger updates.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Set Indicators and Variables:<ul> <li>Clears indicator <code>60</code> (<code>SETOF 60</code>).</li> <li>Checks if the year/period (<code>KYYYPD</code>) in <code>APCONT</code> is non-zero; if zero, sets indicator <code>99</code> (<code>SETON 99</code>).</li> </ul> </li> <li>Time and Date Setup:<ul> <li>Retrieves system time (<code>TIME</code> to <code>TIMDAT</code>) and formats it into <code>TIME</code> (HHMMSS) and <code>DATE</code> (MMDDYY).</li> <li>Converts <code>DATE</code> to <code>SYSYMD</code> (YYYYMMDD) by multiplying by 10000.01 and moves to <code>SYSDT8</code> (8-digit date).</li> </ul> </li> <li>Page and Separator:<ul> <li>Initializes page number (<code>PAGE</code>) to 0.</li> <li>Sets separator (<code>SEP</code>) to <code>'* '</code> for report formatting.</li> </ul> </li> <li> <p>Company Lookup:</p> <ul> <li>Chains <code>PJCONO</code> (company number from <code>APPJJR</code>) to <code>APCONT</code> to retrieve company name (<code>ACNAME</code>). Sets indicator <code>94</code> if not found.</li> </ul> </li> <li> <p>Process Input Records (<code>APPJJR</code>):</p> </li> <li>Read Input:<ul> <li>Reads records from <code>APPJJR</code> (journal register file) at level <code>L4</code> (company level).</li> </ul> </li> <li>Determine Debit/Credit:<ul> <li>Compares <code>PJCORD</code> (credit/debit flag) to <code>'D'</code>; sets indicator <code>30</code> if debit (<code>DEBIT</code>).</li> </ul> </li> <li>Summarize A/P Entries:<ul> <li>Compares <code>PJTYPE</code> to <code>'AP      '</code>; sets indicator <code>20</code> if true (summarize A/P only).</li> </ul> </li> <li> <p>Accumulate Amount:</p> <ul> <li>Adds <code>PJAMT</code> (amount from <code>APPJJR</code>) to <code>L1AMT</code> (level 1 accumulator) for summarized entries.</li> </ul> </li> <li> <p>Date and Century Handling:</p> </li> <li>Converts <code>PJDATE</code> (purchase journal date) to <code>YMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>YY</code>) from <code>YMD</code>.</li> <li>Compares <code>YY</code> to <code>Y2KCMP</code> (80, from <code>APCONT</code>):<ul> <li>If <code>YY &gt;= 80</code>, sets century (<code>CN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> </ul> </li> <li> <p>Combines century and <code>YMD</code> into <code>CYMD</code> (century + YYYYMMDD).</p> </li> <li> <p>Journal Entry Processing:</p> </li> <li>Non-Summarized Entries:<ul> <li>If not summarized (<code>N20</code>), calls <code>JRNL</code> subroutine to write detailed journal entries.</li> </ul> </li> <li> <p>Summarized Entries:</p> <ul> <li>At level <code>L1</code> (summary level) and if <code>PJTYPE = 'AP      '</code> (<code>20</code>), calls <code>JRNL</code> subroutine to write summarized A/P entries.</li> </ul> </li> <li> <p>JRNL Subroutine:</p> </li> <li>Increments journal reference number (<code>JRREF#</code>).</li> <li>Sets credit/debit flag (<code>CORD</code>) based on <code>PJCORD</code>:<ul> <li>If <code>L1AMT &lt; 0</code> (indicator <code>10</code>), reverses sign of <code>L1AMT</code> and toggles <code>CORD</code> (<code>'C'</code> for credit, <code>'D'</code> for debit).</li> </ul> </li> <li>Accumulates amounts:<ul> <li>If debit (<code>CORD = 'D'</code>, indicator <code>11</code>), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>If credit (<code>CORD != 'D'</code>, <code>N11</code>), adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> </ul> </li> <li>Sets journal amount (<code>JRAMT</code>) to <code>L1AMT</code> and resets <code>L1AMT</code> to 0.</li> <li> <p>Checks if gallons (<code>PJGALN</code>) is non-zero (sets indicator <code>60</code>).</p> </li> <li> <p>Write to Output Files:</p> </li> <li>TEMGEN (General Ledger File):<ul> <li>Writes detailed entries (<code>DADD 01N20</code>):</li> <li>Includes company (<code>PJCONO</code>), G/L number (<code>PJGLNO</code>), journal number (<code>PJJRNL</code>), reference (<code>JRREF#</code>), credit/debit (<code>CORD</code>), description (<code>PJDES1</code> or <code>PJDES2</code>), vendor (<code>PJVN10</code>), date (<code>YMD</code>, <code>CYMD</code>), amount (<code>JRAMT</code>), gallons (<code>PJGALN</code>), and receipt (<code>PJRCPT</code>).</li> <li>Writes summarized entries (<code>TADD L1 20</code>):</li> <li>Similar fields but with fixed description (<code>'-SUMMARIZED A/P         '</code>) and <code>PJDATE</code>.</li> </ul> </li> <li> <p>APPRINT (Printed Report):</p> <ul> <li>Prints header (<code>D 103 L4</code> or <code>OFNL4</code>):</li> <li>Company name (<code>ACNAME</code>), page number, date (<code>DATE</code>), time (<code>TIME</code>), journal title (<code>PURCHASE JOURNAL</code>), and period (<code>KYPD</code>, <code>KYPDYY</code>).</li> <li>Prints column headers for journal, reference, description, vendor, G/L number, debit/credit amounts.</li> <li>Prints detailed entries (<code>D 1 01N20</code>):</li> <li>Journal number, reference, description, vendor, G/L number, and amount (debit or credit).</li> <li>Includes gallons and receipt number if <code>PJGALN</code> is non-zero (<code>60</code>).</li> <li>Prints summarized entries (<code>T 1 L1 20</code>):</li> <li>Similar format with <code>'-SUMMARIZED A/P'</code> description.</li> <li>Prints journal totals (<code>T 2 L4</code>):</li> <li>Debit total (<code>L4DR</code>) and credit total (<code>L4CR</code>).</li> </ul> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APPJJR</code> records until end-of-file, processing each at appropriate levels (<code>L4</code>, <code>L1</code>).</li> <li>Outputs final totals and closes files.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Summarization:</li> <li>Only records with <code>PJTYPE = 'AP      '</code> are summarized (indicator <code>20</code>).</li> <li>Summarized entries aggregate amounts (<code>L1AMT</code>) by company and type, written at level <code>L1</code>.</li> <li>Debit/Credit Handling:</li> <li>Determines debit (<code>D</code>) or credit (<code>C</code>) based on <code>PJCORD</code>.</li> <li>If amount is negative, reverses sign and toggles <code>CORD</code> (e.g., negative debit becomes credit).</li> <li>Year 2000 Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (century, default 19) and <code>Y2KCMP</code> (80) to determine if year is 19xx or 20xx.</li> <li>Error Checking:</li> <li>Validates year/period (<code>KYYYPD</code>) in <code>APCONT</code>; sets indicator <code>99</code> if invalid (zero).</li> <li>Chains to <code>APCONT</code> for company name; sets indicator <code>94</code> if not found.</li> <li>Output Formatting:</li> <li>Detailed entries include vendor, gallons, and receipt data if applicable.</li> <li>Summarized entries use a fixed description and aggregated amounts.</li> <li>Report includes headers, totals, and formatted dates/amounts.</li> <li>Gallons and Receipt:</li> <li>Includes <code>PJGALN</code> (gallons) and <code>PJRCPT</code> (receipt number) in output only if <code>PJGALN</code> is non-zero.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APPJJR</code> (Primary Input, <code>IP</code>):<ul> <li>Journal register file (sorted input from <code>AP200</code>).</li> <li>Fields: <code>PJDEL</code> (delete flag), <code>PJCONO</code> (company), <code>PJJRNL</code> (journal number), <code>PJCORD</code> (credit/debit), <code>PJGLNO</code> (G/L number), <code>PJDES1</code> (description 1), <code>PJDATE</code> (journal date), <code>PJAMT</code> (amount), <code>PJDES2</code> (description 2), <code>PJVN10</code> (vendor), <code>PJTYPE</code> (type), <code>PJGALN</code> (gallons), <code>PJRCPT</code> (receipt).</li> </ul> </li> <li><code>AP205S</code> (Secondary Input, <code>IR</code>):<ul> <li>Sorted journal register file (used for control breaks).</li> <li>Keys: <code>PJCONO</code> (company), <code>PJCORD</code> (credit/debit), <code>PJTYPE</code> (type).</li> </ul> </li> <li><code>APCONT</code> (Chained Input, <code>IC</code>):<ul> <li>A/P control file.</li> <li>Fields: <code>ACNAME</code> (company name), <code>KYYYPD</code> (year/period), <code>KYPDYY</code>, <code>KYPD</code>, <code>JRDATE</code> (journal date), <code>WIREDS</code> (wire transfer description), <code>Y2KCEN</code> (century), <code>Y2KCMP</code> (year compare).</li> </ul> </li> <li>Output:</li> <li><code>TEMGEN</code> (Output, <code>O</code>):<ul> <li>Temporary general ledger file.</li> <li>Stores detailed and summarized journal entries for ledger integration.</li> </ul> </li> <li><code>APPRINT</code> (Printer, <code>O</code>):<ul> <li>Printed Purchase Journal report.</li> <li>Includes headers, detailed/summarized entries, and totals.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP205</code> program does not call external programs. It relies on internal subroutines (<code>JRNL</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP205</code> is called after sorting the journal register (<code>APPJ?WS?</code> into <code>APPK?WS?</code>) to: - Summarize A/P transactions for the Purchase Journal. - Generate a formatted report (<code>APPRINT</code>) for auditing and financial review. - Write journal entries to <code>TEMGEN</code> for integration with the general ledger. - Ensure accurate debit/credit totals and proper date handling for compliance.</p> <p>This step is critical for consolidating A/P data into a summarized format, making it ready for ledger posting and reporting, which aligns with the overall goal of <code>AP200</code> to process and post A/P voucher transactions.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP205%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Control Breaks:</li> <li>Uses <code>L4</code> (company), <code>L3</code> (credit/debit), <code>L2</code> (type), and <code>L1</code> (summary) for processing records hierarchically.</li> <li>Y2K Handling:</li> <li>Ensures dates are correctly interpreted for 19xx or 20xx centuries.</li> <li>Output Flexibility:</li> <li>Supports both detailed and summarized entries, with conditional inclusion of gallons and receipt data.</li> <li>File Integration:</li> <li>Links with <code>APCONT</code> for company and period data, ensuring consistency with A/P controls.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/","title":"AP210 RPG","text":"<p>The <code>AP210.rpg36.txt</code> file is an RPG III program (<code>AP210</code>) called within the <code>AP200.ocl36.txt</code> OCL procedure to post Accounts Payable (A/P) invoices to inventory receipt records. Below, I provide a detailed explanation of its process steps, business rules, tables/files used, and external programs called, along with its purpose in the context of the <code>AP200</code> OCL procedure.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#purpose-in-ap200-ocl","title":"Purpose in AP200 OCL","text":"<p>The <code>AP210</code> program is responsible for updating inventory receipt records (<code>INFIL1</code> or <code>INTZH1</code>) with A/P invoice data from the transaction file (<code>APTRAN</code>). It matches A/P invoices to inventory receipts based on receipt numbers, updates quantities, amounts, and status, and logs the activity in a printer output file (<code>APLIST</code>). In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing to ensure A/P invoices are reflected in inventory records, which is critical for tracking costs and quantities associated with inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Date and Century Handling:<ul> <li>Retrieves journal date (<code>JRDATE</code>) from the User Data Structure (<code>UDS</code>).</li> <li>Converts <code>JRDATE</code> to <code>JRYMD</code> (YYYYMMDD) by multiplying by 10000.01.</li> <li>Extracts year (<code>JYR</code>) and compares it to <code>Y2KCMP</code> (80, from <code>UDS</code>):</li> <li>If <code>JYR &gt;= 80</code>, sets century (<code>JCN</code>) to <code>Y2KCEN</code> (19).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 19 + 1 = 20).</li> <li>Combines century and <code>JRYMD</code> into <code>JRYM8</code> (century + YYYYMMDD).</li> </ul> </li> <li>Variable Setup:<ul> <li>Clears indicators <code>20</code>, <code>90</code>, <code>91</code>, <code>92</code> and sets zero fields (<code>ZERO2</code>, <code>ZERO4</code>, <code>ZERO6</code>, <code>ZERO8</code>) to 0.</li> <li>Sets <code>ONCE</code> to 1 to ensure date processing occurs only once.</li> </ul> </li> <li> <p>Amount Setup:</p> <ul> <li>Moves <code>APGRAM</code> (gross amount from <code>APTRAN</code>) to <code>APAMT</code> (working amount field).</li> </ul> </li> <li> <p>Skip Deleted or Sales Order Records:</p> </li> <li>Checks if <code>ATSORN</code> (sales order number) is zero (<code>IFEQ *ZERO</code>):<ul> <li>If non-zero, skips to <code>END</code> (bypasses posting for sales order-related invoices, per <code>JB01</code> revision).</li> </ul> </li> <li> <p>Checks if header (<code>APHDEL</code>) or detail (<code>APDDEL</code>) delete flags are not <code>'D'</code>:</p> <ul> <li>If either is deleted, skips to <code>END</code>.</li> </ul> </li> <li> <p>Process A/P Invoice:</p> </li> <li>Determine Processing Type:<ul> <li>If indicator <code>20</code> is off (<code>N20</code>), calls <code>NORMAL</code> subroutine (standard invoice processing).</li> <li>If indicator <code>20</code> is on, calls <code>FREIGH</code> subroutine (freight invoice processing, which sets indicator <code>11</code> and calls <code>NORMAL</code>).</li> </ul> </li> <li>Receipt Key:<ul> <li>Builds <code>RCTKEY</code> (9 bytes) by combining <code>APCONO</code> (company number, 3 bytes) and <code>APREC#</code> (receipt number, 6 bytes).</li> </ul> </li> <li> <p>Log to Printer:</p> <ul> <li>Writes detail record to <code>APLIST</code> (<code>EXCPTDTL</code>) with invoice details (company, vendor, invoice number, date, G/L, receipt, gallons, amount, status).</li> </ul> </li> <li> <p>NORMAL Subroutine:</p> </li> <li> <p>Match Receipt (Exact Match):</p> <ul> <li>Sets lower limit (<code>SETLL</code>) on <code>INFIL1</code> and <code>INTZH1</code> using <code>RCTKEY</code>.</li> <li>Reads <code>INFIL1</code> (indicator <code>76</code>) until end-of-file (<code>90</code>) or match.</li> <li>If end-of-file on <code>INFIL1</code>, switches to <code>INTZH1</code> (indicator <code>77</code>) and reads.</li> <li>If a match is found (<code>N90</code>):</li> <li>Calculates remaining quantity (<code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>If <code>APGAL</code> (A/P gallons) equals <code>RNQTY</code>, updates the record:<ul> <li>Adds <code>APAMT</code> to <code>IHAPTD</code> (total dollars).</li> <li>Adds <code>APGAL</code> to <code>IHAPTQ</code> (total quantity).</li> <li>Sets <code>IHCLCD</code> (status) to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates <code>IHCLDT</code> (closed date, YMD) and <code>IHCLD8</code> (closed date, CYMD) with <code>JRYMD</code> and <code>JRYM8</code>.</li> <li>Updates <code>APINVN</code> (invoice number) and <code>IHPONO</code> (PO number).</li> <li>Writes update to <code>INFIL1</code> or <code>INTZH1</code> (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT01</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> </ul> </li> <li> <p>Match Receipt (Partial Match):</p> <ul> <li>If no exact match, re-reads <code>INFIL1</code> and <code>INTZH1</code> to find a record with more gallons than <code>APGAL</code>.</li> <li>If found (<code>N90</code> and <code>APGAL &lt; RNQTY</code>):</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code> as above.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT02</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>No Match, Update First Record:</p> <ul> <li>If no match and <code>APGAL</code> is non-zero, reads first record from <code>INFIL1</code> or <code>INTZH1</code>.</li> <li>Updates <code>IHAPTD</code>, <code>IHAPTQ</code>, <code>IHCLCD</code>, <code>IHCLDT</code>, <code>IHCLD8</code>, <code>APINVN</code>, and <code>IHPONO</code>.</li> <li>Writes update (<code>EXCPTUPDRCP</code>).</li> <li>Logs to <code>APLIST</code> (<code>EXCPTDT03</code>).</li> <li>Clears <code>APAMT</code> and <code>APGAL</code>.</li> </ul> </li> <li> <p>FREIGH Subroutine:</p> </li> <li>Sets indicator <code>11</code> to flag freight processing.</li> <li>Calls <code>NORMAL</code> subroutine to process freight invoices similarly to standard invoices.</li> <li> <p>Clears indicator <code>11</code>.</p> </li> <li> <p>End Processing:</p> </li> <li>Continues reading <code>APTRAN</code> records until end-of-file.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Skip Sales Orders (<code>JB01</code>, 07/08/10):</li> <li>Bypasses posting if <code>ATSORN</code> (sales order number) is non-zero, as sales order invoices are not posted to inventory receipts.</li> <li>Skip Deleted Records:</li> <li>Skips records where <code>APHDEL</code> or <code>APDDEL</code> is <code>'D'</code> (deleted).</li> <li>Dual File Support (<code>JB02</code>, 09/18/14):</li> <li>Checks both <code>INFIL1</code> (inventory file) and <code>INTZH1</code> (holding file) for receipt matches, switching if no match is found in <code>INFIL1</code>.</li> <li>Quantity Matching:</li> <li>Matches A/P gallons (<code>APGAL</code>) to remaining receipt quantity (<code>IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>).</li> <li>Updates the first record with sufficient gallons or the first available record if no match.</li> <li>Status Update:</li> <li>Sets <code>IHCLCD</code> to <code>'O'</code> (open) or <code>'C'</code> (closed) based on <code>APCLCD</code>.</li> <li>Updates closed dates (<code>IHCLDT</code>, <code>IHCLD8</code>) with journal date.</li> <li>Freight Invoices:</li> <li>Processes freight invoices separately but uses the same <code>NORMAL</code> logic (indicator <code>11</code> flags freight).</li> <li>Printer Logging (<code>JB03</code>, 09/18/14):</li> <li>Logs all updates to <code>APLIST</code> for debugging and verification, with distinct exception records (<code>DTL</code>, <code>DT01</code>, <code>DT02</code>, <code>DT03</code>).</li> <li>Y2K Compliance:</li> <li>Handles dates using <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) to determine 19xx or 20xx century.</li> <li>Field Updates (<code>MG04</code>, 09/15/15):</li> <li>Supports expanded <code>INFIL1</code> (448 bytes) and <code>APINVN</code> (20 bytes).</li> <li>Includes PO number (<code>IHPONO</code>) from the purchase order system.</li> </ol>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ul> <li>Input:</li> <li><code>APTRAN</code> (Primary Input, <code>IP</code>):<ul> <li>A/P transaction file.</li> <li>Fields: <code>APHDEL</code> (header delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>ATCNVO</code> (canceled voucher), <code>APINVD</code> (invoice date), <code>ATSORN</code> (sales order number), <code>ATSSRN</code> (sales sequence number), <code>APINVN</code> (invoice number), <code>APIN10</code> (short invoice number), <code>APDDEL</code> (detail delete flag), <code>APREC#</code> (receipt number), <code>APGAL</code> (gallons), <code>APGL</code> (G/L number), <code>APGRAM</code> (gross amount), <code>APCLCD</code> (open/closed status).</li> </ul> </li> <li><code>INFIL1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory file (448 bytes).</li> <li>Fields: <code>IHNQTY</code> (net quantity), <code>IHNQTF</code> (net quantity fraction), <code>IHUNMS</code> (unit of measure), <code>IHAPID</code> (last invoice date), <code>IHAPLE</code> (last expense G/L), <code>IHAPLP</code> (last purchase journal), <code>IHAPTQ</code> (total quantity), <code>IHAPTF</code> (total quantity fraction), <code>IHAPTD</code> (total dollars), <code>IHCLCD</code> (open/closed status), <code>IHCLDT</code> (closed date, YMD), <code>IHCLD8</code> (closed date, CYMD), <code>IHAPI#</code> (last invoice number), <code>IHPONO</code> (PO number).</li> </ul> </li> <li><code>INTZH1</code> (Update/Input, <code>UF</code>):<ul> <li>Inventory transaction holding file (592 bytes).</li> <li>Fields: Same as <code>INFIL1</code> but with different positions (e.g., <code>IHAPTD</code> at 171-179, <code>IHCLCD</code> at 170).</li> </ul> </li> <li>Output:</li> <li><code>INFIL1</code> (Update, <code>E 76 UPDRCP</code>):<ul> <li>Updates inventory receipt records with A/P data.</li> </ul> </li> <li><code>INTZH1</code> (Update, <code>E 77 UPDRCP</code>):<ul> <li>Updates holding file records with A/P data.</li> </ul> </li> <li><code>APLIST</code> (Printer, <code>O</code>):<ul> <li>Printer output file for logging (164 bytes).</li> <li>Logs invoice details (<code>DTL</code>) and update details (<code>DT01</code>, <code>DT02</code>, <code>DT03</code>) with fields like company, vendor, invoice number, date, G/L, receipt, gallons, amount, status, and journal data.</li> </ul> </li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The <code>AP210</code> program does not call external programs. It relies on internal subroutines (<code>NORMAL</code>, <code>FREIGH</code>) for processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#role-in-ap200-ocl","title":"Role in AP200 OCL","text":"<p>In the <code>AP200</code> OCL procedure, <code>AP210</code> is called after the main Purchase Journal processing (<code>AP200</code>) and journal summarization (<code>AP205</code>) to: - Post A/P invoice data (amounts, quantities, invoice numbers, PO numbers) to inventory receipt records in <code>INFIL1</code> or <code>INTZH1</code>. - Ensure inventory records reflect A/P costs and quantities, maintaining alignment between financial and inventory systems. - Log updates to <code>APLIST</code> for verification, especially useful for debugging (per <code>JB03</code>). - Support freight invoices and bypass sales order-related invoices, ensuring accurate inventory cost tracking.</p> <p>This step is critical for integrating A/P transactions with inventory management, ensuring that receipt records are updated with financial data for accurate cost tracking and reporting.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/AP210%20RPG/#key-notes","title":"Key Notes","text":"<ul> <li>Revisions:</li> <li><code>JB01</code> (07/08/10): Bypasses sales order invoices.</li> <li><code>JB02</code> (09/18/14): Adds support for <code>INTZH1</code> (holding file).</li> <li><code>JB03</code> (09/18/14): Adds <code>APLIST</code> for logging.</li> <li><code>MG04</code> (09/15/15): Expands <code>INFIL1</code> and adds invoice number (<code>APINVN</code>) and PO number (<code>IHPONO</code>).</li> <li>File Switching:</li> <li>Dynamically switches between <code>INFIL1</code> and <code>INTZH1</code> if no match is found, ensuring flexibility in receipt processing.</li> <li>Error Handling:</li> <li>Skips deleted records and non-inventory invoices (e.g., sales orders).</li> <li>Logs all updates for traceability.</li> <li>Quantity Logic:</li> <li>Matches A/P gallons to receipt quantities, updating the first suitable record if no exact match is found.</li> </ul> <p>If you need further details on specific fields, logic, or integration with other OCL steps, let me know!</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/","title":"Function Requirement Document: Process Accounts Payable Transactions and Post to General Ledger and Inventory","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) transactions, create and manage vouchers, generate general ledger journal entries, summarize A/P entries, post invoice details to inventory receipts, and produce detailed financial and diagnostic reports. This encompasses the end-to-end processing of A/P transactions, including voucher creation, journal entry generation, summarization, and posting to inventory receipts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#components","title":"Components","text":"<p>The system consists of three interconnected RPG programs: 1. AP200 (Purchase Register): Processes A/P transactions, creates vouchers, updates related files, and generates journal entries and a Purchase Register report. 2. AP205 (Purchase Journal): Summarizes A/P journal entries and generates general ledger entries and a Purchase Journal report. 3. AP210 (A/P to Inventory Posting): Posts A/P invoice details to inventory receipt records, updating quantities and amounts.</p>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#inputs","title":"Inputs","text":"<ul> <li>Purchase Journal Date (<code>JRDATE</code>): MMDDYY format, required.</li> <li>Cash Disbursements Date (<code>CDDATE</code>): MMDDYY format, required if prepaid/ACH/wire/employee transactions exist.</li> <li>Purchase Journal Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Required if 13 accounting periods are enabled.</li> <li>Cash Disbursements Period/Year (<code>CDPD</code>, <code>CDPDYY</code>): Required if 13 periods and prepaid transactions exist.</li> <li>APTRAN: Transaction file with header (company, vendor, invoice, dates, hold codes, sales order, carrier ID) and detail (expense G/L, amount, discount, gallons, receipt number, purchase order) records.</li> <li>APCONT: A/P control file (company name, journal number, next voucher number).</li> <li>APVEND: Vendor master file (year-to-date purchases, balance).</li> <li>APOPENH, APOPEND, APOPENV: Open A/P files for voucher records.</li> <li>APINVH: Invoice header file for invoice details.</li> <li>FRCINH, FRCFBH: Freight invoice and override header files for A/P status.</li> <li>POFILEH, POFILED: Purchase order files.</li> <li>APPJJR: Journal register file for input to summarization.</li> <li>AP205S: Sort/index file for <code>APPJJR</code>.</li> <li>INFIL1, INTZH1: Inventory receipt and holding files for invoice posting.</li> <li>Control Files: <code>GSCONT</code> (system controls), <code>GLCONT</code> (G/L controls), <code>GSTABL</code> (period end dates).</li> <li>System Date and Time: For date conversions and reporting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#outputs","title":"Outputs","text":"<ul> <li>APPJJR: Journal register with G/L entries (A/P, expense, intercompany).</li> <li>APPYTR: Payment transaction records for prepaid/ACH/wire/employee/utility vouchers.</li> <li>APHISTH, APHISTD, APHISTV: History files for canceled vouchers.</li> <li>TEMGEN: General ledger entries (detailed and summarized).</li> <li>APOPENH, APOPEND, APOPENV: Updated open A/P records.</li> <li>APVEND: Updated vendor balances.</li> <li>APINVH: Updated invoice headers.</li> <li>FRCINH, FRCFBH: Updated freight A/P status.</li> <li>POFILEH, POFILED: Updated purchase order files (if enabled).</li> <li>INFIL1, INTZH1: Updated inventory receipt records.</li> <li>APPRINT (AP200, AP205): Purchase Register and Purchase Journal reports.</li> <li>APLIST: Diagnostic report for inventory posting.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#process-steps","title":"Process Steps","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#1-validate-input-parameters","title":"1. Validate Input Parameters","text":"<ul> <li>Validate <code>JRDATE</code> and <code>CDDATE</code> for correct format (MMDDYY) and fiscal year compliance using <code>GLCONT</code> (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), validate <code>KYPD</code> (1\u201313) and <code>CDPD</code> (1\u201313) against period end dates in <code>GSTABL</code> (<code>TBPDDT</code>).</li> <li>Check for prepaid/ACH/wire/employee transactions (<code>ATPAID = 'P', 'A', 'W', 'E'</code>) in <code>APTRAN</code> to determine if <code>CDDATE</code> is required.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#2-initialize-system","title":"2. Initialize System","text":"<ul> <li>Convert journal date (<code>JRDATE</code>) to Y2K-compliant format (e.g., <code>JRYMD</code>, <code>JRYM8</code>).</li> <li>Convert <code>JRDATE</code> to YYYYMMDD (<code>PJYMD</code>) with Y2K-compliant century (19xx if year \u2265 80, else 20xx).</li> <li>Retrieve company details (<code>APCONT</code>) and initialize totals, counters, and separators.</li> <li>Retrieve next journal (<code>ACJRNL</code>) and voucher numbers (<code>ACNXVO</code>) from <code>APCONT</code>.</li> <li>Set journal ID (<code>JRNID</code>) to <code>'PJ'</code>, <code>'WT'</code>, or <code>'EE'</code> based on transaction type.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#3-process-ap-transactions-ap200","title":"3. Process A/P Transactions (AP200)","text":"<ul> <li>Read <code>APTRAN</code> header and detail records.</li> <li>For each header:</li> <li>Skip if deleted (<code>ATHDEL = 'D'</code>); clear <code>FRAPST</code> in <code>FRCINH</code>/<code>FRCFBH</code> if <code>'Y'</code>.</li> <li>Assign voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention vouchers.</li> <li>Set flags for prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>), single check (<code>ATSNGL = 'S'</code>), or hold (<code>ATHOLD = 'H', 'A', 'W', 'E', 'U'</code>).</li> <li>Write payment transactions (<code>APPYTR</code>) for prepaid, ACH, wire, employee, or utility auto-pay vouchers.</li> <li>Calculate retention amount (<code>ATRTAM = ATAMT * ATRTPC / 100</code>) if <code>ATRTPC \u2260 0</code>.</li> <li>For each detail:</li> <li>Calculate discounts (<code>ATDISC = ATAMT * (ATDSPC / 100)</code>) if discount percent is non-zero AND <code>ATDISC = 0</code>.</li> <li>Handle retentions: compute retention amount (<code>ATRTAM = ATAMT * (ATRTPC / 100)</code>), adjust <code>ATAMT</code>, and set retention discount (<code>ATRTDS</code>). For 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Update level 1 totals (<code>L1AMT</code>, <code>L1DISC</code>, <code>L1RTAM</code>, <code>L1RTDS</code>, <code>L1PAMT</code>, <code>L1FAMT</code>).</li> <li>Generate intercompany journal entries (<code>APPJJR</code>) if company numbers differ (<code>ATCONO \u2260 ATEXCO</code>).</li> <li>Update P/O files (<code>POFILEH</code>, <code>POFILED</code>) if enabled (<code>ACPOYN = 'Y'</code>) with amounts (<code>POAPPU</code>, <code>PDAPV$</code>) and receipt data (<code>PDRCQT</code>, <code>PDRCDT</code>, <code>PDCOMP</code>).</li> <li>Update open A/P (<code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>), vendor (<code>APVEND</code>), and invoice (<code>APINVH</code>) files.</li> <li>Write history records (<code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>) for canceled vouchers.</li> <li>Update vendor totals (<code>VN$YTD</code>, <code>VNPURC</code>, <code>VNCBAL</code>) in <code>APVEND</code>.</li> <li>Accumulate company totals (<code>L2AMT</code>, <code>L2DISC</code>, <code>L2PAMT</code>, <code>L2FAMT</code>).</li> <li>Produce Purchase Register report (<code>APPRINT</code>) with voucher details, totals, and special fields (sales order, carrier ID, process type).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#4-summarize-journal-entries-ap205","title":"4. Summarize Journal Entries (AP205)","text":"<ul> <li>Read <code>APPJJR</code> records via <code>AP205S</code> sort file.</li> <li>Summarize A/P entries (<code>PJTYPE = 'AP      '</code>) into a single <code>TEMGEN</code> record per voucher.</li> <li>Write detailed <code>TEMGEN</code> records for non-A/P entries (expense, intercompany).</li> <li>Adjust negative amounts: negate and switch debit (<code>D</code>) to credit (<code>C</code>) or vice versa.</li> <li>Accumulate company-level debit (<code>L4DR</code>) and credit (<code>L4CR</code>) totals.</li> <li>Produce Purchase Journal report (<code>APPRINT</code>) with journal entries, totals, and gallons/receipt details.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#5-post-to-inventory-receipts-ap210","title":"5. Post to Inventory Receipts (AP210)","text":"<ul> <li>Read <code>APTRAN</code> detail records with receipt number (<code>APREC#</code>).</li> <li>Skip records with sales order (<code>ATSORN \u2260 *ZERO</code>) or deleted status (<code>APHDEL = 'D'</code>, <code>APDDEL = 'D'</code>).</li> <li>Match receipt number in <code>INFIL1</code> or <code>INTZH1</code>:</li> <li>If exact match (<code>APGAL = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>), update record.</li> <li>If no exact match, find record with sufficient gallons (<code>APGAL &lt; RNQTY</code>).</li> <li>If no sufficient gallons, update first record.</li> <li>Update <code>INFIL1</code> or <code>INTZH1</code> with invoice date (<code>JRYMD</code>), G/L number (<code>APGL</code>), journal number (<code>JR#</code>), quantities (<code>IHAPTQ</code>, <code>IHAPTF</code>), dollars (<code>IHAPTD</code>), invoice number (<code>APINVN</code>), PO number (<code>IHPONO</code>), and close code (<code>IHCLCD = 'O' or 'C'</code>).</li> <li>Produce diagnostic report (<code>APLIST</code>) with input and updated fields.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#business-rules","title":"Business Rules","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#validation","title":"Validation","text":"<ul> <li>Dates must be valid and within the current fiscal year (<code>GCLSYR</code>, <code>GCFFMO</code>).</li> <li>Periods (1\u201313) must match <code>GSTABL</code> boundaries if 13 periods enabled.</li> <li><code>CDDATE</code> required only if prepaid/ACH/wire/employee transactions exist.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#voucher-management","title":"Voucher Management","text":"<ul> <li>Assign unique voucher numbers (<code>NXTVO</code>) for non-canceled, non-100% retention, and retention vouchers.</li> <li>Support payment types: prepaid (<code>P</code>), ACH (<code>A</code>), wire (<code>W</code>), employee expense (<code>E</code>), utility auto-pay (<code>U</code>).</li> <li>Mark canceled vouchers (<code>ATCNVO \u2260 *ZEROS</code>) as deleted in open A/P files and write to history files.</li> <li>Hold codes (<code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>) affect voucher processing.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#discounts-and-retentions","title":"Discounts and Retentions","text":"<ul> <li>Calculate discounts if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code> (both conditions must be true).</li> <li>For retentions (<code>ATRTPC \u2260 0</code>), compute <code>ATRTAM</code> and adjust <code>ATAMT</code>; for 100% retention, set <code>ATAMT = 0</code> and <code>ATRTAM = original ATAMT</code>.</li> <li>Create separate retention voucher if not 100% retention.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#freight-handling","title":"Freight Handling","text":"<ul> <li>Clear <code>FRAPST</code> in <code>FRCINH</code> or <code>FRCFBH</code> for deleted vouchers if previously flagged (<code>FRAPST = 'Y'</code>).</li> <li>Prioritize <code>FRCFBH</code> over <code>FRCINH</code> for freight status checks.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#intercompany-transfers","title":"Intercompany Transfers","text":"<ul> <li>Generate <code>APPJJR</code> entries for intercompany transactions (<code>ATCONO \u2260 ATEXCO</code>) using intercompany G/L accounts (<code>ACICGL</code>).</li> <li>Generate debit/credit entries for <code>ATCONO \u2260 ATEXCO</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#purchase-orders","title":"Purchase Orders","text":"<ul> <li>Update <code>POFILEH</code>/<code>POFILED</code> if <code>ACPOYN = 'Y'</code> and <code>ATPONO \u2260 blanks</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#journal-summarization","title":"Journal Summarization","text":"<ul> <li>Summarize A/P entries into a single <code>TEMGEN</code> record with fixed description.</li> <li>Negate negative amounts and adjust debit/credit codes accordingly.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#inventory-posting","title":"Inventory Posting","text":"<ul> <li>Skip posting if sales order exists or records are deleted.</li> <li>Match receipts exactly, by sufficient gallons, or use first record if no match.</li> <li>Update inventory records with A/P details and set close status based on <code>APCLCD</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#y2k-compliance","title":"Y2K Compliance","text":"<ul> <li>Convert dates to 8-digit format using century (19xx if year \u2265 80, else 20xx) based on <code>Y2KCMP = 1980</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#reporting","title":"Reporting","text":"<ul> <li>Generate Purchase Register (<code>AP200</code>) with voucher, sales order, carrier ID, and process type details.</li> <li>Generate Purchase Journal (<code>AP205</code>) with summarized A/P and detailed non-A/P entries, including gallons/receipt.</li> <li>Generate diagnostic report (<code>AP210</code>) for inventory posting verification.</li> <li>Include sales order (<code>ATSORN</code>), sequence (<code>ATSSRN</code>), carrier ID (<code>ATCAID</code>), process type (<code>ATPTYP</code>), and discount due date (<code>ATDSDT</code>) in reports.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#calculations","title":"Calculations","text":""},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#date-conversion","title":"Date Conversion","text":"<ul> <li><code>YYYYMMDD = JRDATE * 10000.01</code>, century set to 19 if year \u2265 1980, else 20.</li> <li>Alternative: <code>YYYYMMDD = MMDDYY * 10000.01</code>, with century (19xx if year \u2265 80, else 20xx).</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#financial-calculations","title":"Financial Calculations","text":"<ul> <li>Discount: <code>ATDISC = ATAMT * (ATDSPC / 100)</code> if <code>ATDSPC \u2260 0</code> and <code>ATDISC = 0</code>.</li> <li>Retention Amount: <code>ATRTAM = ATAMT * (ATRTPC / 100)</code>.</li> <li>Remaining Quantity (Inventory): <code>RNQTY = IHNQTY + IHNQTF - IHAPTQ - IHAPTF</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#totals","title":"Totals","text":"<ul> <li>Voucher Level: <code>L1AMT += ATAMT</code>, <code>L1DISC += ATDISC</code>, <code>L1RTAM += ATRTAM</code>, <code>L1RTDS += ATRTDS</code>, <code>L1PAMT += ATPRAM</code>, <code>L1FAMT += ATFRAM</code>.</li> <li>Company Level: <code>L2AMT += L1AMT</code>, <code>L2DISC += L1DISC</code>, <code>L2PAMT += L1PAMT</code>, <code>L2FAMT += L1FAMT</code>.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#constraints","title":"Constraints","text":"<ul> <li>Purchase order updates (<code>POFILEH</code>, <code>POFILED</code>) are controlled by <code>ACPOYN = 'Y'</code> flag.</li> <li><code>APLIST</code> is temporary for diagnostic purposes and may be removed.</li> <li>13-period accounting supported if <code>KYYYPD \u2260 0</code>.</li> <li>System supports various transaction types including utility auto-pay transactions.</li> </ul>"},{"location":"accounts-payable/01%20Voucher%20Entry/AP200%20OCL%20Convert%20Voucher%20to%20Payable/Summary%20AP200%20Purchase%20Journal/#error-handling","title":"Error Handling","text":"<ul> <li>Validate all input parameters before processing.</li> <li>Handle missing or invalid data gracefully.</li> <li>Provide diagnostic reporting for inventory posting verification.</li> <li>Maintain audit trail through history files for canceled vouchers.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/","title":"196OCL","text":"<p>The provided files, <code>AP196.ocl36.txt``</code> and <code>AP196.rpg36 (1).txt</code>, describe an A/P Voucher Status Code Update process within an IBM AS/400 (or IBM i) environment. The first file (<code></code>AP196.ocl36.txt<code>`</code>) is an OCL (Operation Control Language) script that controls the execution flow, while the second (<code>AP196.rpg36 (1).txt</code>) is an RPG III program that handles the core logic for updating voucher status codes. Below, I\u2019ll explain what these files do, outline the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#overview-of-what-these-files-do","title":"Overview of What These Files Do","text":"<ul> <li> <p>AP196.ocl36.txt<code>`</code> (OCL Script):   This script orchestrates the execution of the A/P voucher status code update process. It defines file allocations, conditionally runs the <code>AP196</code> program to modify voucher status codes, and optionally calls <code>AP197</code> to generate an edit report if errors are detected. The script ensures that the process terminates if no records are available for processing and manages output queues for reports.</p> </li> <li> <p><code>AP196.rpg36 (1).txt</code> (RPG III Program):   This is the core program (<code>AP196</code>) that provides an interactive interface for users to modify the status codes (e.g., hold codes) of accounts payable (A/P) vouchers. It validates input data (company number, vendor number, voucher number), retrieves related records, allows users to update hold codes and descriptions, and updates or deletes records in the voucher control file (<code>APVCTR</code>). The program uses a workstation display to interact with the user via two screens: one for input validation and another for status code modification.</p> </li> </ul> <p>Together, these files implement a process to: - Allow users to update or delete the hold status of A/P vouchers. - Validate input against master files (company, vendor, open payables). - Generate an edit report (via <code>AP197</code>) if errors occur. - Ensure data integrity by checking for valid records and handling deletions appropriately.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#process-steps","title":"Process Steps","text":"<ol> <li>OCL Script Execution (<code>AP196.ocl36.txt</code>):</li> <li>File Allocation:<ul> <li>Allocates files: <code>APVCTR</code> (voucher control), <code>APCONT</code> (company master), <code>APVEND</code> (vendor master), and <code>APOPNH</code> (open payables header).</li> <li>Uses shared disposition (<code>DISP-SHR</code>) to allow concurrent access.</li> </ul> </li> <li>Initial Check:<ul> <li>Checks if the <code>APVCTR</code> file (<code>?9?APVC?WS?</code>) is empty (record count = 00000000).</li> <li>If empty, the process jumps to the <code>END</code> tag and terminates.</li> </ul> </li> <li>Run <code>AP196</code>:<ul> <li>Loads and executes the <code>AP196</code> program to handle interactive voucher status updates.</li> </ul> </li> <li>Error Handling and Reporting:<ul> <li>If <code>AP196</code> processes records (i.e., <code>APVCTR</code> is not empty after execution), it loads <code>AP197</code> to generate an edit report.</li> <li>Overrides the printer file (<code>LIST</code>) to direct output to either <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on a condition (<code>?9?/G</code>).</li> <li>Copies the report to an output queue (<code>APSTEDIT</code>) with the name \u201cAP STATUS CHG EDIT\u201d and moves it to <code>JUNKOUTQ</code> if necessary.</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>If no records remain in <code>APVCTR</code>, the process ends.</li> </ul> </li> <li> <p>RPG Program Execution (<code>AP196.rpg36</code>):</p> </li> <li>Screen 1 (AP196S1):<ul> <li>Displays a screen to accept user input: company number (<code>CONO</code>), vendor number (<code>VEND</code>), and voucher number (<code>VOUCH</code>).</li> <li>Validates input by chaining (looking up) records in:</li> <li><code>APCONT</code> (company master) to verify the company number.</li> <li><code>APVEND</code> (vendor master) to verify the vendor number.</li> <li><code>APVCTR</code> (voucher control) to check if a voucher record exists.</li> <li><code>APOPNH</code> (open payables header) to retrieve additional voucher details.</li> <li>If any validation fails (e.g., invalid company, vendor, or voucher), an error message is displayed (from the <code>COM</code> array), and the user is prompted to correct the input.</li> <li>If valid, retrieves the current hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) from either <code>APVCTR</code> or <code>APOPNH</code> and proceeds to Screen 2.</li> </ul> </li> <li>Screen 2 (AP196S2):<ul> <li>Displays the validated voucher details along with the current hold code and description.</li> <li>Allows the user to modify the hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>).</li> <li>Updates the <code>APVCTR</code> file with the new values or deletes the record if requested.</li> </ul> </li> <li>Function Key Handling:<ul> <li>KA (Rekey): Clears the screen and redisplays Screen 1 for new input without adding or updating records.</li> <li>KD (Delete): Deletes the voucher record from <code>APVCTR</code> if it exists.</li> <li>KG (End of Job): Terminates the program.</li> </ul> </li> <li>Record Processing:<ul> <li>If a record exists in <code>APVCTR</code>, it updates the hold code and description.</li> <li>If no record exists, it may create a new record or display an error.</li> <li>Deletes records from <code>APVCTR</code> when the delete function is invoked.</li> </ul> </li> <li>Error Handling:<ul> <li>Sets indicators (e.g., 81, 82, 90, 91) to control screen display and error messages.</li> <li>Clears fields after each operation to prevent data carryover.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input Validation:</li> <li>The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> and not be marked as deleted (<code>VNDEL \u2260 'D'</code>).</li> <li>The voucher number (<code>VOUCH</code>) must correspond to a valid record in either <code>APVCTR</code> or <code>APOPNH</code>. If not found in <code>APVCTR</code>, it checks <code>APOPNH</code>.</li> <li> <p>Invalid inputs trigger error messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cINVALID VENDOR #\u201d, \u201cINVALID COMBINATION\u201d).</p> </li> <li> <p>Hold Code and Description:</p> </li> <li>The hold code (<code>HOLD</code>) and hold description (<code>HLDDSC</code>) can be updated in <code>APVCTR</code>.</li> <li>If a voucher exists in <code>APOPNH</code>, its hold code (<code>OPHALT</code>) and description (<code>OPHDES</code>) are used as defaults if no <code>APVCTR</code> record exists.</li> <li> <p>The hold code and description are written to <code>APVCTR</code> when updated or added.</p> </li> <li> <p>Record Deletion:</p> </li> <li>A voucher record can be deleted from <code>APVCTR</code> using the KD function key.</li> <li> <p>Deletion is only performed if the record exists in <code>APVCTR</code>.</p> </li> <li> <p>Error Reporting:</p> </li> <li>If errors occur during processing, <code>AP197</code> is called to generate an edit report listing issues.</li> <li> <p>The report is sent to a specified output queue for review.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that only valid vouchers are processed by checking master files.</li> <li>Fields are cleared after each operation to prevent residual data from affecting subsequent transactions.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the OCL script and RPG program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Update file (<code>UF</code> in RPG).</li> <li>Fields:<ul> <li><code>ATKEY</code> (key field, 12 bytes, includes company, vendor, and voucher numbers).</li> <li><code>ATHOLD</code> (hold code, 1 byte).</li> <li><code>ATHLDS</code> (hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Stores voucher status codes and descriptions. Updated or deleted by <code>AP196</code>.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>ACDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates company numbers and retrieves company names for display.</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>VNCO</code> (company number, 29 bytes).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNNAME</code> (vendor name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Validates vendor numbers and retrieves vendor names for display.</p> </li> <li> <p><code>APOPNH</code> (Open Payables Header File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>OPDEL</code> (delete flag, 1 byte, 'D' indicates deleted).</li> <li><code>OPCONO</code> (company number, 29 bytes).</li> <li><code>OPVEND</code> (vendor number, 5 bytes).</li> <li><code>OPVONO</code> (voucher number, 5 bytes).</li> <li><code>OPHALT</code> (hold code, 1 byte).</li> <li><code>OPHDES</code> (hold description, 25 bytes).</li> <li>Other fields (e.g., invoice date, due date, gross amount) are defined but not used in this context.</li> </ul> </li> <li> <p>Purpose: Provides voucher details if no record exists in <code>APVCTR</code>. Supplies default hold code and description.</p> </li> <li> <p><code>SCREEN</code> (Workstation File):</p> </li> <li>Type: Combined file (<code>CP</code> in RPG).</li> <li>Purpose: Defines the interactive display for user input and output. Uses two formats:<ul> <li><code>AP196S1</code>: Input screen for company, vendor, and voucher numbers.</li> <li><code>AP196S2</code>: Update screen for hold code and description.</li> </ul> </li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li><code>AP197</code>:</li> <li>Called By: <code>AP196.ocl36.txt</code> (OCL script).</li> <li>Purpose: Generates an edit report listing errors or changes made during the voucher status update process.</li> <li>Condition: Executed only if <code>APVCTR</code> contains records after <code>AP196</code> runs (i.e., not empty).</li> <li>Files Used: <code>APVCTR</code>, <code>APVEND</code>, <code>APCONT</code> (same as <code>AP196</code>).</li> <li>Output: Report sent to <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>, then copied to <code>JUNKOUTQ</code> withNo other external programs are called by the RPG program itself.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/196OCL/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>AP196.ocl36.txt script sets up the environment, runs <code>AP196 program</code>, and conditionally calls <code>AP196</code> for reporting, ensuring efficient process control.</li> <li>The AP196 program (RPG III)** provides an interactive interface for updating or deleting voucher status codes, with robust validation against master files.</li> <li>Business rules ensure data integrity through validation and deletion checks.</li> <li>Tables include voucher control (<code>APVCTR</code>), company master (<code>APCONT</code>), vendor master (<code>VEND</code>), and open payables (<code>APOPNH</code>).</li> <li>External program <code>AP197</code> is used for error reporting.</li> </ul> <p>This process is typical of legacy AS/400 applications for managing A/P workflows, focusing on user-driven updates with strong validation to maintain accurate financial records.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/","title":"197RPG","text":"<p>The <code>AP197.rpg36.txt</code> file is an RPG III program (<code>AP197</code>) designed to generate an edit report for the A/P Voucher Status Code Update process, complementing the functionality of <code>AP196</code> described previously. Below, I provide a detailed explanation of what this program does, including its process steps, business rules, tables used, and any external programs called, formatted consistently with the prior response.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#overview-of-what-ap197-does","title":"Overview of What AP197 Does","text":"<p>The <code>AP197</code> program is responsible for producing a printed report that lists the details of voucher status code changes made by the <code>AP196</code> program. It reads records from the voucher control file (<code>APVCTR</code>), retrieves associated company and vendor information, and formats a report to display vendor details, voucher numbers, current status codes, and their descriptions. The report serves as an audit trail or error-checking mechanism to verify the modifications made to voucher status codes, highlighting whether prior hold codes existed.</p> <p>This program is called by the OCL script (<code>AP196.ocl36.txt</code>) when records remain in <code>APVCTR</code> after <code>AP196</code> execution, ensuring that any changes are documented for review.</p>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Retrieves the system time and date (<code>TIMDAT</code>) and formats them into <code>SYSTIM</code> (time) and <code>SYSDAT</code> (date) for inclusion in the report header.</li> <li>Initializes the page counter (<code>PAGE</code>) to zero.</li> <li> <p>Sets a separator line (<code>SEP</code>) to \"* \" for formatting the report.</p> </li> <li> <p>Processing by Company (Level Break L2):</p> </li> <li>Loops through records in <code>APVCTR</code> grouped by company number (<code>ATCONO</code>), using the level break indicator <code>L2</code>.</li> <li> <p>For each company:</p> <ul> <li>Chains (looks up) the company number in <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>).</li> <li>If the company is not found (indicator 92 on), the company name is not printed in the report header.</li> <li>Initializes a field <code>L2CLAM</code> (likely a claim amount, but unused in output) to zero.</li> </ul> </li> <li> <p>Detail Record Processing:</p> </li> <li> <p>For each record in <code>APVCTR</code>:</p> <ul> <li>Checks if the open hold code (<code>ATOHLD</code>) and open hold description (<code>ATOHDS</code>) are blank.</li> <li>If both are blank, sets indicator 50 to indicate \"NO PRIOR HOLD CODE\" in the report.</li> <li>Constructs a vendor key (<code>VENKEY</code>) by combining the company number (<code>ATCONO</code>) and vendor number (<code>ATVEND</code>).</li> <li>Chains the vendor key to <code>APVEND</code> to retrieve the vendor name (<code>VNAME</code>).</li> <li>If the vendor is not found (indicator 99 on), clears the vendor name (<code>VENDNM</code>) to blanks.</li> <li>Writes a detail line to the report (<code>LIST</code>), including:</li> <li>Vendor number (<code>ATVEND</code>).</li> <li>Vendor name (<code>VENDNM</code>).</li> <li>Voucher number (<code>ATVOUC</code>).</li> <li>Current hold code (<code>ATHOLD</code>).</li> <li>Current hold description (<code>ATHLDS</code>).</li> <li>Open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>), if present; otherwise, \"NO PRIOR HOLD CODE\" is printed.</li> </ul> </li> <li> <p>Report Formatting:</p> </li> <li>Outputs a report header for each company (on <code>L2</code> break or overflow):<ul> <li>Includes the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), and system date (<code>SYSDAT</code>).</li> <li>Prints a title: \"A/P VOUCHER STATUS CODE MODIFY EDIT\" with the system time (<code>SYSTIM</code>).</li> </ul> </li> <li>Outputs column headings:<ul> <li>\"VENDOR\", \"NAME\", \"VOUCHER NUMBER\", \"STATUS CODE\", \"CODE DESCRIPTION\", \"CURRENT VALUES\".</li> </ul> </li> <li>Uses separator lines (<code>SEP</code>) to visually separate sections.</li> <li> <p>Handles overflow (<code>OF</code>) to ensure proper pagination.</p> </li> <li> <p>Output Generation:</p> </li> <li>Writes the formatted report to the printer file (<code>LIST</code>), which is directed to an output queue (e.g., <code>QUSRSYS/APSTEDIT</code> or <code>QUSRSYS/TESTOUTQ</code>) as specified in the OCL script.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>The program assumes that records in <code>APVCTR</code> are valid, as they are pre-processed by <code>AP196</code>.</li> <li>Company numbers (<code>ATCONO</code>) are validated against <code>APCONT</code>. If not found, the company name is omitted from the report header.</li> <li> <p>Vendor numbers (<code>ATVEND</code>) are validated against <code>APVEND</code>. If not found, the vendor name is set to blanks in the report.</p> </li> <li> <p>Hold Code Reporting:</p> </li> <li>If the open hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>) are both blank, the report indicates \"NO PRIOR HOLD CODE\".</li> <li> <p>Otherwise, the open hold code and description are printed to show the prior status.</p> </li> <li> <p>Report Structure:</p> </li> <li>The report is grouped by company number (<code>ATCONO</code>), with a header printed for each company.</li> <li>Detail lines list each voucher's status, including current and prior hold codes.</li> <li> <p>Page breaks are managed using the overflow indicator (<code>OF</code>) and level break (<code>L2</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li>Missing company or vendor records do not halt the program; instead, blank values are used in the report.</li> <li> <p>The program does not modify any files, ensuring it is read-only and safe for audit purposes.</p> </li> <li> <p>Output Destination:</p> </li> <li>The report is sent to the printer file (<code>LIST</code>), with the output queue controlled by the OCL script (<code>AP196.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#tables-used","title":"Tables Used","text":"<p>The following files (tables) are referenced in the <code>AP197</code> program:</p> <ol> <li><code>APVCTR</code> (Voucher Control File):</li> <li>Type: Input primary file (<code>IP</code> in RPG).</li> <li>Fields:<ul> <li><code>ATDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>ATCONO</code> (company number, 2 bytes, used for level break and lookup).</li> <li><code>ATVEND</code> (vendor number, 5 bytes).</li> <li><code>ATVOUC</code> (voucher number, 5 bytes).</li> <li><code>ATHOLD</code> (current hold code, 1 byte).</li> <li><code>ATHLDS</code> (current hold description, 25 bytes).</li> <li><code>ATOHLD</code> (open hold code, 1 byte).</li> <li><code>ATOHDS</code> (open hold description, 25 bytes).</li> </ul> </li> <li> <p>Purpose: Primary input file containing voucher status records to be reported.</p> </li> <li> <p><code>APCONT</code> (Company Master File):</p> </li> <li>Type: Input chained file (<code>IC</code> in RPG).</li> <li>Fields:<ul> <li><code>ACNAME</code> (company name, 30 bytes).</li> </ul> </li> <li> <p>Purpose: Provides company names for the report header, looked up by company number (<code>ATCONO</code>).</p> </li> <li> <p><code>APVEND</code> (Vendor Master File):</p> </li> <li>Type: Input file (<code>IF</code> in RPG).</li> <li>Fields:<ul> <li><code>VNDEL</code> (delete flag, 1 byte, not used in output).</li> <li><code>VNCO</code> (company number, 29 bytes, not used in output).</li> <li><code>VNVEND</code> (vendor number, 5 bytes).</li> <li><code>VNAME</code> (vendor name, 30 bytes).</li> <li><code>VNADD1</code> (address line 1, 30 bytes, not used in output).</li> </ul> </li> <li> <p>Purpose: Provides vendor names for the report, looked up by a composite key of company and vendor numbers.</p> </li> <li> <p><code>LIST</code> (Printer File):</p> </li> <li>Type: Output file (<code>O</code> in RPG).</li> <li>Purpose: Defines the report output format, with a line length of 132 characters. Used to print the edit report.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:   The <code>AP197</code> program does not call any external programs. It is a standalone report generator invoked by the OCL script (<code>AP196.ocl36.txt</code>) when needed.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP196%20OCL%20Status%20Code%20Update/197RPG/#detailed-summary","title":"Detailed Summary","text":"<ul> <li>Purpose: The <code>AP197</code> program generates an edit report to document changes to voucher status codes made by <code>AP196</code>, serving as an audit or verification tool.</li> <li>Process: Reads <code>APVCTR</code> records, retrieves company and vendor details, and formats a report with headers, column headings, and detail lines showing voucher status codes and descriptions.</li> <li>Business Rules: Validates company and vendor data, handles missing records gracefully, and flags vouchers with no prior hold codes.</li> <li>Tables: Uses <code>APVCTR</code> (primary input), <code>APCONT</code> (company lookup), <code>APVEND</code> (vendor lookup), and <code>LIST</code> (report output).</li> <li>External Programs: None; operates independently under the control of the OCL script.</li> </ul> <p>This program is a typical AS/400 reporting application, designed to provide a clear, structured output for financial oversight in an accounts payable context.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/","title":"AP296 OCL","text":"<p>The provided document, <code>AP296.rpg36.txt</code>, is an RPG program (likely RPG II or RPG III) running on an IBM System/36 or AS/400, called by the OCL program <code>AP296.ocl36.txt</code> for the Accounts Payable (A/P) Voucher Status change Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#process-steps-of-the-ap296-ocl-rpg-program","title":"Process Steps of the AP296 OCL RPG Program","text":"<p>The RPG program <code>AP296</code> processes A/P Open Payable data, updating statuses and generating a report for vouchers with modified status codes (e.g., hold codes). Here\u2019s a step-by-step breakdown of the program\u2019s logic based on the provided code:</p> <ol> <li>File and Data Structure Definitions:</li> <li>Input Files:<ul> <li><code>APVCTR</code> (Input Primary, <code>IP</code>): Work file for transactions (80 bytes, indexed by 12-byte key).</li> <li><code>APCONT</code> (Input Full-Procedural, <code>IF</code>): A/P control file (256 bytes, indexed by 2-byte key).</li> <li><code>APVEND</code> (Input Full-Procedural, <code>IF</code>): Vendor master file (579 bytes, indexed by 7-byte key).</li> <li><code>APOPNH</code> (Update Full-Procedural, <code>UF</code>): Open A/P transactions file (384 bytes, indexed by 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>): Printer file for generating a report (132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>APVCTR NS 01</code>: Defines fields like <code>ATCONOL2</code> (company number), <code>ATVENDL1</code> (vendor), <code>ATVOUC</code> (voucher), <code>ATHOLD</code> (hold code), <code>ATHLDS</code> (hold description), <code>ATOHLD</code> (prior hold code), <code>ATOHDS</code> (prior hold description), and <code>ATNKEY</code> (key for chaining).</li> <li><code>APCONT NS</code>: Defines <code>ACNAME</code> (company name).</li> <li><code>APVEND NS</code>: Defines <code>VNDEL</code> (delete flag), <code>VNCO</code> (company number), <code>VNVEND</code> (vendor number), <code>VNNAME</code> (vendor name).</li> <li><code>APOPNH NS</code>: Defines fields like <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company number), <code>OPVEND</code> (vendor number), <code>OPVONO</code> (voucher number), <code>OPRCTY</code> (record type), <code>OPSEQN</code> (sequence number), and many others (e.g., amounts, dates, G/L accounts, hold flags).</li> <li><code>UDS</code>: User Data Structure with <code>Y2KCEN</code> (century, e.g., \"19\") and <code>Y2KCMP</code> (company number, e.g., \"80\").</li> </ul> </li> <li> <p>Array:</p> <ul> <li><code>SEP</code>: A 66-element array with 2-byte entries, initialized to <code>\"* \"</code> for report formatting.</li> </ul> </li> <li> <p>Initialization and Setup (Calculation Specs, <code>C</code>):</p> </li> <li>Time and Date Handling:      <pre><code>C                     TIME           TIMDAT 120\nC                     MOVELTIMDAT    SYSTIM  60\nC                     MOVE TIMDAT    SYSDAT  60\n</code></pre><ul> <li>Retrieves the system time (<code>TIME</code>) into <code>TIMDAT</code> (12 bytes).</li> <li>Extracts the time portion (<code>SYSTIM</code>, 6 bytes) and date portion (<code>SYSDAT</code>, 6 bytes) for report headers.</li> </ul> </li> <li>Report Initialization:      <pre><code>C                     MOVE '* '      SEP\nC                     Z-ADD*ZEROS    PAGE\n</code></pre><ul> <li>Sets the <code>SEP</code> array to <code>\"* \"</code> for report separators.</li> <li>Initializes the page number (<code>PAGE</code>) to zero.</li> </ul> </li> <li> <p>Indicator Setup:      <pre><code>C                     SETOF                     50\n</code></pre></p> <ul> <li>Turns off indicator <code>50</code>, which is later used to track whether a voucher has a prior hold code.</li> </ul> </li> <li> <p>Company Validation:    <pre><code>C           ATCONO    CHAINAPCONT               92\n</code></pre></p> </li> <li>Chains (looks up) the <code>APCONT</code> file using the company number (<code>ATCONO</code>) from <code>APVCTR</code>.</li> <li> <p>If no record is found, indicator <code>92</code> is set on, potentially skipping further processing for invalid companies.</p> </li> <li> <p>Hold Code Check:    <pre><code>C           ATOHLD    IFEQ *BLANKS\nC           ATOHDS    IFEQ *BLANKS\nC                     SETON                     50\nC                     END\nC                     END\n</code></pre></p> </li> <li>Checks if the prior hold code (<code>ATOHLD</code>) and prior hold description (<code>ATOHDS</code>) in <code>APVCTR</code> are blank.</li> <li> <p>If both are blank, sets indicator <code>50</code> on, indicating no prior hold code exists for the voucher.</p> </li> <li> <p>Vendor Lookup:    <pre><code>C                     MOVELATCONO    VENDKY  70\nC                     MOVE ATVEND    VENDKY\nC           VENDKY    CHAINAPVEND               31\n</code></pre></p> </li> <li>Builds a key (<code>VENDKY</code>, 7 bytes) by combining <code>ATCONO</code> (company number) and <code>ATVEND</code> (vendor number) from <code>APVCTR</code>.</li> <li>Chains to the <code>APVEND</code> file to retrieve vendor details (e.g., <code>VNNAME</code>).</li> <li> <p>If no vendor record is found, indicator <code>31</code> is set on.</p> </li> <li> <p>Open A/P Record Lookup and Update:    <pre><code>C                     MOVELATNKEY    OPNKEY 16\nC                     MOVE 1001      OPNKEY\nC           OPNKEY    CHAINAPOPNH               90\nC  N90                EXCPT\n</code></pre></p> </li> <li>Builds a key (<code>OPNKEY</code>, 16 bytes) using <code>ATNKEY</code> (from <code>APVCTR</code>) and appends a constant <code>1001</code> (likely a sequence or record type identifier).</li> <li>Chains to the <code>APOPNH</code> file to locate the corresponding open A/P record.</li> <li>If found (indicator <code>90</code> off), updates the <code>APOPNH</code> file with:      <pre><code>OAPOPNH  E\nO                         ATHOLD   126\nO                         ATHLDS   151\n</code></pre><ul> <li>Writes the new hold code (<code>ATHOLD</code>) to position 126 and hold description (<code>ATHLDS</code>) to positions 127\u2013151 in the <code>APOPNH</code> record.</li> </ul> </li> <li> <p>Executes an exception output (<code>EXCPT</code>) to write to the <code>LIST</code> file (report).</p> </li> <li> <p>Report Generation (Output Specs, <code>O</code>):</p> </li> <li> <p>The program generates a report via the <code>LIST</code> printer file with the following structure:</p> <ul> <li>Header (Level 2, <code>L2</code>):    <pre><code>OLIST    D  103   L2\nO       OR        OFNL2\nO                N92      ACNAME    30\nO                                  104 'PAGE'\nO                         PAGE  Z  108\nO                                  120 'DATE'\nO                         SYSDATY  129\nO        D  2     L2\nO       OR        OFNL2\nO                                   77 'A/P VOUCHER STATUS CODE '\nO                                   88 'MODIFY POST'\nO                                  120 'TIME'\nO                         SYSTIM   129 '  :  :  '\n</code></pre></li> <li>Prints the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Includes a title: \"A/P VOUCHER STATUS CODE MODIFY POST\".</li> <li>Column Headings:    <pre><code>O        D  1     L2\nO       OR        OFNL2\nO                                   22 'VENDOR'\nO                                   50 'VOUCHER'\nO                                   66 'STATUS'\nO                                   81 'CODE'\nO                                  112 'CURRENT'\nO        D  1     L2\nO       OR        OFNL2\nO                                    8 'VENDOR'\nO                                   20 'NAME'\nO                                   50 'NUMBER'\nO                                   64 'CODE'\nO                                   85 'DESCRIPTION'\nO                                  111 'VALUES'\n</code></pre></li> <li>Prints column headers for vendor, voucher, status code, description, and current values.</li> <li>Detail Lines:    <pre><code>O        D  2     L2\nO       OR        OFNL2\nO                         SEP      132\nO        D  1     01\nO                         ATVEND     7\nO                         VNNAME    40\nO                         ATVOUC    49\nO                         ATHOLD    62\nO                         ATHLDS    98\nO                N50      ATOHLD   105\nO                N50      ATOHDS   132\nO                 50               122 'NO PRIOR HOLD CODE'\n</code></pre></li> <li>Prints detail lines for each processed voucher, including:<ul> <li>Vendor number (<code>ATVEND</code>), vendor name (<code>VNNAME</code>), voucher number (<code>ATVOUC</code>), new hold code (<code>ATHOLD</code>), and new hold description (<code>ATHLDS</code>).</li> <li>If no prior hold code exists (indicator <code>50</code> on), prints \"NO PRIOR HOLD CODE\".</li> <li>If prior hold codes exist (indicator <code>50</code> off), prints prior hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>).</li> </ul> </li> <li>Uses the <code>SEP</code> array for line separation.</li> </ul> </li> <li> <p>Loop Control:    <pre><code>C   L2                DO                               B1\nC                     END                              E1\n</code></pre></p> </li> <li>The program processes records in a level-2 (<code>L2</code>) loop, iterating through <code>APVCTR</code> records until completion.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic, the following business rules apply: 1. Data Validation:    - The program validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file to ensure it exists.    - It verifies vendor numbers (<code>ATVEND</code>) in the <code>APVEND</code> file.    - It ensures open A/P records exist in <code>APOPNH</code> for the given voucher and key.</p> <ol> <li>Hold Code Updates:</li> <li>The program updates the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in the <code>APOPNH</code> file for matching vouchers.</li> <li> <p>It checks if prior hold codes/descriptions (<code>ATOHLD</code>, <code>ATOHDS</code>) are blank to determine if a voucher previously had no hold status.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a report listing modified vouchers with their vendor details, voucher numbers, new hold codes/descriptions, and prior hold codes/descriptions (if applicable).</li> <li>Includes company name, date, time, and page number in the report header.</li> <li> <p>Indicates when no prior hold code exists for clarity.</p> </li> <li> <p>Error Handling:</p> </li> <li>If no company record is found (<code>92</code> on), the program may skip processing or produce partial output.</li> <li>If no vendor record is found (<code>31</code> on), the report may omit vendor names.</li> <li> <p>If no open A/P record is found (<code>90</code> on), no update occurs, but the program may still produce report output via <code>EXCPT</code>.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Updates are written only to matched <code>APOPNH</code> records, ensuring data consistency.</li> <li>The program uses shared files (<code>DISP-SHR</code> in OCL), implying concurrent access is managed by the system.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPG program uses the following files: 1. APVCTR (Input Primary, <code>IP</code>): Work file containing check reconciliation transactions (e.g., company number, vendor, voucher, hold codes). 2. APCONT (Input Full-Procedural, <code>IF</code>): Control file with company details (e.g., company name). 3. APVEND (Input Full-Procedural, <code>IF</code>): Vendor master file with vendor details (e.g., vendor number, name). 4. APOPNH (Update Full-Procedural, <code>UF</code>): Open A/P transactions file, updated with new hold codes and descriptions. 5. LIST (Output, <code>O</code>): Printer file for generating the reconciliation report.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called within <code>AP296.rpg36.txt</code>. The program relies on internal logic and system operations (e.g., <code>CHAIN</code>, <code>EXCPT</code>) to perform its tasks. The <code>SFACOPY</code> command referenced in the OCL program is a system utility, not an RPG program, and is handled outside the RPG code.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20OCL/#summary","title":"Summary","text":"<p>The <code>AP296</code> RPG program: - Processes A/P vouchers by reading transactions from <code>APVCTR</code>, validating company and vendor data, and updating hold codes/descriptions in <code>APOPNH</code>. - Generates a detailed report (<code>LIST</code>) showing modified vouchers, including vendor details, voucher numbers, new and prior hold codes, and descriptions. - Uses a loop (<code>L2</code>) to process records, with validations for company, vendor, and open A/P records. - Applies business rules to ensure data integrity, proper hold code updates, and clear reporting.</p> <p>Tables Used: <code>APVCTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APOPNH</code>, <code>LIST</code>. External Programs Called: None (only system utilities like <code>SFACOPY</code> in the OCL).</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/","title":"AP296 RPG","text":"<p>The provided document, <code>AP296.rpg36.txt</code>, is an RPG program (likely RPG II or RPG III) running on an IBM System/36 or AS/400, called by the OCL program <code>AP296.ocl36.txt</code> for the Accounts Payable (A/P) Voucher Status Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>AP296</code> processes A/P posted voucher to change status data, updating statuses and generating a report for vouchers with modified status codes (e.g., hold codes). Here\u2019s a step-by-step breakdown of the program\u2019s logic based on the provided code:</p> <ol> <li>File and Data Structure Definitions:</li> <li>Input Files:<ul> <li><code>APVCTR</code> (Input Primary, <code>IP</code>): Work file for voucher status transactions (80 bytes, indexed by 12-byte key).</li> <li><code>APCONT</code> (Input Full-Procedural, <code>IF</code>): A/P control file (256 bytes, indexed by 2-byte key).</li> <li><code>APVEND</code> (Input Full-Procedural, <code>IF</code>): Vendor master file (579 bytes, indexed by 7-byte key).</li> <li><code>APOPNH</code> (Update Full-Procedural, <code>UF</code>): Open A/P transactions file (384 bytes, indexed by 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>): Printer file for generating a report (132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>APVCTR NS 01</code>: Defines fields like <code>ATCONOL2</code> (company number), <code>ATVENDL1</code> (vendor), <code>ATVOUC</code> (voucher), <code>ATHOLD</code> (hold code), <code>ATHLDS</code> (hold description), <code>ATOHLD</code> (prior hold code), <code>ATOHDS</code> (prior hold description), and <code>ATNKEY</code> (key for chaining).</li> <li><code>APCONT NS</code>: Defines <code>ACNAME</code> (company name).</li> <li><code>APVEND NS</code>: Defines <code>VNDEL</code> (delete flag), <code>VNCO</code> (company number), <code>VNVEND</code> (vendor number), <code>VNNAME</code> (vendor name).</li> <li><code>APOPNH NS</code>: Defines fields like <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company number), <code>OPVEND</code> (vendor number), <code>OPVONO</code> (voucher number), <code>OPRCTY</code> (record type), <code>OPSEQN</code> (sequence number), and many others (e.g., amounts, dates, G/L accounts, hold flags).</li> <li><code>UDS</code>: User Data Structure with <code>Y2KCEN</code> (century, e.g., \"19\") and <code>Y2KCMP</code> (company number, e.g., \"80\").</li> </ul> </li> <li> <p>Array:</p> <ul> <li><code>SEP</code>: A 66-element array with 2-byte entries, initialized to <code>\"* \"</code> for report formatting.</li> </ul> </li> <li> <p>Initialization and Setup (Calculation Specs, <code>C</code>):</p> </li> <li>Time and Date Handling:      <pre><code>C                     TIME           TIMDAT 120\nC                     MOVELTIMDAT    SYSTIM  60\nC                     MOVE TIMDAT    SYSDAT  60\n</code></pre><ul> <li>Retrieves the system time (<code>TIME</code>) into <code>TIMDAT</code> (12 bytes).</li> <li>Extracts the time portion (<code>SYSTIM</code>, 6 bytes) and date portion (<code>SYSDAT</code>, 6 bytes) for report headers.</li> </ul> </li> <li>Report Initialization:      <pre><code>C                     MOVE '* '      SEP\nC                     Z-ADD*ZEROS    PAGE\n</code></pre><ul> <li>Sets the <code>SEP</code> array to <code>\"* \"</code> for report separators.</li> <li>Initializes the page number (<code>PAGE</code>) to zero.</li> </ul> </li> <li> <p>Indicator Setup:      <pre><code>C                     SETOF                     50\n</code></pre></p> <ul> <li>Turns off indicator <code>50</code>, which is later used to track whether a voucher has a prior hold code.</li> </ul> </li> <li> <p>Company Validation:    <pre><code>C           ATCONO    CHAINAPCONT               92\n</code></pre></p> </li> <li>Chains (looks up) the <code>APCONT</code> file using the company number (<code>ATCONO</code>) from <code>APVCTR</code>.</li> <li> <p>If no record is found, indicator <code>92</code> is set on, potentially skipping further processing for invalid companies.</p> </li> <li> <p>Hold Code Check:    <pre><code>C           ATOHLD    IFEQ *BLANKS\nC           ATOHDS    IFEQ *BLANKS\nC                     SETON                     50\nC                     END\nC                     END\n</code></pre></p> </li> <li>Checks if the prior hold code (<code>ATOHLD</code>) and prior hold description (<code>ATOHDS</code>) in <code>APVCTR</code> are blank.</li> <li> <p>If both are blank, sets indicator <code>50</code> on, indicating no prior hold code exists for the voucher.</p> </li> <li> <p>Vendor Lookup:    <pre><code>C                     MOVELATCONO    VENDKY  70\nC                     MOVE ATVEND    VENDKY\nC           VENDKY    CHAINAPVEND               31\n</code></pre></p> </li> <li>Builds a key (<code>VENDKY</code>, 7 bytes) by combining <code>ATCONO</code> (company number) and <code>ATVEND</code> (vendor number) from <code>APVCTR</code>.</li> <li>Chains to the <code>APVEND</code> file to retrieve vendor details (e.g., <code>VNNAME</code>).</li> <li> <p>If no vendor record is found, indicator <code>31</code> is set on.</p> </li> <li> <p>Open A/P Record Lookup and Update:    <pre><code>C                     MOVELATNKEY    OPNKEY 16\nC                     MOVE 1001      OPNKEY\nC           OPNKEY    CHAINAPOPNH               90\nC  N90                EXCPT\n</code></pre></p> </li> <li>Builds a key (<code>OPNKEY</code>, 16 bytes) using <code>ATNKEY</code> (from <code>APVCTR</code>) and appends a constant <code>1001</code> (likely a sequence or record type identifier).</li> <li>Chains to the <code>APOPNH</code> file to locate the corresponding open A/P record.</li> <li>If found (indicator <code>90</code> off), updates the <code>APOPNH</code> file with:      <pre><code>OAPOPNH  E\nO                         ATHOLD   126\nO                         ATHLDS   151\n</code></pre><ul> <li>Writes the new hold code (<code>ATHOLD</code>) to position 126 and hold description (<code>ATHLDS</code>) to positions 127\u2013151 in the <code>APOPNH</code> record.</li> </ul> </li> <li> <p>Executes an exception output (<code>EXCPT</code>) to write to the <code>LIST</code> file (report).</p> </li> <li> <p>Report Generation (Output Specs, <code>O</code>):</p> </li> <li> <p>The program generates a report via the <code>LIST</code> printer file with the following structure:</p> <ul> <li>Header (Level 2, <code>L2</code>):    <pre><code>OLIST    D  103   L2\nO       OR        OFNL2\nO                N92      ACNAME    30\nO                                  104 'PAGE'\nO                         PAGE  Z  108\nO                                  120 'DATE'\nO                         SYSDATY  129\nO        D  2     L2\nO       OR        OFNL2\nO                                   77 'A/P VOUCHER STATUS CODE '\nO                                   88 'MODIFY POST'\nO                                  120 'TIME'\nO                         SYSTIM   129 '  :  :  '\n</code></pre></li> <li>Prints the company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Includes a title: \"A/P VOUCHER STATUS CODE MODIFY POST\".</li> <li>Column Headings:    <pre><code>O        D  1     L2\nO       OR        OFNL2\nO                                   22 'VENDOR'\nO                                   50 'VOUCHER'\nO                                   66 'STATUS'\nO                                   81 'CODE'\nO                                  112 'CURRENT'\nO        D  1     L2\nO       OR        OFNL2\nO                                    8 'VENDOR'\nO                                   20 'NAME'\nO                                   50 'NUMBER'\nO                                   64 'CODE'\nO                                   85 'DESCRIPTION'\nO                                  111 'VALUES'\n</code></pre></li> <li>Prints column headers for vendor, voucher, status code, description, and current values.</li> <li>Detail Lines:    <pre><code>O        D  2     L2\nO       OR        OFNL2\nO                         SEP      132\nO        D  1     01\nO                         ATVEND     7\nO                         VNNAME    40\nO                         ATVOUC    49\nO                         ATHOLD    62\nO                         ATHLDS    98\nO                N50      ATOHLD   105\nO                N50      ATOHDS   132\nO                 50               122 'NO PRIOR HOLD CODE'\n</code></pre></li> <li>Prints detail lines for each processed voucher, including:<ul> <li>Vendor number (<code>ATVEND</code>), vendor name (<code>VNNAME</code>), voucher number (<code>ATVOUC</code>), new hold code (<code>ATHOLD</code>), and new hold description (<code>ATHLDS</code>).</li> <li>If no prior hold code exists (indicator <code>50</code> on), prints \"NO PRIOR HOLD CODE\".</li> <li>If prior hold codes exist (indicator <code>50</code> off), prints prior hold code (<code>ATOHLD</code>) and description (<code>ATOHDS</code>).</li> </ul> </li> <li>Uses the <code>SEP</code> array for line separation.</li> </ul> </li> <li> <p>Loop Control:    <pre><code>C   L2                DO                               B1\nC                     END                              E1\n</code></pre></p> </li> <li>The program processes records in a level-2 (<code>L2</code>) loop, iterating through <code>APVCTR</code> records until completion.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic, the following business rules apply: 1. Data Validation:    - The program validates the company number (<code>ATCONO</code>) against the <code>APCONT</code> file to ensure it exists.    - It verifies vendor numbers (<code>ATVEND</code>) in the <code>APVEND</code> file.    - It ensures open A/P records exist in <code>APOPNH</code> for the given voucher and key.</p> <ol> <li>Hold Code Updates:</li> <li>The program updates the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in the <code>APOPNH</code> file for matching vouchers.</li> <li> <p>It checks if prior hold codes/descriptions (<code>ATOHLD</code>, <code>ATOHDS</code>) are blank to determine if a voucher previously had no hold status.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a report listing modified vouchers with their vendor details, voucher numbers, new hold codes/descriptions, and prior hold codes/descriptions (if applicable).</li> <li>Includes company name, date, time, and page number in the report header.</li> <li> <p>Indicates when no prior hold code exists for clarity.</p> </li> <li> <p>Error Handling:</p> </li> <li>If no company record is found (<code>92</code> on), the program may skip processing or produce partial output.</li> <li>If no vendor record is found (<code>31</code> on), the report may omit vendor names.</li> <li> <p>If no open A/P record is found (<code>90</code> on), no update occurs, but the program may still produce report output via <code>EXCPT</code>.</p> </li> <li> <p>Data Integrity:</p> </li> <li>Updates are written only to matched <code>APOPNH</code> records, ensuring data consistency.</li> <li>The program uses shared files (<code>DISP-SHR</code> in OCL), implying concurrent access is managed by the system.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPG program uses the following files: 1. APVCTR (Input Primary, <code>IP</code>): Work file containing  transactions (e.g., company number, vendor, voucher, hold codes). 2. APCONT (Input Full-Procedural, <code>IF</code>): Control file with company details (e.g., company name). 3. APVEND (Input Full-Procedural, <code>IF</code>): Vendor master file with vendor details (e.g., vendor number, name). 4. APOPNH (Update Full-Procedural, <code>UF</code>): Open A/P transactions file, updated with new hold codes and descriptions. 5. LIST (Output, <code>O</code>): Printer file for generating the report.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called within <code>AP296.rpg36.txt</code>. The program relies on internal logic and system operations (e.g., <code>CHAIN</code>, <code>EXCPT</code>) to perform its tasks. The <code>SFACOPY</code> command referenced in the OCL program is a system utility, not an RPG program, and is handled outside the RPG code.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/AP296%20RPG/#summary","title":"Summary","text":"<p>The <code>AP296</code> RPG program: - Processes A/P voucher status by reading transactions from <code>APVCTR</code>, validating company and vendor data, and updating hold codes/descriptions in <code>APOPNH</code>. - Generates a detailed report (<code>LIST</code>) showing modified vouchers, including vendor details, voucher numbers, new and prior hold codes, and descriptions. - Uses a loop (<code>L2</code>) to process records, with validations for company, vendor, and open A/P records. - Applies business rules to ensure data integrity, proper hold code updates, and clear reporting.</p> <p>Tables Used: <code>APVCTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APOPNH</code>, <code>LIST</code>. External Programs Called: None (only system utilities like <code>SFACOPY</code> in the OCL).</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/","title":"Summary AP296 Status Code Post","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#ap296-summary","title":"AP296 Summary","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#function-requirements-post-ap-voucher-status-code-changes","title":"Function Requirements: Post A/P Voucher Status Code Changes","text":""},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#overview","title":"Overview","text":"<p>The <code>PostAPVoucherStatus</code> function updates the hold status (hold code and description) of Accounts Payable (A/P) vouchers in the open A/P file and generates a report summarizing the changes. It processes input from a work file, validates data against company and vendor records, and ensures accurate updates and reporting for the A/P Voucher Status Code Change Process.</p>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#inputs","title":"Inputs","text":"<ul> <li>Work File (<code>APVCTR</code>): Contains voucher records with:</li> <li>Company Number (<code>ATCONO</code>, 2 bytes)</li> <li>Vendor Number (<code>ATVEND</code>, 5 bytes)</li> <li>Voucher Number (<code>ATVOUC</code>, 5 bytes)</li> <li>Hold Code (<code>ATHOLD</code>, 1 byte)</li> <li>Hold Description (<code>ATHLDS</code>, 25 bytes)</li> <li>Prior Hold Code (<code>ATOHLD</code>, 1 byte)</li> <li>Prior Hold Description (<code>ATOHDS</code>, 25 bytes)</li> <li>Transaction Key (<code>ATNKEY</code>, 12 bytes)</li> <li>Control File (<code>APCONT</code>): Contains company details (e.g., <code>ACNAME</code>, company name, 30 bytes).</li> <li>Vendor File (<code>APVEND</code>): Contains vendor details (e.g., <code>VNVEND</code>, vendor number; <code>VNNAME</code>, vendor name).</li> <li>Open A/P File (<code>APOPNH</code>): Contains open A/P transactions (updated with new hold codes and descriptions).</li> <li>Printer File (<code>LIST</code>): Output file for the A/P Voucher Status Code Change Process report.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#outputs","title":"Outputs","text":"<ul> <li>Updated Open A/P File (<code>APOPNH</code>): Records updated with new hold codes and descriptions.</li> <li>Report (<code>LIST</code>): A printer file containing the A/P Voucher Status Code Change Process report with:</li> <li>Company name (<code>ACNAME</code>)</li> <li>Page number (<code>PAGE</code>)</li> <li>Date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>)</li> <li>Voucher details (<code>ATVEND</code>, <code>VNNAME</code>, <code>ATVOUC</code>, <code>ATHOLD</code>, <code>ATHLDS</code>, <code>ATOHLD</code>, <code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Input Data:</li> <li>Check if <code>APVCTR</code> contains any records.</li> <li>If no records exist, pause with message: \"THERE ARE NO RECORDS TO POST.  PRESS 0 TO CANCEL.\"</li> <li> <p>Cancel the process if the user presses <code>ATTN,2,ENTER</code>.</p> </li> <li> <p>Load RPG Program:</p> </li> <li> <p>Load the <code>AP296</code> RPG program.</p> </li> <li> <p>Validate Company:</p> </li> <li>Chain <code>ATCONO</code> to <code>APCONT</code> to verify the company number.</li> <li> <p>Set indicator <code>92</code> if the company number is invalid.</p> </li> <li> <p>Validate Vendor:</p> </li> <li>Chain <code>VENDKY</code> (built from <code>ATCONO</code> and <code>ATVEND</code>) to <code>APVEND</code> to verify the vendor number.</li> <li> <p>Set indicator <code>31</code> if the vendor number is invalid.</p> </li> <li> <p>Check Prior Hold Status:</p> </li> <li>If <code>ATOHLD</code> and <code>ATOHDS</code> are blank, set indicator <code>50</code> on.</li> <li> <p>Otherwise, no prior hold code exists.</p> </li> <li> <p>Update Open A/P Records:</p> </li> <li>For each valid voucher in <code>APVCTR</code>, chain <code>OPNKEY</code> (built from <code>ATNKEY</code> and <code>1001</code>) to <code>APOPNH</code>.</li> <li>If found (indicator <code>90</code> off), update <code>ATHOLD</code> (position 126) and <code>ATHLDS</code> (positions 127\u2013151) in <code>APOPNH</code>.</li> <li> <p>Execute exception output (<code>EXCPT</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li> <p>For each processed voucher, output to <code>LIST</code>:</p> <ul> <li>Vendor number (<code>ATVEND</code>)</li> <li>Vendor name (<code>VNNAME</code>)</li> <li>Voucher number (<code>ATVOUC</code>)</li> <li>New hold code (<code>ATHOLD</code>)</li> <li>New hold description (<code>ATHLDS</code>)</li> <li>Prior hold code (<code>ATOHLD</code>)</li> <li>Prior hold description (<code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul> </li> <li> <p>Clean Up:</p> </li> <li>Delete the processed work file (<code>APVCTR</code>) after successful posting.</li> </ol>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#business-rules","title":"Business Rules","text":"<ul> <li>Data Validation:</li> <li>The company number (<code>ATCONO</code>) must exist in <code>APCONT</code>.</li> <li>The vendor number (<code>ATVEND</code>) must exist in <code>APVEND</code>.</li> <li> <p>The voucher must exist in <code>APOPNH</code> with matching vendor and company records.</p> </li> <li> <p>Hold Code Updates:</p> </li> <li>Update the hold code (<code>ATHOLD</code>) and hold description (<code>ATHLDS</code>) in <code>APOPNH</code> only for valid vouchers.</li> <li> <p>Check for prior hold codes (<code>ATOHLD</code>, <code>ATOHDS</code>) and update only if they are not blank.</p> </li> <li> <p>Reporting:</p> </li> <li> <p>Generate a report (<code>LIST</code>) summarizing the A/P Voucher Status Code Change Process:</p> <ul> <li>Company name (<code>ACNAME</code>)</li> <li>Page number (<code>PAGE</code>)</li> <li>Date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>)</li> <li>Voucher details (<code>ATVEND</code>, <code>VNNAME</code>, <code>ATVOUC</code>, <code>ATHOLD</code>, <code>ATHLDS</code>, <code>ATOHLD</code>, <code>ATOHDS</code>)</li> <li>Indicator for no prior hold code (<code>50</code> on)</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>If the company number is invalid (<code>92</code> on), skip processing for that company.</li> <li>If the vendor number is invalid (<code>31</code> on), skip processing for that vendor.</li> <li> <p>If no open A/P record is found (<code>90</code> on), skip the update but generate report output.</p> </li> <li> <p>Data Cleanup:</p> </li> <li>Delete the processed <code>APVCTR</code> work file after successful posting.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#calculations","title":"Calculations","text":"<ul> <li>No calculations are explicitly performed in this function. It updates hold codes and descriptions based on input data and validation results.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP296: The main RPG program that processes the A/P Voucher Status Code Change Process.</li> </ul>"},{"location":"accounts-payable/02%20Payables/AP296%20OCL%20Status%20Code%20Post/Summary%20AP296%20Status%20Code%20Post/#notes","title":"Notes","text":"<ul> <li>The function assumes that the input data in <code>APVCTR</code> is accurate and complete.</li> <li>The output report (<code>LIST</code>) is formatted for printing and includes all relevant voucher details.</li> <li>The <code>SFACOPY</code> system utility is used to manage the report output in the output queue.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/","title":"AP150 Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#use-cases-implemented-by-the-ap150-ap156-call-stack","title":"Use Cases Implemented by the AP150-AP156 Call Stack","text":"<p>The call stack, consisting of <code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, and <code>AP156.ocl36.txt</code> with <code>AP156.rpg36.txt</code>, implements a single primary use case in the Accounts Payable (A/P) system:</p> <ol> <li>Generate and Process Accounts Payable Payments:</li> <li>This use case encompasses selecting vouchers for payment based on criteria (e.g., due date, payment method), creating payment records, generating a cash requirements report, and producing a NACHA file for ACH payments. The process handles multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and tracks discounts, ensuring accurate payment processing and reporting.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-requirement-document-generate-and-process-accounts-payable-payments","title":"Function Requirement Document: Generate and Process Accounts Payable Payments","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#function-overview","title":"Function Overview","text":"<p>The <code>GenerateAndProcessAPPayments</code> function automates the selection, processing, reporting, and transmission of Accounts Payable payments. It takes input parameters defining payment criteria and produces payment records, a cash requirements report, and a NACHA file for ACH payments. The function supports checks, ACH, wire transfers, employee expenses, and utility auto-pay, while handling discounts and validations.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (PTCONO): Identifies the company for payment processing (7 digits).</li> <li>Bank G/L Number (PTBKGL): Bank general ledger number for payment (8 digits).</li> <li>Next Check Number (PTNXCK): Starting check number for non-prepaid payments (6 digits).</li> <li>Check Date (PTCKDT): Date of payment issuance (6 digits, YYMMDD).</li> <li>Pay-By Date (PTDATE): Cutoff date for selecting vouchers (6 digits, YYMMDD).</li> <li>Force Discount Flag (PTFDIS): <code>'D'</code> to force discounts, otherwise blank.</li> <li>Payment Method (PTHOLD): <code>' '</code> (check), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expense), <code>U</code> (utility auto-pay).</li> <li>Vendor Number (PTVEND): Optional vendor number for specific vendor payments (5 digits).</li> <li>Voucher Number (PTVO): Optional voucher number for specific voucher payments (5 digits).</li> <li>Partial Payment Amount (PTAMT): Amount for partial payments (7.2 digits, packed).</li> <li>Discount Amount (PTDISC): Specific discount to apply (5.2 digits, packed).</li> <li>Pay or Hold (PTPORH): <code>'P'</code> to pay held vouchers, <code>'H'</code> to hold, otherwise blank.</li> <li>Single Check Flag (PTSNGL): <code>'S'</code> for single check per voucher, otherwise blank.</li> <li>Make Prepaid Flag (PTMKPP): <code>'P'</code> to mark as prepaid, otherwise blank.</li> <li>Prepaid Check Number (PTPPCK): Check number for prepaid vouchers (6 digits).</li> <li>Prepaid Date (PTPPDT): Date for prepaid vouchers (6 digits, YYMMDD).</li> <li>Period (PTPD): Accounting period (2 digits).</li> <li>Year (PTPDYY): Accounting year (2 digits).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (APPAY): Records with payment details (company, vendor, voucher, amount, discount, check number, etc.).</li> <li>Missed Discount Records (APPYDS): Records for vouchers with missed discounts.</li> <li>Check Records (APPYCK): Check details (check number, amount, status, etc.).</li> <li>Invoice Detail Records (APDETINV): Aggregated invoice details for reporting.</li> <li>Cash Requirements Report (APCSHRQ): Report detailing payments, discounts, and totals.</li> <li>NACHA File (ACHFILE): NACHA-formatted file for ACH payments (if applicable).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure company number, bank G/L, and payment method are valid.</li> <li> <p>Validate dates (PTCKDT, PTDATE, PTPPDT) for Y2K compliance (convert to 8-digit format, e.g., CCYYMMDD).</p> </li> <li> <p>Select Vouchers (AP151):</p> </li> <li>Pay by Date:<ul> <li>Select <code>APOPEN</code> vouchers where:</li> <li>Company (<code>OPCONO</code>) matches <code>PTCONO</code>.</li> <li>Bank G/L (<code>OPBKGL</code>) matches <code>PTBKGL</code>.</li> <li>Payment method (<code>OPHALT</code>) matches <code>PTHOLD</code> (<code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code> unless <code>PTPORH = 'P'</code>).</li> <li>Due date (<code>OPDUED</code>) is on or before <code>PTDATE</code> (unless <code>PTFDIS = 'D'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), ensure payment method matches <code>PTHOLD</code>.</li> </ul> </li> <li> <p>Pay by Vendor/Voucher:</p> <ul> <li>Select <code>APOPEN</code> vouchers matching <code>PTVEND</code> and optionally <code>PTVO</code>.</li> <li>Apply same company, bank G/L, and payment method checks.</li> <li>Handle partial payments (<code>PTAMT</code>) and specific discounts (<code>PTDISC</code>).</li> </ul> </li> <li> <p>Calculate Payments and Discounts:</p> </li> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.<ul> <li><code>OPGRAM</code>: Gross voucher amount.</li> <li><code>OPDISC</code>: Discount (if applicable).</li> <li><code>OPPPTD</code>: Partial paid to date.</li> </ul> </li> <li>Discount Logic:<ul> <li>If <code>PTFDIS = 'D'</code>, apply <code>OPDISC</code> regardless of discount due date.</li> <li>Otherwise, apply <code>OPDISC</code> only if discount due date (<code>OPDSDT</code>) is on or after <code>PTCKDT</code> and before or on <code>PTDATE</code>.</li> <li>If discount is missed and <code>PTFDIS \u2260 'D'</code>, set <code>OPDISC = 0</code> and write to <code>APPYDS</code>.</li> </ul> </li> <li> <p>For partial payments, set <code>OPLPAM = PTAMT</code> and adjust <code>OPDISC</code> to zero if <code>PTAMT = OPLPAM</code>.</p> </li> <li> <p>Create Payment Records:</p> </li> <li>Write to <code>APPAY</code> with fields: <code>OPDEL</code> (delete flag), <code>OPLPAM</code>, <code>OPDISC</code>, <code>OPCKNO</code> (check number, <code>PTNXCK</code> for non-prepaid, <code>PTPPCK</code> for prepaid), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (<code>'S'</code> for single check or one-time vendor), <code>OPCKDT</code> (check date), <code>PTSEQ#</code> (sequence).</li> <li>For held vouchers (<code>PTPORH = 'H'</code>), mark <code>APPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li> <p>Write missed discount records to <code>APPYDS</code>.</p> </li> <li> <p>Generate Cash Requirements Report (AP155):</p> </li> <li>Aggregate payment totals by company and check:<ul> <li>Computer checks (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid payments (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Total checks (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li>Update <code>APDETINV</code> with aggregated invoice amounts (<code>APGRAM</code>, <code>APDISC</code>) for same invoice numbers.</li> <li>Validate checks against <code>APCHKR</code>:<ul> <li>Non-void checks must not exist or be open.</li> <li>Void checks must exist, be open, and fully voided.</li> </ul> </li> <li>Write check records to <code>APPYCK</code> with status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</li> <li> <p>Output report to <code>APCSHRQ</code> with invoice details, check totals, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</p> </li> <li> <p>Create NACHA File for ACH Payments (AP156):</p> </li> <li> <p>If <code>PTHOLD = 'A'</code> (indicated by LDA position 400 = <code>'A'</code>):</p> <ul> <li>Clear <code>ACHFILE</code>.</li> <li>Write NACHA records for <code>APPYCK</code> records with <code>PYSTAT = 'A'</code>:</li> <li>File Header (Type 1): ABA numbers, transmission date/time, company names.</li> <li>Batch Header (Type 5): Company details, effective date (<code>CKYMD</code>).</li> <li>Entry Detail (Type 6): Vendor bank routing (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount (<code>PYCKAM</code>), transaction code (<code>22</code> for checking, <code>32</code> for savings).</li> <li>Batch Control (Type 8): Batch entry count, hash, and credit totals.</li> <li>File Control (Type 9): File-level counts and totals.</li> <li>Filler records to pad blocks to multiples of 10.</li> <li>Output report to <code>REPORT</code> for logging.</li> </ul> </li> <li> <p>Return Outputs:</p> </li> <li>Return updated files (<code>APPAY</code>, <code>APPYDS</code>, <code>APPYCK</code>, <code>APDETINV</code>), report (<code>APCSHRQ</code>), and NACHA file (<code>ACHFILE</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Selection:</li> <li>Vouchers must match company, bank G/L, and payment method.</li> <li>Held vouchers (<code>OPHALT = 'H'</code>) require <code>PTPORH = 'P'</code> to be paid.</li> <li> <p>Prepaid vouchers (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) must match <code>PTHOLD</code>.</p> </li> <li> <p>Discount Handling:</p> </li> <li>Discounts applied if <code>PTFDIS = 'D'</code> or discount due date is valid.</li> <li> <p>Missed discounts (past due, no force discount) are recorded in <code>APPYDS</code>.</p> </li> <li> <p>Check Number Assignment:</p> </li> <li>Non-prepaid payments use <code>PTNXCK</code>, incremented per check.</li> <li> <p>Prepaid payments use <code>PTPPCK</code> and <code>PTPPDT</code>.</p> </li> <li> <p>Single Check and One-Time Vendors:</p> </li> <li> <p>One-time vendors (<code>OPVEND = 0</code>) or <code>PTSNGL = 'S'</code> require single checks (<code>OPSNGL = 'S'</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not exist or be open in <code>APCHKR</code>.</li> <li>Void checks must exist, be open, and fully voided.</li> <li> <p>Zero/negative amounts are marked \"CREDIT / NO PAY\".</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>Maximum 36 invoices per check to prevent stub overflow.</p> </li> <li> <p>ACH Processing:</p> </li> <li>Only executed if <code>PTHOLD = 'A'</code>.</li> <li>Requires valid vendor ACH details (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>NACHA file adheres to standard format with proper record types and block padding.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li>Multiple invoices with the same number for a vendor are aggregated in <code>APDETINV</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments: <code>OPLPAM = PTAMT</code>, <code>OPDISC = 0</code> if <code>PTAMT = OPLPAM</code>.</li> <li>Discount: <code>OPDISC = OPDISC</code> if valid (force discount or within date range), else <code>0</code>.</li> <li>Check Totals: Sum <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code> per check and company.</li> <li>NACHA Hash: Sum of vendor routing numbers (<code>VNARTE</code>) for batch (<code>L2HASH</code>) and file (<code>LRHASH</code>).</li> <li>NACHA Block Count: <code>LRBLOK = CEIL(RECCNT / 10)</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#assumptions","title":"Assumptions","text":"<ul> <li>Input data is pre-validated and sorted (e.g., <code>APPYTR</code> sorted by <code>#GSORT</code> in <code>AP150</code>).</li> <li>Files (<code>APOPEN</code>, <code>APVEND</code>, <code>APCONT</code>, <code>APCHKR</code>) are populated with valid data.</li> <li>ACH payments require vendor ACH details in <code>APVEND</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#error-handling","title":"Error Handling","text":"<ul> <li>Skips invalid records (deleted, mismatched company/bank G/L, or payment method).</li> <li>Reports errors in <code>APCSHRQ</code> (e.g., check already open, invalid void).</li> <li>Logs missed discounts in <code>APPYDS</code>.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack-and-data-flow","title":"Tables Used in the AP150-AP156 Call Stack and Data Flow","text":"<p>Below is a detailed explanation of the tables (files) used in the Accounts Payable (A/P) payment processing call stack (<code>AP150.ocl36.txt</code>, <code>AP151.rpg36.txt</code>, <code>AP155.rpg36.txt</code>, <code>AP156.ocl36.txt</code>, <code>AP156.rpg36.txt</code>), their purposes, and a summary of the data flow.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-files-used-and-their-purpose","title":"Tables (Files) Used and Their Purpose","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#tables-used-in-the-ap150-ap156-call-stack","title":"Tables Used in the AP150-AP156 Call Stack","text":"<p>The following tables are used across the AP150-AP156 call stack to process Accounts Payable payments, generate reports, and create NACHA files for ACH payments. Each table's purpose, key fields, and usage in the programs are described below.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#1-appytr-payment-transaction-file","title":"1. APPYTR (Payment Transaction File)","text":"<ul> <li>Purpose: Stores sorted payment transaction data used as input for payment selection criteria. It contains header records (pay by date) and detail records (pay by vendor/voucher).</li> <li>File Usage:</li> <li>AP151: Primary input file, read to determine which vouchers to select from <code>APOPEN</code> based on company, vendor, voucher, payment method, and dates.</li> <li>AP155: Chained to retrieve next check number, check date, pay-by date, and payment method for the cash requirements report.</li> <li>Key Fields:</li> <li><code>PTCONO</code> (Company Number, 7 digits)</li> <li><code>PTVEND</code> (Vendor Number, 5 digits)</li> <li><code>PTVO</code> (Voucher Number, 5 digits)</li> <li><code>PTAMT</code> (Partial Payment Amount, 7.2 digits, packed)</li> <li><code>PTDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>PTBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PTNXCK</code> (Next Check Number, 6 digits)</li> <li><code>PTCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PTDATE</code> (Pay-By Date, 6 digits, YYMMDD)</li> <li><code>PTFDIS</code> (Force Discount, <code>'D'</code> or blank)</li> <li><code>PTHOLD</code> (Payment Method, <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>)</li> <li><code>PTPORH</code> (Pay or Hold, <code>'P'</code>, <code>'H'</code>, or blank)</li> <li><code>PTMKPP</code> (Make Prepaid, <code>'P'</code> or blank)</li> <li><code>PTSEQ#</code> (Sequence Number)</li> <li>Record Length: 128 bytes</li> <li>Access: Input Primary (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#2-apopen-open-ap-file","title":"2. APOPEN (Open A/P File)","text":"<ul> <li>Purpose: Contains open voucher details used to identify eligible vouchers for payment based on selection criteria.</li> <li>File Usage:</li> <li>AP151: Chained to select vouchers matching company, bank G/L, payment method, and due date criteria.</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for reporting if not found in <code>APVEND</code>.</li> <li>Key Fields:</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPHALT</code> (Hold Code, <code>'H'</code> or payment method)</li> <li><code>OPPAID</code> (Prepaid Code, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPCKNO</code> (Prepaid Check Number, 6 digits)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Input with Disk (AP151), Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#3-appay-payment-file","title":"3. APPAY (Payment File)","text":"<ul> <li>Purpose: Stores generated payment records, including payment amounts, discounts, and check details for processed vouchers.</li> <li>File Usage:</li> <li>AP151: Output file where payment records are written or updated with calculated payment amounts and check details.</li> <li>AP155: Primary input file, read to generate the cash requirements report; updated with sequence numbers.</li> <li>Key Fields:</li> <li><code>OPDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>OPCONO</code> (Company Number, 7 digits)</li> <li><code>OPVEND</code> (Vendor Number, 5 digits)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li><code>OPGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>OPDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPLPAM</code> (Payment Amount, 6.2 digits, packed)</li> <li><code>OPPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>OPSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>OPCKNO</code> (Check Number, 6 digits)</li> <li><code>OPCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>OPSEQ#</code> (Sequence Number, 5 digits)</li> <li><code>OPINVN</code> (Invoice Number, 20 bytes)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li>Record Length: 384 bytes</li> <li>Access: Update/Create (AP151), Update Primary (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#4-appyds-missed-discount-file","title":"4. APPYDS (Missed Discount File)","text":"<ul> <li>Purpose: Tracks vouchers where discounts were available but not taken due to missed discount due dates.</li> <li>File Usage:</li> <li>AP151: Output file where missed discount records are written.</li> <li>AP155: Chained to check for missed discounts and annotate the cash requirements report (\"DISCOUNT NOT TAKEN\").</li> <li>Key Fields:</li> <li><code>DSDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>DSCONO</code> (Company Number, 7 digits)</li> <li><code>DSVEND</code> (Vendor Number, 5 digits)</li> <li><code>DSVONO</code> (Voucher Number, 5 digits)</li> <li><code>DSGRAM</code> (Gross Amount, 7.2 digits, packed)</li> <li><code>DSDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>DSPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>DSLPAM</code> (Last Payment Amount, 6.2 digits, packed)</li> <li><code>DSDSDT</code> (Discount Due Date, 6 digits, YYMMDD)</li> <li><code>DSDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>DSCKNO</code> (Check Number, 6 digits)</li> <li><code>DSPAID</code> (Payment Method, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>DSSNGL</code> (Single Check, <code>'S'</code> or blank)</li> <li><code>DSBKGL</code> (Bank G/L Number, 8 digits)</li> <li>Record Length: 384 bytes</li> <li>Access: Output (AP151), Input with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#5-appyck-check-file","title":"5. APPYCK (Check File)","text":"<ul> <li>Purpose: Stores check details, including check number, amount, and status (e.g., full stub, void, credit/no pay).</li> <li>File Usage:</li> <li>AP155: Output file where check records are written or updated with status and totals.</li> <li>AP156: Primary input file, read to generate NACHA file for ACH payments.</li> <li>Key Fields:</li> <li><code>AXRECD</code> (Record Code, <code>' '</code>, <code>'F'</code>, <code>'V'</code>, <code>'C'</code>, <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>)</li> <li><code>PYCONO</code> (Company Number, 7 digits)</li> <li><code>PYVEND</code> (Vendor Number, 5 digits)</li> <li><code>PYBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>PYCHK#</code> (Check Number, 6 digits)</li> <li><code>PYCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li><code>PYCKDT</code> (Check Date, 6 digits, YYMMDD)</li> <li><code>PYNAME</code> (Vendor Name, 22 bytes)</li> <li><code>PYSEQ#</code> (Sequence Number, 9 digits)</li> <li><code>PYCNTR</code> (Invoice Count, 9 digits)</li> <li>Record Length: 96 bytes</li> <li>Access: Update/Create (AP155), Input Primary (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#6-apdetinv-invoice-detail-file","title":"6. APDETINV (Invoice Detail File)","text":"<ul> <li>Purpose: Tracks aggregated invoice details for vendors, combining amounts for invoices with the same number.</li> <li>File Usage:</li> <li>AP155: Updated with aggregated gross and discount amounts for reporting.</li> <li>Key Fields:</li> <li><code>APDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>APCONO</code> (Company Number, 7 digits)</li> <li><code>APVEND</code> (Vendor Number, 5 digits)</li> <li><code>APINVN</code> (Invoice Number, 20 bytes)</li> <li><code>APGRAM</code> (Gross Amount, 6.2 digits, packed)</li> <li><code>APDISC</code> (Discount Amount, 5.2 digits, packed)</li> <li><code>OPPPTD</code> (Partial Paid to Date, 5.2 digits, packed)</li> <li><code>OPINDS</code> (Invoice Description, 25 bytes)</li> <li><code>OPDUED</code> (Due Date, 6 digits, YYMMDD)</li> <li><code>OPVONO</code> (Voucher Number, 5 digits)</li> <li>Record Length: 256 bytes</li> <li>Access: Update with File (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#7-apcont-ap-control-file","title":"7. APCONT (A/P Control File)","text":"<ul> <li>Purpose: Stores company-level control data, including company name, bank G/L, and check numbering details.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve company name and pre-numbered check flag for the report.</li> <li>AP156: Chained to retrieve company name and bank G/L for NACHA file headers.</li> <li>Key Fields:</li> <li><code>ACDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>ACCONO</code> (Company Number, 7 digits)</li> <li><code>ACNAME</code> (Company Name, 30 bytes)</li> <li><code>ACBKGL</code> (Bank G/L Number, 8 digits)</li> <li><code>ACPRE#</code> (Pre-Numbered Checks, <code>'Y'</code> or blank)</li> <li>Record Length: 256 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#8-apvend-vendor-file","title":"8. APVEND (Vendor File)","text":"<ul> <li>Purpose: Contains vendor details, including name, address, and ACH payment information.</li> <li>File Usage:</li> <li>AP155: Chained to retrieve vendor name and sort abbreviation for the report.</li> <li>AP156: Chained to retrieve ACH-specific fields (routing code, account number, account type) for NACHA file.</li> <li>Key Fields:</li> <li><code>VNDEL</code> (Delete Flag, <code>'D'</code> or blank)</li> <li><code>VNCO</code> (Company Number, 7 digits)</li> <li><code>VNVEND</code> (Vendor Number, 5 digits)</li> <li><code>VNNAME</code> (Vendor Name, 30 bytes)</li> <li><code>VNSORT</code> (Alpha Sort Abbreviation, 10 bytes)</li> <li><code>VNARTE</code> (ACH Bank Routing Code, 9 digits)</li> <li><code>VNABK#</code> (ACH Bank Account Number, 17 bytes)</li> <li><code>VNACOS</code> (ACH Account Type, <code>'C'</code> for checking, else savings)</li> <li>Record Length: 579 bytes</li> <li>Access: Input with Chain (AP155, AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#9-apchkr-check-register-file","title":"9. APCHKR (Check Register File)","text":"<ul> <li>Purpose: Validates check status to ensure checks are not already open or incorrectly voided.</li> <li>File Usage:</li> <li>AP155: Chained to validate check numbers and statuses for the report.</li> <li>Key Fields:</li> <li><code>AMCODE</code> (Status Code, <code>'D'</code>, <code>'O'</code>, <code>'R'</code>, <code>'V'</code>)</li> <li><code>AMCKAM</code> (Check Amount, 11.2 digits, packed)</li> <li>Record Length: 128 bytes</li> <li>Access: Input with Chain (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#10-apcshrq-cash-requirements-report-file","title":"10. APCSHRQ (Cash Requirements Report File)","text":"<ul> <li>Purpose: Printer file for outputting the cash requirements report with payment details, check totals, and company summaries.</li> <li>File Usage:</li> <li>AP155: Output file for writing report headers, invoice details, check totals, and error messages.</li> <li>Key Fields:</li> <li>Report fields include company name, vendor name, invoice number, gross amount, discount, payment amount, check number, and totals.</li> <li>Record Length: 142 bytes</li> <li>Access: Output (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#11-achfile-nacha-file","title":"11. ACHFILE (NACHA File)","text":"<ul> <li>Purpose: Stores NACHA-formatted records for ACH payments to PNC Bank.</li> <li>File Usage:</li> <li>AP156: Output file for writing file header, batch header, entry detail, batch control, and file control records.</li> <li>Key Fields:</li> <li>Record Type Codes (<code>'1'</code>, <code>'5'</code>, <code>'6'</code>, <code>'8'</code>, <code>'9'</code>, filler)</li> <li>File Header: ABA numbers, transmission date/time</li> <li>Batch Header: Company name, tax ID, effective date</li> <li>Entry Detail: Vendor routing code, account number, amount</li> <li>Batch Control: Entry count, hash, credit total</li> <li>File Control: Batch count, block count, entry count</li> <li>Record Length: 94 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#12-report-printer-file","title":"12. REPORT (Printer File)","text":"<ul> <li>Purpose: Logs or verifies NACHA file creation details.</li> <li>File Usage:</li> <li>AP156: Output file for logging (specific content not defined in code).</li> <li>Record Length: 132 bytes</li> <li>Access: Output (AP156)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#13-ap155s-report-sequencing-file","title":"13. AP155S (Report Sequencing File)","text":"<ul> <li>Purpose: Control or sort file used for sequencing the cash requirements report.</li> <li>File Usage:</li> <li>AP155: Input file for report sequencing.</li> <li>Key Fields: Not detailed in code (likely control flags or sort keys).</li> <li>Record Length: 3 bytes</li> <li>Access: Input Random (AP155)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150%20Summary/#data-flow-summary","title":"Data Flow Summary","text":"<p>The data flow through the AP150-AP156 call stack is a sequential process that transforms input transaction data into payment records, a report, and an ACH payment file. Below is a summary:</p> <ol> <li>Input Preparation (AP150.ocl36.txt):</li> <li>Input: User-provided parameters (company, bank G/L, check date, etc.) and <code>APPYTR</code> (payment transactions).</li> <li>Process: Sorts <code>APPYTR</code> by company, vendor, voucher, and sequence using <code>#GSORT</code>. Clears <code>APPAY</code>, <code>APPYDS</code>, and <code>APPYCK</code> files to prepare for new data.</li> <li> <p>Output: Sorted <code>APPYTR</code> file.</p> </li> <li> <p>Payment Record Creation (AP151.rpg36.txt):</p> </li> <li>Input: Sorted <code>APPYTR</code>, <code>APOPEN</code> (open vouchers).</li> <li>Process: Reads <code>APPYTR</code> to select vouchers from <code>APOPEN</code> based on criteria (company, bank G/L, payment method, due date). Calculates payment amounts (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>) and applies discounts. Writes payment records to <code>APPAY</code> and missed discount records to <code>APPYDS</code>.</li> <li> <p>Output: Populated <code>APPAY</code> and <code>APPYDS</code> files.</p> </li> <li> <p>Cash Requirements Report Generation (AP155.rpg36.txt):</p> </li> <li>Input: <code>APPAY</code>, <code>APPYTR</code>, <code>APCONT</code>, <code>APVEND</code>, <code>APCHKR</code>, <code>APPYDS</code>, <code>AP155S</code>.</li> <li>Process: Reads <code>APPAY</code> to aggregate payment totals (gross, discount, payment amount) by check and company. Updates <code>APDETINV</code> with aggregated invoice details. Validates checks against <code>APCHKR</code> and writes check records to <code>APPYCK</code>. Outputs report to <code>APCSHRQ</code> with invoice details, check totals, and error messages.</li> <li> <p>Output: Updated <code>APPAY</code>, <code>APDETINV</code>, <code>APPYCK</code>, and <code>APCSHRQ</code> report. Sets LDA position 400 to <code>'A'</code> if ACH payments are detected.</p> </li> <li> <p>NACHA File Creation (AP156.ocl36.txt, AP156.rpg36.txt):</p> </li> <li>Input: <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, LDA (position 400 = <code>'A'</code>).</li> <li>Process: If ACH payments are present, clears <code>ACHFILE</code> and reads <code>APPYCK</code> to generate NACHA records (file header, batch header, entry detail, batch control, file control). Uses <code>APVEND</code> for ACH details and <code>APCONT</code> for company data. Outputs to <code>ACHFILE</code> and logs to <code>REPORT</code>.</li> <li>Output: Populated <code>ACHFILE</code> and <code>REPORT</code>.</li> </ol> <p>Overall Flow: - Input: <code>APPYTR</code> (transaction criteria), <code>APOPEN</code> (vouchers), <code>APCONT</code> (company data), <code>APVEND</code> (vendor data), <code>APCHKR</code> (check validation). - Transformation: Sort transactions (<code>AP150</code>), select and process payments (<code>AP151</code>), generate report and validate checks (<code>AP155</code>), create NACHA file for ACH (<code>AP156</code>). - Output: <code>APPAY</code> (payments), <code>APPYDS</code> (missed discounts), <code>APPYCK</code> (checks), <code>APDETINV</code> (invoices), <code>APCSHRQ</code> (report), <code>ACHFILE</code> (NACHA file), <code>REPORT</code> (log).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/","title":"AP150OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP150.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400, now IBM i) for managing Accounts Payable (A/P) payment transactions. OCL is a scripting language used to control job execution and manage files in such environments. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#process-steps-of-the-ap150-ocl-program","title":"Process Steps of the AP150 OCL Program","text":"<p>The OCL program <code>AP150</code> handles the entry, editing, and processing of A/P payment transactions, including creating payment records and generating a cash requirements report. It involves file operations, sorting, and invoking external programs. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Conditional Check for Automation:</li> <li>The program checks if it\u2019s running in \"AUTO\" mode (triggered by another process, <code>AP200</code>).<ul> <li><code>IF ?2?/AUTO GOTO AP151</code>: If <code>?2?</code> (a parameter) equals \"AUTO,\" the program jumps to the <code>AP151</code> tag, skipping initial file setup.</li> </ul> </li> <li> <p>If not in AUTO mode, it proceeds with file creation and setup.</p> </li> <li> <p>File Creation for Work Files:</p> </li> <li>If the file <code>?9?APPT?WS?</code> (a work file for payment transactions) doesn\u2019t exist, it creates it:<ul> <li><code>BLDFILE ?9?APPT?WS?,I,RECORDS,500,128,,,2,5,DFILE</code></li> <li>Creates a file with 500 records, 128 bytes each, with specific attributes.</li> </ul> </li> <li>Sets a local variable at offset 135 with data <code>'F'</code> for <code>?9?APPT?WS?</code>.</li> <li> <p>If the file <code>?9?APPO?WS?</code> exists, sets a local variable at offset 300 to <code>'Y'</code>.</p> </li> <li> <p>Load Initial Program (<code>AP150</code>):</p> </li> <li>Loads the program <code>AP150</code> (likely an RPG or CL program).</li> <li>Opens the following files:<ul> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>, shared, extendable by 100 records): Transaction work file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General ledger master file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>Runs the <code>AP150</code> program to process payment transactions.</p> </li> <li> <p>AP151 Tag - Conditional File Deletion and Creation:</p> </li> <li>Checks if the local variable at offset 300 is <code>'Y'</code>:<ul> <li>If not <code>'Y'</code>, jumps to the <code>END</code> tag, terminating the program.</li> <li>If <code>'Y'</code>, deletes work files: <code>APPO?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>, <code>APDS?WS?</code>.</li> </ul> </li> <li> <p>Creates new work files:</p> <ul> <li><code>?9?APPY?WS?</code>: 999,000 records, 384 bytes.</li> <li><code>?9?APPC?WS?</code>: 999,000 records, 96 bytes.</li> <li><code>?9?APDT?WS?</code>: 500 records, 256 bytes.</li> <li><code>?9?APDS?WS?</code>: 999,000 records, 384 bytes.</li> </ul> </li> <li> <p>Sort Payment Records:</p> </li> <li>Loads the <code>#GSORT</code> program (a system sort utility).</li> <li>Sorts the input file <code>?9?APPT?WS?</code> into output file <code>?9?AP151S</code> (999,000 records, retained job file).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 7-8), vendor/voucher (bytes 36-45), sequence number (bytes 2-6), and full record (bytes 1-128).</li> </ul> </li> <li> <p>Runs the sort to organize payment transaction records.</p> </li> <li> <p>Load AP151 Program:</p> </li> <li>Loads the <code>AP151</code> program (likely an RPG program for further transaction processing).</li> <li>Opens files:<ul> <li><code>APPYTR</code> (labeled <code>?9?AP151S</code>): Sorted transaction file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, extendable): Payment work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li> <p>Runs <code>AP151</code> to process sorted transactions and update payment records, including handling discounts for late payments (noted in the comment: \"ADD CODE TO SAVE INVOICE INFO WHEN A DISCOUNT IS AVAILABLE BUT PAID TOO LATE\").</p> </li> <li> <p>Generate Cash Requirements Report:</p> </li> <li>Loads <code>#GSORT</code> again to sort payment records for reporting.</li> <li>Sorts the input file <code>?9?APPY?WS?</code> into output file <code>?9?APPS?WS?</code> (999,000 records).</li> <li>Sort specifications:<ul> <li>Sort by company (bytes 2-3), bank G/L number (bytes 153-160), vendor (bytes 4-8), prepaid code (byte 97), check number (bytes 91-96), and single check code (byte 152).</li> </ul> </li> <li> <p>Runs the sort to prepare data for the cash requirements report.</p> </li> <li> <p>Set Wire Transfer Indicator:</p> </li> <li> <p>Checks parameter <code>?3?</code>:</p> <ul> <li>If <code>?3?</code> equals <code>'WT'</code>, sets a local variable at offset 198 to <code>'WT*** WIRE TRANSFER ***'</code>.</li> <li>Otherwise, sets it to a blank string.</li> </ul> </li> <li> <p>Load AP155 Program:</p> </li> <li>Loads the <code>AP155</code> program (likely for generating the cash requirements report or final payment processing).</li> <li>Opens files:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>, shared): Payment work file.</li> <li><code>AP155S</code> (labeled <code>?9?APPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): Transaction work file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): Open A/P file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>, extendable): Check work file.</li> <li><code>APDETINV</code> (labeled <code>?9?APDT?WS?</code>, extendable): Invoice detail work file.</li> <li><code>APPYDS</code> (labeled <code>?9?APDS?WS?</code>, extendable): Payment discount work file.</li> </ul> </li> <li>Overrides printer file <code>APCSHRQ</code> to output queue <code>QUSRSYS/APEDIT</code> or <code>QUSRSYS/TESTOUTQ</code> based on parameter <code>?9?</code>.</li> <li> <p>Runs <code>AP155</code> to generate the cash requirements report or finalize payments.</p> </li> <li> <p>AP156 Program and Cleanup:</p> <ul> <li>Invokes <code>AP156</code> with parameter <code>?9?</code>.</li> <li>If in AUTO mode (<code>?2?/AUTO</code>), clears all local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Proceeds to the <code>END</code> tag, terminating the program.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP150: Initial program for A/P payment transaction entry and editing. 2. #GSORT: System sort utility, called twice for sorting payment and report data. 3. AP151: Program for processing sorted payment transactions and handling discounts. 4. AP155: Program for generating the cash requirements report or finalizing payments. 5. AP156: Final program, likely for cleanup or additional processing.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables), with their labels and descriptions: 1. APPYTR (<code>?9?APPT?WS?</code>, <code>?9?AP151S</code>): Payment transaction work file (input and sorted output). 2. APCONT (<code>?9?APCONT</code>): A/P control file, shared. 3. GLMAST (<code>?9?GLMAST</code>): General ledger master file, shared. 4. APVEND (<code>?9?APVEND</code>): Vendor master file, shared. 5. APOPEN (<code>?9?APOPEN</code>): Open A/P file, shared. 6. GSTABL (<code>?9?GSTABL</code>): General system table, shared. 7. GSCONT (<code>?9?GSCONT</code>): General system control file, shared. 8. APPAY (<code>?9?APPY?WS?</code>): Payment work file, extendable. 9. AP155S (<code>?9?APPS?WS?</code>): Sorted payment file for reporting. 10. APCHKR (<code>?9?APCHKR</code>): Check register file, shared. 11. APPYCK (<code>?9?APPC?WS?</code>): Check work file, extendable. 12. APDETINV (<code>?9?APDT?WS?</code>): Invoice detail work file, extendable. 13. APPYDS (<code>?9?APDS?WS?</code>): Payment discount work file, extendable. 14. APPO?WS?: Temporary work file (checked for existence). 15. APCSHRQ: Printer file for the cash requirements report.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150OCL/#summary","title":"Summary","text":"<p>The <code>AP150</code> OCL program orchestrates the A/P payment transaction process by: - Creating and managing work files for transactions, payments, and discounts. - Sorting data for processing and reporting. - Invoking RPG programs (<code>AP150</code>, <code>AP151</code>, <code>AP155</code>, <code>AP156</code>) for specific tasks. - Handling special cases like wire transfers and late payment discounts. - Generating a cash requirements report.</p> <p>It interacts with multiple files (both permanent and temporary) and uses the <code>#GSORT</code> utility for data organization. The program is designed to run either standalone or in AUTO mode as part of a larger process (<code>AP200</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/","title":"AP150RPG","text":"<p>The <code>AP150.rpg36.txt</code> file is an RPG III program (used on IBM midrange systems like the AS/400, now IBM i) that handles Accounts Payable (A/P) Payment Transaction Entry and Edit. It is the first program called by the <code>AP150.ocl36.txt</code> OCL script, as specified in the <code>LOAD AP150</code> statement. This program provides a user interface for entering and editing payment transactions, validating inputs, and managing payment selections for checks, ACH, wire transfers, employee expenses, or utility auto-pay. Below, I\u2019ll explain the process steps and business rules embedded in the program, based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#process-steps-of-the-ap150-rpg-program","title":"Process Steps of the AP150 RPG Program","text":"<p>The <code>AP150</code> program is a workstation-based application that uses a display file (<code>SCREEN</code>) to interact with users for entering and editing A/P payment transactions. It processes data through a series of screens (<code>AP150S1</code> to <code>AP150S5</code>) and performs validations, file updates, and navigation logic. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Initializes variables, sets system date and time, and determines the operating mode (add or update).</li> <li>Checks if 13 accounting periods are used (<code>GX13GL</code> in <code>GSCONT</code> file).</li> <li>If no records exist in <code>APPYTR</code> (payment transaction file), sets the program to add mode (<code>indicator 17</code>) and initializes <code>NXTSEQ</code> (next sequence number) to 1.</li> <li> <p>If records exist, sets the program to update mode (<code>indicator 16</code>), retrieves the company number (<code>PTCONO</code>), and increments <code>NXTSEQ</code> based on the last sequence number (<code>LSTSEQ</code>).</p> </li> <li> <p>Screen Processing:    The program uses five screen formats (<code>AP150S1</code> to <code>AP150S5</code>) to collect and validate data. Each screen corresponds to a specific step in the payment transaction entry process:</p> </li> <li>S1 (Screen 1): Collects company number (<code>CONO</code>).<ul> <li>Validates the company number against <code>APCONT</code> (A/P control file).</li> <li>If valid, retrieves company details (e.g., cash G/L account <code>ACCAGL</code>, next check number <code>ACCKNO</code>) and populates screen fields.</li> <li>If invalid, displays error message \"INVALID COMPANY #\".</li> </ul> </li> <li>S2 (Screen 2): Collects bank G/L number (<code>BKGL</code>), check date (<code>CKDT</code>), payment date (<code>DATE</code>), force discount flag (<code>FDISC</code>), accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>), and payment method (<code>KYHOLD</code>).<ul> <li>Validates inputs (e.g., bank G/L against <code>GLMAST</code>, check number not zero, valid dates, valid <code>KYHOLD</code> codes: <code>' '</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>).</li> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), validates the CAPTCHA code (<code>APCODE</code>) to ensure authorized access.</li> <li>Performs date and period validations, especially for 13 accounting periods.</li> </ul> </li> <li>S3 (Screen 3): Collects sequence number (<code>SEQ#</code>) for a transaction.<ul> <li>Validates <code>SEQ#</code> against <code>APPYTR</code> and ensures it\u2019s not marked for deletion (<code>PTDEL='D'</code>).</li> <li>Retrieves transaction details if valid; otherwise, displays an error.</li> </ul> </li> <li>S4 (Screen 4): Collects vendor (<code>VEND</code>), voucher (<code>VO</code>), payment amount (<code>AMT</code>), discount amount (<code>DISC</code>), and other flags (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).<ul> <li>Performs extensive validations (e.g., vendor exists in <code>APVEND</code>, voucher exists in <code>APOPEN</code>, payment amount doesn\u2019t exceed gross amount, correct payment method).</li> <li>Updates or adds the transaction to <code>APPYTR</code>.</li> </ul> </li> <li> <p>S5 (Screen 5): Allows the user to start over by deleting all transactions.</p> <ul> <li>Requires confirmation with the code <code>\"START OVER\"</code>.</li> <li>Deletes all records in <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Key Navigation and Modes:</p> </li> <li>The program supports add mode (<code>indicator 17</code>) for new transactions and update mode (<code>indicator 16</code>) for editing existing ones.</li> <li>Function keys control navigation:<ul> <li>KA F2: Rekey without adding/updating.</li> <li>KA F4: Clear selections and start over.</li> <li>KD F3: Delete a transaction.</li> <li>KG F3: End the job.</li> <li>KJ F11: Switch to add mode.</li> <li>KK F12: Switch to update mode.</li> <li>KL: Allow payment from a different bank G/L number than originally assigned.</li> <li>Roll Keys (18/19): Navigate forward/backward through transactions.</li> </ul> </li> <li> <p>The program updates the <code>LSTSEQ</code> (last sequence number) and increments <code>NXTSEQ</code> for new transactions.</p> </li> <li> <p>Data Validation and Editing:</p> </li> <li>The <code>S2EDIT</code>, <code>S4EDIT</code>, and <code>DTEDIT</code> subroutines perform detailed validations:<ul> <li>S2EDIT: Validates bank G/L, check number, dates, force discount code, and accounting period/year.</li> <li>S4EDIT: Validates vendor, voucher, payment amount, discount amount, and payment codes (<code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>).</li> <li>DTEDIT: Validates date formats, including leap year checks and month/day ranges.</li> </ul> </li> <li> <p>Errors trigger appropriate indicators (e.g., <code>90</code> for general errors) and display messages from the <code>MSG</code> array.</p> </li> <li> <p>File Updates:</p> </li> <li>Transactions are written to or updated in the <code>APPYTR</code> file (payment transaction file) using the <code>PUTPT</code> subroutine.</li> <li>Deletions are marked with <code>PTDEL='D'</code> in <code>APPYTR</code>.</li> <li> <p>The program updates the CAPTCHA code in <code>GSCONT</code> if needed (<code>CODEUP</code> subroutine).</p> </li> <li> <p>Error Handling and User Feedback:</p> </li> <li>Error messages are displayed on the screen (<code>MSG30</code>, <code>MSGC1</code>, <code>MSGC2</code>) based on validation failures (e.g., \"INVALID VENDOR #\", \"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li> <p>The program uses indicators (e.g., <code>81</code> to <code>90</code>) to control screen display and error states.</p> </li> <li> <p>Cleanup and Termination:</p> </li> <li>The <code>CLEAR</code> subroutine resets input fields for new entries.</li> <li>The <code>STOVER</code> subroutine handles the \"start over\" request.</li> <li>The program terminates when the user presses <code>KG</code> (F3) or completes the transaction entry process.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#business-rules-in-the-ap150-rpg-program","title":"Business Rules in the AP150 RPG Program","text":"<p>The program enforces several business rules to ensure accurate and secure A/P transaction processing. These rules are derived from the validation logic and comments in the code:</p> <ol> <li>Company Validation:</li> <li> <p>The company number (<code>CONO</code>) must exist in the <code>APCONT</code> file. If not, an error (\"INVALID COMPANY #\") is displayed, and the user is prompted to correct it.</p> </li> <li> <p>Bank G/L and Check Number:</p> </li> <li>The bank G/L number (<code>BKGL</code>) must exist in the <code>GLMAST</code> file (\"INVALID BANK G/L #\").</li> <li>The next check number (<code>NXCK</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\").</li> <li> <p>If a different bank G/L is used (<code>KL</code> key), the program allows overriding the original bank G/L assigned to a voucher, with a warning (\"PRESS F12 TO PAY VOUCHER\").</p> </li> <li> <p>Date Validations:</p> </li> <li>The check date (<code>CKDT</code>) and payment date (<code>DATE</code>) must be valid dates, checked via the <code>DTEDIT</code> subroutine.<ul> <li>Invalid dates trigger \"INVALID CHECK DATE\" or \"INVALID DATE TO PAY BY\".</li> <li>Dates must align with the accounting period/year (<code>KYPD</code>, <code>KYPDYY</code>) if 13 accounting periods are used (<code>GX13GL='Y'</code>).</li> <li>Dates are compared against period end dates in <code>GSTABL</code> to ensure they fall within valid ranges (\"DATE INVALID FOR PD/YR KEYED\").</li> </ul> </li> <li> <p>If the check date is not today\u2019s date, a warning is displayed (\"DATE NOT TODAY - F3 IF OK\").</p> </li> <li> <p>Payment Method Selection:</p> </li> <li>The <code>KYHOLD</code> field specifies the payment method: <code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), or <code>U</code> (utility auto-pay).</li> <li>The voucher\u2019s hold code (<code>OPHALT</code> in <code>APOPEN</code>) must match <code>KYHOLD</code>. Mismatches trigger the error \"CAN\u2019T PAY THIS VOUCHER NOW\".</li> <li> <p>For example, a voucher marked for ACH (<code>OPHALT='A'</code>) cannot be paid with a check (<code>KYHOLD=' '</code>).</p> </li> <li> <p>Voucher and Vendor Validation:</p> </li> <li>The vendor number (<code>VEND</code>) must exist in <code>APVEND</code> (\"INVALID VENDOR #\").</li> <li>The voucher number (<code>VO</code>) must exist in <code>APOPEN</code> and match the vendor/company (<code>OPCOVN</code>) (\"VOUCHER IS NOT OPEN\").</li> <li>For one-time vendors (<code>VEND=0</code>), a voucher number must be provided (\"A VOUCHER MUST BE KEYED\").</li> <li> <p>The voucher must not be on hold unless explicitly allowed.</p> </li> <li> <p>Payment and Discount Amounts:</p> </li> <li>The payment amount (<code>AMT</code>) must not exceed the remaining gross amount (<code>OPGRAM - OPPPTD</code>) in <code>APOPEN</code> (\"CAN\u2019T PAY MORE THAN -&gt;\").</li> <li>The discount amount (<code>DISC</code>) must not exceed the gross amount (\"INVALID DISCOUNT AMOUNT\").</li> <li> <p>The force discount code (<code>FDIS</code>) must be <code>' '</code> or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\").</p> </li> <li> <p>Pay or Hold and Single Check Codes:</p> </li> <li>The pay/hold code (<code>PORH</code>) must be <code>'P'</code> (pay) or <code>'H'</code> (hold) (\"PAY/HOLD MUST BE 'P'/'H'\").</li> <li> <p>The single check code (<code>SNGL</code>) must be <code>' '</code> or <code>'S'</code> (\"SINGLE CHECK MUST BE 'S'\").</p> </li> <li> <p>Prepaid Check Validation:</p> </li> <li>If the make prepaid code (<code>MKPP</code>) is specified, it must match the payment method:<ul> <li><code>'P'</code> for checks, <code>'A'</code> for ACH, <code>'W'</code> for wire transfers, <code>'E'</code> for employee expenses, or <code>'U'</code> for utility auto-pay.</li> <li>Errors trigger specific messages (e.g., \"MAKE PREPAID MUST BE 'A'\").</li> </ul> </li> <li>If <code>MKPP</code> is set, the prepaid check number (<code>PPCK</code>) and date (<code>PPDT</code>) must be provided and valid (\"PREPAID CHECK # IS MISSING\", \"INVALID PPD CHECK DATE\").</li> <li> <p>If <code>MKPP</code> is not set, <code>PPCK</code> and <code>PPDT</code> must be zero (\"PREPAID CHECK # MUST BE ZERO\", \"PPD CHECK DATE MUST BE ZERO\").</p> </li> <li> <p>Sequence Number Management:</p> </li> <li>The sequence number (<code>SEQ#</code>) must exist in <code>APPYTR</code> and not be marked for deletion (\"INVALID SEQUENCE #\", \"SEQ # WAS PREVIOUSLY DELETED\").</li> <li> <p>New transactions increment the sequence number (<code>NXTSEQ</code>).</p> </li> <li> <p>Start Over Functionality:</p> <ul> <li>Users can delete all transactions by entering <code>\"START OVER\"</code> in the <code>STOVER</code> field (\"REQUEST TO START OVER WAS IGNORED\" if incorrect).</li> <li>This clears <code>APPYTR</code> and resets the program to initial state.</li> </ul> </li> <li> <p>Security and CAPTCHA:</p> <ul> <li>If checks were previously printed (<code>CHKPRT='Y'</code>), a CAPTCHA code (<code>APCODE</code>) must be validated against <code>GSCONT</code> to proceed (\"OVERRIDE CODES DO NOT MATCH\").</li> <li>A new CAPTCHA code is generated and updated in <code>GSCONT</code> after validation (<code>CODEUP</code> subroutine).</li> </ul> </li> <li> <p>Accounting Period Handling:</p> <ul> <li>If 13 accounting periods are used (<code>GX13GL='Y'</code>), the period (<code>KYPD</code>) must be between 1 and 13, and the period/year must align with period end dates in <code>GSTABL</code> (\"INVALID PERIOD/YEAR\").</li> <li>The check date must fall within the specified period\u2019s date range.</li> </ul> </li> <li> <p>Transaction Deletion:</p> <ul> <li>Transactions can be marked for deletion (<code>PTDEL='D'</code>) using the <code>KD</code> key.</li> <li>Deleted transactions are not processed further but remain in <code>APPYTR</code> with the deletion flag.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP150RPG/#summary","title":"Summary","text":"<p>The <code>AP150</code> RPG program is a critical component of the A/P payment transaction process, providing an interactive interface for entering and editing payment details. It progresses through five screens to collect and validate company, bank, date, vendor, voucher, and payment information. The program enforces strict business rules to ensure data integrity, including validations for company, vendor, voucher, payment amounts, and payment methods. It supports multiple payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles special cases like prepaid checks and 13 accounting periods. The program interacts with multiple files (<code>APPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>GSCONT</code>, <code>GSTABL</code>) and uses subroutines to modularize validation and processing logic.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/","title":"AP151 RPG","text":"<p>The <code>AP151.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, specifically invoked after sorting payment transactions in the <code>APPYTR</code> file. Its primary purpose is to create payment records in the <code>APPAY</code> file and handle discount tracking in the <code>APPYDS</code> file for Accounts Payable (A/P) transactions. Below, I\u2019ll detail the process steps, business rules, tables used, and called programs based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#process-steps-of-the-ap151-rpg-program","title":"Process Steps of the AP151 RPG Program","text":"<p>The <code>AP151</code> program processes sorted payment transaction records from <code>APPYTR</code> to generate payment records in <code>APPAY</code>, applying logic for payment selection, discount handling, and prepaid vouchers. It operates in two main modes based on the record type in <code>APPYTR</code>: paying by date (<code>EACH01</code>) or paying by vendor/voucher (<code>EACH02</code>). Here\u2019s a step-by-step breakdown:</p> <ol> <li>Read APPYTR Records:</li> <li>The program reads records from the <code>APPYTR</code> file, which contains payment transaction data sorted by company, vendor/voucher, and sequence number.</li> <li> <p>Records are processed in two formats:</p> <ul> <li>Format 01: Header records (pay by date, no specific vendor/voucher).</li> <li>Format 02: Detail records (pay by specific vendor/voucher).</li> </ul> </li> <li> <p>Process Header Records (<code>EACH01</code> Subroutine):</p> </li> <li>Converts check date (<code>PTCKDT</code>) and pay-by date (<code>PTDATE</code>) to 8-digit formats (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling for Y2K compliance.</li> <li> <p>For each header record:</p> <ul> <li>If the record is not marked for deletion (<code>PTDEL \u2260 'D'</code>), processes all applicable vouchers in <code>APOPEN</code>.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment method (<code>PTHOLD</code> must match <code>OPHALT</code>: <code>' '</code> for checks, <code>A</code> for ACH, <code>W</code> for wire transfer, <code>E</code> for employee expenses, <code>U</code> for utility auto-pay).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>) or on hold (<code>OPHALT \u2260 'H'</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>), ensures the payment method matches and processes them directly.</li> <li>For non-prepaid vouchers, checks discount eligibility:</li> <li>If force discount (<code>PTFDIS = 'D'</code>), applies the discount (<code>OPDISC</code>).</li> <li>Otherwise, compares the discount due date (<code>OPDSD8</code>) and due date (<code>DTYMD8</code>) against the check date (<code>CKYMD8</code>) and pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is valid (on or after check date and before or on pay-by date), applies the discount.</li> <li>If the discount due date is missed, records the voucher in <code>APPYDS</code> for tracking missed discounts and sets the discount to zero.</li> <li>Calculates the payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> <li>For one-time vendors (<code>OPVEND = 0</code>), sets the single check flag (<code>OPSNGL = 'S'</code>).</li> <li>Writes or updates the <code>APPAY</code> record with payment details.</li> </ul> </li> <li> <p>Process Detail Records (<code>EACH02</code> Subroutine):</p> </li> <li> <p>For detail records (specific vendor/voucher):</p> <ul> <li>If marked for deletion (<code>PTDEL = 'D'</code>), skips processing.</li> <li>Filters <code>APOPEN</code> records based on:</li> <li>Matching company number (<code>OPCONO = PTCONO</code>).</li> <li>Matching vendor number (<code>OPVEND = PTVEND</code>).</li> <li>Matching voucher number (<code>OPVONO = PTVO</code>) if paying a specific voucher.</li> <li>Matching bank G/L number (<code>OPBKGL = PTBKGL</code>) if paying the whole vendor.</li> <li>Payment method (<code>PTHOLD</code> matches <code>OPHALT</code>).</li> <li>Not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Handles hold status (<code>PTPORH = 'H'</code> to skip, <code>'P'</code> to pay).</li> <li>For prepaid vouchers, ensures the payment method matches (<code>PTMKPP</code> and <code>OPPAID</code>).</li> <li>Applies discounts based on <code>PTDISC</code> if provided, or sets to zero if the header discount is zero or the due date is past.</li> <li>Calculates the payment amount, adjusting for partial payments (<code>PTAMT</code>) if specified.</li> <li>Writes or updates the <code>APPAY</code> record, marking it for deletion if held (<code>PYDEL = 'D'</code>).</li> </ul> </li> <li> <p>Discount Tracking:</p> </li> <li> <p>If a discount is missed (check date past discount due date and no force discount), writes a record to <code>APPYDS</code> to track the missed discount (<code>EXCPTMISDIS</code>).</p> </li> <li> <p>Output to APPAY and APPYDS:</p> </li> <li>Writes payment records to <code>APPAY</code> with fields like payment amount (<code>OPLPAM</code>), discount (<code>OPDISC</code>), check number (<code>OPCKNO</code>), check date (<code>OPCKDT</code>), and payment method (<code>OPPAID</code>).</li> <li> <p>Writes missed discount records to <code>APPYDS</code> with similar fields for tracking purposes.</p> </li> <li> <p>Loop and Termination:</p> </li> <li>Continues processing <code>APPYTR</code> records until all are read.</li> <li>Terminates when no more records are available in <code>APPYTR</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#business-rules-in-the-ap151-rpg-program","title":"Business Rules in the AP151 RPG Program","text":"<p>The program enforces several business rules to ensure accurate payment processing and discount handling:</p> <ol> <li>Payment Method Matching:</li> <li> <p>The payment method in <code>APPYTR</code> (<code>PTHOLD</code>) must match the voucher's hold code in <code>APOPEN</code> (<code>OPHALT</code>):</p> <ul> <li><code>' '</code> (checks), <code>A</code> (ACH), <code>W</code> (wire transfer), <code>E</code> (employee expenses), <code>U</code> (utility auto-pay).</li> <li>Mismatches skip the voucher.</li> </ul> </li> <li> <p>Prepaid Voucher Handling:</p> </li> <li>Prepaid vouchers (<code>OPPAID = 'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>) are paid only if the payment method matches <code>PTHOLD</code>.</li> <li> <p>Prepaid check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>) are set to the transaction\u2019s check date (<code>PTCKDT</code>).</p> </li> <li> <p>Discount Eligibility:</p> </li> <li>If force discount is set (<code>PTFDIS = 'D'</code>), the discount (<code>OPDISC</code>) is applied regardless of the discount due date.</li> <li>Otherwise, discounts are applied only if:<ul> <li>The discount due date (<code>OPDSD8</code>) is on or after the check date (<code>CKYMD8</code>) and before or on the pay-by date (<code>PTDAT8</code>).</li> <li>If the discount due date is missed, the discount is set to zero, and a record is written to <code>APPYDS</code>.</li> </ul> </li> <li> <p>If the voucher is partially paid (<code>OPPPTD &gt; 0</code>) or past due, the discount is set to zero unless forced.</p> </li> <li> <p>Due Date Validation:</p> </li> <li> <p>Vouchers are selected for payment only if their due date (<code>DTYMD8</code>) is on or before the pay-by date (<code>PTDAT8</code>), unless force discount is applied.</p> </li> <li> <p>Partial Payments:</p> </li> <li>For detail records with a partial payment amount (<code>PTAMT &gt; 0</code>), the payment amount (<code>OPLPAM</code>) is set to <code>PTAMT</code>, and the discount is adjusted accordingly.</li> <li> <p>If the partial payment amount equals the remaining amount (<code>OPLPAM</code>), the discount is set to zero.</p> </li> <li> <p>One-Time Vendors:</p> </li> <li> <p>For one-time vendors (<code>OPVEND = 0</code>), the single check flag (<code>OPSNGL</code>) is set to <code>'S'</code>.</p> </li> <li> <p>Hold Status:</p> </li> <li>Vouchers on hold (<code>OPHALT = 'H'</code>) are skipped unless explicitly marked to pay (<code>PTPORH = 'P'</code>).</li> <li> <p>Detail records with <code>PTPORH = 'H'</code> are marked for deletion in <code>APPAY</code> (<code>PYDEL = 'D'</code>).</p> </li> <li> <p>Company and Bank G/L Matching:</p> </li> <li> <p>The company number (<code>OPCONO</code>) and bank G/L number (<code>OPBKGL</code>) must match the transaction\u2019s values (<code>PTCONO</code>, <code>PTBKGL</code>).</p> </li> <li> <p>Missed Discount Tracking:</p> </li> <li>If a discount is available but cannot be taken (check date past discount due date), a record is written to <code>APPYDS</code> to track the missed discount.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPYTR (<code>IP</code>, Input Primary, 128 bytes):</li> <li>Payment transaction file containing sorted header and detail records.</li> <li> <p>Fields include <code>PTCONO</code> (company), <code>PTVEND</code> (vendor), <code>PTVO</code> (voucher), <code>PTAMT</code> (payment amount), <code>PTDISC</code> (discount), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method), etc.</p> </li> <li> <p>APOPEN (<code>ID</code>, Input with Disk, 384 bytes):</p> </li> <li>Open A/P file containing voucher details.</li> <li> <p>Fields include <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPDSDT</code> (discount due date), <code>OPDUED</code> (due date), <code>OPHALT</code> (hold code), <code>OPPAID</code> (prepaid code), etc.</p> </li> <li> <p>APPAY (<code>UC</code>, Update/Create, 384 bytes):</p> </li> <li>Output file for payment records.</li> <li> <p>Fields include <code>PYDEL</code> (delete flag), <code>OPLPAM</code> (payment amount), <code>OPDISC</code> (discount), <code>OPCKNO</code> (check number), <code>OPPAID</code> (payment method), <code>OPSNGL</code> (single check), <code>PTSEQ#</code> (sequence number), etc.</p> </li> <li> <p>APPYDS (<code>O</code>, Output, 384 bytes):</p> </li> <li>Output file for tracking missed discounts.</li> <li>Fields mirror <code>APPAY</code>, including <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>PTSEQ#</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#called-programs","title":"Called Programs","text":"<p>The <code>AP151</code> program does not explicitly call any external programs. It is a standalone RPG program that processes input from <code>APPYTR</code> and <code>APOPEN</code>, writing output to <code>APPAY</code> and <code>APPYDS</code>. The OCL script (<code>AP150.ocl36.txt</code>) invokes <code>AP151</code> after sorting <code>APPYTR</code> with <code>#GSORT</code>, but no additional programs are called within <code>AP151</code> itself.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP151%20RPG/#summary","title":"Summary","text":"<p>The <code>AP151</code> RPG program processes sorted payment transactions from <code>APPYTR</code> to create payment records in <code>APPAY</code> and track missed discounts in <code>APPYDS</code>. It handles two types of transactions: pay-by-date (header) and pay-by-vendor/voucher (detail). The program enforces strict business rules for payment method matching, discount eligibility, due date validation, and prepaid voucher handling. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures accurate payment calculations while tracking missed discounts for reporting. The program interacts with four files (<code>APPYTR</code>, <code>APOPEN</code>, <code>APPAY</code>, <code>APPYDS</code>) and does not call external programs.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/","title":"AP155 RPG","text":"<p>The <code>AP155.rpg36.txt</code> file is an RPG III program called by the <code>AP150.ocl36.txt</code> OCL script, designed to generate a Cash Requirements Report for Accounts Payable (A/P) transactions. It processes payment records from the <code>APPAY</code> file, updates invoice details in <code>APDETINV</code>, and produces a formatted report in <code>APCSHRQ</code>. Below, I detail the process steps, business rules, tables used, and external programs called based on the provided code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#process-steps-of-the-ap155-rpg-program","title":"Process Steps of the AP155 RPG Program","text":"<p>The <code>AP155</code> program generates a cash requirements report by processing payment records from <code>APPAY</code>, aggregating totals, validating checks, and updating invoice details. It handles both prepaid and non-prepaid payments, supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay), and tracks missed discounts. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Initialization (<code>L6DET</code> Subroutine):</li> <li>Initializes variables: sets page number to zero, clears counters (<code>C6CNT</code>, <code>P6CNT</code>, <code>L6CNT</code>, etc.), and prepares the report header.</li> <li>Retrieves the system date and time, formatting the date as an 8-digit value (<code>DATE8</code>) for Y2K compliance.</li> <li>Chains to <code>APCONT</code> to retrieve the company name (<code>ACNAME</code>) and check if pre-numbered checks are used (<code>ACPRE#</code>).</li> <li>Chains to <code>APPYTR</code> to get the next check number (<code>PTNXCK</code>), check date (<code>PTCKDT</code>), pay-by date (<code>PTDATE</code>), force discount flag (<code>PTFDIS</code>), and payment method (<code>PTHOLD</code>).</li> <li>Sets the payment method description (<code>PAYBY</code>) based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>A</code>: \"PAY BY ACH\"</li> <li><code>W</code>: \"PAY BY WIRE TFR\"</li> <li><code>E</code>: \"PAY BY PAYROLL\"</li> <li><code>U</code>: \"PAY BY UTIL AUPY\"</li> </ul> </li> <li> <p>Writes the report header to <code>APCSHRQ</code> with company name, payment method, check date, and other details.</p> </li> <li> <p>Process APPAY Records:</p> </li> <li>Reads records from <code>APPAY</code> (payment file) sorted by company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and sequence number (<code>OPSEQ#</code>).</li> <li> <p>For each record:</p> <ul> <li>Checks if the record is not deleted (<code>OPDEL \u2260 'D'</code>).</li> <li>Identifies payment type:</li> <li>Prepaid payments: <code>OPPAID = 'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expenses), <code>'U'</code> (utility auto-pay).</li> <li>Single check: <code>OPSNGL = 'S'</code>.</li> <li>Updates <code>APDETINV</code> to track invoice details:</li> <li>Constructs a key (<code>APKY27</code>) using company (<code>OPCONO</code>), vendor (<code>OPVEND</code>), and invoice number (<code>OPINVN</code>).</li> <li>Chains to <code>APDETINV</code> to check for existing records.</li> <li>If found, adds gross amount (<code>OPGRAM</code>) and discount (<code>OPDISC</code>) to existing totals (<code>APGRAM</code>, <code>APDISC</code>).</li> <li>If not found, creates a new record with invoice details.</li> </ul> </li> <li> <p>Aggregate Totals:</p> </li> <li>Accumulates totals for gross amount (<code>CKGRAM</code>), discount (<code>CKDISC</code>), and payment amount (<code>CKAMT</code>) for each check.</li> <li>Tracks invoice count (<code>COUNT</code>) per check, with a maximum of 36 invoices to avoid stub overflow.</li> <li> <p>Maintains company-level totals:</p> <ul> <li><code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>: Computer checks.</li> <li><code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>: Prepaid payments.</li> <li><code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>: Total checks.</li> </ul> </li> <li> <p>Check Validation (<code>CHECK</code> Subroutine):</p> </li> <li>Determines the check number (<code>THISCK</code>):<ul> <li>For prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For non-prepaid, uses the next check number (<code>NXCK</code>) and increments it.</li> </ul> </li> <li>If the payment amount is zero or negative (<code>CKAMT \u2264 0</code>), marks the check as \"CREDIT / NO PAY\" and processes it in the <code>NOPAY</code> subroutine.</li> <li>Checks for missed discounts by chaining to <code>APPYDS</code> with a key (<code>DSKY12</code>) based on company and vendor/voucher. If found, sets indicator <code>50</code> to note \"DISCOUNT NOT TAKEN\" on the report.</li> <li>Validates the check against <code>APCHKR</code>:<ul> <li>For non-void checks (<code>CKAMT &gt; 0</code>), ensures the check does not exist or is not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks (<code>CKAMT &lt; 0</code>), ensures the check exists, is open, and the entire amount is voided (<code>VOIDAM = AMCKAM</code>).</li> </ul> </li> <li> <p>Writes the check record to <code>APPYCK</code> with fields like check number, payment amount, and status (<code>'F'</code> for full stub, <code>'V'</code> for void, <code>'C'</code> for credit/no pay).</p> </li> <li> <p>Handle Credit/No Pay and Full Stubs (<code>NOPAY</code> Subroutine):</p> </li> <li>For checks with zero or negative amounts (<code>CKAMT \u2264 0</code>) or full stubs (36 invoices), marks related <code>APPYCK</code> records as \"CREDIT / NO PAY\" (<code>AXRECD = 'C'</code>, <code>AXCHEK = 0</code>).</li> <li> <p>Adjusts counters (<code>C6CNT</code>, <code>L6CNT</code>) if a full stub was previously written with the same check number.</p> </li> <li> <p>Report Output:</p> </li> <li>Writes detail lines to <code>APCSHRQ</code> for each invoice, including sequence number (<code>OPSEQ#</code>), invoice number (<code>OPINVN</code>), description (<code>OPINDS</code>), gross amount (<code>OPGRAM</code>), discount (<code>OPDISC</code>), paid-to-date (<code>OPPPTD</code>), payment amount (<code>OPLPAM</code>), due date (<code>OPDUED</code>), vendor (<code>OPVEND</code>), and voucher (<code>OPVONO</code>).</li> <li>Writes check totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) with annotations for prepaid payments, full stubs, or void checks.</li> <li>Writes company totals (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, etc.) at the end of each company group.</li> <li> <p>Includes error messages for invalid checks (e.g., \"CHECK IS ALREADY OPEN\", \"WHOLE CHECK AMOUNT MUST BE VOIDED\").</p> </li> <li> <p>End of Processing:</p> </li> <li>At the end of each company (<code>L6</code>), writes company totals and resets counters.</li> <li>Continues processing until all <code>APPAY</code> records are read, then terminates.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#business-rules-in-the-ap155-rpg-program","title":"Business Rules in the AP155 RPG Program","text":"<p>The program enforces the following business rules:</p> <ol> <li>Payment Method Handling:</li> <li>Supports payment methods: checks (<code>' '</code>), ACH (<code>A</code>), wire transfers (<code>W</code>), employee expenses (<code>E</code>), and utility auto-pay (<code>U</code>).</li> <li>Prepaid payments (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>) use the provided check number (<code>OPCKNO</code>) and date (<code>OPCKDT</code>).</li> <li> <p>Non-prepaid payments increment the next check number (<code>NXCK</code>) from <code>APPYTR</code>.</p> </li> <li> <p>Single Check Processing:</p> </li> <li> <p>Vouchers marked as single check (<code>OPSNGL = 'S'</code>) are processed individually, ensuring separate checks for one-time vendors or specific vouchers.</p> </li> <li> <p>Invoice Aggregation:</p> </li> <li> <p>For multiple invoices with the same invoice number for a vendor, aggregates gross (<code>APGRAM</code>) and discount (<code>APDISC</code>) amounts in <code>APDETINV</code> to avoid duplicate entries (per modifications <code>JB03</code> and <code>MG04</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>Non-void checks must not already exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open, and have the entire amount voided.</li> <li> <p>Zero or negative payment amounts (<code>CKAMT \u2264 0</code>) are marked as \"CREDIT / NO PAY\" and not paid.</p> </li> <li> <p>Stub Limits:</p> </li> <li> <p>A maximum of 36 invoices per check is enforced to prevent stub overflow. If exceeded, the check is marked as a full stub (<code>'F'</code> or <code>'V'</code>), and processing continues with a new check number.</p> </li> <li> <p>Missed Discount Reporting:</p> </li> <li> <p>If a record exists in <code>APPYDS</code> for a voucher, indicates a missed discount on the report (\"DISCOUNT NOT TAKEN\").</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to validate company number and retrieve company name.</li> <li> <p>Chains to <code>APVEND</code> or <code>APOPEN</code> to retrieve vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>) for reporting.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company name, payment method, bank G/L, next check number, and dates.</li> <li>Detail lines include invoice details, and totals are provided for computer checks, prepaid payments, and overall checks per company.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>APPAY (<code>UP</code>, Update Primary, 384 bytes):</li> <li>Payment file containing records to be reported.</li> <li> <p>Fields: <code>OPDEL</code> (delete flag), <code>OPCONO</code> (company), <code>OPVEND</code> (vendor), <code>OPVONO</code> (voucher), <code>OPGRAM</code> (gross amount), <code>OPDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINVN</code> (invoice number), <code>OPLPAM</code> (payment amount), <code>OPPAID</code> (prepaid code), <code>OPSNGL</code> (single check), <code>OPCKNO</code> (check number), <code>OPCKDT</code> (check date).</p> </li> <li> <p>AP155S (<code>IR</code>, Input Random, 3 bytes):</p> </li> <li> <p>Input file for report sequencing (likely a control or sort file).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APPYTR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Payment transaction file for header information.</li> <li> <p>Fields: <code>PTBKGL</code> (bank G/L), <code>PTNXCK</code> (next check number), <code>PTCKDT</code> (check date), <code>PTDATE</code> (pay-by date), <code>PTFDIS</code> (force discount), <code>PTHOLD</code> (payment method).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for vendor details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APOPEN (<code>IC</code>, Input with Chain, 384 bytes):</p> </li> <li>Open A/P file for voucher details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNSORT</code> (sort abbreviation).</p> </li> <li> <p>APCHKR (<code>IC</code>, Input with Chain, 128 bytes):</p> </li> <li>Check register file for validating check status.</li> <li> <p>Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMCKAM</code> (check amount).</p> </li> <li> <p>APPYCK (<code>UC</code>, Update/Create, 96 bytes):</p> </li> <li>Check file for recording check details.</li> <li> <p>Fields: <code>AXRECD</code> (record code: ' ', F, V, C, P, A, W, E, U), <code>AXCHEK</code> (check number), <code>CKAMT</code> (payment amount), <code>PTCKDT</code> (check date).</p> </li> <li> <p>APDETINV (<code>UF</code>, Update with File, 256 bytes):</p> </li> <li>Invoice detail file for tracking invoice totals.</li> <li> <p>Fields: <code>APDEL</code> (delete flag), <code>APCONO</code> (company), <code>APVEND</code> (vendor), <code>APINVN</code> (invoice number), <code>APGRAM</code> (gross amount), <code>APDISC</code> (discount), <code>OPPPTD</code> (partial paid), <code>OPINDS</code> (description), <code>OPDUED</code> (due date), <code>OPVONO</code> (voucher).</p> </li> <li> <p>APPYDS (<code>IF</code>, Input with File, 384 bytes):</p> <ul> <li>Missed discount file for identifying discounts not taken.</li> <li>Fields: <code>DSDEL</code> (delete flag), <code>DSCONO</code> (company), <code>DSVEND</code> (vendor), <code>DSVONO</code> (voucher), <code>DSDISC</code> (discount), <code>DSDSDT</code> (discount due date).</li> </ul> </li> <li> <p>APCSHRQ (<code>O</code>, Output, 142 bytes):</p> <ul> <li>Printer file for the cash requirements report.</li> <li>Outputs headers, detail lines, check totals, and company totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP155</code> program does not explicitly call any external programs. It is a standalone RPG program invoked by the <code>AP150.ocl36.txt</code> OCL script after <code>AP151</code> and sorting operations. All processing is handled internally through subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>).</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP155%20RPG/#summary","title":"Summary","text":"<p>The <code>AP155</code> RPG program generates a Cash Requirements Report by processing <code>APPAY</code> records, updating <code>APDETINV</code> for invoice tracking, and validating checks against <code>APCHKR</code>. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and enforces rules for check validation, stub limits (36 invoices), and missed discount reporting. The program interacts with 11 files (<code>APPAY</code>, <code>AP155S</code>, <code>APCONT</code>, <code>APPYTR</code>, <code>APVEND</code>, <code>APOPEN</code>, <code>APCHKR</code>, <code>APPYCK</code>, <code>APDETINV</code>, <code>APPYDS</code>, <code>APCSHRQ</code>) and produces a detailed report in <code>APCSHRQ</code> with invoice details, check totals, and company summaries. No external programs are called, as all logic is self-contained.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/","title":"AP156 RPG","text":"<p>Below, I provide a detailed analysis of the AP156.ocl36.txt OCL script and the AP156.rpg36.txt RPG program, which are part of the Accounts Payable (A/P) payment processing system. The OCL script invokes the <code>AP156</code> RPG program to create a National Automated Clearing House Association (NACHA) file for ACH payments to PNC Bank. I will outline the process steps, business rules, tables used, and external programs called for both the OCL and RPG components.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156ocl36txt-ocl-script","title":"AP156.ocl36.txt (OCL Script)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP156.ocl36.txt</code> OCL script is responsible for initiating the creation of a NACHA file for ACH payments. The steps are as follows:</p> <ol> <li>Conditional Execution Check:</li> <li>Checks if the payment run is for ACH payments by examining position 400 of the Local Data Area (LDA). The value must be <code>'A'</code>, set by the <code>AP155</code> program if ACH payments (<code>OPPAID = 'A'</code>) are detected in <code>APPAY</code>.</li> <li> <p>If the LDA position 400 does not contain <code>'A'</code>, the script jumps to the <code>END</code> tag, skipping execution of the <code>AP156</code> program.</p> </li> <li> <p>Clear ACH File:</p> </li> <li> <p>Executes the <code>CLRPFM</code> command to clear the physical file <code>ACHFIL</code> (labeled <code>?9?ACHFIL</code>), ensuring no residual data from previous runs.</p> </li> <li> <p>Load and Run AP156 Program:</p> </li> <li>Loads the <code>AP156</code> RPG program using the <code>LOAD AP156</code> command.</li> <li>Specifies input and output files:<ul> <li><code>APPYCK</code>: Check file, labeled <code>?9?APPC?WS?</code>, shared access (<code>DISP-SHR</code>).</li> <li><code>APCONT</code>: A/P control file, labeled <code>?9?APCONT</code>, shared access.</li> <li><code>APVEND</code>: Vendor file, labeled <code>?9?APVEND</code>, shared access.</li> <li><code>ACHFILE</code>: Output NACHA file, labeled <code>?9?ACHFIL</code>, shared access.</li> </ul> </li> <li> <p>Executes the program using the <code>RUN</code> command.</p> </li> <li> <p>Termination:</p> </li> <li>If the ACH condition is not met, the script terminates at the <code>END</code> tag without running <code>AP156</code>.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>ACH Payment Requirement:</li> <li>The script only proceeds if the payment run includes ACH payments (<code>LDA position 400 = 'A'</code>).</li> <li> <p>If no ACH payments are present, the script skips execution to avoid unnecessary processing.</p> </li> <li> <p>File Preparation:</p> </li> <li> <p>The <code>ACHFIL</code> file must be cleared before processing to ensure a clean slate for the NACHA file output.</p> </li> <li> <p>Shared File Access:</p> </li> <li>All files (<code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, <code>ACHFILE</code>) are opened with shared access (<code>DISP-SHR</code>) to allow concurrent access by other programs or processes.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>?9?APPC?WS?</code>):</li> <li>Check file containing payment records.</li> <li>APCONT (<code>?9?APCONT</code>):</li> <li>A/P control file with company details.</li> <li>APVEND (<code>?9?APVEND</code>):</li> <li>Vendor file with vendor details, including ACH information.</li> <li>ACHFILE (<code>?9?ACHFIL</code>):</li> <li>Output file for the NACHA-formatted ACH payment data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP156: The RPG program loaded and executed to create the NACHA file.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#ap156rpg36txt-rpg-program","title":"AP156.rpg36.txt (RPG Program)","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#process-steps_1","title":"Process Steps","text":"<p>The <code>AP156</code> RPG program generates a NACHA-formatted file (<code>ACHFILE</code>) for ACH payments to PNC Bank, processing records from <code>APPYCK</code> and retrieving additional data from <code>APCONT</code> and <code>APVEND</code>. The program produces a structured file with specific record types (1, 5, 6, 8, 9) as required by NACHA standards. Here are the steps:</p> <ol> <li>Initialization (<code>ONETIM</code> Subroutine):</li> <li> <p>Executes once (<code>ONCE = 1</code>) to set up the environment:</p> <ul> <li>Retrieves system date and time (<code>SYTMDT</code>) and formats the date for NACHA records.</li> <li>Initializes counters: <code>BATCH#</code> (batch number), <code>TRACE#</code> (trace number), <code>LRCNT</code> (entry count), <code>LRHASH</code> (hash total), <code>LRDR</code> (debit total), <code>LRCR</code> (credit total), <code>RECCNT</code> (record count).</li> <li>Writes the File Header Record (Type 1) to <code>ACHFILE</code> with fields like priority code, ABA numbers, transmission date/time, and company names.</li> </ul> </li> <li> <p>Process APPYCK Records:</p> </li> <li>Reads <code>APPYCK</code> records (check file) sorted by company (<code>PYCONO</code>) and vendor (<code>PYVEND</code>).</li> <li> <p>For each record:</p> <ul> <li>Validates that the record is not a detail record (<code>NS 01</code>) and has a valid status (<code>PYSTAT = 'A'</code> for ACH payments).</li> <li>Chains to <code>APCONT</code> to retrieve company details (e.g., <code>ACNAME</code>, <code>ACBKGL</code>) using <code>PYCONO</code>.</li> <li>Chains to <code>APVEND</code> to retrieve vendor ACH details (e.g., <code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>, <code>PYNAME</code>) using <code>PYVEND</code>.</li> </ul> </li> <li> <p>Write Batch Header (<code>L2DET</code> Subroutine):</p> </li> <li>On the first record for a new company (<code>L1, N84</code>), writes a Batch Header Record (Type 5) to <code>ACHFILE</code>.</li> <li>Includes fields like service class code (<code>200</code> for credits), company name, tax ID, and effective entry date (<code>CKYMD</code> from <code>PYCKDT</code>).</li> <li> <p>Initializes batch counters (<code>L2CNT</code>, <code>L2HASH</code>, <code>L2DR</code>, <code>L2CR</code>).</p> </li> <li> <p>Write Entry Detail (<code>EACH</code> Subroutine):</p> </li> <li> <p>For each <code>APPYCK</code> record:</p> <ul> <li>Determines the transaction code (<code>TRNCDE</code>): <code>'22'</code> for checking accounts (<code>VNACOS = 'C'</code>) or <code>'32'</code> for savings accounts.</li> <li>Sets the payment amount (<code>AMOUNT = PYCKAM</code>).</li> <li>Updates counters: increments <code>TRACE#</code>, <code>L2CNT</code>, <code>LRCNT</code>, <code>RECCNT</code>, and adds <code>VNARTE</code> to <code>L2HASH</code> and <code>LRHASH</code>, and <code>AMOUNT</code> to <code>L2CR</code> and <code>LRCR</code>.</li> <li>Writes an Entry Detail Record (Type 6) to <code>ACHFILE</code> with vendor bank routing code (<code>VNARTE</code>), account number (<code>VNABK#</code>), amount, vendor ID, and name.</li> </ul> </li> <li> <p>Write Batch Control (<code>L2TOT</code> Subroutine):</p> </li> <li>At the end of each company (<code>L2, 84</code>), writes a Batch Control Record (Type 8) to <code>ACHFILE</code>.</li> <li> <p>Includes batch entry count (<code>L2CNT</code>), hash total (<code>L2HASH</code>), credit total (<code>L2CR</code>), and batch number (<code>BATCH#</code>).</p> </li> <li> <p>Write File Control and Filler (<code>LRTOT</code> Subroutine):</p> </li> <li>At the end of processing (<code>LR, 10</code>), writes a File Control Record (Type 9) to <code>ACHFILE</code> with batch count (<code>LRBCNT</code>), block count (<code>LRBLOK</code>), entry count (<code>LRCNT</code>), hash total (<code>LRHASH</code>), and credit total (<code>LRCR</code>).</li> <li> <p>Calculates the number of blocks (<code>LRBLOK = RECCNT / 10</code>, rounded up) and fills remaining block space with filler records containing <code>'999999999999999999999999'</code>.</p> </li> <li> <p>Report Output:</p> </li> <li> <p>Outputs a report to <code>REPORT</code> (printer file) for logging or verification, though specific details are not defined in the code.</p> </li> <li> <p>Termination:</p> </li> <li>Completes after processing all <code>APPYCK</code> records and writing the necessary NACHA records.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#business-rules_1","title":"Business Rules","text":"<ol> <li>ACH Payment Validation:</li> <li> <p>Only processes <code>APPYCK</code> records with <code>PYSTAT = 'A'</code> (ACH payments), as confirmed by the OCL script\u2019s LDA check.</p> </li> <li> <p>NACHA Record Structure:</p> </li> <li>Adheres to NACHA file format standards:<ul> <li>Type 1 (File Header): Includes fixed ABA numbers (<code>043000096</code>, <code>1222318612</code>), transmission date/time, and company names.</li> <li>Type 5 (Batch Header): Uses service class code <code>200</code> (credits only), company tax ID (<code>1222318612</code>), and effective entry date.</li> <li>Type 6 (Entry Detail): Uses transaction codes (<code>22</code> for checking, <code>32</code> for savings), vendor bank details, and payment amount.</li> <li>Type 8 (Batch Control): Summarizes batch entries and totals.</li> <li>Type 9 (File Control): Summarizes file-level counts and totals.</li> </ul> </li> <li> <p>Filler records pad blocks to multiples of 10.</p> </li> <li> <p>Vendor ACH Details:</p> </li> <li>Requires valid ACH data in <code>APVEND</code> (<code>VNARTE</code>, <code>VNABK#</code>, <code>VNACOS</code>).</li> <li> <p>Transaction code is set based on account type (<code>VNACOS = 'C'</code> for checking, otherwise savings).</p> </li> <li> <p>Counter and Hash Management:</p> </li> <li>Maintains accurate counts for batches (<code>L2CNT</code>), entries (<code>LRCNT</code>), blocks (<code>LRBLOK</code>), and hash totals (<code>L2HASH</code>, <code>LRHASH</code>) for NACHA compliance.</li> <li> <p>Credit totals (<code>L2CR</code>, <code>LRCR</code>) reflect payment amounts.</p> </li> <li> <p>Company and Vendor Validation:</p> </li> <li>Chains to <code>APCONT</code> to ensure valid company number (<code>PYCONO</code>).</li> <li>Chains to <code>APVEND</code> to ensure valid vendor number (<code>PYVEND</code>) and retrieve ACH-specific fields.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#tables-files-used_1","title":"Tables (Files) Used","text":"<ol> <li>APPYCK (<code>IP</code>, Input Primary, 96 bytes):</li> <li>Check file containing ACH payment records.</li> <li> <p>Fields: <code>PYSTAT</code> (status), <code>PYCONO</code> (company), <code>PYBKGL</code> (bank G/L), <code>PYCHK#</code> (check number), <code>PYVEND</code> (vendor), <code>PYCKAM</code> (check amount), <code>PYCKDT</code> (check date), <code>PYNAME</code> (vendor name), <code>PYSEQ#</code> (sequence), <code>PYCNTR</code> (count).</p> </li> <li> <p>APCONT (<code>IC</code>, Input with Chain, 256 bytes):</p> </li> <li>A/P control file for company details.</li> <li> <p>Fields: <code>ACNAME</code> (company name), <code>ACCONO</code> (company number), <code>ACBKGL</code> (bank G/L), <code>ACPRE#</code> (pre-numbered checks flag).</p> </li> <li> <p>APVEND (<code>IC</code>, Input with Chain, 579 bytes):</p> </li> <li>Vendor file for ACH payment details.</li> <li> <p>Fields: <code>VNNAME</code> (vendor name), <code>VNARTE</code> (ACH bank routing code), <code>VNABK#</code> (ACH bank account number), <code>VNACOS</code> (checking/savings), <code>VNVEND</code> (vendor number).</p> </li> <li> <p>ACHFILE (<code>O</code>, Output, 94 bytes):</p> </li> <li>Output file for NACHA-formatted ACH payment data.</li> <li> <p>Record types: 1 (file header), 5 (batch header), 6 (entry detail), 8 (batch control), 9 (file control), filler.</p> </li> <li> <p>REPORT (<code>O</code>, Output, 132 bytes):</p> </li> <li>Printer file for logging or reporting (details not specified in code).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#external-programs-called_1","title":"External Programs Called","text":"<ul> <li>The <code>AP156</code> RPG program does not call any external programs. It is a standalone program invoked by the <code>AP156.ocl36.txt</code> script, processing input files and producing output files internally.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP150%20OCL%20Payment%20Selection%20%26%20Rpt/AP156%20RPG/#summary","title":"Summary","text":"<p>The <code>AP156.ocl36.txt</code> OCL script conditionally invokes the <code>AP156</code> RPG program to create a NACHA file for ACH payments if <code>LDA position 400 = 'A'</code>. It clears the <code>ACHFIL</code> file and loads <code>AP156</code> with access to <code>APPYCK</code>, <code>APCONT</code>, <code>APVEND</code>, and <code>ACHFILE</code>. The <code>AP156</code> RPG program processes <code>APPYCK</code> records to generate a NACHA-compliant file with file header, batch header, entry detail, batch control, and file control records, adhering to strict formatting rules. It uses vendor ACH details from <code>APVEND</code> and company data from <code>APCONT</code>, maintaining counters and hash totals for compliance. The program interacts with five files and does not call external programs, completing the ACH payment file creation process for PNC Bank.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/","title":"AP160 Print Checks Summary","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#list-of-use-cases-implemented-by-the-ap160-program","title":"List of Use Cases Implemented by the AP160 Program","text":"<p>Based on the provided OCL (<code>AP160.ocl36.txt</code>) and RPG (<code>AP160.rpg36.txt</code>) programs, the primary use case implemented is:</p> <ol> <li>Print Accounts Payable Checks for Vendor Payments:</li> <li>This use case involves processing selected vendor payments, generating physical checks (and copies) with detailed invoice information, and handling special cases like void checks or non-printed payments (e.g., ACH, wire transfers). The program retrieves data from various files, validates payment types, calculates totals, formats check output, and sends it to designated printers.</li> </ol> <p>No additional distinct use cases are explicitly implemented in the provided code, as the program's focus is solely on check printing for Accounts Payable.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-document","title":"Functional Requirements Document","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#functional-requirements-accounts-payable-check-printing","title":"Functional Requirements: Accounts Payable Check Printing","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#overview","title":"Overview","text":"<p>The Accounts Payable (A/P) Check Printing function automates the generation and printing of checks for vendor payments, ensuring accurate payment processing, proper formatting, and compliance with business rules. It processes input data from payment, vendor, and control files to produce checks and copies, handling various payment types and exceptions.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Payment Data: Invoice details (vendor number, invoice number, gross amount, discount, payment amount, invoice date, sequence number).</li> <li>Vendor Data: Vendor name, address (up to four lines), and sort code.</li> <li>Control Data: Company name and code.</li> <li>Transaction Data: Check date.</li> <li>Check Data: Check number and payment type (e.g., normal, prepaid, ACH, wire transfer, void).</li> <li>Environment Parameter: Indicator for production (<code>G</code>) or test (<code>Z</code>) environment to determine output queues.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Input Data: Collect payment, vendor, control, transaction, and check data from respective input sources.</li> <li>Validate Payment Type: Identify payment type to determine if a physical check is required:</li> <li>Skip printing for prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>) payments.</li> <li>Process normal payments or void checks (<code>F</code>, <code>V</code>) for printing.</li> <li>Calculate Check Totals: Aggregate gross amount, discount, and net payment amount for each vendor\u2019s invoices.</li> <li>Assign Check Number: Use a valid check number, incrementing for voided checks (<code>V</code>) to avoid duplicates.</li> <li>Format Check Output:</li> <li>Include company name (except for company code <code>01</code>), vendor name, address, check date, and check number.</li> <li>List invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Convert net payment amount to words (e.g., \"ONE HUNDRED DOLLARS AND 50/100\") for the check\u2019s written line.</li> <li>Mark void checks with \" VOID * VOID * VOID \".</li> <li>Print Checks and Copies:</li> <li>Send primary check to the production (<code>APCHECKS</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Send check copy to the production (<code>APCHKCPY</code>) or test (<code>TESTOUTQ</code>) queue.</li> <li>Create Temporary File (if needed): Generate a temporary file for check processing data if specified.</li> <li>Reset Accumulators: Clear totals after each check to prepare for the next vendor.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Selective Printing: Print checks only for normal payments or void checks (<code>F</code>, <code>V</code>); skip prepaid, ACH, wire transfer, employee expense, or credit/no pay payments.</li> <li>Void Check Handling:</li> <li>Print \"VOID\" on checks marked <code>F</code> (reuse check number) or <code>V</code> (use next check number).</li> <li>Company Name Exclusion: Omit company name on checks for company code <code>01</code>.</li> <li>Amount Formatting: Convert amounts to words, removing excess spaces to fit 10 CPI check layout; handle amounts over $999,999.99 correctly.</li> <li>Vendor Data Fallback: Use vendor details from open payables if missing from vendor master; blank fields if unavailable.</li> <li>Check Number Integrity: Skip voided check numbers to ensure valid, sequential issuance.</li> <li>Output Separation: Print checks and copies to separate queues for record-keeping.</li> <li>Invoice Aggregation: Combine multiple invoices for a vendor into one check with summarized totals.</li> <li>Date Consistency: Use transaction file\u2019s check date for all checks in a batch.</li> <li>Printer Configuration: Apply 6 lines per inch, 12 characters per inch, and standard quality for check printing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Primary Check: Formatted check with vendor details, invoice data, totals, and written amount, sent to the designated output queue.</li> <li>Check Copy: Duplicate of the check for record-keeping, sent to a separate output queue.</li> <li>Temporary File (optional): Temporary data file for processing, if required.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160%20Print%20Checks%20Summary/#constraints","title":"Constraints","text":"<ul> <li>Must handle large payment amounts without formatting errors.</li> <li>Must align with standard check printing formats (10 CPI).</li> <li>Must support production and test environments via output queue configuration.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/","title":"AP160OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AP160.ocl36.txt</code>, used on IBM midrange systems like the AS/400 (now IBM i) to manage Accounts Payable (A/P) check printing. Below, I\u2019ll explain the process steps of the program, list any external programs called, and identify tables or files created, destroyed, or read from.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#process-steps-of-the-ap160-ocl-program","title":"Process Steps of the AP160 OCL Program","text":"<p>The OCL program automates the printing of A/P checks, interacting with various files and printer configurations. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and Conditional Execution Check:</li> <li>The program checks if the parameter <code>?2?</code> is set to <code>AUTO</code>. If true, it jumps to the <code>AP160</code> tag, indicating it was called automatically by another procedure (likely <code>AP200</code>).</li> <li> <p>If not running in <code>AUTO</code> mode, the program proceeds with manual execution.</p> </li> <li> <p>User Interaction (Pause for Confirmation):</p> </li> <li>A commented-out <code>PAUSE</code> statement (not currently active) would prompt the user to either cancel the process (by pressing ATTN, 2, ENTER) or continue (by pressing 0, ENTER).</li> <li> <p>The <code>ATTR INQUIRY-YES,CANCEL-NO</code> suggests an inquiry screen for user confirmation, but it\u2019s not explicitly active in the provided code.</p> </li> <li> <p>Program Load and File Definitions (TAG AP160):</p> </li> <li>The program reaches the <code>AP160</code> tag and loads the <code>AP160</code> program (likely an RPG or CL program responsible for the core logic).</li> <li>It defines several files with specific labels and attributes:<ul> <li><code>APPAY</code> (labeled <code>?9?APPY?WS?</code>): Likely the payment file.</li> <li><code>AP160S</code> (labeled <code>?9?APPS?WS?</code>): Possibly a selection or summary file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, <code>DISP-SHR</code>): A control file, shared access.</li> <li><code>APPYTR</code> (labeled <code>?9?APPT?WS?</code>): A transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, shared access.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, shared access.</li> <li><code>APPYCK</code> (labeled <code>?9?APPC?WS?</code>): Check file.</li> </ul> </li> <li> <p>The <code>?9?</code> and <code>?WS?</code> are placeholders for environment-specific prefixes or suffixes (e.g., library or workspace identifiers).</p> </li> <li> <p>Printer File Overrides:</p> </li> <li>The program configures printer output for two files: <code>APCHECK</code> (main check output) and <code>CHECKCPY</code> (check copy output).</li> <li>Conditional overrides are applied based on the value of <code>?9?</code>:<ul> <li>If <code>?9?</code> is <code>G</code> (likely production environment):</li> <li><code>APCHECK</code> is directed to the <code>QUSRSYS/APCHECKS</code> output queue.</li> <li><code>CHECKCPY</code> is directed to the <code>QUSRSYS/APCHKCPY</code> output queue.</li> <li>Both use device type <code>*SCS</code>, 6 lines per inch (LPI), 12 characters per inch (CPI), standard print quality, form type <code>APCK</code>, and are saved after printing.</li> <li>If <code>?9?</code> is <code>Z</code> (likely test environment):</li> <li>Both <code>APCHECK</code> and <code>CHECKCPY</code> are directed to the <code>QUSRSYS/TESTOUTQ</code> output queue with the same settings.</li> </ul> </li> <li> <p>These overrides ensure checks are printed to the correct printer based on the environment.</p> </li> <li> <p>Program Execution:</p> </li> <li>The <code>RUN</code> command executes the <code>AP160</code> program, which processes the defined files and generates check output.</li> <li> <p>The RPG program (AP160) likely reads from the vendor, open payables, and payment files, performs calculations (e.g., payment amounts), and writes check data to the <code>APPYCK</code> file and printer files.</p> </li> <li> <p>Temporary File Creation (Conditional):</p> </li> <li>If a file named <code>?9?APPO?WS?</code> exists in the <code>DATAF1</code> parameter, the program builds a temporary file with the same name using the <code>BLDFILE</code> command.</li> <li>The file is created with:<ul> <li><code>S</code> (sequential organization).</li> <li><code>RECORDS</code> (populated with records).</li> <li>Parameters <code>1,10</code> (possibly record length or block size).</li> </ul> </li> <li> <p>This temporary file is likely used to store intermediate check printing data, as indicated by the comment <code>--TEMPORARY FILE TO ALLOW CHECK P</code>.</p> </li> <li> <p>Completion:</p> </li> <li>After the <code>AP160</code> program completes, the OCL script ends. Any printed checks are sent to the configured output queues, and temporary files (if created) may persist until explicitly cleared.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#list-of-external-programs-called","title":"List of External Programs Called","text":"<ul> <li>AP160: The main program loaded and executed by the OCL script. It\u2019s likely an RPG or CL program that handles the core logic for printing A/P checks.</li> <li>AP200 (implied): The comment suggests <code>AP200</code> may call <code>AP160</code> in <code>AUTO</code> mode, but it\u2019s not directly called within this script.</li> </ul> <p>No other external programs are explicitly called in the provided OCL code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#tables-or-files-created-destroyed-or-read-from","title":"Tables or Files Created, Destroyed, or Read From","text":"<p>The OCL program interacts with several files, either by reading, writing, or creating them. Below is a categorized list based on the code and typical A/P check printing processes:</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from","title":"Files Read From:","text":"<ul> <li>APCONT (<code>?9?APCONT</code>, <code>DISP-SHR</code>): Control file, likely containing configuration or control data for A/P processing (e.g., bank account details).</li> <li>APVEND (<code>?9?APVEND</code>, <code>DISP-SHR</code>): Vendor master file, containing vendor details (e.g., name, address, payment terms).</li> <li>APOPEN (<code>?9?APOPEN</code>, <code>DISP-SHR</code>): Open payables file, listing outstanding invoices to be paid.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-read-from-or-written-to","title":"Files Read From or Written To:","text":"<ul> <li>APPAY (<code>?9?APPY?WS?</code>): Payment file, likely containing selected payments to be processed into checks.</li> <li>AP160S (<code>?9?APPS?WS?</code>): Selection or summary file, possibly used to store temporary data during processing.</li> <li>APPYTR (<code>?9?APPT?WS?</code>): Transaction file, likely used to log payment transactions.</li> <li>APPYCK (<code>?9?APPC?WS?</code>): Check file, where check details (e.g., check number, amounts) are written.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-created","title":"Files Created:","text":"<ul> <li><code>?9?APPO?WS?</code> (conditional): A temporary file is created if <code>BLDFILE</code> is triggered for <code>?9?APPO?WS?</code>. This file is used for check processing and is marked as temporary.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#files-destroyed","title":"Files Destroyed:","text":"<ul> <li>No files are destroyed in the provided code. Temporary files like <code>?9?APPO?WS?</code> may be cleared by other processes outside this script, but this isn\u2019t explicitly shown.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#printer-output-files","title":"Printer Output Files:","text":"<ul> <li>APCHECK: Printer file for main checks, directed to an output queue (<code>APCHECKS</code> or <code>TESTOUTQ</code>).</li> <li>CHECKCPY: Printer file for check copies, directed to an output queue (<code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160OCL/#notes-and-assumptions","title":"Notes and Assumptions","text":"<ul> <li>Placeholders: The <code>?9?</code> and <code>?WS?</code> are variables resolved at runtime, representing library names, typically representing names, company codes, or workspace identifiers. Without specific values, I\u2019ve described their general purpose.</li> <li>Commented Code: The commented-out code (e.g., <code>PAUSE</code>, initial display) suggests optional user interaction, which may be enabled in certain conditions or older versions.</li> <li>RPG Logic: The actual check printing logic (e.g., calculations, formatting) is in <code>AP160</code>, which isn\u2019t provided. My analysis focuses on the OCL orchestration.</li> <li>Temporary File Scope: The <code>BLDFILE</code> creates a temporary file, but its lifecycle (e.g., deletion) isn\u2019t shown here. It\u2019s likely cleared by a cleanup job.</li> </ul> <p>If you have the <code>AP160</code> RPG source or additional context (e.g., file schemas, specific <code>?9?</code> values), I can provide deeper insights into the data flow or logic. Let me know if you\u2019d like me to analyze related content or search for more information!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/","title":"AP160RPG","text":"<p>The RPG program <code>AP160.rpg36.txt</code> is designed to handle the business process of printing Accounts Payable (A/P) checks for vendor payments in an IBM midrange environment (e.g., AS/400 or IBM i). Below, I\u2019ll explain the process steps and business rules from a business perspective, focusing on the purpose, functionality, and rules governing the check printing process, rather than the technical RPG details.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#process-steps-of-the-ap160-program","title":"Process Steps of the AP160 Program","text":"<p>The <code>AP160</code> program orchestrates the generation and printing of A/P checks, ensuring payments to vendors are accurately processed, formatted, and recorded. Here\u2019s a step-by-step breakdown of the process from a business viewpoint:</p> <ol> <li>Retrieve Payment and Vendor Information:</li> <li>The program starts by accessing payment data from the payment file (<code>APPAY</code>), which contains details about invoices selected for payment, such as vendor numbers, invoice numbers, gross amounts, discounts, and payment amounts.</li> <li> <p>It cross-references this with:</p> <ul> <li>The vendor master file (<code>APVEND</code>) for vendor details like name and address.</li> <li>The open payables file (<code>APOPEN</code>) for additional invoice-related data.</li> <li>The control file (<code>APCONT</code>) for company-specific information, such as the company name for check printing.</li> <li>The transaction file (<code>APPYTR</code>) for check-related data, like the check date.</li> <li>The check file (<code>APPYCK</code>) for check numbers and statuses.</li> </ul> </li> <li> <p>Validate Payment Type and Check Eligibility:</p> </li> <li>For each payment record, the program checks the payment type (stored in the <code>AXRECD</code> field of <code>APPYCK</code>):<ul> <li>Prepaid (<code>P</code>), ACH (<code>A</code>), Wire Transfer (<code>W</code>), Employee Expense (<code>E</code>), Credit/No Pay (<code>C</code>): These payments are not printed as physical checks. They are either already paid (e.g., prepaid checks) or processed via electronic methods (e.g., ACH, wire transfer), so the program skips printing.</li> <li>Full Stub/Void Check (<code>F</code>, <code>V</code>): These indicate voided checks, which are printed with a \"VOID\" label. For <code>F</code>, the same check number is reused for the next stub; for <code>V</code>, the next check number is used.</li> <li>Normal Payments: Payments not flagged as <code>P</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>C</code>, <code>F</code>, or <code>V</code> are processed for check printing.</li> </ul> </li> <li> <p>This step ensures only valid, non-electronic payments result in printed checks, aligning with payment method policies.</p> </li> <li> <p>Calculate Check Totals:</p> </li> <li>For each invoice, the program aggregates:<ul> <li>Gross Amount: The total invoice amount before discounts.</li> <li>Discount Amount: Any applicable vendor discounts (e.g., early payment discounts).</li> <li>Net Payment Amount: The actual amount to be paid (gross minus discount).</li> </ul> </li> <li> <p>These amounts are accumulated to calculate the total check amount (<code>CKAMT</code>), ensuring the check reflects all invoices paid to a vendor in a single transaction.</p> </li> <li> <p>Assign and Validate Check Numbers:</p> </li> <li>The program retrieves a check number from the check file (<code>APPYCK</code>) using a sequence number (<code>SEQ#</code>).</li> <li> <p>If the check number is marked as void (<code>V</code>), the program increments the sequence number to assign a new check number, ensuring only valid check numbers are used for printing.</p> </li> <li> <p>Format Check Information:</p> </li> <li>The program prepares the check for printing by pulling together:<ul> <li>Company Information: The company name from <code>APCONT</code> is printed at the top of the check (except for company code <code>01</code>, which skips this per a business rule).</li> <li>Vendor Information: Vendor name and address (up to four address lines) from <code>APVEND</code> or <code>APOPEN</code> are formatted for the check payee section.</li> <li>Payment Details: Invoice number, invoice date, description, gross amount, discount, and payment amount are included for each invoice.</li> <li>Check Date: Retrieved from <code>APPYTR</code> and formatted for the check.</li> <li>Check Amount: The total payment amount is printed in both numeric and written form (e.g., \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX AND 78/100 DOLLARS\").</li> </ul> </li> <li> <p>For amounts exceeding $999,999.99, special handling ensures proper formatting, and for zero or invalid amounts, the program adjusts to avoid errors.</p> </li> <li> <p>Convert Numeric Amount to Words:</p> </li> <li>The program converts the check amount\u2019s dollar portion into words for the check\u2019s written amount line (e.g., 123456.78 becomes \"ONE HUNDRED TWENTY-THREE THOUSAND FOUR HUNDRED FIFTY-SIX\").</li> <li>The cents are appended as a fraction (e.g., \"78/100\"), and the word \"DOLLARS\" is added.</li> <li> <p>The conversion eliminates excess spaces to fit within a standard check\u2019s 10 CPI (characters per inch) layout, ensuring readability and compliance with check printing standards.</p> </li> <li> <p>Print Checks and Copies:</p> </li> <li>The program generates output for two printer files:<ul> <li>APCHECK: The primary check output, sent to the designated output queue (e.g., <code>APCHECKS</code> for production or <code>TESTOUTQ</code> for testing, as set in the OCL).</li> <li>CHECKCPY: A copy of the check, sent to a separate output queue (e.g., <code>APCHKCPY</code> or <code>TESTOUTQ</code>).</li> </ul> </li> <li>Each check includes:<ul> <li>Header: Company name (if applicable), vendor name, check date, and check number.</li> <li>Detail Lines: Invoice details (date, number, description, gross amount, discount, payment amount).</li> <li>Totals: Summarized gross amount, discount, and net payment amount.</li> <li>Written Amount: The check amount in words, with an asterisk (*) at the end for security.</li> </ul> </li> <li>Void checks are marked with \" VOID * VOID * VOID \" across the check to prevent misuse.</li> <li> <p>The program ensures proper alignment and formatting for both the check and its copy, adhering to printer settings (6 LPI, 12 CPI, standard quality).</p> </li> <li> <p>Handle Void Checks:</p> </li> <li> <p>For voided checks (<code>F</code> or <code>V</code>), the program prints the check with a \"VOID\" label and may either reuse the check number (<code>F</code>) or assign a new one (<code>V</code>), depending on the business need to track voided transactions.</p> </li> <li> <p>Clear Accumulators:</p> </li> <li> <p>After printing a check, the program resets the accumulated gross amount, discount, and payment totals to zero, preparing for the next vendor\u2019s check.</p> </li> <li> <p>Completion:</p> <ul> <li>The program continues processing until all selected payments are handled, generating checks and copies as needed. The output is sent to the configured printers, and the process ends.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure accurate, compliant, and efficient check printing:</p> <ol> <li>Selective Check Printing:</li> <li> <p>Checks are only printed for payments not flagged as prepaid (<code>P</code>), ACH (<code>A</code>), wire transfer (<code>W</code>), employee expense (<code>E</code>), or credit/no pay (<code>C</code>). This ensures physical checks are issued only for standard payment methods, while electronic or prepaid payments are processed separately.</p> </li> <li> <p>Void Check Handling:</p> </li> <li>Void checks (<code>F</code> or <code>V</code>) are printed with clear \"VOID\" markings to prevent fraudulent use.</li> <li>For <code>F</code> (full stub, same check number), the check number is reused for the next stub, useful for multi-part check forms.</li> <li> <p>For <code>V</code> (void, next check number), a new check number is assigned, ensuring accurate tracking of voided checks.</p> </li> <li> <p>Company Name Exclusion:</p> </li> <li> <p>The company name is printed at the top of checks unless the company code is <code>01</code> (e.g., A.R.G.), likely due to specific branding or legal requirements for that company.</p> </li> <li> <p>Amount Formatting:</p> </li> <li>The check amount is printed in both numeric and written forms, with the written form adhering to a compact format to fit standard check layouts (10 CPI).</li> <li>Amounts exceeding $999,999.99 are handled to prevent formatting errors, ensuring reliability for large payments.</li> <li> <p>Zero or invalid amounts are processed to avoid printing blank or incorrect checks.</p> </li> <li> <p>Vendor Information Validation:</p> </li> <li> <p>If vendor details (e.g., name, address) are missing from the vendor file (<code>APVEND</code>), the program falls back to the open payables file (<code>APOPEN</code>) or blanks the fields, ensuring checks are still printed without errors.</p> </li> <li> <p>Check Number Management:</p> </li> <li> <p>The program ensures valid check numbers by skipping voided ones (<code>V</code>), preventing duplicate or invalid check numbers in the payment process.</p> </li> <li> <p>Invoice Detail Inclusion:</p> </li> <li> <p>Each check includes detailed invoice information (date, number, description, amounts) to provide transparency to vendors and support accounting reconciliation.</p> </li> <li> <p>Printer Output Separation:</p> </li> <li> <p>Checks and their copies are sent to separate output queues, allowing businesses to maintain distinct records for primary checks and copies for auditing or filing purposes.</p> </li> <li> <p>Payment Aggregation:</p> </li> <li> <p>Multiple invoices for a single vendor are aggregated into one check, with totals for gross amount, discount, and net payment, streamlining payment processing and reducing check issuance costs.</p> </li> <li> <p>Date and Check Number Consistency:</p> <ul> <li>The check date is sourced from the transaction file (<code>APPYTR</code>), ensuring consistency with the payment batch.</li> <li>Check numbers are tracked via the check file (<code>APPYCK</code>), maintaining sequential and accurate check issuance.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP160%20OCL%20Print%20Checks/AP160RPG/#summary","title":"Summary","text":"<p>From a business perspective, the <code>AP160</code> program automates the critical process of printing A/P checks, ensuring payments to vendors are accurately calculated, formatted, and printed according to strict business rules. It handles vendor payments by aggregating invoices, validating payment types, assigning check numbers, and producing both primary checks and copies for record-keeping. The program supports various payment scenarios (e.g., void checks, electronic payments) and enforces rules like excluding certain company names or formatting amounts for compliance. By integrating data from multiple files (payment, vendor, open payables, etc.), it ensures accuracy and transparency, making it a vital component of the A/P workflow.</p> <p>If you need further clarification, additional analysis (e.g., specific file layouts), or related information, let me know!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/","title":"AP250 Summary Check Register","text":"<p>The <code>AP250.OCL36</code> procedure orchestrates a series of RPG programs (<code>AP251.RPG36</code>, <code>AP255.RPG36</code>, <code>AP256A.RPG</code>, and <code>AP256.RPG36</code>) to process Accounts Payable (A/P) payments, update commission records, generate a cash disbursements journal, and produce vendor payment detail reports for ACH vendors. Below, I identify the use cases implemented by this call stack and provide a Function Requirement Document for the primary use case, structured as a large function that processes inputs to complete the A/P payment notification and reporting process.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#use-cases-implemented-by-ap250-ocl-call-stack","title":"Use Cases Implemented by AP250 OCL Call Stack","text":"<p>The <code>AP250.OCL36</code> call stack implements a single cohesive use case:</p> <ol> <li>Process Accounts Payable Payments and Generate ACH Vendor Payment Notifications with Journal Reporting:</li> <li>Description: This use case processes A/P payment records to update commission records, generate a summarized cash disbursements journal for general ledger integration, and produce detailed payment reports for ACH vendors, which are emailed via spoolflex. It involves preprocessing to count email addresses, updating commission tables, summarizing transactions, and generating vendor-specific reports with tailored messaging for crude and normal vendors.</li> <li>Components:<ul> <li><code>AP251.RPG36</code>: Updates the commission table (<code>APTORCY</code>) with payment details from the payment file (<code>APPAY</code>).</li> <li><code>AP255.RPG36</code>: Generates a cash disbursements journal report and updates a general ledger file (<code>TEMGEN</code>) with summarized A/P transactions.</li> <li><code>AP256A.RPG</code>: Preprocesses payment records to count valid ACH email addresses per vendor and populates the <code>APDTWSC</code> file.</li> <li><code>AP256.RPG36</code>: Generates up to four payment detail reports per ACH vendor, formatted for spoolflex emailing, with distinct messaging for crude and normal vendors.</li> </ul> </li> </ol> <p>This single use case encapsulates the entire A/P payment processing and reporting workflow, integrating multiple steps to ensure accurate financial updates and vendor notifications.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-requirement-document-process-accounts-payable-payments-and-generate-ach-vendor-notifications","title":"Function Requirement Document: Process Accounts Payable Payments and Generate ACH Vendor Notifications","text":""},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#function-name","title":"Function Name","text":"<p><code>ProcessAPPaymentsAndNotifications</code></p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#purpose","title":"Purpose","text":"<p>To process Accounts Payable (A/P) payment records, update commission records, generate a summarized cash disbursements journal for general ledger integration, and produce detailed payment reports for ACH vendors, emailed to up to four addresses per vendor with tailored messaging for crude and normal vendors.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#inputs","title":"Inputs","text":"<ul> <li>Payment Records (<code>APPAY</code> equivalent):</li> <li>Company number (<code>CONO</code>, 2 chars)</li> <li>Vendor number (<code>VEND</code>, 5 chars)</li> <li>Invoice description (<code>OPIN20</code>, 20 chars)</li> <li>Gross amount (<code>OPGRAM</code>, packed, 6 digits)</li> <li>Check number (<code>OPCKNO</code>, 6 chars)</li> <li>Check date (<code>AXCKDT</code>, 6 chars, MMDDYY)</li> <li>ACH Payment Records (<code>APDTWS</code> equivalent):</li> <li>Company number (<code>ADCO</code>, 2 chars)</li> <li>Vendor number (<code>ADVEND</code>, 5 chars)</li> <li>Company/vendor key (<code>ADCOVN</code>, 7 chars)</li> <li>Invoice number (<code>ADINVN</code>, 20 chars)</li> <li>Invoice amount (<code>ADINV$</code>, packed, 6 digits)</li> <li>Discount (<code>ADDISC</code>, packed, 5 digits)</li> <li>Payment amount (<code>ADLPAM</code>, packed, 6 digits)</li> <li>Check date (<code>ADDATE</code>, 6 chars, MMDDYY)</li> <li>Check number (<code>ADVCH#</code>, 5 chars)</li> <li>Vendor Master (<code>APVEND</code> equivalent):</li> <li>Company number (<code>VNCO</code>, 2 chars)</li> <li>Vendor number (<code>VNVEND</code>, 5 chars)</li> <li>Vendor name (<code>VNNAME</code>, 30 chars)</li> <li>Address lines (<code>VNADD1</code>\u2013<code>VNADD4</code>, 30 chars each)</li> <li>Vendor category (<code>VNCATG</code>, 6 chars, e.g., <code>CRDACT</code> for crude)</li> <li>Vendor Email/Fax Details (<code>APVNFMX</code> equivalent):</li> <li>Company number (<code>AMCONO</code>, 2 chars)</li> <li>Vendor number (<code>AMCVEN</code>, 5 chars)</li> <li>Company/vendor key (<code>AMCOVN</code>, 7 chars)</li> <li>Form type (<code>AMFMTY</code>, 4 chars, must be <code>ACHE</code>)</li> <li>Email address (<code>AMEMLA</code>, 60 chars)</li> <li>Send original flag (<code>AMFMYN</code>, 1 char, <code>Y</code> for valid)</li> <li>Delete code (<code>AMDEL</code>, 1 char, <code>D</code> for deleted)</li> <li>Company Master (<code>APCONT</code> equivalent):</li> <li>Company number (<code>ACCONO</code>, 2 chars)</li> <li>Company name (<code>ACNAME</code>, 30 chars)</li> <li>Cash Disbursements Journal Records (<code>APCDJR</code> equivalent):</li> <li>Company number (<code>CDCONO</code>, 2 chars)</li> <li>Journal number (<code>CDJRNL</code>, 4 chars)</li> <li>Credit/debit code (<code>CDCORD</code>, 1 char, <code>C</code> or <code>D</code>)</li> <li>G/L number (<code>CDGLNO</code>, 8 chars)</li> <li>Check number (<code>CDCHEK</code>, 6 chars)</li> <li>Description (<code>CDDESC</code>, 24 chars)</li> <li>Check date (<code>CDCKDT</code>, 6 chars, MMDDYY)</li> <li>Amount (<code>CDAMT</code>, packed, 6 digits)</li> <li>Vendor name (<code>CDNAME</code>, 30 chars)</li> <li>Sequence number (<code>CDSEQ#</code>, 9 chars)</li> <li>Transaction type (<code>CDTYPE</code>, 10 chars, e.g., <code>AP</code>)</li> <li>Year/period (<code>CDYYPD</code>, 4 chars)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#outputs","title":"Outputs","text":"<ul> <li>Updated Commission Table (<code>APTORCY</code> equivalent):</li> <li>Invoice number (<code>ATINV</code>, 20 chars)</li> <li>Payment amount (<code>ATAPMT</code>, packed, 5 digits)</li> <li>Payment status (<code>ATSTAT</code>, 1 char, set to <code>P</code>)</li> <li>Check number (<code>ATCHK#</code>, 6 chars)</li> <li>General Ledger File (<code>TEMGEN</code> equivalent):</li> <li>Company number (<code>CDCONO</code>, 2 chars)</li> <li>G/L number (<code>CDGLNO</code>, 8 chars)</li> <li>Journal number (<code>CDJRNL</code>, 4 chars)</li> <li>Journal reference number (<code>JRREF#</code>, 4 digits)</li> <li>Credit/debit code (<code>CORD</code>, 1 char)</li> <li>Check number (<code>CDCHEK</code>, 6 chars) or check date (<code>CDCKDT</code>, 6 chars, summarized)</li> <li>Description (<code>CDDESC</code>, 24 chars, or <code>-SUMMARIZED A/P</code>)</li> <li>Amount (<code>JRAMT</code>, packed, 11 digits)</li> <li>Vendor name (<code>CDNAME</code>, 30 chars)</li> <li>Formatted check date (<code>CYMD</code>, 8 chars, YYYYMMDD)</li> <li>Cash Disbursements Journal Report (<code>APPRINT</code> equivalent):</li> <li>Printed report with company name, journal totals (debit/credit), and detailed/summarized A/P entries.</li> <li>ACH Vendor Payment Reports (<code>REPORT1</code>\u2013<code>REPORT4</code> equivalent):</li> <li>Up to four reports per vendor, each emailed to a unique address, containing:<ul> <li>Vendor name and address</li> <li>Payment details (invoice number, invoice amount, discount, payment amount)</li> <li>Totals per vendor</li> <li>Tailored messages (crude vs. normal vendors)</li> </ul> </li> <li>ACH Vendor Control File (<code>APDTWSC</code> equivalent):</li> <li>Company/vendor key (<code>ADCOVN</code>, 7 chars)</li> <li>Email address count (<code>ACECNT</code>, packed, 2 digits)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#process-steps","title":"Process Steps","text":"<ol> <li>Count ACH Email Addresses:</li> <li>Read ACH payment records and vendor email details.</li> <li>Count valid email addresses (<code>AMFMYN = 'Y'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMTY = 'ACHE'</code>) per vendor.</li> <li> <p>Write/update <code>APDTWSC</code> with company/vendor key and email count (<code>ACECNT</code>).</p> </li> <li> <p>Update Commission Table:</p> </li> <li>Read payment records.</li> <li>Match records to commission table using company number, vendor number, and invoice description.</li> <li> <p>Update matching records with invoice number, gross amount, payment status (<code>P</code>), and check number.</p> </li> <li> <p>Generate Cash Disbursements Journal:</p> </li> <li>Read journal records, identifying A/P transactions (<code>CDTYPE = 'AP      '</code>) and debit entries (<code>CDCORD = 'D'</code>).</li> <li>Accumulate amounts per vendor; switch negative amounts to positive with adjusted credit/debit code.</li> <li>Write detailed and summarized entries to general ledger file.</li> <li> <p>Produce a printed report with company name, journal number, debit/credit totals, and period/year (if applicable).</p> </li> <li> <p>Generate ACH Vendor Payment Reports:</p> </li> <li>Read ACH payment records and vendor master data.</li> <li>Retrieve email count from <code>APDTWSC</code> and up to four email addresses from <code>APVNFMX</code>.</li> <li>Calculate payment amount as invoice amount minus discount.</li> <li>Generate up to four reports per vendor, each including:<ul> <li>Vendor name, address, and check date.</li> <li>Invoice details (number, amount, discount, payment).</li> <li>Vendor-level totals.</li> <li>Messages: normal vendors use standard messages; crude vendors (<code>VNCATG = 'CRDACT'</code>) use specific messages referencing <code>crudestatements@amref.com</code>.</li> </ul> </li> <li>Output reports to spoolflex queues for emailing.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#business-rules","title":"Business Rules","text":"<ol> <li>Commission Updates:</li> <li>Update commission records only for matching company, vendor, and invoice description.</li> <li> <p>Set payment status to <code>P</code> and record gross amount and check number.</p> </li> <li> <p>Journal Processing:</p> </li> <li>Process only A/P transactions (<code>CDTYPE = 'AP      '</code>) for summarization.</li> <li>Convert check dates to YYYYMMDD format with Y2K compliance (century <code>19</code> or <code>20</code> based on year \u2265 80).</li> <li> <p>Summarize amounts at the vendor level; switch negative amounts to positive with appropriate credit/debit code.</p> </li> <li> <p>ACH Vendor Notifications:</p> </li> <li>Generate 1\u20134 reports per vendor based on email count (<code>ACECNT</code> from <code>APDTWSC</code>).</li> <li>Include only valid email addresses (<code>AMFMYN = 'Y'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMTY = 'ACHE'</code>).</li> <li>Use crude-specific messages for vendors with <code>VNCATG = 'CRDACT'</code>; otherwise, use standard messages.</li> <li>Payment amount = invoice amount - discount.</li> <li> <p>Paginate reports if exceeding 62 lines.</p> </li> <li> <p>Error Handling:</p> </li> <li>Skip non-matching or invalid records without logging errors.</li> <li>Handle missing records (vendor, company, email) gracefully, proceeding with available data.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>ADPYM$ = ADINV$ - ADDISC</code> (ACH payment reports).</li> <li>Journal Amount: Accumulate <code>CDAMT</code> per vendor; if negative, switch sign and adjust credit/debit code (<code>CORD</code>).</li> <li>Email Count: Count <code>APVNFMX</code> records where <code>ADCOVN = AMCOVN</code>, <code>AMFMTY = 'ACHE'</code>, <code>AMDEL \u2260 'D'</code>, <code>AMFMYN = 'Y'</code>, up to 4.</li> <li>Date Formatting: Convert MMDDYY to YYYYMMDD (prefix <code>19</code> or <code>20</code> based on year comparison with <code>80</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#assumptions","title":"Assumptions","text":"<ul> <li>Input files are pre-sorted by company and vendor.</li> <li><code>APDTWSC</code> is populated by preprocessing step (<code>AP256A</code>).</li> <li>Spoolflex system handles email delivery from output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>).</li> <li>Y2K compliance uses century <code>19</code> or <code>20</code> based on year threshold (<code>80</code>).</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250%20Summary%20Check%20Register/#notes","title":"Notes","text":"<ul> <li>Single Use Case: The <code>AP250.OCL36</code> call stack integrates multiple programs to perform a unified A/P payment processing and notification function, treated as a single use case due to its cohesive workflow.</li> <li>OCL Context: The OCL sets up files (<code>APDTWSC</code>) and output queues, ensuring proper data flow and report distribution.</li> <li>Modifications:</li> <li><code>AP256.RPG36</code>: Added support for four email addresses (5-13-19) and crude-specific messaging (5-01-24).</li> <li>Error Handling: The programs rely on indicators to skip invalid records, ensuring robust processing without detailed error logging.</li> <li>Business Context: The function supports ACH vendor payments with automated notifications, tailored for crude and normal vendors, and integrates with general ledger systems via journal reporting.</li> </ul> <p>This document concisely captures the business requirements, process steps, and calculations for the <code>AP250.OCL36</code> call stack, structured as a single function. Let me know if you need further clarification or additional details!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/","title":"AP250OCL GROK","text":"<p>The RPG OCL program <code>AP250.OCL36</code> is an Accounts Payable (A/P) Check Register process that handles check printing, journal updates, and file maintenance. Below is a detailed breakdown of the process steps, external programs called, and tables/files used as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#process-steps","title":"Process Steps","text":"<p>The OCL program follows a structured sequence of steps, primarily focused on generating an A/P check register, updating related files, and producing a cash disbursements journal. The steps are derived from the OCL code and are listed in execution order:</p> <ol> <li>Initialization:</li> <li>Calls the procedure <code>STRPCOCLP</code> to set up the processing environment.</li> <li> <p>Conditionally sets a local variable at offset 198 to indicate a wire transfer (<code>WT*** WIRE TRANSFER ***</code>) if parameter <code>?3?</code> is <code>/WT</code>, otherwise clears it.</p> </li> <li> <p>Check for Auto-Run and Workstation Lock:</p> </li> <li>If parameter <code>?2?</code> is <code>/AUTO</code>, skips to the <code>AP250</code> tag to proceed with processing.</li> <li> <p>If the workstation is locked for check posting (<code>DATAF1-?9?APPO?WS?</code>), displays a warning message indicating that checks cannot be posted until printed via Option 11 of <code>APMENU</code>. The job pauses, allowing cancellation (press 0, Enter to cancel), and jumps to the <code>END</code> tag if cancelled.</p> </li> <li> <p>Prompt User to Continue or Cancel:</p> </li> <li> <p>Displays a message: <code>'A/P CHECK REGISTER, JOURNAL, AND UPDATE FILES'</code> and pauses, allowing the user to cancel (press ATTN, 2, Enter) or continue (press 0, Enter).</p> </li> <li> <p>File Preparation:</p> </li> <li>Deletes the temporary file <code>APCD?WS?</code> if it exists.</li> <li> <p>Creates a new file <code>?9?APCD?WS?</code> with a sequential organization, 999,000 records, and a record length of 128 bytes.</p> </li> <li> <p>Main Check Register Processing (AP250):</p> </li> <li>Displays the message: <code>'CHECK REGISTER, UPDATE FILES EXECUTING'</code>.</li> <li>Loads and runs the program <code>AP250</code> with multiple file assignments:<ul> <li><code>APPYCK</code> \u2192 <code>?9?APPC?WS?</code></li> <li><code>APPAY</code> \u2192 <code>?9?APPY?WS?</code></li> <li><code>AP250S</code> \u2192 <code>?9?APPS?WS?</code></li> <li><code>APPYTR</code> \u2192 <code>?9?APPT?WS?</code></li> <li><code>APCONT</code>, <code>APVEND</code>, <code>APVEND2</code>, <code>APCHKR</code>, <code>APPYDS</code>, <code>APOPEN</code>, <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>, <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code>, <code>FRCINH</code>, <code>FRCFBH</code> \u2192 Shared files with respective labels.</li> <li><code>APCDJR</code> \u2192 <code>?9?APCD?WS?</code> with an extension of 100 records.</li> <li><code>APDSMS</code> \u2192 Shared file.</li> </ul> </li> <li> <p>Overrides printer files <code>APPNCF</code> and <code>APPRINT</code> to specific output queues (<code>QUSRSYS/PRTPNC</code>, <code>QUSRSYS/APPOST</code>, or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</p> </li> <li> <p>Update Commission Table (AP251):</p> </li> <li>Loads and runs the program <code>AP251</code> to update the commission table with payment data.</li> <li> <p>Uses files:</p> <ul> <li><code>APPAY</code> \u2192 <code>?9?APPY?WS?</code> (shared).</li> <li><code>APTORCY</code> \u2192 <code>?9?APTORCY</code> (shared).</li> </ul> </li> <li> <p>Sort Cash Disbursements Journal Data:</p> </li> <li>Displays the message: <code>'CASH DISBURSMENTS JOURNAL EXECUTING'</code>.</li> <li>Loads and runs the program <code>#GSORT</code> to sort the <code>APCD?WS?</code> file into <code>?9?APCS?WS?</code>.</li> <li> <p>Sorting parameters:</p> <ul> <li>Sort key: 30 bytes ascending, starting at position 3.</li> <li>Include records where position 1 is not equal to 'C' or 'D'.</li> <li>Fields included in sort:</li> <li>Company (positions 2\u20133)</li> <li>C,D (position 12)</li> <li>AP,CASH,DISC (positions 106\u2013115)</li> <li>G/L # (positions 13\u201320)</li> <li>SEQ # (positions 97\u2013105).</li> </ul> </li> <li> <p>Generate Cash Disbursements Journal (AP255):</p> </li> <li>Loads and runs the program <code>AP255</code> to process the sorted data.</li> <li>Uses files:<ul> <li><code>APCDJR</code> \u2192 <code>?9?APCD?WS?</code></li> <li><code>AP255S</code> \u2192 <code>?9?APCS?WS?</code></li> <li><code>APCONT</code> \u2192 Shared.</li> <li><code>TEMGEN</code> \u2192 Shared.</li> </ul> </li> <li> <p>Overrides printer file <code>APPRINT</code> to output queues (<code>QUSRSYS/APPOST</code> or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</p> </li> <li> <p>Optional Wire Transfer Processing:</p> </li> <li>Checks if the file <code>?9?APDT?WS?</code> has a non-zero record count (<code>/000000</code>).</li> <li> <p>If records exist:</p> <ul> <li>Creates a new file <code>?9?APDT?WS?C</code> with indexed organization, 500 records, and a record length of 10 bytes.</li> <li>Loads and runs <code>AP256A</code> with files:</li> <li><code>APDTWS</code> \u2192 <code>?9?APDT?WS?</code></li> <li><code>APDTWSC</code> \u2192 <code>?9?APDT?WS?C</code> (retained as temporary, 50 records).</li> <li><code>APVNFMX</code> \u2192 Shared.</li> <li>Loads and runs <code>AP256</code> with files:</li> <li><code>APDTWS</code> \u2192 <code>?9?APDT?WS?</code></li> <li><code>APDTWSC</code> \u2192 <code>?9?APDT?WS?C</code> (shared).</li> <li><code>APVEND</code>, <code>APCONT</code>, <code>APVNFMX</code> \u2192 Shared.</li> <li>Overrides printer files <code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code> to output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) if <code>?9?</code> is <code>/G</code>.</li> </ul> </li> <li> <p>Cleanup:</p> <ul> <li>Deletes temporary files: <code>APPT?WS?</code>, <code>APPY?WS?</code>, <code>APPS?WS?</code>, <code>APPC?WS?</code>, <code>APDS?WS?</code>, <code>APPO?WS?</code>, <code>APCD?WS?</code>, <code>APCS?WS?</code>, <code>APDT?WS?</code>, <code>APDT?WS?C</code>.</li> <li>If in auto mode (<code>?2?</code> is <code>/AUTO</code>), clears all local variables.</li> </ul> </li> <li> <p>End Processing:</p> <ul> <li>Jumps to the <code>END</code> tag to terminate the job.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs:</p> <ol> <li>STRPCOCLP: Initializes the processing environment (likely a system or custom procedure).</li> <li>AP250: Main program for generating the A/P check register and updating files.</li> <li>AP251: Updates the commission table with payment data.</li> <li>#GSORT: Sorts the cash disbursements journal data.</li> <li>AP255: Generates the cash disbursements journal.</li> <li>AP256A: Processes wire transfer data (first phase).</li> <li>AP256: Processes wire transfer data (second phase).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with multiple files, some temporary (workstation-specific) and others permanent (shared). The files are listed below with their logical names, labels, and usage context:</p> Logical Name Label Usage Disposition APPYCK ?9?APPC?WS? Check-related data (temporary). Exclusive APPAY ?9?APPY?WS? Payment data (temporary, used in AP250 and AP251). Exclusive AP250S ?9?APPS?WS? Supporting data for AP250 (temporary). Exclusive APPYTR ?9?APPT?WS? Transaction data (temporary). Exclusive APCONT ?9?APCONT A/P control file (used in AP250, AP255, AP256). Shared APVEND ?9?APVEND Vendor master file (used in AP250, AP256). Shared APVEND2 ?9?APVEND Secondary vendor file (used in AP250). Shared APCHKR ?9?APCHKR Check register file (used in AP250). Shared APPYDS ?9?APDS?WS? Payment distribution file (temporary, shared in AP250). Shared APOPEN ?9?APOPEN Open A/P file (used in AP250). Shared APOPENH ?9?APOPNH Open A/P header file (used in AP250). Shared APOPEND ?9?APOPND Open A/P detail file (used in AP250). Shared APOPENV ?9?APOPNV Open A/P vendor file (used in AP250). Shared APHISTH ?9?APHSTH A/P history header file (used in AP250). Shared APHISTD ?9?APHSTD A/P history detail file (used in AP250). Shared APHISTV ?9?APHSTV A/P history vendor file (used in AP250). Shared FRCINH ?9?FRCINH Financial control invoice header (used in AP250). Shared FRCFBH ?9?FRCFBH Financial control freight bill header (used in AP250). Shared APCDJR ?9?APCD?WS? Cash disbursements journal file (temporary, used in AP250, AP255). Exclusive APDSMS ?9?APDSMS Distribution master file (used in AP250). Shared APTORCY ?9?APTORCY Commission table file (used in AP251). Shared AP255S ?9?APCS?WS? Sorted cash disbursements data (temporary, used in AP255). Exclusive TEMGEN ?9?TEMGEN Temporary general ledger file (used in AP255). Shared APDTWS ?9?APDT?WS? Wire transfer data (temporary, used in AP256A, AP256). Exclusive APDTWSC ?9?APDT?WS?C Wire transfer control data (temporary, used in AP256A, AP256). Exclusive/Shared APVNFMX ?9?APVNFMX Vendor file matrix (used in AP256A, AP256). Shared"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250OCL%20GROK/#notes","title":"Notes","text":"<ul> <li>Temporary Files: Files with <code>?WS?</code> in their labels are workstation-specific and deleted at the end of the job.</li> <li>Shared Files: Permanent files (e.g., <code>APCONT</code>, <code>APVEND</code>) are accessed in shared mode, indicating they are used across multiple processes.</li> <li>Printer Overrides: The program conditionally redirects output to different queues based on the <code>?9?</code> parameter (<code>/G</code> for production, otherwise test queues).</li> <li>Wire Transfer Processing: The <code>AP256A</code> and <code>AP256</code> steps are conditional, only executed if wire transfer data exists in <code>?9?APDT?WS?</code>.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP250.OCL36</code> program's functionality, external dependencies, and data interactions. Let me know if you need further clarification or analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/","title":"AP250RPG GROK","text":"<p>The RPG program <code>AP250.RPG36</code> is a core component of the Accounts Payable (A/P) Check Register process, invoked by the OCL procedure <code>AP250.OCL36</code>. It handles the generation of the check register, updates master files, and processes payment-related data, including support for ACH, wire transfers, and employee expenses. Below is a detailed breakdown of the process steps, business rules, tables/files used, and external programs called as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#process-steps","title":"Process Steps","text":"<p>The <code>AP250.RPG36</code> program is structured around a series of subroutines that process input records, update files, and generate output for the check register and related journals. The steps are derived from the RPG source code and are organized by the main processing flow and subroutine execution:</p> <ol> <li>Initialization (L4DET Subroutine):</li> <li>Retrieves the current system time and date, formatting them for output (e.g., <code>TIMDAT</code>, <code>DATYMD</code>, <code>DATE8</code>).</li> <li>Initializes counters and accumulators (e.g., <code>PAGE</code>, <code>ZERO6</code>, <code>ZERO9</code>).</li> <li>Sets a separator field (<code>SEP</code>) to <code>'* '</code>.</li> <li>Retrieves the check date from <code>APPYTR</code> (chain to <code>PTCKDT</code>, convert to <code>CDYMD8</code> with century adjustment using <code>Y2KCEN</code> and <code>Y2KCMP</code>).</li> <li>Chains to <code>APCONT</code> to retrieve company details (e.g., <code>ACNAME</code>, <code>ACDSGL</code>, <code>ACCDJR</code>, <code>ACCKNO</code>).</li> <li>Determines the journal ID (<code>JRNID</code>) based on whether a wire transfer is indicated (<code>WIRE = 'WT'</code> sets <code>JRNID</code> to <code>'WD'</code>, otherwise <code>'CD'</code>; additional logic for ACH, wire transfer, or employee expenses sets <code>JRNID</code> to <code>'AD'</code>, <code>'WD'</code>, or <code>'ED'</code> respectively).</li> <li> <p>Sets indicator <code>50</code> for wire transfers, ACH, or employee expenses to skip writing to <code>APCHKR</code>.</p> </li> <li> <p>Process Each Check Record (EACH01 Subroutine):</p> </li> <li>Processes records from <code>APPYCK</code> (check file).</li> <li>Converts the check date (<code>AXCKDT</code>) to a formatted date (<code>AXYMD8</code>).</li> <li>Copies the check number (<code>AXCHEK</code>) to the PNC check number field (<code>PNCCHK</code>) for positive pay format.</li> <li>Evaluates the record code (<code>AXRECD</code>):<ul> <li><code>'C'</code>: Credit/no pay, skip processing (indicator <code>19</code>).</li> <li><code>'F'</code>: Full stub, void check, continue to next stub with same check number (indicator <code>12</code>).</li> <li><code>'V'</code>: Full stub, void check, use next check number (indicator <code>13</code>).</li> <li><code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>: Prepaid check, ACH, wire transfer, or employee expense, respectively (indicators <code>25</code>, <code>26</code>, <code>27</code>, <code>28</code> set indicator <code>11</code>).</li> </ul> </li> <li>Updates the A/P check reconciliation file (<code>APCHKR</code>):<ul> <li>Chains to <code>APCHKR</code> using a key constructed from <code>CONO</code>, <code>BKGL</code>, and <code>AXCHEK</code>.</li> <li>If not found (<code>90</code> on), initializes fields (<code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>, <code>AMOCAM</code>).</li> <li>For voided checks (<code>13</code> on), sets <code>AMCKAM</code> to 0 and <code>AMCODE</code> to <code>'V'</code>, updates clear date (<code>AMCLDT</code>, <code>CLDT8</code>).</li> <li>For non-voided checks, sets <code>AMCODE</code> to <code>'O'</code> and updates <code>AMCKAM</code> with <code>AXAMT</code>.</li> <li>Formats the date for PNC positive pay (<code>PNCDT8</code>) and sets <code>PNCCOD</code> to <code>'V'</code> for voided checks or <code>'I'</code> otherwise.</li> </ul> </li> <li>Updates counters and accumulators:<ul> <li>Increments <code>C3CNT</code> and adds <code>AXAMT</code> to <code>C3AMT</code> for computer checks (non-prepaid, non-void).</li> <li>Increments <code>P3CNT</code>, <code>A3CNT</code>, <code>W3CNT</code>, or <code>E3CNT</code> and adds <code>AXAMT</code> to respective accumulators (<code>P3AMT</code>, <code>A3AMT</code>, <code>W3AMT</code>, <code>E3AMT</code>) for prepaid, ACH, wire transfer, or employee expense records.</li> <li>Increments <code>L3CNT</code> and adds <code>AXAMT</code> to <code>L3AMT</code> and <code>L2PAID</code> for non-voided checks.</li> </ul> </li> <li> <p>Stores the check number (<code>AXCHEK</code>) in <code>L4CHEK</code> for updating <code>APCONT</code>.</p> </li> <li> <p>Process Payment Records (EACH02 Subroutine):</p> </li> <li>Processes records from <code>APPAY</code> (payment file).</li> <li>Accumulates discount taken (<code>OPDISC</code>) into <code>OPDSTK</code> and <code>CDDISC</code>.</li> <li>Updates vendor totals for <code>APVEND</code>:<ul> <li>Adds <code>OPGRAM</code> to <code>L2GRAM</code> (gross amount).</li> <li>Adds <code>OPDISC</code> to <code>L2DISC</code> (discount).</li> <li>Adds <code>OPPPTD</code> to <code>L2PPTD</code> (partial paid to date).</li> <li>Adds <code>OPLPAM</code> to <code>L2AMT</code> (payment amount).</li> </ul> </li> <li>Calculates the A/P reduction (<code>OPPAY = OPDISC + OPLPAM</code>) and open amount (<code>OPOPEN = OPGRAM - OPPPTD - OPPAY</code>).</li> <li>If <code>OPOPEN = 0</code>, marks the record as fully paid (indicator <code>20</code>).</li> <li>Updates <code>OPPPTD</code> by adding <code>OPLPAM</code>.</li> <li>Processes <code>APOPEN</code> records:<ul> <li>Sets the lower limit (<code>SETLL</code>) on <code>APOPEN</code> using <code>OPKEY</code>.</li> <li>Reads <code>APOPEN</code> records, comparing <code>OPKY1</code> with <code>COVNVO</code> to ensure matching vouchers.</li> <li>Chains to <code>APOPENH</code>, <code>APOPEND</code>, or <code>APOPENV</code> based on record type (indicators <code>04</code>, <code>05</code>, <code>06</code>).</li> </ul> </li> <li>Updates freight-related files (<code>FRCFBH</code>, <code>FRCINH</code>):<ul> <li>Constructs a key (<code>FRCKEY</code>, <code>FRCK39</code>) using <code>CONO</code>, <code>OPCAID</code>, <code>OPINVN</code>, and <code>OPSORN</code>.</li> <li>Chains to <code>FRCFBH</code> (freight bill header) first; if found and <code>FRAPST = 'Y'</code>, writes an exception record (<code>APFBST</code>).</li> <li>If not found, chains to <code>FRCINH</code> (invoice header) and writes an exception record (<code>APINST</code>).</li> </ul> </li> <li> <p>Updates the discount missed table (<code>APPYDS</code>):</p> <ul> <li>Chains to <code>APPYDS</code> using <code>OPKY1</code>.</li> <li>Writes an exception record to <code>APPYDS</code> (indicator <code>70</code>).</li> </ul> </li> <li> <p>Vendor Totals Update (L2TOT Subroutine):</p> </li> <li>Chains to <code>APVEND</code> using a key (<code>VNKEY</code>) constructed from <code>CONO</code> and <code>VEND</code>.</li> <li> <p>If found (<code>92</code> off):</p> <ul> <li>Updates <code>VNLPAY</code> with <code>L2AMT</code> (last payment amount).</li> <li>Updates <code>VNLPDT</code> and <code>VNLPD8</code> with <code>AXCKDT</code> (last payment date).</li> <li>Adds <code>L2DISC</code> to <code>VNDMTD</code> and <code>VNDYTD</code> (month-to-date and year-to-date discounts).</li> <li>Adds <code>L2AMT</code> and <code>L2DISC</code> to <code>VNPAY</code> (month-to-date payments).</li> <li>Subtracts <code>L2AMT</code> and <code>L2DISC</code> from <code>VNCBAL</code> (current balance).</li> <li>Adds <code>L2PAID</code> to <code>VNTYDP</code> (year-to-date paid).</li> </ul> </li> <li> <p>Final Totals and Updates (L4TOT Subroutine):</p> </li> <li>Checks if <code>L4CHEK</code> is non-zero and compares it with <code>ACCKNO</code> (next check number).</li> <li>If equal, increments <code>ACCKNO</code> and <code>ACCDJR</code> (next cash disbursements journal number).</li> <li> <p>Updates <code>APCONT</code> with the new <code>ACCKNO</code> and <code>ACCDJR</code>.</p> </li> <li> <p>Output Generation:</p> </li> <li>Writes to <code>APCHKR</code> (check reconciliation) for non-prepaid, non-voided records (<code>01</code>, <code>N90</code>, <code>N50</code>, <code>N12</code>, <code>N19</code>):<ul> <li>Updates or adds records with fields like <code>AMCODE</code>, <code>AMCKAM</code>, <code>AMCLDT</code>, <code>CLDT8</code>, <code>AMOCAM</code>.</li> </ul> </li> <li>Writes to <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code> (header, detail, one-time vendor) for fully paid records (<code>70</code>, <code>04</code>/<code>05</code>/<code>06</code>, <code>20</code>):<ul> <li>Marks records as deleted (<code>'D'</code>) and updates fields like <code>OPPPTD</code>, <code>OPCKNO</code>, <code>AXYMD</code>, <code>CDYMD</code>, <code>OPLPAM</code>, <code>OPDSTK</code>.</li> </ul> </li> <li>Writes to <code>APHISTH</code>, <code>APHISTD</code>, <code>APHISTV</code> (history files) for fully paid records:<ul> <li>Adds records with payment details, including <code>OPDISC</code>, <code>OPLPAM</code>, <code>AXYMD</code>, <code>CKDT8</code>, <code>OPCAID</code>, <code>OPINVN</code>.</li> </ul> </li> <li>Writes to <code>APPYDS</code> (discount missed table) for header records (<code>70</code>, <code>04</code>, <code>N97</code>):<ul> <li>Includes fields like <code>DSDEL</code>, <code>DSREC1</code>, <code>DSREC2</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPLPAM</code>, <code>OPDISC</code>, <code>DSINVN</code>, <code>VNNAME</code>.</li> </ul> </li> <li>Writes to <code>FRCINH</code> and <code>FRCFBH</code> (freight-related files) for applicable vouchers:<ul> <li>Updates with payment status (<code>'P'</code>), vendor, check number, and amount.</li> </ul> </li> <li>Writes to <code>APCDJR</code> (cash disbursements journal) for payment records (<code>02</code>, <code>N19</code>):<ul> <li>Outputs cash (<code>'C'</code>), discount (<code>'D'</code>), and A/P (<code>'AP'</code>) entries with fields like <code>CONO</code>, <code>JRNID</code>, <code>BKGL</code>, <code>AXCHEK</code>, <code>OPLPAM</code>, <code>CDDISC</code>, <code>OPPAY</code>.</li> </ul> </li> <li>Writes to <code>APPNCF</code> (PNC positive pay file) for non-prepaid, non-voided records (<code>01</code>, <code>N19</code>, <code>N12</code>, <code>N28</code>):<ul> <li>Outputs bank account, check number, date, amount, vendor name, and status code.</li> </ul> </li> <li>Writes to <code>APPRINT</code> (printer file) for the check register report:<ul> <li>Outputs headers with company name, bank G/L, wire transfer indicator, date, time, and journal ID.</li> <li>Outputs detail lines with check number, vendor number, name, date, and amount.</li> <li>Outputs totals for computer checks, prepaid checks, ACH payments, wire transfers, employee expenses, and overall totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules, primarily related to payment processing, file updates, and reporting:</p> <ol> <li>Check Record Processing:</li> <li>Skips processing for credit/no-pay records (<code>AXRECD = 'C'</code>).</li> <li>Handles voided checks differently based on <code>AXRECD</code> (<code>'F'</code> for same check number, <code>'V'</code> for next check number).</li> <li> <p>Supports multiple payment types: prepaid checks (<code>'P'</code>), ACH (<code>'A'</code>), wire transfers (<code>'W'</code>), and employee expenses (<code>'E'</code>).</p> </li> <li> <p>Date Handling:</p> </li> <li>Adjusts check dates for century (<code>Y2KCEN</code>, <code>Y2KCMP</code>) to handle Y2K compliance (e.g., <code>PTCKYY &gt;= Y2KCMP</code> uses <code>Y2KCEN</code>, otherwise adds 1 to century).</li> <li> <p>Formats dates for PNC positive pay (<code>PNCDT8</code>) in MMDDYYYY format.</p> </li> <li> <p>Journal and Check Number Management:</p> </li> <li>Assigns journal ID (<code>JRNID</code>) as <code>'CD'</code> (check), <code>'WD'</code> (wire transfer), <code>'AD'</code> (ACH), or <code>'ED'</code> (employee expenses).</li> <li> <p>Increments <code>ACCKNO</code> (next check number) and <code>ACCDJR</code> (next journal number) only if a valid check number is processed.</p> </li> <li> <p>Vendor and Payment Updates:</p> </li> <li>Accumulates gross amount, discount, and payment amounts for each vendor (<code>L2GRAM</code>, <code>L2DISC</code>, <code>L2AMT</code>, <code>L2PAID</code>).</li> <li>Updates vendor balances (<code>VNCBAL</code>), payments (<code>VNPAY</code>, <code>VNTYDP</code>), and discounts (<code>VNDMTD</code>, <code>VNDYTD</code>) in <code>APVEND</code>.</li> <li> <p>Marks fully paid vouchers as deleted (<code>'D'</code>) in <code>APOPENH</code>, <code>APOPEND</code>, <code>APOPENV</code>.</p> </li> <li> <p>Freight Invoice Processing:</p> </li> <li>Checks <code>FRCFBH</code> (freight bill header) before <code>FRCINH</code> (invoice header) for vouchers with a carrier ID (<code>OPCAID</code>).</li> <li> <p>Updates payment status (<code>FRAPST = 'P'</code>) in the appropriate freight file.</p> </li> <li> <p>Discount Missed Tracking:</p> </li> <li> <p>Writes to <code>APPYDS</code> for header records to track missed discounts, including invoice and vendor details.</p> </li> <li> <p>Check Reconciliation:</p> </li> <li>Updates <code>APCHKR</code> only for non-wire transfer, non-ACH, non-employee expense records (<code>N50</code>).</li> <li> <p>Sets <code>AMCODE</code> to <code>'O'</code> (open) or <code>'V'</code> (voided) and updates amounts and dates accordingly.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a detailed check register (<code>APPRINT</code>) with headers, detail lines, and totals by payment type.</li> <li>Produces a PNC positive pay file (<code>APPNCF</code>) for bank reconciliation, including void status.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with multiple files for input, update, and output. The files are listed below with their logical names, labels, usage, and disposition:</p> Logical Name Label Usage Disposition Record Length APPYCK ?9?APPC?WS? Input: Check data (check number, amount, date, vendor). Input (IP) 96 APPAY ?9?APPY?WS? Input/Update: Payment data (voucher, gross amount, discount, check number). Input/Update (IS) 384 AP250S ?9?APPS?WS? Input: Supporting data (used for array <code>SEP</code>). Input (IR) 3 APPYTR ?9?APPT?WS? Input: Transaction data (check date, year/period). Input (IC) 128 APCONT ?9?APCONT Update: A/P control (company name, next check/journal numbers). Update (UC) 256 APVEND ?9?APVEND Update: Vendor master (name, balance, payments, discounts). Update (UC) 579 APVEND2 ?9?APVEND Input: Vendor master (address, name overflow). Input (IC) 579 APCHKR ?9?APCHKR Update: Check reconciliation (check amount, clear date, status). Update (UC) 128 APOPEN ?9?APOPEN Input: Open A/P file (voucher data). Input (ID) 384 APOPENH ?9?APOPNH Update: Open A/P header (voucher header data). Update (UC) 384 APOPEND ?9?APOPND Update: Open A/P detail (voucher detail data). Update (UC) 384 APOPENV ?9?APOPNV Update: Open A/P one-time vendor data. Update (UC) 384 FRCINH ?9?FRCINH Update: Freight invoice header (carrier, payment status). Update (UF) 206 FRCFBH ?9?FRCFBH Update: Freight bill header (similar to FRCINH). Update (UF) 206 APPYDS ?9?APDS?WS? Input: Discount missed table (voucher, discount data). Input (IF) 384 APHISTH ?9?APHSTH Output: A/P history header (payment history). Output (O) 384 APHISTD ?9?APHSTD Output: A/P history detail (payment details). Output (O) 384 APHISTV ?9?APHSTV Output: A/P history one-time vendor (payment history). Output (O) 384 APCDJR ?9?APCD?WS? Output: Cash disbursements journal (cash, discount, A/P entries). Output (O) 128 APPRINT ?9?APPRINT Output: Check register report (printer file). Output (O) 132 APPNCF ?9?APPNCF Output: PNC positive pay file (bank reconciliation). Output (O) 155 APDSMS ?9?APDSMS Output: Discount missed table (missed discount records). Output (O) 384"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP250.RPG36</code> program does not explicitly call any external programs. All processing is handled within the program through its subroutines (<code>L4DET</code>, <code>EACH01</code>, <code>EACH02</code>, <code>L2TOT</code>, <code>L4TOT</code>). The program is self-contained and relies on file operations and internal logic to complete its tasks.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP250RPG%20GROK/#notes","title":"Notes","text":"<ul> <li>File Dispositions:</li> <li><code>IP</code> (Primary Input): <code>APPYCK</code> for check records.</li> <li><code>IS</code> (Secondary Input/Update): <code>APPAY</code> for payment processing.</li> <li><code>IR</code>/<code>IC</code> (Input): Temporary or control files (<code>AP250S</code>, <code>APPYTR</code>, <code>APVEND2</code>).</li> <li><code>UC</code>/<code>UF</code> (Update): Master files (<code>APCONT</code>, <code>APVEND</code>, <code>APCHKR</code>, <code>APOPEN*</code>, <code>FRC*</code>).</li> <li><code>ID</code> (Input for Deletion): <code>APOPEN</code> for reading vouchers.</li> <li><code>O</code> (Output): History, journal, and report files (<code>APHIST*</code>, <code>APCDJR</code>, <code>APPRINT</code>, <code>APPNCF</code>, <code>APDSMS</code>).</li> <li>Modifications:</li> <li><code>JB01</code> (2012): Added support for ACH (<code>A</code>), wire transfers (<code>W</code>), and employee expenses (<code>E</code>) in <code>PTHOLD</code> and <code>AXRECD</code>.</li> <li><code>JB02</code> (2018): Added <code>FRCFBH</code> processing before <code>FRCINH</code> and increased <code>APPAY</code> record length to 384 to match <code>APOPEN</code>.</li> <li><code>MG03</code> (2022): Added <code>APPYDS</code> and <code>APDSMS</code> for tracking missed discounts.</li> <li>Y2K Compliance: The program handles century adjustments for dates to ensure correct processing of check and payment dates.</li> <li>Output Formats:</li> <li>The check register (<code>APPRINT</code>) includes detailed headers and totals by payment type.</li> <li>The PNC positive pay file (<code>APPNCF</code>) is formatted for bank reconciliation, including void status.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP250.RPG36</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/","title":"AP251 RPG","text":"<p>The RPG program <code>AP251.RPG36</code> is invoked by the OCL procedure <code>AP251.OCL36</code> as part of the Accounts Payable (A/P) Check Register process, specifically to update the commission table (<code>APTORCY</code>) with payment information from the payment file (<code>APPAY</code>). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP251.RPG36</code> program is a straightforward RPG program designed to update the commission table (<code>APTORCY</code>) based on payment records from the <code>APPAY</code> file. The processing is structured around two subroutines: <code>ONETIM</code> for initialization and <code>EACH01</code> for processing each payment record. The steps are as follows:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Executes once at the start of the program (<code>N09</code> condition ensures it runs only if indicator <code>09</code> is off).</li> <li>Retrieves the current system time and date using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits).</li> <li>Splits <code>TIMDAT</code> into <code>TIME</code> (6 digits, time) and <code>DATE</code> (6 digits, date).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by 10000.01.</li> <li>Formats the date into an 8-digit format (<code>DATE8</code>) by prefixing the century (<code>20</code>) and appending <code>DATYMD</code>.</li> <li> <p>Sets indicator <code>09</code> to prevent re-execution of the subroutine.</p> </li> <li> <p>Process Each Payment Record (EACH01 Subroutine):</p> </li> <li>Executes for each record in the <code>APPAY</code> file (triggered by record indicator <code>01</code>).</li> <li>Constructs a key (<code>KEY27</code>, 27 bytes) for chaining to the <code>APTORCY</code> file:<ul> <li>Copies the company number (<code>CONO</code>) to <code>KEY27</code>.</li> <li>Copies the vendor number (<code>VEND</code>) to a temporary key (<code>KEY25</code>).</li> <li>Copies the invoice description (<code>OPIN20</code>, positions 35\u201354) to a temporary key (<code>KEY20</code>).</li> <li>Combines <code>KEY20</code> into <code>KEY25</code> and then into <code>KEY27</code> to form the full key.</li> </ul> </li> <li>Chains to the <code>APTORCY</code> file using <code>KEY27</code> to locate the corresponding commission record (sets indicator <code>99</code> if not found).</li> <li> <p>If the record is found (<code>N99</code>):</p> <ul> <li>Converts the check date (<code>AXCKDT</code>) to a year-month-day format (<code>AXYMD</code>) by multiplying by 10000.01.</li> <li>Formats the check date into an 8-digit format (<code>AXYMD8</code>) by prefixing the century (<code>20</code>) and appending <code>AXYMD</code>.</li> <li>Sets the amount field (<code>AMT92</code>) to the gross amount (<code>OPGRAM</code>) from the <code>APPAY</code> record.</li> <li>Writes an exception record to <code>APTORCY</code> via the <code>UPDATE</code> output specification.</li> </ul> </li> <li> <p>Update Commission Table (APTORCY):</p> </li> <li>For each matching record in <code>APTORCY</code>, updates the following fields:<ul> <li><code>OPINV#</code> (A/P invoice number, positions 207\u2013226 from <code>APPAY</code>) to <code>ATINV</code> (positions 84\u2013103).</li> <li><code>AMT92</code> (gross amount from <code>OPGRAM</code>) to <code>ATAPMT</code> (positions 104\u2013108, packed).</li> <li>Sets <code>ATSTAT</code> (position 109) to <code>'P'</code> to indicate the payment status.</li> <li><code>ATCHK#</code> (check number, positions 91\u201396 from <code>APPAY</code> as <code>OPCKNO</code>) to <code>ATCHK#</code> (positions 110\u2013115).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules, which govern the updating of the commission table:</p> <ol> <li>Key Matching for Commission Records:</li> <li>The program matches <code>APPAY</code> records to <code>APTORCY</code> records using a composite key (<code>KEY27</code>) built from:<ul> <li>Company number (<code>CONO</code>, positions 2\u20133 in <code>APPAY</code>, <code>ATCO</code> in <code>APTORCY</code>).</li> <li>Vendor number (<code>VEND</code>, positions 4\u20138 in <code>APPAY</code>, <code>ATVEND</code> in <code>APTORCY</code>).</li> <li>Invoice description (<code>OPIN20</code>, positions 35\u201354 in <code>APPAY</code>, corresponding to <code>ATINV</code> in <code>APTORCY</code>).</li> </ul> </li> <li> <p>If no matching record is found in <code>APTORCY</code> (indicator <code>99</code> on), the program skips the update for that payment record.</p> </li> <li> <p>Payment Status Update:</p> </li> <li>Updates the commission table only when a matching record is found.</li> <li>Sets the payment status (<code>ATSTAT</code>) to <code>'P'</code> (paid) for matched records.</li> <li> <p>Records the gross amount (<code>OPGRAM</code>) as the payment amount (<code>ATAPMT</code>) and the check number (<code>OPCKNO</code>) in <code>ATCHK#</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li>Uses the check date (<code>AXCKDT</code>, positions 434\u2013439 in the User Data Structure) and formats it into an 8-digit year-month-day format (<code>AXYMD8</code>) with a century prefix (<code>20</code>).</li> <li> <p>Includes Y2K compliance fields (<code>Y2KCEN = 19</code>, <code>Y2KCMP = 80</code>) in the User Data Structure (UDS), though they are not explicitly used in date calculations in this program (likely inherited from a standard template).</p> </li> <li> <p>No Output Reports:</p> </li> <li> <p>The program does not generate printed reports or additional output files; it solely updates the <code>APTORCY</code> file.</p> </li> <li> <p>Single-Pass Processing:</p> </li> <li>Processes each <code>APPAY</code> record once, with no accumulation or totaling across records.</li> <li>Updates are performed immediately for each matched record via exception output (<code>EXCPTUPDATE</code>).</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with two files, as defined in the OCL and RPG source:</p> Logical Name Label Usage Disposition Record Length APPAY ?9?APPY?WS? Input: Payment data (company, vendor, invoice, gross amount, check number). Input (IP) 384 APTORCY ?9?APTORCY Update: Commission table (vendor, invoice, payment amount, status). Update (UF) 211 <p>Key Fields in APPAY: - <code>CONO</code> (Company Number, positions 2\u20133) - <code>VEND</code> (Vendor Number, positions 4\u20138) - <code>OPIN20</code> (Invoice Description, positions 35\u201354) - <code>OPGRAM</code> (Gross Amount, packed, positions 18\u201323) - <code>OPCKNO</code> (Check Number for Prepay, positions 91\u201396) - <code>AXCKDT</code> (Check Date, positions 434\u2013439 in UDS)</p> <p>Key Fields in APTORCY: - <code>ATCO</code> (Company Number, positions 2\u20133) - <code>ATVEND</code> (Vendor Number, positions 59\u201363) - <code>ATINV</code> (Invoice Number, positions 84\u2013103) - <code>ATAPMT</code> (A/P Payment Amount, packed, positions 104\u2013108) - <code>ATSTAT</code> (Payment Status, position 109) - <code>ATCHK#</code> (Check Number, positions 110\u2013115)</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP251.RPG36</code> program does not explicitly call any external programs. All processing is handled within the program through its subroutines (<code>ONETIM</code> and <code>EACH01</code>). The program is self-contained, relying solely on file operations and internal logic to update the commission table.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP251%20RPG/#notes","title":"Notes","text":"<ul> <li>File Dispositions:</li> <li><code>APPAY</code> is the primary input file (<code>IP</code>), read sequentially to process payment records.</li> <li><code>APTORCY</code> is an update file (<code>UF</code>) with an external key (<code>EXTK</code>), allowing updates to specific records based on the constructed key (<code>KEY27</code>).</li> <li>Modifications:</li> <li><code>JB01</code>: Added support for prepaid vouchers (<code>OPPAID</code>, position 97).</li> <li><code>JB02</code>: Added sales order number (<code>OPSORN</code>, positions 281\u2013286) and modified invoice handling to use <code>OPIN20</code> instead of <code>HANDTK</code> for key construction.</li> <li>Y2K Compliance: The program includes fields for century handling (<code>Y2KCEN</code>, <code>Y2KCMP</code>) in the User Data Structure, but they are not used in this specific logic, suggesting a standard template inclusion.</li> <li>Error Handling: If a matching <code>APTORCY</code> record is not found (<code>99</code> on), the program skips the update without logging errors or generating output, ensuring silent continuation.</li> <li>Purpose: The program is narrowly focused on updating the commission table with payment details, likely used to track commissions owed or paid to vendors based on invoice payments.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP251.RPG36</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/","title":"AP255 RPG","text":"<p>The RPG program <code>AP255.RPG36</code> is invoked by the OCL procedure <code>AP250.OCL36</code> as part of the Accounts Payable (A/P) Check Register process, specifically to generate the Cash Disbursements Journal and summarize A/P transactions. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP255%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP255.RPG36</code> program processes sorted records from the cash disbursements journal file (<code>APCDJR</code>) to produce a summarized journal report and update a general ledger file (<code>TEMGEN</code>). The processing is structured around a main program flow and a single subroutine (<code>JRNL</code>). The steps are as follows:</p> <ol> <li>Initialization (Level 4 Break - L4):</li> <li>Executes at the start of the program (triggered by level break <code>L4</code>).</li> <li>Retrieves the current system time and date using the <code>TIME</code> operation, storing them in <code>TIMDAT</code> (12 digits).</li> <li>Splits <code>TIMDAT</code> into <code>TIME</code> (6 digits, time) and <code>DATE</code> (6 digits, date).</li> <li>Converts the date to a year-month-day format (<code>DATYMD</code>) by multiplying <code>DATE</code> by 10000.01.</li> <li>Formats the date into an 8-digit format (<code>DATE8</code>) by prefixing the century (<code>20</code>) and appending <code>DATYMD</code>.</li> <li>Initializes the page counter (<code>PAGE</code>) to 0.</li> <li>Sets a separator field (<code>SEP</code>) to <code>'* '</code>.</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>CDCONO</code>) to retrieve the company name (<code>ACNAME</code>).</li> <li> <p>Initializes debit and credit accumulators (<code>L4DR</code>, <code>L4CR</code>) to 0.</p> </li> <li> <p>Check Year/Period for Printing:</p> </li> <li>Compares the year/period field (<code>CDYYPD</code>, positions 116\u2013119) to 0.</li> <li> <p>If <code>CDYYPD</code> is non-zero (<code>N99</code>), sets indicator <code>98</code> to print the period and year on the journal report; otherwise, sets indicator <code>99</code>.</p> </li> <li> <p>Process Each Journal Record:</p> </li> <li>Reads records from <code>APCDJR</code> (primary input file, indicator <code>01</code>).</li> <li>Checks the credit/debit code (<code>CDCORD</code>, position 12) to identify debit entries (<code>'D'</code>, sets indicator <code>30</code>).</li> <li>Checks the transaction type (<code>CDTYPE</code>, positions 106\u2013115) to identify A/P transactions (<code>'AP      '</code>, sets indicator <code>20</code> for summarization).</li> <li>Accumulates the transaction amount (<code>CDAMT</code>) into <code>L1AMT</code> (level 1 accumulator).</li> <li>Converts the check date (<code>CDCKDT</code>, positions 51\u201356) to a year-month-day format (<code>YMD</code>) by multiplying by 10000.01.</li> <li> <p>Handles Y2K compliance for the check date:</p> <ul> <li>Extracts the year (<code>YY</code>) from <code>YMD</code>.</li> <li>If <code>YY</code> is greater than or equal to <code>Y2KCMP</code> (80), sets the century (<code>CN</code>) to <code>Y2KCEN</code> (19); otherwise, increments <code>Y2KCEN</code> by 1.</li> <li>Formats the date into an 8-digit format (<code>CYMD</code>) by combining <code>CN</code> and <code>YMD</code>.</li> </ul> </li> <li> <p>Write Journal Entries (JRNL Subroutine):</p> </li> <li>Executes for non-summarized records (<code>N20</code>) or summarized A/P records at level 1 break (<code>L1</code> and <code>20</code>).</li> <li>Increments the journal reference number (<code>JRREF#</code>) by 1.</li> <li>Determines the credit/debit code (<code>CORD</code>):<ul> <li>Copies <code>CDCORD</code> to <code>CORD</code>.</li> <li>If <code>L1AMT</code> is negative (indicator <code>10</code>):</li> <li>Switches the sign of <code>L1AMT</code> using <code>Z-SUB</code>.</li> <li>Sets <code>CORD</code> to <code>'C'</code> if <code>CDCORD</code> is <code>'D'</code> (indicator <code>30</code>), or <code>'D'</code> otherwise.</li> </ul> </li> <li>Accumulates amounts:<ul> <li>If <code>CORD</code> is <code>'D'</code> (indicator <code>11</code>), adds <code>L1AMT</code> to <code>L4DR</code> (debit total).</li> <li>Otherwise, adds <code>L1AMT</code> to <code>L4CR</code> (credit total).</li> </ul> </li> <li>Sets <code>JRAMT</code> to <code>L1AMT</code> and resets <code>L1AMT</code> to 0.</li> <li> <p>Writes to the general ledger file (<code>TEMGEN</code>):</p> <ul> <li>For non-summarized records (<code>01</code>, <code>N20</code>):</li> <li>Writes a detail record with fields like <code>CDCONO</code>, <code>CDGLNO</code>, <code>CDJRNL</code>, <code>JRREF#</code>, <code>CORD</code>, <code>CDCHEK</code>, <code>CDDESC</code>, <code>YMD</code>, <code>JRAMT</code>, <code>CDNAME</code>, <code>CYMD</code>.</li> <li>For summarized A/P records (<code>L1</code>, <code>20</code>):</li> <li>Writes a summarized record with a fixed description (<code>'-SUMMARIZED A/P         '</code>), using <code>CDCKDT</code> instead of <code>CDCHEK</code>.</li> </ul> </li> <li> <p>Generate Cash Disbursements Journal Report (APPRINT):</p> </li> <li>Outputs a report to the printer file (<code>APPRINT</code>) with headers, detail lines, and totals:<ul> <li>Headers (level 4 break, <code>L4</code> or <code>OFNL4</code>):</li> <li>Company name (<code>ACNAME</code>), page number (<code>PAGE</code>), date (<code>DATE</code>, formatted as <code>Y</code>), time (<code>TIME</code>), wire transfer description (<code>WIREDS</code>), and journal title.</li> <li>Includes period/year (<code>CDPD</code>, <code>CDPDYY</code>) if <code>CDYYPD</code> is non-zero (indicator <code>98</code>).</li> <li>Column headers for journal reference, paycheck, description, vendor name, G/L number, debit amount, and credit amount.</li> <li>Detail Lines (non-summarized, <code>01</code>, <code>N20</code>):</li> <li>Outputs <code>CDJRNL</code>, <code>JRREF#</code>, check number (<code>CDCHEK</code>), description (<code>CDDESC</code>), vendor name (<code>CDNAME</code>), G/L number (<code>CDGLNO</code>), and amount (<code>JRAMT</code>) as debit (<code>11</code>) or credit (<code>N11</code>).</li> <li>Summarized Lines (level 1 break, <code>L1</code>, <code>20</code>):</li> <li>Outputs <code>CDJRNL</code>, <code>JRREF#</code>, check date (<code>CDCKDTY</code>), fixed description (<code>'-SUMMARIZED A/P         '</code>), G/L number (<code>CDGLNO</code>), and amount (<code>JRAMT</code>) as debit or credit.</li> <li>Totals (level 4 break, <code>T 2</code>, <code>L4</code>):</li> <li>Outputs journal totals with debit (<code>L4DR</code>) and credit (`L audition for free, but I need to log in to view this.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/","title":"AP256 RPG","text":"<p>The RPG program <code>AP256.RPG36</code> is invoked by the OCL procedure <code>AP256.OCL36</code>, which is called from the main OCL as part of the Accounts Payable (A/P) Check Register process. This program generates vendor payment detail reports for ACH (Automated Clearing House) vendors, with output spoolflexed to up to four email addresses per vendor. The preprocessing program <code>AP256A.RPG</code> creates the <code>APDTWSC</code> file, which provides the count of email addresses per vendor. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called for <code>AP256.RPG36</code>, incorporating the context of <code>AP256A.RPG</code>.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#process-steps","title":"Process Steps","text":"<p>The <code>AP256.RPG36</code> program processes payment records from the <code>APDTWS</code> file, retrieves vendor and company information, and generates up to four payment detail reports (<code>REPORT1</code> to <code>REPORT4</code>) for emailing to ACH vendors. The processing is structured around three subroutines: <code>ONETIM</code>, <code>APVEND</code>, and <code>TRANS</code>, with calculations and output handled at level breaks. The steps are as follows:</p> <ol> <li>Initialization (ONETIM Subroutine):</li> <li>Executes once at the start of the program (<code>N98</code> condition ensures it runs only if indicator <code>98</code> is off).</li> <li>Sets indicator <code>98</code> to prevent re-execution.</li> <li> <p>Initializes a zero field (<code>ZERO9</code>) to 0 (not used elsewhere in the provided code).</p> </li> <li> <p>Company-Level Processing (Level 2 Break - L2):</p> </li> <li>Executes for each company (<code>ADCO</code>, level break <code>L2</code>).</li> <li>Chains to the <code>APCONT</code> file using the company number (<code>ADCO</code>) to retrieve the company name (<code>ACNAME</code>).<ul> <li>Sets indicator <code>95</code> if the record is not found.</li> </ul> </li> <li> <p>Clears indicators <code>61</code>, <code>62</code>, <code>63</code>, and <code>64</code> (not used elsewhere in the provided code).</p> </li> <li> <p>Vendor-Level Processing (APVEND Subroutine):</p> </li> <li>Executes at level 1 break (<code>L1</code>) for each vendor (<code>ADVEND</code>).</li> <li>Chains to the <code>APVEND</code> file using the company/vendor key (<code>ADCOVN</code>, positions 2\u20138 from <code>APDTWS</code>) to retrieve vendor details (e.g., <code>VNNAME</code>, <code>VNADD1</code>\u2013<code>VNADD4</code>).<ul> <li>Sets indicator <code>99</code> if the vendor record is not found.</li> </ul> </li> <li>Chains to the <code>APDTWSC</code> file (populated by <code>AP256A.RPG</code>) using <code>ADCOVN</code> to retrieve the email account count (<code>ACECNT</code>, positions 9\u201310).<ul> <li>Sets indicator <code>98</code> if the record is not found.</li> </ul> </li> <li>Based on the email account count (<code>ACECNT</code>):<ul> <li>If <code>ACECNT = 4</code>, sets indicators <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code> (all four reports: <code>REPORT1</code>\u2013<code>REPORT4</code>).</li> <li>If <code>ACECNT = 3</code>, sets indicators <code>50</code>, <code>51</code>, <code>52</code> (three reports).</li> <li>If <code>ACECNT = 2</code>, sets indicators <code>50</code>, <code>51</code> (two reports).</li> <li>If <code>ACECNT = 1</code>, sets indicator <code>50</code> (one report).</li> </ul> </li> <li>Checks the vendor category (<code>VNCATG</code>) for <code>'CRDACT'</code> (crude account):<ul> <li>If true, sets indicator <code>60</code> to use crude-specific messages (<code>MSG,4</code>\u2013<code>MSG,6</code>); otherwise, uses standard messages (<code>MSG,1</code>\u2013<code>MSG,3</code>).</li> </ul> </li> <li> <p>Initializes vendor-level accumulators (<code>L1INV$</code>, <code>L1DIS$</code>, <code>L1PYM$</code>) to zero at each <code>L1</code> break.</p> </li> <li> <p>Process Payment Transactions (TRANS Subroutine):</p> </li> <li>Executes for each <code>APDTWS</code> record (indicator <code>01</code>).</li> <li>Calculates payment amounts:<ul> <li>Adds invoice amount (<code>ADINV$</code>, positions 54\u201359, packed) to total printed amount (<code>TOTPRT</code>) and level 1 invoice total (<code>L1INV$</code>).</li> <li>Calculates payment amount (<code>ADPYM$</code>) as <code>ADINV$</code> minus discount (<code>ADDISC</code>, positions 60\u201364, packed).</li> <li>Adds discount (<code>ADDISC</code>) to level 1 discount total (<code>L1DIS$</code>).</li> <li>Adds payment amount (<code>ADPYM$</code>) to level 1 payment total (<code>L1PYM$</code>).</li> </ul> </li> <li> <p>Retrieves email addresses from <code>APVNFMX</code>:</p> <ul> <li>Constructs a key (<code>KEY20</code>, 20 bytes) using <code>ADCOVN</code> (company/vendor) and <code>'ACHE'</code> (form type).</li> <li>Sets the lower limit (<code>SETLL</code>) on <code>APVNFMX</code> using <code>KEY20</code>.</li> <li>Reads <code>APVNFMX</code> records sequentially, looping until end-of-file (<code>10</code>) or all email addresses are retrieved:</li> <li>Skips records with mismatched company/vendor (<code>ADCOVN \u2260 AMCOVN</code>).</li> <li>Skips deleted records (<code>AMDEL = 'D'</code>).</li> <li>Skips records not marked for original sending (<code>AMFMYN \u2260 'Y'</code>).</li> <li>Skips records with incorrect form type (<code>AMFMTY \u2260 'ACHE'</code>).</li> <li>Assigns email addresses (<code>AMEMLA</code>, positions 72\u2013131) to <code>EMALP1</code>\u2013<code>EMALP4</code> based on a counter (<code>COUNT</code>):<ul> <li><code>COUNT = 1</code>: <code>EMALP1</code></li> <li><code>COUNT = 2</code>: <code>EMALP2</code></li> <li><code>COUNT = 3</code>: <code>EMALP3</code></li> <li><code>COUNT = 4</code>: <code>EMALP4</code> (stops after fourth email).</li> </ul> </li> </ul> </li> <li> <p>Level 1 Calculations (L1CALC Subroutine):</p> </li> <li>Executes at level 1 break (<code>L1</code>) for each vendor.</li> <li> <p>Triggers an exception output (<code>EXCPT</code>) to write report data to <code>REPORT1</code>\u2013<code>REPORT4</code> based on indicators <code>50</code>\u2013<code>53</code>.</p> </li> <li> <p>Generate Vendor Payment Reports (REPORT1\u2013REPORT4):</p> </li> <li>Outputs up to four reports (<code>REPORT1</code>, <code>REPORT2</code>, <code>REPORT3</code>, <code>REPORT4</code>) based on indicators <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code>, respectively, sent to output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) for spoolflex emailing.</li> <li>Each report includes:<ul> <li>Headers (level 1 break, <code>L1</code>, indicators <code>50</code>\u2013<code>53</code>):</li> <li>Date (<code>UDATE</code>, formatted as <code>Y</code>, position 99).</li> <li>Company number (<code>ADCO</code>, position 9) and vendor number (<code>ADVEND</code>, position 15).</li> <li>Vendor name (<code>VNNAME</code>, position 35) and address (<code>VNADD1</code>\u2013<code>VNADD4</code>, positions 35).</li> <li>Check date (<code>KYCKDTY</code>, position 73, from User Data Structure, positions 434\u2013439).</li> <li>Messages (<code>MSG,1</code>\u2013<code>MSG,3</code> for normal vendors, <code>MSG,4</code>\u2013<code>MSG,6</code> for crude vendors, position 89).</li> <li>Email address (<code>EMALP1</code>\u2013<code>EMALP4</code>, position 62, specific to each report).</li> <li>Detail Lines (indicator <code>01</code>, indicators <code>50</code>\u2013<code>53</code>, lines 31\u201333):</li> <li>Check date (<code>KYCKDTY</code>, position 16), invoice number (<code>ADINVN</code>, position 41).</li> <li>Invoice amount (<code>ADINV$M</code>, position 58), discount (<code>ADDISCM</code>, position 80), payment amount (<code>ADPYM$M</code>, position 116).</li> <li>Totals (level 1 break, <code>L1</code>, indicators <code>50</code>\u2013<code>53</code>, line 3):</li> <li>Total invoice amount (<code>L1INV$M</code>, position 58), total discount (<code>L1DIS$M</code>, position 80), total payment (<code>L1PYM$M</code>, position 116).</li> <li>Continued Message (if line count exceeds 62):</li> <li>Outputs <code>'CONTINUED ON NEXT PAGE'</code> (position 22).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Vendor-Specific Reporting:</li> <li>Processes payment records for ACH vendors only, as indicated by the <code>APDTWS</code> file and <code>APVNFMX</code> form type (<code>AMFMTY = 'ACHE'</code>).</li> <li> <p>Generates up to four reports per vendor, based on the email account count (<code>ACECNT</code>) from <code>APDTWSC</code> (populated by <code>AP256A.RPG</code>).</p> </li> <li> <p>Email Address Retrieval:</p> </li> <li>Retrieves only valid email addresses from <code>APVNFMX</code> where:<ul> <li>Company/vendor key matches (<code>ADCOVN = AMCOVN</code>).</li> <li>Form type is <code>'ACHE'</code>.</li> <li>Record is not deleted (<code>AMDEL \u2260 'D'</code>).</li> <li>Record is marked for original sending (<code>AMFMYN = 'Y'</code>).</li> </ul> </li> <li> <p>Limits to a maximum of four email addresses per vendor (<code>EMALP1</code>\u2013<code>EMALP4</code>).</p> </li> <li> <p>Crude vs. Normal Vendors:</p> </li> <li>Identifies crude vendors by checking <code>VNCATG = 'CRDACT'</code> in <code>APVEND</code>.</li> <li>Uses distinct message sets:<ul> <li>Normal vendors (<code>N60</code>): <code>MSG,1</code>\u2013<code>MSG,3</code> (e.g., \"THE INVOICES LISTED BELOW WERE PAID BY ARG THROUGH ACH ON MM/DD/YY.\").</li> <li>Crude vendors (<code>60</code>): <code>MSG,4</code>\u2013<code>MSG,6</code> (e.g., \"THIS EMAIL IS NOTIFICATION THAT A DEPOSIT WILL BE MADE INTO YOUR ACCOUNT.\" with a reference to <code>crudestatements@amref.com</code>).</li> </ul> </li> <li> <p>Added on 5-01-24 by Marty Greenberg to differentiate messaging.</p> </li> <li> <p>Payment Calculations:</p> </li> <li>Calculates payment amount (<code>ADPYM$</code>) as invoice amount (<code>ADINV$</code>) minus discount (<code>ADDISC</code>).</li> <li> <p>Accumulates totals at the vendor level (<code>L1INV$</code>, <code>L1DIS$</code>, <code>L1PYM$</code>) for reporting.</p> </li> <li> <p>Report Output:</p> </li> <li>Generates up to four reports per vendor, each sent to a different email address (<code>EMALP1</code>\u2013<code>EMALP4</code>) via spoolflex.</li> <li>Includes vendor details (name, address), payment details (invoice, amounts), and totals.</li> <li>Handles pagination by including a continuation message if the report exceeds 62 lines.</li> <li> <p>Added support for four email addresses on 5-13-19 by Marty Greenberg (previously two).</p> </li> <li> <p>Error Handling:</p> </li> <li>Skips invalid <code>APVNFMX</code> records (deleted, non-ACH, or non-original).</li> <li> <p>Proceeds without error logging if vendor (<code>APVEND</code>), control (<code>APDTWSC</code>), or company (<code>APCONT</code>) records are not found, relying on indicators (<code>95</code>, <code>98</code>, <code>99</code>).</p> </li> <li> <p>Preprocessing Dependency:</p> </li> <li>Relies on <code>AP256A.RPG</code> to populate <code>APDTWSC</code> with the email account count (<code>ACECNT</code>) for each vendor, ensuring the correct number of reports is generated.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files, as defined in the OCL and RPG source:</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#ap256-file-summary","title":"AP256 File Summary","text":"Logical Name Label Usage Disposition Record Length APDTWS ?9?APDT?WS? Input: ACH payment data (company, vendor, invoice, amounts, check date). Input (IP) 256 APDTWSC ?9?APDT?WS?C Input: ACH vendor control (email account count, populated by AP256A). Input (IF) 10 APVEND ?9?APVEND Input: Vendor master (name, address, category, ACH details). Input (IF) 579 APVNFMX ?9?APVNFMX Input: Vendor email/fax details (email addresses, form type). Input (IF) 266 APCONT ?9?APCONT Input: A/P control (company name). Input (IF) 256 REPORT1 N/A Output: Payment detail report for first email address. Output (O) 132 REPORT2 N/A Output: Payment detail report for second email address. Output (O) 132 REPORT3 N/A Output: Payment detail report for third email address. Output (O) 132 REPORT4 N/A Output: Payment detail report for fourth email address. Output (O) 132"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#key-fields","title":"Key Fields","text":"<ul> <li>APDTWS:</li> <li><code>ADCO</code> (company number, positions 2\u20133, level 2 break)</li> <li><code>ADVEND</code> (vendor number, positions 4\u20138, level 1 break)</li> <li><code>ADCOVN</code> (company/vendor key, positions 2\u20138)</li> <li><code>ADINVN</code> (invoice number, positions 9\u201328)</li> <li><code>ADINV$</code> (invoice amount, packed, positions 54\u201359)</li> <li><code>ADDISC</code> (discount, packed, positions 60\u201364)</li> <li><code>ADLPAM</code> (payment amount, packed, positions 65\u201370)</li> <li><code>ADDATE</code> (date, positions 71\u201376)</li> <li><code>ADVCH#</code> (check number, positions 77\u201381)</li> <li>APDTWSC:</li> <li><code>ACCO</code> (company number, positions 2\u20133)</li> <li><code>ACVEND</code> (vendor number, positions 4\u20138)</li> <li><code>ACECNT</code> (email account count, positions 9\u201310)</li> <li>APVEND:</li> <li><code>VNCO</code> (company number, positions 2\u20133)</li> <li><code>VNVEND</code> (vendor number, positions 4\u20138)</li> <li><code>VNNAME</code> (vendor name, positions 9\u201338)</li> <li><code>VNADD1</code>\u2013<code>VNADD4</code> (address lines, positions 39\u2013158)</li> <li><code>VNCATG</code> (vendor category, positions 495\u2013500)</li> <li>APVNFMX:</li> <li><code>AMCONO</code> (company number, positions 2\u20133)</li> <li><code>AMCVEN</code> (vendor number, positions 4\u20138)</li> <li><code>AMCOVN</code> (company/vendor key, positions 2\u20138)</li> <li><code>AMFMTY</code> (form type, positions 9\u201312, must be <code>'ACHE'</code>)</li> <li><code>AMEMLA</code> (email address, positions 72\u2013131)</li> <li><code>AMFMYN</code> (send original flag, position 152)</li> <li>APCONT:</li> <li><code>ACCONO</code> (company number, positions 2\u20133)</li> <li><code>ACNAME</code> (company name, positions 4\u201333)</li> <li>User Data Structure (UDS):</li> <li><code>KYCKDT</code> (check date, positions 434\u2013439)</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256.RPG36</code> program does not explicitly call any external programs within its code. However, it relies on the preprocessing program <code>AP256A.RPG</code>, which is executed by the OCL procedure <code>AP256A</code> to populate the <code>APDTWSC</code> file with the email account count (<code>ACECNT</code>) for each vendor. The <code>AP256A.RPG</code> program is critical for ensuring that <code>AP256.RPG36</code> generates the correct number of reports based on the number of email addresses.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256%20RPG/#notes","title":"Notes","text":"<ul> <li>OCL Context:</li> <li>The OCL procedure <code>AP256A</code> creates the <code>APDTWSC</code> file with a capacity of 50 records and a record length of 10 bytes, using the <code>BLDFILE</code> command.</li> <li>The OCL procedure <code>AP256</code> loads <code>AP256.RPG36</code> and configures output queues (<code>QUSRSYS/APACHOUTQ</code> or <code>QUSRSYS/TESTOUTQ</code>) for the report files (<code>REPORT1</code>\u2013<code>REPORT4</code>) to support spoolflex emailing.</li> <li>Modifications:</li> <li>5-13-19 (Marty Greenberg): Increased email accounts from two to four, adding support for <code>REPORT3</code> and <code>REPORT4</code>.</li> <li>5-01-24 (Marty Greenberg): Updated messages to differentiate between crude (<code>CRDACT</code>) and normal vendors, with specific email instructions for crude vendors (e.g., referencing <code>crudestatements@amref.com</code>).</li> <li>Report Output:</li> <li>Reports are formatted for spoolflex emailing, with each report (<code>REPORT1</code>\u2013<code>REPORT4</code>) sent to a different email address (<code>EMALP1</code>\u2013<code>EMALP4</code>).</li> <li>Includes vendor details, payment details (invoice number, amounts, discounts), and totals, with pagination handling for reports exceeding 62 lines.</li> <li>Preprocessing Dependency:</li> <li>The <code>APDTWSC</code> file, populated by <code>AP256A.RPG</code>, provides the email account count (<code>ACECNT</code>), which determines how many reports (<code>REPORT1</code>\u2013<code>REPORT4</code>) are generated for each vendor.</li> <li>Error Handling:</li> <li>Skips invalid <code>APVNFMX</code> records (deleted, non-ACH, or non-original) and continues processing without logging errors.</li> <li>Handles missing <code>APVEND</code>, <code>APDTWSC</code>, or <code>APCONT</code> records gracefully using indicators (<code>95</code>, <code>98</code>, <code>99</code>).</li> <li>Business Context:</li> <li>Designed for ACH vendors, ensuring payment notifications are emailed efficiently with tailored messaging for crude vendors.</li> <li>Supports up to four email addresses per vendor, reflecting modernized ACH notification processes.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP256.RPG36</code> program's functionality, business logic, file interactions, and dependency on <code>AP256A.RPG</code>. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/","title":"AP256A","text":"<p>The RPG program <code>AP256A.RPG</code> is invoked by the OCL procedure <code>AP256A</code> as a preprocessing step before <code>AP256.RPG36</code> in the Accounts Payable (A/P) Check Register process. Its primary purpose is to create or update the <code>APDTWSC</code> file, which stores the count of email addresses for ACH vendors based on records in the <code>APVNFMX</code> file. This information is used by <code>AP256.RPG36</code> to generate vendor payment detail reports. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called, as requested.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#process-steps","title":"Process Steps","text":"<p>The <code>AP256A.RPG</code> program processes payment records from the <code>APDTWS</code> file, retrieves email information from the <code>APVNFMX</code> file, and writes or updates records in the <code>APDTWSC</code> file with the count of valid ACH email addresses for each vendor. The program is structured around a single main processing loop without explicit subroutines. The steps are as follows:</p> <ol> <li>Process Each Payment Record:</li> <li>Reads records from the primary input file <code>APDTWS</code> (indicator <code>01</code>).</li> <li>For each record, constructs a key (<code>KEY20</code>, 20 bytes) to access the <code>APVNFMX</code> file:<ul> <li>Copies the company/vendor key (<code>ADCOVN</code>, positions 2\u20138) to <code>KEY20</code>.</li> <li>Appends the form type <code>'ACHE'</code> (ACH email) to a temporary key (<code>KEY13</code>) and combines it into <code>KEY20</code>.</li> </ul> </li> <li> <p>Sets the lower limit (<code>SETLL</code>) on <code>APVNFMX</code> using <code>KEY20</code> to position the file pointer.</p> </li> <li> <p>Count Valid Email Addresses:</p> </li> <li>Initializes a counter (<code>COUNT</code>) to zero.</li> <li> <p>Reads <code>APVNFMX</code> records sequentially, looping until end-of-file (indicator <code>10</code>) or a mismatch occurs:</p> <ul> <li>Skips records where the company/vendor key (<code>ADCOVN</code>) does not match <code>AMCOVN</code> (from <code>APVNFMX</code>).</li> <li>Skips records where the form type (<code>AMFMTY</code>) is not <code>'ACHE'</code>.</li> <li>Increments <code>COUNT</code> for each valid record (matching <code>ADCOVN</code> and <code>AMFMTY = 'ACHE'</code>).</li> <li>Continues looping (<code>GOTO AGAIN</code>) until all relevant records are processed or a mismatch/end is reached.</li> </ul> </li> <li> <p>Update or Add APDTWSC Record:</p> </li> <li>Chains to the <code>APDTWSC</code> file using <code>ADCOVN</code> to check for an existing record (sets indicator <code>98</code> if not found).</li> <li>Writes or updates a record in <code>APDTWSC</code>:<ul> <li>If no record exists (<code>98</code> on), writes a new record (<code>DADD</code>) with:</li> <li><code>ADCOVN</code> (company/vendor key, positions 2\u20138).</li> <li><code>COUNT</code> (number of valid email addresses, packed, positions 9\u201310).</li> <li>If a record exists (<code>N98</code>), updates the existing record with the new <code>COUNT</code> value.</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules:</p> <ol> <li>Email Address Counting:</li> <li>Counts only <code>APVNFMX</code> records where:<ul> <li>The company/vendor key matches (<code>ADCOVN = AMCOVN</code>).</li> <li>The form type is <code>'ACHE'</code> (indicating ACH email notifications).</li> </ul> </li> <li> <p>The count (<code>COUNT</code>) represents the number of valid email addresses for the vendor, which will be used by <code>AP256.RPG36</code> to determine how many reports to generate (up to four).</p> </li> <li> <p>Record Matching:</p> </li> <li>Uses <code>ADCOVN</code> (company number + vendor number) as the key to match records between <code>APDTWS</code>, <code>APVNFMX</code>, and <code>APDTWSC</code>.</li> <li> <p>Skips non-matching or irrelevant records in <code>APVNFMX</code> to ensure only ACH-related email addresses are counted.</p> </li> <li> <p>APDTWSC File Maintenance:</p> </li> <li>Creates a new record in <code>APDTWSC</code> if no matching record exists for the company/vendor key (<code>98</code> on).</li> <li>Updates the existing record if found (<code>N98</code>), overwriting the email count (<code>COUNT</code>).</li> <li> <p>Ensures the <code>APDTWSC</code> file contains one record per company/vendor with the correct email address count.</p> </li> <li> <p>No Error Logging:</p> </li> <li> <p>The program does not log errors or generate output reports if records are not found or skipped; it silently continues processing.</p> </li> <li> <p>Single-Pass Processing:</p> </li> <li>Processes each <code>APDTWS</code> record once, calculating the email count and updating <code>APDTWSC</code> immediately.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files, as defined in the OCL and RPG source:</p> Logical Name Label Usage Disposition Record Length APDTWS ?9?APDT?WS? Input: ACH payment data (company, vendor, invoice, amounts, check date). Input (IP) 256 APVNFMX ?9?APVNFMX Input: Vendor email/fax details (email addresses, form type). Input (IF) 266 APDTWSC ?9?APDT?WS?C Output/Update: ACH vendor control (company/vendor key, email count). Update (UF) 10 <p>Key Fields: - APDTWS:   - <code>ADCO</code> (company number, positions 2\u20133)   - <code>ADVEND</code> (vendor number, positions 4\u20138)   - <code>ADCOVN</code> (company/vendor key, positions 2\u20138) - APVNFMX:   - <code>AMCONO</code> (company number, positions 2\u20133)   - <code>AMCVEN</code> (vendor number, positions 4\u20138)   - <code>AMCOVN</code> (company/vendor key, positions 2\u20138)   - <code>AMFMTY</code> (form type, positions 9\u201312, must be <code>'ACHE'</code>) - APDTWSC:   - <code>ADCOVN</code> (company/vendor key, positions 2\u20138)   - <code>COUNT</code> (email address count, packed, positions 9\u201310)</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP256A.RPG</code> program does not explicitly call any external programs. All processing is handled internally within the main loop. The program is a preprocessing step for <code>AP256.RPG36</code>, which relies on the <code>APDTWSC</code> file being populated with the correct email address counts.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP250%20OCL%20Check%20Register/AP256A/#notes","title":"Notes","text":"<ul> <li>OCL Context:</li> <li>The OCL procedure <code>AP256A</code> creates the <code>APDTWSC</code> file with a capacity of 50 records and a record length of 10 bytes, using the <code>BLDFILE</code> command.</li> <li>The <code>RETAIN-T</code> parameter ensures the file is temporary, and <code>DISP-SHR</code> allows shared access for <code>APVNFMX</code>.</li> <li>Purpose:</li> <li>The program prepares the <code>APDTWSC</code> file by counting valid ACH email addresses per vendor, enabling <code>AP256.RPG36</code> to generate the appropriate number of payment detail reports (up to four per vendor).</li> <li>Error Handling:</li> <li>Skips non-matching or non-ACH records in <code>APVNFMX</code> without logging errors.</li> <li>Handles missing <code>APDTWSC</code> records by creating new ones (<code>DADD</code>) when necessary.</li> <li>Modifications:</li> <li>No explicit modification history is noted in the provided code, but the program aligns with the <code>AP256.RPG36</code> enhancements (e.g., supporting up to four email addresses, added 5-13-19).</li> <li>Efficiency:</li> <li>Uses <code>SETLL</code> and sequential reads to efficiently count email addresses, minimizing file access overhead.</li> <li>Writes or updates <code>APDTWSC</code> records only once per vendor, reducing I/O operations.</li> </ul> <p>This summary provides a comprehensive overview of the <code>AP256A.RPG</code> program's functionality, business logic, file interactions, and lack of external program calls. Let me know if you need further clarification or additional analysis!</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/","title":"AP991P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP991P.ocl36.txt</code>, used in IBM System/36 environments to manage processes, typically for accounts payable tasks. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and list any tables used, based on the content provided.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>OCL is a scripting language used on IBM System/36 to control job execution, file handling, and program flow. The <code>AP991P</code> OCL program appears to be a control script that sets up and executes a specific process, likely related to accounts payable. Here\u2019s a step-by-step breakdown of the program\u2019s process:</p> <ol> <li>Header/Comment Section (<code>// SCPROCP ,,,,,,,,?9?</code>)</li> <li> <p>The <code>SCPROCP</code> line is likely a comment or identifier for the procedure, possibly indicating a specific accounts payable process. The <code>?9?</code> placeholder suggests a parameter or variable that may be substituted at runtime, potentially defining a specific job or configuration.</p> </li> <li> <p>Clear Local Variables (<code>// LOCAL BLANK-*ALL</code>)</p> </li> <li> <p>This command resets all local variables in the job environment to blank, ensuring no residual data from prior executions affects the current run. This is a common initialization step to maintain a clean state.</p> </li> <li> <p>Set System Date Compliance (<code>// GSY2K</code>)</p> </li> <li> <p>The <code>GSY2K</code> command likely enables Year 2000 compliance for date handling in the System/36 environment. This ensures that date-related operations in the program interpret years correctly (e.g., distinguishing between 19xx and 20xx).</p> </li> <li> <p>Load Program (<code>// LOAD AP991P</code>)</p> </li> <li> <p>This command loads the <code>AP991P</code> program into memory for execution. <code>AP991P</code> is likely an RPG (Report Program Generator) program, given the context of accounts payable and the OCL structure, which will perform the core processing logic.</p> </li> <li> <p>Specify File Access (<code>// FILE NAME-GSCONT,LABEL-?9?GSCONT,DISP-SHR</code>)</p> </li> <li>This line defines a file named <code>GSCONT</code> to be used by the program:<ul> <li><code>NAME-GSCONT</code>: Specifies the logical file name <code>GSCONT</code>.</li> <li><code>LABEL-?9?GSCONT</code>: Indicates the file\u2019s label, where <code>?9?</code> is likely a parameter or variable substituted at runtime (e.g., a specific library or prefix).</li> <li><code>DISP-SHR</code>: Sets the file disposition to shared, allowing multiple jobs to access the file concurrently without exclusive locking.</li> </ul> </li> <li> <p>The file <code>GSCONT</code> is likely a data file (e.g., a general ledger or control file) used by the <code>AP991P</code> program for accounts payable processing.</p> </li> <li> <p>Execute Program (<code>// RUN</code>)</p> </li> <li> <p>This command initiates the execution of the loaded <code>AP991P</code> program. The program will perform its defined logic, likely processing data from the <code>GSCONT</code> file or other inputs.</p> </li> <li> <p>Conditional Check and Termination (<code>// IF ?L'129,6'?/CANCEL GOTO Himmel GOTA END</code>)</p> </li> <li> <p>This line checks a condition based on a parameter or variable <code>?L'129,6'?</code>:</p> <ul> <li>The syntax suggests a comparison or status check, possibly related to a return code, error condition, or data value at position 129,6 (e.g., a 6-character field starting at position 129 in a record).</li> <li>If the condition evaluates to true (e.g., an error or specific status), the job is canceled, and control jumps to the <code>END</code> tag.</li> <li>The exact nature of <code>?L'129,6'?</code> is unclear without more context, but it could represent a specific error code or validation check.</li> </ul> </li> <li> <p>End Tag (<code>// TAG END</code>)</p> </li> <li> <p>Marks the <code>END</code> label, where the job flow is directed if the condition in the <code>IF</code> statement is met. This effectively terminates the job.</p> </li> <li> <p>Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>)</p> </li> <li>After reaching the <code>END</code> tag (whether normally or via cancellation), this command clears all local variables again, ensuring a clean exit from the job.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP991P: This is the primary program loaded and executed by the OCL script using the <code>// LOAD AP991P</code> and <code>// RUN</code> commands. It is likely an RPG program responsible for the core accounts payable processing logic.</li> <li>No other external programs are explicitly called in the provided OCL code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>GSCONT: The only explicitly mentioned file is <code>GSCONT</code>, defined in the <code>// FILE</code> statement. It is likely a data file or table (e.g., a control file, general ledger, or accounts payable master file) used by the <code>AP991P</code> program.</li> <li>No other tables or files are explicitly referenced in the provided code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#notes-and-assumptions","title":"Notes and Assumptions","text":"<ul> <li>Limited Context: The OCL code is brief and lacks detailed context about the <code>AP991P</code> program\u2019s internal logic or the specific role of <code>GSCONT</code>. The explanation assumes typical accounts payable processing based on the filename and System/36 conventions.</li> <li>Placeholders (<code>?9?</code>, <code>?L'129,6'?</code>): The placeholders suggest runtime parameters or variables. Without additional documentation, their exact values or purposes are speculative. <code>?9?</code> might represent a library or job-specific prefix, while <code>?L'129,6'?</code> could be a field or status check.</li> <li>System/36 Environment: The OCL syntax and commands like <code>GSY2K</code> and <code>DISP-SHR</code> are specific to the IBM System/36, indicating this is a legacy system used for business applications like accounts payable.</li> <li>No Additional Files or Tables: Only <code>GSCONT</code> is mentioned. If <code>AP991P</code> uses additional files or tables, they are not specified in the OCL script and would be defined within the RPG program or other configuration files.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment, ensures Y2K compliance, loads and runs the <code>AP991P</code> program with the <code>GSCONT</code> file, checks a condition to potentially cancel the job, and cleans up variables upon completion.</li> <li>External Programs: <code>AP991P</code> (RPG program).</li> <li>Tables Used: <code>GSCONT</code> (likely a control or data file).</li> </ul> <p>If you have additional details about the <code>AP991P</code> program, the <code>GSCONT</code> file structure, or the specific parameters (<code>?9?</code>, <code>?L'129,6'?</code>), I can provide a more detailed analysis.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/","title":"AP991P RPG","text":"<p>The provided document is an RPG (Report Program Generator) program, <code>AP991P.rpg36.txt</code>, designed for the IBM System/36 environment. This program is called by the OCL (Operation Control Language) script <code>AP991P.ocl36.txt</code> previously discussed. It appears to be part of an accounts payable (A/P) system, specifically handling override code retrieval and validation. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the RPG source code.</p>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The RPG program <code>AP991P</code> is structured to interact with a workstation (screen) and a disk file, performing data retrieval and updates related to an override code. Here\u2019s a step-by-step breakdown of the process steps, based on the RPG code:</p> <ol> <li>Program Initialization (Header and File Specifications)</li> <li>H-Spec (Line 0002): The header specification (<code>H    P064</code>) identifies the program as <code>AP991P</code> and likely includes compilation options (e.g., <code>P064</code> may indicate a specific program option or library).</li> <li>F-Specs (Lines 0004, 0008):<ul> <li><code>SCREEN</code>: Defined as a workstation file (<code>WORKSTN</code>), used for interactive input/output with a display device (e.g., a terminal screen). It has a record length of 500 bytes.</li> <li><code>GSCONT</code>: Defined as an update-capable (<code>UF</code>), full-procedural (<code>F</code>), disk file with 512-byte records, indexed (<code>2AI</code>) with 2 keys. This file is likely a control or master file for accounts payable data.</li> </ul> </li> <li> <p>Comment (Line 0003): Indicates the program\u2019s purpose: \"PROMPTS FOR A/P OVERRIDE CODE RETRIEVAL,\" suggesting it retrieves or validates an override code for accounts payable processing.</p> </li> <li> <p>Input Specifications (I-Specs)</p> </li> <li>SCREEN Input (Lines 0006\u20130009):<ul> <li>Defines input format <code>GL951PS1</code> for the <code>SCREEN</code> file, with a field <code>KYCODE</code> (positions 3\u20138, 6 characters) read from the screen.</li> <li><code>NS 01</code> and <code>NS 09</code> indicate different record types or conditions for screen input, with <code>CS</code> and <code>C1</code> possibly representing control or cursor fields.</li> </ul> </li> <li>GSCONT Input (Lines 0042\u20130044):<ul> <li>Defines a field <code>GXCODE</code> (positions 53\u201358, 6 characters) in the <code>GSCONT</code> file, described as the \"OVERRIDE CODE FOR POSTING.\"</li> </ul> </li> <li>UDS (User Data Structure, Lines 0011\u20130014):<ul> <li>Defines fields in a user data structure:</li> <li><code>KYJOBQ</code> (position 120, 1 character): Likely a job queue indicator.</li> <li><code>KYCOPY</code> (positions 121\u2013122, 2 characters): Possibly a copy or version number.</li> <li><code>KYCANC</code> (positions 129\u2013134, 6 characters): Likely a cancellation code.</li> <li><code>KYCODE</code> (positions 135\u2013140, 6 characters): The override code, matching the screen and file fields.</li> </ul> </li> <li> <p>These fields are likely used for job control or validation.</p> </li> <li> <p>Calculation Specifications (C-Specs)</p> </li> <li>Initialize Variables (Lines 0016\u20130019):<ul> <li><code>MOVEL*BLANKS MSG 40</code>: Clears a 40-character message field (<code>MSG</code>) to blanks.</li> <li><code>SETOF 8190</code>: Turns off indicators 81 and 90, which are likely used for screen or error handling.</li> </ul> </li> <li>Indicator Logic (Line 0024):<ul> <li>If indicator <code>09</code> is on (from screen input), set indicator <code>81</code> on (likely for screen display control).</li> <li>If indicator <code>09</code> is off (<code>N09</code>), set the Last Record (<code>LR</code>) indicator and jump to the <code>END</code> tag, terminating the program.</li> </ul> </li> <li>Time and Date Processing (Lines 0151\u20130208):<ul> <li><code>TIME TIMEOF 60</code>: Retrieves the current time into a 6-character field <code>TIMEOF</code>.</li> <li><code>TIME TIMDAT 120</code>: Retrieves the current date and time into a 12-character field <code>TIMDAT</code>.</li> <li><code>MOVELTIMDAT SYSTIM 60</code>: Moves the first 6 characters of <code>TIMDAT</code> to <code>SYSTIM</code> (system time).</li> <li><code>MOVE TIMDAT SYSDAT 60</code>: Moves <code>TIMDAT</code> to <code>SYSDAT</code> (system date).</li> <li><code>SYSDAT MULT 10000.01 SYSYMD 60</code>: Multiplies <code>SYSDAT</code> by 10000.01 to create a year-month-day format in <code>SYSYMD</code>.</li> <li><code>MOVEL20 SYSDT8 80</code>: Moves the literal <code>20</code> (likely for century, e.g., 20xx) to the first 2 characters of <code>SYSDT8</code> (8-character date field).</li> <li><code>MOVE SYSYMD SYSDT8</code>: Completes the date field <code>SYSDT8</code> with <code>SYSYMD</code>.</li> <li><code>SYSDAT ADD SYSTIM FLD1 80</code>: Adds <code>SYSDAT</code> and <code>SYSTIM</code> to create <code>FLD1</code> (8 characters), combining date and time.</li> <li><code>FLD1 MULT SYSYMD FLD2 110</code>: Multiplies <code>FLD1</code> by <code>SYSYMD</code> to create <code>FLD2</code> (11 characters), possibly for a unique key or hash.</li> <li><code>Z-ADDFLD2 KYCODE 60</code>: Zero-adds <code>FLD2</code> to <code>KYCODE</code>, creating a 6-character override code.</li> </ul> </li> <li>File Access (Line 0208):<ul> <li><code>'00' CHAINGSCONT 99</code>: Chains (searches) the <code>GSCONT</code> file using the key <code>'00'</code> (likely a default or control record key), setting indicator <code>99</code> if the record is not found.</li> <li><code>N99 EXCPT</code>: If the record is found (<code>N99</code>, indicator 99 off), execute an exception output (write/update) to <code>GSCONT</code>.</li> </ul> </li> <li>Cancellation Logic (Lines 0021\u20130022):<ul> <li>If indicator <code>KG</code> is on (undefined in the code but likely set externally or in prior logic), turn off indicators 01 and 09 and move <code>'CANCEL'</code> to <code>KYCANC</code>.</li> <li>This suggests a cancellation condition, possibly linked to the OCL\u2019s <code>?L'129,6'?</code> check (positions 129\u2013134 match <code>KYCANC</code>).</li> </ul> </li> <li> <p>End Processing (Line 0029):</p> <ul> <li>The <code>END</code> tag marks the program\u2019s termination point, reached via <code>GOTO</code> or normal flow.</li> </ul> </li> <li> <p>Output Specifications (O-Specs)</p> </li> <li>SCREEN Output (Lines 0057\u20130061):<ul> <li>Writes to the <code>SCREEN</code> file using format <code>AP991PFM</code>.</li> <li>Outputs <code>KYCODE</code> (6 characters) and <code>MSG</code> (40 characters, starting at position 7, ending at 46).</li> </ul> </li> <li>GSCONT Output (Lines 0057\u20130061):<ul> <li>Updates or writes to the <code>GSCONT</code> file, outputting <code>KYCODE</code> at positions 53\u201358 (matching <code>GXCODE</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#business-rules","title":"Business Rules","text":"<p>Based on the program\u2019s logic and context, the following business rules can be inferred:</p> <ol> <li>Override Code Generation:</li> <li>The program generates an override code (<code>KYCODE</code>) by combining system date (<code>SYSDAT</code>) and time (<code>SYSTIM</code>), performing arithmetic operations to create a unique code (<code>FLD2</code>), and storing it in <code>KYCODE</code>.</li> <li> <p>This code is likely used to authorize or validate accounts payable transactions, such as posting to a general ledger.</p> </li> <li> <p>Screen Interaction:</p> </li> <li>The program prompts the user via the <code>SCREEN</code> file (format <code>GL951PS1</code>) to input or validate an override code (<code>KYCODE</code>).</li> <li> <p>The message field (<code>MSG</code>) displays feedback or errors to the user.</p> </li> <li> <p>File Validation:</p> </li> <li>The program checks the <code>GSCONT</code> file using a key of <code>'00'</code> to retrieve or validate a control record.</li> <li>If the record is found, it updates <code>GSCONT</code> with the generated <code>KYCODE</code> (as <code>GXCODE</code>).</li> <li> <p>If the record is not found (indicator <code>99</code> on), no update occurs, potentially triggering an error or alternative flow.</p> </li> <li> <p>Cancellation Handling:</p> </li> <li>If a cancellation condition is detected (indicator <code>KG</code> or the OCL\u2019s <code>?L'129,6'?</code> matching <code>KYCANC</code>), the program sets <code>KYCANC</code> to <code>'CANCEL'</code> and may terminate early.</li> <li> <p>This aligns with the OCL\u2019s conditional check, suggesting the program supports job cancellation for invalid or unauthorized conditions.</p> </li> <li> <p>Date and Time Compliance:</p> </li> <li>The program ensures proper date handling (e.g., century prefix <code>20</code> for 20xx dates) to comply with Year 2000 standards, as reinforced by the OCL\u2019s <code>GSY2K</code> command.</li> </ol>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#tables-used","title":"Tables Used","text":"<ul> <li>GSCONT:</li> <li>A disk file used for update and retrieval, containing at least the <code>GXCODE</code> field (positions 53\u201358) for storing the override code.</li> <li>Likely a control or master file for accounts payable data, indexed with 2 keys.</li> <li>SCREEN:</li> <li>A workstation file used for interactive input/output, with format <code>GL951PS1</code> for reading <code>KYCODE</code> and format <code>AP991PFM</code> for outputting <code>KYCODE</code> and <code>MSG</code>.</li> <li>Not a traditional \"table\" but a logical file for user interaction.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPG program does not explicitly call other programs. It operates standalone, performing its logic using the <code>SCREEN</code> and <code>GSCONT</code> files.</li> <li>The program is called by the OCL script (<code>AP991P.ocl36.txt</code>), but it does not invoke additional external programs within its code.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#additional-notes","title":"Additional Notes","text":"<ul> <li>Indicator Usage: Indicators like <code>09</code>, <code>81</code>, <code>90</code>, <code>99</code>, and <code>KG</code> control program flow and screen/file operations. Their exact triggers (e.g., <code>KG</code>) are not fully defined in the code and may depend on external inputs or prior logic.</li> <li>OCL Integration: The OCL script\u2019s <code>?L'129,6'?</code> likely checks the <code>KYCANC</code> field (positions 129\u2013134) for <code>'CANCEL'</code>, linking the RPG program\u2019s cancellation logic to the OCL\u2019s job termination.</li> <li>Parameter <code>?9?</code>: The OCL\u2019s <code>?9?</code> placeholder (e.g., in <code>LABEL-?9?GSCONT</code>) may correspond to a library or prefix for <code>GSCONT</code>, but it\u2019s not referenced in the RPG code directly.</li> <li>Legacy Context: The program\u2019s structure (RPG II/III, System/36) indicates a legacy environment, typical for accounts payable systems in the 1980s\u20131990s. The override code logic suggests a security or control mechanism for financial transactions.</li> </ul>"},{"location":"accounts-payable/03%20Payment%20Cycle/AP991P%20OCL%20Overide%20Authorization/AP991P%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initialize variables, generate an override code using date and time, interact with the user via <code>SCREEN</code>, validate/update the <code>GSCONT</code> file, handle cancellation, and output results.</li> <li>Business Rules: Generate and validate override codes, support user interaction, update control files, handle cancellations, and ensure Y2K-compliant date processing.</li> <li>Tables Used: <code>GSCONT</code> (disk file), <code>SCREEN</code> (workstation file).</li> <li>External Programs Called: None.</li> </ul> <p>If you have additional details (e.g., the <code>GL951PS1</code> or <code>AP991PFM</code> screen formats, <code>GSCONT</code> file structure, or external conditions setting <code>KG</code>), I can refine the analysis further.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/","title":"AP190 OCL Summary","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#list-of-use-cases-implemented-by-the-ap190ap195-program-suite","title":"List of Use Cases Implemented by the AP190/AP195 Program Suite","text":"<p>The <code>AP190.ocl36</code>, <code>AP190.rpg36</code>, and <code>AP195.rpg36</code> programs collectively implement a single primary use case for Accounts Payable (A/P) check reconciliation:</p> <ol> <li>A/P Cancelled Check Reconciliation and Reporting:</li> <li>Description: This use case allows users to enter, validate, and store cancelled check reconciliation data (company number, bank G/L number, check number, clear date, and clear amount) and generate a printed report summarizing the reconciled checks, grouped by company and bank G/L account with totals.</li> <li>Components:<ul> <li><code>AP190.ocl36</code>: Orchestrates file setup and program execution (calls <code>AP190</code> and <code>AP195</code>).</li> <li><code>AP190.rpg36</code>: Handles interactive data entry and validation through two screens (<code>AP190S1</code> for company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), updating the reconciliation transaction file (<code>APCRTR</code>).</li> <li><code>AP195.rpg36</code>: Generates a report listing cancelled checks with totals by bank G/L and company.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#function-requirement-document-for-ap-cancelled-check-reconciliation","title":"Function Requirement Document for A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#function-requirement-document-ap-cancelled-check-reconciliation","title":"Function Requirement Document: A/P Cancelled Check Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#overview","title":"Overview","text":"<p>The A/P Cancelled Check Reconciliation function processes and validates cancelled check data, storing reconciliation records and generating a summary report grouped by company and bank G/L account.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>, 2 bytes): Identifies the company.</li> <li>Bank G/L Number (<code>BKGL</code>, 8 bytes): Specifies the bank general ledger account.</li> <li>Check Number (<code>CHK#</code>, 6 bytes): Unique identifier for the check.</li> <li>Clear Date (<code>CLDT</code>, 6 digits, MMDDYY): Date the check cleared.</li> <li>Clear Amount (<code>CLAM</code>, 11.2 numeric): Amount cleared for the check.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#outputs","title":"Outputs","text":"<ul> <li>Reconciliation Records: Stored in <code>APCRTR</code> file with company, bank G/L, check number, clear date, and clear amount.</li> <li>Printed Report: Lists cancelled checks with check number, clear date, clear amount, and totals by bank G/L and company, including company name, date, time, and page number.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code> and is not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>Verify <code>CONO</code> + <code>BKGL</code> exists in <code>GLMAST</code> and is not deleted (<code>GLDEL \u2260 'D'</code>).</li> <li>Verify <code>CHK#</code> exists in <code>APCHKR</code>, is open (<code>AMCODE = 'O'</code>), and not deleted (<code>D</code>), reconciled (<code>R</code>), or voided (<code>V</code>).</li> <li>Validate <code>CLDT</code> as a valid date (MMDDYY, month 1\u201312, day 1\u201331 based on month/leap year).</li> <li> <p>Ensure <code>CLAM</code> matches the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>.</p> </li> <li> <p>Store Reconciliation Data:</p> </li> <li>Write or update <code>APCRTR</code> with <code>CONO</code>, <code>BKGL</code>, <code>CHK#</code>, <code>CLDT</code>, and <code>CLAM</code>.</li> <li> <p>Support deletion of existing <code>APCRTR</code> records.</p> </li> <li> <p>Generate Report:</p> </li> <li>Read <code>APCRTR</code> records, group by <code>CONO</code> and <code>BKGL</code>.</li> <li>Retrieve company name (<code>ACNAME</code>) from <code>APCONT</code>.</li> <li>Print headers (company name, bank G/L, date, time, page).</li> <li>List check details (<code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>).</li> <li>Calculate and print totals:<ul> <li>Bank G/L total (<code>L1CLAM</code>): Sum of <code>CLAM</code> for each bank G/L.</li> <li>Company total (<code>L2CLAM</code>): Sum of <code>L1CLAM</code> for each company.</li> </ul> </li> <li>Output after 21 detail lines or at group breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Invalid <code>CONO</code>, <code>BKGL</code>, or <code>CHK#</code> prevents processing.</li> <li><code>CLDT</code> must be a valid date, accounting for leap years (February 28/29, others 30/31 days).</li> <li><code>CLAM</code> must equal <code>AMCKAM</code> from <code>APCHKR</code>.</li> <li>Data Integrity:</li> <li>Only open checks (<code>AMCODE = 'O'</code>) are processed.</li> <li>Deleted records in <code>APCONT</code> or <code>GLMAST</code> are invalid.</li> <li>Reporting:</li> <li>Group by company and bank G/L, with subtotals and company totals.</li> <li>Include company name if available; otherwise, proceed without it.</li> <li>Format dates (MMDDYY) and amounts (11.2 decimal) for readability.</li> <li>Record Management:</li> <li>Allow updates or deletions in <code>APCRTR</code>.</li> <li>Ensure unique keys (<code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>) in <code>APCRTR</code>.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#calculations","title":"Calculations","text":"<ul> <li>Date Validation:</li> <li>Extract month, day, year from <code>CLDT</code> (MMDDYY).</li> <li>Validate month (1\u201312).</li> <li>Validate day: February (28 or 29 for leap years), April/June/September/November (30), others (31).</li> <li>Leap year: If year divisible by 4 (or by 400 for century years), allow 29 days for February; else, 28.</li> <li>Construct 8-digit date (<code>CLDT8</code>, YYYYMMDD) using century (<code>Y2KCEN</code>) for Y2K compliance.</li> <li>Totals:</li> <li><code>L1CLAM</code> = Sum of <code>CLAM</code> for each bank G/L group.</li> <li><code>L2CLAM</code> = Sum of <code>L1CLAM</code> for each company.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL%20Summary/#data-sources","title":"Data Sources","text":"<ul> <li>APCRTR: Stores reconciliation data (key: <code>CONO</code> + <code>BKGL</code> + <code>CHK#</code>).</li> <li>APCONT: Provides company name (<code>ACNAME</code>) and deletion flag (<code>ACDEL</code>).</li> <li>GLMAST: Validates bank G/L (<code>GLDEL</code>, <code>GLDESC</code>).</li> <li>APCHKR: Provides check details (<code>AMCODE</code>, <code>AMVEN#</code>, <code>AMCKAM</code>, <code>AMCKDT</code>, <code>AMVNNM</code>).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/","title":"AP190 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP190.ocl36.txt</code>, used for Accounts Payable (A/P) check reconciliation in an IBM System/3x or AS/400 environment. Below, I\u2019ll break down the process steps, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#process-steps-of-the-ap190-ocl-program","title":"Process Steps of the AP190 OCL Program","text":"<p>OCL is a scripting language used to control job execution, file operations, and program invocation on IBM midrange systems. The program <code>AP190</code> handles A/P check reconciliation, performing file setup, validation, and editing. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Initial File Setup (BLDFILE):</li> <li> <p><code>// IFF DATAF1-?9?APCR?WS? BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code></p> <ul> <li>This command checks if the file <code>?9?APCR?WS?</code> (a work file for A/P check reconciliation) exists. If not, it creates it using the <code>BLDFILE</code> operation.</li> <li>Parameters:</li> <li><code>I</code>: Input mode.</li> <li><code>RECORDS,500</code>: Allocates space for 500 records.</li> <li><code>80</code>: Record length of 80 bytes.</li> <li><code>2,16</code>: Likely specifies key field attributes (e.g., key starts at position 2, length 16).</li> <li><code>DFILE,,50</code>: Indicates a disk file with a block size or extent of 50.</li> <li>Purpose: Ensures the work file <code>?9?APCR?WS?</code> is available for processing.</li> </ul> </li> <li> <p>Load and Execute AP190 Program:</p> </li> <li><code>// LOAD AP190</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?,EXTEND-100</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li><code>// FILE NAME-GLMAST,LABEL-?9?GLMAST,DISP-SHR</code></li> <li><code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP190: Loads the <code>AP190</code> program (likely an RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): The work file for check reconciliation transactions, with an extension of 100 records.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): A control file, opened in shared mode (<code>DISP-SHR</code>).</li> <li><code>GLMAST</code> (mapped to <code>?9?GLMAST</code>): General Ledger master file, opened in shared mode.</li> <li><code>APCHKR</code> (mapped to <code>?9?APCHKR</code>): A/P check reconciliation file, opened in shared mode.</li> <li>RUN: Executes the <code>AP190</code> program, which processes the check reconciliation data using these files.</li> <li>Purpose: The <code>AP190</code> program likely validates or processes check reconciliation data, updating or reading from the specified files.</li> </ul> </li> <li> <p>Conditional Check for File Existence:</p> </li> <li> <p><code>// IF ?F'A,?9?APCR?WS?'?/00000000 GOTO END</code></p> <ul> <li>This checks if the work file <code>?9?APCR?WS?</code> is empty or has no records (condition <code>?F'A</code> checks file attributes, and <code>/00000000</code> likely indicates zero records).</li> <li>If true, the program jumps to the <code>END</code> tag, skipping further processing.</li> <li>Purpose: Prevents unnecessary execution if there\u2019s no data to process.</li> </ul> </li> <li> <p>Display Message:</p> </li> <li> <p><code>// * 'A/P CHECK RECONCILIATION EDIT EXECUTING'</code></p> <ul> <li>Outputs a message to the console or log indicating that the A/P check reconciliation edit process is running.</li> <li>Purpose: Provides feedback to the operator about the program\u2019s status.</li> </ul> </li> <li> <p>Load and Execute AP195 Program:</p> </li> <li><code>// LOAD AP195</code></li> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code></li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code></li> <li> <p><code>// RUN</code></p> <ul> <li>LOAD AP195: Loads the <code>AP195</code> program (another RPG program) into memory.</li> <li>FILE Definitions:</li> <li><code>APCRTR</code> (mapped to <code>?9?APCR?WS?</code>): Reuses the work file from the previous step.</li> <li><code>APCONT</code> (mapped to <code>?9?APCONT</code>): Reuses the control file in shared mode.</li> <li>RUN: Executes the <code>AP195</code> program.</li> <li>Purpose: The <code>AP195</code> program likely performs additional processing or validation on the check reconciliation data, such as generating reports or finalizing edits.</li> </ul> </li> <li> <p>End of Program:</p> </li> <li><code>// TAG END</code><ul> <li>Marks the end of the program execution.</li> <li>Purpose: Terminates the OCL script.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. AP190: The main program for A/P check reconciliation, likely responsible for initial data processing or validation. 2. AP195: A secondary program, possibly for further editing, reporting, or finalizing the reconciliation process.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables): 1. APCRTR (labeled <code>?9?APCR?WS?</code>):    - A work file used for check reconciliation transactions.    - Created or extended as needed. 2. APCONT (labeled <code>?9?APCONT</code>):    - A control file, likely containing configuration or reference data for A/P processing.    - Opened in shared mode (<code>DISP-SHR</code>). 3. GLMAST (labeled <code>?9?GLMAST</code>):    - General Ledger master file, containing financial account data.    - Opened in shared mode (<code>DISP-SHR</code>). 4. APCHKR (labeled <code>?9?APCHKR</code>):    - A/P check reconciliation file, likely storing check details or reconciliation status.    - Opened in shared mode (<code>DISP-SHR</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20OCL/#summary","title":"Summary","text":"<p>The <code>AP190</code> OCL program orchestrates an A/P check reconciliation process by: 1. Creating or verifying the work file <code>APCRTR</code>. 2. Running the <code>AP190</code> program to process reconciliation data using <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>. 3. Skipping further execution if no data is present in <code>APCRTR</code>. 4. Running the <code>AP195</code> program for additional processing or reporting using <code>APCRTR</code> and <code>APCONT</code>. 5. Displaying status messages for operator feedback.</p> <p>External Programs: <code>AP190</code>, <code>AP195</code>. Files Used: <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/","title":"AP190 RPG","text":"<p>The provided RPG program, <code>AP190.rpg36</code>, is an RPG II or RPG/400 program designed for Accounts Payable (A/P) cancelled check entry and reconciliation, executed from the <code>AP190.ocl36</code> OCL program. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#process-steps-of-the-ap190-rpg-program","title":"Process Steps of the AP190 RPG Program","text":"<p>The program facilitates data entry and validation for cancelled checks through two display formats (<code>AP190S1</code> and <code>AP190S2</code>) on a workstation screen, performing checks against various files and updating the A/P check reconciliation work file (<code>APCRTR</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications:<ul> <li>Defines the program (<code>AP190</code>) and files: <code>SCREEN</code> (workstation display), <code>APCRTR</code> (update file), <code>APCONT</code> (control file), <code>GLMAST</code> (general ledger master), and <code>APCHKR</code> (check reconciliation file).</li> <li><code>SCREEN</code> uses <code>KINFSR ROLLKY</code> for handling roll keys (page up/down) and <code>KINFDS INFDS</code> for status information.</li> </ul> </li> <li>Indicator Setup:<ul> <li>Lines 0072\u20130074: Initializes indicators (30\u201334, 81\u201382, 90\u201391) to off, ensuring a clean state.</li> <li>Line 0075: Clears the message field (<code>MSG60</code>) to blanks.</li> </ul> </li> <li> <p>Purpose: Prepares the program environment for processing user input and file operations.</p> </li> <li> <p>Handle Roll Keys:</p> </li> <li>Subroutine ROLLKY (Lines 0357\u20130363):<ul> <li>Checks workstation status codes (<code>STATUS</code>) to detect roll forward (up, code 01122, sets indicator 18) or roll backward (down, code 01123, sets indicator 19).</li> </ul> </li> <li>Subroutine ROLLFW (Roll Forward) (Lines 0365\u20130380):<ul> <li>Reads the next record from <code>APCRTR</code> using <code>SCKEY</code> (search key, company + bank G/L + check number).</li> <li>If a record is found (<code>N60</code>), moves the key (<code>ATKEY</code>) to <code>SCKEY</code>, calls <code>S1</code> to display, and sets indicators.</li> <li>If end-of-file (<code>60</code>), displays message \u201cEND OF FILE HAS BEEN REACHED\u201d and clears fields.</li> </ul> </li> <li>Subroutine ROLLBW (Roll Backward) (Lines 0382\u20130394):<ul> <li>Reads the previous record from <code>APCRTR</code> using <code>SCKEY</code>.</li> <li>Similar logic to <code>ROLLFW</code>, but displays \u201cBEGIN OF FILE HAS BEEN REACHED\u201d if no prior record exists.</li> </ul> </li> <li> <p>Purpose: Allows users to navigate through <code>APCRTR</code> records using roll keys.</p> </li> <li> <p>Process Function Keys:</p> </li> <li>KA (Rekey, No Add/Update) (Lines 0080\u20130085):<ul> <li>Calls <code>CLEAR</code> subroutine to reset fields, sets indicators (32, 81 on; 01, 02, 09 off), and jumps to <code>END</code>.</li> </ul> </li> <li>KD (Delete Record) (Lines 0087\u20130092):<ul> <li>Calls <code>DELETE</code> subroutine to remove a record from <code>APCRTR</code>, sets indicators, and jumps to <code>END</code>.</li> </ul> </li> <li>KG (End of Job) (Lines 0094\u20130099):<ul> <li>Sets the Last Record (<code>LR</code>) indicator to terminate the program, clears indicators, and jumps to <code>END</code>.</li> </ul> </li> <li> <p>Purpose: Handles user commands for rekeying, deleting, or ending the job.</p> </li> <li> <p>Screen 1 Processing (AP190S1, Subroutine S1) (Lines 0114\u20130184):</p> </li> <li>Input Validation:<ul> <li>Reads user input: company number (<code>CONO</code>), bank G/L number (<code>BKGL</code>), and check number (<code>CHK#</code>).</li> <li>Company Validation (Lines 0116\u20130123):</li> <li>Chains to <code>APCONT</code> using <code>CONO</code>. If not found (<code>30</code>) or deleted (<code>ACDEL = 'D'</code>), sets error indicators (81, 90), displays \u201cINVALID COMPANY #\u201d, and exits.</li> <li>Moves company name (<code>ACNAME</code>) to <code>CONONM</code> for display.</li> <li>Bank G/L Validation (Lines 0125\u20130135):</li> <li>Constructs <code>GLKEY</code> from <code>CONO</code> and <code>BKGL</code>, chains to <code>GLMAST</code>. If not found (<code>31</code>) or deleted (<code>GLDEL = 'D'</code>), sets error indicators, displays \u201cINVALID BANK G/L #\u201d, and exits.</li> <li>Moves G/L description (<code>GLDESC</code>) to <code>BKGLNM</code>.</li> <li>Check Validation (Lines 0137\u20130172):</li> <li>Chains to <code>APCHKR</code> using <code>SCKEY</code> (company + bank G/L + check #). If not found (<code>32</code>), sets error indicators, displays \u201cCHECK # NOT FOUND\u201d or other status messages based on <code>AMCODE</code>:<ul> <li><code>D</code>: \u201cCHECK WAS PREVIOUSLY DELETED\u201d.</li> <li><code>R</code>: \u201cCHECK IS ALREADY RECONCILED\u201d.</li> <li><code>V</code>: \u201cCHECK WAS PREVIOUSLY VOIDED\u201d.</li> <li><code>O</code>: Valid open check; moves vendor number (<code>AMVEN#</code>), check amount (<code>AMCKAM</code>), check date (<code>AMCKDT</code>), and vendor name (<code>AMVNNM</code>) to variables.</li> </ul> </li> <li>Chains to <code>APCRTR</code> to check for existing reconciliation record (<code>SCKEY</code>). If found (<code>N92</code>), retrieves clear date (<code>ATCLDT</code>) and amount (<code>ATCLAM</code>); if not, sets indicator 34 for new record.</li> </ul> </li> <li>Display:<ul> <li>Sets indicator 82 to display <code>AP190S2</code> (next screen) if no errors (81 off).</li> <li>Outputs <code>AP190S1</code> with company, bank G/L, check number, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates user-entered company, bank G/L, and check number, retrieving associated data for display.</p> </li> <li> <p>Screen 2 Processing (AP190S2, Subroutine S2) (Lines 0186\u20130217):</p> </li> <li>Input Validation:<ul> <li>Reads clear date (<code>CLDT</code>, <code>CLYY</code>) and clear amount (<code>CLAM</code>) from the user.</li> <li>Date Validation (Lines 0188\u20130205):</li> <li>Tests <code>DPCLDT</code> (clear date) for valid numeric format using <code>TESTB</code>. If invalid (<code>99</code>), restores saved date (<code>SVCLDT</code>) and proceeds.</li> <li>Calls subroutine <code>DTEDIT</code> to validate <code>CLDT</code> (MMDDYY format):<ul> <li>Breaks down date into month (<code>$MONTH</code>), day (<code>$DAY</code>), and year (<code>$YR</code>).</li> <li>Validates month (1\u201312) and day based on month and leap year rules (e.g., February 28/29, other months 30/31).</li> <li>Handles Y2K compliance by determining century (<code>Y2KCEN</code>) and constructing an 8-digit date (<code>CLDT8</code>).</li> <li>Sets indicator 79 if the date is invalid, displaying \u201cCLEAR DATE IS INVALID\u201d.</li> </ul> </li> <li>Amount Validation (Lines 0207\u20130210):</li> <li>Compares clear amount (<code>CLAM</code>) to check amount (<code>AMCKAM</code>). If mismatched (<code>34</code>), sets error indicators (82, 90), displays \u201cCLEAR AMOUNT DOES NOT MATCH\u201d, and exits.</li> </ul> </li> <li>Record Update:<ul> <li>If no errors, writes or updates <code>APCRTR</code> with <code>OUTREC</code> (clear amount, date, and key).</li> <li>Calls <code>CLEAR</code> to reset fields and sets indicator 32 for the next entry.</li> </ul> </li> <li>Display:<ul> <li>Outputs <code>AP190S2</code> with company, bank G/L, check number, vendor details, check date/amount, clear date/amount, and error message (if any).</li> </ul> </li> <li> <p>Purpose: Validates and stores the clear date and amount, updating the reconciliation file.</p> </li> <li> <p>Clear Subroutine (Lines 0334\u20130347):</p> </li> <li>Resets fields: <code>CHK#</code>, <code>CLDT</code>, <code>CLAM</code>, <code>VEN#</code>, <code>CKAM</code>, <code>CKDT</code>, <code>VEN#NM</code>, and <code>CLDT8</code> to zeros or blanks.</li> <li>Saves <code>CLDT</code> to <code>SVCLDT</code> for recovery.</li> <li> <p>Purpose: Clears variables for the next entry.</p> </li> <li> <p>Delete Subroutine (Lines 0349\u20130355):</p> </li> <li>Chains to <code>APCRTR</code> using <code>SCKEY</code>. If found (<code>N92</code>), writes a delete record (<code>DELREC</code>).</li> <li>Calls <code>CLEAR</code> to reset fields.</li> <li> <p>Purpose: Deletes a reconciliation record from <code>APCRTR</code>.</p> </li> <li> <p>Program Termination (Line 0110):</p> </li> <li>Jumps to <code>END</code> tag after processing, resetting roll key indicators (18, 19).</li> <li>Purpose: Completes the program cycle.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/P check reconciliation: 1. Company Validation:    - The company number (<code>CONO</code>) must exist in <code>APCONT</code> and not be marked as deleted (<code>ACDEL \u2260 'D'</code>). 2. Bank G/L Validation:    - The bank G/L number (<code>BKGL</code>) combined with <code>CONO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>). 3. Check Validation:    - The check number (<code>CHK#</code>) must exist in <code>APCHKR</code> and have a valid status (<code>AMCODE = 'O'</code> for open checks).    - Checks with <code>AMCODE</code> of <code>D</code> (deleted), <code>R</code> (reconciled), or <code>V</code> (voided) are invalid for processing. 4. Clear Date Validation:    - The clear date (<code>CLDT</code>) must be a valid date in MMDDYY format, with proper month (1\u201312) and day (28\u201331, accounting for leap years).    - Handles Y2K compliance by determining the century based on <code>Y2KCMP</code> and <code>Y2KCEN</code>. 5. Clear Amount Validation:    - The clear amount (<code>CLAM</code>) must match the check amount (<code>AMCKAM</code>) from <code>APCHKR</code>. 6. Record Management:    - Existing <code>APCRTR</code> records can be updated or deleted; new records are added if none exist.    - Duplicate key processing is supported by redefining <code>CLDT</code> as alphanumeric (<code>DPCLDT</code>) for validation. 7. User Interface:    - Errors are displayed on the screen with specific messages (e.g., \u201cINVALID COMPANY #\u201d, \u201cCLEAR DATE IS INVALID\u201d).    - Roll keys allow navigation through existing reconciliation records.    - Function keys (<code>KA</code>, <code>KD</code>, <code>KG</code>) control rekeying, deletion, or program termination.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN:    - Workstation file for display formats <code>AP190S1</code> (input company, bank G/L, check number) and <code>AP190S2</code> (input clear date, amount, and display vendor/check details).    - Record length: 500 bytes. 2. APCRTR:    - Update file (UF) for check reconciliation transactions.    - Keyed by <code>ATKEY</code> (16 bytes, company + bank G/L + check number).    - Fields: <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 3. APCONT:    - Input file (IC) for company control data.    - Keyed by company number (2 bytes).    - Fields: <code>ACDEL</code> (delete flag), <code>ACNAME</code> (company name).    - Record length: 256 bytes. 4. GLMAST:    - Input file (IC) for general ledger master data.    - Keyed by <code>GLKEY</code> (11 bytes, company + bank G/L).    - Fields: <code>GLDEL</code> (delete flag), <code>GLDESC</code> (description).    - Record length: 256 bytes. 5. APCHKR:    - Input file (IC) for check reconciliation data.    - Keyed by check number (16 bytes).    - Fields: <code>AMCODE</code> (status: D, O, R, V), <code>AMVEN#</code> (vendor number), <code>AMCKAM</code> (check amount), <code>AMCKDT</code> (check date), <code>AMVNNM</code> (vendor name).    - Record length: 128 bytes.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call any external programs. All processing is handled within <code>AP190</code> through its subroutines (<code>S1</code>, <code>S2</code>, <code>DTEDIT</code>, <code>CLEAR</code>, <code>DELETE</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP190%20RPG/#summary","title":"Summary","text":"<p>The <code>AP190</code> RPG program is a data entry and validation tool for A/P check reconciliation: - Process: Displays two screens (<code>AP190S1</code> for inputting company, bank G/L, and check number; <code>AP190S2</code> for clear date and amount), validates inputs against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and updates <code>APCRTR</code>. Supports navigation (roll keys), deletion, and rekeying. - Business Rules: Ensures valid company, bank G/L, and check data; enforces date and amount accuracy; manages record updates/deletions; and provides error feedback. - Files Used: <code>SCREEN</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>. - External Programs: None.</p> <p>This program integrates with the <code>AP190.ocl36</code> OCL script, which sets up files and calls <code>AP190</code> and <code>AP195</code> for a complete reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/","title":"AP195 RPG","text":"<p>The provided RPG program, <code>AP195.rpg36</code>, is an RPG II or RPG/400 program called from the <code>AP190.ocl36</code> OCL program as part of the Accounts Payable (A/P) check reconciliation process. It generates a report listing cancelled checks, including totals by bank G/L account and company. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#process-steps-of-the-ap195-rpg-program","title":"Process Steps of the AP195 RPG Program","text":"<p>The program reads the A/P check reconciliation transaction file (<code>APCRTR</code>), retrieves company information from the control file (<code>APCONT</code>), and produces a printed report on the <code>LIST</code> file with details of cancelled checks, subtotals by bank G/L account, and company totals. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header (H) and File (F) Specifications (Lines 0002\u20130011):<ul> <li>Defines the program (<code>AP195</code>) and files:</li> <li><code>APCRTR</code>: Input primary file (IP) for check reconciliation transactions.</li> <li><code>APCONT</code>: Input control file (IC) for company data.</li> <li><code>LIST</code>: Output file (O) for the printer, producing the report.</li> <li><code>APCRTR</code> is keyed by a 16-byte field (company + bank G/L + check number).</li> <li><code>APCONT</code> is keyed by a 2-byte company number.</li> </ul> </li> <li>Data Structures (Lines 0014\u20130022):<ul> <li>Defines input fields for <code>APCRTR</code>: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).</li> <li>Defines <code>ACNAME</code> (company name) from <code>APCONT</code>.</li> </ul> </li> <li> <p>Purpose: Sets up the environment for reading transaction data and generating the report.</p> </li> <li> <p>Report Initialization (Lines 0025\u20130032):</p> </li> <li>Level 2 (L2) Processing (Company-level):<ul> <li>Executes at the start of a new company (<code>L2</code> indicator).</li> <li>Retrieves the current time and date (<code>TIME</code> to <code>TIMDAT</code>, split into <code>SYSTIM</code> and <code>SYSDAT</code>).</li> <li>Initializes the separator line (<code>SEP</code>) to <code>'* '</code>.</li> <li>Resets the page number (<code>PAGE</code>) to zero.</li> <li>Chains to <code>APCONT</code> using <code>ATCONO</code> (company #). If not found (<code>92</code>), <code>ACNAME</code> is not updated.</li> <li>Resets the company total clear amount (<code>L2CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Prepares headers and totals for each company in the report.</p> </li> <li> <p>Bank G/L Level Processing (Lines 0038\u20130040):</p> </li> <li>Level 1 (L1) Processing (Bank G/L-level):<ul> <li>Executes at the start of a new bank G/L number (<code>L1</code> indicator).</li> <li>Resets the bank G/L total clear amount (<code>L1CLAM</code>) to zero.</li> </ul> </li> <li> <p>Purpose: Initializes subtotals for each bank G/L account within a company.</p> </li> <li> <p>Detail Processing and Accumulation (Lines 0042\u20130044):</p> </li> <li>For each <code>APCRTR</code> record:<ul> <li>Adds the clear amount (<code>ATCLAM</code>) to the bank G/L total (<code>L1CLAM</code>).</li> <li>At the <code>L1</code> break (change in bank G/L), adds <code>L1CLAM</code> to the company total (<code>L2CLAM</code>).</li> </ul> </li> <li> <p>Purpose: Accumulates totals for reporting at both bank G/L and company levels.</p> </li> <li> <p>Report Output (Lines 0047\u20130082):</p> </li> <li>Header Output (Lines 0047\u20130072):<ul> <li>At <code>L1</code> break or overflow (<code>OFNL1</code>):</li> <li>Outputs company name (<code>ACNAME</code>) if found (<code>N92</code>).</li> <li>Prints page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), and time (<code>SYSTIM</code>).</li> <li>Prints report title (\u201cA/P CANCELLED CHECKS EDIT\u201d) and bank G/L number (<code>ATBKGL</code>).</li> <li>Outputs column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Prints separator lines (<code>SEP</code>).</li> </ul> </li> <li>Detail Lines (Lines 0073\u20130076):<ul> <li>For each <code>APCRTR</code> record (<code>01</code> indicator):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> </ul> </li> <li>Total Lines (Lines 0077\u20130082):<ul> <li>At <code>L1</code> break (after 21 lines, <code>T 21 L1</code>): Prints bank G/L total (<code>L1CLAM</code>) with label \u201cBANK G/L # TOTAL\u201d.</li> <li>At <code>L2</code> break (after 21 lines, <code>T 21 L2</code>): Prints company total (<code>L2CLAM</code>) with label \u201cCOMPANY TOTAL\u201d.</li> </ul> </li> <li>Purpose: Generates a formatted report with check details and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for the A/P cancelled checks edit report: 1. Data Source:    - Reads all records from <code>APCRTR</code> sequentially, grouped by company (<code>ATCONOL2</code>) and bank G/L number (<code>ATBKGLL1</code>). 2. Company Validation:    - Attempts to retrieve company name (<code>ACNAME</code>) from <code>APCONT</code> using <code>ATCONO</code>. If not found, the report omits the company name but continues processing. 3. Report Structure:    - Organizes the report by company (<code>L2</code>) and bank G/L number (<code>L1</code>), with subtotals for each bank G/L and company.    - Includes headers with company name, bank G/L number, date, time, and page number.    - Lists check number, clear date, and clear amount for each transaction.    - Prints totals after 21 detail lines or at level breaks (<code>L1</code>, <code>L2</code>). 4. Formatting:    - Uses a separator line (<code>SEP = '* '</code>) to visually distinguish sections.    - Formats dates (<code>ATCLDT</code>, <code>SYSDAT</code>) and amounts (<code>ATCLAM</code>, <code>L1CLAM</code>, <code>L2CLAM</code>) for readability (e.g., <code>Z</code> for zero suppression, <code>M</code> for monetary format, <code>Y</code> for date format). 5. Accumulation:    - Accumulates clear amounts (<code>ATCLAM</code>) into bank G/L totals (<code>L1CLAM</code>) and company totals (<code>L2CLAM</code>) for accurate reporting.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. APCRTR:    - Input primary file (IP) for check reconciliation transactions.    - Keyed by a 16-byte field (company + bank G/L + check number).    - Fields: <code>ATCONOL2</code> (company #), <code>ATBKGLL1</code> (bank G/L #), <code>ATCHK#</code> (check number), <code>ATCLAM</code> (clear amount), <code>ATCLDT</code> (clear date).    - Record length: 80 bytes. 2. APCONT:    - Input control file (IC) for company data.    - Keyed by company number (2 bytes).    - Field: <code>ACNAME</code> (company name).    - Record length: 256 bytes. 3. LIST:    - Output file (O) for the printed report.    - Record length: 132 bytes (standard printer width).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The program does not call any external programs. All processing is handled within <code>AP195</code> using its RPG logic.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP190%20Clear%20Checks%20Entry/AP195%20RPG/#summary","title":"Summary","text":"<p>The <code>AP195</code> RPG program generates a report for A/P cancelled checks: - Process: Reads <code>APCRTR</code> for check reconciliation data, retrieves company names from <code>APCONT</code>, accumulates totals by bank G/L and company, and outputs a formatted report to <code>LIST</code> with headers, detail lines, and totals. - Business Rules: Groups data by company and bank G/L, validates company numbers, formats output for readability, and provides totals after 21 lines or level breaks. - Files Used: <code>APCRTR</code> (input), <code>APCONT</code> (input), <code>LIST</code> (output). - External Programs: None.</p> <p>This program complements the <code>AP190</code> program (data entry and validation) by producing a final edit report, as orchestrated by the <code>AP190.ocl36</code> OCL script.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/","title":"AP192 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program used on IBM System/36 or AS/400 systems to manage Accounts Payable (A/P) check reconciliation uploads and edits from PNC. Below, I\u2019ll explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script outlines a sequence of operations for processing A/P check reconciliation data. Here\u2019s a step-by-step breakdown of the program\u2019s logic:</p> <ol> <li>Initial Setup and Conditional File Deletion:</li> <li>The program checks if a file named <code>?9?APCR?WS?</code> exists in <code>DATAF1</code>.</li> <li>If the file exists (<code>IFF DATAF1-?9?APCR?WS?</code>), it is deleted (<code>DELETE ?9?APCR?WS?,F1</code>).</li> <li> <p>This ensures that any previous version of the working file is removed before proceeding, preventing data conflicts.</p> </li> <li> <p>Conditional File Creation:</p> </li> <li>If the file <code>?9?APCR?WS?</code> does not exist in <code>DATAF1</code> or after deletion, the program creates a new file (<code>BLDFILE ?9?APCR?WS?,I,RECORDS,500,80,,,2,16,DFILE,,50</code>).</li> <li> <p>The <code>BLDFILE</code> command specifies:</p> <ul> <li>File name: <code>?9?APCR?WS?</code></li> <li>Type: Indexed file (<code>I</code>)</li> <li>Initial record count: 500 records</li> <li>Record length: 80 bytes</li> <li>Other parameters: Likely related to file attributes like key length (2 bytes) and key position (16th byte).</li> <li>File is created in <code>DFILE</code> with a block size of 50.</li> </ul> </li> <li> <p>Conditional Branching:</p> </li> <li>The program checks if the file <code>?9?APCR?WS?</code> has a specific condition (<code>?F'A,?9?APCR?WS?'?/00000000</code>).</li> <li> <p>If the condition is met (likely checking if the file is empty or has no records), the program branches to the <code>SKIP</code> tag, bypassing the execution of <code>AP192</code>.</p> </li> <li> <p>Execution of AP192:</p> </li> <li>If the condition in step 3 is not met (i.e., the file exists and has data), the program proceeds to load and run the <code>AP192</code> program.</li> <li>Files used by <code>AP192</code>:<ul> <li><code>APCHKUP</code> (labeled <code>?9?APCHKUP</code>, disposition <code>SHR</code> for shared access): Likely the input file containing check reconciliation data uploaded from PNC.</li> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>, extendable by 100 records): The working file for check reconciliation transactions.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP192</code>, which presumably processes the uploaded check data and updates the <code>APCRTR</code> file.</p> </li> <li> <p>Execution of AP193:</p> </li> <li>After <code>AP192</code> completes (or if the program branches to <code>SKIP</code>), the program loads and runs the <code>AP193</code> program.</li> <li>Files used by <code>AP193</code>:<ul> <li><code>APCRTR</code> (labeled <code>?9?APCR?WS?</code>, disposition <code>SHR</code>): The same working file used in <code>AP192</code>, containing processed check reconciliation data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, disposition <code>SHR</code>): Likely a control file for A/P processing, containing configuration or summary data.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, disposition <code>SHR</code>): General Ledger master file, used for updating financial records.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, disposition <code>SHR</code>): A file likely used for storing reconciled check data or audit trails.</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AP193</code>, which likely finalizes the reconciliation process, updates the General Ledger, and stores results in the appropriate files.</p> </li> <li> <p>Program Flow Control:</p> </li> <li>The <code>TAG SKIP</code> label serves as a branching point. If the file <code>?9?APCR?WS?</code> is empty or meets the condition in step 3, the program skips <code>AP192</code> and proceeds directly to <code>AP193</code>.</li> <li>This ensures that <code>AP193</code> runs regardless of whether <code>AP192</code> was executed, providing a consistent final processing step.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. AP192: Handles the initial processing of A/P check reconciliation data, likely validating and uploading data from <code>APCHKUP</code> to <code>APCRTR</code>. 2. AP193: Performs final processing, such as updating the General Ledger (<code>GLMAST</code>), reconciling checks in <code>APCHKR</code>, and using control data from <code>APCONT</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files (referred to as tables in some contexts): 1. APCHKUP (<code>?9?APCHKUP</code>): Input file containing check reconciliation data uploaded from PNC. Used by <code>AP192</code>. 2. APCRTR (<code>?9?APCR?WS?</code>): Working file for check reconciliation transactions, created or deleted as needed. Used by both <code>AP192</code> and <code>AP193</code>. 3. APCONT (<code>?9?APCONT</code>): Control file for A/P processing, likely containing configuration or summary data. Used by <code>AP193</code>. 4. GLMAST (<code>?9?GLMAST</code>): General Ledger master file, used for financial updates. Used by <code>AP193</code>. 5. APCHKR (<code>?9?APCHKR</code>): File for reconciled check data or audit trails. Used by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20OCL/#summary","title":"Summary","text":"<p>The OCL program orchestrates an A/P check reconciliation process by: - Managing the lifecycle of a working file (<code>APCRTR</code>) through deletion and creation. - Conditionally running <code>AP192</code> to process uploaded check data if the working file has valid data. - Always running <code>AP193</code> to finalize reconciliation, update the General Ledger, and store results. - The program uses shared files (<code>SHR</code> disposition) to allow concurrent access and extends the <code>APCRTR</code> file as needed.</p> <p>External Programs: <code>AP192</code>, <code>AP193</code> Files Used: <code>APCHKUP</code>, <code>APCRTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code></p> <p>If you need further clarification or details about specific file formats or program logic, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/","title":"AP192 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP192</code> for the IBM System/36 or AS/400, called from the OCL program previously discussed. It is designed to populate an Accounts Payable (A/P) check reconciliation workfile (<code>APCRTR</code>) from data uploaded from PNC (<code>APCHKUP</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#process-steps-of-the-rpg-program-ap192","title":"Process Steps of the RPG Program (AP192)","text":"<p>The RPG program reads records from the input file <code>APCHKUP</code>, processes them, and writes formatted records to the output file <code>APCRTR</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File Definitions:</li> <li>Input File (<code>APCHKUP</code>):<ul> <li>Defined as a primary input file (<code>IP</code>) with a record length of 25 bytes (<code>FAPCHKUP IP F 25 25 DISK</code>).</li> <li>Fields are extracted from positions 1 to 25 of each record.</li> </ul> </li> <li> <p>Output File (<code>APCRTR</code>):</p> <ul> <li>Defined as an output file (<code>O</code>) with a record length of 80 bytes (<code>FAPCRTR O F 80 80 16AI 2 DISK</code>).</li> <li>Indexed file (<code>AI</code>) with a key length of 2 bytes starting at position 16.</li> <li>The <code>A</code> indicator suggests append mode, allowing new records to be added.</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li> <p>The input file <code>APCHKUP</code> is read using a non-sequenced record (<code>NS 01</code>) and fields are mapped as follows:</p> <ul> <li><code>CHECK#</code> (positions 1\u20136): Check number (likely a numeric or alphanumeric identifier).</li> <li><code>AMOUNT</code> (positions 7\u201317): Check amount, including vendor number data (likely a packed or zoned decimal field).</li> <li><code>YEAR</code> (positions 18\u201321): Four-digit year of the check date.</li> <li><code>YEAR2</code> (positions 20\u201321): Two-digit year (subset of <code>YEAR</code>, possibly for compatibility).</li> <li><code>MONTH</code> (positions 22\u201323): Month of the check date.</li> <li><code>DAY</code> (positions 24\u201325): Day of the check date.</li> <li>Comments suggest additional fields like <code>VENDOR NUMBER</code> and <code>VENDOR NAME</code>, but these are not explicitly mapped in the provided code, possibly indicating a partial or simplified program listing.</li> </ul> </li> <li> <p>Processing Logic:</p> </li> <li>Indicator <code>N09</code> Check:<ul> <li>The program checks if indicator <code>09</code> is off (<code>N09</code>).</li> <li>If <code>09</code> is off, it sets a field <code>GLNUMB</code> (80 bytes) to a constant value <code>11000001</code> using <code>Z-ADD</code> (zero and add operation).</li> <li>It then sets indicator <code>09</code> on (<code>SETON 09</code>), ensuring this logic executes only once (likely for the first record or initialization).</li> </ul> </li> <li> <p>This suggests <code>GLNUMB</code> is a General Ledger number or a control field used in the output file, initialized to a default value.</p> </li> <li> <p>Output Record Writing:</p> </li> <li>The program writes records to <code>APCRTR</code> using the <code>DADD</code> operation (add a new record) for output specification <code>01</code> (<code>OAPCRTR DADD 01</code>).</li> <li>The output record is formatted as follows:<ul> <li>Position 1: A single space (<code>' '</code>) for padding or alignment.</li> <li>Positions 3\u20134: Hardcoded value <code>'10'</code> (possibly a transaction code or record type).</li> <li>Positions 5\u201311: <code>GLNUMB</code> (General Ledger number, set to <code>11000001</code>).</li> <li>Positions 12\u201317: <code>CHECK#</code> (check number from input).</li> <li>Positions 18\u201333: <code>AMOUNT</code> (check amount from input).</li> <li>Positions 34\u201341: <code>MONTH</code> (month of check date).</li> <li>Positions 42\u201343: <code>DAY</code> (day of check date).</li> <li>Positions 44\u201345: <code>YEAR2</code> (two-digit year).</li> <li>Positions 46\u201349: <code>YEAR</code> (four-digit year).</li> <li>Positions 50\u201351: <code>MONTH</code> (repeated, possibly for compatibility or formatting).</li> <li>Positions 52\u201353: <code>DAY</code> (repeated, possibly for compatibility or formatting).</li> </ul> </li> <li> <p>The output record is 80 bytes long, with fields explicitly positioned to match the file\u2019s structure.</p> </li> <li> <p>Program Flow:</p> </li> <li>The RPG program operates in a cycle-driven manner (typical of RPG II/III on System/36).</li> <li>It reads each record from <code>APCHKUP</code>, processes it (assigning <code>GLNUMB</code> for the first record), and writes a formatted record to <code>APCRTR</code>.</li> <li>The cycle continues until all input records are processed or an end-of-file condition is reached.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Data Transformation:    - Input data from <code>APCHKUP</code> (check number, amount, and date components) is reformatted into a structured output file (<code>APCRTR</code>) with additional fields like <code>GLNUMB</code> and a hardcoded transaction code (<code>'10'</code>).    - This suggests the program prepares data for downstream A/P reconciliation processes, ensuring compatibility with the system\u2019s database structure.</p> <ol> <li>Initialization of General Ledger Number:</li> <li>The <code>GLNUMB</code> field is initialized to <code>11000001</code> for the first record (or when indicator <code>09</code> is off), indicating a default or starting General Ledger account number.</li> <li> <p>The use of indicator <code>09</code> ensures this initialization happens only once, preventing overwrites for subsequent records.</p> </li> <li> <p>Data Validation:</p> </li> <li>The program assumes input data in <code>APCHKUP</code> is correctly formatted (e.g., check number in positions 1\u20136, amount in 7\u201317, etc.).</li> <li> <p>No explicit validation logic is shown, but the field mappings suggest reliance on the input file\u2019s structure being consistent.</p> </li> <li> <p>Output File Structure:</p> </li> <li>The output file <code>APCRTR</code> is indexed with a key starting at position 16 (likely the check number or a related field), facilitating efficient retrieval in subsequent processes (e.g., by <code>AP193</code>).</li> <li>Repeated fields (<code>MONTH</code> and <code>DAY</code>) in the output suggest compatibility with legacy systems or specific formatting requirements for downstream processing.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files: 1. APCHKUP:    - Input file (<code>IP</code>), 25 bytes per record.    - Contains check reconciliation data uploaded from PNC, including check number, amount, and date components. 2. APCRTR:    - Output file (<code>O</code>), 80 bytes per record, indexed with a 2-byte key starting at position 16.    - Stores processed check reconciliation data for further processing by <code>AP193</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The provided RPG code does not explicitly call any external programs. It is a self-contained program that reads from <code>APCHKUP</code>, processes the data, and writes to <code>APCRTR</code>. However, it is called by the OCL program (as noted in the previous query) and works in conjunction with <code>AP193</code>, which processes the output file <code>APCRTR</code>.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20RPG/#summary","title":"Summary","text":"<p>The <code>AP192</code> RPG program is responsible for populating the A/P check reconciliation workfile (<code>APCRTR</code>) from PNC upload data (<code>APCHKUP</code>). It: - Reads input records containing check number, amount, and date components. - Initializes a General Ledger number (<code>GLNUMB</code>) for the first record. - Formats and writes output records to <code>APCRTR</code> with additional fields like a transaction code (<code>'10'</code>) and repeated date fields for compatibility. - Uses a cycle-driven approach to process all input records.</p> <p>Business Rules: - Transform and reformat PNC upload data for A/P reconciliation. - Initialize <code>GLNUMB</code> once for the output file. - Ensure output records are structured for downstream processing.</p> <p>Tables Used: <code>APCHKUP</code> (input), <code>APCRTR</code> (output). External Programs Called: None directly in the RPG code, but <code>AP192</code> is part of a workflow with <code>AP193</code> via the OCL program.</p> <p>If you need further details, such as field format specifics (e.g., numeric vs. alphanumeric) or clarification on the System/36 environment, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/","title":"AP192 Summary Upload Checks to Clear","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of the OCL program (<code>AP192.ocl36.txt</code>), the RPG program <code>AP192</code> (<code>AP192.rpg36.txt</code>), and the RPG program <code>AP193</code> (<code>AP193.rpg36.txt</code>). Together, they implement a single primary use case for Accounts Payable (A/P) check reconciliation from PNC uploads:</p> <ol> <li>Process and Validate A/P Check Reconciliation Data from PNC:</li> <li>Description: This use case involves uploading check reconciliation data from PNC, transforming it into a structured workfile, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</li> <li>Components:<ul> <li>The OCL program orchestrates the workflow by managing file creation/deletion and invoking <code>AP192</code> and <code>AP193</code>.</li> <li><code>AP192</code> transforms PNC upload data (<code>APCHKUP</code>) into a workfile (<code>APCRTR</code>) with formatted records.</li> <li><code>AP193</code> validates the workfile data against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and generates a report (<code>LIST</code>) with errors and totals.</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#ap-check-reconciliation-function-requirements","title":"A/P Check Reconciliation Function Requirements","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#overview","title":"Overview","text":"<p>The A/P Check Reconciliation function processes and validates check reconciliation data uploaded from PNC, transforming it into a structured format, validating it against company, General Ledger, and historical check data, and producing a report with validation results and totals.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#inputs","title":"Inputs","text":"<ul> <li>PNC Upload File (<code>APCHKUP</code>):</li> <li>Fields: Check number (6 bytes), amount (11 bytes), year (4 bytes), two-digit year (2 bytes), month (2 bytes), day (2 bytes).</li> <li>Format: Fixed-length records (25 bytes).</li> <li>Control Files:</li> <li><code>APCONT</code>: Company data (company code, name, deletion flag).</li> <li><code>GLMAST</code>: General Ledger data (G/L number, description, deletion flag).</li> <li><code>APCHKR</code>: Historical check data (check number, status code, vendor number, check amount, check date, vendor name).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#outputs","title":"Outputs","text":"<ul> <li>Workfile (<code>APCRTR</code>):</li> <li>Fields: Company code, G/L number (default: 11000001), check number, clear amount, clear date (year, two-digit year, month, day, repeated month/day).</li> <li>Format: Fixed-length records (80 bytes, indexed).</li> <li>Report (<code>LIST</code>):</li> <li>Content: Company and G/L headers, check details (check number, clear date, clear amount), error messages, G/L and company totals.</li> <li>Format: Printer file (132 bytes).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#process-steps","title":"Process Steps","text":"<ol> <li>File Management:</li> <li>Delete existing <code>APCRTR</code> workfile if present.</li> <li> <p>Create new <code>APCRTR</code> workfile (500 records, 80 bytes, indexed, 2-byte key at position 16) if it doesn\u2019t exist.</p> </li> <li> <p>Data Transformation (via <code>AP192</code>):</p> </li> <li>Read <code>APCHKUP</code> records.</li> <li>Map fields: check number, amount, year, two-digit year, month, day.</li> <li>Add default G/L number (11000001) and transaction code (\u201810\u2019).</li> <li> <p>Write formatted records to <code>APCRTR</code>.</p> </li> <li> <p>Validation and Reporting (via <code>AP193</code>):</p> </li> <li>Read <code>APCRTR</code> records.</li> <li>Validate:<ul> <li>Company code exists in <code>APCONT</code> and is not deleted.</li> <li>G/L number exists in <code>GLMAST</code> and is not deleted.</li> <li>Check number exists in <code>APCHKR</code> and is not deleted, reconciled, voided, or non-open.</li> <li>Clear amount matches <code>APCHKR</code> check amount.</li> </ul> </li> <li>Log errors for invalid records (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li>Accumulate clear amounts for valid records by G/L (<code>L2CLAM</code>) and company (<code>L3CLAM</code>).</li> <li>Generate report (<code>LIST</code>) with headers, check details, errors, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company code must exist in <code>APCONT</code> and not be marked deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li>G/L number must exist in <code>GLMAST</code> and not be marked deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</li> <li>Check number must exist in <code>APCHKR</code> with status code \u2018O\u2019 (open), not \u2018D\u2019 (deleted), \u2018R\u2019 (reconciled), or \u2018V\u2019 (voided).</li> <li> <p>Clear amount in <code>APCRTR</code> must match check amount in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Log errors for invalid company, G/L, check status, or amount mismatch.</li> <li>Increment error counter for each validation failure.</li> <li> <p>Include error messages in the report.</p> </li> <li> <p>Calculations:</p> </li> <li>Initialize G/L and company totals to zero.</li> <li>Add clear amount to G/L total (<code>L2CLAM</code>) and company total (<code>L3CLAM</code>) for valid records.</li> <li> <p>Report totals at G/L and company levels.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Include company name, G/L number, date, time, and bank info in headers.</li> <li>List check number, clear date, clear amount, and errors for each record.</li> <li>Print G/L and company totals at respective breaks.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP192%20Summary%20Upload%20Checks%20to%20Clear/#assumptions","title":"Assumptions","text":"<ul> <li>Input file <code>APCHKUP</code> is correctly formatted with valid data.</li> <li>Control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) are up-to-date and accessible.</li> <li>Output workfile <code>APCRTR</code> is used by downstream processes (not covered in this function).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/","title":"AP193 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program named <code>AP193</code> for the IBM System/36 or AS/400, called from the OCL program discussed previously. It serves as an edit program for Accounts Payable (A/P) check reconciliation data uploaded from PNC, validating data in the workfile (<code>APCRTR</code>) against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>) and producing a report (<code>LIST</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#process-steps-of-the-rpg-program-ap193","title":"Process Steps of the RPG Program (AP193)","text":"<p>The <code>AP193</code> program reads records from the A/P check reconciliation workfile (<code>APCRTR</code>), validates them against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), accumulates totals, and generates a report (<code>LIST</code>) with validation results and errors. Here\u2019s a step-by-step breakdown:</p> <ol> <li>File Definitions:</li> <li>Input Files:<ul> <li><code>APCRTR</code> (Primary Input, <code>IP</code>, 80 bytes, indexed with 2-byte key at position 16): Workfile containing check reconciliation data from <code>AP192</code>.</li> <li><code>APCONT</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 2): A/P control file with company or configuration data.</li> <li><code>GLMAST</code> (Input Control, <code>IC</code>, 256 bytes, indexed with 2-byte key at position 11): General Ledger master file for account validation.</li> <li><code>APCHKR</code> (Input Control, <code>IC</code>, 128 bytes, indexed with 2-byte key at position 16): A/P check reconciliation file with historical check data.</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, <code>O</code>, 132 bytes, printer file): Generates a report detailing check reconciliation results, errors, and totals.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li><code>COM</code> (Error message array, 10 elements, 30 bytes each): Stores error messages (e.g., \"INVALID CHECK #\", \"CHECK NOT FOUND\").</li> <li><code>SEP</code> (66-byte array, 2 elements): Likely used for report separators (e.g., lines or spaces).</li> </ul> </li> <li> <p>Input Record Mapping:</p> </li> <li>APCRTR (Primary Input):<ul> <li><code>ATKEY</code> (positions 2\u201317): Key field (likely check number).</li> <li><code>ATCO</code> (positions 2\u20133): Company code, used for <code>L3</code> (company-level) totaling.</li> <li><code>ATGL#</code> (positions 4\u201311): General Ledger number, used for <code>L2</code> (G/L-level) totaling.</li> <li><code>ATCHK#</code> (positions 12\u201317): Check number, used for validation.</li> <li><code>ATCLAM</code> (positions 23\u201333): Clear amount (check amount to be reconciled).</li> <li><code>ATCLDT</code> (positions 40\u201345): Clear date (date the check cleared).</li> </ul> </li> <li>APCONT (Control):<ul> <li><code>ACDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>ACNAME</code> (positions 4\u201333): Company name.</li> </ul> </li> <li>GLMAST (Control):<ul> <li><code>GLDEL</code> (position 1): Deletion flag (\u2018D\u2019 for deleted).</li> <li><code>GLDESC</code> (positions 13\u201337): General Ledger description.</li> </ul> </li> <li>APCHKR (Control):<ul> <li><code>AMCODE</code> (position 1): Check status code (\u2018D\u2019, \u2018O\u2019, \u2018R\u2019, \u2018V\u2019 for deleted, open, reconciled, voided).</li> <li><code>AMVEN#</code> (positions 18\u201322): Vendor number.</li> <li><code>AMCKAM</code> (positions 23\u201333): Check amount.</li> <li><code>AMCKDT</code> (positions 34\u201339): Check date.</li> <li><code>AMVNNM</code> (positions 46\u201375): Vendor name.</li> </ul> </li> <li> <p>UDS (User Data Structure):</p> <ul> <li><code>Y2KCEN</code> (positions 509\u2013510): Century for Y2K handling.</li> <li><code>Y2KCMP</code> (positions 511\u2013512): Company code for Y2K.</li> </ul> </li> <li> <p>Initialization (N09 Block):</p> </li> <li>If indicator <code>09</code> is off (<code>N09</code>), the program:<ul> <li>Initializes <code>L2CLAM</code> and <code>L3CLAM</code> (G/L and company clear amount totals) to zero (<code>Z-ADD*ZEROS</code>).</li> <li>Captures system time (<code>TIME</code>) and moves it to <code>TIMDAT</code> (12 bytes), then extracts <code>SYSTIM</code> (time, 6 bytes) and <code>SYSDAT</code> (date, 6 bytes).</li> <li>Sets <code>SEP</code> to <code>'* '</code> (separator for report).</li> <li>Initializes <code>PAGE</code> to zero for report pagination.</li> <li>Sets <code>GLKEY</code> to <code>'C'</code> (11 bytes, likely a default G/L key).</li> <li>Sets indicator <code>09</code> on to prevent re-execution.</li> </ul> </li> <li> <p>This block runs once at program start to set up variables and report parameters.</p> </li> <li> <p>Indicator and Variable Reset:</p> </li> <li>Indicators <code>30</code>, <code>31</code>, <code>32</code>, <code>33</code>, <code>34</code>, <code>81</code>, <code>90</code>, <code>91</code>, <code>92</code>, <code>93</code>, <code>94</code>, <code>95</code>, <code>96</code> are turned off (<code>SETOF</code>).</li> <li>Error message fields (<code>MSG</code>, <code>MSG1</code>\u2013<code>MSG6</code>) are cleared to blanks.</li> <li> <p><code>COUNT</code> (error counter) is reset to zero.</p> </li> <li> <p>Validation Logic:</p> </li> <li>Company Validation:<ul> <li>The program chains <code>ATCO</code> (company code from <code>APCRTR</code>) to <code>APCONT</code> (<code>CHAINAPCONT</code>, indicator <code>30</code>).</li> <li>If no record is found or <code>ACDEL</code> = \u2018D\u2019 (deleted), indicator <code>30</code> is set, and <code>CONONM</code> (company name) is cleared; otherwise, <code>CONONM</code> is set to <code>ACNAME</code>.</li> </ul> </li> <li>General Ledger Validation:<ul> <li>Constructs <code>GLKEY</code> by combining <code>ATCO</code> and <code>ATGL#</code> into <code>GLKY10</code> (10 bytes) and moving it to <code>GLKEY</code>.</li> <li>Chains <code>GLKEY</code> to <code>GLMAST</code> (<code>CHAINGLMAST</code>, indicator <code>31</code>).</li> <li>If no record is found or <code>GLDEL</code> = \u2018D\u2019 (deleted), indicator <code>31</code> is set, and <code>BKGLNM</code> (G/L description) is cleared; otherwise, <code>BKGLNM</code> is set to <code>GLDESC</code>.</li> </ul> </li> <li>Check Validation:<ul> <li>Chains <code>ATKEY</code> (check number) to <code>APCHKR</code> (<code>CHAINAPCHKR</code>, indicator <code>32</code>).</li> <li>If no record is found, sets indicator <code>90</code>, logs error \u201cCHECK # NOT FOUND\u201d (<code>COM,3</code>/<code>COM,4</code> to <code>MSG1</code>), increments <code>COUNT</code>, and branches to <code>AROUND</code> (skips further checks).</li> <li>Checks <code>AMCODE</code> in <code>APCHKR</code> for:</li> <li>\u2018D\u2019 (Deleted): Sets indicator <code>91</code>, logs \u201cCHECK WAS PREVIOUSLY DELETED\u201d (<code>COM,3</code>/<code>COM,5</code> to <code>MSG2</code>), increments <code>COUNT</code>.</li> <li>\u2018R\u2019 (Reconciled): Sets indicator <code>92</code>, logs \u201cCHECK IS ALREADY RECONCILED\u201d (<code>COM,3</code>/<code>COM,6</code> to <code>MSG3</code>), increments <code>COUNT</code>.</li> <li>\u2018V\u2019 (Voided): Sets indicator <code>93</code>, logs \u201cCHECK WAS PREVIOUSLY VOIDED\u201d (<code>COM,3</code>/<code>COM,7</code> to <code>MSG4</code>), increments <code>COUNT</code>.</li> <li>\u2018O\u2019 (Open): Sets indicator <code>94</code>, logs \u201cCHECK IS NOT OPEN\u201d (<code>COM,3</code>/<code>COM,8</code> to <code>MSG5</code>), increments <code>COUNT</code>.</li> <li>Compares <code>ATCLAM</code> (clear amount from <code>APCRTR</code>) to <code>AMCKAM</code> (check amount from <code>APCHKR</code>) (<code>COMP</code>, indicator <code>34</code>).</li> <li>If amounts don\u2019t match, sets indicator <code>95</code>, logs \u201cCLEAR AMOUNT DOES NOT MATCH\u201d (<code>COM,10</code> to <code>MSG6</code>), increments <code>COUNT</code>.</li> </ul> </li> <li> <p>If any validation fails, the program branches to <code>AROUND</code> to skip further processing for the record.</p> </li> <li> <p>Accumulation:</p> </li> <li> <p>If validations pass (no branch to <code>AROUND</code>), adds <code>ATCLAM</code> to <code>L2CLAM</code> (G/L total) and <code>L3CLAM</code> (company total).</p> </li> <li> <p>Report Generation:</p> </li> <li> <p>The program writes to the <code>LIST</code> printer file:</p> <ul> <li>Header (Level <code>L3</code>, Company-Level):</li> <li>Prints company name (<code>ACNAME</code>), page number (<code>PAGE</code>), system date (<code>SYSDAT</code>), bank info, and report title (\u201cA/P CANCELLED CHECKS EDIT FROM PNC UPLOAD\u201d).</li> <li>Includes system time (<code>SYSTIM</code>) and separators (<code>SEP</code>).</li> <li>Column headers: \u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d.</li> <li>Detail Lines (Level <code>01</code>):</li> <li>Prints check number (<code>ATCHK#</code>), clear date (<code>ATCLDT</code>), and clear amount (<code>ATCLAM</code>).</li> <li>If errors exist (indicators <code>90</code>\u2013<code>95</code>), prints corresponding error messages (<code>MSG1</code>\u2013<code>MSG6</code>) at position 110.</li> <li>Totals (Level <code>L2</code> and <code>L3</code>):</li> <li>At <code>L2</code> (G/L break), prints \u201cBANK G/L # TOTAL\u201d with <code>L2CLAM</code>.</li> <li>At <code>L3</code> (company break), prints \u201cCOMPANY TOTAL\u201d with <code>L3CLAM</code>.</li> </ul> </li> <li> <p>Program Flow:</p> </li> <li>The RPG cycle reads each <code>APCRTR</code> record, validates it against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, logs errors, accumulates totals, and writes report lines.</li> <li>The program continues until all <code>APCRTR</code> records are processed, producing a report with headers, detail lines, error messages, and totals.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Validation of Company and G/L:</li> <li>Each record\u2019s company code (<code>ATCO</code>) must exist in <code>APCONT</code> and not be deleted (<code>ACDEL \u2260 \u2018D\u2019</code>).</li> <li> <p>The G/L number (<code>ATGL#</code>) combined with <code>ATCO</code> must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 \u2018D\u2019</code>).</p> </li> <li> <p>Check Validation:</p> </li> <li>The check number (<code>ATKEY</code>) must exist in <code>APCHKR</code>.</li> <li>The check must not be deleted (<code>AMCODE \u2260 \u2018D\u2019</code>), reconciled (<code>AMCODE \u2260 \u2018R\u2019</code>), voided (<code>AMCODE \u2260 \u2018V\u2019</code>), or non-open (<code>AMCODE \u2260 \u2018O\u2019</code>).</li> <li> <p>The clear amount (<code>ATCLAM</code>) must match the check amount (<code>AMCKAM</code>) in <code>APCHKR</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors are logged with predefined messages (e.g., \u201cCHECK # NOT FOUND\u201d, \u201cCLEAR AMOUNT DOES NOT MATCH\u201d).</li> <li> <p>Each error increments a counter (<code>COUNT</code>) and is printed in the report.</p> </li> <li> <p>Totaling:</p> </li> <li>Clear amounts are accumulated at the G/L level (<code>L2CLAM</code>) and company level (<code>L3CLAM</code>) for valid records.</li> <li> <p>Totals are printed at G/L and company breaks in the report.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes headers with company, date, time, and bank info.</li> <li>Detail lines show check number, clear date, clear amount, and any errors.</li> <li>Totals are printed for each G/L account and company.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APCRTR:</li> <li>Primary input file, 80 bytes, indexed.</li> <li>Contains check reconciliation data from <code>AP192</code> (check number, G/L number, company code, clear amount, clear date).</li> <li>APCONT:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores company data (name, deletion flag).</li> <li>GLMAST:</li> <li>Input control file, 256 bytes, indexed.</li> <li>Stores General Ledger data (description, deletion flag).</li> <li>APCHKR:</li> <li>Input control file, 128 bytes, indexed.</li> <li>Stores historical check data (status code, vendor number, check amount, check date, vendor name).</li> <li>LIST:</li> <li>Output printer file, 132 bytes.</li> <li>Generates the reconciliation edit report.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP193</code> RPG program does not explicitly call any external programs. It is a self-contained program that processes input from <code>APCRTR</code>, validates against <code>APCONT</code>, <code>GLMAST</code>, and <code>APCHKR</code>, and produces a report via <code>LIST</code>. It is called by the OCL program as part of the A/P reconciliation workflow.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP192%20Upload%20Checks%20to%20Clear/AP193%20RPG/#summary","title":"Summary","text":"<p>The <code>AP193</code> RPG program validates A/P check reconciliation data from <code>APCRTR</code> against control files (<code>APCONT</code>, <code>GLMAST</code>, <code>APCHKR</code>), logs errors, accumulates totals, and generates a report (<code>LIST</code>). It: - Validates company, G/L, and check data, ensuring records are not deleted, reconciled, or voided, and amounts match. - Logs errors with predefined messages and counts errors. - Accumulates clear amount totals at G/L and company levels. - Produces a formatted report with headers, detail lines, error messages, and totals.</p> <p>Business Rules: - Validate company, G/L, and check data for existence and status. - Ensure clear amounts match historical check amounts. - Log and report errors for invalid records. - Accumulate and report totals by G/L and company.</p> <p>Tables Used: <code>APCRTR</code> (input), <code>APCONT</code> (control), <code>GLMAST</code> (control), <code>APCHKR</code> (control), <code>LIST</code> (output). External Programs Called: None.</p> <p>If you need further details, such as specific field formats or deeper analysis of the report structure, let me know!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/","title":"AP290 OCL","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#ap290","title":"AP290","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#process-steps-of-the-ap290-ocl-program","title":"Process Steps of the AP290 OCL Program","text":"<p>The OCL program appears to be part of an Accounts Payable check reconciliation post process. Here\u2019s a step-by-step breakdown of the operations based on the provided code:</p> <ol> <li>Program Header and Identification:</li> <li>The lines <code>** A/P CHECK RECONCILIATION POST</code> and <code>// SCPROCP ,,,,,,,,?9?</code> indicate the program\u2019s purpose and possibly a procedure identifier (<code>SCPROCP</code>). The <code>?9?</code> is a placeholder for a specific value (e.g., library or system identifier) that is resolved at runtime.</li> <li> <p><code>// GSY2K</code> suggests a reference to a system or configuration, possibly related to Y2K compliance or a specific system module.</p> </li> <li> <p>User Interaction (Pause for Confirmation):</p> </li> <li>The line <code>// * 'A/P CHECK RECONCILIATION POST'</code> displays a message to the user, indicating the program\u2019s purpose.</li> <li> <p><code>// PAUSE 'TO CANCEL--PRESS ATTN,2,ENTER  TO CONTINUE--PRESS 0,ENTER'</code> prompts the user to either cancel the process (by pressing ATTN, 2, ENTER) or continue (by pressing 0, ENTER). This is a user interaction step to confirm whether the reconciliation post should proceed.</p> </li> <li> <p>Attribute Inquiry:</p> </li> <li> <p><code>// ATTR INQUIRY-YES,CANCEL-NO</code> likely sets up the program to handle inquiry mode (YES) or cancellation (NO) based on user input. This could control whether the program runs in an interactive inquiry mode or proceeds with processing.</p> </li> <li> <p>Loading the Program:</p> </li> <li> <p><code>// LOAD AP290</code> loads the program <code>AP290</code>, which is presumably the main RPG program responsible for performing the A/P check reconciliation post. This is the core executable for the process.</p> </li> <li> <p>File Specifications:</p> </li> <li>The program specifies three files to be used:<ul> <li><code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code>: Defines a file named <code>APCRTR</code> (likely a transaction or work file) with a label that includes placeholders (<code>?9?APCR?WS?</code>). The placeholders suggest dynamic naming based on system or job parameters.</li> <li><code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>: Defines a file named <code>APCONT</code> (possibly a control file for A/P) with a shared disposition (<code>DISP-SHR</code>), allowing multiple processes to access it concurrently.</li> <li><code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code>: Defines a file named <code>APCHKR</code> (likely the check reconciliation file) with shared disposition.</li> </ul> </li> <li> <p>These files are opened for use by the <code>AP290</code> program.</p> </li> <li> <p>Running the Program:</p> </li> <li> <p><code>// RUN</code> executes the loaded <code>AP290</code> program, which processes the reconciliation using the specified files.</p> </li> <li> <p>File Cleanup:</p> </li> <li><code>// GSDELETE APCR?WS?,,,,,,,,?9?</code> deletes the work file <code>APCR?WS?</code> (likely <code>APCRTR</code> with resolved placeholders) to clean up temporary data after processing.</li> <li><code>CLRPFM FILE(?9?APCHKUP)</code> clears the physical file <code>APCHKUP</code> (a file not mentioned earlier in the file specifications but likely used as an output or temporary file). The <code>CLRPFM</code> (Clear Physical File Member) command removes all records from the file, preparing it for new data or ensuring it is empty post-processing.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP290: This is the main RPG program loaded and executed by the OCL script (<code>// LOAD AP290</code> and <code>// RUN</code>). It performs the core logic for the A/P check reconciliation post.</li> <li>No other external programs are explicitly called in the provided OCL snippet.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files (tables in IBM i terminology):</p> <ol> <li>APCRTR (<code>// FILE NAME-APCRTR,LABEL-?9?APCR?WS?</code>):</li> <li>Likely a transaction or work file used for temporary storage of reconciliation data.</li> <li> <p>The label includes placeholders (<code>?9?APCR?WS?</code>), suggesting dynamic naming.</p> </li> <li> <p>APCONT (<code>// FILE NAME-APCONT,LABEL-?9?APCONT,DISP-SHR</code>):</p> </li> <li>Probably a control file containing configuration or summary data for the A/P process.</li> <li> <p>Opened with shared disposition (<code>DISP-SHR</code>), allowing concurrent access.</p> </li> <li> <p>APCHKR (<code>// FILE NAME-APCHKR,LABEL-?9?APCHKR,DISP-SHR</code>):</p> </li> <li>Likely the main check reconciliation file, storing check data or reconciliation results.</li> <li> <p>Also opened with shared disposition.</p> </li> <li> <p>APCHKUP (<code>CLRPFM FILE(?9?APCHKUP)</code>):</p> </li> <li>A file cleared at the end of the process, possibly used as an output or update file for storing reconciled check data.</li> <li>Not listed in the initial file specifications, suggesting it may be implicitly used by <code>AP290</code> or defined elsewhere.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The OCL program initiates an A/P check reconciliation process by prompting the user for confirmation, loading the <code>AP290</code> RPG program, opening necessary files (<code>APCRTR</code>, <code>APCONT</code>, <code>APCHKR</code>), running the program, and performing cleanup by deleting a work file and clearing an output file (<code>APCHKUP</code>).</li> <li>External Programs: <code>AP290</code> (main RPG program).</li> <li>Files Used: <code>APCRTR</code>, <code>APCONT</code>, <code>APCHKR</code>, <code>APCHKUP</code>.</li> </ul> <p>If you have additional context (e.g., the RPG code for <code>AP290</code> or more OCL snippets), I can provide a more detailed analysis of the program\u2019s logic or interactions. Let me know if you\u2019d like me to search for related information or clarify any specific part!</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/","title":"AP290 RPG","text":"<p>The provided document is an RPG III (or RPG/36) program named <code>AP290</code>, which is called from the OCL program described previously. This program handles the Accounts Payable (A/P) Cancelled Checks Post process. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called, based on the RPG code provided.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#process-steps-of-the-rpg-program-ap290","title":"Process Steps of the RPG Program (AP290)","text":"<p>The RPG program <code>AP290</code> processes cancelled checks for Accounts Payable reconciliation, updating relevant files and generating a report. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>File and Data Definitions:</li> <li>Input Files:<ul> <li><code>APCRTR</code> (Primary Input, Line 0009): A transaction file containing check data (80 bytes, indexed by a 16-byte key).</li> <li><code>APCONT</code> (Input, Chained, Line 0010): A control file with company information (256 bytes, indexed by a 2-byte key).</li> <li><code>APCHKR</code> (Update, Chained, Line 0011): A check reconciliation file (128 bytes, indexed by a 16-byte key).</li> </ul> </li> <li>Output File:<ul> <li><code>LIST</code> (Output, Line 0012): A printer file for generating a report (132 characters wide).</li> </ul> </li> <li>Data Structures:<ul> <li><code>SEP</code> (Line 0013): An array of 66 elements (2 bytes each) used for formatting report separators.</li> <li><code>APCRTR NS 01</code> (Lines 0015\u20130020): Defines fields from the <code>APCRTR</code> file, including:</li> <li><code>ATCONOL2</code> (Company Number, positions 2\u20133).</li> <li><code>ATBKGLL1</code> (Bank G/L Number, positions 4\u201311).</li> <li><code>ATCHK#</code> (Check Number, positions 12\u201317).</li> <li><code>ATCLAM</code> (Clear Amount, positions 23\u201333, 2 decimal places).</li> <li><code>ATCLDT</code> (Clear Date, positions 40\u201345).</li> <li><code>ATCLYY</code> (Clear Date Year, positions 44\u201345).</li> <li><code>ATKEY</code> (Key field, positions 2\u201317, likely a composite key).</li> <li><code>APCONT NS</code> (Line 0026): Defines <code>ACNAME</code> (Company Name, positions 4\u201333).</li> <li><code>UDS</code> (Line 0029): User Data Structure with:</li> <li><code>Y2KCEN</code> (Century, positions 509\u2013510, value 19 for 1900s).</li> <li><code>Y2KCMP</code> (Comparison Year, positions 511\u2013512, value 80 for Y2K logic).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>L1CLAM</code>, <code>L2CLAM</code> (112 zoned decimal, initialized to zero): Accumulators for totals at level 1 (Bank G/L) and level 2 (Company).</li> <li><code>TIMDAT</code>, <code>SYSTIM</code>, <code>SYSDAT</code> (6-digit fields): Used for system time and date.</li> <li><code>CLDT</code>, <code>CLDT8</code> (6-digit and 8-digit fields): Used for date manipulation.</li> <li><code>CN</code> (2-digit): Century for date processing.</li> </ul> </li> <li> <p>Initialization (Lines 0036\u20130040):</p> </li> <li>Retrieves the system time (<code>TIME</code> to <code>TIMDAT</code>, 12 digits).</li> <li>Moves <code>TIMDAT</code> to <code>SYSTIM</code> (time, positions 1\u20136) and <code>SYSDAT</code> (date, positions 7\u201312).</li> <li>Initializes the <code>SEP</code> array with asterisks (<code>*</code>) for report formatting.</li> <li> <p>Sets <code>PAGE</code> to zero for report pagination.</p> </li> <li> <p>Level 2 (L2) Processing \u2013 Company Level (Lines 0034\u20130045):</p> </li> <li>The <code>L2</code> indicator represents a control break at the company level (<code>ATCONOL2</code>).</li> <li>For each new company:<ul> <li>Performs a <code>CHAIN</code> operation on <code>APCONT</code> using <code>ATCONO</code> (Company Number) to retrieve the company name (<code>ACNAME</code>). If not found, indicator 92 is set.</li> <li>Initializes <code>L2CLAM</code> (Company Total Clear Amount) to zero.</li> </ul> </li> <li> <p>The <code>DO</code> loop (<code>L2 DO</code>) processes all records for a company until the company number changes.</p> </li> <li> <p>Level 1 (L1) Processing \u2013 Bank G/L Level (Lines 0047\u20130049):</p> </li> <li>The <code>L1</code> indicator represents a control break at the Bank G/L level (<code>ATBKGLL1</code>).</li> <li>For each new Bank G/L number:<ul> <li>Initializes <code>L1CLAM</code> (Bank G/L Total Clear Amount) to zero.</li> </ul> </li> <li> <p>This loop processes all checks for a specific Bank G/L account within a company.</p> </li> <li> <p>Date Processing for Y2K Compliance (Lines 0051\u20130058):</p> </li> <li>Converts the clear date (<code>ATCLDT</code>) to a 6-digit format by multiplying by 10000.01 (e.g., MMDDYY format).</li> <li>Handles Y2K logic for the year (<code>ATCLYY</code>):<ul> <li>If <code>ATCLYY</code> (2-digit year) is greater than or equal to <code>Y2KCMP</code> (80), assumes the century is <code>Y2KCEN</code> (19, for 1900s).</li> <li>Otherwise, adds 1 to <code>Y2KCEN</code> (e.g., 20 for 2000s).</li> </ul> </li> <li> <p>Constructs an 8-digit date (<code>CLDT8</code>) by combining the century (<code>CN</code>) and <code>CLDT</code> (e.g., CCYYMMDD).</p> </li> <li> <p>Check Reconciliation Update (Lines 0060\u20130064):</p> </li> <li>Performs a <code>CHAIN</code> on <code>APCHKR</code> using <code>ATKEY</code> (likely a composite key of company and check number) to locate the check record. If not found, indicator 90 is set.</li> <li>If the record is found (not 90), updates <code>APCHKR</code> with:<ul> <li>A status of 'R' (position 1, likely indicating \"Reconciled\").</li> <li>The clear date (<code>ATCLDT</code>, positions 2\u201345).</li> <li>The 8-digit clear date (<code>CLDT8</code>, positions 46\u201391).</li> </ul> </li> <li>Adds the clear amount (<code>ATCLAM</code>) to <code>L1CLAM</code> (Bank G/L total).</li> <li> <p>At the L1 control break, adds <code>L1CLAM</code> to <code>L2CLAM</code> (Company total).</p> </li> <li> <p>Report Generation (Lines 0067\u20130107):</p> </li> <li>Outputs to the <code>LIST</code> printer file:<ul> <li>Detail Lines (Lines 0098\u20130101, triggered for each <code>APCRTR</code> record):</li> <li>Check Number (<code>ATCHK#</code>, zoned, position 10).</li> <li>Clear Date (<code>ATCLDT</code>, formatted, position 25).</li> <li>Clear Amount (<code>ATCLAM</code>, formatted, position 45).</li> <li>Headers (Lines 0072\u20130097):</li> <li>Company Name (<code>ACNAME</code>, if not indicator 92, position 30).</li> <li>Page number (<code>PAGE</code>, zoned, position 108).</li> <li>System Date (<code>SYSDAT</code>, formatted, position 129).</li> <li>Bank G/L Number (<code>ATBKGL</code>, formatted with dashes, position 15).</li> <li>Report title (\u201cA/P CANCELLED CHECKS POST\u201d, position 77\u201378).</li> <li>System Time (<code>SYSTIM</code>, formatted as HH:MM:SS, position 129).</li> <li>Column headings (\u201cCHECK #\u201d, \u201cCLEAR DATE\u201d, \u201cCLEAR AMOUNT\u201d).</li> <li>Separator lines (<code>SEP</code> array, position 132).</li> <li>Totals (Lines 0102\u20130107):</li> <li>At L1 break: \u201cBANK G/L # TOTAL\u201d with <code>L1CLAM</code> (position 45).</li> <li>At L2 break: \u201cCOMPANY TOTAL\u201d with <code>L2CLAM</code> (position 45).</li> </ul> </li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Control Breaks:</li> <li>The program processes records hierarchically:<ul> <li>L2 (Company Level): Groups records by company number (<code>ATCONOL2</code>).</li> <li>L1 (Bank G/L Level): Within each company, groups records by Bank G/L number (<code>ATBKGLL1</code>).</li> </ul> </li> <li> <p>Totals (<code>L1CLAM</code>, <code>L2CLAM</code>) are accumulated and reported at each level.</p> </li> <li> <p>Y2K Date Handling:</p> </li> <li>The program adjusts the century for the clear date based on a comparison year (<code>Y2KCMP</code> = 80):<ul> <li>Years \u2265 80 are assumed to be 19xx (e.g., 1980\u20131999).</li> <li>Years &lt; 80 are assumed to be 20xx (e.g., 2000\u20132079).</li> </ul> </li> <li> <p>This ensures correct date representation in the <code>CLDT8</code> field (CCYYMMDD).</p> </li> <li> <p>File Updates:</p> </li> <li>The <code>APCHKR</code> file is updated for each valid check record (not indicator 90) with a reconciled status ('R'), the clear date, and the 8-digit date.</li> <li> <p>The program assumes that <code>APCRTR</code> provides valid transaction data, and <code>APCONT</code> provides company details.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a detailed report with headers, check details, and totals for each Bank G/L and company.</li> <li>Skips company name printing if the <code>APCONT</code> record is not found (indicator 92).</li> <li> <p>Formats dates, amounts, and other fields for readability.</p> </li> <li> <p>Error Handling:</p> </li> <li>Uses indicators (90 for <code>APCHKR</code> chain failure, 92 for <code>APCONT</code> chain failure) to handle missing records gracefully.</li> <li>Does not update <code>APCHKR</code> if the record is not found (indicator 90).</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>APCRTR (Line 0009):</li> <li>Primary input file (transaction file).</li> <li> <p>Fields: Company Number (<code>ATCONOL2</code>), Bank G/L Number (<code>ATBKGLL1</code>), Check Number (<code>ATCHK#</code>), Clear Amount (<code>ATCLAM</code>), Clear Date (<code>ATCLDT</code>, <code>ATCLYY</code>), Key (<code>ATKEY</code>).</p> </li> <li> <p>APCONT (Line 0010):</p> </li> <li>Input file (company control file).</li> <li> <p>Field: Company Name (<code>ACNAME</code>).</p> </li> <li> <p>APCHKR (Line 0011):</p> </li> <li>Update file (check reconciliation file).</li> <li> <p>Updated with reconciled status ('R'), clear date (<code>ATCLDT</code>), and 8-digit date (<code>CLDT8</code>).</p> </li> <li> <p>LIST (Line 0012):</p> </li> <li>Output printer file for the report.</li> </ol> <p>Note: The OCL program referenced an additional file, <code>APCHKUP</code>, which is cleared (<code>CLRPFM</code>) but not used in the RPG code. It may be used by another program or implicitly by <code>AP290</code> (e.g., as a work file).</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The RPG program <code>AP290</code> does not explicitly call any external programs. It performs all processing internally using the defined files and generates a report.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/AP290%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Overview: The <code>AP290</code> RPG program processes cancelled checks by reading transaction data from <code>APCRTR</code>, retrieving company details from <code>APCONT</code>, updating the <code>APCHKR</code> file with reconciled check information, and generating a report (<code>LIST</code>) with check details and totals at Bank G/L and company levels. It includes Y2K-compliant date handling.</li> <li>Business Rules: Hierarchical processing (company and Bank G/L levels), Y2K date conversion, file updates for reconciled checks, and detailed reporting with error handling for missing records.</li> <li>Files Used: <code>APCRTR</code> (input), <code>APCONT</code> (input), <code>APCHKR</code> (update), <code>LIST</code> (output).</li> <li>External Programs: None.</li> </ul> <p>If you have additional OCL or RPG snippets, or need further details (e.g., specific field formats or interactions with <code>APCHKUP</code>), let me know! I can also search for related information if required.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/","title":"Summary AP290 Clear Checks Post","text":"<p>Based on the provided OCL (<code>AP290.ocl36.txt</code>) and RPG (<code>AP290.rpg36.txt</code>) program details, I\u2019ll identify the use case implemented by the program and create a concise function requirement document for it, assuming the use case is implemented as a large function that processes inputs programmatically rather than through screen interactions.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#use-case-implemented","title":"Use Case Implemented","text":"<p>The program implements a single primary use case:</p> <ol> <li>Post Cancelled Checks for Accounts Payable Reconciliation:</li> <li>This use case processes a set of cancelled check transactions to update the check reconciliation file, accumulate totals by bank general ledger (G/L) account and company, and generate a report summarizing the reconciled checks. It includes Y2K-compliant date handling to ensure accurate date representation.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#function-requirements-post-cancelled-checks-for-ap-reconciliation","title":"Function Requirements: Post Cancelled Checks for A/P Reconciliation","text":""},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#purpose","title":"Purpose","text":"<p>Automate the posting of cancelled checks to update the Accounts Payable (A/P) reconciliation file, calculate totals by bank G/L account and company, and generate a summary report.</p>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#inputs","title":"Inputs","text":"<ul> <li>Transaction Data (<code>APCRTR</code> equivalent):</li> <li>Company Number (2 chars)</li> <li>Bank G/L Number (8 chars)</li> <li>Check Number (6 chars)</li> <li>Clear Amount (11 digits, 2 decimal places)</li> <li>Clear Date (6 digits, MMDDYY format)</li> <li>Company Data (<code>APCONT</code> equivalent):</li> <li>Company Number (2 chars, key)</li> <li>Company Name (30 chars)</li> <li>Check Reconciliation Data (<code>APCHKR</code> equivalent, for update):</li> <li>Key (16 chars, composite of company and check number)</li> <li>System Parameters:</li> <li>System Date (6 digits, MMDDYY)</li> <li>System Time (6 digits, HHMMSS)</li> <li>Y2K Century (2 digits, e.g., 19 for 1900s)</li> <li>Y2K Comparison Year (2 digits, e.g., 80)</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#outputs","title":"Outputs","text":"<ul> <li>Updated Check Reconciliation File (<code>APCHKR</code> equivalent):</li> <li>Updated records with reconciled status ('R'), clear date (6 digits), and 8-digit date (CCYYMMDD).</li> <li>Report (<code>LIST</code> equivalent):</li> <li>Header: Company name, page number, system date/time, bank G/L number, report title.</li> <li>Detail Lines: Check number, clear date, clear amount.</li> <li>Totals: Bank G/L total and company total clear amounts.</li> <li>Cleared Work File (<code>APCHKUP</code> equivalent): Emptied file.</li> <li>Deleted Work File (<code>APCRTR</code> equivalent): Deleted after processing.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date and time.</li> <li>Initialize report page counter to 0 and separator lines with asterisks.</li> <li> <p>Initialize accumulators for bank G/L (<code>L1CLAM</code>) and company (<code>L2CLAM</code>) totals to 0.</p> </li> <li> <p>Process by Company (group by Company Number):</p> </li> <li>Retrieve company name from company data using Company Number.</li> <li> <p>If company not found, skip name in report but continue processing.</p> </li> <li> <p>Process by Bank G/L (within company):</p> </li> <li>Group transactions by Bank G/L Number.</li> <li> <p>Initialize bank G/L total (<code>L1CLAM</code>) to 0 for each new G/L.</p> </li> <li> <p>Process Each Transaction:</p> </li> <li>Convert clear date to 8-digit format (CCYYMMDD):<ul> <li>If 2-digit year \u2265 80, use century 19 (e.g., 1980\u20131999).</li> <li>Else, use century 20 (e.g., 2000\u20132079).</li> </ul> </li> <li>Update check reconciliation file with:<ul> <li>Status 'R' (reconciled).</li> <li>Clear date (MMDDYY).</li> <li>8-digit date (CCYYMMDD).</li> </ul> </li> <li> <p>Add clear amount to bank G/L total (<code>L1CLAM</code>).</p> </li> <li> <p>Accumulate Totals:</p> </li> <li> <p>At bank G/L break, add <code>L1CLAM</code> to company total (<code>L2CLAM</code>).</p> </li> <li> <p>Generate Report:</p> </li> <li>Print header (company name, page, date/time, bank G/L, title).</li> <li>Print column headings (Check #, Clear Date, Clear Amount).</li> <li>For each transaction: Print check number, clear date, clear amount.</li> <li>At bank G/L break: Print bank G/L total.</li> <li> <p>At company break: Print company total.</p> </li> <li> <p>Cleanup:</p> </li> <li>Delete transaction work file.</li> <li>Clear output work file.</li> </ol>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#business-rules","title":"Business Rules","text":"<ul> <li>Hierarchical Processing: Group checks by company, then by bank G/L account.</li> <li>Y2K Date Handling: Convert 2-digit year to 4-digit year based on comparison year (80):</li> <li>Year \u2265 80 \u2192 19xx (e.g., 80 \u2192 1980).</li> <li>Year &lt; 80 \u2192 20xx (e.g., 79 \u2192 2079).</li> <li>File Updates: Update check reconciliation file only if record exists; otherwise, skip update but continue processing.</li> <li>Reporting: Include company name only if found; format bank G/L number with dashes (e.g., XXXXXX-XX); report totals at bank G/L and company levels.</li> <li>Error Handling: Handle missing company or check records gracefully (skip updates or report fields).</li> <li>Cleanup: Ensure temporary transaction file is deleted and output file is cleared post-processing.</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#calculations","title":"Calculations","text":"<ul> <li>Date Conversion:</li> <li><code>CLDT = ATCLDT * 10000.01</code> (converts MMDDYY to internal format).</li> <li><code>CLDT8 = CN (century) + CLDT</code> (e.g., 19 + MMDDYY \u2192 CCYYMMDD).</li> <li>Totals:</li> <li><code>L1CLAM += ATCLAM</code> (accumulate clear amount for bank G/L).</li> <li><code>L2CLAM += L1CLAM</code> (accumulate bank G/L total for company at L1 break).</li> </ul>"},{"location":"accounts-payable/05%20Clear%20Checks%20%26%20Reconciliation/AP290%20Clear%20Checks%20Post/Summary%20AP290%20Clear%20Checks%20Post/#assumptions","title":"Assumptions","text":"<ul> <li>Input transaction data is valid and sorted by company and bank G/L number.</li> <li>Check reconciliation file allows updates with shared access.</li> <li>Report formatting uses fixed positions for fields and totals.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/","title":"AP140 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script used on IBM midrange systems (like AS/400 or IBM i) to control the execution of RPG programs and manage file operations for an Accounts Payable (A/P) Employee Expenses Report and Spreadsheet process. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script orchestrates a sequence of file operations, program executions, and sorts to generate an employee expenses report and spreadsheet. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization and File Setup:</li> <li>GSY2K and SCPROCP: These are likely system or environment setup commands or parameters, possibly related to the operating system or job control. <code>SCPROCP ,,,,,,,,?9?</code> suggests a parameter <code>?9?</code> (likely a job or library identifier) is being passed.</li> <li>SWITCH 00000000: Initializes job control switches to off (all zeros), which are used later for conditional branching.</li> <li>GSDELETE: Deletes temporary work files (<code>ADPY?WS?</code>, <code>ADPS?WS?</code>, <code>ADPC?WS?</code>, <code>ADPO?WS?</code>, <code>ADPT?WS?</code>) to ensure a clean slate. The <code>?WS?</code> and <code>?9?</code> are placeholders for dynamic values (e.g., work library or job-specific identifiers).</li> <li>IFF DATAF1-?9?ADPT?WS? BLDFILE: Conditionally builds a temporary file <code>?9?ADPT?WS?</code> with 500 records, 128 bytes each, if it doesn\u2019t exist. The <code>DFILE</code> parameter indicates it\u2019s a disk file.</li> <li> <p>CLRPFM FILE(?9?APEEPY): Clears the physical file <code>APEEPY</code>, which likely stores the final employee expense data.</p> </li> <li> <p>Load and Run AP140:</p> </li> <li>LOAD AP140: Loads the RPG program <code>AP140</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>, shared access, extended by 100 records): Transaction file for A/P data.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>GLMAST</code> (labeled <code>?9?GLMAST</code>, shared): General Ledger master file.</li> <li><code>GSTABL</code> (labeled <code>?9?GSTABL</code>, shared): General system table file.</li> <li><code>GSCONT</code> (labeled <code>?9?GSCONT</code>, shared): General system control file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP140</code>, which likely processes A/P transactions, retrieves control data, and prepares initial data for the expense report.</p> </li> <li> <p>Conditional Branching (SWITCH1):</p> </li> <li> <p>IF SWITCH1-1 GOTO END: Checks if switch 1 is set to 1. If true, the program jumps to the <code>END</code> tag, terminating the process. This suggests <code>AP140</code> may set this switch to indicate an error or completion condition.</p> </li> <li> <p>Tag AP141 and File Preparation:</p> </li> <li>TAG AP141: Marks a program section for branching.</li> <li>GSDELETE: Deletes temporary files again to ensure no residual data.</li> <li> <p>BLDFILE:</p> <ul> <li>Builds <code>?9?ADPY?WS?</code> (999,000 records, 226 bytes) for A/P payment data.</li> <li>Builds <code>?9?ADPC?WS?</code> (999,000 records, 96 bytes) for check-related data.</li> </ul> </li> <li> <p>First Sort (#GSORT for AP141):</p> </li> <li>LOAD #GSORT: Loads the system sort utility.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPT?WS?</code> (from <code>AP140</code> output).</li> <li>Output: <code>?9?ADP151S</code> (999,000 records, retained as a job file).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTR 17A 3X 128 N</code>: Sorts in reverse order, 17-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records where position 1 is not equal to a specific condition (likely a deletion flag).</li> <li>Sort keys:</li> <li><code>FNC 7 8 COMPANY</code>: Sorts by company code (positions 7\u20138).</li> <li><code>FNC 36 45 VENDOR/VOUCHER</code>: Sorts by vendor/voucher number (positions 36\u201345).</li> <li><code>FNC 2 6 SEQ#</code>: Sorts by sequence number (positions 2\u20136).</li> <li><code>FDC 1 128 RECORDS</code>: Includes entire record (positions 1\u2013128).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted file <code>?9?ADP151S</code>.</p> </li> <li> <p>Load and Run AP141:</p> </li> <li>LOAD AP141: Loads the RPG program <code>AP141</code>.</li> <li>File Definitions:<ul> <li><code>ADPYTR</code> (labeled <code>?9?ADP151S</code>): Sorted transaction file from the previous step.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, extended by 100 records): A/P payment file.</li> </ul> </li> <li> <p>RUN: Executes <code>AP141</code>, which likely processes sorted transactions, matches them with open items, and prepares payment data.</p> </li> <li> <p>Second Sort (#GSORT for AP145):</p> </li> <li>LOAD #GSORT: Loads the sort utility again.</li> <li>File Definitions:<ul> <li>Input: <code>?9?ADPY?WS?</code> (from <code>AP141</code> output).</li> <li>Output: <code>?9?ADPS?WS?</code> (999,000 records).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 23A 3X N</code>: Sorts in ascending order, 23-character key, no sequence checking.</li> <li><code>I C 1 1NECD</code>: Includes records based on position 1 condition.</li> <li>Sort keys:</li> <li><code>FNC 2 3 COMPANY</code>: Sorts by company code (positions 2\u20133).</li> <li><code>FNC 153 160 BANK G/L #</code>: Sorts by bank general ledger number (positions 153\u2013160).</li> <li><code>FNC 4 8 VENDOR</code>: Sorts by vendor code (positions 4\u20138).</li> <li><code>FNC 97 97 PREPAID CODE</code>: Sorts by prepaid code (position 97).</li> <li><code>FNC 91 96 CHECK #</code>: Sorts by check number (positions 91\u201396).</li> <li><code>FNC 152 152 SINGLE CHECK CODE</code>: Sorts by single check code (position 152).</li> </ul> </li> <li> <p>RUN: Executes the sort, producing a sorted payment file <code>?9?ADPS?WS?</code>.</p> </li> <li> <p>Conditional Label for Employee Expense:</p> </li> <li>IF ?3?/EE LOCAL OFFSET-198,DATA-'EE EMPLOYEE EXPENSE': If parameter <code>?3?</code> equals <code>EE</code>, sets a data field at offset 198 to indicate an employee expense report.</li> <li> <p>ELSE LOCAL OFFSET-198,DATA-' ': Otherwise, clears the field.</p> </li> <li> <p>Load and Run AP145:</p> </li> <li>LOAD AP145: Loads the RPG program <code>AP145</code>.</li> <li>File Definitions:<ul> <li><code>ADPPAY</code> (labeled <code>?9?ADPY?WS?</code>, shared): Payment file.</li> <li><code>AP145S</code> (labeled <code>?9?ADPS?WS?</code>): Sorted payment file.</li> <li><code>APCONT</code> (labeled <code>?9?APCONT</code>, shared): A/P control file.</li> <li><code>ADPYTR</code> (labeled <code>?9?ADPT?WS?</code>): Transaction file.</li> <li><code>APVEND</code> (labeled <code>?9?APVEND</code>, shared): Vendor master file.</li> <li><code>APOPEN</code> (labeled <code>?9?APOPEN</code>, shared): A/P open items file.</li> <li><code>APCHKR</code> (labeled <code>?9?APCHKR</code>, shared): Check register file.</li> <li><code>ADPYCK</code> (labeled <code>?9?ADPC?WS?</code>, extended by 100 records): Check file.</li> <li><code>APEEPY</code> (labeled <code>?9?APEEPY</code>, shared): Employee expense file.</li> </ul> </li> <li>Printer Overrides:<ul> <li>If parameter <code>?9?</code> equals <code>G</code>, overrides printer files <code>APEEEXP</code> and <code>APEEEXPO</code> to output queue <code>QUSRSYS/APPOST</code> (production) or <code>QUSRSYS/TESTOUTQ</code> (test).</li> </ul> </li> <li> <p>RUN: Executes <code>AP145</code>, which generates the final employee expense report and spreadsheet, using sorted payment data, vendor information, and check details.</p> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>GSDELETE: Deletes temporary files again.</li> <li>IFF ?9?/G GOTO END: If parameter <code>?9?</code> equals <code>G</code>, skips to the <code>END</code> tag.</li> <li>TAG END: Marks the end of the process.</li> <li>SWITCH 00000000: Resets switches to off.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly loads and runs the following external programs: 1. AP140: Processes initial A/P transactions and prepares data. 2. AP141: Processes sorted transactions, matches with open items, and prepares payment data. 3. AP145: Generates the final employee expense report and spreadsheet. 4. #GSORT (system sort utility, called twice): Performs sorting of transaction and payment data.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script references the following files (tables): 1. ADPYTR (?9?ADPT?WS?): A/P transaction file (temporary, used across programs). 2. APCONT (?9?APCONT): A/P control file (shared, contains control settings). 3. GLMAST (?9?GLMAST): General Ledger master file (shared, used in <code>AP140</code>). 4. GSTABL (?9?GSTABL): General system table file (shared, used in <code>AP140</code>). 5. GSCONT (?9?GSCONT): General system control file (shared, used in <code>AP140</code>). 6. ADP151S (?9?ADP151S): Sorted transaction file (temporary, output from first <code>#GSORT</code>). 7. ADPPAY (?9?ADPY?WS?): A/P payment file (temporary, used in <code>AP141</code> and <code>AP145</code>). 8. APOPEN (?9?APOPEN): A/P open items file (shared, used in <code>AP141</code> and <code>AP145</code>). 9. AP145S (?9?ADPS?WS?): Sorted payment file (temporary, output from second <code>#GSORT</code>). 10. APVEND (?9?APVEND): Vendor master file (shared, used in <code>AP145</code>). 11. APCHKR (?9?APCHKR): Check register file (shared, used in <code>AP145</code>). 12. ADPYCK (?9?ADPC?WS?): Check file (temporary, used in <code>AP145</code>). 13. APEEPY (?9?APEEPY): Employee expense file (shared, cleared initially and used in <code>AP145</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20OCL/#summary","title":"Summary","text":"<p>The OCL script automates the generation of an A/P employee expenses report and spreadsheet by: 1. Initializing and clearing temporary files. 2. Running <code>AP140</code> to process A/P transactions. 3. Sorting data with <code>#GSORT</code> for <code>AP141</code>, which prepares payment data. 4. Sorting payment data again with <code>#GSORT</code> for <code>AP145</code>. 5. Running <code>AP145</code> to produce the final report and spreadsheet, with conditional printer output. 6. Cleaning up temporary files and terminating.</p> <p>The process uses three RPG programs (<code>AP140</code>, <code>AP141</code>, <code>AP145</code>) and the system sort utility (<code>#GSORT</code>), along with 13 files for data storage and processing. Parameters like <code>?9?</code>, <code>?3?</code>, and switches control the flow and environment (e.g., production vs. test output).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/","title":"AP140 RPG","text":"<p>The provided AP140.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that handles the A/P Payment Transaction Entry Screen for processing accounts payable (A/P) transactions, specifically for employee expense payments. It includes modifications for handling 13 accounting periods, ACH/wire transfer selections, and utility auto-pay. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, referencing the OCL context from the previous query where <code>AP140</code> is the first program executed.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#process-steps-of-the-ap140-rpg-program","title":"Process Steps of the AP140 RPG Program","text":"<p>The <code>AP140</code> program is an interactive screen-based application that allows users to enter and manage A/P payment transactions. It validates input, retrieves data from control and master files, and updates transaction records. The steps are structured around subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) and screen formats (<code>AP140S1</code>, <code>AP140S2</code>). Here\u2019s a detailed breakdown:</p> <ol> <li>Program Initialization:</li> <li>Indicators and Setup (lines 0133\u20130137): Resets indicators (81, 82, 90, 93) and clears message fields (<code>MSG30</code>, <code>MSG230</code>) to prepare for screen interactions.</li> <li>Roll Key Handling (lines 0138\u20130139): Calls <code>ROLLFW</code> (roll forward) or <code>ROLLBW</code> (roll backward) subroutines if indicators 18 or 19 are set, allowing navigation through transaction records.</li> <li> <p>End of Job (lines 0156\u20130158): If indicator <code>KG</code> (end of job) is set, resets indicators 01 and 02, sets <code>LR</code> (last record) and <code>U1</code>, and exits.</p> </li> <li> <p>One-Time Setup (<code>ONETIM</code> Subroutine) (lines 0183\u20130200):</p> </li> <li>Check Accounting Periods (lines 0185\u20130187): Checks <code>GSCONT</code> for <code>GX13GL</code> (Y/N for 13 accounting periods). Sets indicators 13, 12 if <code>GX13GL = 'Y'</code>.</li> <li>Check for Existing Transactions (lines 0189\u20130193): Chains to <code>ADPYTR</code> with key <code>'00000'</code>. If not found (indicator 81 on), sets add mode (indicator 17 on, 16 off) and initializes sequence number (<code>NXTSEQ = 1</code>). If found, proceeds to update mode.</li> <li> <p>Set Defaults (lines 0195\u20130198, 0685\u20130694): In update mode, sets company number (<code>CONO = PTCONO</code>), sequence number (<code>NXTSEQ = LSTSEQ + 1</code>), and clears fields (<code>VEND</code>, <code>VO</code>, <code>AMT</code>, <code>DISC</code>, <code>FDIS</code>, <code>PORH</code>, <code>SNGL</code>, <code>MKPP</code>, <code>PPCK</code>, <code>PPDT</code>).</p> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine) (lines 0202\u20130233):</p> </li> <li>Validate Company Number (lines 0204\u20130207): Chains to <code>APCONT</code> using <code>CONO</code>. If not found (indicator 91 on), sets error indicator 90, displays message \"INVALID COMPANY #\" (MSG,1), and jumps to <code>ENDS1</code>.</li> <li>Retrieve or Set Transaction Data (lines 0209\u20130226):<ul> <li>If no transaction exists (indicator 95 on), sets defaults: <code>BKGL = ACEEGL</code> (employee expense G/L from <code>APCONT</code>), <code>KYHOLD = 'E'</code> (employee expense), <code>BTCH = 99</code>, and zeros for <code>CKDT</code>, <code>DATE</code>, <code>KYPD</code>, <code>KYPDYY</code>. Clears <code>FDISC</code>.</li> <li>If a transaction exists (indicator 95 off), populates screen fields with <code>ADPYTR</code> values (<code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTFDIS</code>, <code>PTPD</code>, <code>PTPDYY</code>, <code>PTHOLD</code>).</li> </ul> </li> <li>Protect <code>KYHOLD</code> (lines 0218, 0226): Sets indicator 57 to protect <code>KYHOLD</code> in update mode (non-editable) or unprotect it in add mode.</li> <li>Call <code>S2EDIT</code> (line 0228): Validates screen 2 data (even though screen 1 is displayed).</li> <li> <p>Display Screen 1 (lines 0229\u20130231): Sets indicator 82 to display <code>AP140S2</code> format, clears error indicators and messages if no errors.</p> </li> <li> <p>Screen 2 Processing (<code>S2</code> Subroutine) (lines 0235\u20130252):</p> </li> <li>Validate Input (line 0237): Calls <code>S2EDIT</code> to validate screen 2 fields.</li> <li>Error Handling (lines 0238\u20130239): If error indicator 90 is on, redisplays screen 2 (indicator 82 on) and jumps to <code>ENDS2</code>.</li> <li>Double Enter Check (lines 0242\u20130243): If indicator 89 is on (user pressed Enter twice), redisplays screen 2.</li> <li> <p>Write Transaction (lines 0245\u20130247): If no errors, sets indicator 70, writes to <code>ADPYTR</code> (via <code>EXCPT</code>), and resets indicator 70.</p> </li> <li> <p>Screen 2 Edit (<code>S2EDIT</code> Subroutine) (lines 0254\u20130366):</p> </li> <li>Validate Bank G/L Number (lines 0256\u20130266):<ul> <li>Compares <code>SVBKGL</code> to <code>BKGL</code>. If different, updates <code>SVBKGL</code>.</li> <li>Chains to <code>GLMAST</code> using <code>GLKEY</code> (constructed from <code>CONO</code>, <code>BKGL</code>, and <code>'C'</code>). If not found or marked deleted/inactive (<code>GLDEL = 'D'</code> or <code>'I'</code>), sets error indicator 90 and displays \"INVALID BANK G/L #\".</li> </ul> </li> <li>Validate Batch Number (lines 0268\u20130271): If <code>BTCH = 0</code>, sets error indicator 90 and displays \"CHECK # CANNOT BE ZERO\".</li> <li>Validate Check Date (lines 0273\u20130285):<ul> <li>Calls <code>DTEDIT</code> to validate <code>CKDT</code>. If invalid (indicator 79 on), sets error 90 and displays \"INVALID CHECK DATE\".</li> <li>Converts <code>CKDT</code> to 8-digit format (<code>CKDT8</code>) with century handling.</li> </ul> </li> <li>Validate Pay-By Date (lines 0287\u20130299):<ul> <li>Calls <code>DTEDIT</code> to validate <code>DATE</code>. If invalid, sets error 90 and displays \"INVALID DATE TO PAY BY\".</li> <li>Converts <code>DATE</code> to 8-digit format (<code>DATE8</code>) with century handling.</li> </ul> </li> <li>Validate Force Discount (lines 0301\u20130305): If <code>FDISC</code> is not blank or <code>'D'</code>, sets error 90 and displays \"FORCE DISCOUNTS MUST BE 'D'\".</li> <li>Validate Period/Year for 13 Periods (lines 0307\u20130362, if indicator 12 on):<ul> <li>Checks if <code>KYPD</code> is between 1 and 13. If not, sets error 81/90/55 and displays \"INVALID PERIOD/YEAR\".</li> <li>Chains to <code>GSTABL</code> to get period end date (<code>TBPDDT</code>) for <code>KYPD</code>/<code>KYPDYY</code>. If not found, sets error.</li> <li>Validates <code>CKDT</code> against period end date (<code>HIDATE</code>) and prior period\u2019s end date (<code>LODATE</code>). If outside range, sets error and displays \"DATE INVALID FOR PD/YR KEYED\".</li> </ul> </li> <li> <p>Validate Voucher Payment Type (<code>KYHOLD</code>) (lines JB01, MG03):</p> <ul> <li>Ensures <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>. If invalid, sets error 56/90 and displays \"VOUCHER TO PAY MUST BE ' ',A,W OR E\" (or includes <code>'U'</code> for utility auto-pay).</li> </ul> </li> <li> <p>Date Edit (<code>DTEDIT</code> Subroutine) (lines 0368\u20130480):</p> </li> <li> <p>Validates dates (<code>CKDT</code>, <code>DATE</code>) in MMDDYY format:</p> <ul> <li>Breaks down into month, day, year (<code>$MONTH</code>, <code>$DAY</code>, <code>$YR</code>).</li> <li>Validates month (1\u201312).</li> <li>For February, checks leap year (divisible by 4 or 400 for century years) and ensures day \u2264 29 (leap year) or \u2264 28 (non-leap year).</li> <li>For other months, checks day \u2264 30 (for April, June, September, November) or \u2264 31 (other months).</li> <li>Sets indicator 79 if invalid.</li> </ul> </li> <li> <p>Roll Key Navigation (<code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code> Subroutines) (lines 0737\u20130771):</p> </li> <li>ROLLKY: Detects roll keys (status codes 01122 for forward, 01123 for backward), sets update mode (indicator 16 on, 17 off).</li> <li>ROLLFW: Chains to <code>ADPYTR</code> by <code>SEQ#</code>, reads next record, and updates <code>SEQ#</code> if found.</li> <li> <p>ROLLBW: Chains to <code>ADPYTR</code>, reads previous record, handles edge case for sequence 0, and updates <code>SEQ#</code>.</p> </li> <li> <p>File Output (lines 0774\u20130799):</p> </li> <li>Update/Delete (<code>E 70N95</code>): Writes updated <code>ADPYTR</code> record with fields like <code>CONO</code>, <code>BKGL</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPDYY</code>, <code>KYPD</code>, <code>CKDT8</code>, <code>DATE8</code>, <code>KYHOLD</code>.</li> <li>Add (<code>EADD 70 95</code>): Writes new <code>ADPYTR</code> record with sequence number (<code>Z5</code>) and same fields.</li> <li>Delete (<code>EDEL</code>): Marks record for deletion.</li> <li>Screen Output (lines 0844\u20130860):<ul> <li><code>AP140S1</code>: Displays <code>CONO</code> and <code>MSG30</code>.</li> <li><code>AP140S2</code>: Displays <code>CONO</code>, <code>ACNAME</code>, <code>BKGL</code>, <code>GLDESC</code>, <code>BTCH</code>, <code>CKDT</code>, <code>DATE</code>, <code>FDISC</code>, <code>KYPD</code>, <code>KYPDYY</code>, <code>MSG30</code>, <code>KYHOLD</code>.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Company Validation: Company number (<code>CONO</code>) must exist in <code>APCONT</code>. Invalid company triggers \"INVALID COMPANY #\". 2. Bank G/L Validation: Bank G/L number (<code>BKGL</code>) must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL \u2260 'D'</code>) or inactive (<code>GLDEL \u2260 'I'</code>). Invalid G/L triggers \"INVALID BANK G/L #\". 3. Batch Number: Batch number (<code>BTCH</code>) cannot be zero (\"CHECK # CANNOT BE ZERO\"). 4. Date Validation:    - Check date (<code>CKDT</code>) and pay-by date (<code>DATE</code>) must be valid (MMDDYY format, valid month/day, leap year handling).    - For 13 accounting periods, <code>CKDT</code> must fall within the period defined by <code>KYPD</code>/<code>KYPDYY</code> in <code>GSTABL</code>. 5. Force Discount: <code>FDISC</code> must be blank or <code>'D'</code> (\"FORCE DISCOUNTS MUST BE 'D'\"). 6. Period/Year: If 13 periods are enabled (<code>GX13GL = 'Y'</code>), <code>KYPD</code> must be 1\u201313, and <code>CKDT</code> must align with period start/end dates in <code>GSTABL</code>. 7. Voucher Payment Type (<code>KYHOLD</code>): Must be <code>' '</code> (checks), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), or <code>'U'</code> (utility auto-pay). Invalid values trigger \"VOUCHER TO PAY MUST BE ' ',A,W OR E\". 8. Sequence Number: Managed automatically (<code>NXTSEQ = LSTSEQ + 1</code> in update mode, or 1 in add mode). 9. Navigation: Supports rolling forward/backward through transactions using sequence numbers. 10. Error Handling: Displays specific error messages for invalid inputs and prevents record updates until errors are resolved.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. SCREEN: Workstation file (300 bytes) for interactive screen display (<code>AP140S1</code>, <code>AP140S2</code>). 2. ADPYTR: A/P transaction file (128 bytes, update mode, indexed by 5 keys). Stores payment transactions (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTBTCH</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>). 3. APCONT: A/P control file (256 bytes, input mode, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACEEGL</code>, <code>ACBKGL</code>). 4. GLMAST: General Ledger master file (256 bytes, input mode, indexed by 11 keys). Contains G/L account details (e.g., <code>GLDESC</code>, <code>GLDEL</code>). 5. GSCONT: General system control file (512 bytes, input mode, indexed by 2 keys). Stores system settings (e.g., <code>GX13GL</code> for 13 periods). 6. GSTABL: General system table file (256 bytes, input mode, indexed by 12 keys). Stores period end dates (<code>TBPDDT</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP140</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>ONETIM</code>, <code>S1</code>, <code>S2</code>, <code>S2EDIT</code>, <code>DTEDIT</code>, <code>ROLLKY</code>, <code>ROLLFW</code>, <code>ROLLBW</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20RPG/#summary","title":"Summary","text":"<p>AP140 is an interactive RPG/36 program that facilitates A/P payment transaction entry for employee expenses. It: - Displays two screens (<code>AP140S1</code>, <code>AP140S2</code>) for entering company, bank G/L, batch, check date, pay-by date, and payment type. - Validates inputs against <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, and <code>GSTABL</code>, ensuring valid company, G/L accounts, dates, and periods. - Supports add/update/delete modes for <code>ADPYTR</code> records, with navigation via roll keys. - Handles special cases like 13 accounting periods and payment types (<code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code>). - Uses five files (<code>SCREEN</code>, <code>ADPYTR</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>GSCONT</code>, <code>GSTABL</code>) and no external programs.</p> <p>The program\u2019s output in <code>ADPYTR</code> feeds into the subsequent sort and <code>AP141</code> processing in the OCL script, as described in the main process flow.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/","title":"AP140 Summary Emp Expense","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#list-of-use-cases-implemented-by-the-ap140-ap141-and-ap145-rpg-programs","title":"List of Use Cases Implemented by the AP140, AP141, and AP145 RPG Programs","text":"<p>The RPG programs <code>AP140</code>, <code>AP141</code>, and <code>AP145</code>, along with the associated OCL script, implement a single primary use case as part of an IBM System/36 or AS/400 accounts payable (A/P) system for processing employee expense payments. This use case is:</p> <ol> <li>Generate Employee Expense Voucher Selection Spreadsheet and Report:</li> <li>Description: This use case allows the system to process A/P payment transactions for employee expenses, select eligible open payables (vouchers), and produce a detailed report and summary file for payroll integration. It supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and handles validations, calculations, and reporting.</li> <li>Components:<ul> <li>AP140: Interactive entry of payment transaction details (company, bank G/L, batch, check date, pay-by date, payment type, vendor/voucher specifics).</li> <li>AP141: Matches transactions to open payables and creates payment records with appropriate payment amounts and types.</li> <li>AP145: Generates detailed reports and a summary file, validating checks and accumulating totals for reporting.</li> </ul> </li> <li>Inputs: Company number, bank G/L number, batch number, check date, pay-by date, payment type, vendor/voucher details, and accounting period/year (if 13 periods).</li> <li>Outputs: Payment records (<code>ADPPAY</code>, <code>ADPYCK</code>), detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>), and a summary disk file (<code>APEEPY</code>) for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#employee-expense-processing-function-requirements","title":"Employee Expense Processing Function Requirements","text":""},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#overview","title":"Overview","text":"<p>The Employee Expense Processing Function automates the selection, validation, and reporting of accounts payable (A/P) employee expense payments. It processes transactions, matches them to open payables, calculates payment amounts, and generates detailed reports and a payroll summary file. The function supports multiple payment methods (checks, ACH, wire transfers, employee expenses, utility auto-pay) and ensures compliance with accounting rules, including support for 13 accounting periods.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CONO</code>): Valid company identifier from <code>APCONT</code>.</li> <li>Bank G/L Number (<code>BKGL</code>): Valid bank G/L account from <code>GLMAST</code> (not deleted/inactive).</li> <li>Batch Number (<code>BTCH</code>): Non-zero batch identifier for grouping payments.</li> <li>Check Date (<code>CKDT</code>): Valid date (MMDDYY) for issuing payments.</li> <li>Pay-By Date (<code>DATE</code>): Optional date (MMDDYY) to filter vouchers by due date.</li> <li>Payment Type (<code>KYHOLD</code>): <code>' '</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Vendor Number (<code>PTVEND</code>): Optional vendor identifier from <code>APVEND</code> (0 for one-time vendors).</li> <li>Voucher Number (<code>PTVO</code>): Optional voucher identifier from <code>APOPEN</code> (0 for whole vendor).</li> <li>Partial Payment Amount (<code>PTAMT</code>): Optional amount for partial voucher payment.</li> <li>Override Discount (<code>PTDISC</code>): Optional discount amount to override default.</li> <li>Force Discount (<code>FDISC</code>): <code>'D'</code> to force discount, else blank.</li> <li>Pay or Hold (<code>PTPORH</code>): <code>'P'</code> to pay, <code>'H'</code> to hold (for vendor/voucher-specific transactions).</li> <li>Single Check (<code>PTSNGL</code>): <code>'S'</code> for single check per vendor, else blank.</li> <li>Prepaid Flag (<code>PTMKPP</code>): <code>'P'</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, <code>'U'</code> for prepaid vouchers, else blank.</li> <li>Prepaid Check Number (<code>PTPPCK</code>): Check number for prepaid vouchers.</li> <li>Prepaid Date (<code>PTPPDT</code>): Date for prepaid vouchers.</li> <li>Period/Year (<code>KYPD</code>, <code>KYPDYY</code>): Accounting period (1\u201313) and year (if 13 periods enabled in <code>GSCONT</code>).</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#outputs","title":"Outputs","text":"<ul> <li>Payment Records (<code>ADPPAY</code>): Records with company, vendor, voucher, payment amount, discount, check number, and payment type.</li> <li>Check Records (<code>ADPYCK</code>): Check details with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Reports (<code>APEEEXP</code>, <code>APEEEXPO</code>): Detailed reports with company, vendor, invoice details, check totals, and company totals.</li> <li>Summary File (<code>APEEPY</code>): Disk file with vendor payroll ID and payment amounts for payroll integration.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>CONO</code> exists in <code>APCONT</code>.</li> <li>Ensure <code>BKGL</code> is valid in <code>GLMAST</code> (not deleted/inactive).</li> <li>Confirm <code>BTCH \u2260 0</code>.</li> <li>Validate <code>CKDT</code> and <code>DATE</code> (MMDDYY format, valid month/day, leap year).</li> <li>If 13 accounting periods enabled (<code>GX13GL = 'Y'</code> in <code>GSCONT</code>), ensure <code>KYPD</code> is 1\u201313 and <code>CKDT</code> falls within period dates in <code>GSTABL</code>.</li> <li>Validate <code>KYHOLD</code> is <code>' '</code>, <code>'A'</code>, <code>'W'</code>, <code>'E'</code>, or <code>'U'</code>.</li> <li> <p>For vendor-specific transactions, verify <code>PTVEND</code> exists in <code>APVEND</code> and <code>PTVO</code> in <code>APOPEN</code> (if provided).</p> </li> <li> <p>Create Transactions:</p> </li> <li> <p>Store transaction details in <code>ADPYTR</code> with sequence number, company, bank G/L, batch, check date, pay-by date, payment type, and vendor/voucher details.</p> </li> <li> <p>Match Open Payables:</p> </li> <li>For pay-by-date transactions (<code>DATE \u2260 0</code>):<ul> <li>Select <code>APOPEN</code> records where <code>OPCONO = CONO</code>, <code>OPBKGL = BKGL</code>, due date (<code>OPDUED</code>) \u2264 <code>DATE</code>, and not deleted (<code>OPDEL \u2260 'D'</code>) or halted (<code>OPHALT \u2260 'H'</code>).</li> <li>Match payment type: <code>' '</code> (non-ACH/wire/employee/utility), <code>'A'</code> (<code>OPHALT = 'A'</code>), etc.</li> </ul> </li> <li> <p>For vendor-specific transactions:</p> <ul> <li>Select <code>APOPEN</code> records matching <code>PTVEND</code> (and <code>PTVO</code> if provided), <code>OPCONO</code>, and <code>OPBKGL</code> (if whole vendor).</li> <li>Override hold (<code>OPHALT = 'H'</code>) if <code>PTPORH = 'P'</code>.</li> <li>Validate prepaid flags match <code>KYHOLD</code>.</li> </ul> </li> <li> <p>Calculate Payment Amounts:</p> </li> <li>Gross amount: <code>OPGRAM</code> from <code>APOPEN</code>.</li> <li>Discount: Apply <code>PTDISC</code> (if provided), else <code>OPDISC</code> from <code>APOPEN</code>. Set to 0 if voucher is past due (<code>OPDUED &gt; CKDT</code>) or partially paid (<code>OPPPTD \u2260 0</code>) and <code>FDISC \u2260 'D'</code>.</li> <li>Payment amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li> <p>Partial payment: If <code>PTAMT \u2260 0</code>, set <code>OPLPAM = PTAMT</code> and adjust remaining <code>PTAMT</code>.</p> </li> <li> <p>Assign Check Numbers:</p> </li> <li>Use <code>PTPPCK</code> for prepaid vouchers.</li> <li>Use next check number (<code>PTNXCK</code>) from <code>ADPYTR</code> for non-prepaid.</li> <li>Set check number to 0 for credit/no pay (<code>OPLPAM = 0</code>).</li> <li> <p>Increment <code>PTNXCK</code> for each new check unless full stub or credit/no pay.</p> </li> <li> <p>Validate Checks:</p> </li> <li>Ensure non-void checks do not exist in <code>APCHKR</code> or are not open (<code>AMCODE \u2260 'O'</code>).</li> <li>For void checks, ensure they exist, are open, and match the full amount.</li> <li> <p>Mark negative or zero-amount checks as credit/no pay (<code>Hypothesized: (</code>AXRECD = 'C'`).</p> </li> <li> <p>Generate Outputs:</p> </li> <li>Write payment records to <code>ADPPAY</code> with company, vendor, voucher, payment amount, discount, check number, payment type, and single check flag.</li> <li>Write check records to <code>ADPYCK</code> with check number, amount, and status (normal, prepaid, credit/no pay, full stub).</li> <li>Generate reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with:<ul> <li>Headers: Company name, payment type, date, time.</li> <li>Details: Sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, voucher number.</li> <li>Totals: Check totals, company totals (employee count, gross, discount, payment amounts).</li> </ul> </li> <li>Write summary file (<code>APEEPY</code>) with vendor payroll ID (<code>VNPRID</code>) and negative payment amount.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#business-rules","title":"Business Rules","text":"<ol> <li>Validation:</li> <li>Company, bank G/L, and batch must be valid and non-zero.</li> <li>Dates must be valid and align with accounting periods (if 13 periods).</li> <li>Payment type must match voucher type in <code>APOPEN</code>.</li> <li>Vendor/voucher must exist for specific transactions.</li> <li>Payment Selection:</li> <li>Pay-by-date: Select vouchers due by <code>DATE</code>, not on hold unless overridden.</li> <li>Vendor-specific: Match vendor (and voucher if specified), override hold if <code>PTPORH = 'P'</code>.</li> <li>Prepaid vouchers must match payment type (<code>OPPAID = KYHOLD</code>).</li> <li>Discounts:</li> <li>Apply override discount (<code>PTDISC</code>) or default (<code>OPDISC</code>).</li> <li>Set discount to 0 for past due or partially paid vouchers unless forced (<code>FDISC = 'D'</code>).</li> <li>Payment Amount:</li> <li>Calculate as <code>OPGRAM - OPDISC - OPPPTD</code>.</li> <li>Adjust for partial payments (<code>PTAMT</code>).</li> <li>Check Handling:</li> <li>Single checks (<code>OPSNGL = 'S'</code>) for one-time vendors or specified cases.</li> <li>Maximum 12 invoices per stub; mark as full stub (<code>AXRECD = 'F'</code> or <code>'V'</code>).</li> <li>Negative/zero-amount checks marked as credit/no pay.</li> <li>Reporting:</li> <li>Include vendor name from <code>APVEND</code> or <code>APOPEN</code>.</li> <li>Display payment type labels (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Report errors for invalid checks (e.g., \"CHECK IS ALREADY OPEN\").</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#calculations","title":"Calculations","text":"<ul> <li>Payment Amount: <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>. If <code>PTAMT \u2260 0</code>, <code>OPLPAM = min(PTAMT, OPGRAM - OPDISC - OPPPTD)</code> and update <code>PTAMT</code>.</li> <li>Discount: <code>OPDISC = PTDISC</code> (if provided) or <code>OPOPEN.OPDISC</code>. Set to 0 if past due (<code>OPDUED &gt; CKDT</code>) or <code>OPPPTD \u2260 0</code> and <code>FDISC \u2260 'D'</code>.</li> <li>Check Number: <code>THISCK = OPCKNO</code> (prepaid), <code>PTNXCK</code> (non-prepaid), or 0 (credit/no pay). Increment <code>PTNXCK</code> unless full stub or credit/no pay.</li> <li>Totals: Accumulate gross (<code>CKGRAM</code>, <code>C6GRAM</code>, <code>P6GRAM</code>, <code>L6GRAM</code>), discount (<code>CKDISC</code>, <code>C6DISC</code>, <code>P6DISC</code>, <code>L6DISC</code>), and payment (<code>CKAMT</code>, <code>C6LPAM</code>, <code>P6LPAM</code>, <code>L6LPAM</code>) at check and company levels.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP140%20Summary%20Emp%20Expense/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>APCONT</code>: Company data.</li> <li><code>GLMAST</code>: G/L accounts.</li> <li><code>GSCONT</code>: System settings (13 periods).</li> <li><code>GSTABL</code>: Period end dates.</li> <li><code>APVEND</code>: Vendor details.</li> <li><code>APOPEN</code>: Open payables.</li> <li><code>APCHKR</code>: Check register.</li> <li><code>ADPYTR</code>: Transaction input.</li> <li><code>ADPPAY</code>: Payment output.</li> <li><code>ADPYCK</code>: Check output.</li> <li><code>APEEPY</code>: Payroll summary output.</li> <li><code>APEEEXP</code>, <code>APEEEXPO</code>: Report output.</li> </ul>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/","title":"AP141 RPG","text":"<p>The AP141.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that processes A/P payment transactions from the <code>ADPYTR</code> file (created by <code>AP140</code>) to generate payment records in the <code>ADPPAY</code> file, matching them against open payables in the <code>APOPEN</code> file. It is called in the OCL script after the first sort (<code>#GSORT</code>) and is part of the A/P Employee Expenses Report and Spreadsheet process. Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#process-steps-of-the-ap141-rpg-program","title":"Process Steps of the AP141 RPG Program","text":"<p>The <code>AP141</code> program reads transaction records from <code>ADPYTR</code>, matches them with open payables in <code>APOPEN</code>, and creates or updates payment records in <code>ADPPAY</code>. It handles two types of transaction records (distinguished by <code>NS 01</code> and <code>NS 02</code>) and supports payment methods like checks, ACH, wire transfers, employee expenses, and utility auto-pay. The program is structured around two main subroutines: <code>EACH01</code> (for pay-by-date records) and <code>EACH02</code> (for vendor-specific records).</p> <ol> <li>Program Initialization:</li> <li>The program reads <code>ADPYTR</code> records sequentially (defined as input primary file, <code>IP</code>) and processes them based on their type (<code>NS 01</code> or <code>NS 02</code>).</li> <li> <p>Record Type Check (lines 0067\u20130069):</p> <ul> <li>For <code>NS 01</code> records (pay by date), calls <code>EACH01</code> subroutine.</li> <li>For <code>NS 02</code> records (pay by vendor/voucher), checks if <code>PTDEL = 'D'</code> (deleted). If deleted, calls <code>EACH02</code>. Otherwise, processes normally.</li> </ul> </li> <li> <p>EACH01 Subroutine (Pay by Date) (lines 0072\u20130162):</p> </li> <li>Date Conversion (lines 0074\u20130092):<ul> <li>Converts <code>PTCKDT</code> (check date) and <code>PTDATE</code> (pay-by date) to 8-digit format (<code>CKYMD8</code>, <code>PTDAT8</code>) with century handling using <code>Y2KCEN</code> and <code>Y2KCMP</code>.</li> </ul> </li> <li>Check Pay-By Date (line 0094): If <code>PTDATE \u2260 0</code>, proceeds to match open payables; otherwise, skips to <code>END01</code>.</li> <li>Set Up <code>APOPEN</code> Read (lines 0099\u20130101):<ul> <li>If <code>PTFDIS = 'D'</code>, sets force discount flag (indicator 10).</li> <li>Sets lower limit (<code>OPLIM</code>) with <code>PTCONO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0103\u20130160, <code>AGN01</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or halted records (<code>OPHALT = 'H'</code>).</li> <li>Validates:</li> <li>Company number (<code>OPCONO = PTCONO</code>).</li> <li>Bank G/L number (<code>OPBKGL = PTBKGL</code>).</li> <li>Payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):<ul> <li>If <code>PTHOLD = ' '</code>, selects records where <code>OPHALT \u2260 'A', 'W', 'E', 'U'</code> (checks).</li> <li>If <code>PTHOLD = 'A'</code>, selects only <code>OPHALT = 'A'</code> (ACH).</li> <li>If <code>PTHOLD = 'W'</code>, selects only <code>OPHALT = 'W'</code> (wire transfer).</li> <li>If <code>PTHOLD = 'E'</code>, selects only <code>OPHALT = 'E'</code> (employee expense).</li> <li>If <code>PTHOLD = 'U'</code>, selects only <code>OPHALT = 'U'</code> (utility auto-pay).</li> </ul> </li> <li>Converts due date (<code>OPDUED</code>) to 8-digit format (<code>DTYMD8</code>).</li> <li>For prepaid vouchers (<code>OPPAID = 'P'</code> and <code>PTHOLD = ' '</code>), clears <code>OPCKNO</code> and <code>OPCKDT</code>.</li> <li>Skips vouchers with due date after <code>PTDATE</code> (<code>DTYMD8 &gt; PTDAT8</code>).</li> <li>For ACH, wire, employee expense, or utility auto-pay (<code>PTHOLD = 'A', 'W', 'E', 'U'</code>), sets <code>OPPAID</code>, <code>OPCKNO</code>, and <code>OPCKDT</code> accordingly.</li> </ul> </li> <li>Calculate Payment Amount (lines 0142\u20130149):<ul> <li>If voucher is past due (<code>DTYMD8 &gt; CKYMD8</code>) or force discount is off, sets <code>OPDISC = 0</code>.</li> <li>If partially paid (<code>OPPPTD \u2260 0</code>), sets <code>OPDISC = 0</code>.</li> <li>Calculates last payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).</li> </ul> </li> <li>Handle One-Time Vendor (lines 0151\u20130152): If <code>OPVEND = 0</code>, sets <code>OPSNGL = 'S'</code> (single check).</li> <li> <p>Write <code>ADPPAY</code> (lines 0154\u20130159):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>. If not found (indicator 89 on), adds new record; otherwise, updates existing record.</li> <li>Writes record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> </ul> </li> <li> <p>EACH02 Subroutine (Pay by Vendor/Voucher) (lines 0164\u20130281):</p> </li> <li>Validate Input (lines 0168\u20130171):<ul> <li>Sets force discount flag if <code>PTFDIS = 'D'</code> (indicator 10).</li> <li>Checks if paying whole vendor (<code>PTVO = 0</code>, indicator 12).</li> <li>Checks if partial payment (<code>PTAMT \u2260 0</code>, indicator 14).</li> <li>Checks if vendor/voucher is on hold (<code>PTPORH = 'H'</code>, indicator 15).</li> </ul> </li> <li>Set Up <code>APOPEN</code> Read (lines 0172\u20130178):<ul> <li>Constructs <code>OPLIM</code> with <code>PTCONO</code>, <code>PTVEND</code>, and <code>PTVO</code> for <code>APOPEN</code> read.</li> </ul> </li> <li>Read <code>APOPEN</code> Loop (lines 0180\u20130269, <code>AGN02</code> tag):<ul> <li>Reads <code>APOPEN</code> records, skipping detail records (indicator 06), deleted records (<code>OPDEL = 'D'</code>), or mismatched company (<code>OPCONO \u2260 PTCONO</code>) or vendor (<code>OPVEND \u2260 PTVEND</code>).</li> <li>For whole vendor (<code>PTVO = 0</code>), ensures <code>OPBKGL = PTBKGL</code>. For specific voucher, ensures <code>OPVONO = PTVO</code>.</li> <li>Validates payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>) as in <code>EACH01</code>.</li> <li>For prepaid vouchers (<code>PTMKPP \u2260 ' '</code>), ensures <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).</li> <li>For held vouchers (<code>OPHALT = 'H'</code>), requires <code>PTPORH = 'P'</code> to pay.</li> <li>Converts dates and sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH, wire, employee expense, or utility auto-pay.</li> </ul> </li> <li>Calculate Payment Amount (lines 0242\u20130258):<ul> <li>Applies override discount (<code>PTDISC</code>) if provided (<code>OPDISC = PTDISC</code>).</li> <li>Adjusts <code>OPDISC</code> for past due or partially paid vouchers.</li> <li>Calculates <code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>.</li> <li>For partial payments (<code>PTAMT \u2260 0</code>), adjusts <code>OPLPAM</code> and <code>PTAMT</code> accordingly.</li> </ul> </li> <li>Handle Single Check and One-Time Vendor (lines 0260\u20130265):<ul> <li>Sets <code>OPSNGL = PTSNGL</code> if provided, or <code>'S'</code> for one-time vendors (<code>PTVEND = 0</code>).</li> </ul> </li> <li> <p>Write/Delete <code>ADPPAY</code> (lines 0267\u20130279):</p> <ul> <li>Chains to <code>ADPPAY</code> with <code>OPKEY</code>.</li> <li>If on hold (<code>PTPORH = 'H'</code>), marks <code>ADPPAY</code> record for deletion (<code>PYDEL = 'D'</code>).</li> <li>Otherwise, adds or updates <code>ADPPAY</code> record with fields as in <code>EACH01</code>.</li> </ul> </li> <li> <p>File Output (lines 0284\u20130303):</p> </li> <li>Add (<code>EADD 80 89</code>): Writes new <code>ADPPAY</code> record with <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPBKGL</code>, <code>OPLPAM</code>, <code>OPCKDT</code>, <code>PTSEQ#</code>.</li> <li>Update/Delete (<code>E 80N89</code>): Updates existing <code>ADPPAY</code> record, setting <code>PYDEL</code> to <code>'D'</code> for deletion or <code>' '</code> for update.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Selection:    - Skips deleted records (<code>OPDEL = 'D'</code>), detail records, or halted records (<code>OPHALT = 'H'</code>) unless explicitly set to pay (<code>PTPORH = 'P'</code>).    - Matches company number (<code>OPCONO = PTCONO</code>) and bank G/L number (<code>OPBKGL = PTBKGL</code>).    - Matches payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>):      - <code>' '</code> (checks): Selects non-ACH/wire/employee/utility vouchers.      - <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility): Selects matching <code>OPHALT</code>. 2. Pay by Date (<code>EACH01</code>):    - Processes vouchers with due date (<code>OPDUED</code>) \u2264 pay-by date (<code>PTDATE</code>).    - Clears check number/date (<code>OPCKNO</code>, <code>OPCKDT</code>) for prepaid vouchers if paying by check.    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for ACH/wire/employee/utility payments. 3. Pay by Vendor/Voucher (<code>EACH02</code>):    - Matches vendor (<code>OPVEND = PTVEND</code>) and, if specified, voucher (<code>OPVONO = PTVO</code>).    - For whole vendor (<code>PTVO = 0</code>), ensures bank G/L match.    - Allows partial payments (<code>PTAMT</code>) and override discounts (<code>PTDISC</code>).    - Deletes <code>ADPPAY</code> records for held vendors/vouchers (<code>PTPORH = 'H'</code>). 4. Discount Handling:    - Applies force discount (<code>PTFDIS = 'D'</code>) unless voucher is past due or partially paid.    - Uses override discount (<code>PTDISC</code>) if provided.    - Sets discount to 0 for past due or partially paid vouchers. 5. Payment Amount:    - Calculates payment amount (<code>OPLPAM = OPGRAM - OPDISC - OPPPTD</code>).    - Adjusts for partial payments, ensuring <code>PTAMT</code> does not exceed remaining amount. 6. Single Check and One-Time Vendor:    - Sets <code>OPSNGL = 'S'</code> for one-time vendors (<code>OPVEND = 0</code>) or if specified (<code>PTSNGL \u2260 ' '</code>). 7. Prepaid Vouchers:    - Allows prepayment only if <code>OPPAID</code> matches <code>PTHOLD</code> (e.g., <code>'A'</code> for ACH).    - Sets <code>OPPAID</code>, <code>OPCKNO</code>, <code>OPCKDT</code> for prepaid records.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPYTR: A/P transaction file (128 bytes, input primary, <code>IP</code>). Contains transaction data (e.g., <code>PTCONO</code>, <code>PTBKGL</code>, <code>PTCKDT</code>, <code>PTDATE</code>, <code>PTHOLD</code>, <code>PTVEND</code>, <code>PTVO</code>). 2. APOPEN: A/P open items file (384 bytes, input with database relations, <code>ID</code>, indexed by 16 keys). Contains open payables (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPPAID</code>). 3. ADPPAY: A/P payment file (226 bytes, update mode, <code>UC</code>, indexed by 16 keys). Stores payment records (e.g., <code>PYDEL</code>, <code>OPREC</code>, <code>OPDISC</code>, <code>OPCKNO</code>, <code>OPPAID</code>, <code>OPSNGL</code>, <code>OPLPAM</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP141</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>EACH01</code>, <code>EACH02</code>) for Rosettacut 4 times: System, System, System, System for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP141%20RPG/#summary","title":"Summary","text":"<p>AP141 processes <code>ADPYTR</code> transactions to create or update <code>ADPPAY</code> records by matching against <code>APOPEN</code>. It: - Handles two transaction types: pay by date (<code>EACH01</code>) and pay by vendor/voucher (<code>EACH02</code>). - Validates company, bank G/L, and payment type (<code>PTHOLD</code> vs. <code>OPHALT</code>). - Manages discounts, partial payments, and prepaid vouchers. - Supports checks, ACH, wire transfers, employee expenses, and utility auto-pay. - Uses three files (<code>ADPYTR</code>, <code>APOPEN</code>, <code>ADPPAY</code>) and no external programs. - Outputs <code>ADPPAY</code> records for the next sort and <code>AP145</code> processing in the OCL script.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/","title":"AP145 RPG","text":"<p>The AP145.rpg36.txt is an RPG/36 program (used on IBM System/36 or AS/400 systems) that generates the Employee Expenses Voucher Selection Spreadsheet and Report as part of the A/P process. It is the final program called in the OCL script after the second sort (<code>#GSORT</code>) and processes sorted payment records from <code>ADPPAY</code> to produce reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) and a disk file (<code>APEEPY</code>). Below, I explain the process steps, business rules, tables used, and external programs called, referencing the context of the OCL script and prior programs (<code>AP140</code>, <code>AP141</code>).</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#process-steps-of-the-ap145-rpg-program","title":"Process Steps of the AP145 RPG Program","text":"<p>The <code>AP145</code> program processes payment records from <code>ADPPAY</code> (sorted by company, bank G/L, vendor, prepaid code, check number, and single check code) and <code>AP145S</code> (a sorted version of <code>ADPPAY</code>) to generate detailed employee expense reports and a summary file. It accumulates totals, validates checks, and handles payment types (checks, ACH, wire transfers, employee expenses, utility auto-pay). The program uses subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) to manage processing.</p> <ol> <li>Program Initialization:</li> <li>Reads <code>ADPPAY</code> as the primary file (<code>UP</code>) and <code>AP145S</code> as a secondary file (<code>IR</code>) with matching records logic.</li> <li>Level Breaks (lines 0061\u20130069):<ul> <li>At company level break (<code>L6</code>, company change), calls <code>L6DET</code> to initialize company-level data and print headers.</li> <li>At vendor level break (<code>L4</code>, vendor change), sets indicator 14 and calls <code>L4DET</code> to process vendor details.</li> <li>At prepaid code level (<code>L3</code>), checks <code>OPPAID</code> for <code>'P'</code> (check, indicator 25), <code>'A'</code> (ACH, 26), <code>'W'</code> (wire transfer, 27), <code>'E'</code> (employee expense, 28), or <code>'U'</code> (utility auto-pay, 29). Sets indicator 11 for prepaid records.</li> <li>At single check level (<code>L1</code>, <code>OPSNGL = 'S'</code>), sets indicator 10 for single check processing.</li> </ul> </li> <li> <p>Stub Check (line 0070): If stub is full (<code>COUNT = 12</code>, indicator 12) and not prepaid (indicator 11 off), calls <code>CHECK</code> to process the check.</p> </li> <li> <p>Process Each Invoice (lines 0073\u20130082):</p> </li> <li>Accumulates totals: <code>CKGRAM</code> (gross amount), <code>CKDISC</code> (discount), <code>CKAMT</code> (payment amount).</li> <li>Calculates negative amount (<code>NEGAMT = CKAMT * -1</code>) for reporting.</li> <li>Increments invoice count (<code>COUNT</code>).</li> <li>Calls <code>L4DET</code> at vendor break (indicator 14 on).</li> <li>Writes detail record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicator 80) and updates <code>ADPPAY</code> with sequence number (<code>SEQ#</code>).</li> <li> <p>Sets overflow indicator (76) if printer overflow occurs (<code>OF</code> on).</p> </li> <li> <p>Check for Full Stub (lines 0085\u20130092):</p> </li> <li>If not a single check (<code>L1</code> off) and <code>COUNT = 12</code> (indicator 12 on), sets full stub condition.</li> <li> <p>For single checks (<code>L1</code> on) or non-single checks with full stub, calls <code>CHECK</code> to finalize the check.</p> </li> <li> <p>Company-Level Processing (<code>L6</code> Break) (lines 0095\u20130109):</p> </li> <li>Sets indicator 86 to print company totals.</li> <li>Writes company total record to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>).</li> <li> <p>Resets company-level counters (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>, <code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>, <code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</p> </li> <li> <p>L6DET Subroutine (Company-Level Processing) (lines 0112\u20130126):</p> </li> <li>Initializes page number (<code>PAGE = 0</code>) and separator (<code>SEP = '* '</code>).</li> <li>Gets current date and time (<code>TIME</code>, <code>DATE</code>) and converts <code>DATE</code> to 8-digit format (<code>DATE8</code>).</li> <li>Chains to <code>APCONT</code> with <code>OPCONO</code> to get company name (<code>ACNAME</code>) and pre-numbered check flag (<code>ACPRE#</code>).</li> <li>Chains to <code>ADPYTR</code> with <code>'00000'</code> to get next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>).</li> <li>Sets <code>PAYBY</code> based on <code>PTHOLD</code>:<ul> <li><code>' '</code>: \"PAY BY CHECK\"</li> <li><code>'A'</code>: \"PAY BY ACH\"</li> <li><code>'W'</code>: \"PAY BY WIRE TFR\"</li> <li><code>'E'</code>: \"PAY BY PAYROLL\"</li> <li><code>'U'</code>: \"PAY BY UTIL-AUPY\"</li> </ul> </li> <li> <p>Writes report header to <code>APEEEXP</code>/<code>APEEEXPO</code> (via <code>EXCPT</code>, indicators 76, 77).</p> </li> <li> <p>L4DET Subroutine (Vendor-Level Processing) (lines 0128\u20130144):</p> </li> <li>Constructs vendor key (<code>VNKEY</code>) from <code>OPCONO</code> and <code>OPVEND</code>.</li> <li>Chains to <code>APVEND</code> to get vendor name (<code>VNNAME</code>) and sort abbreviation (<code>VNSORT</code>).</li> <li>If not found (indicator 94 on), chains to <code>APOPEN</code> with <code>OPKEY</code> (constructed from <code>VNKEY</code>, <code>OPVONO</code>, and <code>'3001'</code>) to get <code>VNNAME</code> and <code>VNSORT</code>.</li> <li>If still not found, clears <code>VNNAME</code> and <code>VNSORT</code>.</li> <li> <p>Writes vendor detail to <code>APEEEXP</code> (via <code>EXCPT</code>, indicator 74) and handles overflow.</p> </li> <li> <p>CHECK Subroutine (Check Processing) (lines 0146\u20130194):</p> </li> <li>Resets indicators 19 (credit/no pay) for non-prepaid and non-full stub cases.</li> <li>Sets check number (<code>THISCK</code>):<ul> <li>For prepaid (<code>OPPAID = 'P', 'A', 'W', 'E', 'U'</code>), uses <code>OPCKNO</code>.</li> <li>For credit/no pay (<code>CKAMT = 0</code>), sets <code>THISCK = 0</code>.</li> <li>Otherwise, uses <code>PTNXCK</code> (next check number).</li> </ul> </li> <li>If credit/no pay or full stub without pre-numbered checks, calls <code>NOPAY</code>.</li> <li>Calls <code>EDITCK</code> to validate check.</li> <li>Writes check record to <code>ADPYCK</code> (via <code>EXCPT</code>, indicator 81).</li> <li>Increments <code>NXCK</code> (next check number) unless credit/no pay or full stub.</li> <li>Updates counters:<ul> <li>Non-prepaid, non-credit (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>).</li> <li>Prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>).</li> <li>Non-credit (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>).</li> </ul> </li> <li> <p>Resets <code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>, <code>NEGAMT</code>, <code>COUNT</code>, and sets vendor break (indicator 14).</p> </li> <li> <p>NOPAY Subroutine (Credit/No Pay Processing) (lines 0196\u20130217):</p> </li> <li>Handles negative or zero-amount checks by marking related <code>ADPYCK</code> records as credit/no pay (<code>AXRECD = 'C'</code>).</li> <li>Reads backward through <code>ADPYCK</code> starting from <code>SEQ#</code> (<code>CRSEQ#</code>).</li> <li>For full stub records (<code>AXRECD = 'F'</code> or <code>'V'</code>), updates <code>NXCK</code>, decrements counters (<code>C6CNT</code>, <code>L6CNT</code>), sets <code>AXRECD = 'C'</code>, and clears <code>AXCHEK</code>.</li> <li> <p>Writes updated <code>ADPYCK</code> record (via <code>EXCPTNOPAYX</code>).</p> </li> <li> <p>EDITCK Subroutine (Check Validation) (lines 0219\u20130248):</p> </li> <li>Validates check amount (<code>CKAMT</code>):<ul> <li>If <code>CKAMT = 0</code>, sets indicators 20 and 21 (credit/no pay).</li> </ul> </li> <li>Constructs check key (<code>ATKEY</code>) from <code>OPCONO</code>, <code>OPBKGL</code>, and <code>THISCK</code>.</li> <li> <p>Chains to <code>APCHKR</code> to check if the check exists:</p> <ul> <li>For non-void checks (<code>CKAMT \u2260 0</code> and not found), ensures <code>AMCODE \u2260 'O'</code> (open). If open, sets error indicator 23.</li> <li>For void checks (<code>CKAMT = 0</code> and found), ensures <code>AMCODE = 'O'</code> and <code>VOIDAM = AMCKAM</code>. If not, sets error 23.</li> </ul> </li> <li> <p>File Output (lines 0251\u20130470):</p> <ul> <li>ADPPAY: Updates <code>SEQ#</code> for each record.</li> <li>ADPYCK:</li> <li>Adds records with <code>AXRECD</code> set to <code>' '</code> (normal), <code>'C'</code> (credit/no pay), <code>'P'</code> (prepaid check), <code>'A'</code> (ACH), <code>'W'</code> (wire), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay), <code>'F'</code> (full stub), or <code>'V'</code> (full stub/void).</li> <li>Includes <code>OPCONO</code>, <code>OPBKGL</code>, <code>THISCK</code>, <code>OPVEND</code>, <code>CKAMT</code>, <code>PTCKDT</code> or <code>OPCKDT</code>, <code>VNNAME</code>, <code>SEQ#</code>, <code>COUNT</code>.</li> <li>APEEPY: Writes summary records with ADP payroll ID (<code>VNPRID</code>) and negative amount (<code>NEGAMT</code>).</li> <li>APEEEXP/APEEEXPO:</li> <li>Prints headers with company name, payment type (<code>PAYBY</code>), date, time, and column labels.</li> <li>Prints detail lines with sequence number, invoice number, description, gross amount, discount, partial paid to date, payment amount, due date, vendor, and voucher number.</li> <li>Prints check totals, prepaid indicators, and error messages (e.g., \"CHECK IS ALREADY OPEN\").</li> <li>Prints company totals with employee count and aggregates.</li> </ul> </li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Payment Type Handling:</li> <li>Processes payments based on <code>OPPAID</code>/<code>PTHOLD</code>: <code>'P'</code> (check), <code>'A'</code> (ACH), <code>'W'</code> (wire transfer), <code>'E'</code> (employee expense), <code>'U'</code> (utility auto-pay).</li> <li>Labels payment types in reports (e.g., \"PAY BY CHECK\", \"PAY BY UTIL-AUPY\").</li> <li>Check Number Assignment:</li> <li>Uses <code>OPCKNO</code> for prepaid checks, <code>PTNXCK</code> for non-prepaid, or 0 for credit/no pay.</li> <li>Increments <code>PTNXCK</code> for new checks unless full stub or credit/no pay.</li> <li>Stub Limits:</li> <li>Limits stubs to 12 invoices (<code>COUNT = 12</code> triggers full stub).</li> <li>Marks full stubs as <code>'F'</code> or <code>'V'</code> (void) in <code>ADPYCK</code>.</li> <li>Credit/No Pay:</li> <li>Negative or zero-amount checks (<code>CKAMT = 0</code>) are marked as credit/no pay (<code>AXRECD = 'C'</code>) with <code>AXCHEK = 0</code>.</li> <li>Adjusts prior full stub records in <code>ADPYCK</code> to credit/no pay.</li> <li>Check Validation:</li> <li>Non-void checks must not exist in <code>APCHKR</code> or must not be open (<code>AMCODE \u2260 'O'</code>).</li> <li>Void checks must exist, be open (<code>AMCODE = 'O'</code>), and have matching amounts.</li> <li>Vendor Information:</li> <li>Retrieves <code>VNNAME</code> and <code>VNSORT</code> from <code>APVEND</code> or <code>APOPEN</code> if not found.</li> <li>Uses ADP payroll ID (<code>VNPRID</code>) for <code>APEEPY</code> output.</li> <li>Totals and Aggregates:</li> <li>Tracks company-level (<code>L6CNT</code>, <code>L6GRAM</code>, <code>L6DISC</code>, <code>L6LPAM</code>), prepaid (<code>P6CNT</code>, <code>P6GRAM</code>, <code>P6DISC</code>, <code>P6LPAM</code>), and check-level (<code>C6CNT</code>, <code>C6GRAM</code>, <code>C6DISC</code>, <code>C6LPAM</code>) totals.</li> <li>Resets check-level totals (<code>CKGRAM</code>, <code>CKDISC</code>, <code>CKAMT</code>) after each check.</li> <li>Report Formatting:</li> <li>Prints detailed reports with invoice details, check totals, and company summaries.</li> <li>Handles overflow and page breaks.</li> <li>Outputs summary data to <code>APEEPY</code> for payroll integration.</li> </ol>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ADPPAY: A/P payment file (226 bytes, update mode, <code>UP</code>, indexed by 16 keys). Primary input with payment data (e.g., <code>OPCONO</code>, <code>OPVEND</code>, <code>OPVONO</code>, <code>OPGRAM</code>, <code>OPDISC</code>, <code>OPLPAM</code>, <code>OPPAID</code>). 2. AP145S: Sorted A/P payment file (3 bytes, input with relations, <code>IR</code>). Used for matching records (extension of <code>ADPPAY</code>). 3. APCONT: A/P control file (256 bytes, input, <code>IC</code>, indexed by 2 keys). Contains company data (e.g., <code>ACNAME</code>, <code>ACPRE#</code>). 4. ADPYTR: A/P transaction file (128 bytes, input, <code>IC</code>, indexed by 5 keys). Provides next check number (<code>PTNXCK</code>) and payment type (<code>PTHOLD</code>). 5. APVEND: Vendor master file (579 bytes, input, <code>IC</code>, indexed by 7 keys). Contains vendor details (e.g., <code>VNNAME</code>, <code>VNSORT</code>, <code>VNPRID</code>). 6. APOPEN: A/P open items file (384 bytes, input, <code>IC</code>, indexed by 16 keys). Provides vendor name and sort data if not in <code>APVEND</code>. 7. APCHKR: Check register file (128 bytes, input, <code>IC</code>, indexed by 16 keys). Validates check status (<code>AMCODE</code>, <code>AMCKAM</code>). 8. ADPYCK: Check file (96 bytes, update mode, <code>UC</code>, indexed by 9 keys). Stores check records (e.g., <code>AXRECD</code>, <code>AXCHEK</code>). 9. APEEEXP: Printer file (142 bytes, output, <code>O</code>). Primary employee expense report. 10. APEEEXPO: Printer file (142 bytes, output, <code>O</code>). Secondary report (paperless). 11. APEEPY: Employee expense disk file (74 bytes, output, <code>O</code>). Summary for payroll integration.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP145</code> program does not explicitly call any external programs. It is self-contained, relying on internal subroutines (<code>L6DET</code>, <code>L4DET</code>, <code>CHECK</code>, <code>NOPAY</code>, <code>EDITCK</code>) for processing.</p>"},{"location":"accounts-payable/06%20ADP%20Expenses/AP145%20RPG/#summary","title":"Summary","text":"<p>AP145 generates the final employee expense report and spreadsheet by: - Processing sorted <code>ADPPAY</code> records to accumulate invoice and check totals. - Validating checks against <code>APCHKR</code> and handling credit/no pay cases. - Retrieving vendor and company data from <code>APVEND</code>, <code>APOPEN</code>, and <code>APCONT</code>. - Writing check records to <code>ADPYCK</code> and summary data to <code>APEEPY</code>. - Printing detailed reports (<code>APEEEXP</code>, <code>APEEEXPO</code>) with headers, invoice details, check totals, and company summaries. - Supporting payment types (checks, ACH, wire, employee expense, utility auto-pay). - Using 11 files and no external programs.</p> <p>The output (<code>APEEEXP</code>, <code>APEEEXPO</code>, <code>APEEPY</code>) completes the A/P employee expense process defined in the OCL script.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/","title":"AP760 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AP760.ocl36.txt</code>, which is called by the main OCL program <code>AP760P.ocl36.txt</code> as part of the vendor 1099 register process on an IBM AS/400 or iSeries system. This OCL program orchestrates the sorting, processing, and reporting of vendor 1099 data. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used, based on the provided OCL code and its context within the 1099 register process.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#process-steps-of-the-ap760-ocl-program","title":"Process Steps of the AP760 OCL Program","text":"<p>The <code>AP760.ocl36.txt</code> OCL program is responsible for sorting the 1099 data file, processing it to generate an intermediate file, and then producing the final 1099 register report. It relies on parameters passed from the main OCL (<code>AP760P.ocl36.txt</code>) and the validated inputs from the RPG program <code>AP760P.rpg36.txt</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Set Year in Local Data Area (LDA):</li> <li> <p>The program sets the 1099 year (<code>?10?</code>, e.g., <code>2025</code>) into the Local Data Area (LDA) at offset 142 with the command <code>LOCAL OFFSET-142,DATA-'?10?'</code>. This makes the year available to subsequent programs.</p> </li> <li> <p>Delete Existing Temporary File:</p> </li> <li> <p>If the temporary file <code>?9?AP761</code> (e.g., <code>PRODAP761</code> if <code>?9?</code> is <code>PROD</code>) exists, it is deleted using <code>IF DATAF1-?9?AP761 DELETE ?9?AP761,F1</code>. This ensures a clean slate for the intermediate file created later.</p> </li> <li> <p>Set Company and Type Selection in LDA:</p> </li> <li>Company Selection:<ul> <li>If <code>?L'111,3'?</code> (likely <code>KYALCO</code> from <code>AP760P.rpg36.txt</code>) equals <code>'CO'</code>, set LDA offset 1 to <code>'IAC'</code> (indicating specific companies).</li> <li>Otherwise, set LDA offset 1 to <code>'I*C'</code> (indicating all companies).</li> </ul> </li> <li>Type Selection:<ul> <li>If <code>?L'135,3'?</code> (likely <code>KYALTY</code> from <code>AP760P.rpg36.txt</code>) equals <code>'TYP'</code>, set LDA offset 4 to <code>'IAC'</code> (indicating specific 1099 types).</li> <li>Otherwise, set LDA offset 4 to <code>'I*C'</code> (indicating all 1099 types).</li> </ul> </li> <li> <p>These settings control filtering in the subsequent sort operation.</p> </li> <li> <p>Sort the 1099 File:</p> </li> <li>Load Sort Program: The program loads the system sort utility <code>#GSORT</code>.</li> <li>File Definitions:<ul> <li>Input file: <code>?13?</code> (e.g., <code>APVN2025</code>, the 1099 data file created by <code>AP300</code>).</li> <li>Output file: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>), a temporary sorted file with up to 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li>Sort sequence: Ascending (<code>HSORTA 22A</code>).</li> <li>Primary sort field: 1099 type (field at positions 264\u2013264, 1 byte).</li> <li>Secondary sort field: Vendor (field at positions 4\u20138, 5 bytes).</li> <li>Tertiary sort field: Company (field at positions 2\u20133, 2 bytes).</li> </ul> </li> <li>Record Selection:<ul> <li>Exclude records marked as deleted (position 1 \u2260 <code>'D'</code>).</li> <li>Apply conditional filters based on company and type selections:</li> <li>If specific companies (<code>'CO'</code>), include records where company (positions 2\u20133) matches <code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code> (from <code>?L'114,2'</code>, <code>?L'116,2'</code>, <code>?L'118,2'</code>).</li> <li>If specific types (<code>'TYP'</code>), include records where 1099 type (position 264) matches <code>KYTY1</code>, <code>KYTY2</code>, or <code>KYTY3</code> (from <code>?L'138,1'</code>, <code>?L'139,1'</code>, <code>?L'140,1'</code>).</li> <li>If <code>'ALL'</code> is selected for companies or types, no specific matching is applied (handled by <code>I*C</code> in LDA).</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes the sort, producing the sorted file <code>?9?AP760S</code>.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li>Load Program <code>AP761</code>:<ul> <li>Input files:</li> <li><code>APVEND</code>: The original 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>), shared access.</li> <li><code>AP760S</code>: The sorted file (<code>?9?AP760S</code>).</li> <li>Output file: <code>AP761</code> (<code>?9?AP761</code>), a temporary file with 1,000 records, extendable by 500.</li> <li>Purpose: The <code>AP761</code> program processes the sorted data to create an intermediate file (<code>?9?AP761</code>) for reporting. It likely aggregates or formats the 1099 data based on the sorted input.</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes <code>AP761</code>.</p> </li> <li> <p>Generate 1099 Register Report:</p> </li> <li>Load Program <code>AP760</code>:<ul> <li>Input files:</li> <li><code>AP761</code>: The intermediate file (<code>?9?AP761</code>), shared access.</li> <li><code>GSTABL</code>: Table file (<code>?9?GSTABL</code>, e.g., <code>PRODGSTABL</code>), shared access, likely used for 1099 type descriptions.</li> <li>Purpose: The <code>AP760</code> program generates the final 1099 register report, using the processed data from <code>?9?AP761</code> and reference data from <code>GSTABL</code>.</li> </ul> </li> <li> <p>Execution: The <code>RUN</code> command executes <code>AP760</code>.</p> </li> <li> <p>Clean Up Temporary File:</p> </li> <li>After processing, if the temporary file <code>?9?AP761</code> exists, it is deleted (<code>IF DATAF1-?9?AP761 DELETE ?9?AP761,F1</code>) to free up resources.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs:</p> <ol> <li>#GSORT:</li> <li>System sort utility used to sort the 1099 data file (<code>?13?</code>) into a temporary sorted file (<code>?9?AP760S</code>).</li> <li> <p>Purpose: Sorts records by 1099 type, vendor, and company, applying filters based on user selections.</p> </li> <li> <p>AP761:</p> </li> <li>An RPG or CL program (not provided) that processes the sorted file (<code>?9?AP760S</code>) and the original 1099 file (<code>?13?</code>) to produce an intermediate file (<code>?9?AP761</code>).</li> <li> <p>Purpose: Likely aggregates or formats 1099 data for reporting.</p> </li> <li> <p>AP760:</p> </li> <li>An RPG or CL program (not provided, but likely the main report generator) that uses the intermediate file (<code>?9?AP761</code>) and table file (<code>?9?GSTABL</code>) to produce the final 1099 register report.</li> <li>Purpose: Generates the formatted 1099 register output, possibly a printed report or file.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#tables-used","title":"Tables Used","text":"<p>The OCL program references the following files (tables):</p> <ol> <li>INPUT (labeled ?13?):</li> <li>Name: <code>?13?</code> (e.g., <code>APVN2025</code>, the 1099 data file created by <code>AP300</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li> <p>Purpose: Input to the <code>#GSORT</code> program, containing raw vendor 1099 data (e.g., <code>GAPVEND</code> before monthly/yearly totals are cleared).</p> </li> <li> <p>OUTPUT (labeled ?9?AP760S):</p> </li> <li>Name: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>).</li> <li>Type: Disk file, temporary, up to 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> <li> <p>Purpose: Sorted output from <code>#GSORT</code>, used as input to <code>AP761</code>.</p> </li> <li> <p>APVEND (labeled ?13?):</p> </li> <li>Name: <code>?13?</code> (e.g., <code>APVN2025</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li> <p>Purpose: Input to <code>AP761</code>, providing the original 1099 data for processing.</p> </li> <li> <p>AP760S (labeled ?9?AP760S):</p> </li> <li>Name: <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>).</li> <li>Type: Disk file, used as input to <code>AP761</code>.</li> <li> <p>Purpose: Contains sorted 1099 data from <code>#GSORT</code>.</p> </li> <li> <p>AP761 (labeled ?9?AP761):</p> </li> <li>Name: <code>?9?AP761</code> (e.g., <code>PRODAP761</code>).</li> <li>Type: Disk file, temporary, 1,000 records, extendable by 500.</li> <li> <p>Purpose: Output from <code>AP761</code>, input to <code>AP760</code>, containing processed 1099 data for the final report.</p> </li> <li> <p>GSTABL (labeled ?9?GSTABL):</p> </li> <li>Name: <code>?9?GSTABL</code> (e.g., <code>PRODGSTABL</code>).</li> <li>Type: Disk file, shared access (<code>DISP-SHR</code>).</li> <li>Purpose: Reference table used by <code>AP760</code>, likely containing 1099 type descriptions or other lookup data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#integration-with-main-ocl-and-rpg-program","title":"Integration with Main OCL and RPG Program","text":"<p>The <code>AP760.ocl36.txt</code> program is called by <code>AP760P.ocl36.txt</code> after the RPG program <code>AP760P.rpg36.txt</code> validates user inputs. Here\u2019s how it integrates:</p> <ul> <li>Parameters from AP760P:</li> <li>The main OCL passes parameters <code>?9?</code> (library prefix), <code>?10?</code> (year), and <code>?13?</code> (1099 file name, e.g., <code>APVN2025</code>).</li> <li> <p>The RPG program <code>AP760P</code> sets fields in the LDA (e.g., <code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCYYR</code>) at offsets like 111, 114\u2013118, 135, 138\u2013140, etc., which are referenced in the sort logic (<code>?L'111,3'?</code>, <code>?L'114,2'?</code>, etc.).</p> </li> <li> <p>Job Queue Execution:</p> </li> <li> <p>The main OCL (<code>AP760P.ocl36.txt</code>) decides whether to run <code>AP760</code> (this OCL or its final program) interactively or via a job queue based on <code>?L'120,1'?</code> (<code>KYJOBQ</code> from <code>AP760P</code>).</p> </li> <li> <p>File Usage:</p> </li> <li>The 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>) is created by <code>AP300</code> (period-end processing) and used as input.</li> <li> <p>The <code>GSTABL</code> file is shared with <code>AP760P.rpg36.txt</code> for validating 1099 types and used here for report generation.</p> </li> <li> <p>Cancellation:</p> </li> <li>If <code>AP760P.rpg36.txt</code> sets <code>KYCANC</code> to <code>'CANCEL'</code> (offset 129\u2013134), the main OCL cancels the job before calling this OCL.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program sets the 1099 year in the LDA, deletes any existing temporary file, configures company and type selections, sorts the 1099 data by type, vendor, and company, processes the sorted data into an intermediate file, generates the final 1099 register report, and cleans up the temporary file.</li> <li>External Programs Called:</li> <li><code>#GSORT</code>: System sort utility for sorting the 1099 file.</li> <li><code>AP761</code>: Processes sorted data into an intermediate file.</li> <li><code>AP760</code>: Generates the final 1099 register report.</li> <li>Tables Used:</li> <li><code>?13?</code> (e.g., <code>APVN2025</code>): Input 1099 data.</li> <li><code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>): Sorted output.</li> <li><code>APVEND</code> (same as <code>?13?</code>): Input to <code>AP761</code>.</li> <li><code>AP760S</code> (same as <code>?9?AP760S</code>): Input to <code>AP761</code>.</li> <li><code>?9?AP761</code> (e.g., <code>PRODAP761</code>): Intermediate file.</li> <li><code>?9?GSTABL</code> (e.g., <code>PRODGSTABL</code>): Reference table for 1099 types.</li> </ul> <p>This OCL program orchestrates the backend processing of the 1099 register, transforming raw vendor data into a sorted, processed, and report-ready format, building on the validated inputs from <code>AP760P.rpg36.txt</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/","title":"AP760 RPG36","text":"<p>The <code>AP760.rpg36.txt</code> is an RPG/36 program (likely running on an IBM System/36 or AS/400 environment) called from the <code>AP760P.ocl36.txt</code> OCL program to generate a Vendor 1099 Register. This program processes vendor data from the <code>AP761</code> file and produces a printed report (<code>APPRINT</code>) summarizing 1099-related information, such as vendor payments categorized by 1099 box types (e.g., rent, medical, miscellaneous). Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the provided RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#process-steps-of-the-rpg36-program-ap760","title":"Process Steps of the RPG/36 Program (AP760)","text":"<p>The <code>AP760</code> program reads vendor data from the <code>AP761</code> file, retrieves 1099 type descriptions from <code>GSTABL</code>, accumulates totals for specific 1099 boxes, and outputs a formatted report to the printer file <code>APPRINT</code>. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (lines 0026\u20130032):</li> <li> <p>ONCE Subroutine:</p> <ul> <li>Checks if the <code>ONCE</code> flag is zero (first execution) (line 0026).</li> <li>Retrieves the system time and date using the <code>TIME</code> operation and stores them in <code>TIMDAT</code> (12 bytes), then moves them to <code>TIME</code> (6 bytes, time) and <code>DATE</code> (6 bytes, date) fields (lines 0027\u20130029).</li> <li>Initializes the <code>SEP</code> array (66 elements, 2 bytes each) with <code>'* '</code> for use as a separator in the report (line 0030).</li> <li>Sets <code>ONCE</code> to 1 to prevent re-execution (line 0031).</li> </ul> </li> <li> <p>Processing Vendor Records (Level 2 Break - L2):</p> </li> <li>The program processes records from the <code>AP761</code> file at level 2 (L2), indicated by the <code>L2</code> indicator, which suggests a control break for grouping records by 1099 type (<code>VN1099</code>).</li> <li> <p>Steps for Each L2 Group (lines 0034\u20130074):</p> <ul> <li>Initializes the table key (<code>TBKEY</code>, 12 bytes) to blanks and sets the prefix to <code>'AP1099'</code> (lines 0034\u20130035).</li> <li>Appends the vendor\u2019s 1099 code (<code>VN1099</code>) to <code>TBKEY</code> and chains to the <code>GSTABL</code> file to retrieve the corresponding description (<code>TBDESC</code>) (lines 0036\u20130037).</li> <li>If the record is not found (indicator 99 on) and <code>KYTY1</code> (from UDS, set by <code>AP760P</code>) is neither <code>'M'</code> (miscellaneous) nor <code>'N'</code> (non-employee compensation), sets indicators 33 or 34 to adjust report formatting (line 0037).</li> <li>Initializes counters and accumulators for the L2 group:</li> <li><code>L2CNT</code> (count of vendors in the group) to zero (line JB01).</li> <li><code>L21AMT</code> (total for box 1, rent), <code>L23AMT</code> (total for box 3, non-employee compensation), <code>L26AMT</code> (total for box 6, medical), and <code>L27AMT</code> (total for box 7, miscellaneous) to zero (lines 0038\u20130040).</li> <li>Initializes report accumulators for each box (<code>BX1AMT</code>, <code>BX3AMT</code>, <code>BX6AMT</code>, <code>BX7AMT</code>) to zero (lines 0044\u20130046).</li> </ul> </li> <li> <p>Processing Individual Vendor Records (Level 1 Break - 01):</p> </li> <li> <p>For each vendor record (<code>AP761</code>, indicator 01), the program processes payment amounts and payee names:</p> <ul> <li>Accumulate Box Amounts (lines 0048\u20130070):</li> <li>Checks the first box number (<code>VNBOX1</code>) and assigns the first amount (<code>VNAMT1</code>) to the corresponding accumulator:<ul> <li>If <code>VNBOX1 = 1</code>, adds <code>VNAMT1</code> to <code>BX1AMT</code> (rent) (lines 0048\u20130050).</li> <li>If <code>VNBOX1 = 3</code>, adds <code>VNAMT1</code> to <code>BX3AMT</code> (non-employee compensation) (lines 0052\u20130054).</li> <li>If <code>VNBOX1 = 6</code>, adds <code>VNAMT1</code> to <code>BX6AMT</code> (medical) (lines 0052\u20130054).</li> <li>If <code>VNBOX1 = 7</code>, adds <code>VNAMT1</code> to <code>BX3AMT</code> (miscellaneous, treated as non-employee compensation) (lines 0056\u20130058).</li> </ul> </li> <li>Checks the second box number (<code>VNBOX2</code>) and assigns the second amount (<code>VNAMT2</code>) similarly:<ul> <li>If <code>VNBOX2 = 1</code>, adds <code>VNAMT2</code> to <code>BX1AMT</code> (rent) (lines 0060\u20130062).</li> <li>If <code>VNBOX2 = 6</code>, adds <code>VNAMT2</code> to <code>BX6AMT</code> (medical) (lines 0064\u20130066).</li> <li>If <code>VNBOX2 = 7</code>, adds <code>VNAMT2</code> to <code>BX3AMT</code> (miscellaneous) (lines 0068\u20130070).</li> </ul> </li> <li>Update Group Totals (lines 0071\u20130074, JB01):</li> <li>Increments the vendor count (<code>L2CNT</code>) for the L2 group.</li> <li>Adds <code>BX1AMT</code>, <code>BX3AMT</code>, <code>BX6AMT</code>, and <code>BX7AMT</code> to their respective L2 totals (<code>L21AMT</code>, <code>L23AMT</code>, <code>L26AMT</code>, <code>L27AMT</code>).</li> <li>Handle Payee Names (lines JB01):</li> <li>Initializes <code>PYN1</code> and <code>PYN2</code> (payee name fields, 40 bytes each) to blanks and turns off indicators 71 and 72 (formatting flags).</li> <li>If <code>VNPYN1</code> (payee name 1) is blank, uses <code>VNNAME</code> (vendor name) for <code>PYN1</code> (lines JB01).</li> <li>If <code>VNNOVF = 'Y'</code> (name overflow flag), moves <code>VNADD1</code> (address line 1) to <code>PYN2</code> and sets indicator 72 for printing (lines JB02).</li> <li>If <code>VNPYN1</code> is not blank, uses <code>VNPYN1</code> for <code>PYN1</code> and sets indicator 71.</li> <li>If <code>VNPYN2</code> (payee name 2) is not blank, uses <code>VNPYN2</code> for <code>PYN2</code> and sets indicator 72 (lines JB01).</li> </ul> </li> <li> <p>Report Output (APPRINT) (lines 0076\u20130120):</p> </li> <li>The program writes to the printer file <code>APPRINT</code> (132 characters per line) with the following structure:<ul> <li>L2 Detail and Overflow Lines (lines 0076\u20130108):</li> <li>Prints page number (<code>PAGE</code>), date (<code>DATE</code>, formatted as <code>Y</code>), and time (<code>TIME</code>, formatted as <code>HH.MM.SS</code>) (lines 0078\u20130086).</li> <li>Prints the report title \u201cVENDOR 1099 REGISTER\u201d (line 0084).</li> <li>Prints the 1099 type (<code>VN1099</code>) and description (<code>TBDESC</code>) from <code>GSTABL</code> (lines 0088\u20130089).</li> <li>Prints column headers: \u201cNUMBER\u201d (vendor number), \u201c1099 ID #\u201d, \u201cPAYEE NAME\u201d, \u201cRENT (BOX=1)\u201d, \u201cMEDICAL (BOX=6)\u201d, \u201cMISC (BOX=3)\u201d (lines 0095\u20130105).</li> <li>Prints separator lines (<code>SEP</code>) as needed (lines 0092, 0108).</li> <li>Vendor Detail Lines (01) (lines 0109\u20130115, JB01):</li> <li>Prints vendor number (<code>VNVENDZ</code>), 1099 ID (<code>VNID#</code>), payee name 1 (<code>PYN1</code>), and amounts for boxes 1, 6, and 3 (<code>BX1AMTK</code>, <code>BX6AMTK</code>, <code>BX3AMTK</code>) (lines 0109\u20130115).</li> <li>If indicator 72 is on, prints payee name 2 (<code>PYN2</code>) on a second line (line JB01).</li> <li>L2 Totals (lines 0116\u20130120):</li> <li>Prints \u201c** TOTALS\u201d, vendor count (<code>L2CNT</code>), and total amounts for boxes 1, 6, and 3 (<code>L21AMTK</code>, <code>L26AMTK</code>, <code>L23AMTK</code>) at the end of each 1099 type group.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP760</code> RPG program enforces the following business rules for generating the 1099 register report:</p> <ol> <li>1099 Type Grouping:</li> <li>The report groups vendors by 1099 type (<code>VN1099</code>), with subtotals printed at each type change (L2 break).</li> <li> <p>Descriptions for 1099 types are retrieved from <code>GSTABL</code> using the key <code>AP1099</code> + <code>VN1099</code>.</p> </li> <li> <p>Box Number Mapping:</p> </li> <li>Box 1: Rent payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 1).</li> <li>Box 3: Miscellaneous payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 3 or 7).</li> <li>Box 6: Medical payments (<code>VNBOX1</code> or <code>VNBOX2</code> = 6).</li> <li>Box 7: Treated as miscellaneous (mapped to <code>BX3AMT</code>).</li> <li> <p>Amounts are accumulated separately for each box and totaled by 1099 type.</p> </li> <li> <p>Payee Name Formatting (JB01, JB02):</p> </li> <li>If <code>VNPYN1</code> (payee name 1) is blank, use <code>VNNAME</code> (vendor name) as the primary name (<code>PYN1</code>).</li> <li>If <code>VNNOVF</code> is <code>'Y'</code>, use <code>VNADD1</code> (address line 1) as the secondary name (<code>PYN2</code>) for name overflow.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> as <code>PYN1</code> and <code>VNPYN2</code> (if not blank) as <code>PYN2</code>.</li> <li> <p>Indicators 71 and 72 control printing of <code>PYN1</code> and <code>PYN2</code>.</p> </li> <li> <p>Report Layout:</p> </li> <li>Headers include page number, date, time, 1099 type, and column labels.</li> <li>Detail lines show vendor number, 1099 ID, payee name(s), and amounts for rent, medical, and miscellaneous boxes.</li> <li> <p>Totals at each 1099 type break include vendor count and box amounts.</p> </li> <li> <p>Data Exclusion:</p> </li> <li> <p>Records marked as deleted (<code>VNDEL = 'D'</code>, position 1) are skipped (handled by prior steps in <code>AP760.ocl36.txt</code> and <code>AP761.rpg36.txt</code>).</p> </li> <li> <p>Special Handling:</p> </li> <li>If <code>KYTY1</code> is <code>'M'</code> or <code>'N'</code> and the <code>GSTABL</code> lookup fails, set indicators 33 or 34, respectively, which may affect report formatting or filtering (line 0037).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#tables-used","title":"Tables Used","text":"<p>The RPG program uses the following files (tables):</p> <ol> <li>AP761:</li> <li>Type: Disk file (<code>DISK</code>), primary input file (<code>IP</code>).</li> <li>Size: 196 bytes.</li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1, 1 byte): Delete code.</li> <li><code>VN1099L2</code> (position 2, 1 byte): 1099 code (renamed <code>VN1099</code>).</li> <li><code>VNVENDL1</code> (positions 3\u20137, 5 bytes): Vendor number (renamed <code>VNVENDZ</code>).</li> <li><code>VNID#</code> (positions 8\u201318, 11 bytes): 1099 ID number.</li> <li><code>VNNAME</code> (positions 19\u201348, 30 bytes): Vendor name.</li> <li><code>VNAMT1</code> (positions 49\u201357, 9 bytes, packed decimal): First box amount.</li> <li><code>VNAMT2</code> (positions 58\u201366, 9 bytes, packed decimal): Second box amount.</li> <li><code>VNBOX1</code> (positions 67\u201368, 2 bytes): First box number.</li> <li><code>VNBOX2</code> (positions 69\u201370, 2 bytes): Second box number.</li> <li><code>VNPYN1</code> (positions 71\u2013110, 40 bytes): Payee name 1 (added by JB01).</li> <li><code>VNPYN2</code> (positions 111\u2013150, 40 bytes): Payee name 2 (added by JB01).</li> <li><code>VNNOVF</code> (position 151, 1 byte): Name overflow (added by JB02).</li> <li><code>VNADD1</code> (positions 152\u2013181, 30 bytes): Address line 1 (added by JB02).</li> </ul> </li> <li> <p>Purpose: Preprocessed 1099 data from <code>AP761.rpg36.txt</code>, containing one record per vendor.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Disk file (<code>DISK</code>), input file (<code>IC</code>), keyed access.</li> <li>Size: 256 bytes, with a 12-byte key.</li> <li>Fields:<ul> <li><code>TBDESC</code> (positions 14\u201343, 30 bytes): Table description.</li> </ul> </li> <li> <p>Purpose: Lookup table for 1099 type descriptions, accessed with key <code>AP1099</code> + <code>VN1099</code>.</p> </li> <li> <p>APPRINT:</p> </li> <li>Type: Printer file (<code>PRINTER</code>), output file (<code>O</code>).</li> <li>Size: 132 bytes.</li> <li>Purpose: Output file for the 1099 register report, containing headers, detail lines, and totals.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP760</code> program does not explicitly call any external programs. However: - It is invoked by the <code>AP760P.ocl36.txt</code> OCL program, either directly or via a job queue, as specified in the OCL\u2019s <code>// JOBQ</code> or <code>// AP760</code> commands. - The <code>AP760P</code> program (previously analyzed) sets up and validates parameters passed to <code>AP760</code> via the User Data Structure (UDS), specifically <code>KYTY1</code> for 1099 type filtering.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP760</code> RPG/36 program generates a Vendor 1099 Register by: 1. Initializing date, time, and report formatting settings. 2. Processing vendor records from <code>AP761</code>, grouped by 1099 type (<code>VN1099</code>), and retrieving type descriptions from <code>GSTABL</code>. 3. Accumulating payment amounts for 1099 boxes (1: rent, 3: non-employee compensation, 6: medical, 7: miscellaneous) and handling payee names (using vendor name, payee names, or address for overflow). 4. Printing a formatted report to <code>APPRINT</code> with headers, vendor details, and totals for each 1099 type group. 5. Enforcing business rules for box mapping, payee name formatting, and report structure.</p> <p>Tables/Files Used: - <code>AP761</code> (vendor 1099 data, primary input). - <code>GSTABL</code> (1099 type descriptions, indexed). - <code>APPRINT</code> (printer output for the report).</p> <p>External Programs Called: - None directly called, but invoked by <code>AP760P.ocl36.txt</code> and relies on parameters set by <code>AP760P</code>.</p> <p>If you need further details, such as a sample report layout or additional analysis of the <code>AP761</code> file structure, let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/","title":"AP760P OCL","text":"<p>Let\u2019s break down the process steps of the provided RPG .OCL (Operation Control Language) program, <code>AP760P.ocl36.txt</code>, which appears to be a control program for generating a Vendor 1099 Register. I\u2019ll explain each step clearly, identify external programs called, and list the tables/files used, based on the provided document.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The program is designed to initiate the generation of a Vendor 1099 Register for a specified year, using a file named <code>APVNYYYY</code> (where <code>YYYY</code> is the four-digit year). Below is a step-by-step explanation of the program\u2019s logic, derived from the OCL code:</p> <ol> <li>Program Initialization and Parameter Setup:</li> <li>The program begins with the <code>// SCPROCP</code> command, indicating it\u2019s a system control procedure, likely running on an IBM System/3x or AS/400 environment.</li> <li>Parameters <code>?9?</code> (likely a library or environment identifier) and <code>?10?</code> (the four-digit year for the 1099 forms) are expected as inputs.</li> <li>The <code>// LOCAL BLANK-*ALL</code> command clears all local variables to ensure a clean state before processing.</li> <li> <p>The <code>// GSY2K</code> command may invoke a utility or subroutine to handle Year 2000 compliance, ensuring date-related calculations are correct.</p> </li> <li> <p>Prompt for Year (if needed):</p> </li> <li> <p>The commented-out line <code>// * 'WHAT YEAR ARE THESE 1099''S FOR? PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'</code> suggests that the program may prompt the user for the year (<code>?10?</code>) if it\u2019s not provided. However, since it\u2019s commented out, the year is likely passed as a parameter when the program is invoked.</p> </li> <li> <p>Determine the 1099 File Name:</p> </li> <li>The program constructs the file name for the 1099 data using the <code>EVALUATE</code> command:<ul> <li>If <code>?9?</code> (the library/environment identifier) equals <code>'G'</code>, the file name is set to <code>APVN?10?</code> (e.g., <code>APVN2025</code> for year 2025).</li> <li>Otherwise, the file name is set to <code>?9?VN?10?</code> (e.g., <code>LIBVN2025</code> if <code>?9?</code> is <code>LIB</code>).</li> </ul> </li> <li> <p>The resulting file name is stored in parameter <code>P13</code>.</p> </li> <li> <p>Check for File Existence:</p> </li> <li>The program checks if the file specified in <code>?13?</code> exists using <code>// IFF DATAF1-?13?</code>.</li> <li>If the file does not exist, the program displays a pause message: <code>'?10? NOT FOUND ( ?13? )'</code>, informing the user that the file for the specified year (e.g., <code>2025 NOT FOUND ( APVN2025 )</code>) is missing.</li> <li> <p>If the file is not found, the program executes <code>// CANCEL</code>, terminating the process.</p> </li> <li> <p>Load the Main Program:</p> </li> <li>If the file exists, the program proceeds with <code>// LOAD AP760P</code>, which loads the main RPG program (<code>AP760P</code>) responsible for generating the 1099 Register.</li> <li> <p>Two files are opened with shared access (<code>DISP-SHR</code>):</p> <ul> <li><code>APCONT</code>, labeled as <code>?9?APCONT</code> (e.g., <code>LIBAPCONT</code> if <code>?9?</code> is <code>LIB</code>), likely containing accounts payable control information.</li> <li><code>GSTABL</code>, labeled as <code>?9?GSTABL</code>, likely a general system table containing configuration or reference data.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li>The <code>// RUN</code> command executes the loaded <code>AP760P</code> program.</li> <li> <p>The program checks a condition using <code>// IF ?L'129,6'?/CANCEL</code>:</p> <ul> <li>This likely checks a specific field or flag at position 129, character 6 in a control record or parameter.</li> <li>If the condition evaluates to <code>CANCEL</code>, the program jumps to the <code>END</code> tag, terminating execution.</li> </ul> </li> <li> <p>Job Submission or Direct Execution:</p> </li> <li>The program checks another condition using <code>// IF ?L'120,1'?/Y</code>:<ul> <li>If the condition at position 120, character 1 is <code>'Y'</code>, the program submits <code>AP760</code> to a job queue (<code>JOBQ</code>) with parameters <code>?CLIB?</code>, <code>?9?</code>, <code>?10?</code>, and <code>?13?</code>. The <code>?CLIB?</code> likely specifies the library for the job queue.</li> <li>If the condition is not <code>'Y'</code>, the program directly executes <code>AP760</code> with the same parameters (<code>?9?</code>, <code>?10?</code>, <code>?13?</code>).</li> </ul> </li> <li> <p><code>AP760</code> is likely the program that processes the <code>APVNYYYY</code> file to generate the 1099 Register.</p> </li> <li> <p>Program Termination:</p> </li> <li>The <code>// TAG END</code> marks the end of the program.</li> <li>The final <code>// LOCAL BLANK-*ALL</code> clears all local variables again, ensuring no residual data remains in memory.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>Based on the OCL code, the following external programs are referenced or called: 1. AP760P: The main RPG program loaded and executed to generate the 1099 Register. It processes the vendor data from the <code>APVNYYYY</code> file. 2. AP760: Invoked either directly or via the job queue, likely a compiled version of <code>AP760P</code> or a related program that performs the core 1099 processing. 3. GSY2K (implied): The <code>// GSY2K</code> command suggests a utility or subroutine for Year 2000 date handling, though it\u2019s not explicitly a separate program.</p> <p>Note: The <code>AP300</code> program is mentioned in the programmer\u2019s note as the program that creates the <code>APVNYYYY</code> file during period-end processing, but it is not called within this OCL program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program references the following files/tables: 1. APVNYYYY (referenced as <code>?13?</code>, e.g., <code>APVN2025</code>):    - This is the primary input file containing vendor data for the specified year (<code>YYYY</code> = <code>?10?</code>).    - Created by the <code>AP300</code> program during period-end processing, it holds the <code>GAPVEND</code> file data before monthly and yearly totals are cleared. 2. APCONT (labeled <code>?9?APCONT</code>, e.g., <code>LIBAPCONT</code>):    - A shared file (<code>DISP-SHR</code>) likely containing accounts payable control information, such as vendor master data or configuration settings. 3. GSTABL (labeled <code>?9?GSTABL</code>, e.g., <code>LIBGSTABL</code>):    - A shared file (<code>DISP-SHR</code>) likely containing general system tables with reference data, such as tax codes, vendor categories, or other configuration details.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20OCL/#summary","title":"Summary","text":"<p>The <code>AP760P.ocl36.txt</code> OCL program orchestrates the generation of a Vendor 1099 Register by: 1. Setting up the environment and determining the 1099 file name (<code>APVNYYYY</code>). 2. Verifying the existence of the input file. 3. Loading and running the <code>AP760P</code> program, which uses the <code>APCONT</code> and <code>GSTABL</code> files. 4. Either submitting the <code>AP760</code> program to a job queue or executing it directly, based on a control condition. 5. Cleaning up local variables at the start and end of the process.</p> <p>External Programs Called: - <code>AP760P</code> (loaded and run) - <code>AP760</code> (executed directly or via job queue) - <code>GSY2K</code> (implied utility, not explicitly called)</p> <p>Tables/Files Used: - <code>APVNYYYY</code> (e.g., <code>APVN2025</code>, primary 1099 data file) - <code>APCONT</code> (e.g., <code>LIBAPCONT</code>, accounts payable control file) - <code>GSTABL</code> (e.g., <code>LIBGSTABL</code>, general system table)</p> <p>If you need further clarification or additional analysis (e.g., specific RPG code within <code>AP760P</code>), let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/","title":"AP760P RPG36","text":"<p>The provided <code>AP760P.rpg36.txt</code> is an RPG/36 program (likely running on an IBM System/36 or AS/400 environment) that serves as the main program for generating a Vendor 1099 Register, called from the <code>AP760P.ocl36.txt</code> OCL program previously discussed. This program handles user input validation and setup for the 1099 report generation process. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, based on the RPG code provided.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#process-steps-of-the-rpg36-program-ap760p","title":"Process Steps of the RPG/36 Program (AP760P)","text":"<p>The <code>AP760P</code> program is responsible for prompting the user for parameters (via a workstation screen) and validating inputs before passing them to another program (likely <code>AP760</code>) for generating the Vendor 1099 Register. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines a workstation file (<code>SCREEN</code>) for user interaction, and two disk files: <code>APCONT</code> (accounts payable control file) and <code>GSTABL</code> (general system table).</li> <li>Arrays are defined: <code>MSG</code> (10 error messages, 40 characters each) and <code>DCO</code> (5 company numbers/names, 35 characters each).</li> <li>The program clears indicators (50\u201358, 81\u201390) and initializes the <code>MSG40</code> field to blanks to reset any previous error messages (lines 0047\u20130051).</li> <li> <p>If the <code>KG</code> (cancel) condition is set, the program sets <code>KYCANC</code> to <code>'CANCEL'</code> and turns off indicators 01 and 09, likely preparing to exit (lines 0053\u20130054).</p> </li> <li> <p>One-Time Setup (ONETIM Subroutine):</p> </li> <li>Executed if indicator 09 is on (line 0056), typically on the first run.</li> <li>Purpose: Populates the <code>DCO</code> array with company numbers and names from the <code>APCONT</code> file for display on the screen.</li> <li> <p>Steps:</p> <ul> <li>Initializes counter <code>X</code> to 1 and limit <code>ACLIM</code> to 0 (lines 0066\u20130067).</li> <li>Positions the file pointer to the start of <code>APCONT</code> using <code>SETLL</code> (line 0068).</li> <li>Reads records from <code>APCONT</code> in a loop (lines 0069\u20130079):</li> <li>Skips records marked as deleted (<code>ACRCCD = 'D'</code>) (lines 0073\u20130074).</li> <li>Moves the company number (<code>ACCONO</code>) and name (<code>ACNAME</code>) into the <code>DCO</code> array at index <code>X</code> (lines 0075\u20130076).</li> <li>Increments <code>X</code> and continues until 5 companies are loaded or the end of the file is reached (indicator 79) (lines 0077\u20130079).</li> <li>Sets default values for screen fields (lines 0084\u20130089):</li> <li><code>KYALCO = 'ALL'</code> (select all companies by default).</li> <li><code>KYALTY = 'TYP'</code> (select specific 1099 types by default).</li> <li><code>KYCRLS = 'C'</code> (current year data).</li> <li><code>KYJOBQ = 'N'</code> (do not submit to job queue).</li> <li><code>KYCOPY = 01</code> (one copy of the report).</li> <li>Sets indicator 81 to display the screen.</li> </ul> </li> <li> <p>Screen Processing and Validation (S1 Subroutine):</p> </li> <li>Executed if indicator 01 is on (line 0058), handling user input validation from the screen (<code>SCREEN</code>, format <code>AP760PS1</code>).</li> <li>Purpose: Validates user inputs for company selection, 1099 types, current/last year, job queue option, and number of copies.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Selection (lines 0096\u20130137):</li> <li>Checks if <code>KYALCO</code> is <code>'ALL'</code> or <code>'CO'</code> (lines 0096\u20130097).</li> <li>If neither, sets error indicators (81, 90, 50), displays error message 1 (\u201cENTRY MUST BE 'CO' OR 'ALL'\u201d), and exits to <code>ENDS1</code> (lines 0098\u20130100).</li> <li>If <code>KYALCO = 'CO'</code> and company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are all zero, or if <code>KYALCO = 'ALL'</code> and any company number is non-zero, sets error indicators (81, 90, 51) and displays error message 2 or 3 (lines 0102\u20130112).</li> <li>If <code>KYALCO = 'CO'</code>, validates each company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) by chaining to <code>APCONT</code> (lines 0116\u20130135):<ul> <li>If a company number is invalid (not found in <code>APCONT</code>), sets error indicators (81, 90, 51\u201353) and displays error message 4 (\u201cINVALID COMPANY NUMBER\u201d).</li> </ul> </li> <li>Validate 1099 Type Selection (lines 0142\u20130188):</li> <li>Checks if <code>KYALTY</code> is <code>'ALL'</code> or <code>'TYP'</code> (lines 0142\u20130143).</li> <li>If neither, sets error indicators (81, 90, 54), displays error message 6 (\u201cENTRY MUST BE 'TYP' OR 'ALL'\u201d), and exits (lines 0144\u20130146).</li> <li>If <code>KYALTY = 'TYP'</code> and types (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>) are blank, or if <code>KYALTY = 'ALL'</code> and any type is non-blank, sets error indicators (81, 90, 55) and displays error message 7 or 8 (lines 0148\u20130158).</li> <li>If <code>KYALTY = 'TYP'</code>, validates each type (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>) by chaining to <code>GSTABL</code> with key <code>AP1099</code> concatenated with the type (lines 0162\u20130186):<ul> <li>If a type is invalid (not found in <code>GSTABL</code>), sets error indicators (81, 90, 55\u201357) and displays error message 9 (\u201cINVALID 1099 TYPE\u201d).</li> </ul> </li> <li>Validate Current/Last Year Selection (lines 0192\u20130197):</li> <li>Checks if <code>KYCRLS</code> is <code>'C'</code> (current year) or <code>'L'</code> (last year) (lines 0192\u20130193).</li> <li>If neither, sets error indicators (81, 90, 58), displays error message 10 (\u201cCURR/LAST ENTRY MUST BE 'C' OR 'L'\u201d), and exits (lines 0194\u20130196).</li> <li>Sets <code>KYCYYR</code> (year for 1099s):<ul> <li>If <code>KYCRLS = 'C'</code>, sets <code>KYCYYR</code> to the current year (<code>UYEAR</code>) (lines 0197).</li> <li>If <code>KYCRLS = 'L'</code>, sets <code>KYCYYR</code> to the previous year (<code>UYEAR - 1</code>) (lines 0197).</li> </ul> </li> <li>Validate Job Queue Selection (lines 0199\u20130204):</li> <li>Checks if <code>KYJOBQ</code> is <code>'Y'</code>, <code>'N'</code>, or blank (lines 0199\u20130201).</li> <li>If invalid, sets error indicators (81, 90, 59), displays error message 5 (\u201cJOB QUEUE ENTRY MUST BE 'Y' OR 'N'\u201d), and exits (lines 0202\u20130204).</li> <li>Validate Number of Copies (lines 0206\u20130207):</li> <li>If <code>KYCOPY</code> is zero, sets it to 1 (lines 0206\u20130207).</li> <li>Output to Screen (lines 0211\u20130225):</li> <li>If indicator 81 is on, displays the <code>AP760PS1</code> screen format with fields (<code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>DCO</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>MSG40</code>).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program loops back to display the screen if validation fails (indicator 81 on), allowing the user to correct inputs.</li> <li>If validation succeeds, the program sets the necessary parameters in the User Data Structure (UDS) fields (<code>KYALCO</code>, <code>KYCO1\u20133</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCANC</code>, <code>KYALTY</code>, <code>KYTY1\u20133</code>, <code>KYCRLS</code>, <code>KYCYYR</code>) for use by the calling OCL or subsequent program (<code>AP760</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the 1099 Register:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies) in <code>KYALCO</code>.</li> <li>If <code>'CO'</code> is selected, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided, and each must exist in the <code>APCONT</code> file.</li> <li>If <code>'ALL'</code> is selected, no company numbers should be specified.</li> <li> <p>Invalid company selections trigger error messages (1\u20134).</p> </li> <li> <p>1099 Type Selection:</p> </li> <li>The user must select either <code>'ALL'</code> (all 1099 types) or <code>'TYP'</code> (specific types) in <code>KYALTY</code>.</li> <li>If <code>'TYP'</code> is selected, at least one valid 1099 type (<code>KYTY1</code>, <code>KYTY2</code>, or <code>KYTY3</code>) must be provided, and each must exist in the <code>GSTABL</code> file under the <code>AP1099</code> key.</li> <li>If <code>'ALL'</code> is selected, no specific types should be specified.</li> <li> <p>Invalid type selections trigger error messages (6\u20139).</p> </li> <li> <p>Current/Last Year Selection:</p> </li> <li>The user must select <code>'C'</code> (current year) or <code>'L'</code> (last year) in <code>KYCRLS</code>.</li> <li>The year (<code>KYCYYR</code>) is set to the current year (<code>UYEAR</code>) for <code>'C'</code> or the previous year (<code>UYEAR - 1</code>) for <code>'L'</code>.</li> <li> <p>Invalid selections trigger error message 10.</p> </li> <li> <p>Job Queue Option:</p> </li> <li>The user must specify <code>'Y'</code> (submit to job queue) or <code>'N'</code> (run interactively) in <code>KYJOBQ</code>.</li> <li> <p>Invalid selections trigger error message 5.</p> </li> <li> <p>Number of Copies:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be non-zero; if zero, it defaults to 1.</p> </li> <li> <p>Error Handling:</p> </li> <li>If any validation fails, the program displays an error message on the screen and waits for corrected input.</li> <li>The user can cancel the process (setting <code>KYCANC = 'CANCEL'</code>), which likely terminates the program or signals the OCL to exit.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. SCREEN:    - Type: Workstation file (<code>WORKSTN</code>), 512 bytes.    - Used for user interaction via the <code>AP760PS1</code> screen format to collect and display input parameters and error messages. 2. APCONT:    - Type: Indexed file (<code>IF</code>), 256 bytes, with a 2-byte key, shared access (<code>DISP-SHR</code>).    - Contains accounts payable control data, including:      - <code>ACRCCD</code> (1 byte): Delete code (\u2018D\u2019 for deleted records).      - <code>ACCONO</code> (2 bytes): Company number.      - <code>ACNAME</code> (30 bytes): Company name.    - Used to validate company numbers and populate the <code>DCO</code> array for display. 3. GSTABL:    - Type: Indexed file (<code>IC</code>), 256 bytes, with a 12-byte key, shared access (<code>DISP-SHR</code>).    - Contains general system tables, specifically 1099 type codes under the <code>AP1099</code> key.    - Used to validate 1099 types (<code>KYTY1</code>, <code>KYTY2</code>, <code>KYTY3</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program itself does not explicitly call external programs. However: - It is called from the <code>AP760P.ocl36.txt</code> OCL program, as indicated in the OCL\u2019s <code>// LOAD AP760P</code> and <code>// RUN</code> commands. - The validated parameters are passed to the <code>AP760</code> program (via the OCL\u2019s <code>JOBQ</code> or direct execution), which likely performs the actual 1099 Register generation. - The <code>GSY2K</code> utility (mentioned in the OCL) may be indirectly involved for date handling, but it is not called within the RPG code.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP760P%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP760P</code> RPG/36 program is a front-end validation program that: 1. Displays a screen (<code>AP760PS1</code>) to collect user inputs for company selection (<code>KYALCO</code>, <code>KYCO1\u20133</code>), 1099 types (<code>KYALTY</code>, <code>KYTY1\u20133</code>), year (<code>KYCRLS</code>), job queue option (<code>KYJOBQ</code>), and number of copies (<code>KYCOPY</code>). 2. Validates inputs against the <code>APCONT</code> (company data) and <code>GSTABL</code> (1099 types) files, displaying error messages if invalid. 3. Sets up parameters in the User Data Structure (UDS) for the year (<code>KYCYYR</code>) and other options, which are passed to the <code>AP760</code> program via the OCL for report generation. 4. Enforces business rules to ensure valid company numbers, 1099 types, year selection, job queue option, and copy count.</p> <p>Tables/Files Used: - <code>SCREEN</code> (workstation file for user interaction) - <code>APCONT</code> (accounts payable control file for company data) - <code>GSTABL</code> (general system table for 1099 types)</p> <p>External Programs Called: - None directly called within the RPG code, but <code>AP760</code> is invoked via the OCL, and <code>AP760P</code> is called by the OCL program <code>AP760P.ocl36.txt</code>.</p> <p>If you need further details, such as a deeper analysis of the screen format or the <code>AP760</code> program\u2019s expected behavior, let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/","title":"AP761 RPG","text":"<p>The provided document is an RPG (Report Program Generator) program, <code>AP761.rpg36.txt</code>, which is called by the OCL program <code>AP760.ocl36.txt</code> as part of the vendor 1099 register process on an IBM AS/400 or iSeries system. This RPG program preprocesses the 1099 data to create a consolidated work file (<code>AP761</code>) with one record per vendor, regardless of multiple company affiliations, for use in generating the final 1099 register report. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called, based on the provided RPG code and its integration with the OCL program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#process-steps-of-the-ap761-rpg-program","title":"Process Steps of the AP761 RPG Program","text":"<p>The <code>AP761</code> RPG program reads sorted 1099 data from a temporary file (<code>AP760S</code>) and the original 1099 file (<code>APVEND</code>), aggregates amounts for each vendor, adjusts for dual 1099 box amounts, and writes a consolidated record to the output file (<code>AP761</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization:</li> <li> <p>At the start of each level 1 break (<code>L1</code>, triggered by a change in the control field defined in <code>AP760S</code>), the program initializes accumulators and fields:</p> <ul> <li><code>L1AMT1</code> (primary 1099 amount): Set to zero (line 0025).</li> <li><code>L1AMT2</code> (secondary 1099 box amount): Set to zero (line 0026).</li> <li><code>BOX1</code> (first 1099 box number): Set to zero (line 0027).</li> <li><code>BOX2</code> (second 1099 box number): Set to zero (line 0028).</li> </ul> </li> <li> <p>Read Input Files:</p> </li> <li>Primary File (<code>AP760S</code>):<ul> <li>Defined as an input file (<code>IR</code>), externally described (<code>EDISK</code>), with a 30-byte record and a 3-byte key (lines 0007, 0009).</li> <li>Sorted by 1099 type, vendor, and company (as defined in <code>AP760.ocl36.txt</code>).</li> <li>Drives the program cycle, triggering processing for each record.</li> </ul> </li> <li> <p>Secondary File (<code>APVEND</code>):</p> <ul> <li>Defined as the primary input file (<code>IP</code>), 579 bytes, internally described (line 0006).</li> <li>Matched with <code>AP760S</code> records to retrieve detailed vendor data (e.g., name, amounts, 1099 codes).</li> </ul> </li> <li> <p>Accumulate 1099 Amounts:</p> </li> <li>Determine Year:<ul> <li>Check the <code>CURLST</code> field (from User Data Structure at offset 141, set by <code>AP760.ocl36.txt</code> as <code>'C'</code> or <code>'L'</code>) to determine whether to use current or last year\u2019s year-to-date (YTD) paid amount (line 0033).</li> <li>Regardless of <code>CURLST</code>, the program adds <code>VNYTDP</code> (current year YTD paid, positions 242\u2013247) to <code>L1AMT1</code> (lines 0034\u2013037). Note: The code comment suggests a future change to use <code>VNLYDP</code> (last year YTD paid, positions 248\u2013253) or an individual year file (<code>APVNXXXX</code>), but currently, it uses <code>VNYTDP</code> for both cases.</li> </ul> </li> <li> <p>Secondary Box Amount:</p> <ul> <li>Add <code>VNB2AM</code> (second 1099 box amount, positions 280\u2013285) to <code>L1AMT2</code> (line 0039).</li> </ul> </li> <li> <p>Set 1099 Box Numbers:</p> </li> <li>First Box (<code>BOX1</code>):<ul> <li>If <code>BOX1</code> is zero, set it to <code>VNBOX1</code> (first 1099 box number, positions 276\u2013277) (lines 0041\u20130043).</li> </ul> </li> <li>Second Box (<code>BOX2</code>):<ul> <li>If <code>BOX2</code> is zero, set it to <code>VNBOX2</code> (second 1099 box number, positions 278\u2013279) (lines 0045\u20130047).</li> </ul> </li> <li> <p>Default Box (<code>BOX1</code>):</p> <ul> <li>At level 1 (<code>L1</code>), if <code>BOX1</code> is still zero, set it to 7 (default 1099 box, e.g., for miscellaneous income) (lines 0049\u20130051).</li> </ul> </li> <li> <p>Adjust Amounts for Dual Boxes:</p> </li> <li> <p>At level 1 (<code>L1</code>), if <code>L1AMT2</code> (secondary box amount) is greater than zero and <code>BOX2</code> is non-zero, subtract <code>L1AMT2</code> from <code>L1AMT1</code> (lines 0052\u20130056). This ensures the total YTD amount is split between the two 1099 boxes, as <code>VNYTDP</code> includes both amounts.</p> </li> <li> <p>Write Output Record:</p> </li> <li>At level 1 (<code>L1</code>), if the above conditions are met, the program writes a record to the output file <code>AP761</code> using the <code>L1ADD</code> exception output (line 0057).</li> <li>Output Fields (lines 0059\u20130068, JB01, JB02):<ul> <li>Record identification: <code>'A'</code> (position 1).</li> <li><code>VN1099</code> (1099 code, position 264, 1 byte, renamed from <code>VN1099L2</code>).</li> <li><code>VNVEND</code> (vendor number, positions 4\u20138, 5 bytes, renamed from <code>VNVENDL1</code>).</li> <li><code>VNID#</code> (1099 ID number, positions 265\u2013275, 11 bytes).</li> <li><code>VNNAME</code> (vendor name, positions 9\u201338, 30 bytes).</li> <li><code>L1AMT1</code> (primary 1099 amount, 9 bytes, packed decimal).</li> <li><code>L1AMT2</code> (secondary 1099 box amount, 9 bytes, packed decimal).</li> <li><code>BOX1</code> (first 1099 box number, 2 bytes).</li> <li><code>BOX2</code> (second 1099 box number, 2 bytes).</li> <li><code>VNPYN1</code> (payee name 1, positions 300\u2013339, 40 bytes, added by JB01).</li> <li><code>VNPYN2</code> (payee name 2, positions 340\u2013379, 40 bytes, added by JB01).</li> <li><code>VNNOVF</code> (name overflow, position 216, 1 byte, added by JB02).</li> <li><code>VNADD1</code> (address line 1, positions 39\u201368, 30 bytes, added by JB02).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#business-rules","title":"Business Rules","text":"<p>The <code>AP761</code> RPG program enforces the following business rules for preprocessing the 1099 register:</p> <ol> <li>Single Record per Vendor:</li> <li> <p>The program consolidates multiple records for the same vendor (across different companies) into a single output record in <code>AP761</code>, aggregating YTD amounts and handling dual 1099 boxes.</p> </li> <li> <p>Year Selection:</p> </li> <li> <p>The program uses the current year\u2019s YTD paid amount (<code>VNYTDP</code>) for both current (<code>CURLST = 'C'</code>) and last year (<code>CURLST = 'L'</code>) processing, pending a future update to use <code>VNLYDP</code> or a year-specific file (<code>APVNXXXX</code>).</p> </li> <li> <p>1099 Box Handling:</p> </li> <li>If a second 1099 box amount (<code>VNB2AM</code>) exists, it is accumulated separately (<code>L1AMT2</code>) and subtracted from the primary amount (<code>L1AMT1</code>) to split the total YTD amount between two boxes.</li> <li>The first 1099 box (<code>BOX1</code>) defaults to 7 (e.g., miscellaneous income) if not specified.</li> <li> <p>Box numbers (<code>VNBOX1</code>, <code>VNBOX2</code>) are preserved if provided in the input file.</p> </li> <li> <p>Record Exclusion:</p> </li> <li> <p>Records marked as deleted (<code>VNDEL = 'D'</code>, position 1) are skipped (implicitly handled by the sort in <code>AP760.ocl36.txt</code>).</p> </li> <li> <p>Data Inclusion:</p> </li> <li>The output record includes critical 1099 data: 1099 code, vendor number, ID number, name, amounts, box numbers, payee names (added by JB01), name overflow, and address line 1 (added by JB02).</li> <li> <p>Payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) and name overflow (<code>VNNOVF</code>) support extended vendor identification and formatting for printing.</p> </li> <li> <p>Error Handling:</p> </li> <li>The program assumes valid input from the sorted file (<code>AP760S</code>) and original file (<code>APVEND</code>). No explicit validation is performed, as filtering (e.g., company, type) is handled by the sort in <code>AP760.ocl36.txt</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#tables-used","title":"Tables Used","text":"<p>The RPG program uses the following files (tables):</p> <ol> <li>APVEND:</li> <li>Type: Disk file (<code>DISK</code>), primary input file (<code>IP</code>), internally described.</li> <li>Size: 579 bytes.</li> <li>Fields:<ul> <li><code>VNDEL</code> (position 1, 1 byte): Delete code (e.g., <code>'D'</code> for deleted).</li> <li><code>VNCO</code> (positions 2\u20133, 2 bytes): Company number.</li> <li><code>VNVENDL1</code> (positions 4\u20138, 5 bytes): Vendor number.</li> <li><code>VNNAME</code> (positions 9\u201338, 30 bytes): Vendor name.</li> <li><code>VNADD1</code> (positions 39\u201368, 30 bytes): Address line 1 (added by JB02).</li> <li><code>VNNOVF</code> (position 216, 1 byte): Name overflow (added by JB02).</li> <li><code>VNYTDP</code> (positions 242\u2013247, packed decimal, 6 bytes): Current year YTD paid.</li> <li><code>VNLYDP</code> (positions 248\u2013253, packed decimal, 6 bytes): Last year YTD paid.</li> <li><code>VN1099L2</code> (position 264, 1 byte): 1099 code.</li> <li><code>VNID#</code> (positions 265\u2013275, 11 bytes): 1099 ID number.</li> <li><code>VNBOX1</code> (positions 276\u2013277, 2 bytes): First 1099 box number.</li> <li><code>VNBOX2</code> (positions 278\u2013279, 2 bytes): Second 1099 box number.</li> <li><code>VNB2AM</code> (positions 280\u2013285, packed decimal, 6 bytes): Second 1099 box amount.</li> <li><code>VNPYN1</code> (positions 300\u2013339, 40 bytes): Payee name 1 (added by JB01).</li> <li><code>VNPYN2</code> (positions 340\u2013379, 40 bytes): Payee name 2 (added by JB01).</li> </ul> </li> <li> <p>Purpose: Provides detailed vendor 1099 data, matched with <code>AP760S</code> records.</p> </li> <li> <p>AP760S:</p> </li> <li>Type: Disk file (<code>DISK</code>), input file (<code>IR</code>), externally described (<code>EDISK</code>).</li> <li>Size: 30 bytes, with a 3-byte key.</li> <li> <p>Purpose: Sorted 1099 data (by 1099 type, vendor, company) from the <code>#GSORT</code> step in <code>AP760.ocl36.txt</code>. Drives the program cycle and provides control fields for matching with <code>APVEND</code>.</p> </li> <li> <p>AP761:</p> </li> <li>Type: Disk file (<code>DISK</code>), output file (<code>O</code>).</li> <li>Size: 196 bytes.</li> <li>Fields: As listed in the output specification (lines 0059\u20130068, JB01, JB02).</li> <li>Purpose: Consolidated work file with one record per vendor, containing aggregated amounts and formatting data for the final 1099 register report.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP761</code> RPG program does not explicitly call any external RPG or CL programs. It is invoked by the OCL program <code>AP760.ocl36.txt</code> and produces output for the subsequent program <code>AP760</code>. Key points:</p> <ul> <li>Called by OCL:</li> <li> <p>The OCL program <code>AP760.ocl36.txt</code> loads and runs <code>AP761</code>, passing file labels <code>?13?</code> (e.g., <code>APVN2025</code>) for <code>APVEND</code> and <code>?9?AP760S</code> (e.g., <code>PRODAP760S</code>) for <code>AP760S</code>, and defining <code>?9?AP761</code> (e.g., <code>PRODAP761</code>) as the output file.</p> </li> <li> <p>No Subprogram Calls:</p> </li> <li> <p>The program uses no internal subroutines or external program calls. All processing is handled within the RPG cycle and exception output.</p> </li> <li> <p>Downstream Program:</p> </li> <li>The output file <code>AP761</code> is used by the <code>AP760</code> program (called later in <code>AP760.ocl36.txt</code>) to generate the final 1099 register report.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#integration-with-ocl-program","title":"Integration with OCL Program","text":"<p>The <code>AP761</code> RPG program integrates with <code>AP760.ocl36.txt</code> as follows:</p> <ul> <li>Input Files:</li> <li><code>APVEND</code> uses the 1099 file (<code>?13?</code>, e.g., <code>APVN2025</code>) created by <code>AP300</code> (period-end processing).</li> <li> <p><code>AP760S</code> is the sorted file (<code>?9?AP760S</code>) produced by <code>#GSORT</code> in the OCL, filtered by company and 1099 type selections from <code>AP760P.rpg36.txt</code>.</p> </li> <li> <p>Output File:</p> </li> <li> <p><code>AP761</code> produces the intermediate file (<code>?9?AP761</code>), which is used as input by the <code>AP760</code> program for the final report.</p> </li> <li> <p>Parameters:</p> </li> <li> <p>The <code>CURLST</code> field (offset 141 in UDS) is set by <code>AP760.ocl36.txt</code> based on <code>KYCRLS</code> (<code>'C'</code> or <code>'L'</code>) from <code>AP760P.rpg36.txt</code>, controlling whether current or last year amounts are used (though currently, <code>VNYTDP</code> is used for both).</p> </li> <li> <p>Change History:</p> </li> <li>JB01 (01/30/2013): Added <code>VNPYN1</code> and <code>VNPYN2</code> to the output file to support printing payee names.</li> <li>JB02 (01/20/2014): Added <code>VNNOVF</code> and <code>VNADD1</code> to support name overflow and address line 1 for improved report formatting.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/AP761%20RPG/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes accumulators, reads sorted (<code>AP760S</code>) and original (<code>APVEND</code>) 1099 data, aggregates YTD amounts per vendor, adjusts for dual 1099 boxes, sets default box numbers, and writes a consolidated record to <code>AP761</code> with vendor details, amounts, and formatting fields.</li> <li>Business Rules: Consolidate vendor records across companies into one record, use current YTD amounts (pending future year-specific logic), split amounts between two 1099 boxes if applicable, default <code>BOX1</code> to 7 if unspecified, and include payee names, name overflow, and address for printing.</li> <li>Tables Used:</li> <li><code>APVEND</code>: Original 1099 data (e.g., <code>APVN2025</code>).</li> <li><code>AP760S</code>: Sorted 1099 data (e.g., <code>PRODAP760S</code>).</li> <li><code>AP761</code>: Output work file (e.g., <code>PRODAP761</code>).</li> <li>External Programs Called: None directly; called by <code>AP760.ocl36.txt</code>, produces output for <code>AP760</code>.</li> </ul> <p>The <code>AP761</code> program serves as a critical preprocessing step, consolidating and formatting 1099 data for the final report generated by <code>AP760</code>, ensuring accurate aggregation and proper handling of 1099 box amounts.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/","title":"Summary AP760P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack, consisting of <code>AP760P.ocl36.txt</code>, <code>AP760P.rpg36.txt</code>, <code>AP760.ocl36.txt</code>, <code>AP761.rpg36.txt</code>, and <code>AP760.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate Vendor 1099 Register Report:</li> <li>This use case involves collecting user inputs for filtering vendor 1099 data, preprocessing the data to consolidate vendor records, and producing a formatted report summarizing payments by 1099 type and box numbers (e.g., rent, medical, miscellaneous) for tax reporting purposes. The process supports filtering by company, 1099 type, current or last year, and job queue execution, ensuring accurate aggregation and formatting for IRS compliance.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#function-requirement-document-generate-vendor-1099-register-report","title":"Function Requirement Document: Generate Vendor 1099 Register Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#function-requirement-document-generate-vendor-1099-register-report_1","title":"Function Requirement Document: Generate Vendor 1099 Register Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#purpose","title":"Purpose","text":"<p>Generate a consolidated 1099 register report summarizing vendor payments by 1099 type and box numbers (rent, medical, miscellaneous) for tax reporting, filtered by user-specified criteria.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: Four-digit year (e.g., 2025) for the 1099 data file.</li> <li>Company Selection:</li> <li><code>'ALL'</code>: Include all companies.</li> <li><code>'CO'</code>: List of up to three valid company numbers.</li> <li>1099 Type Selection:</li> <li><code>'ALL'</code>: Include all 1099 types.</li> <li><code>'TYP'</code>: List of up to three valid 1099 types.</li> <li>Year Scope: <code>'C'</code> (current year) or <code>'L'</code> (last year).</li> <li>Job Queue: <code>'Y'</code> (submit to job queue) or <code>'N'</code> (run interactively).</li> <li>Copies: Number of report copies (minimum 1).</li> <li>1099 Data File: File name (e.g., <code>APVN2025</code>) containing vendor payment data.</li> <li>Control File: Company data file (e.g., <code>APCONT</code>) for validation.</li> <li>Table File: Lookup table (e.g., <code>GSTABL</code>) for 1099 type descriptions.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>1099 Register Report: Printed report listing:</li> <li>Vendor number, 1099 ID, payee or vendor name (with overflow support).</li> <li>Payment amounts by 1099 box (1=rent, 3/7=miscellaneous, 6=medical).</li> <li>Totals by 1099 type, including vendor count and box amounts.</li> <li>Temporary Files: Intermediate sorted and processed files (e.g., <code>AP760S</code>, <code>AP761</code>), deleted after processing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure year is a valid four-digit value and 1099 data file (e.g., <code>APVN2025</code>) exists.</li> <li>Validate company numbers against control file if <code>'CO'</code> selected; reject if invalid or none provided.</li> <li>Validate 1099 types against table file if <code>'TYP'</code> selected; reject if invalid or none provided.</li> <li> <p>Ensure year scope is <code>'C'</code> or <code>'L'</code>, job queue is <code>'Y'</code> or <code>'N'</code>, and copies is at least 1.</p> </li> <li> <p>Sort 1099 Data:</p> </li> <li>Filter 1099 data file by:<ul> <li>Excluding deleted records (delete code \u2260 <code>'D'</code>).</li> <li>Matching specified companies (if <code>'CO'</code>) or all companies (if <code>'ALL'</code>).</li> <li>Matching specified 1099 types (if <code>'TYP'</code>) or all types (if <code>'ALL'</code>).</li> </ul> </li> <li> <p>Sort by 1099 type, vendor number, and company number, producing a temporary sorted file.</p> </li> <li> <p>Preprocess Data:</p> </li> <li>Consolidate records by vendor, creating one record per vendor:<ul> <li>Aggregate current year YTD paid amount (or last year if <code>'L'</code> selected).</li> <li>If a second 1099 box amount exists, subtract it from the primary amount.</li> <li>Set first box number to 7 (miscellaneous) if unspecified.</li> <li>Include vendor number, 1099 ID, name, payee names, name overflow, address, and box numbers/amounts.</li> </ul> </li> <li> <p>Write to an intermediate work file.</p> </li> <li> <p>Generate Report:</p> </li> <li>Group records by 1099 type, retrieving descriptions from table file.</li> <li>For each vendor:<ul> <li>Print vendor number, 1099 ID, and name (payee names if provided, else vendor name; use address for overflow if flagged).</li> <li>Print amounts for boxes 1 (rent), 3/7 (miscellaneous), and 6 (medical).</li> </ul> </li> <li>At each 1099 type break:<ul> <li>Print vendor count and total amounts for boxes 1, 3/7, and 6.</li> </ul> </li> <li> <p>Include report headers with date, time, page number, and column labels.</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete temporary files after report generation.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Data Filtering:</li> <li>Include only non-deleted vendor records.</li> <li>If <code>'CO'</code> selected, require at least one valid company; if <code>'ALL'</code>, exclude specific companies.</li> <li> <p>If <code>'TYP'</code> selected, require at least one valid 1099 type; if <code>'ALL'</code>, exclude specific types.</p> </li> <li> <p>Amount Calculation:</p> </li> <li>Use current year YTD paid for <code>'C'</code>; last year YTD paid for <code>'L'</code> (pending future year-specific file support).</li> <li> <p>If a second 1099 box amount exists, subtract it from the primary amount to split total payment.</p> </li> <li> <p>Box Mapping:</p> </li> <li>Box 1: Rent payments.</li> <li>Box 3 or 7: Miscellaneous payments (7 defaults if first box unspecified).</li> <li> <p>Box 6: Medical payments.</p> </li> <li> <p>Name Formatting:</p> </li> <li>Use payee name 1 and 2 if provided; otherwise, use vendor name.</li> <li> <p>If name overflow flag is <code>'Y'</code>, use address line 1 as secondary name.</p> </li> <li> <p>Report Requirements:</p> </li> <li>Group by 1099 type with subtotals.</li> <li>Include vendor count per 1099 type.</li> <li>Support multiple report copies (default 1 if zero specified).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Primary Amount (<code>L1AMT1</code>): Sum of YTD paid (<code>VNYTDP</code> or <code>VNLYDP</code>) across all records for a vendor.</li> <li>Secondary Amount (<code>L1AMT2</code>): Sum of second box amount (<code>VNB2AM</code>) if applicable.</li> <li>Adjusted Primary Amount: <code>L1AMT1</code> - <code>L1AMT2</code> if <code>L1AMT2</code> &gt; 0 and second box exists.</li> <li>Box Totals: Accumulate amounts for boxes 1, 3, 6, and 7 by 1099 type, mapping box 7 to box 3 for reporting.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP760P%20OCL%201099%20Vendor%20Register/Summary%20AP760P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Reject invalid inputs (e.g., non-existent companies, types, or file).</li> <li>Display error messages for invalid selections and halt processing until corrected.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/","title":"AP765 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#explanation-of-the-process-steps-and-business-rules-in-the-ocl-program-ap765ocl36txt","title":"Explanation of the Process Steps and Business Rules in the OCL Program (AP765.ocl36.txt)","text":"<p>The provided OCL (Operation Control Language) program, <code>AP765.ocl36.txt</code>, is designed for processing vendor 1099 forms on an IBM System/36 or AS/400 system. It is called by the main OCL program (<code>AP765P.ocl36.txt</code>) and handles sorting, data processing, and printing of 1099 forms for a specified year. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Program Initialization:</li> <li>GSY2K: Calls a system routine to ensure Year 2000 compliance for date handling.</li> <li>Parameters:<ul> <li><code>?10?</code>: Represents the four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: Specifies the 1099 file name (e.g., <code>APVN2012</code>), which contains vendor data.</li> </ul> </li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and is a snapshot of the <code>GAPVEND</code> file before monthly and yearly totals are cleared.</p> </li> <li> <p>Delete Temporary File (if exists):</p> </li> <li> <p><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: Checks if the temporary file <code>?9?AP766</code> (e.g., <code>XXAP766</code> where <code>?9?</code> is a prefix) exists. If it does, the file is deleted to ensure a clean start for processing.</p> </li> <li> <p>Sort Input File:</p> </li> <li><code>LOAD #GSORT</code>: Loads the system sort utility (<code>#GSORT</code>).</li> <li>Input File:<ul> <li><code>FILE NAME-INPUT,LABEL-?13?,DISP-SHR</code>: Specifies the input file as <code>?13?</code> (e.g., <code>APVN2012</code>), opened in shared mode (<code>DISP-SHR</code>).</li> </ul> </li> <li>Output File:<ul> <li><code>FILE NAME-OUTPUT,LABEL-?9?AP765S,RECORDS-999000,EXTEND-999000,RETAIN-J</code>: Creates a sorted output file named <code>?9?AP765S</code> (e.g., <code>XXAP765S</code>), with a capacity of 999,000 records, extendable by another 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 22A 3X N</code>: Defines an ascending sort (<code>A</code>) on a 22-character field starting at position 3, with no sequence checking (<code>N</code>).</li> <li><code>O C 264EQC</code>: Includes records where the field at position 264 equals a constant value (likely a flag or type indicator).</li> <li><code>I*</code>: Indicates inclusion of all records.</li> <li><code>I C 1NECD</code>: Includes records where position 1 equals <code>N</code>, <code>E</code>, <code>C</code>, or <code>D</code> (likely 1099 types: Non-Employee Compensation, etc.).</li> <li><code>IAC 264 264EQC?L'110,1'?</code>: Conditionally includes records based on the value of <code>?L'110,1'?</code> (e.g., <code>M</code> or <code>N</code> from the main OCL, determining 1099 type).</li> <li>Sort Fields:</li> <li><code>FNC 264 264</code>: Sorts on the 1099 type field (position 264, 1 character).</li> <li><code>FNC 4 8</code>: Sorts on the vendor field (positions 4-8, 5 characters).</li> <li><code>FNC 2 3</code>: Sorts on the company field (positions 2-3, 2 characters).</li> </ul> </li> <li><code>RUN</code>: Executes the sort, producing the sorted file <code>?9?AP765S</code>.</li> <li> <p>Purpose: This step sorts the vendor data by 1099 type, vendor, and company to organize records for subsequent processing.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li><code>LOAD AP766</code>: Loads the program <code>AP766</code> (likely an RPG program for data processing).</li> <li>Files Used:<ul> <li><code>FILE NAME-APVEND,LABEL-?13?,DISP-SHR</code>: Input file <code>?13?</code> (e.g., <code>APVN2012</code>), shared mode.</li> <li><code>FILE NAME-AP765S,LABEL-?9?AP765S</code>: Sorted input file <code>?9?AP765S</code> from the previous step.</li> <li><code>FILE NAME-AP766,LABEL-?9?AP766,RECORDS-1000,EXTEND-500</code>: Output file <code>?9?AP766</code>, with an initial capacity of 1,000 records, extendable by 500.</li> <li><code>FILE NAME-PA1099X,LABEL-?9?PA1099X,DISP-SHR</code>: Additional file <code>?9?PA1099X</code>, likely a cross-reference or configuration file, opened in shared mode.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP766</code>, which processes the sorted vendor data and produces the output file <code>?9?AP766</code>.</li> <li> <p>Purpose: This step likely aggregates or transforms the sorted data into a format suitable for printing 1099 forms.</p> </li> <li> <p>Print 1099 Forms:</p> </li> <li><code>LOAD AP765</code>: Loads the program <code>AP765</code> (likely an RPG program for printing).</li> <li>File Used:<ul> <li><code>FILE NAME-AP766,LABEL-?9?AP766,DISP-SHR</code>: Input file <code>?9?AP766</code>, the processed data from the previous step, shared mode.</li> </ul> </li> <li>Printer Configuration:<ul> <li><code>OVRPRTF FILE(AP1099) FORMTYPE(1099) CPI(10) LPI(6)</code>: Overrides printer file <code>AP1099</code> to use form type <code>1099</code>, with 10 characters per inch (<code>CPI</code>) and 6 lines per inch (<code>LPI</code>).</li> <li>The commented line <code>PRINTER NAME-AP1099,FORMSNO-1099,ALIGN-YES,LPI-6,CPI-10</code> suggests similar printer settings, possibly for compatibility with older syntax.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP765</code>, which prints the 1099 forms using the data in <code>?9?AP766</code>.</li> <li> <p>Purpose: This step generates the physical or electronic 1099 forms for vendors.</p> </li> <li> <p>Cleanup Temporary File:</p> </li> <li><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: After processing, checks if the temporary file <code>?9?AP766</code> exists and deletes it to clean up.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input File Validation:</li> <li>The input file <code>?13?</code> (e.g., <code>APVN2012</code>) must exist and contain vendor data from the period-end process (<code>AP300</code>).</li> <li> <p>The file is a snapshot of <code>GAPVEND</code> before monthly and yearly totals are cleared.</p> </li> <li> <p>Data Sorting:</p> </li> <li>Vendor records are sorted by:<ul> <li>1099 type (position 264, e.g., <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> <li>Vendor code (positions 4-8).</li> <li>Company code (positions 2-3).</li> </ul> </li> <li> <p>Only records matching specific 1099 types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>) or the value in <code>?L'110,1'?</code> (e.g., <code>M</code> or <code>N</code>) are included.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files <code>?9?AP765S</code> and <code>?9?AP766</code> are created during processing and deleted afterward to avoid conflicts in subsequent runs.</li> <li><code>?9?AP765S</code> is a sorted version of the input file.</li> <li> <p><code>?9?AP766</code> contains processed data ready for printing.</p> </li> <li> <p>File Retention:</p> </li> <li> <p>The sorted file <code>?9?AP765S</code> is retained as a job file (<code>RETAIN-J</code>), ensuring it persists for the duration of the job.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The 1099 forms are printed with specific formatting (10 CPI, 6 LPI) on form type <code>1099</code>, ensuring compliance with IRS requirements.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li>The <code>GSY2K</code> routine ensures dates are handled correctly, particularly for the year specified in <code>?10?</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>Input File:</li> <li> <p><code>?13?</code> (e.g., <code>APVN2012</code>): The vendor file created by <code>AP300</code>, a snapshot of <code>GAPVEND</code> containing vendor data before totals are cleared. Used in the sort and processing steps.</p> </li> <li> <p>Temporary Files:</p> </li> <li><code>?9?AP765S</code> (e.g., <code>XXAP765S</code>): Sorted output file created by <code>#GSORT</code>, used as input for <code>AP766</code>.</li> <li> <p><code>?9?AP766</code> (e.g., <code>XXAP766</code>): Processed output file created by <code>AP766</code>, used as input for <code>AP765</code> to print 1099 forms.</p> </li> <li> <p>Cross-Reference File:</p> </li> <li> <p><code>?9?PA1099X</code> (e.g., <code>XXPA1099X</code>): Likely a configuration or cross-reference file used by <code>AP766</code> for 1099 processing, opened in shared mode.</p> </li> <li> <p>Printer File:</p> </li> <li><code>AP1099</code>: The printer file used by <code>AP765</code> to output 1099 forms, configured with specific formatting (form type <code>1099</code>, 10 CPI, 6 LPI).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>#GSORT:</li> <li> <p>The system sort utility, used to sort the input file <code>?13?</code> into <code>?9?AP765S</code> based on 1099 type, vendor, and company.</p> </li> <li> <p>AP766:</p> </li> <li> <p>Likely an RPG program that processes the sorted file <code>?9?AP765S</code> and the original vendor file <code>?13?</code>, producing the processed file <code>?9?AP766</code>. It also uses the cross-reference file <code>?9?PA1099X</code>.</p> </li> <li> <p>AP765:</p> </li> <li> <p>Likely an RPG program that reads the processed file <code>?9?AP766</code> and prints 1099 forms to the printer file <code>AP1099</code>.</p> </li> <li> <p>AP300 (Referenced):</p> </li> <li>Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (<code>?13?</code>). Not called directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#outputs","title":"Outputs","text":"<ol> <li>Sorted File:</li> <li> <p><code>?9?AP765S</code>: A temporary file containing the sorted vendor data, created by <code>#GSORT</code>.</p> </li> <li> <p>Processed File:</p> </li> <li> <p><code>?9?AP766</code>: A temporary file containing processed data ready for printing, created by <code>AP766</code>.</p> </li> <li> <p>Printed 1099 Forms:</p> </li> <li>Output to the printer file <code>AP1099</code>, formatted as 1099 forms (form type <code>1099</code>, 10 CPI, 6 LPI). These are the final vendor 1099 forms for the specified year.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20OCL/#summary","title":"Summary","text":"<ul> <li>Purpose: The OCL program <code>AP765.ocl36.txt</code> orchestrates the processing of vendor 1099 forms by sorting vendor data, processing it, and printing the forms for a specified year.</li> <li>Process:</li> <li>Deletes any existing temporary file (<code>?9?AP766</code>).</li> <li>Sorts the input vendor file (<code>?13?</code>, e.g., <code>APVN2012</code>) into <code>?9?AP765S</code> using <code>#GSORT</code>.</li> <li>Processes the sorted data using <code>AP766</code>, producing <code>?9?AP766</code>.</li> <li>Prints 1099 forms using <code>AP765</code> and the printer file <code>AP1099</code>.</li> <li>Cleans up by deleting <code>?9?AP766</code>.</li> <li>Business Rules:</li> <li>Ensures valid input file and 1099 types.</li> <li>Sorts data by 1099 type, vendor, and company.</li> <li>Manages temporary files and printer formatting.</li> <li>Ensures Year 2000 compliance.</li> <li>Files Used:</li> <li>Input: <code>?13?</code> (<code>APVNYYYY</code>), <code>?9?PA1099X</code>.</li> <li>Temporary: <code>?9?AP765S</code>, <code>?9?AP766</code>.</li> <li>Output: <code>AP1099</code> (printer file).</li> <li>External Programs: <code>#GSORT</code>, <code>AP766</code>, <code>AP765</code>.</li> </ul> <p>This program is a critical component of the 1099 processing workflow, integrating sorting, data transformation, and printing to produce IRS-compliant vendor forms.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/","title":"AP765 RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765rpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765.rpg36.txt)","text":"<p>The RPG III program <code>AP765.rpg36.txt</code> is designed to print vendor 1099 forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765.ocl36.txt</code> and uses data from the preprocessed file <code>AP766</code> to generate 1099 forms, printing two forms per page on laser paper. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765</code>) and parameter <code>P016</code>, likely a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0008</code>: <code>AP766</code> (Input, Primary, 300 bytes): The preprocessed work file (e.g., <code>?9?AP766</code> from the OCL), containing consolidated vendor data.</li> <li>Line <code>0009</code>: <code>AP1099</code> (Output, 80 bytes, Printer): The printer file used to output 1099 forms, configured in the OCL with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ul> </li> <li>Line Counter Specification (L):<ul> <li>Line <code>0011</code>: Defines line counter settings for <code>AP1099</code> with 66 lines per form (<code>FL 66</code>) and 66 lines of overflow (<code>OL 66</code>), ensuring proper pagination.</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0012-0025</code>: Define fields in the <code>AP766</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VN1099</code> (1 char, position 2): A/P 1099 code (e.g., <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> <li><code>VNVEND</code> (5 chars, positions 3-7): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 8-37): Vendor name.</li> <li><code>VNADD1-4</code> (30 chars each, positions 38-157): Address lines 1-4.</li> <li><code>L1AMT1</code> (9,2 numeric, positions 158-166): First box amount.</li> <li><code>L1AMT2</code> (9,2 numeric, positions 167-175): Second box amount.</li> <li><code>BOX1</code> (2 numeric, positions 176-177): First box number.</li> <li><code>BOX2</code> (2 numeric, positions 178-179): Second box number.</li> <li><code>VNID#</code> (11 chars, positions 180-190): 1099 ID number (e.g., Tax ID).</li> <li><code>VNPYN1</code> (40 chars, positions 191-230, added by <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 231-270, added by <code>JB01</code>): Payee name 2.</li> <li><code>VNNOVF</code> (1 char, position 271, added by <code>JB02</code>): Name overflow indicator.</li> <li><code>STATID</code> (8 chars, positions 272-279): State ID.</li> <li><code>STATED</code> (9,2 numeric, positions 280-288): State amount.</li> <li>Lines <code>0026-0032</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Company Tax ID.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Threshold amount for printing.</li> <li><code>CURLST</code> (1 char, position 109): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>CNYEAR</code> (4 numeric, positions 201-204): Current year.</li> <li><code>YEAR</code> (4 numeric, positions 203-204): Year (overlaps with <code>CNYEAR</code>, possibly a typo or legacy field).</li> </ul> </li> <li> <p>Initial Vendor Processing:</p> </li> <li>Vendor Number Check:<ul> <li>Lines <code>C*</code>: If <code>VNVEND</code> equals <code>9384</code>, set <code>YES</code> to <code>'YES'</code> (3 chars). This likely flags a specific vendor for special handling, though its purpose is unclear.</li> </ul> </li> <li> <p>1099 Type Check:</p> <ul> <li>If <code>VN1099</code> is <code>M</code> (Miscellaneous), set indicator <code>33</code> on.</li> <li>If <code>VN1099</code> is <code>N</code> (Non-Employee Compensation), set indicator <code>34</code> on.</li> <li>These indicators control which box amounts are printed (e.g., <code>AMT11</code> for 1099-MISC or 1099-NEC).</li> </ul> </li> <li> <p>Amount Validation:</p> </li> <li>Line <code>0034</code>: Add <code>L1AMT1</code> and <code>L1AMT2</code> to compute <code>TOTAMT</code> (9,2 numeric), the total vendor payment.</li> <li>Line <code>0035</code>: Compare <code>TOTAMT</code> with <code>ENTAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>30</code> if <code>TOTAMT</code> is greater than or equal to <code>ENTAMT</code>.</li> <li> <p>Line <code>0036</code>: If indicator <code>30</code> is off (<code>N30</code>), skip to the <code>END</code> tag, bypassing the vendor (i.e., only vendors meeting the threshold are printed).</p> </li> <li> <p>Form Counter Logic:</p> </li> <li> <p>Lines <code>C*</code>: Manage the <code>COUNTP</code> (2 numeric) field to track whether the first (<code>31</code>) or second (<code>32</code>) form on the page is being processed:</p> <ul> <li>If <code>COUNTP</code> is zero, set it to <code>1</code>, set indicator <code>31</code> on (first form), and set <code>32</code> off.</li> <li>Otherwise, increment <code>COUNTP</code>, set <code>31</code> off, and set <code>32</code> on (second form).</li> <li>This supports printing two forms per page (revision <code>MG03</code>).</li> </ul> </li> <li> <p>Clear Work Fields:</p> </li> <li> <p>Lines <code>JB01</code>: For each form (indicators <code>31</code> or <code>32</code>):</p> <ul> <li>Clear fields for payee names (<code>PYN11</code>, <code>PYN12</code>, <code>PYN21</code>, <code>PYN22</code>), tax IDs (<code>VNID#1</code>, <code>VNID#2</code>), state amounts (<code>STATE1</code>, <code>STATE2</code>), state IDs (<code>STATI1</code>, <code>STATI2</code>), vendor numbers (<code>VNVEN1</code>, <code>VNVEN2</code>), addresses (<code>ADDR11</code>, <code>ADDR12</code>, <code>ADDR21</code>, <code>ADDR22</code>, <code>CTSTZ1</code>, <code>CTSTZ2</code>), and amounts (<code>AMT11</code>, <code>AMT12</code>, <code>AMT31</code>, <code>AMT32</code>, <code>AMT61</code>, <code>AMT62</code>, <code>AMT71</code>, <code>AMT72</code>).</li> <li>Reset indicators <code>71</code>, <code>72</code>, <code>35</code>, <code>36</code> to control name and address printing.</li> </ul> </li> <li> <p>Payee and Address Processing (First Form, Indicator <code>31</code>):</p> </li> <li>Lines <code>JB01</code>: Determine whether to use vendor name or payee names:<ul> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> for <code>PYN11</code> (vendor name).</li> <li>If <code>VNNOVF</code> is <code>Y</code> (name overflow, revision <code>JB02</code>), set indicators <code>35</code> and <code>71</code> on.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> for <code>PYN11</code> and set <code>71</code> on. If <code>VNPYN2</code> is not blank, use <code>VNPYN2</code> for <code>PYN21</code> and set <code>71</code> on.</li> </ul> </li> <li>Lines <code>0045-0069</code>: Assign address fields based on non-blank values:<ul> <li>If <code>VNADD4</code> is not blank, set <code>CTSTZ1</code> (city/state/ZIP) to <code>VNADD4</code>, <code>VNAD21</code> to <code>VNADD3</code>, <code>VNAD11</code> to <code>VNADD2</code>, and <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD3</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD3</code>, <code>VNAD21</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD2</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD1</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD1</code>.</li> <li>If none are non-blank, set indicator <code>73</code> on (likely to skip address printing).</li> <li>Jump to <code>CONT1</code> tag after address assignment.</li> </ul> </li> <li> <p>Lines <code>0045-0069</code> (non-overflow case, <code>N35</code>): Similar address assignment without overflow logic.</p> </li> <li> <p>Payee and Address Processing (Second Form, Indicator <code>32</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, with indicators <code>36</code> and <code>72</code>, jumping to <code>CONT2</code> tag.</p> </li> <li> <p>Address Processing (Non-Overflow, <code>CONT3</code> and <code>CONT4</code>):</p> </li> <li> <p>Lines <code>0045-0069</code>: For both forms (<code>31N35</code> and <code>32N36</code>), assign address fields similarly to ensure proper formatting when no name overflow occurs.</p> </li> <li> <p>Amount Assignment for Printing:</p> </li> <li> <p>Lines <code>0071-0094</code>: Assign amounts to specific 1099 box fields based on <code>BOX1</code> and <code>BOX2</code>:</p> <ul> <li>For <code>BOX1</code> (indicators <code>31</code> and <code>32</code>):</li> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code> to <code>L1AMT1</code> (e.g., box 1 for 1099-MISC).</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code> to <code>L1AMT1</code> (e.g., box 3 for 1099-MISC).</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code> to <code>L1AMT1</code> (e.g., box 6 for 1099-MISC).</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code> to <code>L1AMT1</code> (e.g., box 7 for 1099-NEC).</li> <li>For <code>BOX2</code> (indicators <code>31</code> and <code>32</code>):</li> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code> to <code>L1AMT2</code>.</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code> to <code>L1AMT2</code>.</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code> to <code>L1AMT2</code>.</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code> to <code>L1AMT2</code>.</li> </ul> </li> <li> <p>Accumulate Totals:</p> <ul> <li>Lines <code>0095-0098</code>: For each form:</li> <li>Increment <code>COUNT</code> (6 numeric, total vendors printed).</li> <li>Add <code>AMT11</code>/<code>AMT12</code> to <code>LRAMT1</code> (10,2 numeric, total for box 1).</li> <li>Add <code>AMT31</code>/<code>AMT32</code> to <code>LRAMT3</code> (total for box 3).</li> <li>Add <code>AMT61</code>/<code>AMT62</code> to <code>LRAMT6</code> (total for box 6).</li> <li>Add <code>AMT71</code>/<code>AMT72</code> to <code>LRAMT7</code> (total for box 7).</li> </ul> </li> <li> <p>Page Break Logic:</p> <ul> <li>Lines <code>C*</code>: If <code>COUNTP</code> equals <code>2</code> (both forms on the page filled):</li> <li>Reset <code>COUNTP</code> to zero, set <code>31</code> on, and execute an <code>EXCPT</code> to print the page.</li> <li>At end of file (<code>LR</code> on):</li> <li>If data remains for the first form (<code>31</code> on, not <code>32</code>), print a final page with one vendor.</li> <li>Compute total amount <code>LRAMT</code> (11,2 numeric) by summing <code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>.</li> <li>Set indicator <code>30</code> and execute <code>EXCPT</code> to print totals.</li> </ul> </li> <li> <p>Output to Printer:</p> <ul> <li>Lines <code>0107-0140</code>: Define the output format for <code>AP1099</code>:</li> <li>First Form (Indicator <code>31</code>):<ul> <li>Lines 5-23: Print company headers (<code>HEAD1-3</code>), year (<code>CNYEAR</code>), tax IDs (<code>ID#</code>, <code>VNID#1</code>), payee names (<code>PYN11</code>, <code>PYN21</code>), addresses (<code>VNAD11</code>, <code>VNAD21</code>, <code>CTSTZ1</code>), and amounts (<code>AMT11</code>, <code>AMT31</code>, <code>AMT61</code>, <code>AMT71</code>).</li> <li>Conditional on <code>33</code> (1099-MISC) or <code>34</code> (1099-NEC) for amount fields.</li> </ul> </li> <li>Second Form (Indicator <code>32</code>):<ul> <li>Similar fields for the second form, using <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, <code>AMT12</code>, <code>AMT32</code>, <code>AMT62</code>, <code>AMT72</code>, <code>VNID#2</code>.</li> </ul> </li> <li>Totals (LR):<ul> <li>Print <code>HEAD1-3</code>, <code>ID#</code>, totals (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT</code>), and vendor count (<code>COUNT</code>).</li> </ul> </li> <li>Vendor Number (Revision <code>JB02</code>):<ul> <li>Print <code>VNVEN1</code>/<code>VNVEN2</code> as the account number for each form.</li> </ul> </li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Threshold Check:</li> <li> <p>Only vendors with a total amount (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) greater than or equal to <code>ENTAMT</code> are printed.</p> </li> <li> <p>Two Forms per Page:</p> </li> <li>The program prints two 1099 forms per page on laser paper (revision <code>MG03</code>), managed by <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>.</li> <li> <p>If only one vendor remains at the end of the file, a final page with one form is printed.</p> </li> <li> <p>Payee Name Handling:</p> </li> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> (vendor name). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code> (payee names, revision <code>JB01</code>).</li> <li> <p>If <code>VNNOVF</code> is <code>Y</code>, use address fields to continue the name on the second line (revision <code>JB02</code>).</p> </li> <li> <p>Address Formatting:</p> </li> <li> <p>Use the highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) for city/state/ZIP (<code>CTSTZ1</code>/<code>CTSTZ2</code>) and shift other fields accordingly to ensure proper formatting.</p> </li> <li> <p>Box Amount Assignment:</p> </li> <li> <p>Amounts are assigned to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code> values, supporting both 1099-MISC and 1099-NEC forms (revision <code>MG04</code>).</p> </li> <li> <p>1099 Type:</p> </li> <li> <p>Indicator <code>33</code> for 1099-MISC (<code>VN1099 = 'M'</code>) and <code>34</code> for 1099-NEC (<code>VN1099 = 'N'</code>) control amount field printing.</p> </li> <li> <p>Totals:</p> </li> <li> <p>Accumulate totals for each box (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>) and vendor count (<code>COUNT</code>) for the final summary.</p> </li> <li> <p>Vendor Number as Account Number:</p> </li> <li>Print <code>VNVEND</code> as the account number (revision <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AP766:</li> <li>Input file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains preprocessed vendor data from <code>AP766.rpg36.txt</code>, including vendor details, amounts, box numbers, and payee names.</p> </li> <li> <p>AP1099:</p> </li> <li>Output printer file (80 bytes, labeled <code>AP1099</code> in the OCL).</li> <li> <p>Configured to print 1099 forms with form type <code>1099</code>, 10 CPI, 6 LPI, two forms per page.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL (<code>?9?PA1099X</code>), likely a cross-reference file, but not used directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP765</code>. It is invoked by <code>AP765.ocl36.txt</code> and processes data from <code>AP766.rpg36.txt</code>, with input prepared by <code>#GSORT</code> and <code>AP766</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 Printer File:</li> <li>Prints 1099 forms (two per page, revision <code>MG03</code>) with:<ul> <li>Company headers (<code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>).</li> <li>Year (<code>CNYEAR</code>).</li> <li>Company Tax ID (<code>ID#</code>) and vendor Tax ID (<code>VNID#1</code>/<code>VNID#2</code>).</li> <li>Payee names (<code>PYN11</code>/<code>PYN12</code>, <code>PYN21</code>/<code>PYN22</code>) or vendor name (<code>VNNAME</code>).</li> <li>Addresses (<code>VNAD11</code>/<code>VNAD12</code>, <code>VNAD21</code>/<code>VNAD22</code>, <code>CTSTZ1</code>/<code>CTSTZ2</code>).</li> <li>Amounts for boxes 1, 3, 6, or 7 (<code>AMT11</code>/<code>AMT12</code>, <code>AMT31</code>/<code>AMT32</code>, <code>AMT61</code>/<code>AMT62</code>, <code>AMT71</code>/<code>AMT72</code>).</li> <li>Vendor number as account number (<code>VNVEN1</code>/<code>VNVEN2</code>, revision <code>JB02</code>).</li> </ul> </li> <li>Final page includes totals (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT</code>) and vendor count (<code>COUNT</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765</code> prints 1099 forms (MISC and NEC) using preprocessed vendor data, formatting two forms per page on laser paper.</li> <li>Process:</li> <li>Reads <code>AP766</code> and validates vendor amounts against a threshold (<code>ENTAMT</code>).</li> <li>Manages two forms per page with <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>.</li> <li>Assigns payee names, addresses, and amounts to appropriate fields.</li> <li>Prints forms with company and vendor details, amounts, and totals.</li> <li>Business Rules:</li> <li>Prints only vendors meeting the amount threshold.</li> <li>Supports two forms per page and different 1099 types (MISC, NEC).</li> <li>Handles payee names, name overflow, and vendor number as account number.</li> <li>Accumulates totals for reporting.</li> <li>Files Used:</li> <li>Input: <code>AP766</code> (preprocessed vendor data).</li> <li>Output: <code>AP1099</code> (printer file for 1099 forms).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code>, <code>AP766</code>, and <code>AP765P</code>.</li> </ul> <p>This program finalizes the 1099 form printing process, producing IRS-compliant output for vendors.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/","title":"AP765N OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#explanation-of-the-process-steps-and-business-rules-in-the-ocl-program-ap765nocl36txt","title":"Explanation of the Process Steps and Business Rules in the OCL Program (AP765N.ocl36.txt)","text":"<p>The OCL (Operation Control Language) program <code>AP765N.ocl36.txt</code> is an alternative path for processing vendor 1099 forms on an IBM System/36 or AS/400 system, called conditionally from <code>AP765P.ocl36.txt</code> when <code>?L'110,1'?</code> is <code>N</code> instead of <code>M</code>. It is nearly identical to <code>AP765.ocl36.txt</code> but invokes <code>AP765N</code> instead of <code>AP765</code> for printing the 1099 forms, suggesting a variation in the printing process (likely for 1099-NEC forms instead of 1099-MISC). Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Program Initialization:</li> <li>GSY2K: Invokes a system routine to ensure Year 2000 compliance for date handling.</li> <li>Parameters:<ul> <li><code>?10?</code>: Specifies the four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: Specifies the 1099 file name (e.g., <code>APVN2012</code>), containing vendor data.</li> </ul> </li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and is a snapshot of the <code>GAPVEND</code> file before monthly and yearly totals are cleared.</p> </li> <li> <p>Delete Temporary File (if exists):</p> </li> <li> <p><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: Checks if the temporary file <code>?9?AP766</code> (e.g., <code>XXAP766</code>, where <code>?9?</code> is a prefix) exists. If it does, the file is deleted to ensure a clean start for processing.</p> </li> <li> <p>Sort Input File:</p> </li> <li><code>LOAD #GSORT</code>: Loads the system sort utility (<code>#GSORT</code>).</li> <li>Input File:<ul> <li><code>FILE NAME-INPUT,LABEL-?13?,DISP-SHR</code>: Specifies the input file as <code>?13?</code> (e.g., <code>APVN2012</code>), opened in shared mode (<code>DISP-SHR</code>).</li> </ul> </li> <li>Output File:<ul> <li><code>FILE NAME-OUTPUT,LABEL-?9?AP765S,RECORDS-999000,EXTEND-999000,RETAIN-J</code>: Creates a sorted output file named <code>?9?AP765S</code> (e.g., <code>XXAP765S</code>), with a capacity of 999,000 records, extendable by another 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTA 22A 3X N</code>: Defines an ascending sort (<code>A</code>) on a 22-character field starting at position 3, with no sequence checking (<code>N</code>).</li> <li><code>O C 264EQC</code>: Includes records where the field at position 264 equals a constant value (likely a flag or type indicator).</li> <li><code>I*</code>: Includes all records.</li> <li><code>I C 1NECD</code>: Includes records where position 1 equals <code>N</code>, <code>E</code>, <code>C</code>, or <code>D</code> (likely 1099 types: Non-Employee Compensation, etc.).</li> <li><code>IAC 264 264EQC?L'110,1'?</code>: Conditionally includes records based on the value of <code>?L'110,1'?</code> (in this case, <code>N</code> for 1099-NEC).</li> <li>Sort Fields:</li> <li><code>FNC 264 264</code>: Sorts on the 1099 type field (position 264, 1 character).</li> <li><code>FNC 4 8</code>: Sorts on the vendor field (positions 4-8, 5 characters).</li> <li><code>FNC 2 3</code>: Sorts on the company field (positions 2-3, 2 characters).</li> </ul> </li> <li><code>RUN</code>: Executes the sort, producing the sorted file <code>?9?AP765S</code>.</li> <li> <p>Purpose: Sorts vendor data by 1099 type (likely filtered for <code>N</code>), vendor, and company to organize records for processing.</p> </li> <li> <p>Process Sorted Data:</p> </li> <li><code>LOAD AP766</code>: Loads the program <code>AP766</code> (an RPG program for data processing, as described in <code>AP766.rpg36.txt</code>).</li> <li>Files Used:<ul> <li><code>FILE NAME-APVEND,LABEL-?13?,DISP-SHR</code>: Input file <code>?13?</code> (e.g., <code>APVN2012</code>), shared mode.</li> <li><code>FILE NAME-AP765S,LABEL-?9?AP765S</code>: Sorted input file <code>?9?AP765S</code> from the sort step.</li> <li><code>FILE NAME-AP766,LABEL-?9?AP766,RECORDS-1000,EXTEND-500</code>: Output file <code>?9?AP766</code>, with an initial capacity of 1,000 records, extendable by 500.</li> <li><code>FILE NAME-PA1099X,LABEL-?9?PA1099X,DISP-SHR</code>: Cross-reference or configuration file <code>?9?PA1099X</code>, opened in shared mode.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP766</code>, which processes the sorted vendor data and produces the output file <code>?9?AP766</code>.</li> <li> <p>Purpose: Consolidates vendor records (one per vendor) and prepares data for printing, likely focusing on 1099-NEC forms due to <code>?L'110,1'?</code> being <code>N</code>.</p> </li> <li> <p>Print 1099 Forms:</p> </li> <li><code>LOAD AP765N</code>: Loads the program <code>AP765N</code> (an RPG program for printing, distinct from <code>AP765</code>).</li> <li>File Used:<ul> <li><code>FILE NAME-AP766,LABEL-?9?AP766,DISP-SHR</code>: Input file <code>?9?AP766</code>, the processed data from <code>AP766</code>, shared mode.</li> </ul> </li> <li>Printer Configuration:<ul> <li><code>OVRPRTF FILE(AP1099) FORMTYPE(1099) CPI(10) LPI(6)</code>: Overrides printer file <code>AP1099</code> to use form type <code>1099</code>, with 10 characters per inch (<code>CPI</code>) and 6 lines per inch (<code>LPI</code>).</li> <li>The commented line <code>PRINTER NAME-AP1099,FORMSNO-1099,ALIGN-YES,LPI-6,CPI-10</code> suggests similar settings for older syntax compatibility.</li> </ul> </li> <li><code>RUN</code>: Executes <code>AP765N</code>, which prints the 1099 forms (likely 1099-NEC) using the data in <code>?9?AP766</code>.</li> <li> <p>Purpose: Generates the final 1099 forms, tailored for the <code>N</code> type (Non-Employee Compensation).</p> </li> <li> <p>Cleanup Temporary File:</p> </li> <li><code>IF DATAF1-?9?AP766 DELETE ?9?AP766,F1</code>: After processing, checks if the temporary file <code>?9?AP766</code> exists and deletes it to clean up.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Input File Validation:</li> <li>The input file <code>?13?</code> (e.g., <code>APVN2012</code>) must exist and contain vendor data from the period-end process (<code>AP300</code>).</li> <li> <p>It is a snapshot of <code>GAPVEND</code> before monthly and yearly totals are cleared.</p> </li> <li> <p>Data Sorting:</p> </li> <li>Vendor records are sorted by:<ul> <li>1099 type (position 264, likely <code>N</code> for Non-Employee Compensation due to <code>?L'110,1'?</code>).</li> <li>Vendor code (positions 4-8).</li> <li>Company code (positions 2-3).</li> </ul> </li> <li> <p>Only records matching specific 1099 types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>) or the value in <code>?L'110,1'?</code> (<code>N</code>) are included.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files <code>?9?AP765S</code> and <code>?9?AP766</code> are created during processing and deleted afterward to avoid conflicts in subsequent runs.</li> <li><code>?9?AP765S</code> is a sorted version of the input file.</li> <li> <p><code>?9?AP766</code> contains processed data ready for printing.</p> </li> <li> <p>File Retention:</p> </li> <li> <p>The sorted file <code>?9?AP765S</code> is retained as a job file (<code>RETAIN-J</code>), ensuring it persists for the duration of the job.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The 1099 forms are printed with specific formatting (10 CPI, 6 LPI) on form type <code>1099</code>, ensuring IRS compliance, likely for 1099-NEC forms.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li> <p>The <code>GSY2K</code> routine ensures proper date handling for the year specified in <code>?10?</code>.</p> </li> <li> <p>Conditional Path:</p> </li> <li>This program is called when <code>?L'110,1'?</code> is <code>N</code> in <code>AP765P.ocl36.txt</code>, indicating a focus on 1099-NEC forms rather than 1099-MISC (handled by <code>AP765.ocl36.txt</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>Input File:</li> <li> <p><code>?13?</code> (e.g., <code>APVN2012</code>): The vendor file created by <code>AP300</code>, a snapshot of <code>GAPVEND</code> containing vendor data. Used in the sort and processing steps.</p> </li> <li> <p>Temporary Files:</p> </li> <li><code>?9?AP765S</code> (e.g., <code>XXAP765S</code>): Sorted output file created by <code>#GSORT</code>, used as input for <code>AP766</code>.</li> <li> <p><code>?9?AP766</code> (e.g., <code>XXAP766</code>): Processed output file created by <code>AP766</code>, used as input for <code>AP765N</code> to print 1099 forms.</p> </li> <li> <p>Cross-Reference File:</p> </li> <li> <p><code>?9?PA1099X</code> (e.g., <code>XXPA1099X</code>): A configuration or cross-reference file used by <code>AP766</code>, opened in shared mode.</p> </li> <li> <p>Printer File:</p> </li> <li><code>AP1099</code>: The printer file used by <code>AP765N</code> to output 1099 forms, configured with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>#GSORT:</li> <li> <p>The system sort utility, used to sort the input file <code>?13?</code> into <code>?9?AP765S</code> based on 1099 type, vendor, and company.</p> </li> <li> <p>AP766:</p> </li> <li> <p>An RPG program (<code>AP766.rpg36.txt</code>) that processes the sorted file <code>?9?AP765S</code> and the vendor file <code>?13?</code>, producing the processed file <code>?9?AP766</code>. It uses the cross-reference file <code>?9?PA1099X</code>.</p> </li> <li> <p>AP765N:</p> </li> <li> <p>An RPG program (not provided, but referenced in the OCL) that reads the processed file <code>?9?AP766</code> and prints 1099 forms (likely 1099-NEC) to the printer file <code>AP1099</code>.</p> </li> <li> <p>AP300 (Referenced):</p> </li> <li>Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (<code>?13?</code>). Not called directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#outputs","title":"Outputs","text":"<ol> <li>Sorted File:</li> <li> <p><code>?9?AP765S</code>: A temporary file containing sorted vendor data, created by <code>#GSORT</code>.</p> </li> <li> <p>Processed File:</p> </li> <li> <p><code>?9?AP766</code>: A temporary file containing processed data ready for printing, created by <code>AP766</code>.</p> </li> <li> <p>Printed 1099 Forms:</p> </li> <li>Output to the printer file <code>AP1099</code>, formatted as 1099 forms (likely 1099-NEC due to <code>?L'110,1'?</code> being <code>N</code>), with 10 CPI, 6 LPI.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#comparison-with-ap765ocl36txt","title":"Comparison with AP765.ocl36.txt","text":"<ul> <li>Similarity: <code>AP765N.ocl36.txt</code> is nearly identical to <code>AP765.ocl36.txt</code>, with the same file handling, sorting logic, and cleanup steps. Both use <code>#GSORT</code> and <code>AP766</code> for preprocessing and produce output via <code>AP1099</code>.</li> <li>Difference: The key difference is the printing program:</li> <li><code>AP765.ocl36.txt</code> calls <code>AP765</code> (likely for 1099-MISC forms, as <code>?L'110,1'?</code> is <code>M</code>).</li> <li><code>AP765N.ocl36.txt</code> calls <code>AP765N</code> (likely for 1099-NEC forms, as <code>?L'110,1'?</code> is <code>N</code>).</li> <li>This suggests <code>AP765N</code> may have specific formatting or logic tailored for 1099-NEC, such as different box assignments or layout.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20OCL/#summary","title":"Summary","text":"<ul> <li>Purpose: The OCL program <code>AP765N.ocl36.txt</code> processes vendor 1099 forms (likely 1099-NEC) by sorting vendor data, preprocessing it, and printing the forms for a specified year.</li> <li>Process:</li> <li>Deletes existing temporary file <code>?9?AP766</code>.</li> <li>Sorts the vendor file <code>?13?</code> (e.g., <code>APVN2012</code>) into <code>?9?AP765S</code> using <code>#GSORT</code>.</li> <li>Processes sorted data with <code>AP766</code>, producing <code>?9?AP766</code>.</li> <li>Prints 1099 forms (likely 1099-NEC) using <code>AP765N</code> and printer file <code>AP1099</code>.</li> <li>Cleans up by deleting <code>?9?AP766</code>.</li> <li>Business Rules:</li> <li>Validates input file and focuses on 1099 type <code>N</code> (Non-Employee Compensation).</li> <li>Sorts data by 1099 type, vendor, and company.</li> <li>Manages temporary files and ensures printer formatting compliance.</li> <li>Maintains Year 2000 compliance.</li> <li>Files Used:</li> <li>Input: <code>?13?</code> (<code>APVNYYYY</code>), <code>?9?PA1099X</code>.</li> <li>Temporary: <code>?9?AP765S</code>, <code>?9?AP766</code>.</li> <li>Output: <code>AP1099</code> (printer file).</li> <li>External Programs: <code>#GSORT</code>, <code>AP766</code>, <code>AP765N</code>.</li> </ul> <p>This program provides an alternative path for 1099-NEC form processing, differing from <code>AP765.ocl36.txt</code> primarily in the printing step, ensuring flexibility for different 1099 form types. Since <code>AP765N.rpg36.txt</code> was not provided, I can infer its role based on the context, but a detailed analysis of its logic would require the source code. If you have <code>AP765N.rpg36.txt</code>, please provide it for a complete breakdown.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/","title":"AP765N RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765nrpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765N.rpg36.txt)","text":"<p>The RPG III program <code>AP765N.rpg36.txt</code> is designed to print vendor 1099-NEC (Non-Employee Compensation) forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765N.ocl36.txt</code> when <code>?L'110,1'?</code> is set to <code>N</code> in the main OCL (<code>AP765P.ocl36.txt</code>), indicating a focus on 1099-NEC forms. This program is similar to <code>AP765.rpg36.txt</code> (used for 1099-MISC forms) but has modifications to handle three forms per page instead of two, reflecting differences in form layout or printing requirements for 1099-NEC. Below is a detailed explanation of the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765N</code>) and parameter <code>P016</code>, likely a control parameter passed from the OCL.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0008</code>: <code>AP766</code> (Input, Primary, 300 bytes): The preprocessed work file (e.g., <code>?9?AP766</code> from the OCL), containing consolidated vendor data from <code>AP766.rpg36.txt</code>.</li> <li>Line <code>0009</code>: <code>AP1099</code> (Output, 80 bytes, Printer): The printer file used to output 1099-NEC forms, configured in the OCL with form type <code>1099</code>, 10 CPI, and 6 LPI.</li> </ul> </li> <li>Line Counter Specification (L):<ul> <li>Line <code>0011</code>: Defines line counter settings for <code>AP1099</code> with 66 lines per form (<code>FL 66</code>) and 66 lines of overflow (<code>OL 66</code>), ensuring proper pagination.</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0012-0025</code>: Define fields in the <code>AP766</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VN1099</code> (1 char, position 2): A/P 1099 code (e.g., <code>N</code> for Non-Employee Compensation).</li> <li><code>VNVEND</code> (5 chars, positions 3-7): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 8-37): Vendor name.</li> <li><code>VNADD1-4</code> (30 chars each, positions 38-157): Address lines 1-4.</li> <li><code>L1AMT1</code> (9,2 numeric, positions 158-166): First box amount.</li> <li><code>L1AMT2</code> (9,2 numeric, positions 167-175): Second box amount.</li> <li><code>BOX1</code> (2 numeric, positions 176-177): First box number.</li> <li><code>BOX2</code> (2 numeric, positions 178-179): Second box number.</li> <li><code>VNID#</code> (11 chars, positions 180-190): 1099 ID number (e.g., Tax ID).</li> <li><code>VNPYN1</code> (40 chars, positions 191-230, added by <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 231-270, added by <code>JB01</code>): Payee name 2.</li> <li><code>VNNOVF</code> (1 char, position 271, added by <code>JB02</code>): Name overflow indicator.</li> <li><code>STATID</code> (8 chars, positions 272-279): State ID.</li> <li><code>STATED</code> (9,2 numeric, positions 280-288): State amount.</li> <li>Lines <code>0026-0032</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Company Tax ID.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Threshold amount for printing.</li> <li><code>CURLST</code> (1 char, position 109): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>CNYEAR</code> (4 numeric, positions 201-204): Current year.</li> <li><code>YEAR</code> (4 numeric, positions 203-204): Year (overlaps with <code>CNYEAR</code>, possibly a typo or legacy field).</li> </ul> </li> <li> <p>Initial Vendor Processing:</p> </li> <li>Indicator Reset:<ul> <li>Line <code>C*</code>: Set indicator <code>33</code> off (disabling 1099-MISC logic, as this program is for 1099-NEC).</li> </ul> </li> <li>1099 Type Check:<ul> <li>Lines <code>C*</code>: If <code>VN1099</code> is <code>N</code>, set indicator <code>34</code> on (for 1099-NEC).</li> <li>The commented-out logic for <code>VN1099 = 'M'</code> (1099-MISC) indicates this program is exclusively for 1099-NEC.</li> </ul> </li> <li> <p>Vendor Number Check:</p> <ul> <li>Lines <code>C*</code>: If <code>VNVEND</code> equals <code>32800</code>, set <code>YES</code> to <code>'YES'</code> (3 chars). This likely flags a specific vendor for special handling, though its purpose is unclear (different from <code>9384</code> in <code>AP765</code>).</li> </ul> </li> <li> <p>Amount Validation:</p> </li> <li>Line <code>0034</code>: Add <code>L1AMT1</code> and <code>L1AMT2</code> to compute <code>TOTAMT</code> (9,2 numeric), the total vendor payment.</li> <li>Line <code>0035</code>: Compare <code>TOTAMT</code> with <code>ENTAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>30</code> if <code>TOTAMT</code> is greater than or equal to <code>ENTAMT</code>.</li> <li> <p>Line <code>0036</code>: If indicator <code>30</code> is off (<code>N30</code>), skip to the <code>END</code> tag, bypassing the vendor (i.e., only vendors meeting the threshold are printed).</p> </li> <li> <p>Form Counter Logic:</p> </li> <li> <p>Lines <code>C*</code>: Manage the <code>COUNTP</code> (2 numeric) field to track whether the first (<code>31</code>), second (<code>32</code>), or third (<code>40</code>) form on the page is being processed:</p> <ul> <li>If <code>COUNTP</code> is <code>2</code>, increment to <code>3</code>, set indicator <code>40</code> on (third form), set <code>32</code> off, and jump to <code>SKIP</code>.</li> <li>If <code>COUNTP</code> is zero, set it to <code>1</code>, set <code>31</code> on (first form), set <code>32</code> and <code>40</code> off.</li> <li>Otherwise, increment <code>COUNTP</code>, set <code>31</code> and <code>40</code> off, set <code>32</code> on (second form).</li> <li>This supports printing three forms per page, a key difference from <code>AP765</code> (which prints two forms per page, revision <code>MG03</code>).</li> </ul> </li> <li> <p>Clear Work Fields:</p> </li> <li> <p>Lines <code>JB01</code>: For each form (indicators <code>31</code>, <code>32</code>, <code>40</code>):</p> <ul> <li>Clear fields for payee names (<code>PYN11</code>, <code>PYN12</code>, <code>PYN13</code>, <code>PYN21</code>, <code>PYN22</code>, <code>PYN23</code>), tax IDs (<code>VNID#1</code>, <code>VNID#2</code>, <code>VNID#3</code>), state amounts (<code>STATE1</code>, <code>STATE2</code>, <code>STATE3</code>), state IDs (<code>STATI1</code>, <code>STATI2</code>, <code>STATI3</code>), vendor numbers (<code>VNVEN1</code>, <code>VNVEN2</code>, <code>VNVEN3</code>), addresses (<code>ADDR11</code>, <code>ADDR12</code>, <code>ADDR13</code>, <code>ADDR21</code>, <code>ADDR22</code>, <code>ADDR23</code>, <code>CTSTZ1</code>, <code>CTSTZ2</code>, <code>CTSTZ3</code>), and amounts (<code>AMT11</code>, <code>AMT12</code>, <code>AMT13</code>, <code>AMT31</code>, <code>AMT32</code>, <code>AMT33</code>, <code>AMT61</code>, <code>AMT62</code>, <code>AMT63</code>, <code>AMT71</code>, <code>AMT72</code>, <code>AMT73</code>).</li> <li>Reset indicators <code>71</code>, <code>72</code>, <code>73</code>, <code>35</code>, <code>36</code>, <code>37</code> to control name and address printing.</li> </ul> </li> <li> <p>Payee and Address Processing (First Form, Indicator <code>31</code>):</p> </li> <li>Lines <code>JB01</code>: Determine whether to use vendor name or payee names:<ul> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> for <code>PYN11</code> (vendor name).</li> <li>If <code>VNNOVF</code> is <code>Y</code> (name overflow, revision <code>JB02</code>), set indicators <code>35</code> and <code>71</code> on.</li> <li>If <code>VNPYN1</code> is not blank, use <code>VNPYN1</code> for <code>PYN11</code> and set <code>71</code> on. If <code>VNPYN2</code> is not blank, use <code>VNPYN2</code> for <code>PYN21</code> and set <code>71</code> on.</li> </ul> </li> <li>Lines <code>0045-0069</code>: Assign address fields based on non-blank values:<ul> <li>If <code>VNADD4</code> is not blank, set <code>CTSTZ1</code> (city/state/ZIP) to <code>VNADD4</code>, <code>VNAD21</code> to <code>VNADD3</code>, <code>VNAD11</code> to <code>VNADD2</code>, and <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD3</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD3</code>, <code>VNAD21</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD2</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD2</code>, <code>PYN21</code> to <code>VNADD1</code>.</li> <li>Else if <code>VNADD1</code> is not blank, set <code>CTSTZ1</code> to <code>VNADD1</code>.</li> <li>If none are non-blank, set indicator <code>73</code> on (likely to skip address printing).</li> <li>Jump to <code>CONT1</code> tag after address assignment.</li> </ul> </li> <li> <p>Lines <code>0045-0069</code> (non-overflow case, <code>N35</code>): Similar address assignment without overflow logic.</p> </li> <li> <p>Payee and Address Processing (Second Form, Indicator <code>32</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, with indicators <code>36</code> and <code>72</code>, jumping to <code>CONT2</code> tag.</p> </li> <li> <p>Payee and Address Processing (Third Form, Indicator <code>40</code>):</p> </li> <li> <p>Identical logic to the first form, but for fields <code>PYN13</code>, <code>PYN23</code>, <code>VNAD13</code>, <code>CTSTZ3</code>, with indicators <code>37</code> and <code>73</code>, jumping to <code>CONT3</code> tag.</p> </li> <li> <p>Address Processing (Non-Overflow, <code>CONT3</code>, <code>CONT4</code>, <code>CONT5</code>):</p> </li> <li> <p>Lines <code>0045-0069</code>: For each form (<code>31N35</code>, <code>32N36</code>, <code>40N37</code>), assign address fields similarly to ensure proper formatting when no name overflow occurs, jumping to <code>CONT3</code>, <code>CONT4</code>, or <code>CONT5</code> tags.</p> </li> <li> <p>Amount Assignment for Printing:</p> <ul> <li>Lines <code>0071-0094</code>: Assign amounts to specific 1099 box fields based on <code>BOX1</code> and <code>BOX2</code> for each form (<code>31</code>, <code>32</code>, <code>40</code>):</li> <li>For <code>BOX1</code>:<ul> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>L1AMT1</code> (box 1 for 1099-NEC).</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>L1AMT1</code> (box 3, possibly for other forms).</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>L1AMT1</code> (box 6, possibly for other forms).</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>L1AMT1</code> (box 7, standard for 1099-NEC Non-Employee Compensation).</li> </ul> </li> <li>For <code>BOX2</code>:<ul> <li>If <code>1</code>, set <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>L1AMT2</code>.</li> <li>If <code>3</code>, set <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>L1AMT2</code>.</li> <li>If <code>6</code>, set <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>L1AMT2</code>.</li> <li>If <code>7</code>, set <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>L1AMT2</code>.</li> </ul> </li> </ul> </li> <li> <p>Accumulate Totals:</p> <ul> <li>Lines <code>0095-0098</code>: For each form (<code>31</code>, <code>32</code>, <code>40</code>):</li> <li>Increment <code>COUNT</code> (6 numeric, total vendors printed).</li> <li>Add <code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code> to <code>LRAMT1</code> (10,2 numeric, total for box 1).</li> <li>Add <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code> to <code>LRAMT3</code> (total for box 3).</li> <li>Add <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code> to <code>LRAMT6</code> (total for box 6).</li> <li>Add <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code> to <code>LRAMT7</code> (total for box 7).</li> </ul> </li> <li> <p>Page Break Logic:</p> <ul> <li>Lines <code>C*</code>: If <code>COUNTP</code> equals <code>3</code> (all three forms on the page filled):</li> <li>Reset <code>COUNTP</code> to zero, set indicators <code>31</code>, <code>32</code>, <code>40</code> on, and execute an <code>EXCPT</code> to print the page.</li> <li>At end of file (<code>LR</code> on):</li> <li>If data remains for the first form (<code>31</code> on), set indicator <code>30</code> on, clear <code>TEST</code> (11 chars), and execute <code>EXCPT</code> to print a final page with one vendor.</li> <li>Unlike <code>AP765</code>, this program does not compute a grand total (<code>LRAMT</code>) across all boxes, focusing only on individual box totals.</li> </ul> </li> <li> <p>Output to Printer:</p> <ul> <li>Lines <code>0107-0140</code>: Define the output format for <code>AP1099</code>:</li> <li>First Form (Indicator <code>31</code>):<ul> <li>Lines 5-23: Print company headers (<code>HEAD1-3</code>), year (<code>CNYEAR</code>), tax IDs (<code>ID#</code>, <code>VNID#1</code>), payee names (<code>PYN11</code>, <code>PYN21</code>), addresses (<code>VNAD11</code>, <code>VNAD21</code>, <code>CTSTZ1</code>), amounts (<code>AMT11</code>, <code>AMT31</code>, <code>AMT61</code>, <code>AMT71</code>), and vendor number (<code>VNVEN1</code>, revision <code>JB02</code>).</li> <li>Conditional on <code>34</code> (1099-NEC) for primary amount (<code>AMT11</code>) and <code>N34</code> for other boxes (<code>AMT31</code>).</li> </ul> </li> <li>Second Form (Indicator <code>32</code>):<ul> <li>Similar fields for the second form, using <code>PYN12</code>, <code>PYN22</code>, <code>VNAD12</code>, <code>CTSTZ2</code>, <code>AMT12</code>, <code>AMT32</code>, <code>AMT62</code>, <code>AMT72</code>, <code>VNID#2</code>, <code>VNVEN2</code>.</li> </ul> </li> <li>Third Form (Indicator <code>40</code>):<ul> <li>Similar fields for the third form, using <code>PYN13</code>, <code>PYN23</code>, <code>VNAD13</code>, <code>CTSTZ3</code>, <code>AMT13</code>, <code>AMT33</code>, <code>AMT63</code>, <code>AMT73</code>, <code>VNID#3</code>, <code>VNVEN3</code>.</li> </ul> </li> <li>Totals (LR):<ul> <li>Print <code>HEAD1-3</code>, <code>ID#</code>, totals (<code>LRAMT1</code>, <code>LRAMT6</code>, <code>LRAMT7</code>), and vendor count (<code>COUNT</code>). Notably, <code>LRAMT3</code> is printed but not accumulated for <code>40</code>, indicating a possible oversight or specific requirement.</li> </ul> </li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Threshold Check:</li> <li> <p>Only vendors with a total amount (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) greater than or equal to <code>ENTAMT</code> are printed.</p> </li> <li> <p>Three Forms per Page:</p> </li> <li>The program prints three 1099-NEC forms per page on laser paper (revision <code>MG03</code>, modified for three forms), managed by <code>COUNTP</code> and indicators <code>31</code>, <code>32</code>, <code>40</code>.</li> <li> <p>If fewer than three vendors remain at the end, a final page with one or two vendors is printed.</p> </li> <li> <p>Payee Name Handling:</p> </li> <li>If <code>VNPYN1</code> is blank, use <code>VNNAME</code> (vendor name). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code> (payee names, revision <code>JB01</code>).</li> <li> <p>If <code>VNNOVF</code> is <code>Y</code>, use address fields to continue the name on the second line (revision <code>JB02</code>).</p> </li> <li> <p>Address Formatting:</p> </li> <li> <p>Use the highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) for city/state/ZIP (<code>CTSTZ1</code>/<code>CTSTZ2</code>/<code>CTSTZ3</code>) and shift other fields accordingly to ensure proper formatting.</p> </li> <li> <p>Box Amount Assignment:</p> </li> <li> <p>Amounts are assigned to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code>, with a focus on box 7 for 1099-NEC Non-Employee Compensation (revision <code>MG04</code> supports multiple form types).</p> </li> <li> <p>1099 Type:</p> </li> <li> <p>Indicator <code>34</code> is set for <code>VN1099 = 'N'</code> (1099-NEC). The commented-out logic for <code>M</code> (1099-MISC) ensures this program is dedicated to 1099-NEC.</p> </li> <li> <p>Totals:</p> </li> <li> <p>Accumulate totals for boxes 1, 3, 6, and 7 (<code>LRAMT1</code>, <code>LRAMT3</code>, <code>LRAMT6</code>, <code>LRAMT7</code>) and vendor count (<code>COUNT</code>). Unlike <code>AP765</code>, no grand total (<code>LRAMT</code>) is computed.</p> </li> <li> <p>Vendor Number as Account Number:</p> </li> <li>Print <code>VNVEND</code> as the account number (<code>VNVEN1</code>/<code>VNVEN2</code>/<code>VNVEN3</code>, revision <code>JB02</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#comparison-with-ap765rpg36txt","title":"Comparison with AP765.rpg36.txt","text":"<ul> <li>Similarity:</li> <li>Both programs read <code>AP766</code>, validate amounts against <code>ENTAMT</code>, handle payee names and addresses, assign amounts to boxes 1, 3, 6, or 7, and print to <code>AP1099</code>.</li> <li>Both support revisions <code>JB01</code> (payee names), <code>JB02</code> (name overflow, vendor number as account), <code>MG03</code> (laser paper), and <code>MG04</code> (multiple form types).</li> <li>Differences:</li> <li>Forms per Page: <code>AP765</code> prints two forms per page (<code>COUNTP</code> up to 2, indicators <code>31</code>/<code>32</code>), while <code>AP765N</code> prints three forms per page (<code>COUNTP</code> up to 3, indicators <code>31</code>/<code>32</code>/<code>40</code>).</li> <li>1099 Type: <code>AP765</code> handles both 1099-MISC (<code>VN1099 = 'M'</code>, indicator <code>33</code>) and 1099-NEC (<code>VN1099 = 'N'</code>, indicator <code>34</code>), while <code>AP765N</code> is dedicated to 1099-NEC (<code>VN1099 = 'N'</code>, indicator <code>34</code> only).</li> <li>Vendor Number Check: <code>AP765</code> checks for <code>VNVEND = 9384</code>, while <code>AP765N</code> checks for <code>VNVEND = 32800</code>.</li> <li>Totals: <code>AP765</code> computes a grand total (<code>LRAMT</code>), while <code>AP765N</code> does not, though it prints <code>LRAMT3</code> in the totals section without accumulating it for <code>40</code>.</li> <li>Output Lines: <code>AP765N</code> has fewer active output lines for amounts (e.g., <code>AMT61</code>, <code>AMT71</code> are commented out), focusing on 1099-NEC fields.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AP766:</li> <li>Input file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains preprocessed vendor data from <code>AP766.rpg36.txt</code>, including vendor details, amounts, box numbers, and payee names.</p> </li> <li> <p>AP1099:</p> </li> <li>Output printer file (80 bytes, labeled <code>AP1099</code> in the OCL).</li> <li> <p>Configured to print 1099-NEC forms with form type <code>1099</code>, 10 CPI, 6 LPI, three forms per page.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL (<code>?9?PA1099X</code>), likely a cross-reference file, but not used directly in this program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP765N</code>. It is invoked by <code>AP765N.ocl36.txt</code> and processes data from <code>AP766.rpg36.txt</code>, with input prepared by <code>#GSORT</code> and <code>AP766</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 Printer File:</li> <li>Prints 1099-NEC forms (three per page) with:<ul> <li>Company headers (<code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>).</li> <li>Year (<code>CNYEAR</code>).</li> <li>Company Tax ID (<code>ID#</code>) and vendor Tax ID (<code>VNID#1</code>/<code>VNID#2</code>/<code>VNID#3</code>).</li> <li>Payee names (<code>PYN11</code>/<code>PYN12</code>/<code>PYN13</code>, <code>PYN21</code>/<code>PYN22</code>/<code>PYN23</code>) or vendor name (<code>VNNAME</code>).</li> <li>Addresses (<code>VNAD11</code>/<code>VNAD12</code>/<code>VNAD13</code>, <code>VNAD21</code>/<code>VNAD22</code>/<code>VNAD23</code>, <code>CTSTZ1</code>/<code>CTSTZ2</code>/<code>CTSTZ3</code>).</li> <li>Amounts for boxes 1, 3, 6, or 7 (<code>AMT11</code>/<code>AMT12</code>/<code>AMT13</code>, <code>AMT31</code>/<code>AMT32</code>/<code>AMT33</code>, <code>AMT61</code>/<code>AMT62</code>/<code>AMT63</code>, <code>AMT71</code>/<code>AMT72</code>/<code>AMT73</code>), primarily box 7 for 1099-NEC.</li> <li>Vendor number as account number (<code>VNVEN1</code>/<code>VNVEN2</code>/<code>VNVEN3</code>, revision <code>JB02</code>).</li> </ul> </li> <li>Final page includes totals (<code>LRAMT1</code>, <code>LRAMT6</code>, <code>LRAMT7</code>, <code>LRAMT3</code> for <code>31</code>/<code>32</code> only) and vendor count (<code>COUNT</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765N%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765N</code> prints 1099-NEC forms, formatting three forms per page on laser paper, using preprocessed vendor data from <code>AP766</code>.</li> <li>Process:</li> <li>Reads <code>AP766</code> and validates vendor amounts against <code>ENTAMT</code>.</li> <li>Manages three forms per page with <code>COUNTP</code> and indicators <code>31</code>/<code>32</code>/<code>40</code>.</li> <li>Assigns payee names, addresses, and amounts to appropriate fields, focusing on 1099-NEC.</li> <li>Prints forms with company and vendor details, amounts, and totals.</li> <li>Business Rules:</li> <li>Prints only vendors meeting the amount threshold.</li> <li>Supports three forms per page and 1099-NEC exclusively.</li> <li>Handles payee names, name overflow, and vendor number as account number.</li> <li>Accumulates totals for boxes 1, 3, 6, and 7, but not a grand total.</li> <li>Files Used:</li> <li>Input: <code>AP766</code> (preprocessed vendor data).</li> <li>Output: <code>AP1099</code> (printer file for 1099-NEC forms).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code>, <code>AP766</code>, and <code>AP765N.ocl36.txt</code>.</li> </ul> <p>This program is tailored for 1099-NEC forms, differing from <code>AP765</code> by supporting three forms per page and focusing exclusively on Non-Employee Compensation, ensuring IRS-compliant output for vendors.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/","title":"AP765P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#explanation-of-the-process-steps-in-the-rpg-ocl-program-ap765pocl36txt","title":"Explanation of the Process Steps in the RPG .OCL Program (AP765P.ocl36.txt)","text":"<p>This .OCL (Operation Control Language) program, likely written for an IBM System/36 or AS/400 environment, is designed to handle the processing of 1099 vendor forms for a specified year. Below is a step-by-step explanation of the process steps based on the provided code:</p> <ol> <li>Program Initialization:</li> <li>The program starts with <code>SCPROCP</code>, which likely sets up the procedure environment with parameters (up to 9 parameters, as indicated by <code>,,,,,,,?9?</code>).</li> <li><code>SWITCH 00000000</code>: Initializes all switches to off (binary 0s).</li> <li><code>LOCAL BLANK-*ALL</code>: Clears all local variables to blanks.</li> <li> <p><code>GSY2K</code>: Likely a call to a system routine to handle Year 2000 compliance (date formatting).</p> </li> <li> <p>Prompt for Year Input:</p> </li> <li>The program prompts the user with the message: \"WHAT YEAR ARE THESE 1099'S FOR? PLEASE ENTER THE 'FOUR DIGIT YEAR'...\".</li> <li> <p>The input is stored in parameter <code>?10?</code> (a four-digit year, e.g., 2012).</p> </li> <li> <p>Construct 1099 File Name:</p> </li> <li>If parameter <code>?9?</code> is 'G', the program sets <code>P13</code> (the 1099 file name) to <code>'APVN?10?'</code>, where <code>?10?</code> is the year (e.g., <code>APVN2012</code> for year 2012).</li> <li>Otherwise, if <code>?9?</code> is not 'G', it sets <code>P13</code> to <code>'?9?VN?10?'</code>, incorporating <code>?9?</code> as a prefix (e.g., if <code>?9?</code> is 'XX', the file name becomes <code>XXVN2012</code>).</li> <li> <p>Programmer Note: The file <code>APVNYYYY</code> (e.g., <code>APVN2012</code>) is created during the period-end process (<code>AP300</code>) and contains vendor data (<code>GAPVEND</code>) before monthly and yearly totals are cleared.</p> </li> <li> <p>Validate File Existence:</p> </li> <li>The program checks if the file specified in <code>?13?</code> exists using <code>DATAF1-?13?</code>.</li> <li>If the file is not found, it displays an error message (<code>'?L'142,4'? NOT FOUND'</code>) and pauses for user interaction.</li> <li> <p>If the file still cannot be found, the program cancels execution (<code>CANCEL</code>).</p> </li> <li> <p>Set Company Information:</p> </li> <li>The program sets local variables with hardcoded company data for the 1099 form:<ul> <li><code>OFFSET-1</code>: Company name (<code>AMERICAN REFINING GROUP INC</code>).</li> <li><code>OFFSET-31</code>: Address line 1 (<code>55 ALPHA DRIVE WEST</code>).</li> <li><code>OFFSET-61</code>: Address line 2 (<code>PITTSBURGH PA 15238</code>).</li> <li><code>OFFSET-91</code>: Tax ID (<code>22-2318612</code>).</li> <li><code>OFFSET-201</code>: Year (<code>?10?</code>, the input year).</li> </ul> </li> <li> <p>These values are likely used in the 1099 form output.</p> </li> <li> <p>Load and Run Main Program:</p> </li> <li><code>LOAD AP765P</code>: Loads the main program <code>AP765P</code> (this could be the current program or a related module).</li> <li><code>RUN</code>: Executes the loaded program.</li> <li> <p>If <code>SWITCH1-1</code> is set (indicating an error or specific condition), the program jumps to the <code>END</code> tag, terminating execution.</p> </li> <li> <p>Conditional Program Execution:</p> </li> <li>The program checks two flags:<ul> <li><code>?L'120,1'?</code>: Likely indicates whether to submit the job to a job queue (<code>Y</code> for yes, else run directly).</li> <li><code>?L'110,1'?</code>: Determines which program to run (<code>M</code> for <code>AP765</code>, <code>N</code> for <code>AP765N</code>).</li> </ul> </li> <li>Based on these flags, the program executes one of four scenarios:<ul> <li>If <code>?L'120,1'?</code> is <code>Y</code> and <code>?L'110,1'?</code> is <code>M</code>: Submits <code>AP765</code> to the job queue (<code>JOBQ ?CLIB?,AP765,,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is not <code>Y</code> and <code>?L'110,1'?</code> is <code>M</code>: Runs <code>AP765</code> directly (<code>AP765 ,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is <code>Y</code> and <code>?L'110,1'?</code> is <code>N</code>: Submits <code>AP765N</code> to the job queue (<code>JOBQ ?CLIB?,AP765N,,,,,,,,?9?,?10?,,,?13?</code>).</li> <li>If <code>?L'120,1'?</code> is not <code>Y</code> and <code>?L'110,1'?</code> is <code>N</code>: Runs <code>AP765N</code> directly (<code>AP765N ,,,,,,,,?9?,?10?,,,?13?</code>).</li> </ul> </li> <li> <p>Parameters <code>?9?</code>, <code>?10?</code>, and <code>?13?</code> are passed to the called programs.</p> </li> <li> <p>Program Termination:</p> </li> <li><code>TAG END</code>: Marks the end of the program.</li> <li><code>LOCAL BLANK-*ALL</code>: Clears all local variables again.</li> <li><code>SWITCH 00000000</code>: Resets all switches to off.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program references the following external programs: 1. AP765: Likely the main program for processing 1099 forms when <code>?L'110,1'?</code> is <code>M</code>. 2. AP765N: An alternate program for processing 1099 forms when <code>?L'110,1'?</code> is <code>N</code> (possibly for a different format or condition). 3. AP300: Mentioned in the programmer note as the period-end process that creates the <code>APVNYYYY</code> file (not called directly in this program).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following table/file: 1. GAPVEND: The vendor file, stored as <code>APVNYYYY</code> (e.g., <code>APVN2012</code>), which contains vendor data before monthly and yearly totals are cleared. This file is accessed via the file name constructed in <code>?13?</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20OCL/#summary","title":"Summary","text":"<p>The program facilitates the generation of 1099 forms by: - Prompting for the year and constructing the appropriate file name (<code>APVNYYYY</code>). - Validating the existence of the vendor file. - Setting company information for the forms. - Conditionally running or queuing one of two programs (<code>AP765</code> or <code>AP765N</code>) based on control flags. - The process relies on the <code>GAPVEND</code> file and interacts with external programs <code>AP765</code> and <code>AP765N</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/","title":"AP765P RPG36","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap765prpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP765P.rpg36.txt)","text":"<p>The provided RPG program (<code>AP765P.rpg36.txt</code>) is an RPG III program for the IBM System/36 or AS/400, designed to handle user input for generating 1099 vendor forms, likely called by the OCL program <code>AP765P.ocl36.txt</code>. It defines a screen format (<code>AP765PS1</code>) for capturing and validating input data required for 1099 form processing. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0002</code>: Defines the program name (<code>AP765P</code>) and parameter <code>P014</code>, which may be a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specification (F):<ul> <li>Line <code>0008</code>: Defines a workstation file <code>SCREEN</code> (512 bytes) for interactive input/output, used to display and capture data via a display device (e.g., a terminal screen).</li> </ul> </li> <li>Extension Specification (E):<ul> <li>Line <code>0009</code>: Defines an array <code>MSG</code> with 5 elements, each 35 characters long, to store error messages (loaded from the <code>** MESSAGES</code> section at the end of the program).</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0010-0027</code>: Define the screen format <code>AP765PS1</code> (used for both input and output) and a data structure (<code>UDS</code>) to hold the following fields:</li> <li><code>HEAD1</code> (30 chars, positions 1-30): First heading (e.g., company name).</li> <li><code>HEAD2</code> (30 chars, positions 31-60): Second heading (e.g., address line 1).</li> <li><code>HEAD3</code> (30 chars, positions 61-90): Third heading (e.g., address line 2).</li> <li><code>ID#</code> (10 chars, positions 91-100): Tax ID number.</li> <li><code>ENTAMT</code> (8,2 numeric, positions 101-108): Entered amount (likely for 1099 payments).</li> <li><code>CURLST</code> (1 char, position 109): Current or Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>TYPE</code> (1 char, position 110): Type of 1099 form (<code>I</code> for Interest, <code>D</code> for Dividend, <code>M</code> for Miscellaneous, <code>N</code> for Non-Employee Compensation).</li> </ul> </li> <li> <p>Initialization:</p> </li> <li>Lines <code>0029-0031</code>: Reset indicators <code>81</code>, <code>90</code>, <code>91</code>, <code>92</code>, <code>93</code>, <code>94</code>, <code>95</code>, and <code>96</code> to off using <code>SETOF</code>.</li> <li>Line <code>0032</code>: Initialize the error message field <code>MSGE</code> to blanks.</li> <li> <p>Line <code>0038</code>: Set indicator <code>60</code> on (likely used to control screen display or program flow).</p> </li> <li> <p>Handle Special Key (KG):</p> </li> <li> <p>Lines <code>0034-0036</code>: If the <code>KG</code> key (likely a function key like F3 for exit) is pressed:</p> <ul> <li>Reset indicator <code>81</code> (if set).</li> <li>Set indicator <code>U1</code> and <code>LR</code> (Last Record, signaling program termination).</li> <li>Jump to the <code>END</code> tag to exit the program.</li> </ul> </li> <li> <p>Check for Format 09 (NS 09):</p> </li> <li> <p>Lines <code>0040-0041</code>: If the program is processing format <code>09</code> (likely a control format or condition):</p> <ul> <li>Set indicators <code>81</code> and <code>94</code> on.</li> <li>Jump to the <code>END</code> tag to exit the program.</li> </ul> </li> <li> <p>Main Processing (Format 01):</p> </li> <li> <p>Line <code>0043</code>: If processing format <code>01</code> (the main screen input format <code>AP765PS1</code>), execute the subroutine <code>SUBSC1</code> to validate input fields.</p> </li> <li> <p>Validation Subroutine (SUBSC1):</p> </li> <li>Lines <code>0047-0077</code>: The <code>SUBSC1</code> subroutine validates the input fields from the screen:<ul> <li>HEAD1 Validation (Lines <code>0049-0052</code>):</li> <li>Check if <code>HEAD1</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>91</code> on, move message <code>MSG,1</code> (\"FIRST HEADING CANNOT BE BLANK\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>HEAD2 Validation (Lines <code>0054-0057</code>):</li> <li>Check if <code>HEAD2</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>92</code> on, move message <code>MSG,2</code> (\"SECOND HEADING CANNOT BE BLANK\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>ID# Validation (Lines <code>0059-0062</code>):</li> <li>Check if <code>ID#</code> is blank.</li> <li>If blank, set indicators <code>81</code> and <code>93</code> on, move message <code>MSG,3</code> (\"ID# CANNOT BE BLANK - TRY AGAIN!\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>TYPE Validation (Lines <code>0064-0069</code>):</li> <li>Check if <code>TYPE</code> is one of the valid values: <code>D</code> (Dividend), <code>I</code> (Interest), <code>M</code> (Miscellaneous), or <code>N</code> (Non-Employee Compensation).</li> <li>If not valid, set indicators <code>81</code> and <code>95</code> on, move message <code>MSG,4</code> (\"ENTER I-INT, D-DIV, M-MISC, N-NEC\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> <li>CURLST Validation (Lines <code>0071-0075</code>):</li> <li>Check if <code>CURLST</code> is either <code>C</code> (Current) or <code>L</code> (Last).</li> <li>If not valid, set indicators <code>81</code> and <code>96</code> on, move message <code>MSG,5</code> (\"ENTER 'C'-CURR OR 'L'-LAST\") to <code>MSGE</code>, and jump to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>If any validation fails, the program sets the appropriate error indicators and displays an error message (<code>MSGE</code>) on the screen, then exits the subroutine (<code>ENDSC1</code>).</p> </li> <li> <p>Program Termination:</p> </li> <li>Line <code>0045</code>: The <code>END</code> tag marks the program\u2019s termination point.</li> <li> <p>If validations pass, the program likely proceeds to write the validated data to the screen or another process (not shown in this code snippet).</p> </li> <li> <p>Output Specifications:</p> </li> <li>Lines <code>0079-0088</code>: Define the output format for the <code>SCREEN</code> file (format <code>AP765PS1</code>):<ul> <li>Output fields <code>HEAD1</code>, <code>HEAD2</code>, <code>HEAD3</code>, <code>ID#</code>, <code>ENTAMT</code>, <code>TYPE</code>, and <code>CURLST</code> to their respective positions (1-110).</li> <li>Output the error message <code>MSGE</code> at position 145.</li> <li>The output is conditional on indicator <code>81</code> (likely used to display errors or re-display the screen for corrections).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Mandatory Fields:</li> <li><code>HEAD1</code>, <code>HEAD2</code>, and <code>ID#</code> must not be blank. If any are blank, the program displays an error message and prevents further processing.</li> <li>Valid 1099 Type:</li> <li>The <code>TYPE</code> field must be one of:<ul> <li><code>I</code> (Interest, for 1099-INT).</li> <li><code>D</code> (Dividend, for 1099-DIV).</li> <li><code>M</code> (Miscellaneous, for 1099-MISC).</li> <li><code>N</code> (Non-Employee Compensation, for 1099-NEC).</li> </ul> </li> <li>Invalid values trigger an error message.</li> <li>Current or Last Indicator:</li> <li>The <code>CURLST</code> field must be either <code>C</code> (Current) or <code>L</code> (Last). Invalid values trigger an error message.</li> <li>Error Handling:</li> <li>If any validation fails, the program sets indicator <code>81</code> and a specific indicator (<code>91</code>, <code>92</code>, <code>93</code>, <code>95</code>, or <code>96</code>) to highlight the error field, displays an error message, and redisplays the screen for correction.</li> <li>User Exit:</li> <li>Pressing the <code>KG</code> key (e.g., F3) allows the user to exit the program immediately, setting <code>U1</code> and <code>LR</code> indicators.</li> <li>Screen Interaction:</li> <li>The program uses a workstation file (<code>SCREEN</code>) to display input fields and error messages interactively, allowing the user to correct invalid inputs.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#tables-used","title":"Tables Used","text":"<ol> <li>MSG Array:</li> <li>Defined in the <code>E</code> specification (Line <code>0009</code>).</li> <li>A table of 5 elements, each 35 characters long, loaded from the <code>** MESSAGES</code> section at the end of the program:<ul> <li><code>MSG,1</code>: \"FIRST HEADING CANNOT BE BLANK\"</li> <li><code>MSG,2</code>: \"SECOND HEADING CANNOT BE BLANK\"</li> <li><code>MSG,3</code>: \"ID# CANNOT BE BLANK - TRY AGAIN!\"</li> <li><code>MSG,4</code>: \"ENTER I-INT, D-DIV, M-MISC, N-NEC\"</li> <li><code>MSG,5</code>: \"ENTER 'C'-CURR OR 'L'-LAST\"</li> </ul> </li> <li> <p>Used to display error messages when validation fails.</p> </li> <li> <p>SCREEN File:</p> </li> <li>Defined in the <code>F</code> specification (Line <code>0008</code>).</li> <li>A workstation file used for interactive input/output, with format <code>AP765PS1</code> for capturing and displaying data.</li> </ol> <p>Note: The program does not explicitly reference any database files (e.g., <code>GAPVEND</code> from the OCL program). It focuses on screen input validation, suggesting that data is either passed from the OCL program or handled in subsequent programs (e.g., <code>AP765</code> or <code>AP765N</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called within this RPG program. However, based on the context from the OCL program (<code>AP765P.ocl36.txt</code>): - The RPG program <code>AP765P</code> is likely one of the programs (<code>AP765</code> or <code>AP765N</code>) called by the OCL procedure. - The OCL program references <code>AP765</code> and <code>AP765N</code>, which may perform further processing of the validated data (e.g., generating 1099 forms or updating files).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>Screen Output (AP765PS1):</li> <li>The program outputs the following fields to the workstation screen:<ul> <li><code>HEAD1</code> (positions 1-30): First heading.</li> <li><code>HEAD2</code> (positions 31-60): Second heading.</li> <li><code>HEAD3</code> (positions 61-90): Third heading.</li> <li><code>ID#</code> (positions 91-100): Tax ID number.</li> <li><code>ENTAMT</code> (positions 101-108): Entered amount (numeric, 8 digits with 2 decimals).</li> <li><code>TYPE</code> (position 109): 1099 form type (<code>I</code>, <code>D</code>, <code>M</code>, or <code>N</code>).</li> <li><code>CURLST</code> (position 110): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>MSGE</code> (position 145): Error message (if any).</li> </ul> </li> <li> <p>The output is conditional on indicator <code>81</code>, which is set when validation fails to redisplay the screen with an error message.</p> </li> <li> <p>No File Outputs:</p> </li> <li>The program does not directly write to any database files. The validated data is likely passed to subsequent programs (<code>AP765</code> or <code>AP765N</code>) for further processing, such as updating the <code>GAPVEND</code> file or generating 1099 forms.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP765P%20RPG36/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP765P</code> provides an interactive screen (<code>AP765PS1</code>) for users to input data for 1099 vendor forms, including company headings, tax ID, amount, form type, and current/last indicator. It validates these inputs and displays error messages if validations fail.</li> <li>Process: The program initializes, displays a screen for input, validates the fields using the <code>SUBSC1</code> subroutine, and redisplays the screen with error messages if validations fail. Users can exit using the <code>KG</code> key.</li> <li>Business Rules: Enforce non-blank headings and ID#, valid 1099 types (<code>I</code>, <code>D</code>, <code>M</code>, <code>N</code>), and valid <code>CURLST</code> values (<code>C</code>, <code>L</code>).</li> <li>Tables Used: <code>MSG</code> array (for error messages) and <code>SCREEN</code> workstation file (for input/output).</li> <li>External Programs: None called directly, but likely interacts with <code>AP765</code> or <code>AP765N</code> as part of the OCL procedure.</li> <li>Outputs: Screen output to display input fields and error messages; no direct file outputs.</li> </ul> <p>This program serves as the front-end validation step for 1099 form processing, ensuring accurate data entry before passing control to other programs for further processing.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/","title":"AP766 RPG","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#explanation-of-the-process-steps-and-business-rules-in-the-rpg-program-ap766rpg36txt","title":"Explanation of the Process Steps and Business Rules in the RPG Program (AP766.rpg36.txt)","text":"<p>The RPG III program <code>AP766.rpg36.txt</code> is designed to preprocess Accounts Payable (A/P) 1099 forms on an IBM System/36 or AS/400 system. It is called by the OCL program <code>AP765.ocl36.txt</code> and processes vendor data to consolidate records (one per vendor, regardless of multiple companies) and prepare them for printing 1099 forms. Below is a detailed explanation of the process steps, business rules, tables/files used, external programs called, and outputs.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#process-steps","title":"Process Steps","text":"<ol> <li>Program Setup and File Definitions:</li> <li>Header Specification (H):<ul> <li>Line <code>0001</code>: Defines the program name (<code>AP766</code>) and parameter <code>P064</code>, likely a control parameter passed from the OCL program.</li> </ul> </li> <li>File Specifications (F):<ul> <li>Line <code>0006</code>: <code>APVEND</code> (Input, Primary, 579 bytes, Record Address Type <code>R</code>): The vendor file (e.g., <code>APVN2012</code>, labeled <code>?13?</code> in the OCL), read sequentially.</li> <li>Line <code>0007</code>: <code>AP765S</code> (Input, Record Address, 30 bytes, Indexed by positions 3-3): The sorted file (e.g., <code>?9?AP765S</code>) from the <code>#GSORT</code> step in the OCL, used to control the order of processing.</li> <li>Line <code>0008</code>: <code>AP766</code> (Output, 300 bytes): The output work file (e.g., <code>?9?AP766</code>) that stores processed data for printing.</li> </ul> </li> <li>Extension Specification (E):<ul> <li>Line <code>0009</code>: Links <code>AP765S</code> (sorted file) to <code>APVEND</code> (vendor file) for record address processing, ensuring records are read in the sorted order (by 1099 type, vendor, and company).</li> </ul> </li> <li> <p>Input Specifications (I):</p> <ul> <li>Lines <code>0011-0027</code>: Define fields in the <code>APVEND</code> file (format <code>NS 01</code>):</li> <li><code>VNDEL</code> (1 char, position 1): Delete code.</li> <li><code>VNCO</code> (29 chars, positions 2-30): Company number.</li> <li><code>VNVENDL1</code> (5 chars, positions 4-8): Vendor number.</li> <li><code>VNNAME</code> (30 chars, positions 9-38): Vendor name.</li> <li><code>VNADD1</code> (30 chars, positions 39-68): Address line 1.</li> <li><code>VNADD2</code> (30 chars, positions 69-98): Address line 2.</li> <li><code>VNADD3</code> (30 chars, positions 99-128): Address line 3.</li> <li><code>VNADD4</code> (30 chars, positions 129-158): Address line 4.</li> <li><code>VNZIP5</code> (5 numeric, positions 159-163): ZIP code.</li> <li><code>VNNOVF</code> (1 char, position 216, added by revision <code>JB02</code>): Name overflow indicator.</li> <li><code>VNYTDP</code> (6,2 numeric, positions 242-247): Current year year-to-date paid amount.</li> <li><code>VNLYDP</code> (6,2 numeric, positions 248-253): Last year year-to-date paid amount.</li> <li><code>VN1099L2</code> (1 char, position 264): A/P 1099 code (e.g., <code>M</code>, <code>N</code>, <code>I</code>, <code>D</code>).</li> <li><code>VNID#</code> (11 chars, positions 265-275): 1099 ID number (e.g., Tax ID).</li> <li><code>VNBOX1</code> (2 numeric, positions 276-277): First 1099 box number.</li> <li><code>VNBOX2</code> (2 numeric, positions 278-279): Second 1099 box number.</li> <li><code>VNB2AM</code> (6,2 numeric, positions 280-285): Second 1099 box amount.</li> <li><code>VNPYN1</code> (40 chars, positions 300-339, added by revision <code>JB01</code>): Payee name 1.</li> <li><code>VNPYN2</code> (40 chars, positions 340-379, added by revision <code>JB01</code>): Payee name 2.</li> <li>Lines <code>0028-0030</code>: Define fields in the User Data Structure (<code>UDS</code>):</li> <li><code>KYCRLS</code> (1 char, position 141): Current/Last indicator (<code>C</code> or <code>L</code>).</li> <li><code>KYAMT</code> (8,2 numeric, positions 142-149): Amount threshold for processing.</li> </ul> </li> <li> <p>Initialization at Level 1 (L1):</p> </li> <li> <p>Lines <code>0031-0034</code>: At the start of each level 1 break (<code>L1</code>, triggered by a change in the key fields from <code>AP765S</code>, i.e., vendor number):</p> <ul> <li><code>L1AMT1</code> (9,2 numeric): Initialize to zero (total amount for box 1).</li> <li><code>L1AMT2</code> (9,2 numeric): Initialize to zero (total amount for box 2).</li> <li><code>BOX1</code> (2 numeric): Initialize to zero (first 1099 box number).</li> <li><code>BOX2</code> (2 numeric): Initialize to zero (second 1099 box number).</li> </ul> </li> <li> <p>Process Year-to-Date Amount:</p> </li> <li>Lines <code>0039-0043</code>: Check <code>KYCRLS</code> to determine whether to use current or last year\u2019s YTD amount:<ul> <li>If <code>KYCRLS</code> is <code>C</code> (current year), add <code>VNYTDP</code> (current year YTD paid) to <code>L1AMT1</code>.</li> <li>Otherwise (e.g., <code>L</code> for last year), add <code>VNYTDP</code> to <code>L1AMT1</code> (note: the <code>ELSE</code> clause uses <code>VNYTDP</code>, which seems incorrect; it likely should use <code>VNLYDP</code> for last year, indicating a potential bug or oversight).</li> </ul> </li> <li> <p>Line <code>0045</code>: Add <code>VNB2AM</code> (second 1099 box amount) to <code>L1AMT2</code>.</p> </li> <li> <p>Assign Box Numbers:</p> </li> <li> <p>Lines <code>0047-0053</code>:</p> <ul> <li>If <code>BOX1</code> is zero, set it to <code>VNBOX1</code> (first 1099 box number from the vendor file).</li> <li>If <code>BOX2</code> is zero, set it to <code>VNBOX2</code> (second 1099 box number from the vendor file).</li> </ul> </li> <li> <p>Amount Validation and Adjustment:</p> </li> <li>Line <code>0055</code>: Compare <code>L1AMT1</code> (total amount for box 1) with <code>KYAMT</code> (threshold amount from <code>UDS</code>). Set indicator <code>50</code> if <code>L1AMT1</code> is greater than or equal to <code>KYAMT</code>.</li> <li> <p>Lines <code>0056-0063</code> (Level 1 and Indicator <code>50</code>):</p> <ul> <li>If <code>BOX1</code> is zero, set it to <code>7</code> (likely a default box number for 1099 forms, e.g., box 7 for Non-Employee Compensation on 1099-NEC).</li> <li>If <code>L1AMT2</code> (second box amount) is greater than zero and <code>BOX2</code> is greater than zero, subtract <code>L1AMT2</code> from <code>L1AMT1</code> to split the total amount between two boxes.</li> </ul> </li> <li> <p>Write Output Record:</p> </li> <li>Line <code>0064</code>: If indicator <code>50</code> is on (i.e., <code>L1AMT1</code> meets or exceeds the threshold <code>KYAMT</code>), write a record to the <code>AP766</code> file using the <code>L1ADD</code> output format.</li> <li>Output Format (L1ADD) (Lines <code>0066-0079</code>):<ul> <li>Position 1: <code>'A'</code> (record identification).</li> <li>Position 2: <code>VN1099</code> (1099 code, 1 char).</li> <li>Positions 3-7: <code>VNVEND</code> (vendor number, 5 chars).</li> <li>Positions 8-37: <code>VNNAME</code> (vendor name, 30 chars).</li> <li>Positions 38-67: <code>VNADD1</code> (address line 1, 30 chars).</li> <li>Positions 68-97: <code>VNADD2</code> (address line 2, 30 chars).</li> <li>Positions 98-127: <code>VNADD3</code> (address line 3, 30 chars).</li> <li>Positions 128-157: <code>VNADD4</code> (address line 4, 30 chars).</li> <li>Positions 158-166: <code>L1AMT1</code> (box 1 amount, 9,2 numeric).</li> <li>Positions 167-175: <code>L1AMT2</code> (box 2 amount, 9,2 numeric).</li> <li>Positions 176-177: <code>BOX1</code> (box 1 number, 2 numeric).</li> <li>Positions 178-179: <code>BOX2</code> (box 2 number, 2 numeric).</li> <li>Positions 180-190: <code>VNID#</code> (1099 ID number, 11 chars).</li> <li>Positions 191-230: <code>VNPYN1</code> (payee name 1, 40 chars, added by <code>JB01</code>).</li> <li>Positions 231-270: <code>VNPYN2</code> (payee name 2, 40 chars, added by <code>JB01</code>).</li> <li>Position 271: <code>VNNOVF</code> (name overflow indicator, 1 char, added by <code>JB02</code>).</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#business-rules","title":"Business Rules","text":"<ol> <li>Consolidate Vendor Records:</li> <li> <p>The program processes one record per vendor, regardless of whether the vendor appears in multiple companies (indicated by <code>VNCO</code>). This is achieved using the <code>L1</code> (Level 1) break on the vendor number from the sorted file <code>AP765S</code>.</p> </li> <li> <p>Year-to-Date Amount Selection:</p> </li> <li>If <code>KYCRLS</code> is <code>C</code>, use the current year\u2019s YTD paid amount (<code>VNYTDP</code>) for <code>L1AMT1</code>.</li> <li>If <code>KYCRLS</code> is not <code>C</code> (e.g., <code>L</code>), the program incorrectly uses <code>VNYTDP</code> instead of <code>VNLYDP</code> (last year\u2019s YTD paid amount), which may be a coding error.</li> <li> <p>The second 1099 box amount (<code>VNB2AM</code>) is added to <code>L1AMT2</code>.</p> </li> <li> <p>Box Number Assignment:</p> </li> <li>If <code>BOX1</code> or <code>BOX2</code> are zero, they are set to <code>VNBOX1</code> or <code>VNBOX2</code>, respectively, from the vendor file.</li> <li> <p>If <code>L1AMT1</code> meets the threshold (<code>KYAMT</code>) and <code>BOX1</code> is zero, <code>BOX1</code> is set to <code>7</code> (likely for 1099-NEC box 7).</p> </li> <li> <p>Amount Splitting:</p> </li> <li> <p>If a second box amount (<code>L1AMT2</code>) and box number (<code>BOX2</code>) exist, subtract <code>L1AMT2</code> from <code>L1AMT1</code> to split the total amount between two 1099 boxes.</p> </li> <li> <p>Threshold Check:</p> </li> <li> <p>Only vendors with <code>L1AMT1</code> greater than or equal to <code>KYAMT</code> (threshold amount) are written to the output file <code>AP766</code>.</p> </li> <li> <p>Output Record Structure:</p> </li> <li>The output file <code>AP766</code> includes vendor details, payment amounts, box numbers, and payee names, formatted for printing 1099 forms.</li> <li>Revisions (<code>JB01</code>, <code>JB02</code>) added support for payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) and a name overflow indicator (<code>VNNOVF</code>) for extended name handling.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>APVEND:</li> <li>Input file (579 bytes, primary, labeled <code>?13?</code> in the OCL, e.g., <code>APVN2012</code>).</li> <li>Contains vendor data from the period-end process (<code>AP300</code>), including vendor number, name, address, 1099 amounts, box numbers, and payee names.</li> <li> <p>Fields include <code>VNDEL</code>, <code>VNCO</code>, <code>VNVENDL1</code>, <code>VNNAME</code>, <code>VNADD1-4</code>, <code>VNZIP5</code>, <code>VNNOVF</code>, <code>VNYTDP</code>, <code>VNLYDP</code>, <code>VN1099L2</code>, <code>VNID#</code>, <code>VNBOX1</code>, <code>VNBOX2</code>, <code>VNB2AM</code>, <code>VNPYN1</code>, <code>VNPYN2</code>.</p> </li> <li> <p>AP765S:</p> </li> <li>Input file (30 bytes, record address, labeled <code>?9?AP765S</code> in the OCL, e.g., <code>XXAP765S</code>).</li> <li>Sorted file from <code>#GSORT</code>, used to control the order of processing (by 1099 type, vendor, and company).</li> <li> <p>Linked to <code>APVEND</code> via the <code>E</code> specification for record address processing.</p> </li> <li> <p>AP766:</p> </li> <li>Output file (300 bytes, labeled <code>?9?AP766</code> in the OCL, e.g., <code>XXAP766</code>).</li> <li> <p>Contains processed vendor records with consolidated amounts and box numbers, ready for printing 1099 forms.</p> </li> <li> <p>PA1099X (Implied):</p> </li> <li>Referenced in the OCL program (<code>?9?PA1099X</code>), likely a cross-reference or configuration file, but not directly used in this RPG program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None are explicitly called within <code>AP766</code>. The program is invoked by the OCL program <code>AP765.ocl36.txt</code> and works in conjunction with:</li> <li><code>#GSORT</code> (from the OCL, produces <code>AP765S</code>).</li> <li><code>AP765</code> (from the OCL, prints 1099 forms using <code>AP766</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#outputs","title":"Outputs","text":"<ol> <li>AP766 File:</li> <li>A work file (e.g., <code>?9?AP766</code>) containing one record per vendor with the following fields:<ul> <li>Record identifier (<code>'A'</code>, position 1).</li> <li>1099 code (<code>VN1099</code>, position 2).</li> <li>Vendor number (<code>VNVEND</code>, positions 3-7).</li> <li>Vendor name (<code>VNNAME</code>, positions 8-37).</li> <li>Address lines (<code>VNADD1-4</code>, positions 38-157).</li> <li>Box 1 amount (<code>L1AMT1</code>, positions 158-166).</li> <li>Box 2 amount (<code>L1AMT2</code>, positions 167-175).</li> <li>Box 1 number (<code>BOX1</code>, positions 176-177).</li> <li>Box 2 number (<code>BOX2</code>, positions 178-179).</li> <li>1099 ID number (<code>VNID#</code>, positions 180-190).</li> <li>Payee name 1 (<code>VNPYN1</code>, positions 191-230).</li> <li>Payee name 2 (<code>VNPYN2</code>, positions 231-270).</li> <li>Name overflow indicator (<code>VNNOVF</code>, position 271).</li> </ul> </li> <li>Used by the subsequent <code>AP765</code> program to print 1099 forms.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/AP766%20RPG/#summary","title":"Summary","text":"<ul> <li>Purpose: The RPG program <code>AP766</code> preprocesses vendor data for 1099 forms, consolidating records to one per vendor, calculating payment amounts for specific 1099 boxes, and writing the results to a work file for printing.</li> <li>Process:</li> <li>Reads sorted vendor data (<code>AP765S</code> and <code>APVEND</code>) in order (by 1099 type, vendor, company).</li> <li>Initializes amounts and box numbers at each vendor break (<code>L1</code>).</li> <li>Selects current or last year\u2019s YTD amount based on <code>KYCRLS</code> (with a potential bug using <code>VNYTDP</code> for both).</li> <li>Assigns box numbers and splits amounts if a second box is used.</li> <li>Writes records to <code>AP766</code> if the total amount meets the threshold (<code>KYAMT</code>).</li> <li>Business Rules:</li> <li>One record per vendor, regardless of multiple companies.</li> <li>Splits amounts between two 1099 boxes if applicable.</li> <li>Applies a threshold (<code>KYAMT</code>) to filter vendors.</li> <li>Supports extended payee names and name overflow.</li> <li>Files Used:</li> <li>Input: <code>APVEND</code> (vendor data), <code>AP765S</code> (sorted control file).</li> <li>Output: <code>AP766</code> (processed work file).</li> <li>External Programs: None called directly; part of a workflow with <code>#GSORT</code> and <code>AP765</code>.</li> <li>Outputs: The <code>AP766</code> file, formatted for printing 1099 forms by the <code>AP765</code> program.</li> </ul> <p>This program is a critical step in preparing consolidated vendor data for 1099 form generation, ensuring accurate amounts and box assignments.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/","title":"Summary AP765P OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#list-of-use-cases-implemented-by-the-ap765-call-stack","title":"List of Use Cases Implemented by the AP765 Call Stack","text":"<p>The call stack, consisting of <code>AP765P.ocl36.txt</code>, <code>AP765.ocl36.txt</code> or <code>AP765N.ocl36.txt</code>, <code>AP766.rpg36.txt</code>, <code>AP765.rpg36.txt</code> (for 1099-MISC) or <code>AP765N.rpg36.txt</code> (for 1099-NEC), implements the following primary use case:</p> <ol> <li>Generate and Print Vendor 1099 Forms:</li> <li>This use case involves processing vendor payment data from a specified year, sorting and consolidating the data, and printing IRS-compliant 1099 forms (either 1099-MISC or 1099-NEC) for vendors whose total payments meet or exceed a threshold amount. The forms include vendor details, payment amounts for specific boxes, and company information, with two forms per page for 1099-MISC (via <code>AP765</code>) or three forms per page for 1099-NEC (via <code>AP765N</code>).</li> </ol> Program Basic Purpose AP765P.ocl36.txt Controls 1099 processing path (MISC or NEC) AP765.ocl36.txt Orchestrates 1099-MISC form generation AP765N.ocl36.txt Orchestrates 1099-NEC form generation AP766.rpg36.txt Consolidates vendor data for 1099 forms AP765.rpg36.txt Prints 1099-MISC forms (two per page) AP765N.rpg36.txt Prints 1099-NEC forms (three per page)"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#function-requirement-document-generate-and-print-vendor-1099-forms","title":"Function Requirement Document: Generate and Print Vendor 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#function-requirement-document-generate-and-print-vendor-1099-forms_1","title":"Function Requirement Document: Generate and Print Vendor 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#purpose","title":"Purpose","text":"<p>Generate IRS-compliant 1099 forms (1099-MISC or 1099-NEC) for vendors based on payment data for a specified year, ensuring proper sorting, consolidation, and formatting for printing.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Vendor File (<code>APVNYYYY</code>, e.g., <code>APVN2012</code>): Snapshot of vendor payment data from period-end process (<code>AP300</code>), containing:</li> <li>Vendor number, name, address (lines 1-4), Tax ID, 1099 type (<code>M</code> for MISC, <code>N</code> for NEC), payment amounts, box numbers, payee names (1 and 2), name overflow indicator, state ID, state amount.</li> <li>Year (<code>?10?</code>): Four-digit year for the 1099 forms (e.g., 2012).</li> <li>1099 Type Flag (<code>?L'110,1'?</code>): <code>M</code> for 1099-MISC or <code>N</code> for 1099-NEC.</li> <li>Cross-Reference File (<code>PA1099X</code>): Configuration data for processing.</li> <li>Threshold Amount (<code>ENTAMT</code>): Minimum payment amount for including a vendor in the output.</li> <li>Company Information: Company name, address (lines 1-2), Tax ID, stored in User Data Structure (UDS).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed 1099 Forms (<code>AP1099</code>):</li> <li>1099-MISC forms (two per page) or 1099-NEC forms (three per page) on laser paper, formatted with:<ul> <li>Company name, address, Tax ID, and year.</li> <li>Vendor/payee name, address, Tax ID, vendor number (as account number).</li> <li>Payment amounts in boxes 1, 3, 6, or 7.</li> <li>Totals for vendor count and box amounts (1, 3, 6, 7).</li> </ul> </li> <li>Temporary Files:</li> <li>Sorted file (<code>?9?AP765S</code>): Intermediate sorted vendor data.</li> <li>Processed file (<code>?9?AP766</code>): Consolidated vendor data for printing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Sort Vendor Data:</li> <li>Sort input file (<code>APVNYYYY</code>) by 1099 type, vendor number, and company code using <code>#GSORT</code>.</li> <li>Filter records based on 1099 type (<code>M</code> or <code>N</code>) and include only valid types (<code>N</code>, <code>E</code>, <code>C</code>, <code>D</code>).</li> <li> <p>Output to temporary file <code>?9?AP765S</code>.</p> </li> <li> <p>Process Vendor Data:</p> </li> <li>Use <code>AP766</code> to read sorted file (<code>?9?AP765S</code>) and vendor file (<code>APVNYYYY</code>).</li> <li>Consolidate records into one per vendor, using <code>PA1099X</code> for configuration.</li> <li> <p>Output processed data to <code>?9?AP766</code>.</p> </li> <li> <p>Validate and Prepare for Printing:</p> </li> <li>Read <code>?9?AP766</code> using <code>AP765</code> (for 1099-MISC) or <code>AP765N</code> (for 1099-NEC).</li> <li>Calculate total payment (<code>TOTAMT</code> = <code>L1AMT1</code> + <code>L1AMT2</code>) and include vendors where <code>TOTAMT</code> &gt;= <code>ENTAMT</code>.</li> <li> <p>Assign payment amounts to boxes (1, 3, 6, or 7) based on <code>BOX1</code> and <code>BOX2</code>.</p> </li> <li> <p>Format Payee and Address:</p> </li> <li>If payee name 1 (<code>VNPYN1</code>) is blank, use vendor name (<code>VNNAME</code>). Otherwise, use <code>VNPYN1</code> and <code>VNPYN2</code>.</li> <li>If name overflow (<code>VNNOVF = 'Y'</code>), use address fields to continue name on the second line.</li> <li> <p>Assign highest non-blank address field (<code>VNADD4</code> to <code>VNADD1</code>) to city/state/ZIP, shifting others accordingly.</p> </li> <li> <p>Print Forms:</p> </li> <li>For 1099-MISC (<code>AP765</code>): Print two forms per page with company headers, year, Tax IDs, payee names, addresses, amounts, and vendor number.</li> <li>For 1099-NEC (<code>AP765N</code>): Print three forms per page with similar details.</li> <li> <p>Print totals (vendor count, box amounts) on the final page.</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete temporary files (<code>?9?AP765S</code>, <code>?9?AP766</code>) after processing.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Threshold: Include vendors only if <code>TOTAMT</code> &gt;= <code>ENTAMT</code>.</li> <li>Form Type:</li> <li>If <code>?L'110,1'? = 'M'</code>, generate 1099-MISC forms (two per page).</li> <li>If <code>?L'110,1'? = 'N'</code>, generate 1099-NEC forms (three per page).</li> <li>Payee Names: Use <code>VNPYN1</code> and <code>VNPYN2</code> if provided; otherwise, use <code>VNNAME</code>. Handle overflow with address fields if <code>VNNOVF = 'Y'</code>.</li> <li>Address Formatting: Use highest non-blank address line for city/state/ZIP, shift others for proper formatting.</li> <li>Box Assignments: Assign <code>L1AMT1</code> and <code>L1AMT2</code> to boxes 1, 3, 6, or 7 based on <code>BOX1</code> and <code>BOX2</code>.</li> <li>Vendor Number: Print as account number on forms.</li> <li>Totals: Accumulate vendor count and box amounts (1, 3, 6, 7). For 1099-MISC, compute grand total (<code>LRAMT</code>).</li> <li>Special Vendor Flags:</li> <li>For 1099-MISC: Flag vendor <code>9384</code> with <code>YES = 'YES'</code>.</li> <li>For 1099-NEC: Flag vendor <code>32800</code> with <code>YES = 'YES'</code>.</li> <li>Printer Settings: Use form type <code>1099</code>, 10 CPI, 6 LPI on laser paper.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Total Payment: <code>TOTAMT = L1AMT1 + L1AMT2</code> (9,2 numeric).</li> <li>Box Amounts: Assign <code>L1AMT1</code> and <code>L1AMT2</code> to boxes (1, 3, 6, or 7) based on <code>BOX1</code> and <code>BOX2</code> for each form.</li> <li>Totals:</li> <li>Increment <code>COUNT</code> for each vendor printed.</li> <li>Accumulate <code>AMT1x</code> to <code>LRAMT1</code>, <code>AMT3x</code> to <code>LRAMT3</code>, <code>AMT6x</code> to <code>LRAMT6</code>, <code>AMT7x</code> to <code>LRAMT7</code> (10,2 numeric).</li> <li>For 1099-MISC: Compute <code>LRAMT = LRAMT1 + LRAMT3 + LRAMT6 + LRAMT7</code> (11,2 numeric).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#constraints","title":"Constraints","text":"<ul> <li>Input file (<code>APVNYYYY</code>) must exist and contain valid vendor data.</li> <li>Temporary files are deleted before and after processing to avoid conflicts.</li> <li>Year 2000 compliance is ensured via <code>GSY2K</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP765P%20OCL%201099%20Vendor%20Forms/Summary%20AP765P%20OCL/#success-criteria","title":"Success Criteria","text":"<ul> <li>All eligible vendors (meeting threshold) are printed on IRS-compliant 1099 forms (MISC or NEC).</li> <li>Forms are correctly formatted with two (MISC) or three (NEC) per page.</li> <li>Totals and vendor counts are accurate on the final page.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/","title":"AP780 OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, specifically <code>AP780.ocl36.txt</code>, designed to create an IRS 1099 file for Accounts Payable (A/P) processing, primarily for 1099-MISC forms. Below, I\u2019ll break down the process steps, list the external programs called, and identify the tables used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#process-steps-of-the-ap780-ocl-program","title":"Process Steps of the AP780 OCL Program","text":"<p>The OCL program automates the creation of an IRS 1099 file by performing a series of file manipulations, data validations, and processing steps. Here\u2019s a detailed explanation of the steps:</p> <ol> <li>Initialization and Setup:</li> <li>The program begins with comments explaining its purpose: to create an A/P 1099 file for IRS electronic processing, specifically for 1099-MISC forms. Other 1099 types would require program modifications.</li> <li>It prompts for two parameters:<ul> <li><code>?10?</code>: The four-digit year for the 1099 file (e.g., 2012).</li> <li><code>?13?</code>: The 1099 file name (e.g., <code>APVN2012</code>).</li> </ul> </li> <li>A programmer note indicates that the file specified in <code>?13?</code> (e.g., <code>APVN2012</code>) is created in a prior process (<code>AP300</code>) and contains vendor data before monthly and yearly totals are cleared.</li> <li>The program sets the <code>SWITCH</code> to <code>00000000</code> and clears local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li> <p>It initializes a data structure with hardcoded company information for American Refining Group Inc., including name, address, tax ID, year (<code>?10?</code>), contact name, and phone number.</p> </li> <li> <p>File Name Assignment:</p> </li> <li>If <code>?9?</code> (likely a test environment flag) equals <code>G</code>, the program sets <code>P13</code> to <code>APVN?10?</code> (e.g., <code>APVN2012</code>).</li> <li>Otherwise, it sets <code>P13</code> to <code>?9?VN?10?</code> (e.g., <code>TESTVN2012</code> for a test environment).</li> <li> <p>If the file specified by <code>?13?</code> does not exist (<code>DATAF1-?13?</code>), the program pauses with an error message (<code>?10? NOT FOUND ( ?13? )</code>) and cancels execution.</p> </li> <li> <p>User Update Option:</p> </li> <li>The program pauses to ask if a Data File Utility (DFU) update should be moved to a separate menu option.</li> <li>If <code>?9?</code> equals <code>G</code>, it updates the <code>?13?</code> file using format <code>APFMT15</code>.</li> <li> <p>If in a test environment (<code>?9?</code> not equal to <code>G</code>), it pauses with a message indicating that DFU does not work in the test environment.</p> </li> <li> <p>Run AP780P Program:</p> </li> <li>Loads and runs the <code>AP780P</code> program.</li> <li>Opens a file <code>GSTABL</code> (or <code>?9?GSTABL</code> based on the environment) with shared access (<code>DISP-SHR</code>).</li> <li> <p>If <code>SWITCH1-1</code> is set, the program jumps to the <code>END</code> tag, terminating execution.</p> </li> <li> <p>File Deletion:</p> </li> <li>Displays a message indicating that the program is creating the A/P 1099 file for IRS electronic processing.</li> <li> <p>Deletes several files if they exist, depending on the environment (<code>?9?/G</code>):</p> <ul> <li><code>AP1099I</code>, <code>?9?AP1099I</code>, <code>AP1099</code>, <code>?9?AP1099</code>, <code>IRSTAX</code>, <code>?9?IRSTAX</code>, and <code>?9?AP781</code>.</li> </ul> </li> <li> <p>Sorting Input File (GSORT):</p> </li> <li>Loads the <code>#GSORT</code> program to sort the input file specified by <code>?13?</code> (e.g., <code>APVN2012</code>).</li> <li>Input file: <code>?13?</code> with shared access (<code>DISP-SHR</code>).</li> <li>Output file: <code>?9?AP780S</code> with 999,000 records, extendable by 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> <li> <p>Sorting parameters:</p> <ul> <li><code>HSORTA 22A 3X N</code>: Sorts ascending on a 22-character field, with additional logic.</li> <li>Conditions (<code>O C</code>, <code>I*</code>, <code>I C</code>, etc.) define sorting and filtering logic based on fields like 1099 type, vendor, and company.</li> <li>Fields extracted include:</li> <li>1099 type (positions 264\u2013264).</li> <li>Vendor (positions 4\u20138).</li> <li>Company (positions 2\u20133).</li> </ul> </li> <li> <p>Processing with AP781:</p> </li> <li>Loads the <code>AP781</code> program.</li> <li>Input files:<ul> <li><code>APVEND</code> (label <code>?13?</code>, shared access).</li> <li><code>AP780S</code> (label <code>?9?AP780S</code>).</li> </ul> </li> <li>Output file:<ul> <li><code>AP781</code> (label <code>?9?AP781</code>, 1,000 records, extendable by 500, temporary retention <code>RETAIN-T</code>).</li> </ul> </li> <li> <p>Runs the program to process the sorted data.</p> </li> <li> <p>Creating the Final 1099 File (AP780):</p> </li> <li>Loads the <code>AP780</code> program.</li> <li>Input file: <code>AP781</code> (label <code>?9?AP781</code>, shared access).</li> <li>Output file:<ul> <li>If <code>?9?/G</code>, creates <code>AP1099</code> (1,000 records, extendable by 500).</li> <li>Otherwise, creates <code>?9?AP1099</code> (e.g., <code>TESTAP1099</code>).</li> </ul> </li> <li> <p>Runs the program to generate the final 1099 file.</p> </li> <li> <p>Building Index:</p> </li> <li>If <code>?9?/G</code> and <code>AP1099I</code> exists, builds an index (<code>AP1099I</code>) for <code>AP1099</code> with keys at positions 7 (4 bytes) and 12 (9 bytes), allowing duplicate keys.</li> <li> <p>If not <code>?9?/G</code> and <code>?9?AP1099I</code> exists, builds an index (<code>?9?AP1099I</code>) for <code>?9?AP1099</code> with the same key structure.</p> </li> <li> <p>Copying Data:</p> <ul> <li>Deletes the existing file <code>AP10?10?</code> (e.g., <code>AP102012</code>) or <code>?9?AP1?10?</code> (e.g., <code>TESTAP12012</code>) if it exists.</li> <li>Copies data:</li> <li>If <code>?9?/G</code>, from <code>AP1099</code> to <code>AP10?10?</code>.</li> <li>Otherwise, from <code>?9?AP1099</code> to <code>?9?AP1?10?</code>.</li> </ul> </li> <li> <p>Cleanup and Termination:</p> <ul> <li>Jumps to the <code>END</code> tag.</li> <li>Resets the <code>SWITCH</code> to <code>00000000</code> and clears local variables (<code>LOCAL BLANK-*ALL</code>).</li> <li>Deletes the temporary file <code>?9?AP781</code> if it exists.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The program invokes the following external programs: 1. AP780P: Likely a preprocessing program that sets up or validates data before the main 1099 file creation. 2. #GSORT: A sorting utility to sort the input file (<code>?13?</code>) and produce a sorted output (<code>?9?AP780S</code>). 3. AP781: Processes the sorted data to prepare it for the final 1099 file. 4. AP780: Generates the final 1099 file (<code>AP1099</code> or <code>?9?AP1099</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#tables-used","title":"Tables Used","text":"<p>The program references the following files (tables): 1. GSTABL (or <code>?9?GSTABL</code>): A table file opened with shared access, likely containing configuration or reference data. 2. APVEND (label <code>?13?</code>, e.g., <code>APVN2012</code>): The input vendor file containing A/P data before totals are cleared. 3. AP780S (label <code>?9?AP780S</code>): A temporary sorted output file from the <code>#GSORT</code> program. 4. AP781 (label <code>?9?AP781</code>): A temporary file used by the <code>AP781</code> program for intermediate processing. 5. AP1099 (or <code>?9?AP1099</code>): The final 1099 output file. 6. AP1099I (or <code>?9?AP1099I</code>): An index file for <code>AP1099</code> or <code>?9?AP1099</code>. 7. IRSTAX (or <code>?9?IRSTAX</code>): A file that may store tax-related data, deleted if it exists. 8. AP10?10? (or <code>?9?AP1?10?</code>, e.g., <code>AP102012</code> or <code>TESTAP12012</code>): The final copied 1099 data file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20OCL/#summary","title":"Summary","text":"<p>The <code>AP780</code> OCL program orchestrates the creation of an IRS 1099 file by: - Validating input parameters and files. - Allowing user updates via DFU. - Sorting vendor data, processing it through intermediate steps, and generating the final 1099 file. - Managing file deletions and indexing for efficient data access. - Supporting both production (<code>?9?/G</code>) and test environments.</p> <p>The program relies on external programs (<code>AP780P</code>, <code>#GSORT</code>, <code>AP781</code>, <code>AP780</code>) and multiple files for data storage and processing, ensuring the output is suitable for IRS electronic submission.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/","title":"AP780 RPG36","text":"<p>The provided document, <code>AP780.rpg36.txt</code>, is an RPG (Report Program Generator) program for an IBM System/3x or AS/400 system, called by the main OCL program (<code>AP780.ocl36.txt</code>) to finalize the creation of an IRS 1099 file (<code>AP1099</code>) for electronic submission. This program processes the preprocessed vendor data from the <code>AP781</code> file to generate IRS-compliant records, including Transmitter (\"T\"), Payer (\"A\"), Payee (\"B\"), End of Payer (\"C\"), and End of Transmission (\"F\") records. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs of the <code>AP780</code> RPG program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#process-steps-of-the-ap780-rpg-program","title":"Process Steps of the AP780 RPG Program","text":"<p>The <code>AP780</code> program reads the <code>AP781</code> file, which contains consolidated vendor records, and generates a formatted <code>AP1099</code> file with IRS-specified record types. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (ONCE Block):</li> <li>The program checks if the <code>ONCE</code> variable is zero (first execution):<ul> <li>Initializes counters and fields:</li> <li><code>RECSEQ</code> (record sequence number, 8 digits): Set to zero (JB02 revision).</li> <li><code>ZERO03</code>, <code>ZERO04</code>, <code>ZERO06</code>, <code>ZERO12</code>, <code>ZERO15</code> (zero-filled fields of various lengths): Set to zero.</li> <li><code>Z1</code> (1-digit zero): Set to zero.</li> <li><code>BLNK04</code>, <code>BLNK05</code>, <code>BLNK06</code>, <code>BLNK07</code>, <code>BLNK08</code>, <code>BLNK10</code>, <code>BLNK11</code>, <code>BLNK15</code>, <code>BLNK20</code>, <code>BLNK40</code>, <code>BLNK45</code>, <code>BLNK48</code>, <code>BLNK60</code>, <code>BLNK76</code>, <code>BLN115</code> (blank fields of various lengths): Set to blanks.</li> <li>Increments <code>RECSEQ</code> by 1 for the first record.</li> <li>Writes the Transmitter \"T\" Record to <code>AP1099</code> using the <code>ADDT</code> exception output (see Outputs section for details).</li> <li>Sets <code>ONCE</code> to 1 to prevent re-execution.</li> </ul> </li> <li> <p>The \"T\" record contains transmitter information (e.g., company name, tax ID, contact details) and is written once at the start of the file.</p> </li> <li> <p>Process Vendor Records (L1 Level Loop):</p> </li> <li> <p>For each vendor record in <code>AP781</code> (grouped by vendor using level-break <code>L1</code>):</p> <ul> <li>Initializes variables:</li> <li>Increments <code>TOTA</code> (count of Payer \"A\" records, 8 digits) by 1.</li> <li>Resets <code>COUNT</code> (count of Payee \"B\" records for the current payer, 8 digits) to zero.</li> <li>Resets control totals (<code>TOTGR1</code>, <code>TOTGR2</code>, <code>TOTGR3</code>, <code>TOTGR6</code>, <code>TOTGR7</code>, 15 digits, 2 decimals) to zero.</li> <li>Clears <code>TYPE</code> (2 characters, form type) to blanks (FL01 revision).</li> <li>Turns off indicators 31, 32, 33, 34 (form type indicators), and 41, 46, 47, 51, 56, 57 (box-specific indicators).</li> <li>Determines the 1099 form type based on <code>VN1099</code> (A/P 1099 code, position 2):</li> <li>If <code>VN1099 = 'D'</code> (Dividend):<ul> <li>Sets <code>TYPE = '1 '</code> (1099-DIV, FL01).</li> <li>Sets indicator 31 on.</li> </ul> </li> <li>If <code>VN1099 = 'I'</code> (Interest):<ul> <li>Sets <code>TYPE = '6 '</code> (1099-INT, FL01).</li> <li>Sets indicator 32 on.</li> </ul> </li> <li>If <code>VN1099 = 'M'</code> (Miscellaneous):<ul> <li>Sets <code>TYPE = 'A '</code> (1099-MISC, FL01).</li> <li>Sets indicator 33 on.</li> </ul> </li> <li>If <code>VN1099 = 'N'</code> (Non-Employee Compensation):<ul> <li>Sets <code>TYPE = 'NE'</code> (1099-NEC, FL01, added by MG04).</li> <li>Sets indicator 34 on.</li> </ul> </li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the Payer \"A\" Record to <code>AP1099</code> using the <code>ADDA</code> exception output, containing payer information (e.g., company name, tax ID, form type).</li> <li>Processes payee data:</li> <li>Handles name and payee logic (JB02, JB03, JK01 revisions):<ul> <li>Clears <code>NAM4</code> (name control, 4 characters) and <code>PYN1</code>, <code>PYN2</code> (payee names, 40 characters each).</li> <li>Sets <code>NAM4</code> to <code>VNNMCT</code> (IRS name control, JK01).</li> <li>If <code>VNPYN1</code> (payee name 1) is blank:</li> <li>If <code>NAM4</code> is blank, sets <code>NAM4</code> to <code>VNNAM4</code> (sort abbreviation).</li> <li>Sets <code>PYN1</code> to <code>VNNAME</code> (vendor name).</li> <li>If <code>VNNOVF = 'Y'</code> (name overflow, JB03):<ul> <li>Sets <code>PYN2</code> to <code>VNADD1</code> (address line 1 as name continuation).</li> <li>Moves <code>VNADD2</code> to <code>VNADD1</code>, clears <code>VNADD2</code>.</li> <li>Sets indicator 72 on.</li> </ul> </li> <li>If <code>VNPYN1</code> is not blank:</li> <li>If <code>NAM4</code> is blank, sets <code>NAM4</code> to <code>VNNAM4</code>.</li> <li>Sets <code>PYN1</code> to <code>VNPYN1</code>, sets indicator 71 on.</li> <li>If <code>VNPYN2</code> is not blank, sets <code>PYN2</code> to <code>VNPYN2</code>, sets indicator 72 on.</li> </ul> </li> <li>Checks tax ID type (<code>VNDASH</code>, position 119):<ul> <li>If <code>VNDASH = '-'</code> (indicator 20 on), indicates a business EIN; otherwise, assumes an individual SSN.</li> </ul> </li> <li>Accumulates control totals based on form type and box numbers:<ul> <li>For 1099-DIV (indicator 31):</li> <li>Adds <code>VNAMT1</code> (first box amount) to <code>TOTGR1</code> and <code>TOTGR2</code>.</li> <li>For 1099-INT (indicator 32):</li> <li>Adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>For 1099-MISC (indicator 33):</li> <li>If <code>BOX1 = 1</code> (Rents), sets indicator 41, adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX1 = 3</code> (Other Income), sets indicator 43, adds <code>VNAMT1</code> to <code>TOTGR3</code>.</li> <li>If <code>BOX1 = 6</code> (Medical Payments), sets indicator 46, adds <code>VNAMT1</code> to <code>TOTGR6</code>.</li> <li>If <code>BOX2 = 1</code> (Rents), sets indicator 51, adds <code>VNAMT2</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX2 = 3</code> (Other Income), sets indicator 53, adds <code>VNAMT2</code> to <code>TOTGR3</code>.</li> <li>If <code>BOX2 = 6</code> (Medical Payments), sets indicator 56, adds <code>VNAMT2</code> to <code>TOTGR6</code>.</li> <li>For 1099-NEC (indicator 34):</li> <li>If <code>BOX1 = 1</code> (Nonemployee Compensation), sets indicator 47, adds <code>VNAMT1</code> to <code>TOTGR1</code>.</li> <li>If <code>BOX2 = 1</code>, sets indicator 57, adds <code>VNAMT2</code> to <code>TOTGR1</code>.</li> </ul> </li> <li>Copies <code>VNAMT1</code> and <code>VNAMT2</code> to <code>VXAMT1</code> and <code>VXAMT2</code> (12 digits, 2 decimals) for output.</li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the Payee \"B\" Record to <code>AP1099</code> using the <code>ADDB</code> exception output, containing vendor details (e.g., tax ID, name, address, payment amounts).</li> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the End of Payer \"C\" Record to <code>AP1099</code> using the <code>ADDL1</code> exception output, summarizing the number of payees (<code>COUNT</code>) and control totals (<code>TOTGR1</code>, <code>TOTGR3</code>, <code>TOTGR6</code>, <code>TOTGR7</code>).</li> </ul> </li> <li> <p>End of Transmission (LR Indicator):</p> </li> <li>When the last record is processed (<code>LR</code> indicator on):<ul> <li>Increments <code>RECSEQ</code> by 1 (JB02).</li> <li>Writes the End of Transmission \"F\" Record to <code>AP1099</code> using the <code>ADDLR</code> exception output, indicating the total number of Payer \"A\" records (<code>TOTA</code>) and closing the file.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP780</code> program enforces the following business rules for IRS 1099 file creation: 1. IRS Record Structure:    - Generates a file with five record types per IRS specifications:      - T Record: One per file, containing transmitter information (company name, tax ID, contact, etc.).      - A Record: One per 1099 form type (DIV, INT, MISC, NEC), containing payer information.      - B Record: One per vendor, containing payee details (tax ID, name, address, payment amounts).      - C Record: One per Payer \"A\" record, summarizing payee count and control totals.      - F Record: One per file, marking the end of transmission.    - Each record is 750 bytes, padded with blanks or zeros as required.</p> <ol> <li>Form Type Mapping:</li> <li>Maps <code>VN1099</code> codes to IRS form types:<ul> <li><code>'D'</code> \u2192 1099-DIV (<code>TYPE = '1 '</code>, indicator 31).</li> <li><code>'I'</code> \u2192 1099-INT (<code>TYPE = '6 '</code>, indicator 32).</li> <li><code>'M'</code> \u2192 1099-MISC (<code>TYPE = 'A '</code>, indicator 33).</li> <li><code>'N'</code> \u2192 1099-NEC (<code>TYPE = 'NE'</code>, indicator 34, added by MG04).</li> </ul> </li> <li> <p>Supports multiple form types in a single file, with separate \"A\" and \"C\" records for each.</p> </li> <li> <p>Payment Amount Allocation:</p> </li> <li>Allocates payment amounts (<code>VNAMT1</code>, <code>VNAMT2</code>) to IRS-specified boxes based on <code>BOX1</code> and <code>BOX2</code>:<ul> <li>1099-MISC: Box 1 (Rents), Box 3 (Other Income), Box 6 (Medical Payments), Box 7 (Nonemployee Compensation).</li> <li>1099-NEC: Box 1 (Nonemployee Compensation).</li> <li>1099-DIV: Box 1 (Ordinary Dividends), Box 2 (Capital Gains).</li> <li>1099-INT: Box 1 (Interest Income).</li> </ul> </li> <li> <p>Accumulates control totals (<code>TOTGR1</code>, <code>TOTGR3</code>, <code>TOTGR6</code>) for specific boxes in the \"C\" record.</p> </li> <li> <p>Tax ID Handling:</p> </li> <li>Identifies tax ID type based on <code>VNDASH</code> (<code>'-'</code> for EIN, otherwise SSN).</li> <li>Formats tax ID (<code>VNID11</code>, <code>VNID12</code>, <code>VNID13</code> for SSN; <code>VNID21</code>, <code>VNID22</code> for EIN) in the \"B\" record.</li> <li> <p>Uses transmitter and payer tax IDs (<code>ID1</code>, <code>ID2</code>) from <code>UDS</code> for \"T\" and \"A\" records.</p> </li> <li> <p>Name and Payee Logic:</p> </li> <li>Prefers payee names (<code>VNPYN1</code>, <code>VNPYN2</code>) over vendor name (<code>VNNAME</code>) if provided (JB02).</li> <li>Uses name overflow (<code>VNNOVF = 'Y'</code>) to continue vendor name with address line 1 (<code>VNADD1</code>) in <code>PYN2</code>, shifting <code>VNADD2</code> to <code>VNADD1</code> (JB03).</li> <li> <p>Uses IRS name control (<code>VNNMCT</code>, JK01) or sort abbreviation (<code>VNNAM4</code>) in <code>NAM4</code> for \"B\" records, ensuring IRS compliance.</p> </li> <li> <p>Sequence Numbering:</p> </li> <li> <p>Assigns a unique sequence number (<code>RECSEQ</code>) to each record (\"T\", \"A\", \"B\", \"C\", \"F\"), incremented sequentially (JB02).</p> </li> <li> <p>Zero and Blank Padding:</p> </li> <li>Fills unused numeric fields with zeros (e.g., <code>ZERO12</code> for payment amounts) and unused character fields with blanks (e.g., <code>BLNK40</code>) per IRS requirements (JB02).</li> <li> <p>Ensures fixed-length records (750 bytes) with proper padding.</p> </li> <li> <p>IRS Compliance:</p> </li> <li>Includes fields like name control, foreign entity indicators, and contact information to meet IRS electronic filing standards.</li> <li>Supports 1099-NEC (added by MG04 in 2021) alongside 1099-MISC, 1099-DIV, and 1099-INT.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li>None: The <code>AP780</code> program does not use any table files (e.g., <code>GSTABL</code> as used in <code>AP780P</code>). It relies entirely on the input file <code>AP781</code> and user data structure (<code>UDS</code>) for processing.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP780</code> program does not call any external RPG or OCL programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and performs its tasks independently, reading from <code>AP781</code> and writing to <code>AP1099</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>AP1099 File:</li> <li>Purpose: The final IRS 1099 file for electronic submission, containing formatted records per IRS specifications.</li> <li>Record Length: 750 bytes per record, padded with blanks or zeros.</li> <li> <p>Record Types:</p> <ul> <li>Transmitter \"T\" Record (<code>ADDT</code>, written once):</li> <li>Position 1: <code>'T'</code>.</li> <li>Positions 2-5: <code>YEAR</code> (four-digit year, e.g., 2025).</li> <li>Position 6: Blank (no prior year indicator).</li> <li>Positions 7-8: <code>ID1</code> (transmitter tax ID part 1).</li> <li>Positions 9-15: <code>ID2</code> (transmitter tax ID part 2).</li> <li>Positions 16-20: <code>'28Q01'</code> (transmitter code).</li> <li>Positions 21-27: Blanks (replacement file code, test file indicator).</li> <li>Position 28: Blank (foreign entity indicator).</li> <li>Positions 29-58: <code>HEAD1</code> (transmitter name).</li> <li>Positions 59-258: Blanks, <code>HEAD1</code>, <code>HEAD2</code>, <code>HDCITY</code>, <code>HDSTAT</code>, <code>HDZIP</code> (address fields).</li> <li>Positions 259-303: <code>TOTB</code> (total payees, from <code>UDS</code>).</li> <li>Positions 304-323: <code>CNTACT</code> (contact name).</li> <li>Positions 324-353: <code>CNTPH#</code> (contact phone).</li> <li>Positions 354-507: Blanks, <code>RECSEQ</code> (sequence number, JB02).</li> <li>Position 518: <code>'I'</code> (inhouse software indicator, JB02).</li> <li>Positions 519-750: Blanks.</li> <li>Payer \"A\" Record (<code>ADDA</code>, one per form type):</li> <li>Position 1: <code>'A'</code>.</li> <li>Positions 2-5: <code>YEAR</code>.</li> <li>Position 6: Blank (combined federal/state indicator, FL01).</li> <li>Positions 7-11: Blanks.</li> <li>Positions 12-13: <code>ID1</code> (payer tax ID part 1).</li> <li>Positions 14-20: <code>ID2</code> (payer tax ID part 2).</li> <li>Positions 21-24: <code>'AMER'</code> (payer name control).</li> <li>Position 25: Blank (last filing indicator).</li> <li>Positions 26-27: <code>TYPE</code> (form type: <code>'1 '</code>, <code>'6 '</code>, <code>'A '</code>, <code>'NE'</code>).</li> <li>Positions 28-43: Form-specific code (e.g., <code>'12 '</code> for 1099-DIV, <code>'13 '</code> for 1099-MISC, <code>'1 '</code> for 1099-NEC).</li> <li>Positions 44-51: Blanks, foreign entity indicator.</li> <li>Positions 52-224: <code>HEAD1</code>, <code>HEAD2</code>, <code>HDCITY</code>, <code>HDSTAT</code>, <code>HDZIP</code>, <code>CNTPH#</code> (payer details).</li> <li>Positions 225-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> <li>Payee \"B\" Record (<code>ADDB</code>, one per vendor):</li> <li>Position 1: <code>'B'</code>.</li> <li>Positions 2-5: <code>YEAR</code>.</li> <li>Position 6: Blank (no corrections).</li> <li>Positions 7-10: <code>NAM4</code> (name control, <code>VNNMCT</code> or <code>VNNAM4</code>).</li> <li>Position 11: <code>'1'</code> (EIN) or <code>'2'</code> (SSN) based on <code>VNDASH</code>.</li> <li>Positions 12-20: <code>VNID11</code>, <code>VNID12</code>, <code>VNID13</code> (SSN) or <code>VNID21</code>, <code>VNID22</code> (EIN).</li> <li>Positions 21-25: <code>VNVEND</code> (vendor number, JB03).</li> <li>Positions 26-54: Blanks.</li> <li>Positions 55-66: <code>VXAMT1</code> (payment amount 1, based on form/box).</li> <li>Positions 67-78: <code>VXAMT1</code> or <code>VXAMT2</code> (payment amount 2, if applicable).</li> <li>Positions 79-258: Zero-filled payment amounts (3 to J), populated based on <code>BOX1</code>, <code>BOX2</code>.</li> <li>Position 287: Blank (foreign entity indicator).</li> <li>Positions 288-327: <code>PYN1</code> (payee name 1 or vendor name).</li> <li>Positions 328-367: <code>PYN2</code> (payee name 2 or name continuation).</li> <li>Positions 368-494: <code>VNADD1</code>, <code>CITY</code>, <code>STATE</code>, <code>ZIP5</code> (payee address).</li> <li>Positions 495-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Form-specific fields (e.g., direct sales indicator for 1099-MISC/NEC), blanks.</li> <li>End of Payer \"C\" Record (<code>ADDL1</code>, one per \"A\" record):</li> <li>Position 1: <code>'C'</code>.</li> <li>Positions 2-9: <code>COUNT</code> (number of \"B\" records for this payer).</li> <li>Positions 10-15: Blanks.</li> <li>Positions 16-33: <code>TOTGR1</code> (control total 1, e.g., Rents, Nonemployee Compensation).</li> <li>Positions 34-51: <code>TOTGR2</code> (control total 2, e.g., Dividends).</li> <li>Positions 52-69: <code>TOTGR3</code> (control total 3, e.g., Other Income).</li> <li>Positions 70-123: Zeroes, <code>TOTGR6</code> (control total 6, e.g., Medical Payments).</li> <li>Positions 124-339: Zeroes, <code>TOTGR7</code> (control total 7, if applicable).</li> <li>Positions 340-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> <li>End of Transmission \"F\" Record (<code>ADDLR</code>, written once):</li> <li>Position 1: <code>'F'</code>.</li> <li>Positions 2-9: <code>TOTA</code> (number of \"A\" records).</li> <li>Positions 10-30: Zeroes.</li> <li>Positions 31-507: Blanks, <code>RECSEQ</code>.</li> <li>Positions 508-750: Blanks.</li> </ul> </li> <li> <p>TOTB Field (in UDS):</p> </li> <li>Purpose: Tracks the total number of payees, used in the \"T\" record.</li> <li>Location: Positions 201-208 in the user data structure (<code>UDS</code>), 8 digits, no decimals.</li> <li>Source: Set by <code>AP781</code> and passed through <code>UDS</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/","title":"AP780P RPG36","text":"<p>The provided document, <code>AP780P.rpg36.txt</code>, is an RPG (Report Program Generator) program for an IBM System/3x or AS/400 system, called by the main OCL program (<code>AP780.ocl36.txt</code>) to perform initial validation and processing for creating an IRS 1099 file. Below is a detailed explanation of the process steps, business rules, tables used, external programs called, and outputs of the <code>AP780P</code> RPG program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#process-steps-of-the-ap780p-rpg-program","title":"Process Steps of the AP780P RPG Program","text":"<p>The <code>AP780P</code> program validates user input for creating an IRS 1099 file, specifically focusing on company and vendor data used in the 1099-MISC file generation process. It uses a display file (<code>SCREEN</code>) for user interaction and a table file (<code>GSTABL</code>) for validation. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Set Indicators Off: The program begins by resetting indicators 81, 90, 91, 92, 93, 94, 95, 96, and 97 (<code>SETOF 819091</code>, <code>SETOF 929394</code>, <code>SETOF 959697</code>) to ensure a clean state.</li> <li> <p>Clear Error Message: The message field <code>MSGE</code> (40 characters) is cleared to blanks (<code>MOVEL*BLANKS MSGE</code>).</p> </li> <li> <p>Check for Test Environment (KG Indicator):</p> </li> <li>If the <code>KG</code> indicator is on (likely set by the OCL program when <code>?9?</code> indicates a test environment, e.g., <code>?9?=TEST</code>):<ul> <li>Indicator 81 is turned off (<code>SETOF 81</code>).</li> <li>Indicator <code>U1</code> (user indicator) and <code>LR</code> (last record) are turned on (<code>SETON U1LR</code>).</li> <li>The program jumps to the <code>END</code> tag, bypassing further processing and effectively terminating early.</li> </ul> </li> <li> <p>This ensures no validation or screen interaction occurs in a test environment, possibly to avoid unintended changes.</p> </li> <li> <p>Set Indicator 60:</p> </li> <li> <p>Indicator 60 is turned on (<code>SETON 60</code>), likely used to control display file behavior or program flow, though its specific purpose is not detailed in the code.</p> </li> <li> <p>Check for Screen Input (Indicator 09):</p> </li> <li>If indicator 09 is on (indicating input from the <code>SCREEN</code> file, format <code>AP780PS1</code>):<ul> <li>Sets indicator 81 and 94 (<code>SETON 8194</code>).</li> <li>Sets the <code>CURLST</code> field to <code>'C'</code> (indicating \"current\" list).</li> <li>Jumps to the <code>END</code> tag, skipping further processing.</li> </ul> </li> <li> <p>This suggests that if the screen has already been processed, the program assumes default values or skips validation.</p> </li> <li> <p>Execute Validation Subroutine (SUBSC1):</p> </li> <li> <p>If indicator 09 is not on, the program calls the <code>SUBSC1</code> subroutine (<code>EXSR SUBSC1</code>) to validate input fields from the <code>SCREEN</code> file or user data structure (<code>UDS</code>).</p> </li> <li> <p>SUBSC1 Subroutine (Validation Logic):    The <code>SUBSC1</code> subroutine validates key fields required for the 1099 file. Each validation step checks for specific conditions, sets error indicators, and assigns error messages if validation fails. If any validation fails, the program jumps to <code>ENDSC1</code> to exit the subroutine.</p> </li> <li> <p>Validate HEAD1 (Company Name):</p> <ul> <li>Checks if <code>HEAD1</code> (positions 3-32, company name) is blank (<code>COMP *BLANKS</code>).</li> <li>If blank, sets indicators 81 and 91 (<code>SETON 8191</code>), moves message \"FIRST HEADING CANNOT BE BLANK\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate HEAD2 (Address Line):</p> <ul> <li>Checks if <code>HEAD2</code> (positions 33-62, address line) is blank.</li> <li>If blank, sets indicators 81 and 92 (<code>SETON 8192</code>), moves message \"SECOND HEADING CANNOT BE BLANK\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate ID# (Tax ID):</p> <ul> <li>Checks if <code>ID#</code> (positions 103-112, tax ID) is blank.</li> <li>If blank, sets indicators 81 and 93 (<code>SETON 8193</code>), moves message \"ID# CANNOT BE BLANK - TRY AGAIN!\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate YEAR:</p> <ul> <li>Checks if <code>YEAR</code> (positions 121-124, four-digit year) is zero (<code>COMP 0</code>).</li> <li>If zero, sets indicators 81 and 95 (<code>SETON 8195</code>), moves message \"ENTER VALID YEAR\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate CURLST (Current/Last List Indicator):</p> <ul> <li>Checks if <code>CURLST</code> (position 125, current/last list flag) is neither <code>'C'</code> nor <code>'L'</code> (<code>COMP 'C'</code> and <code>COMP 'L'</code>).</li> <li>If invalid, sets indicators 81 and 96 (<code>SETON 8196</code>), moves message \"ENTER 'C'-CURR OR 'L'-LAST\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>Validate FORM (1099 Form Type):</p> <ul> <li>Constructs a key <code>TBLKEY</code> (12 characters) by combining the literal <code>'AP1099'</code> with the <code>FORM</code> field (position 160, e.g., <code>'C'</code> for 1099-MISC).</li> <li>Performs a <code>CHAIN</code> operation on the <code>GSTABL</code> file using <code>TBLKEY</code> to check if the form type exists in the table.</li> <li>If the record is not found (indicator 90 on), sets indicators 81 and 97 (<code>SETON 8197</code>), moves message \"INVALID FORM TYPE\" to <code>MSGE</code>, and jumps to <code>ENDSC1</code>.</li> </ul> </li> <li> <p>End Subroutine (ENDSC1):</p> </li> <li> <p>The <code>ENDSC1</code> tag marks the end of the <code>SUBSC1</code> subroutine. If any validation fails, the program exits the subroutine and proceeds to output the screen with the error message.</p> </li> <li> <p>Output to SCREEN:</p> </li> <li>If indicator 81 is on (indicating a validation error or first-time display), the program writes to the <code>SCREEN</code> file using format <code>AP780PS1</code>.</li> <li>Outputs the following fields:<ul> <li><code>HEAD1</code> (company name, positions 1-30).</li> <li><code>HEAD2</code> (address line, positions 31-60).</li> <li><code>CITY</code> (city, positions 61-89).</li> <li><code>STATE</code> (state, positions 90-91).</li> <li><code>ZIP</code> (zip code, positions 92-100).</li> <li><code>ID#</code> (tax ID, positions 101-110).</li> <li><code>ENTAMT</code> (entered amount, positions 113-118, zoned decimal).</li> <li><code>YEAR</code> (year, positions 119-122).</li> <li><code>CURLST</code> (current/last flag, position 123).</li> <li><code>MSGE</code> (error message, positions 124-163).</li> <li><code>FORM</code> (form type, position 164).</li> </ul> </li> <li> <p>The screen displays these fields for user input or correction, along with any error message from validation failures.</p> </li> <li> <p>Program Termination (END Tag):</p> </li> <li>The program reaches the <code>END</code> tag, either after validation, screen output, or early termination (e.g., test environment or indicator 09).</li> <li>If <code>U1</code> and <code>LR</code> are on (set in the test environment case), the program terminates, potentially signaling an error to the calling OCL program via <code>SWITCH1-1</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP780P</code> program enforces the following business rules for 1099 file creation: 1. Mandatory Fields:    - The company name (<code>HEAD1</code>), address line (<code>HEAD2</code>), and tax ID (<code>ID#</code>) must not be blank, as they are critical for IRS 1099 reporting.    - The year (<code>YEAR</code>) must be a valid non-zero value (e.g., 2025).    - The current/last list flag (<code>CURLST</code>) must be either <code>'C'</code> (current) or <code>'L'</code> (last), indicating the type of vendor list to process.    - The form type (<code>FORM</code>) must exist in the <code>GSTABL</code> table, ensuring only valid 1099 form types (e.g., <code>'C'</code> for 1099-MISC) are processed.</p> <ol> <li>Error Handling:</li> <li>If any validation fails, an appropriate error message is displayed on the screen, and indicators 81 and a specific error indicator (91-97) are set to highlight the issue.</li> <li> <p>The program prevents further processing until all validations pass, ensuring data integrity for the 1099 file.</p> </li> <li> <p>Test Environment Handling:</p> </li> <li> <p>In a test environment (indicated by <code>KG</code>), the program skips validation and screen interaction, setting <code>U1</code> and <code>LR</code> to signal early termination, likely to avoid modifying production data.</p> </li> <li> <p>Screen Interaction:</p> </li> <li>The program uses the <code>SCREEN</code> file (format <code>AP780PS1</code>) to interact with the user, displaying input fields and error messages.</li> <li>If the screen has already been processed (indicator 09), it defaults <code>CURLST</code> to <code>'C'</code> and skips further validation, assuming prior input is valid.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#tables-used","title":"Tables Used","text":"<ul> <li><code>GSTABL</code>:</li> <li>Type: Input file (<code>IF</code>), fixed format, 256 bytes per record, 256 records, with an alternate index (<code>AI</code>) on 12 bytes.</li> <li>Fields:<ul> <li><code>TBDEL</code> (position 1): Delete flag ('D' for deleted records).</li> <li><code>TBTYPE</code> (positions 2-7): Table type.</li> <li><code>TBCODE</code> (positions 8-13): Table code.</li> <li><code>TBDESC</code> (positions 14-43): Table description.</li> </ul> </li> <li>Usage: The program uses <code>GSTABL</code> to validate the <code>FORM</code> field by constructing a key (<code>TBLKEY</code>) combining <code>'AP1099'</code> and <code>FORM</code> (e.g., <code>'AP1099C'</code> for 1099-MISC). The <code>CHAIN</code> operation checks if the form type exists in the table.</li> <li>Access: Accessed via a <code>CHAIN</code> operation with a 12-byte key.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The <code>AP780P</code> program does not explicitly call any external RPG or OCL programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and performs its tasks independently, relying on file I/O and user interaction via the <code>SCREEN</code> file.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#outputs","title":"Outputs","text":"<ol> <li>SCREEN File (AP780PS1 Format):</li> <li>Purpose: Displays input fields and error messages to the user for validation or correction.</li> <li>Fields Output:<ul> <li><code>HEAD1</code>: Company name (30 characters).</li> <li><code>HEAD2</code>: Address line (30 characters).</li> <li><code>CITY</code>: City (29 characters).</li> <li><code>STATE</code>: State (2 characters).</li> <li><code>ZIP</code>: Zip code (9 characters).</li> <li><code>ID#</code>: Tax ID (10 characters).</li> <li><code>ENTAMT</code>: Entered amount (8 bytes, zoned decimal, 2 decimal places).</li> <li><code>YEAR</code>: Four-digit year (4 bytes, zoned decimal).</li> <li><code>CURLST</code>: Current/last flag (1 character, 'C' or 'L').</li> <li><code>MSGE</code>: Error message (40 characters).</li> <li><code>FORM</code>: 1099 form type (1 character, e.g., 'C' for 1099-MISC).</li> </ul> </li> <li> <p>Conditions: Written when indicator 81 is on (first-time display or validation error).</p> </li> <li> <p>Indicators:</p> </li> <li>Indicator 81: Set on for screen output or validation errors, signaling the calling OCL program (<code>AP780.ocl36.txt</code>) to display the screen.</li> <li>Indicators 91-97: Set to indicate specific validation errors (e.g., 91 for blank <code>HEAD1</code>, 93 for blank <code>ID#</code>, etc.).</li> <li> <p>U1 and LR: Set in test environment (<code>KG</code> on) to indicate early termination, potentially setting <code>SWITCH1-1</code> in the OCL program to signal an error or bypass condition.</p> </li> <li> <p>No Direct File Output:</p> </li> <li>The program does not directly create or update any data files (e.g., <code>AP1099</code> or <code>APVNYYYY</code>). Its primary role is to validate input data, which is then used by subsequent programs (<code>AP781</code>, <code>AP780</code>) in the OCL process to generate the 1099 file.</li> <li>The validated data is likely stored in the <code>SCREEN</code> file or user data structure (<code>UDS</code>) and passed back to the OCL program for further processing.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP780P%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Purpose in the OCL Workflow: <code>AP780P</code> serves as the initial validation step in the 1099 file creation process, ensuring that critical fields (company name, address, tax ID, year, list type, and form type) are valid before subsequent programs (<code>#GSORT</code>, <code>AP781</code>, <code>AP780</code>) process the vendor data.</li> <li>Form Type Limitation: The program is designed for 1099-MISC (likely indicated by <code>FORM='C'</code>), as noted in the OCL program. Other 1099 types would require modifications to the validation logic and <code>GSTABL</code> table.</li> <li>Table Dependency: The <code>GSTABL</code> table is critical for validating the <code>FORM</code> field, and its absence or incorrect data could cause validation failures.</li> <li>Error Handling: The program provides clear, user-friendly error messages via the <code>SCREEN</code> file, ensuring users can correct invalid inputs.</li> <li>Test Environment: The <code>KG</code> indicator allows the program to bypass processing in a test environment, preventing unintended data changes, which is a common practice in legacy systems to separate test and production workflows.</li> </ul> <p>This RPG program is a critical front-end component of the 1099 creation process, ensuring data integrity through rigorous input validation before the main file processing occurs in the OCL-driven workflow.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/","title":"AP781 RPG36","text":"<p>The <code>AP781.rpg36.txt</code> is an RPG/36 program invoked by the main OCL program (<code>AP780.ocl36.txt</code>) to preprocess Accounts Payable (A/P) vendor data for IRS 1099 file creation. It consolidates vendor data from the <code>APVEND</code> file, using the sorted <code>AP780S</code> file to ensure one record per vendor, and produces the <code>AP781</code> output file for further processing by <code>AP780</code>. Below, I\u2019ll detail the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#process-steps-of-the-ap781-rpg-program","title":"Process Steps of the AP781 RPG Program","text":"<p>The <code>AP781</code> program processes sorted vendor data from the <code>AP780S</code> file and the original vendor file <code>APVEND</code> to create a consolidated output file <code>AP781</code>, which is used in subsequent steps to generate the IRS 1099 file. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines input files <code>APVEND</code> (primary vendor file) and <code>AP780S</code> (sorted input file), and an output file <code>AP781</code>.</li> <li>It uses level-break logic (<code>L1</code>) to process records grouped by vendor, ensuring one output record per vendor.</li> <li> <p>Initializes working fields (<code>L1AMT1</code>, <code>L1AMT2</code>, <code>BOX1</code>, <code>BOX2</code>) to zero at the start of each vendor group (<code>L1</code> level) using <code>Z-ADD*ZEROS</code>.</p> <ul> <li>Files:</li> <li><code>APVEND</code>: Primary input file (579 bytes, indexed), containing vendor data.</li> <li><code>AP780S</code>: Secondary input file (30 bytes, indexed by 3-byte key), used to identify vendors for processing.</li> <li><code>AP781</code>: Output file (320 bytes), storing consolidated vendor data.</li> <li>Input Record (APVEND):</li> <li><code>VNDEL</code> (1): Delete code.</li> <li><code>VNCO</code> (2\u20133): Company number.</li> <li><code>VNVENDL1</code> (4\u20138): Vendor number.</li> <li><code>VNNAME</code> (9\u201338): Vendor name.</li> <li><code>VNADD1</code> (39\u201368): Address line 1.</li> <li><code>VNADD2</code> (69\u201398): Address line 2.</li> <li><code>VNADD3</code> (99\u2013128): Address line 3.</li> <li><code>VNADD4</code> (129\u2013158): Address line 4.</li> <li><code>VNZIP5</code> (159\u2013163, zoned): 5-digit ZIP code.</li> <li><code>VNSRT4</code> (168\u2013171): Alpha sort abbreviation.</li> <li><code>VNNOVF</code> (216): Name overflow indicator (<code>Y</code> if address used for name continuation).</li> <li><code>VNYTDP</code> (242\u2013247, packed): Current year-to-date paid amount.</li> <li><code>VNLYDP</code> (248\u2013253, packed): Last year-to-date paid amount.</li> <li><code>VN1099L2</code> (264): 1099 code (<code>D</code>, <code>I</code>, <code>M</code>, <code>N</code>).</li> <li><code>VNID#</code> (265\u2013275): 1099 tax ID.</li> <li><code>VNBOX1</code> (276\u2013277, zoned): First 1099 box number.</li> <li><code>VNBOX2</code> (278\u2013279, zoned): Second 1099 box number.</li> <li><code>VNB2AM</code> (280\u2013285, packed): Second 1099 box amount.</li> <li><code>VNPYN1</code> (300\u2013339): Payee name 1.</li> <li><code>VNPYN2</code> (340\u2013379): Payee name 2.</li> <li><code>VNNMCT</code> (380\u2013383): IRS name control.</li> <li><code>VNFNAM</code> (418\u2013437): First name.</li> <li><code>VNMNAM</code> (438\u2013457): Middle name.</li> <li><code>VNLNAM</code> (458\u2013487): Business/last name.</li> <li><code>VNSUFF</code> (488\u2013491): Name suffix.</li> <li>Data Structures:</li> <li><code>ADD2</code> (30): Temporary field for address processing.</li> <li><code>CITY</code> (1\u201320): Extracted city name.</li> <li><code>CTY</code> (1\u201320): Temporary city field.</li> <li><code>STATE</code> (2): Extracted state code.</li> <li>User Data Structure (UDS):</li> <li><code>ENTAMT</code> (111\u2013118, zoned): Entered amount threshold.</li> <li><code>CURLST</code> (123): Current (<code>C</code>) or last (<code>L</code>) year indicator.</li> <li><code>TOTB</code> (201\u2013208, zoned): Total count of records written.</li> <li>External Description:</li> <li><code>AP780S</code> links to <code>APVEND</code> for matching vendor records.</li> </ul> </li> <li> <p>Extract State and City (GETSTA Subroutine):</p> </li> <li>For each vendor record (<code>L1</code> level), the program calls the <code>GETSTA</code> subroutine to parse the city and state from the vendor\u2019s address fields (<code>VNADD2</code>, <code>VNADD3</code>, or <code>VNADD4</code>).</li> <li>Logic:<ul> <li>Clears <code>STATE</code>, <code>CITY</code>, and <code>ADD2</code> fields to blanks.</li> <li>Checks address fields in reverse priority (<code>VNADD4</code>, <code>VNADD3</code>, <code>VNADD2</code>) for non-blank values, copying the first non-blank field to <code>ADD2</code>.</li> <li>If no address fields are found, skips to <code>ENDSTA</code>.</li> <li>Parses <code>ADD2</code> to extract the state:</li> <li>Reads backward from position 30 to find the first letter (A-Z), which is assumed to be the start of the state code (e.g., \"PA\").</li> <li>Extracts the state (2 characters) into <code>STATE</code>.</li> <li>Parses <code>ADD2</code> to extract the city:</li> <li>Reads backward from the state\u2019s position to find a space or comma, marking the end of the city.</li> <li>Copies characters from the start of <code>ADD2</code> to the delimiter into <code>CTY</code> (city field).</li> </ul> </li> <li> <p>Output: Populates <code>STATE</code> (2 characters) and <code>CITY</code> (20 characters) for use in the output record.</p> </li> <li> <p>Determine Payment Amount Based on CURLST:</p> </li> <li>Checks the <code>CURLST</code> field (from the user data structure <code>UDS</code>, set by <code>AP780P</code> as <code>'C'</code> or <code>'L'</code>):<ul> <li>If <code>CURLST = 'C'</code> (current year), adds <code>VNYTDP</code> (this year\u2019s year-to-date paid, positions 242-247) to <code>L1AMT1</code>.</li> <li>If <code>CURLST = 'L'</code> (last year), adds <code>VNLYDP</code> (last year\u2019s year-to-date paid, positions 248-253) to <code>L1AMT1</code>.</li> </ul> </li> <li> <p>Adds <code>VNB2AM</code> (second 1099 box amount, positions 280-285) to <code>L1AMT2</code>.</p> </li> <li> <p>Assign 1099 Box Numbers:</p> </li> <li>If <code>BOX1</code> is zero, sets it to <code>VNBOX1</code> (first 1099 box number, positions 276-277).</li> <li>If <code>BOX2</code> is zero, sets it to <code>VNBOX2</code> (second 1099 box number, positions 278-279).</li> <li> <p>This ensures the box numbers from the vendor file are used unless already set.</p> </li> <li> <p>Validate and Adjust Payment Amounts:</p> </li> <li>Compares <code>L1AMT1</code> (total payment amount) to <code>ENTAMT</code> (entered amount from <code>UDS</code>, set by <code>AP780P</code>).</li> <li> <p>If <code>L1AMT1</code> is greater than or equal to <code>ENTAMT</code> (indicator 50 on):</p> <ul> <li>If <code>BOX1</code> is zero, sets it to 7 (default IRS box for 1099-MISC nonemployee compensation).</li> <li>If <code>L1AMT2</code> (second box amount) is greater than zero and <code>BOX2</code> is non-zero:</li> <li>Subtracts <code>L1AMT2</code> from <code>L1AMT1</code> to allocate the second box amount separately.</li> <li>Increments <code>TOTB</code> (total count, positions 201-208 in <code>UDS</code>) by 1 to track valid records.</li> <li>Writes the output record to <code>AP781</code> using the <code>L1ADD</code> exception output (<code>EXCPTL1ADD</code>).</li> </ul> </li> <li> <p>Write Output Record to AP781:</p> </li> <li> <p>When a valid record is processed (indicator 50 on), the program writes a record to the <code>AP781</code> file with the following fields:</p> <ul> <li>Record Identification: <code>'A'</code> (position 1, constant).</li> <li><code>VN1099</code> (1099 code, position 2, from <code>APVEND</code>).</li> <li><code>VNVEND</code> (vendor number, positions 4-8, from <code>APVEND</code>).</li> <li><code>VNNAME</code> (vendor name, positions 9-38, from <code>APVEND</code>).</li> <li><code>VNADD1</code> (address line 1, positions 39-68, from <code>APVEND</code>).</li> <li><code>CITY</code> (city, parsed from <code>GETSTA</code>, positions 69-88).</li> <li><code>STATE</code> (state, parsed from <code>GETSTA</code>, positions 89-90).</li> <li><code>VNZIP5</code> (zip code, positions 159-163, from <code>APVEND</code>).</li> <li><code>L1AMT1</code> (adjusted payment amount, positions 94-102, 9 digits, 2 decimals).</li> <li><code>L1AMT2</code> (second box amount, positions 103-111, 9 digits, 2 decimals).</li> <li><code>BOX1</code> (first 1099 box number, positions 112-113).</li> <li><code>BOX2</code> (second 1099 box number, positions 114-115).</li> <li><code>VNID#</code> (tax ID, positions 265-275, from <code>APVEND</code>).</li> <li><code>VNSRT4</code> (sort abbreviation, positions 168-171, from <code>APVEND</code>).</li> <li><code>VNPYN1</code> (payee name 1, positions 300-339, from <code>APVEND</code>, added by JB01).</li> <li><code>VNPYN2</code> (payee name 2, positions 340-379, from <code>APVEND</code>, added by JB01).</li> <li><code>VNADD2</code> (address line 2, positions 211-240, from <code>APVEND</code>, added by JB02).</li> <li><code>VNNOVF</code> (name overflow, position 241, from <code>APVEND</code>, added by JB02).</li> <li><code>VNNMCT</code> (IRS name control, positions 242-245, from <code>APVEND</code>, added by JK01).</li> <li><code>VNFNAM</code> (first name, positions 246-265, from <code>APVEND</code>).</li> <li><code>VNMNAM</code> (middle name, positions 266-285, from <code>APVEND</code>).</li> <li><code>VNLNAM</code> (business/last name, positions 286-315, from <code>APVEND</code>).</li> <li><code>VNSUFF</code> (name suffix, positions 316-320, from <code>APVEND</code>).</li> </ul> </li> <li> <p>Repeat for Each Vendor:</p> </li> <li>The program processes each vendor record from <code>AP780S</code> and <code>APVEND</code>, using level-break logic (<code>L1</code>) to group records by vendor, ensuring one output record per vendor regardless of multiple company entries.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AP781</code> program enforces the following business rules for 1099 preprocessing: 1. Single Record per Vendor:    - Consolidates multiple vendor records (potentially across different companies, as indicated by <code>VNCO</code>) into a single record per vendor, using the vendor number (<code>VNVEND</code>) as the key, as processed by the sorted <code>AP780S</code> file.</p> <ol> <li>Payment Amount Allocation:</li> <li>Uses <code>CURLST</code> (<code>'C'</code> for current year, <code>'L'</code> for last year) to select the appropriate year-to-date payment amount (<code>VNYTDP</code> or <code>VNLYDP</code>).</li> <li>Allocates the total payment (<code>L1AMT1</code>) and second box amount (<code>L1AMT2</code>) separately if a second 1099 box (<code>VNBOX2</code>) is specified.</li> <li> <p>Subtracts <code>L1AMT2</code> from <code>L1AMT1</code> when both boxes are used to avoid double-counting.</p> </li> <li> <p>Default 1099 Box:</p> </li> <li>If the first 1099 box (<code>BOX1</code>) is zero and the payment amount meets the threshold (<code>L1AMT1 &gt;= ENTAMT</code>), sets <code>BOX1</code> to 7 (IRS box for nonemployee compensation on 1099-MISC).</li> <li> <p>Retains vendor-specified box numbers (<code>VNBOX1</code>, <code>VNBOX2</code>) when non-zero.</p> </li> <li> <p>Threshold Validation:</p> </li> <li> <p>Only writes output records if the total payment amount (<code>L1AMT1</code>) is greater than or equal to the entered amount (<code>ENTAMT</code>), ensuring only vendors meeting the IRS reporting threshold (e.g., $600 for 1099-MISC) are included.</p> </li> <li> <p>Address Parsing:</p> </li> <li>Extracts state and city from the highest-priority non-blank address field (<code>VNADD4</code>, <code>VNADD3</code>, or <code>VNADD2</code>).</li> <li>Assumes the state is a 2-character code (e.g., \"PA\") located after the zip code, and the city precedes the state, separated by a space or comma.</li> <li> <p>Handles cases where address fields are blank by skipping city/state extraction.</p> </li> <li> <p>IRS Data Inclusion:</p> </li> <li> <p>Includes IRS-specific fields like tax ID (<code>VNID#</code>), payee names (<code>VNPYN1</code>, <code>VNPYN2</code>), name overflow (<code>VNNOVF</code>), IRS name control (<code>VNNMCT</code>), and individual name components (<code>VNFNAM</code>, <code>VNMNAM</code>, <code>VNLNAM</code>, <code>VNSUFF</code>) to comply with IRS 1099 reporting requirements.</p> </li> <li> <p>Record Tracking:</p> </li> <li>Increments <code>TOTB</code> for each valid vendor record written to <code>AP781</code>, likely used for reporting or validation in subsequent steps.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files/tables: 1. APVEND:    - Primary input file (579 bytes, indexed).    - Contains vendor data including payment amounts, 1099 codes, tax IDs, and address fields. 2. AP780S:    - Secondary input file (30 bytes, 3-byte key, indexed).    - Sorted file used to identify unique vendors for consolidation. 3. AP781:    - Output file (320 bytes).    - Stores consolidated vendor data with extracted city/state, amounts, and box numbers.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AP781</code> program does not explicitly call any external programs. It is invoked by the main OCL program (<code>AP780.ocl36.txt</code>) and processes data from <code>APVEND</code> and <code>AP780S</code> to produce <code>AP781</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/AP781%20RPG36/#summary","title":"Summary","text":"<p>The <code>AP781</code> RPG/36 program preprocesses A/P vendor data by: - Consolidating vendor records from <code>APVEND</code> using <code>AP780S</code> to ensure one record per vendor. - Accumulating payment amounts (<code>VNYTDP</code> or <code>VNLYDP</code>) based on <code>CURLST</code>, splitting amounts if a second box (<code>VNB2AM</code>) exists. - Extracting <code>CITY</code> and <code>STATE</code> from address fields using the <code>GETSTA</code> subroutine. - Writing records to <code>AP781</code> only if the total amount meets the <code>ENTAMT</code> threshold, with a default box number of 7 if unspecified. - Including payee names, name overflow, and IRS name control for IRS compliance.</p> <p>The program uses <code>APVEND</code> and <code>AP780S</code> as inputs and <code>AP781</code> as output, with no external program calls, and enforces rules to ensure accurate 1099 data for downstream processing by <code>AP780</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/","title":"Summary AP780 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack, consisting of the OCL program <code>AP780.ocl36.txt</code> and the RPG/36 programs <code>AP780P.rpg36.txt</code>, <code>AP781.rpg36.txt</code>, and <code>AP780.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate IRS 1099 File for Accounts Payable:</li> <li>This use case involves creating an IRS-compliant 1099 file (e.g., <code>AP1099</code>) for vendor payments, supporting 1099-MISC, 1099-NEC, 1099-DIV, and 1099-INT forms. It consolidates vendor data, validates inputs, and produces structured records (Transmitter \"T\", Payer \"A\", Payee \"B\", End of Payer \"C\", and End of Transmission \"F\") for electronic IRS submission.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#function-requirement-document-generate-irs-1099-file","title":"Function Requirement Document: Generate IRS 1099 File","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#purpose","title":"Purpose","text":"<p>To generate an IRS-compliant 1099 file for Accounts Payable vendor payments, supporting 1099-MISC, 1099-NEC, 1099-DIV, and 1099-INT forms, using vendor data, company details, and a specified year.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: Four-digit year for 1099 reporting (e.g., 2012).</li> <li>File Name: Input vendor file name (e.g., <code>APVN2012</code>).</li> <li>Environment Flag: Indicates production (<code>G</code>) or test environment (e.g., <code>TEST</code>).</li> <li>Company Details:</li> <li>Name (30 chars), Address (30 chars), City (29 chars), State (2 chars), ZIP (9 chars).</li> <li>Tax ID (10 chars: 2-digit part1, 7-digit part2).</li> <li>Contact Name (20 chars), Contact Phone (10 chars).</li> <li>Amount Threshold: Minimum payment amount for inclusion (8-digit zoned).</li> <li>Current/Last Indicator: <code>C</code> (current year) or <code>L</code> (last year).</li> <li>Form Type: 1099 form type (e.g., <code>M</code> for MISC, <code>N</code> for NEC, <code>D</code> for DIV, <code>I</code> for INT).</li> <li>Vendor Data File (<code>APVEND</code>):</li> <li>Fields: Vendor Number (5 chars), Name (30 chars), Address Lines 1\u20134 (30 chars each), ZIP (5-digit zoned), 1099 Code (<code>D</code>, <code>I</code>, <code>M</code>, <code>N</code>), Tax ID (11 chars), Current/Last Year Paid (6-digit packed), Box Numbers (2-digit zoned), Second Box Amount (6-digit packed), Payee Names (40 chars each), Name Overflow (<code>Y</code>/<code>N</code>), IRS Name Control (4 chars), First/Middle/Last Names, Suffix.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#outputs","title":"Outputs","text":"<ul> <li>1099 File (<code>AP1099</code> or environment-specific, 750 bytes/record):</li> <li>Transmitter \"T\" Record: Company details, year, tax ID, contact info.</li> <li>Payer \"A\" Record: Form type, company details, tax ID.</li> <li>Payee \"B\" Record: Vendor data, tax ID, payment amounts, box numbers.</li> <li>End of Payer \"C\" Record: Payee count, control totals.</li> <li>End of Transmission \"F\" Record: Payer count.</li> <li>Index File (<code>AP1099I</code> or environment-specific): Indexed by vendor data keys.</li> <li>Copied File (<code>AP10&lt;Year&gt;</code> or environment-specific): Final 1099 data copy.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure year is non-zero, form type exists in <code>GSTABL</code> table, company details (name, address, tax ID) are non-blank, and indicator is <code>C</code> or <code>L</code>.</li> <li>Verify input file (<code>APVN&lt;Year&gt;</code>) exists; else, terminate with error.</li> <li>Consolidate Vendor Data:</li> <li>Read <code>APVEND</code> and sorted <code>AP780S</code> (vendor keys).</li> <li>Group by vendor number, producing one record per vendor in <code>AP781</code>.</li> <li>Extract city/state from address lines (highest non-blank: <code>VNADD4</code>, <code>VNADD3</code>, <code>VNADD2</code>).</li> <li>Accumulate payment amounts based on indicator (<code>C</code>: <code>VNYTDP</code>, <code>L</code>: <code>VNLYDP</code>).</li> <li>If second box amount (<code>VNB2AM</code>) exists, subtract from total for primary box.</li> <li>Generate 1099 Records:</li> <li>Write Transmitter \"T\" record with company details, tax ID, and sequence number.</li> <li>For each vendor group:<ul> <li>Write Payer \"A\" record with form type (<code>1</code>: DIV, <code>6</code>: INT, <code>A</code>: MISC, <code>NE</code>: NEC).</li> <li>Write Payee \"B\" record with vendor data, tax ID (EIN/SSN based on dash), and amounts.</li> <li>Accumulate control totals by form type and box number.</li> <li>Write End of Payer \"C\" record with payee count and totals.</li> </ul> </li> <li>Write End of Transmission \"F\" record with payer count.</li> <li>Build Index and Copy:</li> <li>Create index (<code>AP1099I</code>) for <code>AP1099</code> with vendor keys.</li> <li>Copy <code>AP1099</code> to <code>AP10&lt;Year&gt;</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Single Vendor Record:</li> <li>Consolidate multiple company records into one per vendor using <code>AP780S</code>.</li> <li>Amount Threshold:</li> <li>Include vendors only if total payment (<code>VNYTDP</code> or <code>VNLYDP</code>) meets <code>ENTAMT</code>.</li> <li>Amount Splitting:</li> <li>If <code>VNBOX2</code> exists, assign <code>VNB2AM</code> to second box, subtract from total for primary box.</li> <li>Example: <code>$15,000</code> total, <code>VNBOX1=7</code> (MISC), <code>VNBOX2=1</code> (Rents), <code>VNB2AM=$5,000</code> \u2192 Primary=<code>$10,000</code>, Secondary=<code>$5,000</code>.</li> <li>Default Box:</li> <li>If <code>VNBOX1=0</code> and threshold met, default to box 7 (Nonemployee Compensation).</li> <li>Form Type Mapping:</li> <li><code>VN1099</code>: <code>D</code>\u2192DIV, <code>I</code>\u2192INT, <code>M</code>\u2192MISC, <code>N</code>\u2192NEC.</li> <li>Box assignments: MISC (1=Rents, 3=Other Income, 6=Medical, 7=Nonemployee), NEC (1=Nonemployee), DIV (1=Dividends, 2=Capital Gains), INT (1=Interest).</li> <li>Name Handling:</li> <li>Use <code>VNPYN1</code>/<code>VNPYN2</code> if provided; else, use <code>VNNAME</code>.</li> <li>If <code>VNNOVF=Y</code>, use <code>VNADD1</code> as second name, shift <code>VNADD2</code> to <code>VNADD1</code>.</li> <li>Name control: Use <code>VNNMCT</code> if available, else <code>VNNAM4</code>, or blank if payee names used.</li> <li>Tax ID:</li> <li>If tax ID contains <code>-</code>, use EIN; else, use SSN.</li> <li>Vendor number as account number.</li> <li>City/State Extraction:</li> <li>Extract state (2 chars) and city from highest non-blank address line, assuming state follows ZIP and city precedes a space/comma.</li> <li>IRS Format:</li> <li>Pad records with zeros/blanks per IRS specs (e.g., <code>T</code>/<code>A</code>: 376\u2013748 blank, <code>B</code>: 663\u2013750 blank).</li> <li>Include fixed codes (e.g., <code>28Q01</code> for <code>T</code>, <code>AMER</code> for <code>A</code>, <code>I</code> for in-house software).</li> <li>Increment sequence number (<code>RECSEQ</code>) for each record.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP780%20OCL%201099%20Create%20File%20for%20IRS/Summary%20AP780%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Payment Amounts:</li> <li><code>L1AMT1 = VNYTDP</code> (if <code>CURLST=C</code>) or <code>VNLYDP</code> (if <code>L</code>) \u2013 <code>VNB2AM</code> (if <code>VNBOX2&gt;0</code>).</li> <li><code>L1AMT2 = VNB2AM</code> if second box exists.</li> <li>Control Totals:</li> <li>DIV: <code>TOTGR1</code> (Box 1), <code>TOTGR2</code> (Box 2).</li> <li>INT: <code>TOTGR1</code> (Box 1).</li> <li>MISC: <code>TOTGR1</code> (Box 1/2=1), <code>TOTGR3</code> (Box 1/2=3), <code>TOTGR6</code> (Box 1/2=6).</li> <li>NEC: <code>TOTGR1</code> (Box 1/2=1).</li> <li>Counts:</li> <li><code>COUNT</code>: Payee records per payer.</li> <li><code>TOTA</code>: Payer records.</li> <li><code>TOTB</code>: Written records meetingogels</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/","title":"AP790 OCL","text":"<p>The provided document appears to be an Operation Control Language (OCL) program snippet, typically used in IBM System/3x or AS/400 environments to control job execution, particularly for RPG (Report Program Generator) programs. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and note any tables used based on the provided snippet.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a job control language used to define how programs, such as RPG programs, are executed, including file assignments, printer settings, and conditional logic. Here\u2019s a step-by-step breakdown of the process defined in the provided OCL snippet:</p> <ol> <li>Program Identification and Purpose:</li> <li>The comment lines (<code>// * 'PRINTING 1099 FILE EDIT'</code>) indicate that this OCL program is related to printing or editing a 1099 file, likely for tax reporting purposes (e.g., IRS Form 1099).</li> <li> <p>The <code>// GSY2K</code> comment might refer to a specific system, module, or compliance indicator (e.g., Year 2000 compliance), but it\u2019s not directly actionable in the OCL.</p> </li> <li> <p>Loading the Program:</p> </li> <li> <p><code>// LOAD AP790</code>: This command loads the RPG program named <code>AP790</code>. The <code>LOAD</code> statement initiates the execution of the specified program, which is presumably an RPG program responsible for processing or printing the 1099 file.</p> </li> <li> <p>Conditional File Assignment:</p> </li> <li> <p><code>// IF ?9?/G +</code>: This is a conditional statement checking the value of a substitution variable <code>?9?</code>. In OCL, substitution variables (denoted by <code>?n?</code>) are placeholders for values passed to the job at runtime, often used to determine file names, labels, or other parameters.</p> <ul> <li>If the condition <code>?9?/G</code> is true (e.g., the variable <code>?9?</code> equals 'G'), the program executes the following file assignment:</li> <li><code>FILE NAME-AP1099,LABEL-AP1099,DISP-SHR</code>: Assigns a file named <code>AP1099</code> with the label <code>AP1099</code> and specifies shared disposition (<code>DISP-SHR</code>), meaning the file can be accessed by multiple jobs concurrently.</li> <li>If the condition is false, the program executes:</li> <li><code>FILE NAME-AP1099,LABEL-?9?AP1099,DISP-SHR</code>: Assigns the same file name <code>AP1099</code>, but the label is dynamically constructed by appending the value of <code>?9?</code> to <code>AP1099</code> (e.g., if <code>?9?</code> is <code>2023</code>, the label becomes <code>2023AP1099</code>). The disposition remains shared (<code>DISP-SHR</code>).</li> </ul> </li> <li> <p>Printer Configuration:</p> </li> <li> <p><code>// PRINTER NAME-PRINT,CPI-15</code>: This defines the printer settings for the job.</p> <ul> <li><code>NAME-PRINT</code>: Specifies the printer output queue or device named <code>PRINT</code>.</li> <li><code>CPI-15</code>: Sets the printer to 15 characters per inch, which controls the font density for the printed output, likely to ensure the 1099 forms are formatted correctly.</li> </ul> </li> <li> <p>Program Execution:</p> </li> <li><code>// RUN</code>: This command triggers the execution of the loaded program (<code>AP790</code>) with the specified file and printer configurations. The RPG program <code>AP790</code> would then process the <code>AP1099</code> file, likely performing tasks such as reading, editing, or printing 1099-related data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>AP790: This is the primary RPG program loaded and executed by the OCL script. It is responsible for the core logic of processing or printing the 1099 file. No other external programs are explicitly called in the provided OCL snippet.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>The OCL snippet does not explicitly reference any tables. In RPG programs, tables are typically defined within the RPG source code (e.g., using <code>TAB</code> definitions or arrays) rather than in the OCL. Since the snippet only covers the OCL portion and not the RPG program (<code>AP790</code>) itself, no tables are identified here.</li> <li>The file <code>AP1099</code> is referenced, but it is a data file, not a table. If <code>AP790</code> uses tables internally (e.g., for lookup or validation purposes), they would be defined in the RPG program\u2019s source code, which is not provided.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/AP790%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variable (<code>?9?</code>): The use of <code>?9?</code> suggests the OCL program is designed to be flexible, allowing the file label to vary based on runtime parameters (e.g., different years or versions of the 1099 file). The condition <code>?9?/G</code> likely checks for a specific value to determine the file label.</li> <li>File Disposition (<code>DISP-SHR</code>): The shared disposition indicates that the <code>AP1099</code> file can be accessed by other jobs, which is common in multi-user environments like AS/400.</li> <li>Limitations of the Snippet: The provided OCL is a partial job control script. The actual processing logic (e.g., calculations, validations, or report formatting) resides in the <code>AP790</code> RPG program, which is not included. To fully understand the tables or additional files used, the RPG source code would need to be analyzed.</li> <li>Environment: This OCL syntax is specific to IBM midrange systems (e.g., System/38 or AS/400). The <code>AP1099</code> file is likely a database file containing 1099 data, and <code>AP790</code> is an RPG program that processes this data for printing or editing.</li> </ul> <p>If you have access to the <code>AP790</code> RPG source code or additional OCL snippets, I can provide a more detailed analysis of the tables or external programs involved. Let me know if you\u2019d like me to search for related information or clarify any specific aspect!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/","title":"Summary AP790 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#list-of-use-cases-implemented-by-the-ap790-program","title":"List of Use Cases Implemented by the AP790 Program","text":"<p>Based on the provided OCL (<code>AP790.ocl36.txt</code>) and RPG/36 (<code>AP790.rpg36.txt</code>) programs, the primary use case implemented is:</p> <ol> <li>Generate 1099 File Edit Report:</li> <li>Description: The program processes an Accounts Payable (A/P) 1099 file (<code>AP1099</code>) to produce a printed edit report for verifying 1099 data (e.g., payee details, payment amounts, and totals) before submission to the IRS. It ensures the data is accurate and compliant with IRS 1099 reporting requirements, supporting forms such as 1099-MISC, 1099-DIV, or 1099-INT.</li> <li>Scope: The program reads structured records (Transmitter, Employer, Payee, End of Payer, State Totals, Company Final), validates key fields (e.g., TINs), accumulates payment totals, and formats a report with payee details and aggregated amounts.</li> <li>Inputs: The <code>AP1099</code> file containing 1099 data and a substitution variable (<code>?9?</code>) for dynamic file labeling.</li> <li>Outputs: A printed report listing payee details (TIN, name, address, payment amounts) and totals, formatted for verification.</li> </ol> <p>No additional use cases are evident from the provided code, as the program focuses solely on generating the edit report for the 1099 file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#function-requirement-document-generate-1099-file-edit-report","title":"Function Requirement Document: Generate 1099 File Edit Report","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#overview","title":"Overview","text":"<p>The <code>Generate_1099_File_Edit_Report</code> function processes an Accounts Payable (A/P) 1099 file to produce a printed edit report for verifying 1099 data before IRS submission. It supports IRS 1099 forms (e.g., 1099-MISC, 1099-DIV, 1099-INT) by validating and formatting payee details, payment amounts, and totals.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#inputs","title":"Inputs","text":"<ul> <li>1099 Data File (<code>AP1099</code>):</li> <li>Format: Fixed-length (750 bytes) disk file.</li> <li>Record Types:<ul> <li>Transmitter (<code>T</code>): TIN, name, address, contact details.</li> <li>Employer (<code>A</code>): Payer TIN, name, address, phone.</li> <li>Payee (<code>B</code>): Payee TIN (EIN/SSN), name, address, payment amounts (1, 3, 6, 7).</li> <li>End of Payer (<code>C</code>): Total payee count and payment amounts.</li> <li>State Totals (<code>K</code>): State-level payment totals.</li> <li>Company Final (<code>F</code>): Total count of Employer records.</li> </ul> </li> <li>File Label Parameter (<code>label_prefix</code>): String (e.g., year or identifier) to construct file label (<code>label_prefix + \"AP1099\"</code> or <code>\"AP1099\"</code>).</li> <li>Printer Settings:</li> <li>Device: <code>PRINT</code>.</li> <li>Characters Per Inch (CPI): 15.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Edit Report:</li> <li>Header:<ul> <li>Company: \"AMERICAN REFINING GROUP\".</li> <li>Title: \"EDIT OF A/P 1099 FILE\".</li> <li>Program: \"AP790\".</li> <li>Page number and date (MM/DD/YY).</li> <li>Column headings: Record #, Type, Abbreviation, SSN/EIN, Amount 1, Amount 6, Amount 3, Name, Address, City, State, ZIP.</li> </ul> </li> <li>Detail Lines (Payee records):<ul> <li>Record number, TIN type (EIN/SSN), name control, formatted TIN (XX-XXXXXXX for EIN, XXX-XX-XXXX for SSN), payment amounts (1, 3, 6, 7), payee name, address, city, state, ZIP.</li> </ul> </li> <li>Totals (End of Payer records):<ul> <li>Payee count and total payment amounts (1, 3, 6, 7).</li> </ul> </li> <li>Format: 164-character lines, 15 CPI.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Set record counter (<code>REC#</code>) to 0.</li> <li>Set payee counter (<code>COUNT</code>) and payment totals (<code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>) to 0.</li> <li>Assign File:</li> <li>If <code>label_prefix = \"G\"</code>, use file label <code>\"AP1099\"</code>.</li> <li>Else, use file label <code>label_prefix + \"AP1099\"</code>.</li> <li>Open file in shared mode (<code>DISP-SHR</code>).</li> <li>Read 1099 File:</li> <li>Sequentially read records from <code>AP1099</code>.</li> <li>Identify record type using <code>A1REC</code> (position 1): <code>T</code>, <code>A</code>, <code>B</code>, <code>C</code>, <code>K</code>, <code>F</code>.</li> <li>Process Payee Records (<code>A1REC = 'B'</code>):</li> <li>Increment <code>REC#</code> and <code>COUNT</code>.</li> <li>If deletion flag (<code>A1DEL</code>) is <code>'D'</code>, skip record.</li> <li>Validate TIN type (<code>A1TTIN</code>): <code>'1'</code> (EIN) or <code>'2'</code> (SSN).</li> <li>Accumulate payment amounts:<ul> <li><code>TAMT1 += A1PAY1</code> (Payment Amount 1).</li> <li><code>TAMT3 += A1PAY3</code> (Payment Amount 3).</li> <li><code>TAMT6 += A1PAY6</code> (Payment Amount 6).</li> <li><code>TAMT7 += A1PAY7</code> (Payment Amount 7).</li> </ul> </li> <li>Output payee details to report (if not deleted):<ul> <li>Record number, TIN type, name control, formatted TIN, payment amounts, name, address, city, state, ZIP.</li> </ul> </li> <li>Process End of Payer Records (<code>A1REC = 'C'</code>):</li> <li>Output totals: <code>COUNT</code>, <code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>.</li> <li>Process Other Records:</li> <li>Read but do not process Transmitter (<code>T</code>), Employer (<code>A</code>), State Totals (<code>K</code>), or Company Final (<code>F</code>) records for calculations.</li> <li>Include relevant fields (e.g., counts, totals) in report if specified.</li> <li>Generate Report:</li> <li>Print header at page start.</li> <li>Print detail lines for each valid Payee record.</li> <li>Print totals for End of Payer records.</li> <li>Format output at 15 CPI to printer device <code>PRINT</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>IRS Compliance:</li> <li>Process 1099 file per IRS specifications (e.g., 1099-MISC, 1099-DIV, 1099-INT).</li> <li>Validate TINs: EIN (<code>'1'</code>, formatted as <code>XX-XXXXXXX</code>) or SSN (<code>'2'</code>, formatted as <code>XXX-XX-XXXX</code>).</li> <li>Include required fields (e.g., payment amounts, payee details, state withholding).</li> <li>Deletion Handling:</li> <li>Skip records with <code>A1DEL = 'D'</code>.</li> <li>Payment Accumulation:</li> <li>Sum payment amounts (1, 3, 6, 7) for Payee records into <code>TAMT1</code>, <code>TAMT3</code>, <code>TAMT6</code>, <code>TAMT7</code>.</li> <li>Report totals for verification against End of Payer records.</li> <li>Report Formatting:</li> <li>Ensure payee details (name, address, TIN, payments) are printed clearly for manual review.</li> <li>Suppress leading zeros in counts and format monetary amounts appropriately.</li> <li>File Flexibility:</li> <li>Support dynamic file labeling based on <code>label_prefix</code> for different 1099 file versions (e.g., by year).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Record Counter (<code>REC#</code>): Incremented by 1 for each Payee record processed (<code>REC# += 1</code>).</li> <li>Payee Counter (<code>COUNT</code>): Incremented by 1 for each non-deleted Payee record (<code>COUNT += 1</code>).</li> <li>Payment Totals:</li> <li><code>TAMT1 += A1PAY1</code> (sum of Payment Amount 1).</li> <li><code>TAMT3 += A1PAY3</code> (sum of Payment Amount 3).</li> <li><code>TAMT6 += A1PAY6</code> (sum of Payment Amount 6).</li> <li><code>TAMT7 += A1PAY7</code> (sum of Payment Amount 7).</li> <li>TIN Formatting:</li> <li>If <code>A1TTIN = '1'</code>: Format <code>A1TIN</code> as <code>XX-XXXXXXX</code> (using <code>A1ID21</code>, <code>A1ID22</code>).</li> <li>If <code>A1TTIN = '2'</code>: Format <code>A1TIN</code> as <code>XXX-XX-XXXX</code> (using <code>A1ID11</code>, <code>A1ID12</code>, <code>A1ID13</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The function processes a single 1099 file at a time.</li> <li>Only payment amounts 1, 3, 6, and 7 are relevant for the report (others ignored).</li> <li>The printer is pre-configured and available as <code>PRINT</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP790%20OCL%201099%20Print%20File/Summary%20AP790%20OCL/#constraints","title":"Constraints","text":"<ul> <li>File format must adhere to IRS 1099 specifications (750-byte records).</li> <li>Program runs on IBM System/36 with RPG/36 and OCL support.</li> <li>No external programs called; all processing is self-contained.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/","title":"AP791 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP791.ocl36.txt</code>, used in IBM AS/400 or System/36 environments to handle operations related to printing 1099 forms. Below is an explanation of the process steps, the external programs called, and the tables/files used in the program.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#process-steps-of-the-ap791-ocl-program","title":"Process Steps of the AP791 OCL Program","text":"<ol> <li>Prompt for the Year:</li> <li>The program starts by prompting the user to input a four-digit year for the 1099 forms. This is indicated by the comment:      <pre><code>// * 'WHAT YEAR ARE THESE 1099''S FOR?  PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'\n</code></pre></li> <li> <p>The <code>LOCAL OFFSET-100,DATA-'?10R?'</code> statement suggests that the program reserves a local variable at offset 100 to store the user-entered year, likely as a 4-character input (e.g., \"2025\").</p> </li> <li> <p>Evaluate Parameter:</p> </li> <li> <p>The statement <code>EVALUATE P13='?9?P1099?L'102,2'?</code> evaluates a parameter (<code>P13</code>) to construct a file or label name dynamically. The <code>?9?</code> is a placeholder for a library or prefix, and <code>P1099</code> combined with <code>?L'102,2'?</code> likely incorporates the last two digits of the entered year (e.g., \"25\" for 2025) to form a specific file name or label (e.g., <code>P109925</code>).</p> </li> <li> <p>Clear Physical File:</p> </li> <li> <p>The <code>CLRPFM FILE(?9?PATAX)</code> command clears the physical file <code>PATAX</code> in the library specified by <code>?9?</code>. This ensures that the file is empty before new data is loaded or processed, likely to store 1099-related data.</p> </li> <li> <p>Delete File (Conditional):</p> </li> <li> <p>The commented-out <code>DLTF FILE(?13?)</code> and the conditional <code>IF DATAF1-?13? DLTF FILE(?13?)</code> suggest that the program checks if a file (referenced by <code>?13?</code>, the evaluated file name from step 2) exists. If it does, the file is deleted (<code>DLTF</code>). This step ensures that any existing file with the same name is removed to avoid conflicts when creating a new file.</p> </li> <li> <p>GSY2K Execution:</p> </li> <li> <p>The <code>GSY2K</code> command calls an external program or procedure, likely a system utility or a custom program to handle year 2000 compliance or date-related processing for the 1099 forms. This could involve formatting or validating the year entered by the user.</p> </li> <li> <p>Load and Run AP791:</p> </li> <li>The <code>LOAD AP791</code> statement loads the main program (likely an RPG program named <code>AP791</code>) into memory for execution.</li> <li> <p>The <code>RUN</code> command executes the loaded <code>AP791</code> program.</p> </li> <li> <p>File Definitions:</p> </li> <li>The program specifies two files:<ul> <li><code>FILE NAME-IRSTAX,LABEL-IRSTAX,DISP-SHR</code>: Opens the <code>IRSTAX</code> file (likely a master file containing tax-related data) in shared mode (<code>DISP-SHR</code>), allowing multiple processes to access it.</li> <li><code>FILE NAME-PA1099,LABEL-?9?PATAX,DISP-SHR</code>: Opens the <code>PATAX</code> file in the library <code>?9?</code> (with the label <code>PATAX</code>) in shared mode. This file is likely used to store processed 1099 data.</li> </ul> </li> <li> <p>The commented-out line <code>** FILE NAME-IRSTAX,LABEL-IRSTAX,DISP-SHR</code> suggests a redundant or alternative definition for the <code>IRSTAX</code> file, possibly for documentation or historical purposes.</p> </li> <li> <p>Printer Configuration:</p> </li> <li> <p>The <code>PRINTER NAME-PRINT,CPI-15</code> statement configures the printer output for the program, specifying a printer named <code>PRINT</code> with a character-per-inch (CPI) setting of 15, suitable for condensed printing of 1099 forms.</p> </li> <li> <p>Copy File:</p> </li> <li>The <code>CPYF FROMFILE(QS36F/?9?PATAX) TOFILE(QS36F/?13?) CRTFILE(*YES)</code> command copies data from the <code>PATAX</code> file (in library <code>QS36F/?9?</code>) to a target file specified by <code>?13?</code> (the dynamically evaluated file name, e.g., <code>P109925</code>). The <code>CRTFILE(*YES)</code> parameter indicates that the target file will be created if it does not already exist.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#summary-of-process-flow","title":"Summary of Process Flow","text":"<p>The program: - Prompts the user for the 1099 year. - Constructs a dynamic file name based on the year. - Clears the <code>PATAX</code> file to prepare for new data. - Optionally deletes an existing file with the dynamically generated name. - Calls the <code>GSY2K</code> utility for year-related processing. - Loads and runs the <code>AP791</code> program, which processes data using the <code>IRSTAX</code> and <code>PATAX</code> files. - Configures the printer for output. - Copies the processed data from <code>PATAX</code> to a new file (e.g., <code>P109925</code>) for storage or further use.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#external-programs-called","title":"External Programs Called","text":"<ol> <li>GSY2K: A utility or program likely used for year 2000 compliance or date processing.</li> <li>AP791: The main RPG program loaded and executed to process the 1099 data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>IRSTAX:</li> <li>Label: <code>IRSTAX</code></li> <li>Description: Likely a master file containing tax-related data (e.g., vendor or tax information for 1099 forms).</li> <li>Access: Shared mode (<code>DISP-SHR</code>).</li> <li>PATAX:</li> <li>Label: <code>?9?PATAX</code> (in library specified by <code>?9?</code>).</li> <li>Description: A file used to store processed 1099 data, cleared before processing.</li> <li>Access: Shared mode (<code>DISP-SHR</code>).</li> <li>Dynamic File (e.g., P109925):</li> <li>Label: <code>?13?</code> (e.g., <code>P109925</code>, based on the evaluated year).</li> <li>Description: A dynamically named file created to store the output of the <code>PATAX</code> file after processing.</li> <li>Access: Created via <code>CPYF</code> with <code>CRTFILE(*YES)</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20OCL/#notes","title":"Notes","text":"<ul> <li>The placeholders <code>?9?</code> and <code>?13?</code> are substituted at runtime, typically representing a library name and a dynamically constructed file name, respectively.</li> <li>The program assumes an AS/400 or System/36 environment, where OCL is used to control job execution and file operations.</li> <li>The <code>AP791</code> RPG program likely contains the core logic for processing 1099 data, while the OCL script handles setup, file management, and output configuration.</li> </ul> <p>If you need further clarification or analysis (e.g., the logic inside <code>AP791</code> or specific file structures), please provide additional details or related files!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/","title":"AP791 RPG36","text":"<p>The provided document, <code>AP791.rpg36.txt</code>, is an RPG/36 program (used in IBM System/36 or AS/400 environments) called from the OCL program <code>AP791.ocl36.txt</code>. This program processes and prints a 1099 file for IRS reporting, handling data from the <code>IRSTAX</code> file, outputting to the <code>PA1099</code> file, and generating a printed report. Below, I\u2019ll explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#process-steps-of-the-ap791-rpg-program","title":"Process Steps of the AP791 RPG Program","text":"<p>The RPG program follows a structured flow to read, process, and output 1099-related data. Here\u2019s a breakdown of the process steps based on the RPG/36 code:</p> <ol> <li>File Definitions (Lines 0005-0006):</li> <li>Input File (<code>IRSTAX</code>): Defined as a primary input file (<code>IP</code>) with a record length of 750 bytes. It contains 1099 data, including transmitter \"T\" records and payee \"B\" records. Multiple commented-out definitions suggest possible variations (e.g., <code>IRSTAXSOIS</code> or a 864-byte version), but only the 750-byte <code>IRSTAX</code> is active.</li> <li>Output File (<code>PA1099</code>): Defined as an output file (<code>O</code>) with a record length of 875 bytes, used to store processed 1099 data.</li> <li> <p>Printer File (<code>PRINT</code>): Defined as a printer output file (<code>O</code>) with a record length of 164 bytes, used to generate a formatted 1099 report.</p> </li> <li> <p>Input Specifications (Lines 0007-0122):</p> </li> <li>The program reads records from <code>IRSTAX</code> and identifies them by a record type (<code>A1REC</code>) at position 1:<ul> <li>Transmitter \"T\" Record (Line 0007, <code>NS 01</code>): Identified by <code>A1REC = 'T'</code>, processed differently from payee records.</li> <li>Payee \"B\" Record (Line 0007, <code>NS 02</code>): Default record type for payee data, processed for 1099 reporting.</li> </ul> </li> <li> <p>Fields are mapped from the <code>IRSTAX</code> file, including:</p> <ul> <li>Payment year (<code>A1YR</code>, positions 2-5)</li> <li>Taxpayer ID number (<code>A1TIN#</code>, positions 12-20)</li> <li>Type of TIN (<code>A1TTIN</code>, position 11, <code>1</code> for EIN, <code>2</code> for SSN)</li> <li>Payment amounts (<code>A1PAY1</code> to <code>A1PAYC</code>, positions 55-198, for various payment types)</li> <li>Payee details (name, address, city, state, zip, etc.)</li> <li>Tax withholding (<code>A1SITW</code> for state, <code>A1LITW</code> for local)</li> <li>Other indicators (e.g., <code>A1FCI</code> for foreign country, <code>A1DSI</code> for direct sales).</li> </ul> </li> <li> <p>Calculation Specifications (Lines 0194-0206):</p> </li> <li>Record Processing:<ul> <li>For \"T\" records (<code>NS 01</code>):</li> <li>The program skips processing and jumps to the <code>END</code> tag (Line 0206), bypassing payee calculations.</li> <li>For \"B\" records (<code>NS 02</code>):</li> <li>Increments a record counter (<code>REC#</code>) and a count (<code>COUNT</code>) for tracking (Line 0194, 0199).</li> <li>Accumulates non-zero payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) into totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>) (Lines 0199-0200).</li> <li>Checks the TIN type (<code>A1TTIN</code> = <code>1</code> for EIN or <code>2</code> for SSN) to set indicators <code>21</code> or <code>22</code> (Lines 0203-0204).</li> <li>Writes the processed record to the <code>PA1099</code> file via the <code>IN</code> exception output (Line 0205).</li> </ul> </li> <li> <p>Commented-Out Logic:</p> <ul> <li>Some conditional checks (e.g., <code>A1PYES IFNE 'PA'</code>) and additional accumulations (<code>NPAY1</code>, <code>NPAY2</code>, <code>NPAY7</code>) are commented out, suggesting they were used in prior versions or for specific cases (e.g., filtering by state or additional totals).</li> </ul> </li> <li> <p>Output Specifications (Lines 0207-0251):</p> </li> <li>Printer Output (<code>PRINT</code>):<ul> <li>Header Records (Lines 0207-0231):</li> <li>Prints headers for the report, including:<ul> <li>Company name (\u201cAMERICAN REFINING GROUP, INC\u201d).</li> <li>Program name (\u201cAP791\u201d) and report title (\u201cA/P 1099 FILE\u201d).</li> <li>Page number (<code>PAGE</code>) and date (<code>UDATE</code>).</li> <li>Column headers for record number, TIN type, name control, SSN/EIN, payment amounts, name, address, city, state, and zip.</li> </ul> </li> <li>Headers are printed at the start of the report (<code>1P</code>) or on overflow (<code>OF</code>).</li> <li>Detail Lines (Lines 0232-0251, <code>E IN</code>):</li> <li>For each payee record, prints:<ul> <li>Record number (<code>REC#</code>).</li> <li>TIN type (<code>A1TTIN</code>) and name control (<code>A1NCTL</code>).</li> <li>Formatted TIN (<code>A1ID21</code>, <code>A1ID22</code>, etc., with hyphens for readability).</li> <li>Payment amounts (<code>A1PAY1M</code>, <code>A1PAY2M</code>, <code>A1PAY3M</code>).</li> <li>Payee details (name, address, city, state, zip).</li> </ul> </li> <li>Total Lines (Line 0232, <code>E TOTL</code>):</li> <li>Prints accumulated totals for <code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY7</code> at the end of the report.</li> </ul> </li> <li> <p>File Output (<code>PA1099</code>) (Lines 0232-0251, <code>EADD IN</code>):</p> <ul> <li>Writes records to the <code>PA1099</code> file with:</li> <li>Hard-coded values (e.g., <code>222318612</code> for payer TIN, <code>001</code> for sequence).</li> <li>Payment year (<code>A1YR</code>), TIN (<code>A1TIN#</code>), vendor number (<code>A1VEND</code>), and payee details.</li> <li>Payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>, <code>A1SITW</code>).</li> <li>Company details (\u201cAMERICAN REFINING GROUP, INC\u201d, address, etc.).</li> <li>Combined payment total (<code>DPAY</code>).</li> </ul> </li> <li> <p>End of Program:</p> </li> <li>After processing all records, the program writes final totals to the printer (<code>EXCPTTOTL</code>) and terminates at the <code>END</code> tag (Line 0206).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for 1099 processing: 1. Record Type Handling:    - Skips \u201cT\u201d (Transmitter) records, as they are not relevant for payee reporting.    - Processes \u201cB\u201d (Payee) records for 1099 data.</p> <ol> <li>Payment Accumulation:</li> <li>Only non-zero payment amounts (<code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) are added to running totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>).</li> <li> <p>These payments likely correspond to specific 1099 categories (e.g., non-employee compensation, rents, royalties).</p> </li> <li> <p>TIN Formatting:</p> </li> <li> <p>TINs are identified as EIN (<code>A1TTIN = '1'</code>) or SSN (<code>A1TTIN = '2'</code>) and formatted accordingly (e.g., <code>XXX-XXXXXX</code> for EIN, <code>XXX-XX-XXXX</code> for SSN) for the printed report.</p> </li> <li> <p>Payee Filtering:</p> </li> <li> <p>Commented-out logic suggests a prior rule to filter records where the state (<code>A1PYES</code>) is not \u201cPA\u201d (Pennsylvania), but this is not active in the current version.</p> </li> <li> <p>Output Formatting:</p> </li> <li>The <code>PA1099</code> file includes fixed payer details (e.g., TIN <code>222318612</code>, address \u201c77 NORTH KENDALL AVENUE, BRADFORD, PA 16701\u201d) and payee-specific data.</li> <li> <p>The printed report formats TINs with hyphens for readability and aligns payment amounts and payee details in columns.</p> </li> <li> <p>IRS Compliance:</p> </li> <li>The program structures data in the <code>PA1099</code> file to meet IRS 1099 reporting requirements, including payment amounts, withholding, and payee information (name, address, TIN).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>IRSTAX:</li> <li>Type: Input (<code>IP</code>)</li> <li>Record Length: 750 bytes</li> <li> <p>Description: Primary input file containing 1099 data, including transmitter (\u201cT\u201d) and payee (\u201cB\u201d) records. Fields include payment year, TIN, payment amounts, and payee details.</p> </li> <li> <p>PA1099:</p> </li> <li>Type: Output (<code>O</code>)</li> <li>Record Length: 875 bytes</li> <li> <p>Description: Output file storing processed 1099 data for IRS submission, including payer and payee details, payment amounts, and withholding.</p> </li> <li> <p>PRINT:</p> </li> <li>Type: Printer Output (<code>O</code>)</li> <li>Record Length: 164 bytes</li> <li>Description: Printer file for generating a formatted 1099 report with headers, detail lines, and totals.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None: The RPG program does not explicitly call any external programs. The <code>GSY2K</code> program referenced in the OCL program is executed before <code>AP791</code> is loaded, so it is not called from within the RPG code.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/AP791%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Commented-Out Code: The presence of commented-out definitions (e.g., <code>IRSTAXSOIS</code>, alternate <code>IRSTAX</code> lengths) and logic (e.g., state filtering, additional totals) suggests the program was adapted over time or supports multiple configurations. These could be re-enabled for specific requirements.</li> <li>TIN Formatting: The program formats TINs differently for EIN and SSN, ensuring compliance with IRS reporting standards.</li> <li>Hard-Coded Values: The <code>PA1099</code> output includes fixed payer details (e.g., TIN <code>222318612</code>, address), indicating the program is tailored for \u201cAMERICAN REFINING GROUP, INC.\u201d</li> <li>Environment: The program is designed for the System/36 or AS/400, using RPG/36 syntax and OCL for job control.</li> </ul> <p>If you need further details (e.g., specific field mappings, IRS 1099 form alignment, or analysis of commented-out logic), please let me know!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/","title":"Summary AP791 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#list-of-use-cases-implemented-by-the-ap791-program","title":"List of Use Cases Implemented by the AP791 Program","text":"<p>The <code>AP791</code> program, driven by the OCL script (<code>AP791.ocl36.txt</code>) and the RPG program (<code>AP791.rpg36.txt</code>), implements a single primary use case:</p> <ol> <li>Generate and Print IRS 1099 Forms:</li> <li>Description: The program processes tax-related data to produce 1099 forms for IRS submission and a printed report for record-keeping. It reads input data from the <code>IRSTAX</code> file, processes payee records, accumulates payment totals, and outputs formatted data to the <code>PA1099</code> file and a printer report.</li> <li>Inputs: A four-digit year (provided via user input in the OCL script) and tax data from the <code>IRSTAX</code> file.</li> <li>Outputs: A formatted <code>PA1099</code> file for IRS submission and a printed report summarizing 1099 data.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#function-requirement-document-generate-1099-forms","title":"Function Requirement Document: Generate 1099 Forms","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#overview","title":"Overview","text":"<p>The <code>Generate_1099_Forms</code> function processes tax data to produce IRS-compliant 1099 forms and a printed summary report for payees. It takes a four-digit year and a tax data file as inputs, generates a formatted output file for IRS submission, and produces a printed report with payment details.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Year: A four-digit year (e.g., \"2025\") for the 1099 forms.</li> <li>Input File (<code>IRSTAX</code>): A file containing tax records (750 bytes per record), including:</li> <li>Record type (<code>T</code> for transmitter, <code>B</code> for payee).</li> <li>Payment year, taxpayer ID number (TIN), payment amounts, payee details (name, address, city, state, zip), and withholding amounts.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Output File (<code>PA1099</code>): A file (875 bytes per record) containing IRS-compliant 1099 data for payees, including payer details, payee details, payment amounts, and withholding.</li> <li>Printed Report (<code>PRINT</code>): A formatted report (164 bytes per line) with headers, payee details, payment amounts, and totals.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Year Input:</li> <li>Accept a four-digit year to define the reporting period.</li> <li> <p>Construct a dynamic output file name (e.g., <code>P109925</code> for 2025).</p> </li> <li> <p>Clear and Prepare Files:</p> </li> <li>Clear the <code>PATAX</code> file to store processed data.</li> <li>Delete any existing file with the dynamic name (e.g., <code>P109925</code>) to avoid conflicts.</li> <li> <p>Create a new file with the dynamic name for output.</p> </li> <li> <p>Process Tax Records:</p> </li> <li>Read records from the <code>IRSTAX</code> file.</li> <li>Skip transmitter (<code>T</code>) records.</li> <li> <p>For payee (<code>B</code>) records:</p> <ul> <li>Extract TIN (EIN or SSN), payment amounts (e.g., non-employee compensation, rents), payee details, and withholding.</li> <li>Accumulate non-zero payment amounts into category totals (e.g., <code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and a combined total (<code>DPAY</code>).</li> </ul> </li> <li> <p>Generate Output File:</p> </li> <li> <p>Write payee records to the <code>PA1099</code> file, including:</p> <ul> <li>Fixed payer details (TIN: <code>222318612</code>, Name: \"AMERICAN REFINING GROUP, INC.\", Address: \"77 NORTH KENDALL AVENUE, BRADFORD, PA 16701\").</li> <li>Payee details (TIN, name, address, city, state, zip).</li> <li>Payment amounts and withholding (state and local).</li> <li>Combined payment total (<code>DPAY</code>).</li> </ul> </li> <li> <p>Generate Printed Report:</p> </li> <li>Print a header with company name, program name (<code>AP791</code>), report title, page number, and date.</li> <li>For each payee record, print:<ul> <li>Record number, TIN type (EIN/SSN), name control, formatted TIN, payment amounts, name, address, city, state, and zip.</li> </ul> </li> <li> <p>Print totals for payment categories at the end.</p> </li> <li> <p>Copy Output File:</p> </li> <li>Copy the <code>PATAX</code> file to the dynamically named file (e.g., <code>P109925</code>) for storage or submission.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Record Processing:</li> <li>Process only payee (<code>B</code>) records; skip transmitter (<code>T</code>) records.</li> <li> <p>Include only non-zero payment amounts in totals.</p> </li> <li> <p>TIN Handling:</p> </li> <li>Identify TIN as EIN (<code>A1TTIN = '1'</code>) or SSN (<code>A1TTIN = '2'</code>).</li> <li> <p>Format TINs for printing (e.g., <code>XXX-XXXXXX</code> for EIN, <code>XXX-XX-XXXX</code> for SSN).</p> </li> <li> <p>Payment Categories:</p> </li> <li> <p>Accumulate payments for specific 1099 categories (e.g., <code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, <code>A1PAY7</code>) and compute a combined total (<code>DPAY</code>).</p> </li> <li> <p>IRS Compliance:</p> </li> <li>Include mandatory fields in <code>PA1099</code> (payer/payee TIN, payment amounts, withholding, address).</li> <li> <p>Use fixed payer details for \"AMERICAN REFINING GROUP, INC.\"</p> </li> <li> <p>Report Formatting:</p> </li> <li>Align printed data in columns with headers for readability.</li> <li>Include running totals for payment categories in the report.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Payment Totals:</li> <li>For each payee record, if <code>A1PAY1</code>, <code>A1PAY2</code>, <code>A1PAY3</code>, or <code>A1PAY7</code> is non-zero, add to respective totals (<code>TPAY1</code>, <code>TPAY2</code>, <code>TPAY3</code>, <code>TPAY7</code>) and combined total (<code>DPAY</code>).</li> <li> <p>Example: <code>TPAY1 += A1PAY1</code>, <code>DPAY += A1PAY1 + A1PAY2 + A1PAY3 + A1PAY7</code>.</p> </li> <li> <p>Record Count:</p> </li> <li>Increment <code>REC#</code> and <code>COUNT</code> for each processed payee record.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The input file (<code>IRSTAX</code>) is pre-populated with valid 1099 data.</li> <li>The printer is configured for 15 CPI (characters per inch) output.</li> <li>The program is executed in an IBM System/36 or AS/400 environment.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP791%20OCL%201099%20Create%20PA%20Etides%20Table/Summary%20AP791%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li>Input: <code>IRSTAX</code> (750 bytes).</li> <li>Output: <code>PA1099</code> (875 bytes), <code>PRINT</code> (164 bytes).</li> <li>Temporary: <code>PATAX</code> (cleared and used for processing).</li> <li>External Program: <code>GSY2K</code> (called by OCL for year-related processing).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/","title":"AP795 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script, typically used in IBM midrange systems like the AS/400 (now IBM i). This script, named <code>AP795.ocl36.txt</code>, is designed to convert 1099 information as required by government regulations, preparing the <code>IRSTAX</code> file for download to a PC. Below, I\u2019ll explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script performs a series of conditional checks and operations to manage the creation or replacement of the <code>IRSTAX</code> file, potentially in a test or production environment. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Setup and Comments:</li> <li>The script begins with comments (<code>// *</code>) explaining its purpose: converting 1099 information and preparing the <code>IRSTAX</code> file for download to a PC.</li> <li> <p>A specific comment indicates that in a test environment, the file is named <code>?9?IRSTAX</code> (where <code>?9?</code> is a placeholder for a prefix, likely a library or environment identifier, such as <code>TEST</code> or <code>PROD</code>).</p> </li> <li> <p>Environment Check and Pause:</p> </li> <li>The script checks if the environment variable <code>?9?</code> is set to <code>/G</code> (likely indicating a specific environment or mode, such as production or test).</li> <li> <p>A <code>PAUSE</code> statement is executed, prompting the user to interact with the system, possibly to confirm the operation or review the setup before proceeding.</p> </li> <li> <p>Check for Existing <code>IRSTAX</code> File:</p> </li> <li>The script checks if the <code>IRSTAX</code> file exists in the <code>DATAF1</code> library:<ul> <li>If <code>?9?</code> is <code>/G</code> and <code>DATAF1-IRSTAX</code> exists, it displays a message: <code>'IRSTAX ALREADY EXISTS. DO YOU WANT TO DELETE IT'</code>.</li> <li>If <code>?9?</code> is not <code>/G</code> and <code>DATAF1-?9?IRSTAX</code> exists, it displays the same message but for the prefixed file (e.g., <code>TESTIRSTAX</code>).</li> </ul> </li> <li>Further messages ask the user if they want to continue (<code>'AND CONTINUE? IF NO, PRESS \"SYS RQ\" AND TAKE OPTION 3'</code>), suggesting a manual intervention option (e.g., pressing the System Request key to abort or choose an alternative action).</li> <li> <p>If the file exists, another <code>PAUSE</code> statement halts execution, likely to allow the user to confirm whether to proceed with deletion.</p> </li> <li> <p>Delete Existing <code>IRSTAX</code> File:</p> </li> <li>If the <code>IRSTAX</code> file exists:<ul> <li>For <code>?9?=/G</code>, the script deletes <code>IRSTAX</code> from the <code>DATAF1</code> library using <code>DELETE IRSTAX,F1</code>.</li> <li>For <code>?9?!=/G</code>, the script deletes the prefixed file (e.g., <code>?9?IRSTAX</code>) using <code>DELETE ?9?IRSTAX,F1</code>.</li> </ul> </li> <li> <p>This step ensures that any existing <code>IRSTAX</code> file is removed before creating a new one, avoiding conflicts or data duplication.</p> </li> <li> <p>Copy Data to Create New <code>IRSTAX</code> File:</p> </li> <li>The script uses the <code>COPYDATA</code> command to create a new <code>IRSTAX</code> file by copying data from the <code>AP1099</code> file (or <code>?9?AP1099</code> in a test environment):<ul> <li>For <code>?9?=/G</code>, it executes: <code>COPYDATA AP1099,,IRSTAX,,,,,,,750,NE,'D'</code>.</li> <li>For <code>?9?!=/G</code>, it executes: <code>COPYDATA ?9?AP1099,,?9?IRSTAX,,,,,,,750,NE,'D'</code>.</li> </ul> </li> <li> <p>Parameters in the <code>COPYDATA</code> command:</p> <ul> <li>Source file: <code>AP1099</code> or <code>?9?AP1099</code> (the 1099 data source).</li> <li>Target file: <code>IRSTAX</code> or <code>?9?IRSTAX</code> (the output file).</li> <li><code>750</code>: Likely specifies the record length or a processing parameter (common in IBM i for file creation).</li> <li><code>NE</code>: Indicates \"No Error\" handling, meaning the operation will not stop on certain errors.</li> <li><code>'D'</code>: Specifies a disposition or mode, possibly indicating a direct copy or a specific data format.</li> </ul> </li> <li> <p>Environment Handling:</p> </li> <li>The script uses conditional logic (<code>IF ?9?/G</code>) to handle different environments (e.g., production vs. test). The <code>?9?</code> variable allows the script to dynamically adjust file names (e.g., <code>TESTIRSTAX</code> vs. <code>IRSTAX</code>) based on the environment.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external program or command: - COPYDATA: This is an IBM i system command used to copy data from one file to another, with options for formatting, error handling, and record length specification. It is used to create the <code>IRSTAX</code> file from <code>AP1099</code>.</p> <p>No other external programs (e.g., RPG programs) are explicitly called in the script. The <code>GSY2K</code> reference appears to be a label or comment, possibly indicating a system or module context, but it is not a program call.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script interacts with the following files (referred to as \"tables\" in some contexts, though they are physical files in IBM i terminology): 1. AP1099 (or <code>?9?AP1099</code>):    - The source file containing 1099 data.    - In a test environment, it may be prefixed (e.g., <code>TESTAP1099</code>).    - Located in an unspecified library (assumed to be accessible in the job\u2019s library list). 2. IRSTAX (or <code>?9?IRSTAX</code>):    - The target file created or replaced by the script, containing the converted 1099 data formatted for government requirements.    - Located in the <code>DATAF1</code> library (as indicated by <code>DATAF1-IRSTAX</code>).    - In a test environment, it may be prefixed (e.g., <code>TESTIRSTAX</code>).</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/AP795%20OCL/#summary","title":"Summary","text":"<p>The OCL program <code>AP795.ocl36.txt</code> automates the process of preparing the <code>IRSTAX</code> file for 1099 reporting by: 1. Checking the environment and pausing for user confirmation. 2. Verifying if the <code>IRSTAX</code> file exists and prompting the user to delete it if necessary. 3. Deleting the existing <code>IRSTAX</code> file (if present). 4. Copying data from <code>AP1099</code> to create a new <code>IRSTAX</code> file, formatted for government requirements.</p> <p>External Programs Called: - <code>COPYDATA</code> (IBM i system command).</p> <p>Tables Used: - <code>AP1099</code> (or <code>?9?AP1099</code>): Source 1099 data file. - <code>IRSTAX</code> (or <code>?9?IRSTAX</code>): Target file in the <code>DATAF1</code> library.</p> <p>The script is designed to handle both production and test environments, using the <code>?9?</code> variable to adjust file names dynamically. It includes user interaction points (via <code>PAUSE</code>) to ensure manual oversight before critical operations like file deletion.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/","title":"Summary AP795 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#list-of-use-cases-implemented-by-the-ocl-program-ap795ocl36txt","title":"List of Use Cases Implemented by the OCL Program (AP795.ocl36.txt)","text":"<p>The OCL program <code>AP795.ocl36.txt</code> implements a single primary use case:</p> <ol> <li>Preparation of IRSTAX File for 1099 Reporting:</li> <li>The program converts 1099 data from the <code>AP1099</code> file into the <code>IRSTAX</code> file, formatted as required by government regulations, for download to a PC. It supports both production and test environments by handling file names dynamically (using the <code>?9?</code> variable) and includes checks to avoid overwriting existing files without user confirmation.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#function-requirement-document-irstax-file-preparation","title":"Function Requirement Document: IRSTAX File Preparation","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#purpose","title":"Purpose","text":"<p>To create a function that converts 1099 data from the <code>AP1099</code> file into the <code>IRSTAX</code> file, formatted for government reporting, suitable for download to a PC. The function operates in both production and test environments, ensuring no data conflicts and adhering to business rules.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Source File: <code>AP1099</code> (or <code>?9?AP1099</code> in test environment), containing 1099 data.</li> <li>Target Library: <code>DATAF1</code>, where the <code>IRSTAX</code> file will be created.</li> <li>Environment Prefix: <code>?9?</code> (string, e.g., <code>TEST</code> or empty for production), determines file naming.</li> <li>Record Length: Fixed at 750 bytes, defining the output file format.</li> <li>Error Handling Flag: <code>NE</code> (No Error), allowing the process to continue despite certain errors.</li> <li>Disposition: <code>'D'</code>, specifying the data copy mode (direct copy).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Target File: <code>IRSTAX</code> (or <code>?9?IRSTAX</code> in test environment), created in the <code>DATAF1</code> library, containing formatted 1099 data ready for government submission.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Environment:</li> <li>Determine if the environment is production (<code>?9?</code> is empty or <code>/G</code>) or test (<code>?9?</code> is a prefix like <code>TEST</code>).</li> <li>Check for Existing IRSTAX File:</li> <li>Verify if <code>DATAF1-IRSTAX</code> (or <code>DATAF1-?9?IRSTAX</code>) exists.</li> <li>If the file exists, delete it to prevent data conflicts.</li> <li>Copy Data:</li> <li>Copy data from <code>AP1099</code> (or <code>?9?AP1099</code>) to <code>IRSTAX</code> (or <code>?9?IRSTAX</code>) in the <code>DATAF1</code> library.</li> <li>Use a record length of 750 bytes, <code>NE</code> error handling, and <code>'D'</code> disposition.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>File Overwrite Protection: The function must check for an existing <code>IRSTAX</code> file and delete it only if it exists, ensuring no accidental data loss.</li> <li>Environment Flexibility: Support dynamic file naming based on the <code>?9?</code> prefix to accommodate production (<code>IRSTAX</code>, <code>AP1099</code>) and test (<code>?9?IRSTAX</code>, <code>?9?AP1099</code>) environments.</li> <li>Data Integrity: The output <code>IRSTAX</code> file must conform to a 750-byte record length to meet government reporting standards.</li> <li>Error Handling: Use <code>NE</code> to allow non-critical errors during the copy process, ensuring the function completes unless a critical failure occurs.</li> <li>Disposition: Use <code>'D'</code> mode to ensure direct data copying without additional transformations unless specified by government requirements.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#calculations","title":"Calculations","text":"<ul> <li>No explicit calculations are performed. The function relies on the <code>COPYDATA</code> command to handle data transfer, assuming the <code>AP1099</code> file is pre-formatted with correct 1099 data (e.g., amounts, payee details) and the 750-byte record length ensures compatibility with government submission formats.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>The <code>AP1099</code> file contains valid 1099 data, pre-validated and formatted for government requirements.</li> <li>The <code>DATAF1</code> library exists and is accessible for writing the <code>IRSTAX</code> file.</li> <li>The <code>?9?</code> prefix is provided correctly to distinguish between production and test environments.</li> <li>The <code>COPYDATA</code> command handles any internal data formatting required for the 750-byte record structure.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP795%20OCL%201099%20Convert%20IRS%20File%20to%20PC/Summary%20AP795%20OCL/#constraints","title":"Constraints","text":"<ul> <li>The function does not interact with a user interface, relying on input parameters for all decisions.</li> <li>No external file I/O beyond the IBM i system (e.g., no direct PC download within the function).</li> <li>The function assumes the <code>COPYDATA</code> command is available on the IBM i system.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/","title":"AP910 RPGLE","text":"<p>The RPGLE program <code>AP910.rpgle.txt</code> is part of an IBM AS/400 or IBM i accounts payable system, designed for vendor master maintenance and inquiry. It is called from the OCL program <code>AP910P99.ocl36.txt</code> via <code>AP910P</code> and is used to create, update, or display vendor records, with specific support for 1099 form processing. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP910</code> program is a display file-driven application that manages vendor master records through a single-panel interface (<code>fmt01</code>). It supports maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, allowing users to add, update, or view vendor details. The program includes validations for 1099-related fields and integrates with an SQL vendor table for synchronization. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts five parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$co</code> (company code).</li> <li><code>p$vend</code> (vendor number).</li> <li><code>p$mode</code> (3A): Run mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li><code>p$file</code> (10A): Vendor file name for 1099 processing (e.g., <code>APVN2025</code>).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, for file overrides.</li> <li><code>p$flag</code> (1A): Return flag to indicate success (<code>1</code>) or failure.</li> </ul> </li> <li>Sets Up Fields: Initializes display file fields (<code>f$co</code>, <code>f$vend</code>), key lists (<code>klvend</code>, <code>klglms</code>, <code>klcaid</code>, etc.), and message handling fields. Defines data structures for date conversion (<code>d#cymd</code>), time conversion (<code>time12</code>), and vendor record storage (<code>wkds01</code>, <code>svds</code>).</li> <li> <p>Purpose: Prepares the program environment for processing vendor data.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code> using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code>, <code>GGLMAST</code>, <code>GGSTABL</code>, <code>GBBCAID</code>, <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code>, <code>ZGLMAST</code>, <code>ZGSTABL</code>, <code>ZBBCAID</code>, <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2025</code>), uses it for <code>APVEND</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures access to the correct files, especially year-specific vendor files for 1099 processing.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Fetch Company Data: Chains to <code>APCONT</code> using <code>f$co</code> to retrieve the company name (<code>acname</code>) into <code>f$conm</code>. If not found, clears <code>f$conm</code>.</li> <li>Fetch Vendor Data: Chains to <code>APVEND</code> using <code>klvend</code> (<code>f$co</code>, <code>f$vend</code>). If the vendor exists (<code>*in99 = *off</code>), loads the record; otherwise, clears <code>apvendpf</code>.</li> <li>Set Mode and Header: Sets protection indicator <code>*in70</code> (<code>*off</code> for <code>MNT</code>, <code>*on</code> for <code>INQ</code>) and header (<code>c$hdr1</code>) to \u201cVendor Master Maintenance\u201d or \u201cVendor Master Inquiry\u201d based on <code>p$mode</code>.</li> <li> <p>Purpose: Loads existing vendor data or prepares for a new record.</p> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes <code>clrscr</code> to reset the display.</li> <li>Initialize Panel: Calls <code>f01mov</code> to set up fields for <code>fmt01</code> and sets <code>w$fmt = 'FMT01'</code>.</li> <li>Main Loop (<code>fmtagn</code>):<ul> <li>Displays the message subfile if needed (<code>wrtmsg</code>).</li> <li>Displays <code>fmt01</code> using <code>EXFMT</code>.</li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>, <code>*in76</code>\u2013<code>*in79</code>) and message subfile (<code>clrmsg</code>).</li> <li>Processes user input based on the current format (<code>f01sr</code> for <code>fmt01</code>).</li> </ul> </li> <li> <p>Purpose: Manages the interactive display of the vendor maintenance/inquiry panel.</p> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li>Handle Function Keys:<ul> <li>F04: Calls <code>prompt</code> to handle field-level prompting (e.g., lookup for GL account, terms, or 1099 code).</li> <li>F05: Calls <code>AP915P</code> for vendor contact maintenance/inquiry (commented out in this version).</li> <li>F10: Repositions the cursor to the top of the screen.</li> <li>F12: Exits the program (<code>fmtagn = *off</code>).</li> </ul> </li> <li>Inquiry Mode: If <code>p$mode = 'INQ'</code>, calls <code>f01nxt</code> to determine the next format (though only <code>fmt01</code> is active).</li> <li>Enter Key: Validates input (<code>f01edt</code>), updates the database if in <code>MNT</code> mode (<code>upddbf</code>), and processes the next format (<code>f01nxt</code>).</li> <li> <p>Purpose: Handles user interactions with the <code>fmt01</code> panel.</p> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li>If no input changes are detected (<code>*in19 = *off</code>), exits the main loop (<code>fmtagn = *off</code>).</li> <li> <p>Purpose: Controls whether to continue or exit the panel loop (only <code>fmt01</code> is used in this version).</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validates fields in <code>fmt01</code>:<ul> <li>Name (<code>vnname</code>): Must not be blank (<code>ERR0012</code>, <code>*in51</code>).</li> <li>Name Overflow (<code>vnnovf</code>): Must be <code>Y</code> or <code>N</code> (<code>ERR0014</code>, <code>*in52</code>).</li> <li>ACH Fields (commented out): If bank account (<code>vnabk#</code>) is non-blank, validates:</li> <li><code>vnacos</code>: Must be <code>C</code> or <code>S</code> (<code>com(05)</code>, <code>*in77</code>).</li> <li><code>vnacls</code>: Must be <code>CCD</code> (<code>com(06)</code>, <code>*in78</code>).</li> <li><code>vnarte</code>: Must be non-zero (<code>com(07)</code>, <code>*in79</code>).</li> <li>ACH Hold Validation: If <code>vnhold = 'A'</code> and <code>vnabk#</code> is blank, errors (<code>com(08)</code>, <code>*in76</code>\u2013<code>*in79</code>).</li> <li>Sort Field (<code>vnsort</code>): Must not be blank (<code>ERR0012</code>, <code>*in53</code>).</li> <li>Hold (<code>vnhold</code>): Must be <code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>, or blank (<code>com(01)</code>, <code>*in54</code>).</li> <li>Single Payee (<code>vnsngl</code>): Must be <code>S</code> or blank (<code>com(02)</code>, <code>*in55</code>).</li> <li>Expense GL (<code>vnexgl</code>): Must exist in <code>GLMAST</code>, not deleted or inactive (<code>ERR0010</code>, <code>*in56</code>), and not a special account (<code>ERR0015</code>).</li> <li>Carrier (<code>vncaid</code>): Must exist in <code>BBCAID</code> and not be deleted (<code>ERR0010</code>, <code>*in57</code>).</li> <li>Inactive Code (<code>vndel</code>): Sets <code>f$inac</code> to \u201cINACTIVE\u201d if <code>vndel = 'I'</code>.</li> <li>Terms (<code>vnterm</code>): Must exist in <code>GSTABL</code> and not be deleted (<code>ERR0010</code>, <code>*in58</code>).</li> <li>Gal/Rcpts Required (<code>vngrrq</code>): Commented out validation for <code>GSTABL</code> lookup (<code>ERR0010</code>, <code>*in71</code>).</li> <li>Category (<code>vncatg</code>): Must exist in <code>GSTABL</code> (no deleted check, <code>*in62</code> commented out).</li> <li>1099 Code (<code>vn1099</code>):</li> <li>Must not be blank (<code>ERR0010</code>, <code>*in59</code>).</li> <li>Must exist in <code>GSTABL</code> and not be deleted (<code>ERR0010</code>, <code>*in59</code>).</li> <li>If <code>M</code> or <code>N</code>, requires:<ul> <li>IRS Name Control (<code>vnnmct</code>) non-blank (<code>com(04)</code>, <code>*in61</code>).</li> <li>IRS EIN (<code>vnidno</code>) non-blank (<code>com(10)</code>, <code>*in64</code>).</li> <li>IRS Box 1 (<code>vnbox1</code>) non-zero (<code>com(11)</code>, <code>*in65</code>).</li> </ul> </li> <li>Zip Code (<code>vnzip5</code>): Required if <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code> (<code>com(09)</code>, <code>*in63</code>).</li> <li>Payees (<code>vnpyn2</code>): If non-blank, <code>vnpyn1</code> must also be non-blank (<code>com(03)</code>, <code>*in60</code>).</li> </ul> </li> <li>Inquiry Mode: Clears errors and messages if <code>p$mode = 'INQ'</code>.</li> <li> <p>Purpose: Ensures valid input before updating the database.</p> </li> <li> <p>Initialize Format Fields (<code>f01mov</code> Subroutine):</p> </li> <li>Calls <code>f01edt</code> to validate and populate display fields.</li> <li>Clears errors if validation fails.</li> <li>Calls <code>f01pro</code> (empty in this version) for format protection.</li> <li> <p>Purpose: Prepares the <code>fmt01</code> panel with validated data.</p> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> </li> <li>Saves current vendor record (<code>wkds01</code>) to <code>svds</code>.</li> <li>Checks if the vendor exists in <code>APVEND</code> (<code>klvend</code> chain):<ul> <li>If exists (<code>*in80 = *off</code>) and fields changed, restores <code>svds</code> to <code>wkds01</code>, updates <code>apvendpf</code>, sets <code>p$flag = '1'</code>, and calls <code>updSQLvn</code> (commented out).</li> <li>If not exists, clears <code>apvendpf</code>, populates with <code>svds</code>, sets <code>vnco</code> and <code>vnvend</code>, writes a new record, sets <code>p$flag = '1'</code>, and calls <code>updSQLvn</code>.</li> </ul> </li> <li> <p>Purpose: Updates or creates vendor records in <code>APVEND</code>.</p> </li> <li> <p>Update SQL Vendor Master (<code>updSQLvn</code> Subroutine):</p> <ul> <li>Commented out code to call a PC program (<code>UpdateVendor.EXE</code>) via <code>STRPCOCLP</code> and <code>QCMDEXC</code> to synchronize the AS/400 vendor table with an SQL version.</li> <li>Purpose: Intended to keep an external SQL vendor table in sync (disabled per <code>MG01</code>).</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Determines cursor position for window return.</li> <li>For <code>fmt01</code>, handles field lookups:</li> <li>VNEXGL: Calls <code>LGLMAST</code> to select a GL account, updates <code>vnexgl</code> if valid.</li> <li>VNCAID: Calls <code>LBBCAID</code> to select a carrier, updates <code>vncaid</code>.</li> <li>VNTERM: Calls <code>LGSTABL</code> to select terms, updates <code>vnterm</code>.</li> <li>VNGRRQ: Calls <code>LGSTABL</code> for gal/rcpts required (commented out).</li> <li>VNCATG: Calls <code>LGSTABL</code> to select a category, updates <code>vncatg</code>.</li> <li>VN1099: Calls <code>LGSTABL</code> to select a 1099 code, updates <code>vn1099</code>.</li> <li>Sets <code>*in19</code> to indicate a format change.</li> <li>Purpose: Provides interactive lookup for key fields.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>): Sends error or confirmation messages to the program message queue (<code>QMHSNDPM</code>).</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile (<code>QMHRMVPM</code>).</li> <li>Purpose: Manages user feedback for errors and confirmations.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Mode-Based Access:</li> <li>In <code>MNT</code> mode, users can create or update vendor records, with input fields enabled (<code>*in70 = *off</code>).</li> <li> <p>In <code>INQ</code> mode, users can only view vendor details, with input fields protected (<code>*in70 = *on</code>).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>Overrides <code>APVEND</code> to year-specific files (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) to support 1099 processing, as noted in revision <code>JB01</code>.</li> <li> <p>Similarly overrides <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, and <code>BBCAID</code>.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Mandatory Fields:<ul> <li>Vendor name (<code>vnname</code>) and sort field (<code>vnsort</code>) must not be blank (<code>ERR0012</code>).</li> <li>If second payee (<code>vnpyn2</code>) is non-blank, first payee (<code>vnpyn1</code>) must be non-blank (<code>com(03)</code>).</li> </ul> </li> <li>Valid Values:<ul> <li>Name overflow (<code>vnnovf</code>): <code>Y</code> or <code>N</code> (<code>ERR0014</code>).</li> <li>Hold (<code>vnhold</code>): <code>H</code> (check), <code>A</code> (ACH), <code>W</code> (wire), <code>E</code>, <code>U</code> (utility auto-pay, per <code>MG03</code>), or blank (<code>com(01)</code>).</li> <li>Single payee (<code>vnsngl</code>): <code>S</code> or blank (<code>com(02)</code>).</li> <li>ACH fields (commented out): If <code>vnabk#</code> non-blank, <code>vnacos</code> (<code>C</code>/<code>S</code>), <code>vnacls</code> (<code>CCD</code>), and <code>vnarte</code> (non-zero) are required. If <code>vnhold = 'A'</code> and <code>vnabk#</code> blank, errors (<code>com(08)</code>).</li> </ul> </li> <li>Reference File Checks:<ul> <li>Expense GL (<code>vnexgl</code>): Must exist in <code>GLMAST</code>, not deleted or inactive (<code>ERR0010</code>), and not special (<code>ERR0015</code>).</li> <li>Carrier (<code>vncaid</code>): Must exist in <code>BBCAID</code> and not deleted (<code>ERR0010</code>).</li> <li>Terms (<code>vnterm</code>): Must exist in <code>GSTABL</code> and not deleted (<code>ERR0010</code>).</li> <li>Category (<code>vncatg</code>): Must exist in <code>GSTABL</code> (no deleted check).</li> <li>1099 Code (<code>vn1099</code>): Must exist in <code>GSTABL</code>, not deleted, and not blank (<code>ERR0010</code>).</li> </ul> </li> <li> <p>1099-Specific Validations (per <code>MG02</code>, <code>JK01</code>):</p> <ul> <li>If <code>vn1099 = 'M'</code> (MISC) or <code>'N'</code> (NEC):</li> <li>IRS Name Control (<code>vnnmct</code>) must be non-blank (<code>com(04)</code>).</li> <li>IRS EIN (<code>vnidno</code>) must be non-blank (<code>com(10)</code>).</li> <li>IRS Box 1 (<code>vnbox1</code>) must be non-zero (<code>com(11)</code>).</li> <li>If <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code>, zip code (<code>vnzip5</code>) must be non-zero (<code>com(09)</code>).</li> </ul> </li> <li> <p>Database Updates:</p> </li> <li>In <code>MNT</code> mode, updates or creates records in <code>APVEND</code> and sets <code>p$flag = '1'</code> on success.</li> <li> <p>Synchronization with an SQL vendor table is commented out (<code>MG01</code>).</p> </li> <li> <p>User Interface:</p> </li> <li>Supports function keys: F04 (field prompting), F05 (vendor contacts, commented out), F10 (cursor home), F12 (exit), and Enter (process input).</li> <li>Displays a single panel (<code>fmt01</code>) with vendor details and validation messages.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP910D:</li> <li>Display file (CF, <code>workstn</code>) for the vendor maintenance/inquiry interface (<code>fmt01</code>, <code>clrscr</code>, <code>msgctl</code>).</li> <li> <p>Used for user input/output.</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>f$co</code>) and retrieve company name (<code>acname</code>).</p> </li> <li> <p>GLMAST:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for general ledger accounts.</li> <li>Overridden to <code>GGLMAST</code> or <code>ZGLMAST</code>.</li> <li> <p>Used to validate expense GL account (<code>vnexgl</code>).</p> </li> <li> <p>GSTABL:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for reference data (terms, category, 1099 codes).</li> <li>Overridden to <code>GGSTABL</code> or <code>ZGSTABL</code>.</li> <li> <p>Used to validate <code>vnterm</code>, <code>vncatg</code>, <code>vn1099</code>, and commented-out <code>vngrrq</code>.</p> </li> <li> <p>BBCAID:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for carrier data (replaces <code>GSTABL</code> for carrier lookup per <code>JK03</code>).</li> <li>Overridden to <code>GBBCAID</code> or <code>ZBBCAID</code>.</li> <li> <p>Used to validate carrier (<code>vncaid</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Update file (UF, <code>usropn</code>) for vendor master data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li>Used for reading, updating, or creating vendor records.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>LGLMAST:</li> <li>Called in <code>prompt</code> for GL account lookup (<code>VNEXGL</code>).</li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$acct</code> (account), <code>o$sub</code> (sub-account), <code>o$spec</code> (special accounts flag), <code>o$fgrp</code> (file group).</p> </li> <li> <p>LBBCAID:</p> </li> <li>Called in <code>prompt</code> for carrier lookup (<code>VNCAID</code>, per <code>JK03</code>).</li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$caid</code> (carrier ID), <code>o$fgrp</code> (file group).</p> </li> <li> <p>LGSTABL:</p> </li> <li>Called in <code>prompt</code> for lookup of terms (<code>VNTERM</code>), category (<code>VNCATG</code>), and 1099 code (<code>VN1099</code>).</li> <li> <p>Parameters: <code>k$apterm</code>/<code>k$apcatg</code>/<code>k$ap1099</code> (table type), <code>k$term</code>/<code>k$catg</code>/<code>k$1099</code> (code), <code>o$fgrp</code> (file group).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, and <code>APVEND</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li> <p>System program to clear messages from the message subfile.</p> </li> <li> <p>AP915P (commented out)**:</p> </li> <li>Intended for vendor contact maintenance/inquiry (per <code>JK02</code>).</li> <li> <p>Parameters: <code>o$co#</code> (company), <code>o$vend</code> (vendor), <code>o$mode</code> (MNT/INQ), <code>o$fgrp</code> (file group).</p> </li> <li> <p>STRPCOCLP and UpdateVendor.EXE (commented out)**:</p> </li> <li>Intended to synchronize the AS/400 vendor table with an SQL table (per <code>JB05</code>, disabled per <code>MG01</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP910</code> RPGLE program is a critical component of the accounts payable system, providing an interactive interface for maintaining or viewing vendor master records. It supports creating and updating vendor data in <code>MNT</code> mode and viewing in <code>INQ</code> mode, with robust validations for 1099-related fields (e.g., IRS Name Control, EIN, Box 1, zip code). The program integrates with the OCL program <code>AP910P99</code> and <code>AP910P</code> to manage vendor data for 1099 processing, using year-specific files like <code>APVNYYYY</code>. It includes field lookups and error handling to ensure data integrity.</p> <p>Tables/Files: <code>AP910D</code> (display), <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, <code>APVEND</code> (overridden to <code>GAPCONT</code>, <code>GGLMAST</code>, <code>GGSTABL</code>, <code>GBBCAID</code>, <code>GAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>LGLMAST</code>, <code>LBBCAID</code>, <code>LGSTABL</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>, <code>AP915P</code> (commented out), <code>STRPCOCLP</code>/<code>UpdateVendor.EXE</code> (commented out).</p> <p>If you need further details on related programs (<code>AP9104</code>, <code>LGLMAST</code>, etc.) or file structures, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/","title":"AP9104 RPGLE","text":"<p>The RPGLE program <code>AP9104.rpgle.txt</code> is part of an IBM AS/400 or IBM i accounts payable system, designed to handle the inactivation or reactivation of vendor master records. It is called from the OCL program <code>AP910P99.ocl36.txt</code> via <code>AP910P</code> (specifically for option 4 in the subfile interface) and provides a window-based interface (<code>delwdw</code>) to toggle a vendor's status between active (<code>A</code>) and inactive (<code>I</code>). The program supports 1099 processing by overriding vendor files to year-specific versions (e.g., <code>APVN2012</code>). Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP9104</code> program is a display file-driven application that presents a window (<code>delwdw</code>) for users to inactivate or reactivate vendor records. It operates in maintenance mode only, as it updates the vendor file (<code>APVEND</code>) and does not support inquiry mode explicitly. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts five parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$co</code> (company code).</li> <li><code>p$vend</code> (vendor number).</li> <li><code>p$file</code> (10A): Vendor file name for 1099 processing (e.g., <code>APVN2012</code>).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, for file overrides.</li> <li><code>p$flag</code> (1A): Return flag to indicate the result (<code>A</code> for reactivated, <code>D</code> for inactivated).</li> </ul> </li> <li>Sets Up Fields: Initializes display file fields (<code>f$co</code>, <code>f$vend</code>), key list (<code>klvend</code>), and message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>). Defines a date conversion data structure (<code>d#cymd</code>) and a program status data structure (<code>psds##</code>).</li> <li> <p>Purpose: Prepares the program environment by setting initial field values and key lists.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code> using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code>, <code>GAPOPNH</code>, <code>GINFIL4</code>, <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code>, <code>ZAPOPNH</code>, <code>ZINFIL4</code>, <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2012</code>), uses it for <code>APVEND</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures access to the correct files, especially year-specific vendor files for 1099 processing (per revision <code>JB01</code>).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Fetch Company Data: Chains to <code>APCONT</code> using <code>f$co</code> to validate the company code (no action taken if not found, <code>*in99</code> checked).</li> <li>Fetch Vendor Data: Chains to <code>APVEND</code> using <code>klvend</code> (<code>f$co</code>, <code>f$vend</code>). If the vendor exists (<code>*in99 = *off</code>):<ul> <li>If <code>vndel = 'I'</code> (inactive), sets header (<code>f$hdr</code>) to \u201cVendor Master Reactivate\u201d and function key label (<code>f$fkyd</code>) to \u201cF22=Reactivate\u201d (<code>*in72 = *on</code>).</li> <li>Otherwise, sets header to \u201cVendor Master Inactivate\u201d and function key label to \u201cF23=Inactivate\u201d (<code>*in73 = *on</code>).</li> </ul> </li> <li> <p>Purpose: Loads vendor data and configures the window based on the vendor\u2019s current status.</p> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li>Main Loop (<code>winagn</code>):<ul> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears it (<code>msgclr</code>).</li> <li>Displays the <code>delwdw</code> window using <code>EXFMT</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) and error indicators (<code>*in50</code>\u2013<code>*in69</code>).</li> <li>Processes user input based on function keys:</li> <li>F12: Exits the program (<code>winagn = *off</code>).</li> <li>F22 or F23: Validates input (<code>winedt</code>), checks balances if F23 (<code>chkbal</code>), and updates the database if no errors (<code>winupd</code>).</li> <li>Other (Enter): Validates input (<code>winedt</code>) without updating.</li> </ul> </li> <li> <p>Purpose: Manages the interactive window for inactivating or reactivating vendors.</p> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li>If F23 (inactivate) is pressed, calls <code>chkbal</code> to check for outstanding balances or history (though most checks are commented out).</li> <li> <p>Purpose: Ensures valid conditions before allowing database updates.</p> </li> <li> <p>Check Balances (<code>chkbal</code> Subroutine):</p> </li> <li>Commented out checks for:<ul> <li>Open invoices in <code>APOPNH</code> (<code>ERR0000</code>, <code>com(01)</code>: \u201cThis Vendor Has Outstanding Invoices, Cannot Delete\u201d).</li> <li>Non-zero monthly balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>) in <code>APVEND</code> (<code>ERR0000</code>, <code>com(01)</code>).</li> <li>Inventory history in <code>INFIL4</code> (<code>ERR0000</code>, <code>com(02)</code>: \u201cThis Vendor Has Inventory History, Cannot Delete\u201d).</li> </ul> </li> <li> <p>Purpose: Originally intended to prevent inactivation if the vendor has outstanding activity, but currently allows inactivation without checks (noted as \u201cnever allowed to delete a vendor\u201d).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li>Reactivate (F22):<ul> <li>Chains to <code>APVEND</code> using <code>klvend</code>.</li> <li>If the vendor exists (<code>*in99 = *off</code>) and is inactive (<code>vndel = 'I'</code>), sets <code>vndel = 'A'</code>, updates <code>apvendpf</code>, and sets <code>p$flag = 'A'</code>.</li> </ul> </li> <li>Inactivate (F23):<ul> <li>Chains to <code>APVEND</code> using <code>klvend</code>.</li> <li>If the vendor exists (<code>*in99 = *off</code>) and is not inactive (<code>vndel \u2260 'I'</code>), sets <code>vndel = 'I'</code>, updates <code>apvendpf</code>, and sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>Purpose: Updates the vendor\u2019s status in <code>APVEND</code> to active or inactive.</p> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>Add Message (<code>addmsg</code>): Sends error or confirmation messages to the program message queue (<code>QMHSNDPM</code>).</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile (<code>QMHRMVPM</code>).</li> <li> <p>Purpose: Manages user feedback for errors or confirmations.</p> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Vendor Status Toggle:</li> <li>The program toggles the vendor\u2019s deletion flag (<code>vndel</code>) in <code>APVEND</code>:<ul> <li>F22 (Reactivate): Changes <code>vndel</code> from <code>I</code> (inactive) to <code>A</code> (active), sets <code>p$flag = 'A'</code>.</li> <li>F23 (Inactivate): Changes <code>vndel</code> from non-<code>I</code> to <code>I</code> (inactive), sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>The term \u201cdelete\u201d in comments refers to marking a vendor as inactive (<code>I</code>), not physical deletion.</p> </li> <li> <p>Validation (Disabled):</p> </li> <li>Originally, inactivation (F23) was restricted if the vendor had:<ul> <li>Open invoices in <code>APOPNH</code>.</li> <li>Non-zero balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>) in <code>APVEND</code>.</li> <li>Inventory history in <code>INFIL4</code>.</li> </ul> </li> <li> <p>These checks are commented out, allowing inactivation without validation (noted as \u201cnever allowed to delete a vendor\u201d).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>Overrides <code>APVEND</code> to year-specific files (e.g., <code>APVN2012</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) to support 1099 processing (per <code>JB01</code>).</li> <li> <p>Similarly overrides <code>APCONT</code>, <code>APOPNH</code>, and <code>INFIL4</code>.</p> </li> <li> <p>User Interface:</p> </li> <li>Uses a window (<code>delwdw</code>) with dynamic headers (\u201cVendor Master Reactivate\u201d or \u201cVendor Master Inactivate\u201d) and function key labels (<code>F22=Reactivate</code> or <code>F23=Inactivate</code>) based on the vendor\u2019s current status.</li> <li>Supports function keys: F12 (exit), F22 (reactivate), F23 (inactivate), and Enter (validate input).</li> <li> <p>Displays error messages if validation fails (though currently disabled).</p> </li> <li> <p>Database Updates:</p> </li> <li>Updates <code>APVEND</code> only if the vendor exists and meets status conditions.</li> <li>Returns <code>p$flag</code> to indicate the action taken (<code>A</code> or <code>D</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP9104D:</li> <li>Display file (CF, <code>workstn</code>) for the vendor inactivate/reactivate window (<code>delwdw</code>, <code>msgctl</code>, <code>msgclr</code>).</li> <li> <p>Used for user input/output.</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>f$co</code>).</p> </li> <li> <p>APOPNH:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for open invoices.</li> <li>Overridden to <code>GAPOPNH</code> or <code>ZAPOPNH</code>.</li> <li> <p>Used in commented-out balance checks (<code>chkbal</code>).</p> </li> <li> <p>INFIL4:</p> </li> <li>Input-only file (IF, <code>usropn</code>) for inventory history.</li> <li>Overridden to <code>GINFIL4</code> or <code>ZINFIL4</code>.</li> <li> <p>Used in commented-out balance checks (<code>chkbal</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Update file (UF, <code>usropn</code>) for vendor master data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2012</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li>Used to update the vendor\u2019s deletion flag (<code>vndel</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>QCMDEXC:</li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, and <code>APVEND</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear messages from the message subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP9104%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP9104</code> RPGLE program is a specialized component of the accounts payable system, called from <code>AP910P99</code> via <code>AP910P</code> to inactivate or reactivate vendor records by toggling the <code>vndel</code> flag in <code>APVEND</code> (<code>A</code> for active, <code>I</code> for inactive). It uses a window interface (<code>delwdw</code>) and supports 1099 processing through year-specific file overrides. Validation checks for outstanding invoices or balances are disabled, allowing unrestricted status changes. The program provides user feedback via a message subfile and integrates with the broader vendor maintenance workflow.</p> <p>Tables/Files: <code>AP9104D</code> (display), <code>APCONT</code>, <code>APOPNH</code>, <code>INFIL4</code>, <code>APVEND</code> (overridden to <code>GAPCONT</code>, <code>GAPOPNH</code>, <code>GINFIL4</code>, <code>GAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p> <p>If you need further details on related programs, file structures, or the OCL integration, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/","title":"AP910P RPGLE","text":"<p>The RPGLE program <code>AP910P.rpgle.txt</code> is an IBM AS/400 or IBM i program designed for working with vendor records in an accounts payable (AP) system, specifically for maintaining vendor data related to 1099 forms. It is called from the OCL program <code>AP910P99.ocl36.txt</code> and provides an interactive interface for users to manage vendor records. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AP910P</code> program is a display file-driven application that manages vendor records through a subfile interface. It supports maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, allowing users to create, update, inactivate/reactivate, or display vendor records. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Receives Parameters: The program accepts three parameters via the <code>*entry</code> PLIST:<ul> <li><code>p$mode</code> (3A): Run mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li><code>p$file</code> (10A): Vendor file name (e.g., <code>APVN2025</code> for 1099 processing).</li> <li><code>p$fgrp</code> (1A): File group, either <code>G</code> or <code>Z</code>, to determine file overrides.</li> </ul> </li> <li>Sets Up Fields: Initializes subfile control fields, message handling fields, and headers. Defines key lists (<code>klsfl1</code>, <code>kls1s1</code>, <code>kls1r1</code>) for file access and sets default values for flags and counters.</li> <li> <p>Purpose: Prepares the program environment, including repositioning fields, subfile control, and message queue setup.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies overrides to the <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code> files using <code>QCMDEXC</code> to execute <code>OVRDBF</code> commands:<ul> <li>For <code>p$fgrp = 'G'</code>: Overrides to <code>GAPCONT</code> and <code>GAPVEND</code>.</li> <li>For <code>p$fgrp = 'Z'</code>: Overrides to <code>ZAPCONT</code> and <code>ZAPVEND</code>.</li> <li>If <code>p$file</code> is provided (e.g., <code>APVN2025</code>), uses it for <code>APVEND</code> and <code>APVENDRD</code>.</li> </ul> </li> <li>Opens Files: Opens <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code> with <code>USROPN</code> for dynamic access.</li> <li> <p>Purpose: Ensures the correct vendor files are accessed, especially for year-specific 1099 files like <code>APVNYYYY</code>.</p> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages and <code>wrtmsg</code> to initialize the message subfile.</li> <li>Initialize Subfile Control: Sets default values for subfile control fields (e.g., <code>c$co</code> = company code, <code>c$dlyn</code> = 'N' for inactive records).</li> <li>Set Protection Mode: If <code>p$mode = 'MNT'</code>, enables input fields (<code>*in70 = *off</code>); otherwise, protects fields for inquiry mode (<code>*in70 = *on</code>).</li> <li>Position File: Calls <code>sf1rep</code> to position the <code>APVENDRD</code> file based on user input (company code, vendor number, or search string).</li> <li>Main Loop (<code>sf1agn</code>):<ul> <li>Displays the command line and message subfile.</li> <li>Checks for subfile records to set display indicators (<code>*in41</code> for <code>SFLDSP</code>).</li> <li>Displays the subfile control record (<code>sflctl1</code>) using <code>EXFMT</code>.</li> <li>Processes user input based on function keys:</li> <li>F3: Exits the program.</li> <li>F4: Calls <code>prompt</code> (empty in this code, likely for future field-level help).</li> <li>F5: Refreshes the subfile, clearing selection fields and repositioning.</li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li>Enter: Processes subfile changes (<code>sf1prc</code>) if records are modified.</li> <li>F10: Repositions the cursor to the control record.</li> <li>Handles direct access (<code>sf1dir</code>) if a specific vendor is selected (<code>d$sel</code> and <code>d$vend</code>).</li> <li>Repositions the subfile if control fields change (<code>sf1rep</code>).</li> </ul> </li> <li> <p>Purpose: Manages the interactive subfile interface, allowing users to view and manipulate vendor records.</p> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes each using <code>sf1chg</code>.</li> <li> <p>Purpose: Handles user selections or modifications made in the subfile.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Copies the selected vendor number (<code>s1vend</code>) to working fields (<code>s$vend</code>, <code>a$vend</code>).</li> <li>Based on the subfile selection option (<code>s1sel</code>):<ul> <li>Option 2: Calls <code>sf1s02</code> (change vendor) if <code>p$mode = 'MNT'</code>.</li> <li>Option 4: Calls <code>sf1s04</code> (inactivate/reactivate vendor) if <code>p$mode = 'MNT'</code>.</li> <li>Option 5: Calls <code>sf1s05</code> (display vendor).</li> </ul> </li> <li>Updates the subfile record after processing by chaining to <code>APVEND</code>, formatting the record (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating <code>sfl1</code>.</li> <li> <p>Purpose: Processes user-selected actions for specific vendor records.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Validates control fields (<code>sf1cte</code>).</li> <li>Positions the <code>APVENDRD</code> file using <code>setll</code> based on the company code (<code>c$co</code>) and vendor number (<code>c$vend</code>).</li> <li>Retains control fields for repositioning and loads new subfile records (<code>sf1lod</code>).</li> <li> <p>Purpose: Refreshes the subfile based on user-specified filters (company, vendor, search string, or inactive flag).</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li>Validates the company code (<code>c$co</code>) by chaining to <code>APCONT</code>. If invalid or blank, sets error message <code>ERR0000</code> and indicators <code>*in50</code>, <code>*in51</code>.</li> <li>Ensures <code>c$dlyn</code> (include inactive) is <code>Y</code> or <code>N</code>; if invalid, sets error message <code>ERR0014</code> and indicators <code>*in50</code>, <code>*in52</code>.</li> <li> <p>Purpose: Validates user input in the subfile control area to ensure correct data filtering.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Loads up to <code>pagsz1</code> (30) records into the subfile.</li> <li>Reads records from <code>APVENDRD</code> using <code>reade</code> with key list <code>kls1r1</code>.</li> <li>Filters records:<ul> <li>Skips inactive records (<code>vndel = 'I'</code>) if <code>c$dlyn = 'N'</code>.</li> <li>Applies search string filter (<code>c$srch</code>) using <code>scan</code> on <code>vnname</code>.</li> </ul> </li> <li>Formats each record (<code>sf1fmt</code>) and applies color coding (<code>sf1col</code>).</li> <li>Writes records to the subfile (<code>sfl1</code>) and updates <code>rrn1</code>.</li> <li> <p>Purpose: Populates the subfile with filtered vendor records for display.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> </li> <li>Clears the subfile record and populates fields:<ul> <li><code>s1del</code>: Vendor deletion flag (<code>vndel</code>).</li> <li><code>s1vend</code>: Vendor number (<code>vnvend</code>).</li> <li><code>s1name</code>: Vendor name (<code>vnname</code>).</li> <li><code>s1tel#</code>: Vendor phone (<code>vnarea</code> + <code>vntele</code>).</li> <li><code>s1lpay</code>: Last payment amount (<code>vnlpay</code>).</li> <li><code>s1lpdt</code>: Last payment date (<code>vnlpd8</code>, converted to MMDDYY).</li> </ul> </li> <li> <p>Purpose: Formats vendor data for display in the subfile.</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets indicator <code>*in71</code> to <code>*on</code> if the vendor is inactive (<code>s1del = 'I'</code>), likely for visual highlighting.</li> <li>Purpose: Visually distinguishes inactive vendors in the subfile.</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Validates direct selection (<code>d$sel</code> and <code>d$vend</code>):</li> <li>For option 1 (create) in <code>MNT</code> mode, ensures <code>d$vend</code> is not zero (<code>ERR0103</code> if zero).</li> <li>Checks if the vendor exists in <code>APVEND</code> (<code>klsfl1 setll</code>):<ul> <li>For non-create options, errors if vendor does not exist (<code>ERR0102</code>).</li> <li>For create, errors if vendor already exists (<code>ERR0101</code>).</li> </ul> </li> <li>Processes valid selections by calling <code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s04</code>, or <code>sf1s05</code>.</li> <li>Clears selection fields after processing.</li> <li>Purpose: Handles direct vendor selection for create, change, inactivate, or display actions.</li> </ul> </li> <li> <p>Clear Subfile (<code>sf1clr</code> Subroutine):</p> <ul> <li>Resets <code>rrn1</code> and <code>rrnsv1</code> to zero and clears the subfile (<code>*in42 = *on</code>, writes <code>sflctl1</code>).</li> <li>Purpose: Prepares the subfile for reloading.</li> </ul> </li> <li> <p>Option Processing Subroutines:</p> <ul> <li>Create (<code>sf1s01</code>):</li> <li>Calls <code>AP910</code> with <code>MNT</code> mode, passing company, vendor, file name, file group, and a return flag.</li> <li>If successful (<code>o$flag = '1'</code> and <code>o$vend</code> non-zero), sends confirmation message (<code>com(02)</code> + vendor number) and triggers subfile repositioning.</li> <li>Change (<code>sf1s02</code>):</li> <li>Ensures the vendor is not deleted (<code>vndel \u2260 'D'</code>); if deleted, sets error <code>com(08)</code>.</li> <li>Calls <code>AP910</code> with <code>MNT</code> mode.</li> <li>If successful (<code>o$flag = '1'</code>), sends confirmation message (<code>com(03)</code> + vendor number).</li> <li>Inactivate/Reactivate (<code>sf1s04</code>):</li> <li>Calls <code>AP9104</code>, passing company, vendor, file name, file group, and return flag.</li> <li>Based on <code>o$flag</code>, sends confirmation message:<ul> <li><code>I</code>: Inactive (<code>com(05)</code> + vendor number).</li> <li><code>A</code>: Active (<code>com(06)</code> + vendor number).</li> </ul> </li> <li>Display (<code>sf1s05</code>):</li> <li>Calls <code>AP910</code> with <code>INQ</code> mode to display vendor details.</li> <li>Purpose: Executes specific vendor actions based on user selection.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>): Sends messages to the program message queue (<code>QMHSNDPM</code>) with error or confirmation text.</li> <li>Write Message (<code>wrtmsg</code>): Displays the message subfile (<code>msgctl</code>).</li> <li>Clear Message (<code>clrmsg</code>): Clears the message subfile using <code>QMHRMVPM</code>.</li> <li>Purpose: Manages user feedback for errors and confirmations.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files (<code>close *all</code>), sets <code>*inlr = *on</code>, and returns.</li> <li>Purpose: Ensures clean program exit.</li> </ul> </li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Mode-Based Access:</li> <li>In <code>MNT</code> mode, users can create (option 1), change (option 2), or inactivate/reactivate (option 4) vendor records.</li> <li> <p>In <code>INQ</code> mode, users can only display vendor details (option 5), with input fields protected (<code>*in70 = *on</code>).</p> </li> <li> <p>File Overrides for 1099 Processing:</p> </li> <li>When called from the 1099 process, the program overrides <code>APVEND</code> and <code>APVENDRD</code> to year-specific files (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code> (<code>G</code> or <code>Z</code>).</li> <li> <p>Ensures historical vendor data (from <code>GAPVEND</code>) is accessed correctly.</p> </li> <li> <p>Validation Rules:</p> </li> <li>Company code (<code>c$co</code>) must exist in <code>APCONT</code> (<code>ERR0000</code> if invalid).</li> <li>Inactive flag (<code>c$dlyn</code>) must be <code>Y</code> or <code>N</code> (<code>ERR0014</code> if invalid).</li> <li>For create (option 1), vendor number must be non-zero (<code>ERR0103</code>) and must not already exist (<code>ERR0101</code>).</li> <li>For non-create options, vendor must exist (<code>ERR0102</code>).</li> <li> <p>Deleted vendors (<code>vndel = 'D'</code>) cannot be modified (<code>ERR0000</code>).</p> </li> <li> <p>Subfile Filtering:</p> </li> <li>Users can filter vendors by company code, vendor number, search string (<code>c$srch</code>), or include inactive records (<code>c$dlyn = 'Y'</code>).</li> <li> <p>Inactive vendors are visually highlighted (<code>*in71 = *on</code>).</p> </li> <li> <p>User Interface:</p> </li> <li>Supports function keys: F3 (exit), F4 (prompt, not implemented), F5 (refresh), F10 (position to control), Page Down (load more records), and Enter (process changes).</li> <li>Displays up to 30 records per subfile page (<code>pagsz1</code>).</li> <li> <p>Maintains cursor position and subfile page for redisplay.</p> </li> <li> <p>Confirmation Messages:</p> </li> <li>Provides feedback for successful create (<code>com(02)</code>), change (<code>com(03)</code>), inactivate (<code>com(05)</code>), or reactivate (<code>com(06)</code>) actions.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AP910PD:</li> <li>Display file (CF, <code>workstn</code>) with a subfile (<code>sfl1</code>) for interactive vendor management.</li> <li> <p>Used for user interface (input/output via <code>sflctl1</code>, <code>sflcmd1</code>, <code>msgctl</code>, <code>msgclr</code>).</p> </li> <li> <p>APCONT:</p> </li> <li>Input-only file (IF, <code>usropn</code>) containing company data.</li> <li>Overridden to <code>GAPCONT</code> or <code>ZAPCONT</code> based on <code>p$fgrp</code>.</li> <li> <p>Used to validate company code (<code>c$co</code>).</p> </li> <li> <p>APVEND:</p> </li> <li>Input-only file (IF, <code>usropn</code>) containing vendor data.</li> <li>Overridden to <code>GAPVEND</code>, <code>ZAPVEND</code>, or a year-specific file (e.g., <code>APVN2025</code>) based on <code>p$file</code> and <code>p$fgrp</code>.</li> <li> <p>Used for chaining vendor records during updates.</p> </li> <li> <p>APVENDRD:</p> </li> <li>Input-only file (IF, <code>usropn</code>) with renamed record format (<code>apvendpf</code> to <code>apvendpr</code>).</li> <li>Overridden similarly to <code>APVEND</code>.</li> <li>Used for reading vendor records to populate the subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>AP910:</li> <li>Called for:<ul> <li>Create (<code>sf1s01</code>, <code>MNT</code> mode): Creates a new vendor record.</li> <li>Change (<code>sf1s02</code>, <code>MNT</code> mode): Updates an existing vendor record.</li> <li>Display (<code>sf1s05</code>, <code>INQ</code> mode): Displays vendor details.</li> </ul> </li> <li> <p>Parameters: <code>o$co</code> (company), <code>o$vend</code> (vendor), <code>o$mode</code> (MNT/INQ), <code>o$file</code> (file name), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).</p> </li> <li> <p>AP9104:</p> </li> <li>Called for inactivate/reactivate (<code>sf1s04</code>, <code>MNT</code> mode): Toggles vendor status between active and inactive.</li> <li> <p>Parameters: <code>o$co</code>, <code>o$vend</code>, <code>o$file</code>, <code>o$fgrp</code>, <code>o$flag</code> (returns <code>I</code> for inactive, <code>A</code> for active).</p> </li> <li> <p>QCMDEXC:</p> </li> <li> <p>System program to execute file override commands (<code>OVRDBF</code>) for <code>APCONT</code>, <code>APVEND</code>, and <code>APVENDRD</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li> <p>System program to send messages to the program message queue for errors or confirmations.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>System program to clear messages from the message subfile.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AP910P</code> RPGLE program is a core component of the accounts payable system, providing an interactive subfile interface for managing vendor records. It supports creating, updating, inactivating/reactivating, and displaying vendors, with specific handling for 1099 processing via year-specific file overrides. The program validates inputs, filters records, and provides user feedback through a message subfile. It integrates with the OCL program <code>AP910P99</code> to allow manual updates to vendor payment totals for 1099 forms.</p> <p>Tables/Files: <code>AP910PD</code> (display), <code>APCONT</code>, <code>APVEND</code>, <code>APVENDRD</code> (overridden to <code>GAPCONT</code>, <code>GAPVEND</code>, <code>ZAPCONT</code>, <code>ZAPVEND</code>, or <code>APVNYYYY</code>). External Programs: <code>AP910</code>, <code>AP9104</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p> <p>If you need further details on the called programs (<code>AP910</code>, <code>AP9104</code>) or file structures, let me know, and I can provide additional analysis or search for relevant information!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/","title":"AP910P99 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, specifically <code>AP910P99.ocl36.txt</code>, used for vendor file maintenance related to 1099 forms in an IBM AS/400 or IBM i environment. Below, I\u2019ll break down the process steps of the OCL program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG OCL Program","text":"<p>OCL is a control language used on IBM midrange systems to manage job execution, call programs, and handle file operations. The program <code>AP910P99</code> appears to be part of an accounts payable (AP) system for maintaining vendor data related to 1099 forms. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Initialization and Setup:</li> <li><code>// SCPROCP ,,,,,,,,?9?</code>: This likely specifies the procedure name and a parameter <code>?9?</code>, which is a placeholder for a runtime value (possibly a control flag or environment indicator).</li> <li><code>// SWITCH 00000000</code>: Initializes job switches to <code>00000000</code>, resetting any control flags used for conditional logic.</li> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables to blank, ensuring a clean state for the job.</li> <li> <p><code>// GSY2K</code>: Likely invokes a system-level setting or module related to Year 2000 (Y2K) compliance, possibly for date handling.</p> </li> <li> <p>Prompt for Four-Digit Year:</p> </li> <li>The commented message <code>// * 'WHAT YEAR ARE THESE 1099''S FOR?  PLEASE ENTER THE \"FOUR DIGIT YEAR\"...'</code> suggests that the program expects a four-digit year input (e.g., <code>2025</code>) to process 1099 forms for a specific year.</li> <li> <p><code>// IF ?10R?/ * ''</code>: Checks if the input parameter <code>?10?</code> (likely the year) is blank. If blank, the program may skip certain steps or terminate (the exact behavior depends on the condition handling).</p> </li> <li> <p>Conditional Program Calls Based on Parameter <code>?9?</code>:</p> </li> <li>The program checks the value of <code>?9?</code> (a control flag or environment indicator, possibly <code>G</code> for a specific mode like \"Generate\").</li> <li>If <code>?9?</code> equals <code>G</code>:<ul> <li><code>CALL PGM(AP910P) PARM('MNT' 'APVN?10?' '?9?')</code>: Calls the RPG program <code>AP910P</code> with parameters:</li> <li><code>'MNT'</code>: Indicates maintenance mode.</li> <li><code>'APVN?10?'</code>: The file name <code>APVN</code> concatenated with the four-digit year (e.g., <code>APVN2025</code> for year 2025).</li> <li><code>'?9?'</code>: Passes the control flag.</li> <li>Alternatively, <code>CALL PGM(AP910P) PARM('MNT' '?9?VN?10?' '?9?')</code>: Calls the same program but with a different file name format, <code>?9?VN?10?</code> (e.g., <code>GVN2025</code> if <code>?9?</code> is <code>G</code>).</li> </ul> </li> <li> <p>These calls likely perform maintenance tasks on the vendor file for the specified year, such as updating payment totals or preparing data for 1099 reporting.</p> </li> <li> <p>Set File Name for Update:</p> </li> <li>If <code>?9?</code> equals <code>G</code>:<ul> <li><code>EVALUATE P13='APVN?10?'</code>: Sets the variable <code>P13</code> to the file name <code>APVN</code> concatenated with the year (e.g., <code>APVN2025</code>).</li> <li>Alternatively, <code>EVALUATE P13='?9?VN?10?'</code>: Sets <code>P13</code> to a file name like <code>GVN2025</code>.</li> </ul> </li> <li> <p><code>P13</code> is used to specify the file for the subsequent update operation.</p> </li> <li> <p>User Interaction for Payment Updates:</p> </li> <li><code>// * '---------------------------------------------------------------'</code>: Displays a separator line (commented, possibly for debugging or documentation).</li> <li><code>// PAUSE 'THE NEXT SCREEN ALLOWS FOR PAYMENT UPDATES IF NECESSARY'</code>: Pauses the job and displays a message to the user, indicating that the next screen allows manual updates to payment data.</li> <li> <p><code>// UPDDTA ?13?</code>: Invokes the Update Data (<code>UPDDTA</code>) command to allow the user to interactively update records in the file specified by <code>P13</code> (e.g., <code>APVN2025</code>). This is likely a screen-based interface where users can modify vendor payment totals for the 1099 process.</p> </li> <li> <p>Conditional Termination:</p> </li> <li><code>// IF SWITCH1-1 GOTO END</code>: Checks if switch 1 is set to <code>1</code>. If true, the program jumps to the <code>END</code> tag, terminating execution.</li> <li> <p>This switch might be set by the <code>AP910P</code> program or the <code>UPDDTA</code> operation to indicate an error or completion condition.</p> </li> <li> <p>Cleanup and Exit:</p> </li> <li><code>// TAG END</code>: Marks the end of the program.</li> <li><code>// SWITCH 00000000</code>: Resets job switches to <code>00000000</code> for consistency.</li> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables again, ensuring no residual data remains.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external program: - <code>AP910P</code>: An RPG program called with parameters to perform maintenance tasks on the vendor file. It is invoked conditionally based on the value of <code>?9?</code> (e.g., when <code>?9?</code> is <code>G</code>). The parameters passed are:   - <code>'MNT'</code>: Maintenance mode.   - File name (either <code>APVN?10?</code> or <code>?9?VN?10?</code>, e.g., <code>APVN2025</code> or <code>GVN2025</code>).   - Control flag <code>?9?</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (referred to as \"tables\" in the context of AS/400): - <code>APVNYYYY</code>: A vendor file containing data before monthly and yearly totals are cleared, as noted in the programmer\u2019s comment. The <code>YYYY</code> is replaced by the four-digit year input (<code>?10?</code>), e.g., <code>APVN2025</code>. - <code>?9?VN?10?</code>: An alternative file name format (e.g., <code>GVN2025</code> if <code>?9?</code> is <code>G</code>). This may refer to a different version or copy of the vendor file, depending on the environment or mode. - The file name is dynamically set to the variable <code>P13</code> and used in the <code>UPDDTA</code> command for interactive updates.</p> <p>Additionally, the programmer\u2019s note mentions: - <code>GAPVEND</code>: The original vendor file from which <code>APVNYYYY</code> is created during the period-end process (<code>AP300</code>). This file is not directly used in <code>AP910P99</code> but provides context for the origin of <code>APVNYYYY</code>.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/AP910P99%20OCL/#summary","title":"Summary","text":"<p>The <code>AP910P99</code> OCL program facilitates vendor file maintenance for 1099 form processing. It: 1. Initializes the environment and prompts for a four-digit year. 2. Conditionally calls the RPG program <code>AP910P</code> to perform maintenance on the vendor file (<code>APVNYYYY</code> or <code>?9?VN?10?</code>) based on a control flag (<code>?9?</code>). 3. Allows users to manually update payment totals in the specified file using the <code>UPDDTA</code> command. 4. Terminates if a specific switch is set or after completing the update process. 5. Ensures cleanup by resetting switches and variables.</p> <p>External Programs: <code>AP910P</code> Tables/Files: <code>APVNYYYY</code> (e.g., <code>APVN2025</code>), <code>?9?VN?10?</code> (e.g., <code>GVN2025</code>), with <code>GAPVEND</code> as the source file in the period-end process.</p> <p>If you need further analysis of the <code>AP910P</code> program or the file structures, let me know, and I can provide additional insights or search for related information if available!</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/","title":"Summary AP910P99 OCL","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#list-of-use-cases-implemented-by-the-ap910-program-suite","title":"List of Use Cases Implemented by the AP910 Program Suite","text":"<p>The <code>AP910</code> program suite, comprising <code>AP910.rpgle</code> (vendor master maintenance/inquiry) and <code>AP9104.rpgle</code> (vendor master delete/restore), called via <code>AP910P</code> from the OCL program <code>AP910P99.ocl36.txt</code>, implements the following use cases in the accounts payable system on IBM AS/400 or IBM i:</p> <ol> <li>Vendor Master Maintenance:</li> <li>Description: Allows users to create, update, or view vendor master records in the <code>APVEND</code> file, with support for 1099 processing. Includes validations for mandatory fields, reference data, and 1099-specific requirements (e.g., IRS Name Control, EIN, Box 1).</li> <li>Program: <code>AP910.rpgle</code></li> <li> <p>Details: Supports maintenance (<code>MNT</code>) mode for adding/updating vendor records and inquiry (<code>INQ</code>) mode for viewing. Validates fields like vendor name, sort field, hold status, GL account, carrier, terms, category, and 1099 codes. Optionally synchronizes with an SQL vendor table (commented out).</p> </li> <li> <p>Vendor Master Inactivation/Reactivation:</p> </li> <li>Description: Enables marking a vendor as inactive (<code>I</code>) or reactivating it (<code>A</code>) in the <code>APVEND</code> file, with support for 1099 processing via year-specific file overrides.</li> <li>Program: <code>AP9104.rpgle</code></li> <li>Details: Provides a window interface to toggle the <code>vndel</code> flag. Originally included balance checks (invoices, monthly balances, inventory history) to prevent inactivation, but these are disabled, allowing unrestricted status changes.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#function-requirement-document-vendor-master-management-function","title":"Function Requirement Document: Vendor Master Management Function","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#vendor-master-management-function-requirements","title":"Vendor Master Management Function Requirements","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#overview","title":"Overview","text":"<p>The Vendor Master Management function handles the creation, update, inquiry, inactivation, and reactivation of vendor master records in the accounts payable system. It supports 1099 processing with year-specific file overrides and enforces data integrity through validations.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>p$co</code>): Identifier for the company (numeric).</li> <li>Vendor Number (<code>p$vend</code>): Identifier for the vendor (numeric).</li> <li>Run Mode (<code>p$mode</code>, 3A): <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li>File Name (<code>p$file</code>, 10A): Optional year-specific vendor file (e.g., <code>APVN2025</code>) for 1099 processing.</li> <li>File Group (<code>p$fgrp</code>, 1A): <code>G</code> or <code>Z</code> for file overrides.</li> <li>Vendor Data (for <code>MNT</code> mode, structure mirroring <code>APVEND</code>):</li> <li>Name (<code>vnname</code>): Vendor name (non-blank).</li> <li>Sort Field (<code>vnsort</code>): Short name for sorting (non-blank).</li> <li>Name Overflow (<code>vnnovf</code>): <code>Y</code> or <code>N</code>.</li> <li>Hold (<code>vnhold</code>): <code>H</code> (check), <code>A</code> (ACH), <code>W</code> (wire), <code>E</code>, <code>U</code> (utility auto-pay), or blank.</li> <li>Single Payee (<code>vnsngl</code>): <code>S</code> or blank.</li> <li>Expense GL Account (<code>vnexgl</code>): General ledger account number.</li> <li>Carrier (<code>vncaid</code>): Carrier ID.</li> <li>Terms (<code>vnterm</code>): Payment terms code.</li> <li>Category (<code>vncatg</code>): Vendor category code.</li> <li>1099 Code (<code>vn1099</code>): 1099 reporting code.</li> <li>IRS Name Control (<code>vnnmct</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>IRS EIN (<code>vnidno</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>IRS Box 1 (<code>vnbox1</code>): Required if <code>vn1099</code> is <code>M</code> or <code>N</code>.</li> <li>Country (<code>vnctry</code>): Country code (e.g., <code>US</code>).</li> <li>Zip Code (<code>vnzip5</code>): Required if <code>vnctry = 'US'</code>, <code>vn1099 \u2260 'X'</code>, and <code>vnhold \u2260 'E'</code>.</li> <li>Payee 1 (<code>vnpyn1</code>): Primary payee name.</li> <li>Payee 2 (<code>vnpyn2</code>): Secondary payee name (requires <code>vnpyn1</code> if non-blank).</li> <li>ACH Fields (optional, commented out):<ul> <li>Bank Account (<code>vnabk#</code>): Bank account number.</li> <li>Account Type (<code>vnacos</code>): <code>C</code> (checking) or <code>S</code> (savings).</li> <li>ACH Class (<code>vnacls</code>): <code>CCD</code>.</li> <li>Routing Code (<code>vnarte</code>): Bank routing number.</li> </ul> </li> <li>Action (for inactivation/reactivation): <code>REACTIVATE</code> or <code>INACTIVATE</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Vendor Data: Updated or retrieved vendor record (structure mirroring <code>APVEND</code>).</li> <li>Return Flag (<code>p$flag</code>, 1A): Indicates result:</li> <li><code>1</code>: Successful create/update (maintenance).</li> <li><code>A</code>: Successful reactivation.</li> <li><code>D</code>: Successful inactivation.</li> <li>Error Messages: List of validation errors (if any).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>p$co</code> exists in <code>APCONT</code>.</li> <li>For <code>MNT</code> or <code>INQ</code>, check if <code>p$co</code> and <code>p$vend</code> exist in <code>APVEND</code> (optional for <code>MNT</code> if creating new).</li> <li> <p>Apply file overrides for <code>APVEND</code>, <code>APCONT</code>, <code>GLMAST</code>, <code>GSTABL</code>, <code>BBCAID</code>, <code>APOPNH</code>, <code>INFIL4</code> based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>) or <code>p$file</code> (e.g., <code>APVN2025</code>).</p> </li> <li> <p>Maintenance Mode (<code>MNT</code>):</p> </li> <li> <p>Create/Update:</p> <ul> <li>Validate input fields:</li> <li>Mandatory: <code>vnname</code>, <code>vnsort</code> non-blank.</li> <li><code>vnnovf</code>: <code>Y</code> or <code>N</code>.</li> <li><code>vnhold</code>: <code>H</code>, <code>A</code>, <code>W</code>, <code>E</code>, <code>U</code>, or blank.</li> <li><code>vnsngl</code>: <code>S</code> or blank.</li> <li><code>vnexgl</code>: Exists in <code>GLMAST</code>, not deleted or inactive, not special.</li> <li><code>vncaid</code>: Exists in <code>BBCAID</code>, not deleted.</li> <li><code>vnterm</code>: Exists in <code>GSTABL</code>, not deleted.</li> <li><code>vncatg</code>: Exists in <code>GSTABL</code>.</li> <li><code>vn1099</code>: Exists in <code>GSTABL</code>, not deleted, non-blank.</li> <li>If <code>vn1099 = 'M'</code> or <code>'N'</code>:<ul> <li><code>vnnmct</code>, <code>vnidno</code> non-blank.</li> <li><code>vnbox1</code> non-zero.</li> </ul> </li> <li>If <code>vnctry = 'US'</code> and <code>vn1099 \u2260 'X'</code> and <code>vnhold \u2260 'E'</code>, <code>vnzip5</code> non-zero.</li> <li>If <code>vnpyn2</code> non-blank, <code>vnpyn1</code> non-blank.</li> <li>ACH (if enabled): If <code>vnabk#</code> non-blank, <code>vnacos</code> (<code>C</code>/<code>S</code>), <code>vnacls</code> (<code>CCD</code>), <code>vnarte</code> non-zero; if <code>vnhold = 'A'</code> and <code>vnabk#</code> blank, error.</li> <li>If valid, update or create record in <code>APVEND</code>:</li> <li>If vendor exists, update <code>apvendpf</code> if changed.</li> <li>If vendor does not exist, write new <code>apvendpf</code> with <code>vnco = p$co</code>, <code>vnvend = p$vend</code>.</li> <li>Set <code>p$flag = '1'</code>.</li> <li>(Optional, disabled) Synchronize with SQL vendor table via external call.</li> </ul> </li> <li> <p>Inquiry Mode (<code>INQ</code>):</p> </li> <li>Retrieve vendor record from <code>APVEND</code> using <code>p$co</code> and <code>p$vend</code>.</li> <li> <p>Return vendor data without modifications.</p> </li> <li> <p>Inactivation/Reactivation:</p> </li> <li>Reactivate:<ul> <li>If vendor exists in <code>APVEND</code> and <code>vndel = 'I'</code>, set <code>vndel = 'A'</code>, update <code>apvendpf</code>, set <code>p$flag = 'A'</code>.</li> </ul> </li> <li> <p>Inactivate:</p> <ul> <li>If vendor exists in <code>APVEND</code> and <code>vndel \u2260 'I'</code>, set <code>vndel = 'I'</code>, update <code>apvendpf</code>, set <code>p$flag = 'D'</code>.</li> <li>(Disabled) Prevent inactivation if open invoices (<code>APOPNH</code>), non-zero balances (<code>vnpurc</code>, <code>vnpay</code>, <code>vndmtd</code>), or inventory history (<code>INFIL4</code>).</li> </ul> </li> <li> <p>Error Handling:</p> </li> <li>Return error messages for validation failures (e.g., \u201cInvalid Response...H or A or W or blank\u201d, \u201cField Cannot be Blank, If Vendor receives a 1099\u201d).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Integrity:</li> <li>Mandatory fields (<code>vnname</code>, <code>vnsort</code>, <code>vn1099</code>) must be non-blank.</li> <li>Reference fields (<code>vnexgl</code>, <code>vncaid</code>, <code>vnterm</code>, <code>vncatg</code>, <code>vn1099</code>) must exist in respective files (<code>GLMAST</code>, <code>BBCAID</code>, <code>GSTABL</code>) and not be deleted (except <code>vncatg</code>).</li> <li>1099-specific fields (<code>vnnmct</code>, <code>vnidno</code>, <code>vnbox1</code>) required for <code>vn1099 = 'M'</code> or <code>'N'</code>.</li> <li>Zip code (<code>vnzip5</code>) required for US vendors unless <code>vn1099 = 'X'</code> or <code>vnhold = 'E'</code>.</li> <li>Payee hierarchy: <code>vnpyn2</code> requires <code>vnpyn1</code>.</li> <li>1099 Processing:</li> <li>Supports year-specific vendor files (e.g., <code>APVN2025</code>) via <code>p$file</code>.</li> <li>File overrides (<code>G</code> or <code>Z</code>) ensure access to correct data sets.</li> <li>Status Management:</li> <li>Inactivation marks <code>vndel = 'I'</code>, reactivation marks <code>vndel = 'A'</code>.</li> <li>(Disabled) Inactivation restricted if vendor has outstanding activity.</li> <li>Mode Restrictions:</li> <li><code>MNT</code> allows create/update, <code>INQ</code> allows view only.</li> <li>Inactivation/reactivation is a maintenance action.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Message Data Length:</li> <li>For error messages, calculate length as <code>%len(%trim(m@data))</code> for <code>QMHSNDPM</code>.</li> <li>No Other Calculations: The function performs validations and status updates without numerical computations.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>APVEND</code>: Vendor master (update).</li> <li><code>APCONT</code>: Company data (input).</li> <li><code>GLMAST</code>: General ledger accounts (input).</li> <li><code>GSTABL</code>: Reference data (terms, category, 1099 codes) (input).</li> <li><code>BBCAID</code>: Carrier data (input).</li> <li><code>APOPNH</code>: Open invoices (input, used in disabled checks).</li> <li><code>INFIL4</code>: Inventory history (input, used in disabled checks).</li> <li>External Programs (for validations):</li> <li><code>LGLMAST</code>: GL account lookup.</li> <li><code>LBBCAID</code>: Carrier lookup.</li> <li><code>LGSTABL</code>: Terms, category, 1099 code lookup.</li> <li>(Disabled) <code>AP915P</code>: Vendor contact maintenance/inquiry.</li> <li>(Disabled) <code>STRPCOCLP</code>/<code>UpdateVendor.EXE</code>: SQL table sync.</li> <li>System Programs:</li> <li><code>QCMDEXC</code>: File overrides.</li> <li><code>QMHSNDPM</code>, <code>QMHRMVPM</code>: Message handling.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for validation failures.</li> <li>Set <code>p$flag</code> to indicate success (<code>1</code>, <code>A</code>, <code>D</code>) or leave unset for errors.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP910P99%20OCL%201099%20Vendor%20Maintenance/Summary%20AP910P99%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input data conforms to <code>APVEND</code> record format.</li> <li>File overrides are correctly configured for <code>p$fgrp</code> and <code>p$file</code>.</li> <li>Disabled features (ACH validation, balance checks, SQL sync) are not required.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/","title":"AP315 Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#overview","title":"Overview","text":"<p><code>AP315.rpg</code> updates 'C' (Control) and 'T' (Transmitter) records in the <code>AP1099</code> file with payment totals and payee counts based on 'B' (Payee) records.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Defines <code>AP1099I</code> as an update file (750 bytes, indexed).</li> <li> <p>Sets <code>TYPE</code> to 'B' for reading Payee records.</p> </li> <li> <p>Read 'B' Records:</p> </li> <li>Positions to first 'B' record (<code>SETLL</code>).</li> <li>Reads 'B' records (<code>READE</code>) until end-of-file (<code>*IN55</code>).</li> <li>Accumulates payment amounts (<code>A3PAY1\u2013A3PAYC</code>) into <code>W4TAM1\u2013W4TAMC</code> (15 digits, 2 decimals).</li> <li> <p>Increments payee counter (<code>W4CNT</code>).</p> </li> <li> <p>Update 'C' Record:</p> </li> <li>Chains to 'C' record (<code>CHAIN</code>).</li> <li>Sets total payment amounts (<code>A4TAM1\u2013A4TAMC</code>) and payee count (<code>A4CNT</code>) from accumulated values.</li> <li>Clears dummy fields (<code>DUM1\u2013DUM12</code>) to zeros.</li> <li> <p>Updates record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Update 'T' Record:</p> </li> <li>Chains to 'T' record.</li> <li>Sets total payees (<code>A1TPAY</code>) to <code>W4CNT</code>.</li> <li> <p>Updates record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Termination:</p> </li> <li>Sets <code>*INLR</code> to end program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Processes only 'B' records for totaling payments and counting payees.</li> <li>Updates 'C' record with payment totals and payee count.</li> <li>Updates 'T' record with total payees.</li> <li>Ensures IRS 1099 compliance for field positions and formats.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP315%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file for reading/updating records, 750 bytes.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/","title":"AP3155 Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#overview","title":"Overview","text":"<p><code>AP3155.rpg</code> updates the sequence number (<code>SEQ#</code>) field in all records of the <code>AP1099</code> file to ensure sequential numbering.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Defines <code>AP1099</code> as an update file (750 bytes, non-indexed).</li> <li> <p>Maps <code>SEQ#</code> field (positions 500\u2013507, 8 digits).</p> </li> <li> <p>Update Sequence Numbers:</p> </li> <li>Increments counter (<code>COUNT</code>, 11 digits) by 1.</li> <li>Assigns counter to <code>SEQ#</code> field.</li> <li> <p>Updates each record (<code>EXCPT UPDREC</code>).</p> </li> <li> <p>Termination:</p> </li> <li>Ends program after processing all records (implicit single-cycle processing).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Assigns sequential 8-digit numbers (starting from 1) to all records ('T', 'A', 'B', 'C', 'F').</li> <li>Ensures IRS 1099 compliance for sequence number formatting.</li> <li>No record type-specific logic or validation.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP3155%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Data file for updating sequence numbers, 750 bytes.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/","title":"AP945 (OCL) Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#overview","title":"Overview","text":"<p><code>AP945.ocl36</code> is an S/36 OCL procedure that builds an index file (<code>AP1099I</code> or <code>&lt;&amp;FGRP&gt;AP1099I</code>) for the <code>AP1099</code> file to enable efficient record access.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Check File Group:</li> <li> <p>Evaluates <code>?9?</code> (9th parameter, <code>&amp;FGRP</code> from <code>AP945C</code>).</p> </li> <li> <p>Build Index:</p> </li> <li>If <code>?9? = 'G'</code>, creates <code>AP1099I</code> for <code>AP1099</code> with key at position 1 (length 1), duplicate keys allowed, and fields at positions 7 (length 4) and 12 (length 9).</li> <li>If <code>?9? \u2260 'G'</code>, creates <code>&lt;&amp;FGRP&gt;AP1099I</code> for <code>&lt;&amp;FGRP&gt;AP1099</code> with the same key structure.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Creates index for efficient access by record type (position 1).</li> <li>Supports live (<code>&amp;FGRP = 'G'</code>) and test environments with dynamic file naming.</li> <li>Ensures duplicate keys are allowed for multiple records of the same type (e.g., 'B' records).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20OCL/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Input data file for index creation.</li> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Output index file.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/","title":"AP945 (RPGLE) Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#overview","title":"Overview","text":"<p><code>AP945.rpgle</code> provides a subfile-based user interface for adding, editing, deleting, or inquiring about 'T' (Transmitter), 'A' (Payer), and 'B' (Payee) records in the <code>AP1099</code> file.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Accepts <code>MODE</code> parameter ('INQ' or 'MNT').</li> <li>Sets inquiry mode (<code>*IN70</code> on) if <code>MODE = 'INQ'</code>.</li> <li> <p>Positions <code>AP1099I</code> to first 'A' record.</p> </li> <li> <p>Main Loop:</p> </li> <li>Displays subfile control (<code>SFLCTL</code>) with 'A', 'B', 'T' records via <code>@LOAD</code>.</li> <li> <p>Handles function keys:</p> <ul> <li>F03: Exit.</li> <li>F04: Prompt for company number (<code>PROMPT</code>).</li> <li>F06: Add record (<code>SRADD</code>).</li> <li>F12: Clear and reposition subfile (<code>@CLRSF</code>, <code>@REPOS</code>).</li> </ul> </li> <li> <p>Subfile Processing:</p> </li> <li> <p>Processes user selections (<code>SELIO</code>):</p> <ul> <li>Option 2: Edit/add record (<code>SFL02</code>, formats <code>FMT01</code>/'T', <code>FMT02</code>/'B', <code>FMT03</code>/'A').</li> <li>Option 3: Remove delete flag from 'B' records (<code>SFL03</code>, sets <code>A3DEL = ' '</code>).</li> <li>Option 4: Flag 'B' records for deletion (<code>SFL04</code>, sets <code>A3DEL = 'Y'</code>).</li> <li>Option 5: Display record in inquiry mode (<code>SFL05</code>).</li> </ul> </li> <li> <p>Add/Edit:</p> </li> <li>Validates inputs (<code>C$TY</code>, <code>C$CTL</code>, <code>C$TIN</code>) and checks for duplicates (<code>SRADD</code>).</li> <li> <p>Updates/adds records via <code>SRUPDT</code> (<code>UPDREC</code> or <code>ADDREC</code>).</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>Displays error messages (e.g., \"Invalid Type Entered\") via <code>ADDMSG</code>, <code>WRTMSG</code>, <code>CLRMSG</code>.</p> </li> <li> <p>Termination:</p> </li> <li>Closes files and ends program.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Maintains 'T', 'A', 'B' records; 'C' and 'F' are not editable.</li> <li>Validates non-blank record type, control number, TIN; prevents duplicates.</li> <li>Flags 'B' records for deletion (<code>A3DEL = 'Y'</code>) or unflagging (<code>A3DEL = ' '</code>).</li> <li>Supports inquiry (<code>MODE = 'INQ'</code>) and maintenance (<code>MODE = 'MNT'</code>) modes.</li> <li>Ensures IRS 1099 field compliance (e.g., <code>A3PAY1\u2013A3PAYG</code>).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945%20RPGLE/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file for reading/updating records, 824 bytes.</li> <li>AP945D: Display file with subfile (<code>SFL</code>) and formats (<code>SFLCTL</code>, <code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>MSGCTL</code>, <code>MSGCLR</code>).</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/","title":"AP945C Program Details","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#overview","title":"Overview","text":"<p><code>AP945C.clp</code> is a CL program that orchestrates the maintenance of the IRS 1099 file (<code>AP1099</code>), ensuring compliance through index creation, user-driven record updates, reorganization, total calculations, and sequence number updates.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#process-steps","title":"Process Steps","text":"<ol> <li>Retrieve Parameters:</li> <li>Accepts <code>&amp;MODE</code> (e.g., 'MNT' for maintenance) and <code>&amp;FGRP</code> (e.g., 'G' for live, 'T' for test).</li> <li> <p>Sets library to <code>QS36F</code> and file names (<code>&amp;FILE</code>, <code>&amp;SAVE</code>, <code>&amp;INDEX</code>) based on <code>&amp;FGRP</code> (e.g., <code>AP1099</code>, <code>AP1099SAV</code>, <code>AP1099I</code> or prefixed with <code>&amp;FGRP</code>).</p> </li> <li> <p>Create Index:</p> </li> <li> <p>Calls <code>AP945</code> (OCL) to create index file <code>&amp;INDEX</code> for <code>&amp;FILE</code>.</p> </li> <li> <p>Maintenance:</p> </li> <li> <p>Overrides <code>AP1099</code> to <code>&amp;FILE</code> and calls <code>AP945</code> (RPGLE) with <code>&amp;MODE</code> for user-driven record maintenance (add/edit/delete/inquire).</p> </li> <li> <p>Backup and Reorganize (if &amp;MODE = 'MNT'):</p> </li> <li>Copies <code>&amp;FILE</code> to <code>&amp;SAVE</code>, replacing existing records.</li> <li> <p>Copies records back to <code>&amp;FILE</code> in order: 'T' (replace), 'A' (add), 'B' (add, excluding position 45 = 'Y'), 'C' (add), 'F' (add).</p> </li> <li> <p>Update Totals:</p> </li> <li> <p>Calls <code>AP315</code> to update 'C' and 'T' record totals based on 'B' records.</p> </li> <li> <p>Update Sequence Numbers:</p> </li> <li> <p>Calls <code>AP3155</code> to assign sequential numbers to all records in <code>&amp;FILE</code>.</p> </li> <li> <p>Clean Up:</p> </li> <li>Deletes index file <code>&amp;INDEX</code>.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#business-rules","title":"Business Rules","text":"<ul> <li>Ensures IRS 1099 compliance with record order and format.</li> <li>Supports live (<code>&amp;FGRP = 'G'</code>) and test environments via dynamic file naming.</li> <li>Maintains data integrity with backup to <code>&amp;SAVE</code>.</li> <li>Excludes deleted 'B' records (position 45 = 'Y') during reorganization.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#external-programs-called","title":"External Programs Called","text":"<ul> <li><code>AP945</code> (OCL Procedure): Creates index file.</li> <li><code>AP945</code> (RPGLE Program): Handles user maintenance/inquiry.</li> <li><code>AP315</code> (RPG Program): Updates totals in 'C' and 'T' records.</li> <li><code>AP3155</code> (RPG Program): Updates sequence numbers.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/AP945C%20CLP/#tables-used","title":"Tables Used","text":"<ul> <li>AP1099 (or <code>&lt;&amp;FGRP&gt;AP1099</code>): Main 1099 data file, updated and reorganized.</li> <li>AP1099I (or <code>&lt;&amp;FGRP&gt;AP1099I</code>): Index file, created and deleted.</li> <li>AP1099SAV (or <code>&lt;&amp;FGRP&gt;AP1099SV</code>): Backup file for pre-maintenance data.</li> <li>Library: <code>QS36F</code>.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/","title":"Summary AP945C","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>Based on the full call stack (<code>AP945C.clp</code>, <code>AP945.ocl36</code>, <code>AP945.rpgle</code>, <code>AP315.rpg</code>, <code>AP3155.rpg</code>), the programs collectively implement a single primary use case:</p> <ol> <li>Maintain IRS 1099 File:</li> <li>This use case involves maintaining the <code>AP1099</code> file to ensure compliance with IRS 1099 tax form requirements. It supports both live and test environments, handles programmatic record updates (add, edit, delete 'T', 'A', and 'B' records), calculates payment totals, resequences records, and preserves data integrity through backup and reorganization.</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-requirement-document-irs-1099-file-maintenance","title":"Function Requirement Document: IRS 1099 File Maintenance","text":""},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#function-overview","title":"Function Overview","text":"<p>The <code>Maintain1099File</code> function processes and maintains the <code>AP1099</code> file to ensure compliance with IRS 1099 tax form requirements. It supports live and test environments, updates payment totals, resequences records, and preserves data integrity through backup and reorganization, using programmatic inputs instead of screen interactions.</p>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#inputs","title":"Inputs","text":"<ul> <li>Mode: String (3 characters, e.g., 'MNT' for maintenance, 'INQ' for inquiry).</li> <li>FileGroup: String (1 character, 'G' for live files, other values for test files, e.g., 'T').</li> <li>AP1099Data: File containing 1099 records ('T' for Transmitter, 'A' for Payer, 'B' for Payee, 'C' for Control, 'F' for End) in library <code>QS36F</code>.</li> <li>RecordUpdates: Array of updates for 'T', 'A', 'B' records, including record type, control number, TIN, payment amounts, and other IRS-required fields (e.g., names, addresses).</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#outputs","title":"Outputs","text":"<ul> <li>Updated AP1099 File: File with updated records, totals, resequenced records, and maintained data in <code>QS36F</code>.</li> <li>AP1099SAV File: Backup file containing pre-maintenance data (if Mode = 'MNT').</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#process-steps","title":"Process Steps","text":"<ol> <li>Determine File Names:</li> <li>If FileGroup = 'G', use file names: <code>AP1099</code>, <code>AP1099I</code> (index), <code>AP1099SAV</code> (save).</li> <li>If FileGroup \u2260 'G', prefix files with FileGroup (e.g., <code>TAP1099</code>, <code>TAP1099I</code>, <code>TAP1099SV</code>).</li> <li> <p>Set library to <code>QS36F</code>.</p> </li> <li> <p>Create Index File:</p> </li> <li> <p>Build index file (<code>AP1099I</code> or <code>&lt;FileGroup&gt;AP1099I</code>) for <code>AP1099</code> with key at position 1 (length 1), allowing duplicate keys, and additional fields at positions 7 (length 4) and 12 (length 9).</p> </li> <li> <p>Perform Maintenance (if Mode = 'MNT'):</p> </li> <li>Process RecordUpdates array:<ul> <li>Add: Validate record type ('T', 'A', 'B'), control number, and TIN for non-blank values; check for duplicates; add new records to <code>AP1099I</code>.</li> <li>Edit: Update existing 'T', 'A', or 'B' records with provided fields (e.g., payment amounts, names, addresses).</li> <li>Delete: Flag 'B' records with <code>A3DEL = 'Y'</code> (position 45) or unflag (<code>A3DEL = ' '</code>) for removal/restoration.</li> </ul> </li> <li> <p>If Mode = 'INQ', skip updates and return record data.</p> </li> <li> <p>Backup and Reorganize (if Mode = 'MNT'):</p> </li> <li>Copy <code>AP1099</code> to <code>AP1099SAV</code>, replacing existing records.</li> <li> <p>Copy records back to <code>AP1099</code> in order:</p> <ul> <li>'T' records (replace existing).</li> <li>'A' records (add).</li> <li>'B' records where position 45 \u2260 'Y' and record type = 'B' (add).</li> <li>'C' records (add).</li> <li>'F' records (add).</li> </ul> </li> <li> <p>Update Totals:</p> </li> <li>For 'B' records:<ul> <li>Sum payment amounts (<code>A3PAY1</code> to <code>A3PAYG</code>, positions 55\u2013246, 12 digits, 2 decimals).</li> <li>Count total payees.</li> </ul> </li> <li>Update 'C' record:<ul> <li>Set total payment amounts (<code>A4TAM1</code> to <code>A4TAMG</code>, positions 19\u2013303) to sums from 'B' records.</li> <li>Set payee count (<code>A4CNT</code>, positions 2\u20139) to total payee count.</li> </ul> </li> <li> <p>Update 'T' record:</p> <ul> <li>Set total payees (<code>A1TPAY</code>, positions 296\u2013303) to total payee count.</li> </ul> </li> <li> <p>Update Sequence Numbers:</p> </li> <li> <p>Assign sequential numbers (starting from 1) to all records in <code>AP1099</code> at positions 500\u2013507 (8 digits).</p> </li> <li> <p>Clean Up:</p> </li> <li>Delete index file (<code>AP1099I</code> or <code>&lt;FileGroup&gt;AP1099I</code>).</li> </ol>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#business-rules","title":"Business Rules","text":"<ul> <li>IRS Compliance: Ensure 'T', 'A', 'B', 'C', 'F' records are in correct order and format per IRS 1099 specifications (e.g., <code>A3PAY1\u2013A3PAYG</code>, <code>A1TIN</code>, <code>A2TIN</code>).</li> <li>Environment Support: Handle live (FileGroup = 'G') and test (FileGroup \u2260 'G') files with dynamic naming.</li> <li>Data Integrity: Back up <code>AP1099</code> to <code>AP1099SAV</code> before changes; copy records in specified order.</li> <li>Record Updates:</li> <li>Validate non-blank record type ('T', 'A', 'B'), control number, and TIN; prevent duplicates.</li> <li>Only 'B' records can be flagged for deletion (<code>A3DEL = 'Y'</code>) or unflagged (<code>A3DEL = ' '</code>).</li> <li>Calculations:</li> <li>Sum 'B' record payment amounts (12 digits, 2 decimals) for 'C' record totals (<code>A4TAM1\u2013A4TAMG</code>).</li> <li>Count 'B' records for payee totals in 'C' (<code>A4CNT</code>) and 'T' (<code>A1TPAY</code>) records.</li> <li>Assign 8-digit sequential numbers to all records.</li> <li>Record Filtering: Exclude 'B' records where position 45 = 'Y' during reorganization.</li> <li>File Management: Use <code>QS36F</code> library; create and delete index file for performance.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#assumptions","title":"Assumptions","text":"<ul> <li>Input <code>AP1099</code> file exists in <code>QS36F</code> with valid IRS 1099 record formats.</li> <li><code>RecordUpdates</code> array contains valid data for 'T', 'A', 'B' records, including required fields.</li> <li>Sufficient disk space for <code>AP1099SAV</code> and index files.</li> </ul>"},{"location":"accounts-payable/07%20Vendor%201099/AP945C%20CL%201099%20Update%20File/Summary%20AP945C/#constraints","title":"Constraints","text":"<ul> <li>Sequence numbers are 8 digits, limiting to 99,999,999 records.</li> <li>Payment amounts are 12 digits with 2 decimals, aligning with IRS field lengths.</li> <li>No validation of input record data beyond record type, control number, TIN, and position 45 checks.</li> <li>'C' and 'F' records are not editable; only updated programmatically by totals and sequence steps.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/","title":"AR190 OCL","text":"<p>The document outlines two related processes in an RPG .OCL (Operation Control Language) program for managing A/R (Accounts Receivable) Salesman Change Transactions: one for adding/updating transactions (AR190) and another for editing transactions (AR191). These processes appear to be part of a legacy system, likely running on an IBM AS/400 or similar platform, given the .OCL syntax and file structure references.</p> <p>Below, I\u2019ll explain the process steps for each section, list the external programs called, and identify the tables (files) used, based on the provided document.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#1-ar-salesman-change-transaction-addupdate-ar190","title":"1. A/R Salesman Change Transaction Add/Update (AR190)","text":"<p>This section describes the process for adding or updating salesman change transactions in the Accounts Receivable system.</p> <p>Process Steps: 1. Initialization and File Setup (BLDFILE):    - The program uses the <code>BLDFILE</code> command to create or prepare a file named <code>?9?ARSLST</code> (likely <code>ARSLST</code> with a system-specific prefix <code>?9?</code>).    - Parameters: <code>I</code> (input mode), <code>RECORDS,500</code> (allocates space for 500 records), <code>256</code> (record length), <code>2,8</code> (key field specifications, likely indicating a key starting at position 2 with a length of 8), <code>DFILE</code> (data file type), and <code>50</code> (possibly a file size or block factor).    - This step ensures the <code>ARSLST</code> file is ready to store salesman change transaction data.</p> <ol> <li>File Definitions:</li> <li>The program specifies four files to be loaded with <code>DISP-SHRMM</code> (shared multiple access mode, allowing concurrent access):<ul> <li><code>ARSLST</code>: The primary file for salesman change transactions.</li> <li><code>ARCONT</code>: Likely a control file containing configuration or control data for the A/R system.</li> <li><code>ARCUST</code>: The customer master file, containing customer-related data.</li> <li><code>GSTABL</code>: A general table file, possibly containing lookup or reference data (e.g., salesman codes, statuses).</li> </ul> </li> <li> <p>These files are labeled with a <code>?9?</code> prefix, indicating a system or library-specific naming convention.</p> </li> <li> <p>Program Execution:</p> </li> <li>The <code>LOAD AR190</code> command loads the RPG program <code>AR190</code>.</li> <li>The <code>RUN</code> command executes the <code>AR190</code> program, which processes the add/update logic for salesman change transactions.</li> <li>The program likely:<ul> <li>Reads input data (e.g., new or updated salesman assignments).</li> <li>Validates the data against <code>ARCUST</code> (customer records) and <code>GSTABL</code> (reference data).</li> <li>Updates or adds records to the <code>ARSLST</code> file, possibly using <code>ARCONT</code> for control parameters.</li> <li>Ensures data integrity and consistency across the files.</li> </ul> </li> </ol> <p>Purpose: - This process allows users to add new salesman change transactions or update existing ones, likely reassigning customers to different salesmen in the A/R system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#2-ar-salesman-change-transaction-edit-ar191","title":"2. A/R Salesman Change Transaction Edit (AR191)","text":"<p>This section describes the process for editing existing salesman change transactions.</p> <p>Process Steps: 1. File Definitions:    - The program specifies three files with <code>DISP-SHRMM</code>:      - <code>ARSLST</code>: The salesman change transaction file (same as in AR190).      - <code>ARCUST</code>: The customer master file.      - <code>GSTABL</code>: The general table file.    - Note: The <code>ARCONT</code> file is not used in this process, suggesting that editing transactions does not require control file data.</p> <ol> <li>Program Execution:</li> <li>The <code>LOAD AR191</code> command loads the RPG program <code>AR191</code>.</li> <li>The <code>RUN</code> command executes the <code>AR191</code> program, which handles the editing of salesman change transactions.</li> <li>The program likely:<ul> <li>Retrieves existing transaction records from <code>ARSLST</code>.</li> <li>Allows users to modify transaction details (e.g., salesman codes, customer assignments).</li> <li>Validates changes against <code>ARCUST</code> (to ensure valid customer data) and <code>GSTABL</code> (for valid reference data).</li> <li>Updates the <code>ARSLST</code> file with the modified records.</li> </ul> </li> </ol> <p>Purpose: - This process enables users to correct or modify existing salesman change transactions, ensuring the A/R system reflects accurate salesman-customer assignments.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The document explicitly references two RPG programs: 1. AR190: Handles the add/update process for salesman change transactions. 2. AR191: Handles the edit process for salesman change transactions.</p> <p>No additional external programs are mentioned in the provided .OCL code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are referenced in the .OCL program: 1. ARSLST: The primary file for storing salesman change transactions. Used in both AR190 and AR191. 2. ARCUST: The customer master file, containing customer data. Used in both AR190 and AR191. 3. GSTABL: A general table file, likely containing reference data such as salesman codes or statuses. Used in both AR190 and AR191. 4. ARCONT: A control file, likely containing configuration or control data for the A/R system. Used only in AR190.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20OCL/#summary","title":"Summary","text":"<ul> <li>AR190 (Add/Update):</li> <li>Prepares the <code>ARSLST</code> file using <code>BLDFILE</code>.</li> <li>Loads and uses <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, and <code>ARCONT</code> files.</li> <li>Executes the <code>AR190</code> program to add or update salesman change transactions.</li> <li>AR191 (Edit):</li> <li>Loads and uses <code>ARSLST</code>, <code>ARCUST</code>, and <code>GSTABL</code> files.</li> <li>Executes the <code>AR191</code> program to edit existing salesman change transactions.</li> <li>External Programs: <code>AR190</code>, <code>AR191</code>.</li> <li>Tables Used: <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARCONT</code> (only in AR190).</li> </ul> <p>If you have additional details (e.g., the RPG source code for AR190/AR191 or specific transaction formats), I can provide a more detailed explanation of the processing logic. Let me know if you\u2019d like me to search for related information or analyze any uploaded files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/","title":"AR190 RPG36","text":"<p>The RPG program <code>AR190.rpg36.txt</code> is an RPG/36 program (likely for an IBM System/36 or AS/400 environment) that handles the A/R Salesman Change Transaction Add/Update process, as referenced in the previously provided <code>.OCL</code> file (AR190.ocl36.txt). Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called based on the provided RPG code. The program manages the addition and updating of salesman change transactions in an Accounts Receivable (A/R) system, allowing users to assign or reassign salesmen to customers and mark transactions for deletion.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#process-steps-of-rpg-program-ar190","title":"Process Steps of RPG Program AR190","text":"<p>The <code>AR190</code> program is an interactive application that uses a workstation (display) file to manage salesman change transactions. It operates with two primary screens (<code>S1</code> and <code>S2</code>) and performs validation, data retrieval, and file updates. Below is a detailed breakdown of the process steps, derived from the RPG code:</p> <ol> <li>Program Initialization and File Setup:</li> <li>The program defines four files:<ul> <li><code>SCREEN</code>: A workstation file (display device) for user interaction, with a record length of 1000 bytes.</li> <li><code>ARSLST</code>: A disk file (update mode, <code>UF</code>) for salesman change transactions, with a record length of 256 bytes and an 8-byte key starting at position 2.</li> <li><code>ARCONT</code>: A disk file (input mode, <code>IF</code>) for A/R control data, with a 256-byte record length and a 2-byte key.</li> <li><code>ARCUST</code>: A disk file (input mode, <code>IF</code>) for customer master data, with a 384-byte record length and an 8-byte key.</li> <li><code>GSTABL</code>: A disk file (input mode, <code>IF</code>) for general table data (e.g., salesman codes), with a 256-byte record length and a 12-byte key.</li> </ul> </li> <li> <p>The program initializes variables and clears the screen fields for the first display (<code>$SBLK</code> subroutine, lines 0084\u20130105).</p> <ul> <li>Clears arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and sets the initial screen format to <code>S1</code> (<code>@SFNEX = 'S1'</code>).</li> <li>Turns off error indicators and sets display indicators (e.g., 99, 81) to control screen behavior.</li> </ul> </li> <li> <p>Main Processing Loop (<code>$SFNEX DOWNE 'EJ'</code>, lines 0068\u20130079):</p> </li> <li>The program enters a loop that continues until the user presses a command key to exit (<code>@SFNEX = 'EJ'</code>).</li> <li>Based on the screen format identifier (<code>@SFID</code>):<ul> <li>If <code>@SFID</code> is blank, it calls <code>$SBLK</code> to initialize the screen (first-time display).</li> <li>If <code>@SFID = 'S1'</code>, it processes the first screen (<code>$S1</code> subroutine).</li> <li>If <code>@SFID = 'S2'</code>, it processes the second screen (<code>$S2</code> subroutine).</li> </ul> </li> <li> <p>After processing the screen, it calls <code>$XCPT</code> to display the next screen and reads user input from the <code>SCREEN</code> file (<code>READ SCREEN</code>, with or without the Last Record indicator based on <code>@CCNT</code>).</p> </li> <li> <p>Screen 1 Processing (<code>$S1</code>, lines 0108\u20130115):</p> </li> <li>Purpose: Collects the company number (<code>CO</code>) and an optional customer number (<code>SCUS</code>) to filter transactions.</li> <li> <p>Steps:</p> <ul> <li>Reads the <code>S1</code> screen input (<code>AR190S1</code> format, lines 0678\u20130682).</li> <li>Checks the function key pressed (<code>@VKEY</code>):</li> <li>If <code>ENTER</code> (<code>@VKEY = 0</code>), calls <code>$S1ENT</code> to validate and process the input.</li> <li>If a command key is pressed (<code>@VKEY = 2</code>), calls <code>$S1CK</code> to handle command key functions (e.g., exit).</li> <li>Validation (<code>$S1ENT</code>, lines 0118\u20130146):</li> <li>Ensures the company number (<code>CO</code>) is not zero; if it is, displays error message MSG1 (\"COMPANY NUMBER CANNOT BE BLANK\") and sets indicator 90 (error) and 81 (highlight field).</li> <li>Validates <code>CO</code> against the <code>ARCONT</code> file using <code>CHAIN</code>. If not found, displays MSG2 (\"COMPANY NOT IN CONTROL FILE\") and sets error indicators.</li> <li>If valid, sets up keys (<code>FRKEY</code>, <code>TOPKEY</code>, <code>BOTKEY</code>) for accessing <code>ARSLST</code> and moves to screen <code>S2</code> by setting <code>@SFNEX = 'S2'</code>.</li> <li>Calls <code>$S2RFW</code> to populate screen <code>S2</code> with transaction data.</li> <li>Command Keys (<code>$S1CK</code>, lines 0149\u20130154):</li> <li>If command key <code>KG</code> is pressed, sets <code>@SFNEX = 'EJ'</code> to exit the program.</li> </ul> </li> <li> <p>Screen 2 Processing (<code>$S2</code>, lines 0157\u20130166):</p> </li> <li>Purpose: Displays and allows editing of up to 10 salesman change transactions, including customer number (<code>CUS</code>), old salesman code (<code>SLO</code>), new salesman code (<code>SLN</code>), salesman name (<code>SLNM</code>), and delete code (<code>DL</code>).</li> <li> <p>Steps:</p> <ul> <li>Reads the <code>S2</code> screen input (<code>AR190S2</code> format, lines 0683\u20130694).</li> <li>Checks the function key pressed (<code>@VKEY</code>):</li> <li>If <code>ENTER</code> (<code>@VKEY = 0</code>), calls <code>$S2ENT</code> to validate and update transactions.</li> <li>If a command key is pressed (<code>@VKEY = 2</code>), calls <code>$S2CK</code> to handle command keys (e.g., exit or return to <code>S1</code>).</li> <li>If <code>ROLL UP</code> (<code>@VKEY = 01122</code>), calls <code>$S2RFW</code> to display the next set of records.</li> <li>If <code>ROLL DOWN</code> (<code>@VKEY = 01123</code>), calls <code>$S2RBW</code> to display the previous set of records.</li> </ul> </li> <li> <p>Screen 2 Validation and Update (<code>$S2ENT</code>, lines 0169\u20130334):</p> </li> <li>Validation Loop (lines 0173\u20130288):<ul> <li>Iterates through the 10 transaction lines (<code>X = 1 to 10</code>).</li> <li>For each line where <code>DL,X \u2260 'D'</code> (not marked for deletion):</li> <li>Customer Validation:<ul> <li>If a salesman is keyed (<code>SLN,X \u2260 0</code>) but no customer is provided (<code>CUS,X = 0</code>), sets error indicators (70\u201379) and displays MSG3 (\"CUSTOMER CANNOT BE ZERO\") and MSG4 (\"WHEN NEW SALESMAN IS KEYED\").</li> <li>If a customer is keyed (<code>CUS,X \u2260 0</code>), validates it against <code>ARCUST</code> using <code>CHAIN</code>. If not found, sets error indicators (70\u201379) and displays MSG5 (\"INVALID CUSTOMER NUMBER\").</li> <li>If valid, retrieves the customer name (<code>ARNAME</code> to <code>CUNM,X</code>) and old salesman code (<code>ARSLMN</code> to <code>SLO,X</code>).</li> </ul> </li> <li>New Salesman Validation:<ul> <li>If a customer is keyed, validates the new salesman code (<code>SLN,X</code>) against <code>GSTABL</code> using <code>CHAIN</code> with key <code>SLSMAN + SLN,X</code>. If not found, sets error indicators (60\u201369) and displays MSG6 (\"INVALID NEW SALESMAN CODE\").</li> <li>If valid, retrieves the salesman name (<code>TBDESC</code> to <code>SLNM,X</code>).</li> <li>Note: A validation check for <code>SLN,X \u2260 SLO,X</code> (new salesman different from old) was removed on 09/27/17, per the comment on line 0247.</li> </ul> </li> <li>Delete Code Validation:<ul> <li>If a customer is keyed, checks if the delete code (<code>DL,X</code>) is <code>' '</code>, <code>'A'</code>, or <code>'D'</code>. If invalid, sets error indicators (40\u201349) and displays MSG7 (\"DELETE CODE MUST BE ' ',A, OR D\").</li> </ul> </li> <li>If any validation errors occur, jumps to <code>ENDS2E</code> to redisplay the screen with error messages.</li> </ul> </li> <li> <p>Update Transactions (lines 0294\u20130315):</p> <ul> <li>Iterates through the 10 transaction lines again.</li> <li>For each line with a customer number (<code>CUS,X \u2260 0</code>):</li> <li>Builds a key (<code>FRKEY = CO + CUS,X</code>) and checks <code>ARSLST</code> using <code>CHAIN</code>.</li> <li>If <code>DL,X \u2260 'D'</code>:<ul> <li>If the record exists (<code>95 off</code>), updates it (<code>EXCPTUPDREC</code>).</li> <li>If the record doesn\u2019t exist (<code>95 on</code>), adds it (<code>EXCPTADDREC</code>).</li> </ul> </li> <li>If <code>DL,X = 'D'</code> and the record doesn\u2019t exist (<code>95 off</code>), deletes it (<code>EXCPTDELREC</code>).</li> <li>Updates <code>BOTKEY</code> and <code>SVKEY</code> to track the highest key processed.</li> <li>If the last line has a customer (<code>CUS,10 &gt; 0</code>), sets <code>S2FULL = 'Y'</code> to indicate a full screen.</li> <li>If no records are entered (<code>CUS,10 = 0</code> and <code>SLN,10 = 0</code>), returns to screen <code>S1</code> (<code>@SFNEX = 'S1'</code>) and clears fields (<code>CLRFLD</code>).</li> <li>Otherwise, calls <code>$S2RFW</code> to refresh the screen with the next set of records and sets <code>@SFNEX = 'S2'</code>.</li> </ul> </li> <li> <p>Roll Up (Forward) (<code>$S2RFW</code>, lines 0351\u20130484):</p> </li> <li>Populates screen <code>S2</code> with the next set of records from <code>ARSLST</code> starting at <code>BOTKEY</code>.</li> <li>Clears arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and resets indicators.</li> <li>Reads <code>ARSLST</code> sequentially, filtering by company number (<code>ASCO = CO</code>).</li> <li>For each valid record (up to 10):<ul> <li>Copies data to screen arrays (<code>ASCUST</code> to <code>CUS,Y</code>, <code>ASSLSO</code> to <code>SLO,Y</code>, <code>ASSLSN</code> to <code>SLN,Y</code>, <code>ASDEL</code> to <code>DL,Y</code>).</li> <li>Retrieves customer name from <code>ARCUST</code> and salesman name from <code>GSTABL</code>.</li> <li>If the record is marked deleted (<code>ASDEL = 'D'</code>), displays MSG8 (\"THIS RECORD PREVIOUSLY DELETED\").</li> <li>Sets indicators (50\u201359, 60\u201369) to protect fields for existing records.</li> </ul> </li> <li>Updates <code>TOPKEY</code> and <code>BOTKEY</code> to track the range of displayed records.</li> <li>If the end of the file is reached, displays MSG9 (\"END OF FILE HAS BEEN REACHED\") and calls <code>RESET</code> to redisplay the last screen.</li> <li> <p>If fewer than 10 records are read and <code>S2FULL \u2260 'Y'</code>, clears remaining fields.</p> </li> <li> <p>Roll Down (Backward) (<code>$S2RBW</code>, lines 0539\u20130615):</p> </li> <li>Populates screen <code>S2</code> with the previous set of records from <code>ARSLST</code> starting at <code>TOPKEY</code>.</li> <li>Reads <code>ARSLST</code> in reverse (<code>READP</code>) until 10 records are loaded or the beginning of the file is reached.</li> <li>Similar to <code>$S2RFW</code>, copies data to screen arrays, retrieves names, and sets indicators.</li> <li>If the beginning of the file is reached, displays MSG10 (\"BEGINNING OF FILE HAS BEEN REACHED\").</li> <li> <p>Updates <code>TOPKEY</code> and <code>BOTKEY</code> accordingly.</p> </li> <li> <p>Screen 2 Command Keys (<code>$S2CK</code>, lines 0337\u20130348):</p> </li> <li>If command key <code>KA</code> is pressed, clears fields (<code>CLRFLD</code>) and returns to screen <code>S1</code> (<code>@SFNEX = 'S1'</code>).</li> <li> <p>If command key <code>KG</code> is pressed, exits the program (<code>@SFNEX = 'EJ'</code>).</p> </li> <li> <p>Display Next Screen (<code>$XCPT</code>, lines 0618\u20130637):</p> </li> <li>Increments a counter (<code>@CCNT</code>) to track screen displays.</li> <li>Displays the appropriate screen based on <code>@SFNEX</code>:<ul> <li>If <code>@SFNEX = 'S1'</code>, outputs the <code>AR190S1</code> format.</li> <li>If <code>@SFNEX = 'S2'</code>, outputs the <code>AR190S2</code> format.</li> </ul> </li> <li> <p>Calls <code>CLRIND</code> to reset error indicators and clear message fields (<code>MSG1</code>, <code>MSG2</code>).</p> </li> <li> <p>Field and Indicator Clearing:</p> <ul> <li>CLRIND (lines 0640\u20130662): Resets error indicators (40\u201349, 60\u201369, 70\u201379, 90, 91, etc.) and clears message fields.</li> <li>CLRFLD (lines 0665\u20130675): Clears screen arrays (<code>CUS</code>, <code>CUNM</code>, <code>SLO</code>, <code>SLN</code>, <code>SLNM</code>, <code>DL</code>) and <code>S2FULL</code>.</li> </ul> </li> <li> <p>Output Operations:</p> <ul> <li>ADDREC (lines 0696\u20130701): Adds a new record to <code>ARSLST</code> with company number (<code>CO</code>), customer number (<code>CUS,X</code>), old salesman (<code>SLO,X</code>), and new salesman (<code>SLN,X</code>).</li> <li>UPDREC (lines 0703\u20130706): Updates an existing <code>ARSLST</code> record with delete code (<code>DL,X</code>), old salesman (<code>SLO,X</code>), and new salesman (<code>SLN,X</code>).</li> <li>DELREC (line 0708): Deletes a record from <code>ARSLST</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for managing salesman change transactions:</p> <ol> <li>Company Number Validation:</li> <li>The company number (<code>CO</code>) must not be blank/zero (MSG1: \"COMPANY NUMBER CANNOT BE BLANK\").</li> <li> <p>The company number must exist in the <code>ARCONT</code> file (MSG2: \"COMPANY NOT IN CONTROL FILE\").</p> </li> <li> <p>Customer Number Validation:</p> </li> <li>If a new salesman code (<code>SLN,X</code>) is entered, a customer number (<code>CUS,X</code>) must be provided (MSG3: \"CUSTOMER CANNOT BE ZERO\" and MSG4: \"WHEN NEW SALESMAN IS KEYED\").</li> <li> <p>The customer number must exist in the <code>ARCUST</code> file (MSG5: \"INVALID CUSTOMER NUMBER\").</p> </li> <li> <p>Salesman Code Validation:</p> </li> <li>The new salesman code (<code>SLN,X</code>) must exist in the <code>GSTABL</code> file under the <code>SLSMAN</code> table (MSG6: \"INVALID NEW SALESMAN CODE\").</li> <li> <p>A previous rule requiring the new salesman to differ from the old salesman (<code>SLN,X \u2260 SLO,X</code>) was removed on 09/27/17 (lines 0247\u20130264).</p> </li> <li> <p>Delete Code Validation:</p> </li> <li>The delete code (<code>DL,X</code>) must be <code>' '</code> (blank), <code>'A'</code>, or <code>'D'</code> (MSG7: \"DELETE CODE MUST BE ' ',A, OR D\").</li> <li> <p>If <code>DL,X = 'D'</code>, the record is marked for deletion, and if it doesn\u2019t exist in <code>ARSLST</code>, it is deleted via <code>EXCPTDELREC</code>.</p> </li> <li> <p>Transaction Processing:</p> </li> <li>If a customer number is entered:<ul> <li>If the record exists in <code>ARSLST</code> and <code>DL,X \u2260 'D'</code>, it is updated (<code>UPDREC</code>).</li> <li>If the record does not exist and <code>DL,X \u2260 'D'</code>, it is added (<code>ADDREC</code>).</li> <li>If the record does not exist and <code>DL,X = 'D'</code>, it is deleted (<code>DELREC</code>).</li> </ul> </li> <li> <p>Deleted records in <code>ARSLST</code> (<code>ASDEL = 'D'</code>) are flagged with MSG8 (\"THIS RECORD PREVIOUSLY DELETED\").</p> </li> <li> <p>Screen Navigation:</p> </li> <li>Screen <code>S1</code> collects the company number and optional customer number.</li> <li>Screen <code>S2</code> displays up to 10 transactions and supports roll-up/roll-down for navigation.</li> <li>If no records are entered or the end of the file is reached, the program returns to screen <code>S1</code>.</li> <li>The end of the file (<code>ARSLST</code>) triggers MSG9 (\"END OF FILE HAS BEEN REACHED\").</li> <li> <p>The beginning of the file triggers MSG10 (\"BEGINNING OF FILE HAS BEEN REACHED\").</p> </li> <li> <p>Field Protection:</p> </li> <li>Customer numbers for existing records are protected (indicators 50\u201359) to prevent modification.</li> <li> <p>Error indicators (40\u201349, 60\u201369, 70\u201379) highlight invalid fields on screen <code>S2</code>.</p> </li> <li> <p>Data Retrieval:</p> </li> <li>Customer names are retrieved from <code>ARCUST</code> (<code>ARNAME</code>).</li> <li>Salesman names are retrieved from <code>GSTABL</code> (<code>TBDESC</code>) for the <code>SLSMAN</code> table.</li> <li>The old salesman code is retrieved from <code>ARCUST</code> (<code>ARSLMN</code>) or <code>ARSLST</code> (<code>ASSLSO</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are used by the <code>AR190</code> program: 1. SCREEN: Workstation file for user interaction (display/input). 2. ARSLST: Salesman change transaction file (update mode, <code>UF</code>), stores transaction records with fields:    - <code>ASDEL</code> (1 byte, delete code: <code>' '</code>, <code>'A'</code>, or <code>'D'</code>).    - <code>ASCO</code> (company number, positions 2\u20133).    - <code>ASCUST</code> (customer number, positions 4\u20139).    - <code>ASSLSO</code> (old salesman code, positions 10\u201311).    - <code>ASSLSN</code> (new salesman code, positions 12\u201313). 3. ARCONT: A/R control file (input mode, <code>IF</code>), contains company data with fields:    - <code>ACNAME</code> (company name, positions 4\u201333). 4. ARCUST: Customer master file (input mode, <code>IF</code>), contains customer data with fields:    - <code>ARNAME</code> (customer name, positions 10\u201339).    - <code>ARSLMN</code> (salesman code, positions 263\u2013264). 5. GSTABL: General table file (input mode, <code>IF</code>), contains reference data (e.g., salesman codes) with fields:    - <code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR190</code> program does not explicitly call any external programs (e.g., via <code>CALL</code> operations). It operates as a standalone program, handling all logic internally through subroutines.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR190%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes files and screen fields.</li> <li>Uses a main loop to process two screens: <code>S1</code> (company/customer input) and <code>S2</code> (transaction display/edit).</li> <li>Validates input on <code>S1</code> (company number) and <code>S2</code> (customer, salesman, delete code).</li> <li>Updates <code>ARSLST</code> with add (<code>ADDREC</code>), update (<code>UPDREC</code>), or delete (<code>DELREC</code>) operations.</li> <li>Supports roll-up/roll-down for browsing transactions.</li> <li> <p>Displays error messages and protects fields as needed.</p> </li> <li> <p>Business Rules:</p> </li> <li>Validates company number, customer number, salesman code, and delete code.</li> <li>Ensures data consistency with <code>ARCONT</code>, <code>ARCUST</code>, and <code>GSTABL</code>.</li> <li>Handles add, update, and delete operations for salesman change transactions.</li> <li> <p>Manages screen navigation and error handling.</p> </li> <li> <p>Tables Used: <code>SCREEN</code>, <code>ARSLST</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>.</p> </li> <li> <p>External Programs: None.</p> </li> </ul> <p>If you have additional details (e.g., the <code>AR191.rpg36</code> code for editing transactions or specific screen layouts), I can provide further analysis or comparisons. Let me know if you\u2019d like me to search for related information or analyze any other uploaded files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/","title":"AR191 RPG36","text":"<p>The RPG program <code>AR191.rpg36.txt</code> is an RPG/36 program (likely for an IBM System/36 or AS/400 environment) that handles the A/R Salesman Change Transaction Edit process, as referenced in the previously provided <code>.OCL</code> file (AR190.ocl36.txt). This program generates a printed report listing salesman change transactions from the <code>ARSLST</code> file, including customer and salesman details, with validation against related files. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called based on the provided RPG code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#process-steps-of-rpg-program-ar191","title":"Process Steps of RPG Program AR191","text":"<p>The <code>AR191</code> program is a batch reporting program that processes records from the <code>ARSLST</code> file and produces a formatted report on a printer file (<code>ARPRINT</code>). It retrieves additional data from the <code>ARCUST</code> and <code>GSTABL</code> files to enrich the report with customer names and salesman descriptions. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>File Definitions and Initialization:</li> <li>Files Defined:<ul> <li><code>ARSLST</code>: Primary input file (<code>IP</code>) for salesman change transactions, with a 256-byte record length and an 8-byte key starting at position 2. Fields include:</li> <li><code>ASDEL</code> (delete code, position 1, <code>'D'</code> for deleted records).</li> <li><code>ASCO</code> (company number, positions 2\u20133).</li> <li><code>ASCUST</code> (customer number, positions 4\u20139).</li> <li><code>ASSLSO</code> (old salesman code, positions 10\u201311).</li> <li><code>ASSLSN</code> (new salesman code, positions 12\u201313).</li> <li><code>ARCUST</code>: Input file (<code>IF</code>) for customer master data, with a 384-byte record length and an 8-byte key. Fields include:</li> <li><code>ARNAME</code> (customer name, positions 10\u201339).</li> <li><code>GSTABL</code>: Input file (<code>IF</code>) for general table data (e.g., salesman codes), with a 256-byte record length and a 12-byte key. Fields include:</li> <li><code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343).</li> <li><code>ARPRINT</code>: Output file (<code>O</code>) for the printed report, with a 132-byte record length.</li> </ul> </li> <li> <p>Initial Setup (lines 0022\u20130029):</p> <ul> <li>The program checks the <code>ONCE</code> variable to ensure initialization occurs only once (<code>ONCE = 0</code>).</li> <li>Sets <code>ONCE = 1</code> to prevent re-execution of initialization.</li> <li>Captures the current time (<code>TIME</code>) into <code>TIMEX</code> (12 digits).</li> <li>Formats the time into <code>TIMEOF</code> (6 characters, likely HHMMSS) and date into <code>DATE</code> (6 characters, likely MMDDYY).</li> <li>This information is used in the report header.</li> </ul> </li> <li> <p>Record Processing Loop:</p> </li> <li>The program implicitly processes each record in <code>ARSLST</code> sequentially, as <code>ARSLST</code> is defined as the primary input file (<code>IP</code>), triggering a level break (<code>L1</code>) on changes in the company number (<code>ASCO</code>).</li> <li> <p>For each <code>ARSLST</code> record (lines 0032\u20130043):</p> <ul> <li>Customer Lookup:</li> <li>Builds a key (<code>ARKEY</code>) by combining <code>ASCO</code> (company number) and <code>ASCUST</code> (customer number).</li> <li>Performs a <code>CHAIN</code> operation on <code>ARCUST</code> to retrieve the customer name (<code>ARNAME</code>).</li> <li>If the customer is not found (indicator 10 on), sets <code>ARNAME</code> to <code>'INVALID'</code>; otherwise, uses the retrieved <code>ARNAME</code>.</li> <li>Salesman Lookup:</li> <li>Builds a key (<code>SLKEY</code>) by combining the literal <code>'SLSMAN'</code> and the new salesman code (<code>ASSLSN</code>).</li> <li>Performs a <code>CHAIN</code> operation on <code>GSTABL</code> to retrieve the salesman description (<code>TBDESC</code>).</li> <li>If the salesman code is not found (indicator 10 on), sets <code>TBDESC</code> to <code>'INVALID'</code>; otherwise, uses the retrieved <code>TBDESC</code>.</li> </ul> </li> <li> <p>Report Generation:</p> </li> <li>The program writes records to the <code>ARPRINT</code> printer file using output specifications (lines 0046\u20130089).</li> <li>Header Output (lines 0046\u20130082):<ul> <li>On a level break (<code>L1</code>, change in <code>ASCO</code>) or overflow (<code>OF</code>), prints the report header:</li> <li>Page number (<code>PAGE</code>) at position 104\u2013108 (e.g., \"PAGE 001\").</li> <li>Date (<code>DATE</code>, formatted as MM/DD/YY) at position 120\u2013129.</li> <li>Report title (\" SALESMAN CHANGE EDIT \") centered at position 75.</li> <li>Time (<code>TIMEOF</code>, formatted as HH.MM.SS) at position 120\u2013129.</li> <li>Decorative lines of asterisks (<code>* * * * * * * * * * * *</code>) across positions 24\u2013131.</li> <li>Column headers:<ul> <li>\"CO\" (company number) at position 2.</li> <li>\"CUSTOMER #\", \"NAME\", \"SALESMAN OLD NEW\" at positions 11, 32, and 58, respectively.</li> </ul> </li> <li>Another set of decorative asterisk lines.</li> </ul> </li> <li> <p>Detail Output (lines 0083\u20130089):</p> <ul> <li>For each <code>ARSLST</code> record (conditioned by <code>01</code>, non-deleted records where <code>ASDEL \u2260 'D'</code>):</li> <li><code>ASCO</code> (company number) at position 2.</li> <li><code>ASCUST</code> (customer number, zero-suppressed) at position 10.</li> <li><code>ARNAME</code> (customer name from <code>ARCUST</code>) at position 45.</li> <li><code>ASSLSO</code> (old salesman code) at position 53.</li> <li><code>ASSLSN</code> (new salesman code) at position 58.</li> <li><code>TBDESC</code> (new salesman description from <code>GSTABL</code>) at position 90.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends automatically after processing all <code>ARSLST</code> records, as is typical for primary input file processing in RPG/36. No explicit loop termination is coded, and the program closes the printer file (<code>ARPRINT</code>) upon completion.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AR191</code> program enforces the following business rules for generating the salesman change edit report:</p> <ol> <li>Record Selection:</li> <li>Only non-deleted records (<code>ASDEL \u2260 'D'</code>) from <code>ARSLST</code> are included in the report (indicator <code>01</code> in output specifications, line 0083).</li> <li> <p>Records are grouped by company number (<code>ASCO</code>), with a level break (<code>L1</code>) triggering header output when the company number changes.</p> </li> <li> <p>Data Validation and Enrichment:</p> </li> <li>Customer Validation:<ul> <li>Each <code>ARSLST</code> record\u2019s customer number (<code>ASCUST</code>) is validated against the <code>ARCUST</code> file using the key <code>ASCO + ASCUST</code>.</li> <li>If the customer is not found, the report displays <code>'INVALID'</code> for the customer name (<code>ARNAME</code>).</li> </ul> </li> <li> <p>Salesman Validation:</p> <ul> <li>The new salesman code (<code>ASSLSN</code>) is validated against the <code>GSTABL</code> file using the key <code>'SLSMAN' + ASSLSN</code>.</li> <li>If the salesman code is not found, the report displays <code>'INVALID'</code> for the salesman description (<code>TBDESC</code>).</li> </ul> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes a header with page number, date, time, and title, printed on each company change (<code>L1</code>) or page overflow (<code>OF</code>).</li> <li>Detail lines show:<ul> <li>Company number (<code>ASCO</code>).</li> <li>Customer number (<code>ASCUST</code>, zero-suppressed).</li> <li>Customer name (<code>ARNAME</code>).</li> <li>Old salesman code (<code>ASSLSO</code>).</li> <li>New salesman code (<code>ASSLSN</code>).</li> <li>New salesman description (<code>TBDESC</code>).</li> </ul> </li> <li> <p>The report is formatted with fixed-position fields and decorative asterisk lines for readability.</p> </li> <li> <p>Date and Time:</p> </li> <li>The report includes the system date and time in the header, formatted as MM/DD/YY and HH.MM.SS, respectively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The following files are used by the <code>AR191</code> program: 1. ARSLST: Primary input file for salesman change transactions (input mode, <code>IP</code>), containing:    - <code>ASDEL</code> (delete code, 1 byte, <code>'D'</code> for deleted records).    - <code>ASCO</code> (company number, positions 2\u20133).    - <code>ASCUST</code> (customer number, positions 4\u20139).    - <code>ASSLSO</code> (old salesman code, positions 10\u201311).    - <code>ASSLSN</code> (new salesman code, positions 12\u201313). 2. ARCUST: Customer master file (input mode, <code>IF</code>), containing:    - <code>ARNAME</code> (customer name, positions 10\u201339). 3. GSTABL: General table file (input mode, <code>IF</code>), containing:    - <code>TBDESC</code> (table description, e.g., salesman name, positions 14\u201343). 4. ARPRINT: Printer output file (<code>O</code>), used to generate the report with a 132-byte record length.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR191</code> program does not explicitly call any external programs (e.g., via <code>CALL</code> operations). It operates as a standalone batch program, processing input files and generating output directly to the printer file.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/AR191%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes the program by capturing the system date and time for the report header.</li> <li>Processes each <code>ARSLST</code> record sequentially, grouped by company number (<code>ASCO</code>).</li> <li>Validates customer numbers against <code>ARCUST</code> and salesman codes against <code>GSTABL</code>, marking invalid entries with <code>'INVALID'</code>.</li> <li>Generates a formatted report to <code>ARPRINT</code> with headers (on company change or page overflow) and detail lines for non-deleted records.</li> <li> <p>Terminates after processing all records.</p> </li> <li> <p>Business Rules:</p> </li> <li>Includes only non-deleted <code>ARSLST</code> records (<code>ASDEL \u2260 'D'</code>).</li> <li>Validates customer and salesman data, displaying <code>'INVALID'</code> for missing records.</li> <li>Groups records by company number, with headers printed on company changes or page overflows.</li> <li> <p>Formats the report with fixed-position fields, including date, time, and decorative lines.</p> </li> <li> <p>Tables Used: <code>ARSLST</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARPRINT</code>.</p> </li> <li> <p>External Programs: None.</p> </li> </ul> <p>This program complements <code>AR190</code> (add/update transactions) by providing a printed edit report to verify salesman change transactions. If you have additional details (e.g., sample data or report output formats), I can provide further analysis. Let me know if you\u2019d like me to search for related information or analyze other files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/","title":"Summary AR190 OCL","text":"<p>Below, I\u2019ll first identify the use cases implemented by the RPG programs <code>AR190</code> and <code>AR191</code>, as called from the provided <code>.OCL</code> program. Then, I\u2019ll provide a Function Requirement Document for a single, consolidated use case, assuming it processes inputs programmatically (without screen interaction) to add, update, or edit salesman change transactions in the Accounts Receivable (A/R) system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>Based on the provided <code>.OCL</code> (AR190.ocl36.txt), <code>AR190.rpg36.txt</code>, and <code>AR191.rpg36.txt</code>, the programs implement the following use cases:</p> <ol> <li>Add/Update Salesman Change Transactions (AR190):</li> <li>Description: Allows users to add new salesman change transactions or update existing ones in the <code>ARSLST</code> file. Users specify a company number, customer number, old and new salesman codes, and a delete code via interactive screens (<code>S1</code> and <code>S2</code>). The program validates inputs against <code>ARCONT</code> (company), <code>ARCUST</code> (customer), and <code>GSTABL</code> (salesman) files, and updates the <code>ARSLST</code> file accordingly.</li> <li> <p>Scope: Interactive data entry and validation, supporting up to 10 transactions per screen, with roll-up/roll-down navigation.</p> </li> <li> <p>Generate Salesman Change Edit Report (AR191):</p> </li> <li>Description: Produces a printed report listing non-deleted salesman change transactions from the <code>ARSLST</code> file, grouped by company number. The report includes customer names (from <code>ARCUST</code>) and salesman descriptions (from <code>GSTABL</code>), with validation to flag invalid entries. It is a batch process triggered by the <code>.OCL</code> file.</li> <li>Scope: Batch reporting for verification of transactions, with no user interaction.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Assuming a single, consolidated use case that programmatically processes salesman change transactions (combining the functionality of <code>AR190</code> and <code>AR191</code> without screen interaction), the following document outlines the requirements for a function that adds, updates, or deletes transactions and generates a report.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#function-requirement-document-salesman-change-transaction-processor","title":"Function Requirement Document: Salesman Change Transaction Processor","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#purpose","title":"Purpose","text":"<p>The <code>SalesmanChangeTransactionProcessor</code> function processes salesman change transactions in the Accounts Receivable (A/R) system. It validates and applies additions, updates, or deletions to the <code>ARSLST</code> file and generates a report summarizing the transactions, without requiring interactive screen input.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CO</code>, 2 digits, numeric): Identifies the company for the transaction.</li> <li>Transaction List: Array of up to 10 transaction records, each containing:</li> <li>Customer Number (<code>CUS</code>, 6 digits, numeric): Identifies the customer.</li> <li>New Salesman Code (<code>SLN</code>, 2 digits, numeric): The new salesman to assign.</li> <li>Delete Code (<code>DL</code>, 1 character): <code>' '</code> (blank), <code>'A'</code> (add/update), or <code>'D'</code> (delete).</li> <li>Reference Files:</li> <li><code>ARCONT</code>: Contains valid company numbers and names.</li> <li><code>ARCUST</code>: Contains customer numbers and names.</li> <li><code>GSTABL</code>: Contains salesman codes and descriptions under the <code>SLSMAN</code> table.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated <code>ARSLST</code> File: Records added, updated, or deleted based on input transactions.</li> <li>Report File (<code>ARPRINT</code>): A text file summarizing processed transactions, including:</li> <li>Company number, customer number, customer name, old salesman code, new salesman code, and salesman description.</li> <li>Header with date, time, and page number, grouped by company.</li> <li>Error List: Array of error messages for invalid inputs (e.g., invalid company, customer, or salesman).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Company Number:</li> <li>Check if <code>CO</code> is non-zero and exists in <code>ARCONT</code>. If invalid, return error: \"Company number cannot be blank\" or \"Company not in control file.\"</li> <li>Process Transactions:</li> <li>For each transaction in the input list (up to 10):<ul> <li>Validate Customer:</li> <li>If <code>SLN \u2260 0</code> and <code>CUS = 0</code>, return error: \"Customer cannot be zero when new salesman is keyed.\"</li> <li>If <code>CUS \u2260 0</code>, validate <code>CUS</code> against <code>ARCUST</code> using key <code>CO + CUS</code>. If not found, return error: \"Invalid customer number.\"</li> <li>Retrieve customer name (<code>ARNAME</code>) and old salesman code (<code>ARSLMN</code>) from <code>ARCUST</code>.</li> <li>Validate Salesman:</li> <li>If <code>CUS \u2260 0</code>, validate <code>SLN</code> against <code>GSTABL</code> using key <code>'SLSMAN' + SLN</code>. If not found, return error: \"Invalid new salesman code.\"</li> <li>Retrieve salesman description (<code>TBDESC</code>) from <code>GSTABL</code>.</li> <li>Validate Delete Code:</li> <li>If <code>CUS \u2260 0</code>, ensure <code>DL</code> is <code>' '</code>, <code>'A'</code>, or <code>'D'</code>. If invalid, return error: \"Delete code must be ' ', A, or D.\"</li> <li>Update <code>ARSLST</code>:</li> <li>Build key <code>CO + CUS</code> to check <code>ARSLST</code>.</li> <li>If <code>CUS \u2260 0</code>:<ul> <li>If <code>DL \u2260 'D'</code> and record exists, update <code>ARSLST</code> with <code>DL</code>, old salesman (<code>ARSLMN</code> or existing <code>ASSLSO</code>), and <code>SLN</code>.</li> <li>If <code>DL \u2260 'D'</code> and record does not exist, add new record to <code>ARSLST</code> with <code>DL</code>, old salesman (<code>ARSLMN</code>), and <code>SLN</code>.</li> <li>If <code>DL = 'D'</code> and record does not exist, delete the record.</li> <li>If record is marked deleted (<code>ASDEL = 'D'</code>), flag with warning: \"This record previously deleted.\"</li> </ul> </li> </ul> </li> <li>Generate Report:</li> <li>For each non-deleted <code>ARSLST</code> record (<code>ASDEL \u2260 'D'</code>), grouped by <code>ASCO</code>:<ul> <li>Retrieve customer name (<code>ARNAME</code>) from <code>ARCUST</code> (or <code>'INVALID'</code> if not found).</li> <li>Retrieve salesman description (<code>TBDESC</code>) from <code>GSTABL</code> (or <code>'INVALID'</code> if not found).</li> <li>Write to <code>ARPRINT</code>:</li> <li>Header (on company change or page overflow): Page number, system date (MM/DD/YY), time (HH.MM.SS), title (\"SALESMAN CHANGE EDIT\"), and column headers (\"CO\", \"CUSTOMER #\", \"NAME\", \"SALESMAN OLD NEW\").</li> <li>Detail: Company number, customer number, customer name, old salesman code, new salesman code, salesman description.</li> </ul> </li> <li>Return Results:</li> <li>Return updated <code>ARSLST</code> file, generated <code>ARPRINT</code> report, and any error messages.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>Company number must be non-zero and exist in <code>ARCONT</code>.</li> <li>Customer and Salesman Requirements:</li> <li>A customer number is required if a new salesman is specified.</li> <li>Customer numbers must exist in <code>ARCUST</code>.</li> <li>New salesman codes must exist in <code>GSTABL</code> under the <code>SLSMAN</code> table.</li> <li>Delete Code Handling:</li> <li>Delete code must be <code>' '</code>, <code>'A'</code>, or <code>'D'</code>.</li> <li><code>'D'</code> marks a record for deletion; other values indicate add/update.</li> <li>Transaction Processing:</li> <li>Update existing records or add new ones in <code>ARSLST</code> based on input.</li> <li>Deleted records are excluded from the report.</li> <li>Report Formatting:</li> <li>Group by company number, with headers on each group or page overflow.</li> <li>Flag invalid customers or salesmen with <code>'INVALID'</code> in the report.</li> <li>Include system date and time in the header.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Key Construction:</li> <li>Customer key: Concatenate <code>CO</code> (2 digits) and <code>CUS</code> (6 digits) for <code>ARSLST</code> and <code>ARCUST</code> lookups.</li> <li>Salesman key: Concatenate <code>'SLSMAN'</code> (literal) and <code>SLN</code> (2 digits) for <code>GSTABL</code> lookups.</li> <li>Date and Time Formatting:</li> <li>System date formatted as MM/DD/YY.</li> <li>System time formatted as HH.MM.SS.</li> <li>Page Numbering:</li> <li>Increment page number (<code>PAGE</code>) for each company change or overflow in the report.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for:</li> <li>Blank or invalid company number.</li> <li>Missing customer number when salesman is keyed.</li> <li>Invalid customer number or salesman code.</li> <li>Invalid delete code.</li> <li>Previously deleted records.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR190%20Change%20Default%20Salesman%20Entry-Edit/Summary%20AR190%20OCL/#explanation-of-approach","title":"Explanation of Approach","text":"<ul> <li>Use Cases: The two identified use cases reflect the distinct functionalities of <code>AR190</code> (interactive transaction entry/update) and <code>AR191</code> (batch report generation). These are derived from the <code>.OCL</code> file\u2019s calls to <code>LOAD AR190</code> and <code>LOAD AR191</code> and their respective RPG code.</li> <li>Consolidated Function: The <code>SalesmanChangeTransactionProcessor</code> combines <code>AR190</code>\u2019s transaction processing and <code>AR191</code>\u2019s reporting into a single programmatic function, assuming inputs are provided (e.g., via API or file) rather than through interactive screens. This eliminates the need for <code>SCREEN</code> file interactions in <code>AR190</code>.</li> <li>Conciseness: The document focuses on business requirements (validation, data processing, report formatting) and necessary calculations (key construction, date/time formatting, page numbering), avoiding technical implementation details like RPG-specific operations.</li> <li>File Usage: The function uses the same files as the original programs (<code>ARSLST</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>, <code>ARPRINT</code>), maintaining consistency with the legacy system.</li> </ul> <p>If you need further refinements or additional details (e.g., sample input formats or specific error codes), let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/","title":"AR290A OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR290A.ocl36.txt</code>, used in IBM System/36 environments to manage Accounts Receivable (A/R) salesman change transactions. Below, I\u2019ll explain the process steps of the program, identify any external programs called, and list the tables/files used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program controls the flow of processing A/R salesman change transactions, handling validation, user interaction, and file operations. Here\u2019s a step-by-step explanation of the program\u2019s logic:</p> <ol> <li>Initial Program Identification and Setup:</li> <li>The program starts with metadata or comments identifying it as the \"A/R SALESMAN CHANGE TRANSACTION POST\" process (<code>// * 'A/R SALESMAN CHANGE TRANSACTION POST'</code>).</li> <li> <p>It likely runs under a specific procedure (<code>SCPROCP</code>) and system context (<code>GSY2K</code>).</p> </li> <li> <p>Check for Changes in ARSLST File:</p> </li> <li>The program checks the <code>ARSLST</code> file to determine if there are any salesman change transactions to process (<code>IFF DATAF1-?9?ARSLST</code>).</li> <li>Case 1: No Changes Exist:<ul> <li>If no changes are found (<code>* 'NO CHANGES EXIST TO BE PROCESSED'</code>), the program:</li> <li>Checks if the change table (<code>ARSLST</code>) has no records (<code>IF ?F'A,?9?ARSLST'?/0000000 * 'NO RECORDS EXIST IN THE CHANGE TABLE'</code>).</li> <li>Displays a message indicating the posting process is canceled (<code>* 'THE POSTING PROCESS HAS BEEN CANCELLED'</code>).</li> <li>Prompts the user to press <code>0, ENTER</code> to continue (<code>PAUSE 'TO CONTINUE--PRESS 0, ENTER'</code>).</li> <li>Terminates the program (<code>CANCEL</code>).</li> </ul> </li> <li> <p>Case 2: Changes Exist:</p> <ul> <li>If changes are found (<code>* 'THERE ARE CHANGES TO PROCESS'</code>), the program:</li> <li>Prompts the user with options to either cancel (press <code>SHIFT + ATTN, 2, ENTER</code>) or continue (press <code>0, ENTER</code>) (<code>PAUSE 'TO CANCEL--PRESS SHIFT + ATTN,2,ENTER TO CONTINUE--PRESS 0,ENTER'</code>).</li> </ul> </li> <li> <p>Processing Changes:</p> </li> <li>If changes exist and the user chooses to continue, the program checks for the existence of the <code>SLSCHG</code> file (<code>IFF DATAF1-?9?SLSCHG</code>).</li> <li>It then builds or processes the <code>SLSCHG</code> file (<code>BLDFILE ?9?SLSCHG,S,RECORDS,1,32,,T,,,NDFILE</code>):<ul> <li><code>BLDFILE</code> is an OCL command to create or manipulate a file.</li> <li>Parameters suggest it processes records in the <code>SLSCHG</code> file, starting at record 1, with a block size or increment of 32, and other attributes (e.g., <code>T</code> for temporary file, <code>NDFILE</code> for no direct file).</li> </ul> </li> <li>If the <code>SLSCHG</code> file is successfully processed, it displays a message: <code>* 'THE POSTING PROCESS HAS BEEN ACTIVATED'</code>.</li> <li> <p>If the <code>SLSCHG</code> file processing is canceled or fails, it displays: <code>* 'THE POSTING PROCESS HAS BEEN CANCELLED'</code>, followed by a pause for user acknowledgment (<code>PAUSE 'TO CONTINUE--PRESS 0,ENTER'</code>).</p> </li> <li> <p>User Interaction and Cancellation:</p> </li> <li>Throughout the process, the program uses <code>PAUSE</code> commands to interact with the user, allowing them to confirm continuation or cancel the process.</li> <li>Cancellation can occur at multiple points, either explicitly by the user (via <code>SHIFT + ATTN, 2, ENTER</code>) or implicitly if no records/changes are found.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program itself does not explicitly call external RPG programs in the provided code. The <code>BLDFILE</code> command suggests file manipulation, which may involve system utilities or underlying RPG programs, but no specific program names are mentioned. Typically, in System/36 environments, <code>BLDFILE</code> is a system command that may invoke internal system routines rather than user-defined RPG programs. Therefore, based on the provided code:</p> <ul> <li>External Programs: None explicitly called.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program interacts with the following files/tables:</p> <ol> <li>ARSLST:</li> <li>Description: Likely the A/R Salesman List or change table, which stores pending salesman change transactions.</li> <li> <p>Role: The program checks this file to determine if changes exist (<code>DATAF1-?9?ARSLST</code>) and verifies if it contains records (<code>?F'A,?9?ARSLST'?/0000000</code>).</p> </li> <li> <p>SLSCHG:</p> </li> <li>Description: A file used to process or store salesman change transactions, possibly a temporary or working file.</li> <li>Role: The program builds or processes this file (<code>BLDFILE ?9?SLSCHG</code>) if changes are present in <code>ARSLST</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/AR290A%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The program checks for salesman change transactions in the <code>ARSLST</code> file. If no changes exist, it informs the user and cancels. If changes are found, it prompts the user to continue or cancel. On continuation, it processes the changes via the <code>SLSCHG</code> file, activating or canceling the posting process based on the outcome.</li> <li>External Programs: None explicitly called.</li> <li>Tables/Files: <code>ARSLST</code> (salesman change table), <code>SLSCHG</code> (processed change file).</li> </ul> <p>If you need further clarification or analysis (e.g., specific RPG program interactions or additional context), please let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/","title":"Summary AR290A OCL","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#list-of-use-cases-implemented-by-ar290aocl36txt","title":"List of Use Cases Implemented by AR290A.ocl36.txt","text":"<p>The <code>AR290A.ocl36.txt</code> OCL program implements a single primary use case:</p> <ol> <li>Post A/R Salesman Change Transactions:</li> <li>This use case involves processing changes to salesman assignments in the Accounts Receivable (A/R) system by validating the existence of changes in the <code>ARSLST</code> file, processing them into the <code>SLSCHG</code> file, and handling user confirmation or cancellation.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#ar-salesman-change-posting-function-requirements","title":"A/R Salesman Change Posting Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#overview","title":"Overview","text":"<p>The <code>post_ar_salesman_changes</code> function processes salesman change transactions in the Accounts Receivable (A/R) system, validating and applying updates from the <code>ARSLST</code> file to the <code>SLSCHG</code> file without user interaction.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#inputs","title":"Inputs","text":"<ul> <li>ARSLST File: A data file containing pending salesman change transactions (e.g., customer ID, old salesman ID, new salesman ID).</li> <li>SLSCHG File: A target file for processed salesman change records.</li> <li>System Parameters: Configuration data specifying file formats and processing rules.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated SLSCHG File: Contains processed salesman change records.</li> <li>Status Code: Indicates success, no changes, or cancellation.</li> <li>Error Message (if applicable): Describes any issues encountered (e.g., no records in <code>ARSLST</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate ARSLST File:</li> <li>Check if <code>ARSLST</code> contains any salesman change records.</li> <li> <p>If no records exist, return status \"No changes to process\" and exit.</p> </li> <li> <p>Process Changes:</p> </li> <li>If records exist in <code>ARSLST</code>, read each record (e.g., customer ID, old salesman ID, new salesman ID).</li> <li>Validate record integrity (e.g., non-null salesman IDs, valid customer references).</li> <li> <p>Write validated records to <code>SLSCHG</code> file with specified format (starting at record 1, block size 32).</p> </li> <li> <p>Complete Posting:</p> </li> <li>If all records are processed successfully, return status \"Posting completed\".</li> <li>If processing fails (e.g., file errors), return status \"Posting cancelled\" with error details.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Data Validation: Ensure <code>ARSLST</code> records contain valid customer and salesman IDs. Invalid records are skipped, and an error is logged.</li> <li>File Integrity: <code>SLSCHG</code> is created or overwritten only if <code>ARSLST</code> contains valid records.</li> <li>Atomic Processing: All changes are processed as a single transaction; partial updates are not allowed.</li> <li>No User Interaction: The function operates autonomously, assuming all inputs are pre-validated.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#calculations","title":"Calculations","text":"<ul> <li>No explicit calculations are performed. The function primarily involves data validation and file manipulation:</li> <li>Record Count Check: Determines if <code>ARSLST</code> has zero records (<code>record_count == 0</code>).</li> <li>Record Mapping: Maps <code>ARSLST</code> fields (e.g., customer ID, salesman ID) to <code>SLSCHG</code> format without transformation.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>If <code>ARSLST</code> is empty or inaccessible, return \"No records exist in the change table\".</li> <li>If <code>SLSCHG</code> cannot be created or written to, return \"Posting process failed\" with error details.</li> <li>Log all errors for audit purposes.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR290A%20Change%20Default%20Salesman%20Post/Summary%20AR290A%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input files (<code>ARSLST</code>, <code>SLSCHG</code>) are accessible and formatted per system specifications.</li> <li>No external user input is required; the function processes data autonomously.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/","title":"AR500 RPG36","text":"<p>The provided document is an RPG/36 program, <code>AR500.rpg36.txt</code>, called by the OCL program <code>AR500P.ocl36.txt</code> to generate an Accounts Receivable (A/R) Aged Trial Balance report by customer number. This program processes customer and invoice data, calculates aging buckets, and produces a detailed report. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#process-steps-of-the-rpg36-program","title":"Process Steps of the RPG/36 Program","text":"<p>The <code>AR500</code> RPG program is designed to produce an A/R Aged Trial Balance report, categorizing customer balances into aging buckets based on invoice dates (as revised on 04/13/05 per revision log). It processes data hierarchically by company, customer group, and customer, generating subtotals and totals. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P064</code>: Program identifier.</li> <li>Sets up the program to handle A/R data processing.</li> </ul> </li> <li>File Declarations:<ul> <li>Defines input and output files (see Tables Used section).</li> </ul> </li> <li>Data Structures:<ul> <li><code>DTA</code>: A 5-element array (9,2) to accumulate aging bucket amounts (current, 1-30, 31-60, 61-90, over 90/91-120 days).</li> <li><code>UDS</code>: Defines input parameters like <code>LDATE</code> (aging date), <code>KYOUTS</code> (outstanding invoices), <code>KYREPT</code> (report sequence), <code>KYCLYN</code> (credit limit flag), <code>KYNOD</code> (NOD report flag), and <code>KYCUCL</code> (customer class).</li> </ul> </li> <li> <p>Indicators:</p> <ul> <li>Uses indicators (e.g., <code>31</code>, <code>41</code>, <code>50</code>, <code>51</code>, <code>52</code>, <code>53</code>, <code>60</code>, <code>61</code>, <code>62</code>, etc.) to control logic, printing, and error handling.</li> </ul> </li> <li> <p>Company-Level Processing (Level 5 - L5):</p> </li> <li>Initialize Company Totals:<ul> <li>Resets company totals (<code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>, <code>L5CDUE</code>, <code>L5CPRE</code>) to zero.</li> <li>Sets <code>PAGE1</code> and <code>PAGE2</code> to zero for pagination.</li> <li>Captures system time (<code>TIMEOF</code>) for report headers.</li> </ul> </li> <li>Retrieve Company Data:<ul> <li>Chains to <code>ARCONT</code> using <code>ARCO</code> (company number) to retrieve company name (<code>CONAME</code>) and aging limits (<code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code>).</li> <li>Adjusts limits (<code>LMT1</code>, <code>LMT2</code>, <code>LMT3</code>, <code>LMT4</code>) by adding 1 to <code>ACLMT1-3</code> for display purposes.</li> <li>If <code>ARCONT</code> record is missing (<code>*IN99</code>), sets <code>CONAME</code> to blank.</li> </ul> </li> <li>Customer Class Processing:<ul> <li>If <code>KYCUCL</code> (customer class) is specified, chains to <code>GSTABL</code> to retrieve class description (<code>TBDESC</code> into <code>CUDESC</code>).</li> <li>Sets <code>*IN66</code> if class is valid.</li> </ul> </li> <li>Outstanding Invoices Check:<ul> <li>If <code>KYOUTS = 'O'</code>, sets <code>*IN50</code> to print only outstanding invoices.</li> </ul> </li> <li>Report Sequence:<ul> <li>If <code>KYREPT = 'C'</code>, sets <code>*IN80</code> for customer sequence subtotals.</li> </ul> </li> <li> <p>Credit Limit and NOD Flags:</p> <ul> <li>Sets <code>*IN72</code> if <code>KYCLYN = 'Y'</code> (print credit limit).</li> <li>Sets <code>*IN73</code> if <code>KYNOD = 'Y'</code> (NOD report only).</li> </ul> </li> <li> <p>Customer Group Processing (Level 4 - L4):</p> </li> <li>Resets group totals (<code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code>) to zero.</li> <li> <p>Sets <code>*IN85</code> and <code>*IN89</code> based on whether <code>ADZERO</code> (grouping customer zero flag) is zero to distinguish petroleum vs. miscellaneous billing customers.</p> </li> <li> <p>Customer Processing (Level 3 - L3):</p> </li> <li>Initialize Customer Totals:<ul> <li>Resets customer totals (<code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>) to zero.</li> <li>Clears <code>*IN62</code> for customer subtotal printing.</li> </ul> </li> <li>Retrieve Customer Data:<ul> <li>Chains to <code>ARCUSP</code> using <code>ARCOCU</code> (company/customer key) to retrieve credit comments (<code>CSCMT1-3</code>) and contact name (<code>CSCNCT</code>).</li> <li>Sets <code>*IN71</code> if comments are non-blank.</li> <li>Chains to <code>GSTABL</code> using <code>ARTERM</code> (terms code) to retrieve terms description (<code>TBDESC</code> into <code>TMDESC</code>).</li> <li>Chains to <code>GSTABL</code> using <code>ARSLS#</code> (salesman number) to retrieve salesman name (<code>TBDESC</code> into <code>SLNAME</code>).</li> </ul> </li> <li> <p>Credit Limit:</p> <ul> <li>If <code>ARCO = ADGCO</code> and <code>ARCUST = ADGCUS</code>, uses <code>ARCLMT</code> as the credit limit (<code>CLMT</code>); otherwise, defaults to zero.</li> </ul> </li> <li> <p>Detail Processing (Level 1 - L1):</p> </li> <li>Initialize Detail Totals:<ul> <li>Resets <code>DTA</code> array, <code>TOTARD</code>, <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code> to zero.</li> <li>Clears indicators <code>31</code>, <code>51</code>, <code>52</code>, <code>53</code> for balance checks.</li> </ul> </li> <li> <p>Process <code>ARCUST</code> Records:</p> <ul> <li>Accumulates totals from <code>ARCUST</code> fields (<code>ARTOTD</code>, <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>) into <code>TOTARD</code>, <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>.</li> <li>If <code>TOTARD \u2260 0</code> and <code>*IN50</code> (outstanding only), sets <code>*IN61</code> and <code>*IN62</code>.</li> <li>Compares <code>ARCLMT</code> to <code>TOTARD</code> to set <code>*IN57</code> if over credit limit.</li> <li>Skips to <code>END</code> if <code>*IN61</code> is set unless processing NOD records.</li> </ul> </li> <li> <p>Detail Record Processing (<code>ARDETL</code>):</p> </li> <li>Match Records:<ul> <li>If no match (<code>NMR</code>), sets <code>*IN26</code>, writes an exception record, and skips to <code>END</code>.</li> </ul> </li> <li>Aging Bucket Assignment:<ul> <li>Converts <code>ADDATE</code> (A/R date) to MMDDYY format (<code>ADMDY</code>).</li> <li>Uses <code>ADAGE</code> (age code) to assign buckets:</li> <li><code>ADAGE = 2</code> sets <code>*IN10</code> or <code>*IN11</code>.</li> <li><code>ADAGE = 4</code> sets <code>*IN15</code>, <code>*IN13</code>, <code>*IN14</code>, and reassigns <code>ADAGE = 5</code>.</li> <li>Sets <code>I</code> to <code>ADAGE</code> for array indexing.</li> </ul> </li> <li>Record Type Processing:<ul> <li>Invoice (<code>ADTYPE = 'I'</code>):</li> <li>If <code>ADPART \u2260 0</code>, marks <code>INVPMO = '*'</code> (prior month activity).</li> <li>If <code>ADNOD = 'Y'</code>, sets <code>INVNOD = 'NOD'</code>.</li> <li>If <code>*IN50</code> (outstanding only), calculates balance (<code>ADBAL = ADAMT - ADPAID</code>).</li> <li>If <code>ADBAL \u2260 0</code>, sets <code>*IN60</code> and <code>*IN62</code>; otherwise, skips to <code>END</code>.</li> <li>If <code>ADINV1 = 9</code> (prepaid cash), adjusts <code>L5CPRE</code> (company prepay).</li> <li>Adds <code>ADAMT - ADPART</code> to <code>DTA(I)</code>.</li> <li>Credit (<code>ADTYPE = 'C'</code>):</li> <li>Adds <code>ADAMT - ADPART</code> to <code>DTA(I)</code>.</li> <li>Adjustment (<code>ADTYPE = 'J'</code>):</li> <li>Adds <code>ADAMT</code> to <code>DTA(I)</code>.</li> <li>Payment (<code>ADTYPE = 'P'</code>):</li> <li>Subtracts <code>ADAMT</code> from <code>DTA(I)</code> and negates <code>ADAMT</code>.</li> <li>Invalid Type:</li> <li>Sets <code>*IN25</code>, writes an exception record, and clears <code>*IN25</code>.</li> </ul> </li> <li> <p>NOD Processing:</p> <ul> <li>If <code>KYNOD = 'Y'</code>, accumulates <code>DTA</code> into <code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>, and computes <code>TOTARD</code>.</li> </ul> </li> <li> <p>Balance Validation:</p> </li> <li>Compares <code>DTA</code> array with <code>ARCUST</code> totals (<code>CURDAR</code>, <code>AR011T</code>, <code>AR112T</code>, <code>AR213T</code>, <code>AROV3T</code>).<ul> <li>Sets <code>*IN51</code> if any mismatch.</li> </ul> </li> <li>Crossfoots <code>ARCUST</code> aging fields (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30 = ARTOTD</code>).<ul> <li>Sets <code>*IN52</code> if totals mismatch.</li> <li>Sets <code>*IN53</code> if <code>TOT \u2260 0</code> but no detail records exist.</li> </ul> </li> <li> <p>Increments <code>OUTBAL</code> if mismatches occur (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN31</code>).</p> </li> <li> <p>Subtotal and Total Calculations:</p> </li> <li>Customer Subtotals (L3):<ul> <li>Accumulates <code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code> from detail totals.</li> <li>Validates <code>L3TOT</code> against crossfooted totals (<code>L3CUR + L30110 + L31120 + L32130 + L3OV30</code>).</li> <li>Sets <code>*IN54</code> if mismatch and increments <code>OUTBAL</code>.</li> </ul> </li> <li>Group Totals (L4):<ul> <li>Accumulates <code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code> if <code>*IN80</code> (customer sequence).</li> </ul> </li> <li> <p>Company Totals (L5):</p> <ul> <li>Accumulates <code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>.</li> <li>Calculates <code>L5CDUE = L5CUR - L5CPRE</code>.</li> </ul> </li> <li> <p>Report Output:</p> </li> <li>Headers (L5/L4):<ul> <li>Prints company name (<code>CONAME</code>), date (<code>UDATE</code>), time (<code>TIMEOF</code>), page number (<code>PAGE1</code>/<code>PAGE2</code>), and aging date (<code>LDATE</code>).</li> <li>Indicates outstanding invoices (<code>KYOUTS = 'O'</code>), NOD report (<code>KYNOD = 'Y'</code>), or customer class (<code>KYCUCL</code>).</li> <li>Prints aging bucket headers (e.g., <code>0-30</code>, <code>31-60</code>, <code>61-90</code>, <code>91-120</code>, <code>OVER 120</code>).</li> </ul> </li> <li>Detail Lines (L1):<ul> <li>Prints customer number (<code>ARCUST</code>), name (<code>ARNAME</code>), salesman (<code>ARSLS#</code>, <code>SLNAME</code>), totals (<code>L3TOT</code>, <code>L3CUR</code>, etc.), last payment (<code>ARPYMT</code>, <code>ARPDAT</code>), and finance charges (<code>ARFIN$</code>).</li> <li>Prints invoice details (<code>ADINV#</code>, <code>ADMDY</code>, <code>ADAMT</code>, <code>ADRFIV</code>) for invoices, credits, adjustments, or payments.</li> <li>Includes credit limit (<code>CLMT</code>), terms (<code>TMDESC</code>), and contact/comments (<code>CSCNCT</code>, <code>CSCMT1-3</code>) if applicable.</li> </ul> </li> <li>Subtotals and Totals (L3/L4/L5):<ul> <li>Prints customer, group, and company totals with aging buckets.</li> <li>Highlights out-of-balance conditions (<code>OUTBAL</code>) and credit limit violations (<code>*IN57</code>).</li> </ul> </li> <li> <p>Exception Records:</p> <ul> <li>Prints errors for invalid <code>ARDETL</code> type (<code>*IN25</code>), missing <code>ARCUST</code> record (<code>*IN26</code>), or out-of-balance conditions (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>).</li> </ul> </li> <li> <p>Termination:</p> <ul> <li>Writes final out-of-balance message and credit limit warning at last record (<code>LR</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Aging Buckets:</li> <li>Uses invoice date (<code>ADDATE</code>) for aging (revised 04/13/05).</li> <li>Buckets: 0-30, 31-60, 61-90, 91-120, over 120 days from invoice date.</li> <li>Outstanding Invoices:</li> <li>If <code>KYOUTS = 'O'</code>, only processes invoices with outstanding balances (<code>ADAMT - ADPAID \u2260 0</code>).</li> <li>NOD Report:</li> <li>If <code>KYNOD = 'Y'</code>, processes only records with <code>ADNOD = 'Y'</code> (Notification of Difference).</li> <li>Credit Limit:</li> <li>If <code>KYCLYN = 'Y'</code>, prints credit limit (<code>ARCLMT</code>) and flags customers exceeding it (<code>*IN57</code>).</li> <li>Customer Class:</li> <li>If <code>KYCUCL</code> is specified, filters by customer class and retrieves description from <code>GSTABL</code>.</li> <li>Balance Validation:</li> <li>Ensures <code>ARDETL</code> totals match <code>ARCUST</code> totals.</li> <li>Crossfoots <code>ARCUST</code> aging fields to match total due (<code>ARTOTD</code>).</li> <li>Reports out-of-balance conditions (<code>OUTBAL &gt; 0</code>).</li> <li>Record Types:</li> <li>Processes invoices (<code>I</code>), credits (<code>C</code>), adjustments (<code>J</code>), and payments (<code>P</code>).</li> <li>Invalid types trigger exception output.</li> <li>Hierarchy:</li> <li>Processes data by company (<code>L5</code>), customer group (<code>L4</code>), and customer (<code>L3</code>).</li> <li>Accumulates totals at each level for reporting.</li> <li>Report Formatting:</li> <li>Includes headers, detail lines, subtotals, and totals.</li> <li>Supports multiple printers (<code>PRINT</code>, <code>PRINT2</code>, <code>PRINT3</code>) for different output streams.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>ARCUST:</li> <li>Type: Input Primary (<code>IPEA 3840 384 DISK</code>).</li> <li>Purpose: Customer master file with balance and aging data.</li> <li>Key: <code>ARCOCU</code> (company/customer number).</li> <li>Fields: <code>ARDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARCUST</code> (customer number), <code>ARNAME</code> (name), <code>ARADR1-4</code> (address), <code>ARZIP5/9/14</code> (zip codes), <code>ARTOTD</code> (total due), <code>ARCURD</code> (current due), <code>AR0110</code> (1-30 days), <code>AR1120</code> (31-60 days), <code>AR2130</code> (61-90 days), <code>AROV30</code> (over 90 days), <code>ARPYMT</code> (last payment), <code>ARPDAT</code> (payment date), <code>ARPREP</code> (unapplied cash), <code>ARMTD$</code> (MTD sales), <code>ARYTD$</code> (YTD sales), <code>ARSTMT</code> (statements Y/N), <code>ARFIN$</code> (finance charge), <code>ARPBAL</code> (previous balance), <code>ARFINC</code> (finance charge Y/N), <code>ARCLMT</code> (credit limit), <code>ARAREA</code> (area code), <code>ARTELE</code> (phone), <code>ARSLS#</code> (salesman), <code>ARTERM</code> (terms), <code>ADGCO</code> (group company), <code>ADGCUS</code> (group customer), <code>ARPDA8</code> (payment date YMD), <code>ARHID8</code> (recent high date YMD).</li> <li>ARDETL:</li> <li>Type: Input Secondary (<code>IS AF 138 138 DISK</code>).</li> <li>Purpose: A/R detail file with invoice and transaction data.</li> <li>Key: <code>ADCOCU</code> (company/customer number).</li> <li>Fields: <code>ADDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARCUST</code> (customer number), <code>ADINV#</code> (invoice number), <code>ADTYPE</code> (I/J/P/C), <code>ADSEQ#</code> (sequence number), <code>ADDATE</code> (A/R date), <code>ADAMT</code> (amount), <code>ADAGE</code> (age code), <code>ADPART</code> (partial payment), <code>ADPAY</code> (current month paid), <code>ADSLS</code> (salesman), <code>ADPOST</code> (posting code), <code>ADNEXT</code> (next sequence), <code>ADPURG</code> (purge code), <code>ADDUDT</code> (due date), <code>ADTERM</code> (terms), <code>ADJRNL</code> (journal date), <code>ADDUD8</code> (due date YMD), <code>ADJRN8</code> (journal date YMD), <code>ADNOD</code> (NOD flag), <code>ADRFIV</code> (reference invoice), <code>ADGCO</code> (group company), <code>ADGCUS</code> (group customer).</li> <li>ARCUSP:</li> <li>Type: Input (<code>IF F 1344 8AI 2 DISK</code>).</li> <li>Purpose: Customer supplemental file for credit comments and contact info.</li> <li>Key: <code>ARCOCU</code> (company/customer number).</li> <li>Fields: <code>CSCMT1-3</code> (credit comments), <code>CSCNCT</code> (contact name).</li> <li>GSTABL:</li> <li>Type: Input (<code>IF F 256 12AI 2 DISK</code>).</li> <li>Purpose: General system table for terms, salesman, and class descriptions.</li> <li>Key: <code>TBTYPE</code>/<code>TBCODE</code> (e.g., <code>ARTERM</code>, <code>SLSMAN</code>).</li> <li>Fields: <code>TBDEL</code> (delete flag), <code>TBTYPE</code> (table type), <code>TBCODE</code> (code), <code>TBDESC</code> (description).</li> <li>ARCONT:</li> <li>Type: Input (<code>IF F 256 2AI 2 DISK</code>).</li> <li>Purpose: A/R control file for company data and aging limits.</li> <li>Key: <code>ARCO</code> (company number).</li> <li>Fields: <code>CONAME</code> (company name), <code>ACLMT1-4</code> (aging limits).</li> <li>PRINT:</li> <li>Type: Output (<code>O 164 OF PRINTER U8</code>).</li> <li>Purpose: Primary report output.</li> <li>PRINT2:</li> <li>Type: Output (<code>O 164 OA PRINTER</code>).</li> <li>Purpose: Secondary report output for errors or additional copies.</li> <li>PRINT3:</li> <li>Type: Output (<code>O 164 OV PRINTER U7</code>).</li> <li>Purpose: Additional report output, possibly for group or company summaries.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call external programs (e.g., via <code>CALL</code> operation). However, it is called by the OCL program <code>AR500P.ocl36.txt</code>, which passes parameters like <code>?9?</code> and <code>?11?</code> (likely mapped to <code>KYOUTS</code>, <code>KYREPT</code>, etc.).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Revision Log:</li> <li>Modified on 04/13/05 to use invoice date (<code>ADDATE</code>) instead of due date for aging, with buckets changed to 0-30, 31-60, 61-90, 91-120, over 120 days.</li> <li>Error Handling:</li> <li>Reports invalid <code>ARDETL</code> types, missing <code>ARCUST</code> records, and out-of-balance conditions.</li> <li>Hierarchical Processing:</li> <li>Uses RPG cycle levels (<code>L1</code>, <code>L3</code>, <code>L4</code>, <code>L5</code>) for customer, group, and company processing.</li> <li>Output:</li> <li>Produces a detailed report with headers, customer details, aging buckets, and totals, with special handling for NOD and out-of-balance conditions.</li> </ul> <p>If you need further details (e.g., specific field calculations, report layout, or additional file structures), please provide more context or related files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/","title":"AR500P OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, <code>AR500P.ocl36.txt</code>, used on IBM midrange systems like the AS/400 (now IBM i) to control job execution and interact with programs and files. This OCL script appears to be part of an Accounts Receivable (A/R) Aged Trial Balance process. Below, I\u2019ll explain the process steps, identify external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to automate job control and program execution on IBM midrange systems. The <code>AR500P</code> OCL script orchestrates the execution of an Accounts Receivable process. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Call to GSGENIEC:</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>The script starts by calling an external program named <code>GSGENIEC</code>. This is likely a utility or initialization program that performs setup tasks, such as setting up the environment or validating parameters.</li> <li>The purpose of <code>GSGENIEC</code> is not specified in the OCL, but it could handle tasks like date validation, user authorization, or library list setup.</li> </ul> </li> <li> <p>Conditional Check on Location 506, Position 3:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This checks the value at memory location 506, position 3 (likely a system or program variable).</li> <li>If the condition evaluates to <code>YES</code> (true), the script executes a <code>RETURN</code>, which terminates the OCL procedure immediately, halting further execution.</li> <li>This acts as an early exit condition, possibly to skip processing if a specific flag or parameter is set.</li> </ul> </li> <li> <p>Procedure Call with Parameter:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code>, passing a parameter referenced as <code>?9?</code>.</li> <li>The commas indicate placeholder parameters (up to 8) that are not used here.</li> <li><code>?9?</code> is a substitution variable, likely representing a dynamic value like a company code, report date, or job parameter.</li> <li>The purpose of <code>SCPROCP</code> is not detailed, but it could be a system procedure for setting up job control or environment variables.</li> </ul> </li> <li> <p>Clear Local Variables:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>This clears all local variables in the job\u2019s memory to a blank state, ensuring no residual data affects subsequent steps.</li> </ul> </li> <li> <p>Call to GSY2K:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This invokes a program or procedure named <code>GSY2K</code>, likely related to Year 2000 (Y2K) date handling or conversion.</li> <li>On IBM midrange systems, <code>GSY2K</code> utilities were common for ensuring date fields were processed correctly (e.g., converting two-digit years to four-digit years).</li> <li>This step ensures date-related data in the A/R process is Y2K-compliant.</li> </ul> </li> <li> <p>Load Program AR500P:</p> </li> <li> <p><code>// LOAD AR500P</code>:</p> <ul> <li>This loads the main program <code>AR500P</code> into memory for execution.</li> <li><code>AR500P</code> is likely an RPG (Report Program Generator) program responsible for generating the A/R Aged Trial Balance report.</li> </ul> </li> <li> <p>File Declaration for ARCONT:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHRMM</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> with a label that includes the substitution variable <code>?9?</code> (e.g., a company or library identifier).</li> <li><code>DISP-SHRMM</code> indicates the file is opened in shared mode, allowing multiple jobs to access it simultaneously (read-only or read/write depending on the program).</li> <li><code>ARCONT</code> is likely the Accounts Receivable control file containing customer balances, aging buckets, or transaction data.</li> </ul> </li> <li> <p>Run the Loaded Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Executes the loaded <code>AR500P</code> program, which processes the A/R data and generates the Aged Trial Balance report.</li> <li>The program likely reads from the <code>ARCONT</code> file and performs calculations to categorize receivables into aging buckets (e.g., current, 30 days, 60 days, etc.).</li> </ul> </li> <li> <p>Conditional Check on Location 124, Position 6:</p> </li> <li> <p><code>// IF ?L'124,6'?/CANCEL GOTO END</code>:</p> <ul> <li>Checks the value at memory location 124, position 6.</li> <li>If the condition evaluates to <code>CANCEL</code> (true), the script jumps to the <code>END</code> tag, terminating the job.</li> <li>This could be a check for an error condition or user-initiated cancellation.</li> </ul> </li> <li> <p>Conditional Job Queue Submission:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR500,,,,,,,,,?9?,,?11?</code>:</li> <li>Checks the value at memory location 120, position 1.</li> <li>If the condition is <code>Y</code> (true), the <code>AR500</code> program is submitted to a job queue specified by <code>?CLIB?</code> (a library or job queue name), with parameters <code>?9?</code> and <code>?11?</code>.</li> <li>This implies the A/R process can run in batch mode, possibly for large datasets or scheduled processing.</li> <li><code>// ELSE AR500 ,,,,,,,,?9?,,?11?</code>:</li> <li>If the condition is false, the <code>AR500</code> program is executed directly (not in a job queue) with the same parameters <code>?9?</code> and <code>?11?</code>.</li> <li>The commas again represent unused parameter positions.</li> <li><code>?11?</code> is another substitution variable, possibly for additional report options or filters.</li> </ul> </li> <li> <p>End Tag:</p> <ul> <li><code>// TAG END</code>:</li> <li>Marks the <code>END</code> label, used as a target for the <code>GOTO END</code> statement in case of cancellation.</li> </ul> </li> <li> <p>Clear Local Variables Again:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Clears all local variables again at the end of the script, ensuring a clean exit.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls or references the following external programs or procedures: 1. GSGENIEC:    - Called at the start, likely a utility for environment setup or validation. 2. SCPROCP:    - A procedure invoked with the <code>?9?</code> parameter, possibly for job control or configuration. 3. GSY2K:    - A program or procedure for Y2K date handling, ensuring proper date processing. 4. AR500P:    - The main RPG program loaded and executed to generate the A/R Aged Trial Balance. 5. AR500:    - Referenced in the job queue or direct execution step, likely the same program as <code>AR500P</code> or a related module.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script explicitly references the following file: 1. ARCONT:    - File name: <code>ARCONT</code>    - Label: <code>?9?ARCONT</code> (dynamic label based on the <code>?9?</code> parameter)    - Disposition: <code>SHRMM</code> (shared mode)    - Purpose: Likely the Accounts Receivable control file containing customer data, balances, or transaction details used for the Aged Trial Balance report.</p> <p>No other files are explicitly mentioned, but the <code>AR500P</code> program may access additional files (e.g., customer master, transaction history) not declared in the OCL.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variables:</li> <li><code>?9?</code> and <code>?11?</code> are placeholders for dynamic values passed to the script, such as company codes, report dates, or job parameters.</li> <li><code>?CLIB?</code> likely represents a library name for the job queue.</li> <li>Conditional Logic:</li> <li>The script uses memory location checks (<code>?L'506,3'?</code>, <code>?L'124,6'?</code>, <code>?L'120,1'?</code>) to control flow, typical in OCL for decision-making based on system or program states.</li> <li>Job Queue vs. Direct Execution:</li> <li>The script supports both batch (via <code>JOBQ</code>) and interactive execution of <code>AR500</code>, providing flexibility for different processing needs.</li> <li>A/R Aged Trial Balance:</li> <li>The process generates a report categorizing receivables by aging periods, commonly used for financial reporting and credit management.</li> </ul> <p>If you have additional details (e.g., the contents of <code>AR500P</code> or the structure of <code>ARCONT</code>), I can provide a more detailed analysis of the RPG program\u2019s logic or file interactions. Let me know if you\u2019d like me to search for related information or analyze specific aspects further!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/","title":"AR500P RPGLE","text":"<p>The provided document is an RPGLE (Report Program Generator Language Extended) program, <code>AR500P.rpgle.txt</code>, which is called by the OCL program <code>AR500P.ocl36.txt</code> to generate an Accounts Receivable (A/R) Aged Trial Balance report. This program handles user input, validates parameters, and prepares data for the report. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR500P</code> RPGLE program is an interactive program that prompts users for input via a workstation display file, validates the input, and sets up parameters for generating the A/R Aged Trial Balance report. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group, allowing better resource management.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>H DFTNAME(AR500P)</code>: Sets the default program name.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li><code>msg</code>: A 40-character array with 19 predefined error messages (loaded via <code>CTDATA</code>).</li> <li><code>dco</code>: A 35-character array to store company names (up to 3 companies).</li> <li><code>uds</code>: A data structure defining user input fields (e.g., <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, etc.) for report parameters like date, company selection, and report options.</li> <li><code>y2kcen</code> and <code>y2kcmp</code>: Variables for Y2K date handling (century and comparison year).</li> </ul> </li> <li> <p>File Declarations:</p> </li> <li>AR500PD (Workstation File):<ul> <li>Defined as <code>CF E WORKSTN</code> with a handler (<code>PROFOUNDUI(HANDLER)</code>), indicating a modernized display file for user interaction, likely using a web-based interface.</li> </ul> </li> <li>ARCONT (Accounts Receivable Control File):<ul> <li>Defined as <code>UF F 256 2AIDISK KEYLOC(2)</code>: A 256-byte file with a 2-byte key (company number <code>acco</code>), used for update (<code>UF</code>) and accessed by key.</li> </ul> </li> <li> <p>GSCONT (General System Control File):</p> <ul> <li>Defined as <code>IF F 512 2AIDISK KEYLOC(2)</code>: A 512-byte input file with a 2-byte key (company number <code>gxcono</code>), likely used for system-wide settings.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>Initial Workstation File Read:<ul> <li>Checks <code>qsctl</code> (control flag). If blank, sets indicators <code>*IN09</code> (initial screen) and <code>*IN01</code> (display screen), and sets <code>qsctl</code> to <code>'R'</code>.</li> <li>Otherwise, reads the display file <code>ar500pfm</code> and returns if the last record indicator (<code>*INLR</code>) is on.</li> </ul> </li> <li>Indicator and Message Initialization:<ul> <li>Clears <code>msg40</code> (error message field) and resets indicators <code>50-62</code>, <code>81</code>, and <code>90</code> to <code>*OFF</code>.</li> </ul> </li> <li>Cancel Check:<ul> <li>If <code>*INKG</code> (cancel key) is on, sets <code>kycanc</code> to <code>'CANCEL'</code>, turns off <code>*IN01</code> and <code>*IN09</code>, sets <code>*INLR</code> to <code>*ON</code>, and exits.</li> </ul> </li> <li>One-Time Setup (Subroutine <code>onetim</code>):<ul> <li>Executed if <code>*IN09</code> is on (initial run).</li> <li>Captures current time and date, stores in <code>kydate</code>.</li> <li>Reads <code>ARCONT</code> to populate <code>dco</code> array with up to three company numbers (<code>acco</code>) and names (<code>acname</code>), skipping deleted records (<code>acdel = 'D'</code>).</li> <li>Initializes default parameters:</li> <li><code>kyds = 'D'</code> (detail report).</li> <li><code>kyalco = 'ALL'</code> or <code>'CO '</code> (based on <code>GSCONT</code> company number <code>gxcono</code>).</li> <li><code>kyalcs = 'ALL'</code> (all customers).</li> <li><code>kyalsl = 'ALL'</code> (all salesmen).</li> <li><code>kyjobq = 'N'</code> (no job queue).</li> <li><code>kycopy = 01</code> (one copy).</li> <li><code>kyouts = 'O'</code> (outstanding invoices).</li> <li><code>kynod = 'N'</code> (no NOD report).</li> <li><code>kyslcy = 'N'</code> (no salesman copies).</li> <li><code>kyrept = 'C'</code> (customer sequence).</li> <li><code>kyclyn = 'N'</code> (no credit limit).</li> <li>Releases any locked <code>ARCONT</code> records using a blank key (<code>nulkey</code>).</li> </ul> </li> <li>Screen Processing (Subroutine <code>screen1</code>):<ul> <li>Executed if <code>*IN01</code> is on and <code>*IN15</code> is off.</li> <li>Validates user input parameters:</li> <li>Date Validation: Calls <code>@dtedt</code> to validate <code>kydate</code> (MMDDYY format).</li> <li>Company Selection:<ul> <li>Ensures <code>kyalco</code> is <code>'ALL'</code> or <code>'CO '</code>.</li> <li>If <code>'CO '</code>, validates <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> against <code>ARCONT</code> (non-zero, non-deleted records).</li> <li>If <code>'ALL'</code>, ensures no company numbers are entered.</li> </ul> </li> <li>Customer Selection:<ul> <li>Ensures <code>kyalcs</code> is <code>'ALL'</code> or <code>'SEL'</code>.</li> <li>If <code>'SEL'</code>, requires non-zero <code>kycs01</code>, <code>kycs02</code>, or <code>kycs03</code>.</li> </ul> </li> <li>Outstanding Invoices:<ul> <li>Ensures <code>kyouts</code> is <code>'O'</code> or blank.</li> </ul> </li> <li>Report Sequence:<ul> <li>Ensures <code>kyrept</code> is <code>'C'</code>, <code>'N'</code>, or <code>'S'</code>.</li> <li>If <code>kyslcy = 'Y'</code>, requires <code>kyrept = 'S'</code>.</li> </ul> </li> <li>Salesmen Selection:<ul> <li>Ensures <code>kyalsl</code> is <code>'ALL'</code> or <code>'SEL'</code>.</li> <li>If <code>'SEL'</code>, requires <code>kyrept = 'S'</code> and valid <code>kyfmsl</code>/<code>kytosl</code> (from/to salesman, where <code>kytosl &gt; kyfmsl</code>).</li> </ul> </li> <li>Job Queue:<ul> <li>Ensures <code>kyjobq</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>Credit Limit:<ul> <li>Ensures <code>kyclyn</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>NOD Report:<ul> <li>Ensures <code>kynod</code> is <code>'Y'</code> or <code>'N'</code>.</li> <li>If <code>kynod = 'Y'</code>, requires <code>kyds = 'D'</code>.</li> </ul> </li> <li>Salesman Copies:<ul> <li>Ensures <code>kyslcy</code> is <code>'Y'</code> or <code>'N'</code>.</li> </ul> </li> <li>Copy Count:<ul> <li>Ensures <code>kycopy</code> is non-zero (defaults to 1 if zero).</li> </ul> </li> <li>Displays error messages (<code>msg40</code>) from the <code>msg</code> array if validation fails, setting <code>*IN81</code> and appropriate error indicators (<code>50-62</code>, <code>90</code>).</li> <li>Updates <code>ARCONT</code> with <code>kydate</code> for non-deleted records if validations pass.</li> <li>Releases locked records using <code>nulkey</code>.</li> </ul> </li> <li> <p>Date Validation (Subroutine <code>@dtedt</code>):</p> <ul> <li>Validates <code>kydate</code> (MMDDYY format):</li> <li>Breaks down into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Checks month (1-12).</li> <li>Validates day based on month:<ul> <li>February: 29 days for leap years, 28 otherwise.</li> <li>Months 4, 6, 9, 11: 30 days.</li> <li>Others: 31 days.</li> </ul> </li> <li>Handles leap year calculations using <code>y2kcen</code> and <code>y2kcmp</code> for century and year checks.</li> <li>Sets <code>*IN79</code> if the date is invalid.</li> </ul> </li> <li> <p>Output and Termination:</p> </li> <li>Writes to the display file (<code>ar500pfm</code>) if <code>*IN81</code> is on, displaying errors or updated parameters.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> to end the program if no further processing is needed.</li> <li>Updates <code>ARCONT</code> with the ageing date (<code>kydate</code>) for all records.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the A/R Aged Trial Balance report: 1. Date Validation:    - The ageing date (<code>kydate</code>) must be a valid date in MMDDYY format, with proper month, day, and leap year checks. 2. Company Selection:    - Must be <code>'ALL'</code> (all companies) or <code>'CO '</code> (specific companies).    - If <code>'CO '</code>, at least one valid company number (<code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>) must exist in <code>ARCONT</code> and not be deleted (<code>acdel \u2260 'D'</code>).    - If <code>'ALL'</code>, no company numbers should be specified. 3. Customer Selection:    - Must be <code>'ALL'</code> (all customers) or <code>'SEL'</code> (selected customers).    - If <code>'SEL'</code>, at least one customer number (<code>kycs01</code>, <code>kycs02</code>, or <code>kycs03</code>) must be non-zero. 4. Outstanding Invoices:    - Must be <code>'O'</code> (outstanding invoices only) or blank. 5. Report Sequence:    - Must be <code>'C'</code> (customer sequence), <code>'N'</code> (name sequence), or <code>'S'</code> (salesman sequence).    - If salesman copies (<code>kyslcy = 'Y'</code>), report sequence must be <code>'S'</code>. 6. Salesmen Selection:    - Must be <code>'ALL'</code> (all salesmen) or <code>'SEL'</code> (selected salesmen).    - If <code>'SEL'</code>, report sequence must be <code>'S'</code>, and valid from/to salesman numbers (<code>kyfmsl</code>, <code>kytosl</code>) must be provided, with <code>kytosl &gt; kyfmsl</code>. 7. Job Queue:    - Must be <code>'Y'</code> (run in batch) or <code>'N'</code> (run interactively). 8. Credit Limit:    - Must be <code>'Y'</code> (print credit limit) or <code>'N'</code> (don\u2019t print). 9. NOD Report:    - Must be <code>'Y'</code> (include NOD report) or <code>'N'</code> (exclude).    - If <code>'Y'</code>, report type must be detail (<code>kyds = 'D'</code>). 10. Salesman Copies:     - Must be <code>'Y'</code> (print salesman copies) or <code>'N'</code> (don\u2019t print). 11. Copy Count:     - Must be non-zero; defaults to 1 if zero. 12. Report Type:     - Must be <code>'D'</code> (detail) or <code>'S'</code> (summary); defaults to <code>'D'</code> if blank.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR500PD:</li> <li>Type: Workstation file (<code>CF E WORKSTN</code>).</li> <li>Purpose: Display file for user interaction, likely a modernized interface using Profound UI.</li> <li>Fields: Outputs fields like <code>kydate</code>, <code>kyds</code>, <code>kyalco</code>, <code>kyco1-3</code>, <code>dco</code>, <code>kyalcs</code>, <code>kycs01-03</code>, <code>kyouts</code>, <code>kyrept</code>, <code>kyjobq</code>, <code>kycopy</code>, <code>msg40</code>, <code>kyclyn</code>, <code>kyalsl</code>, <code>kyfmsl</code>, <code>kytosl</code>, <code>kynod</code>, <code>kyslcy</code>, <code>kycucl</code>.</li> <li>ARCONT:</li> <li>Type: Disk file (<code>UF F 256 2AIDISK KEYLOC(2)</code>).</li> <li>Purpose: Accounts Receivable control file, storing company and customer data.</li> <li>Key: <code>acco</code> (company number, 2 bytes).</li> <li>Fields:<ul> <li><code>acdel</code> (1 byte): Deletion flag (<code>'D'</code> for deleted).</li> <li><code>acco</code> (2 bytes): Company number.</li> <li><code>acname</code> (30 bytes): Company name.</li> <li><code>acdate</code> (6 bytes): Ageing date.</li> </ul> </li> <li>GSCONT:</li> <li>Type: Disk file (<code>IF F 512 2AIDISK KEYLOC(2)</code>).</li> <li>Purpose: General system control file, likely for system-wide settings like default company number.</li> <li>Key: <code>gxcono</code> (2 bytes).</li> <li>Fields:<ul> <li><code>gxdel</code> (1 byte): Deletion flag.</li> <li><code>gxcono</code> (2 bytes): Company number.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call external programs (e.g., via <code>CALL</code> operation). However, it interacts with: - Profound UI Handler (<code>PROFOUNDUI(HANDLER)</code>): Used by the <code>AR500PD</code> workstation file for rendering the user interface, indicating a modernized front-end. - The OCL program (<code>AR500P.ocl36.txt</code>) that calls this RPGLE program, passing parameters like <code>?9?</code> and <code>?11?</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/AR500P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Y2K Compliance:</li> <li>The program includes Y2K date handling (<code>y2kcen</code>, <code>y2kcmp</code>) to ensure correct century calculations for leap years.</li> <li>Error Handling:</li> <li>Uses a predefined <code>msg</code> array for user-friendly error messages displayed via <code>msg40</code>.</li> <li>Indicators (<code>50-62</code>, <code>79</code>, <code>81</code>, <code>90</code>) control error display and program flow.</li> <li>Record Locking:</li> <li>The program releases locked <code>ARCONT</code> records using a blank key (<code>nulkey</code>) to prevent deadlocks.</li> <li>Conversion Notes:</li> <li>The program was converted using TARGET/400 on 04/11/23, with 221 lines added, 5 modified, and 441 processed, indicating modernization from older RPG/36 or RPG III code.</li> <li>Integration with OCL:</li> <li>The OCL program (<code>AR500P.ocl36.txt</code>) loads and runs <code>AR500P</code>, passing parameters (<code>?9?</code>, <code>?11?</code>) that likely correspond to fields like <code>kyalco</code>, <code>kyco1-3</code>, or <code>kyjobq</code>.</li> </ul> <p>This program sets up and validates parameters for the A/R Aged Trial Balance report, ensuring data integrity before report generation. If you need further analysis (e.g., specific field mappings, report output format, or additional files), please provide more details or related files!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/","title":"Summary AR500P OCL","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of three components: the OCL program (<code>AR500P.ocl36.txt</code>), the RPGLE program (<code>AR500P.rpgle.txt</code>), and the RPG/36 program (<code>AR500.rpg36.txt</code>). Together, they implement a single primary use case:</p> <ol> <li>Generate Accounts Receivable (A/R) Aged Trial Balance Report:</li> <li>Description: This use case involves prompting the user for parameters, validating them, and generating a detailed A/R Aged Trial Balance report that categorizes customer balances into aging buckets (0-30, 31-60, 61-90, 91-120, over 120 days from invoice date) by customer number, with options for filtering by company, customer, salesman, and other criteria.</li> <li>Components:<ul> <li>OCL Program (<code>AR500P.ocl36.txt</code>): Orchestrates the process by calling initialization programs (<code>GSGENIEC</code>, <code>GSY2K</code>), loading the RPGLE program, and submitting or running the RPG/36 program.</li> <li>RPGLE Program (<code>AR500P.rpgle.txt</code>): Handles user input via a workstation interface, validates parameters, and updates the A/R control file with the aging date.</li> <li>RPG/36 Program (<code>AR500.rpg36.txt</code>): Processes customer and invoice data, calculates aging buckets, and generates the report output.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#function-requirement-document-ar-aged-trial-balance-report-generation","title":"Function Requirement Document: A/R Aged Trial Balance Report Generation","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#ar-aged-trial-balance-report-generation-function-requirements","title":"A/R Aged Trial Balance Report Generation Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#purpose","title":"Purpose","text":"<p>The function generates an Accounts Receivable (A/R) Aged Trial Balance report, categorizing customer balances into aging buckets based on invoice dates, with flexible filtering and reporting options.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Aging Date (<code>kydate</code>, 6-digit, MMDDYY): Date for aging calculations.</li> <li>Company Selection (<code>kyalco</code>, string): <code>'ALL'</code> or <code>'CO '</code> (specific companies).</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, 2-digit each): Up to three company numbers if <code>kyalco = 'CO '</code>.</li> <li>Customer Selection (<code>kyalcs</code>, string): <code>'ALL'</code> or <code>'SEL'</code> (specific customers).</li> <li>Customer Numbers (<code>kycs01</code>, <code>kycs02</code>, <code>kycs03</code>, 6-digit each): Up to three customer numbers if <code>kyalcs = 'SEL'</code>.</li> <li>Salesmen Selection (<code>kyalsl</code>, string): <code>'ALL'</code> or <code>'SEL'</code> (specific salesmen).</li> <li>Salesmen Range (<code>kyfmsl</code>, <code>kytosl</code>, 2-digit each): From/to salesman numbers if <code>kyalsl = 'SEL'</code>.</li> <li>Report Type (<code>kyds</code>, string): <code>'D'</code> (detail) or <code>'S'</code> (summary).</li> <li>Outstanding Invoices (<code>kyouts</code>, string): <code>'O'</code> (outstanding only) or blank.</li> <li>Report Sequence (<code>kyrept</code>, string): <code>'C'</code> (customer), <code>'N'</code> (name), or <code>'S'</code> (salesman).</li> <li>Credit Limit Flag (<code>kyclyn</code>, string): <code>'Y'</code> (print) or <code>'N'</code> (don\u2019t print).</li> <li>NOD Report Flag (<code>kynod</code>, string): <code>'Y'</code> (NOD only) or <code>'N'</code> (all records).</li> <li>Salesman Copies (<code>kyslcy</code>, string): <code>'Y'</code> (print) or <code>'N'</code> (don\u2019t print).</li> <li>Customer Class (<code>kycucl</code>, string): Customer class code or blank.</li> <li>Copy Count (<code>kycopy</code>, 2-digit): Number of report copies (default: 1).</li> <li>Job Queue Flag (<code>kyjobq</code>, string): <code>'Y'</code> (batch) or <code>'N'</code> (interactive).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>A/R Aged Trial Balance Report:</li> <li>Format: Printed report (to <code>PRINT</code>, <code>PRINT2</code>, or <code>PRINT3</code>).</li> <li>Content: Customer details, aging buckets (0-30, 31-60, 61-90, 91-120, over 120 days), totals, and optional credit limit/comments.</li> <li>Structure: Hierarchical by company, customer group, and customer.</li> <li>Updated <code>ARCONT</code> File: Records updated with aging date (<code>kydate</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Validate <code>kydate</code> (MMDDYY format, valid month/day, leap year check).</li> <li>Ensure <code>kyalco</code> is <code>'ALL'</code> or <code>'CO '</code>; if <code>'CO '</code>, validate <code>kyco1-3</code> against <code>ARCONT</code> (non-deleted, <code>acdel \u2260 'D'</code>); if <code>'ALL'</code>, ensure <code>kyco1-3</code> are zero.</li> <li>Ensure <code>kyalcs</code> is <code>'ALL'</code> or <code>'SEL'</code>; if <code>'SEL'</code>, require non-zero <code>kycs01-3</code>.</li> <li>Ensure <code>kyalsl</code> is <code>'ALL'</code> or <code>'SEL'</code>; if <code>'SEL'</code>, require <code>kyrept = 'S'</code> and <code>kytosl &gt; kyfmsl</code>.</li> <li>Ensure <code>kyds</code> is <code>'D'</code> or <code>'S'</code> (default: <code>'D'</code> if blank).</li> <li>Ensure <code>kyouts</code> is <code>'O'</code> or blank.</li> <li>Ensure <code>kyrept</code> is <code>'C'</code>, <code>'N'</code>, or <code>'S'</code>; if <code>kyslcy = 'Y'</code>, require <code>'S'</code>.</li> <li>Ensure <code>kyclyn</code>, <code>kynod</code>, <code>kyslcy</code> are <code>'Y'</code> or <code>'N'</code>.</li> <li>Ensure <code>kycopy</code> is non-zero (default: 1).</li> <li>If <code>kynod = 'Y'</code>, require <code>kyds = 'D'</code>.</li> <li> <p>Validate <code>kycucl</code> against <code>GSTABL</code> if specified.</p> </li> <li> <p>Initialize Environment:</p> </li> <li>Retrieve company names (<code>CONAME</code>) and aging limits (<code>ACLMT1-4</code>) from <code>ARCONT</code>.</li> <li>Retrieve customer class description from <code>GSTABL</code> if <code>kycucl</code> is specified.</li> <li> <p>Set default parameters if needed (e.g., <code>kycopy = 1</code>, <code>kyds = 'D'</code>).</p> </li> <li> <p>Update Aging Date:</p> </li> <li> <p>Update <code>ARCONT</code> records with <code>kydate</code> for non-deleted records.</p> </li> <li> <p>Process Data:</p> </li> <li>Read <code>ARCUST</code> and <code>ARDETL</code>:<ul> <li>Process hierarchically by company (<code>ARCO</code>), customer group (<code>ADGCO</code>, <code>ADGCUS</code>), and customer (<code>ARCUST</code>).</li> <li>Match <code>ARDETL</code> records to <code>ARCUST</code> using <code>ADCOCU</code>.</li> </ul> </li> <li>Assign Aging Buckets:<ul> <li>Use <code>ADDATE</code> (invoice date) to categorize <code>ADAMT</code> into buckets (0-30, 31-60, 61-90, 91-120, over 120 days) based on <code>kydate</code>.</li> <li>For invoices (<code>ADTYPE = 'I'</code>), calculate balance (<code>ADAMT - ADPART</code>); if <code>kyouts = 'O'</code>, include only if balance \u2260 0.</li> <li>Adjust buckets for credits (<code>C</code>), adjustments (<code>J</code>), and payments (<code>P</code>).</li> <li>If <code>kynod = 'Y'</code>, process only records with <code>ADNOD = 'Y'</code>.</li> </ul> </li> <li>Accumulate Totals:<ul> <li>Customer totals (<code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>).</li> <li>Group totals (<code>L4TOT</code>, <code>L4CUR</code>, <code>L40110</code>, <code>L41120</code>, <code>L42130</code>, <code>L4OV30</code>).</li> <li>Company totals (<code>L5TOT</code>, <code>L5CUR</code>, <code>L50110</code>, <code>L51120</code>, <code>L52130</code>, <code>L5OV30</code>).</li> <li>Prepay balance (<code>L5CPRE</code>) for prepaid cash invoices (<code>ADINV1 = 9</code>).</li> </ul> </li> <li> <p>Validate Balances:</p> <ul> <li>Compare <code>ARDETL</code> totals (<code>DTA</code> array) with <code>ARCUST</code> totals (<code>ARTOTD</code>, <code>ARCURD</code>, etc.).</li> <li>Crossfoot <code>ARCUST</code> aging fields (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30 = ARTOTD</code>).</li> <li>Increment <code>OUTBAL</code> for mismatches.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>Headers: Include company name, date, time, aging date, customer class, and bucket ranges (0-30, 31-60, 61-90, 91-120, over 120 days).</li> <li>Details: Print customer number, name, salesman, totals, last payment, finance charges, and invoice details (invoice number, date, amount, reference invoice).</li> <li>Optional Fields: Include credit limit (<code>ARCLMT</code>) if <code>kyclyn = 'Y'</code>, terms, and comments (<code>CSCMT1-3</code>) from <code>ARCUSP</code>.</li> <li>Subtotals/Totals: Print customer, group, and company totals; highlight out-of-balance conditions (<code>OUTBAL &gt; 0</code>) and credit limit violations.</li> <li> <p>Output Streams: Write to <code>PRINT</code>, <code>PRINT2</code>, or <code>PRINT3</code> based on report type and errors.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>kyjobq = 'Y'</code>, submit to batch; otherwise, run interactively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Aging: Use invoice date (<code>ADDATE</code>) for buckets: 0-30, 31-60, 61-90, 91-120, over 120 days.</li> <li>Filters:</li> <li>Company: <code>'ALL'</code> or specific (<code>kyco1-3</code> must exist in <code>ARCONT</code>).</li> <li>Customer: <code>'ALL'</code> or specific (<code>kycs01-3</code> non-zero if <code>'SEL'</code>).</li> <li>Salesmen: <code>'ALL'</code> or range (<code>kytosl &gt; kyfmsl</code> if <code>'SEL'</code>).</li> <li>Outstanding: Include only non-zero balances if <code>kyouts = 'O'</code>.</li> <li>NOD: Process only <code>ADNOD = 'Y'</code> records if <code>kynod = 'Y'</code>, requiring <code>kyds = 'D'</code>.</li> <li>Report Options:</li> <li>Sequence: <code>'C'</code> (customer), <code>'N'</code> (name), or <code>'S'</code> (salesman; required if <code>kyslcy = 'Y'</code>).</li> <li>Type: <code>'D'</code> (detail) or <code>'S'</code> (summary).</li> <li>Copies: Non-zero <code>kycopy</code> (default: 1).</li> <li>Credit Limit: Print if <code>kyclyn = 'Y'</code>.</li> <li>Validations:</li> <li>Ensure valid date, company, customer, salesman, and parameter values.</li> <li>Report out-of-balance conditions between <code>ARDETL</code> and <code>ARCUST</code>.</li> <li>Flag customers exceeding credit limit (<code>ARCLMT &lt; ARTOTD</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Buckets:</li> <li>For each <code>ARDETL</code> record:<ul> <li>Calculate days from <code>ADDATE</code> to <code>kydate</code>.</li> <li>Assign <code>ADAMT</code> to bucket based on <code>ADAGE</code> (1=0-30, 2=31-60, 3=61-90, 4=91-120, 5=over 120).</li> <li>Adjust for partial payments (<code>ADPART</code>) and record type (<code>ADTYPE</code>).</li> </ul> </li> <li>Invoice (<code>I</code>): <code>DTA(I) += ADAMT - ADPART</code> (if <code>ADBAL \u2260 0</code> for <code>kyouts = 'O'</code>).</li> <li>Credit (<code>C</code>)/Adjustment (<code>J</code>): <code>DTA(I) += ADAMT</code>.</li> <li>Payment (<code>P</code>): <code>DTA(I) -= ADAMT</code>.</li> <li>Totals:</li> <li>Customer: Sum <code>DTA</code> into <code>L3TOT</code>, <code>L3CUR</code>, <code>L30110</code>, <code>L31120</code>, <code>L32130</code>, <code>L3OV30</code>.</li> <li>Group/Company: Aggregate customer totals into <code>L4*</code> and <code>L5*</code> variables.</li> <li>Prepay: Adjust <code>L5CPRE</code> for prepaid invoices (<code>ADINV1 = 9</code>).</li> <li>Balance Check:</li> <li><code>DTA</code> vs. <code>ARCUST</code> totals; <code>ARTOTD</code> vs. sum of <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>.</li> <li>Increment <code>OUTBAL</code> for mismatches.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCUST: Customer master (balances, aging, credit limit).</li> <li>ARDETL: Invoice details (amount, date, type, NOD).</li> <li>ARCUSP: Credit comments, contact info.</li> <li>GSTABL: Terms, salesman, and class descriptions.</li> <li>ARCONT: Company data, aging limits.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR500P%20Aged%20Trial%20Balance/Summary%20AR500P%20OCL/#constraints","title":"Constraints","text":"<ul> <li>Skip deleted records (<code>ARDEL = 'D'</code>, <code>ADDEL = 'D'</code>, <code>TBDEL = 'D'</code>).</li> <li>Release locked <code>ARCONT</code> records after updates.</li> <li>Handle Y2K-compliant dates using century checks.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/","title":"AR890 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR890.ocl36.txt</code>, used on IBM midrange systems (like AS/400 or IBM i) to control the execution of programs and manage file operations. This OCL script is for a \"Customer Master Inquiry\" process, likely part of an accounts receivable (AR) or customer management system. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to automate tasks, call programs, and manage files on IBM midrange systems. The <code>AR890</code> OCL script performs the following steps:</p> <ol> <li>Delete Overrides for All Files (<code>DLTOVR FILE(*ALL)</code>):</li> <li> <p>This command removes any existing file overrides that may have been set in the current job. File overrides allow temporary redirection of file references (e.g., specifying a different library or file). Clearing overrides ensures a clean slate for file assignments in this job.</p> </li> <li> <p>Call Program <code>GSGENIEC</code> (<code>CALL PGM(GSGENIEC)</code>):</p> </li> <li> <p>The OCL script calls an external program named <code>GSGENIEC</code>. This program likely performs some initialization, validation, or setup tasks. The exact functionality depends on the program\u2019s implementation, but it could be related to environment setup or user validation.</p> </li> <li> <p>Conditional Return (<code>IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li> <p>This line checks a condition based on the value at position 506, column 3 in a local data area or screen buffer (likely a flag or status code). If the condition evaluates to <code>YES</code>, the OCL script terminates (<code>RETURN</code>). This acts as an early exit mechanism, possibly for user cancellation or an error state.</p> </li> <li> <p>Call Procedure <code>SCPROCP</code> (<code>SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li> <p>The script invokes a procedure named <code>SCPROCP</code> with parameters, where <code>?9?</code> is a placeholder (likely for a library or specific value passed at runtime). This procedure might handle additional setup or processing related to the customer inquiry.</p> </li> <li> <p>Run Program <code>GSY2K</code> (<code>GSY2K</code>):</p> </li> <li> <p>The script calls another program, <code>GSY2K</code>. This could be a utility program, possibly related to Year 2000 compliance or date handling, given the name. It may perform data validation or transformation before the main inquiry process.</p> </li> <li> <p>Set Local Data Areas:</p> </li> <li><code>LOCAL OFFSET-200,DATA-'        '</code>: Initializes a local data area at offset 200 with 8 blank spaces. This could be used to clear or set a specific field for subsequent processing.</li> <li> <p><code>LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local data area at offset 480 with the value <code>?9?</code> (likely a library or parameter placeholder). This might be used to pass runtime-specific data to programs or files.</p> </li> <li> <p>Load Program <code>AR890</code> (<code>LOAD AR890</code>):</p> </li> <li> <p>The main program <code>AR890</code> is loaded into memory for execution. This is the core program for the Customer Master Inquiry process, likely an RPG (Report Program Generator) program that handles the inquiry logic.</p> </li> <li> <p>File Definitions:</p> </li> <li>The script defines multiple files to be used by the <code>AR890</code> program (and possibly other called programs). Each file is opened in shared mode (<code>DISP-SHR</code>), meaning multiple jobs can access them concurrently. The files are:<ul> <li><code>ARCUST</code> (Customer Master File)</li> <li><code>ARCUSP</code> (Customer Supplemental File)</li> <li><code>ARCUPR</code> (Customer Pricing File)</li> <li><code>ARCONT</code> (Contact File)</li> <li><code>BICONT</code> (Commented out; likely a Billing Contact File)</li> <li><code>GSPROD</code> (Product File)</li> <li><code>GSTABL</code> (Table File, possibly for codes or configurations)</li> <li><code>GSCONT</code> (General Contact File)</li> <li><code>ARCUFM</code> (Customer File Maintenance, for program <code>AR915P</code>)</li> <li><code>ARCUFMX</code> (Customer File Maintenance Extension, for program <code>AR915P</code>)</li> <li><code>ARCUP3</code> (Customer Pricing File, for program <code>BI907</code>)</li> <li><code>SHIPTO</code> (Ship-To Address File)</li> <li><code>SHIPTHS</code> (Ship-To History File)</li> <li><code>ARCUPHS</code> (Customer Pricing History File)</li> </ul> </li> <li> <p>The <code>?9?</code> placeholder in the <code>LABEL</code> parameter likely represents a library or prefix defined at runtime, allowing flexibility in file access (e.g., different libraries for different environments).</p> </li> <li> <p>Execute the Program (<code>RUN</code>):</p> </li> <li> <p>The <code>RUN</code> command executes the loaded <code>AR890</code> program with the defined files. This program likely performs the customer inquiry, retrieving and displaying customer-related data from the specified files.</p> </li> <li> <p>Set Program Switch (<code>SWITCH 00000000</code>):</p> <ul> <li>This sets the program switch (a set of 8 binary flags) to all zeros (<code>00000000</code>). Switches are used to control program behavior or pass status information to the called program (<code>AR890</code> or others).</li> </ul> </li> <li> <p>Clear Local Data Area (<code>LOCAL BLANK-*ALL</code>):</p> <ul> <li>This clears all local data areas used by the job, resetting them to blanks. This ensures no residual data affects subsequent processes.</li> </ul> </li> <li> <p>End of Script (<code>TAG END</code>):</p> <ul> <li>Marks the end of the OCL script. Execution terminates here unless an earlier <code>RETURN</code> was triggered.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls or references the following external programs: 1. <code>GSGENIEC</code>: Called early in the script, likely for initialization or validation. 2. <code>GSY2K</code>: Called after the conditional check, possibly for date-related processing or data validation. 3. <code>AR890</code>: The main program loaded and executed for the Customer Master Inquiry. 4. <code>AR915P</code>: Referenced in comments, indicating it uses the <code>ARCUFM</code> and <code>ARCUFMX</code> files. This program is likely called by <code>AR890</code> for customer file maintenance. 5. <code>BI907</code>: Referenced in comments, indicating it uses the <code>ARCUP3</code>, <code>SHIPTO</code>, <code>SHIPTHS</code>, and <code>ARCUPHS</code> files. This program is likely called by <code>AR890</code> for billing or shipping-related inquiries.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script defines the following files (tables) used by the <code>AR890</code> program and potentially by the referenced programs (<code>AR915P</code> and <code>BI907</code>): 1. <code>ARCUST</code>: Customer Master File (core customer data). 2. <code>ARCUSP</code>: Customer Supplemental File (additional customer details). 3. <code>ARCUPR</code>: Customer Pricing File (pricing information for customers). 4. <code>ARCONT</code>: Contact File (customer contact information). 5. <code>BICONT</code>: Billing Contact File (commented out, not currently used). 6. <code>GSPROD</code>: Product File (product-related data). 7. <code>GSTABL</code>: Table File (likely for lookup tables or configuration codes). 8. <code>GSCONT</code>: General Contact File (possibly for non-customer contacts). 9. <code>ARCUFM</code>: Customer File Maintenance (used by <code>AR915P</code>). 10. <code>ARCUFMX</code>: Customer File Maintenance Extension (used by <code>AR915P</code>). 11. <code>ARCUP3</code>: Customer Pricing File (used by <code>BI907</code>). 12. <code>SHIPTO</code>: Ship-To Address File (customer shipping addresses). 13. <code>SHIPTHS</code>: Ship-To History File (historical shipping data). 14. <code>ARCUPHS</code>: Customer Pricing History File (historical pricing data).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20OCL/#summary","title":"Summary","text":"<p>The <code>AR890.ocl36</code> script automates the execution of the <code>AR890</code> RPG program for a Customer Master Inquiry process. It: - Initializes the environment by clearing file overrides and calling setup programs (<code>GSGENIEC</code>, <code>GSY2K</code>). - Checks for a condition to exit early. - Defines multiple customer-related files for shared access. - Loads and runs the <code>AR890</code> program, which likely queries and displays customer data. - References additional programs (<code>AR915P</code>, <code>BI907</code>) for specific functions like file maintenance and billing/shipping inquiries.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>GSY2K</code>, <code>AR890</code>, <code>AR915P</code> (referenced), <code>BI907</code> (referenced). Files Used: <code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUPR</code>, <code>ARCONT</code>, <code>BICONT</code> (commented out), <code>GSPROD</code>, <code>GSTABL</code>, <code>GSCONT</code>, <code>ARCUFM</code>, <code>ARCUFMX</code>, <code>ARCUP3</code>, <code>SHIPTO</code>, <code>SHIPTHS</code>, <code>ARCUPHS</code>.</p> <p>If you need further details about the RPG program <code>AR890</code> or the referenced programs, please provide their source code or additional context, as their exact functionality depends on the RPG logic.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/","title":"AR890 RPGLE","text":"<p>The provided <code>AR890.rpgle.txt</code> is an RPGLE (Report Program Generator Language Enhanced) program used for a Customer Master Inquiry system on an IBM midrange platform (e.g., AS/400 or IBM i). It is called by the <code>AR890.ocl36</code> OCL script previously analyzed. The program facilitates inquiry into customer data, including account details, supplemental information, product codes, and contacts, with support for multiple display formats. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the source code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR890</code> RPGLE program is structured to handle interactive customer inquiries through a workstation display file (<code>ar890d</code>). It processes user inputs, retrieves data from various files, and displays results across five screen formats (<code>AR890S01</code> to <code>AR890S05</code>). The main steps are:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Initializes key fields (<code>cocust</code>, <code>ship</code>, <code>o$co</code>, <code>o$cust</code>, <code>o$ship</code>) to zeros, setting up the program for a fresh start.</li> <li> <p>Defines the local data area (<code>*lda</code>) to access runtime parameters (e.g., <code>ldacc</code> for company/customer number, <code>tstprd</code> for library/file group).</p> </li> <li> <p>Read Workstation Input:</p> </li> <li>Checks the control field <code>qsctl</code>. If blank, sets indicator <code>*in09</code> and <code>*in01</code> to <code>1</code>, indicating a new session, and sets <code>qsctl</code> to <code>'R'</code>.</li> <li> <p>Reads input from one of five display formats (<code>AR890S01</code> to <code>AR890S05</code>) based on indicators <code>*in81</code> to <code>*in85</code>. If an invalid read occurs (indicator <code>*in09</code>), it calls the <code>rollky</code> subroutine to handle roll keys.</p> </li> <li> <p>Handle Function Keys:</p> </li> <li>Clear Key (<code>*inka</code>): Clears all fields using the <code>clear</code> subroutine, resets indicators, and displays the initial screen (<code>AR890S01</code>).</li> <li>End of Job (<code>*inkg</code>): Sets the last record indicator (<code>*inlr</code>) to terminate the program and clears relevant indicators.</li> <li>Roll Keys (<code>*in18</code>, <code>*in19</code>): Handles roll forward (up) and roll backward (down) for navigating customer records using <code>rollfw</code> and <code>rollbw</code> subroutines.</li> <li> <p>Command Keys (<code>ke</code>, <code>kf</code>, <code>kh</code>, <code>02</code>, <code>03</code>, <code>04</code>): Trigger specific inquiries:</p> <ul> <li>F2 (<code>ke</code> and <code>02</code>): Customer history inquiry (<code>ARCUST</code> or <code>ARCUSP</code>).</li> <li>F3 (<code>ke</code> and <code>03</code>): Customer form type contacts inquiry (originally called <code>AR915P</code>, now commented out).</li> <li>F4 (<code>kf</code> and <code>04</code>): Customer product code history (originally called <code>GB730P</code>, now commented out; replaced by <code>BI907AC</code> for <code>ARCUPR</code> maintenance).</li> <li>F2 (<code>kh</code> and <code>02</code>): Supplemental file inquiry (<code>ARCUSP</code>).</li> </ul> </li> <li> <p>Screen Processing Subroutines:</p> </li> <li>s1 (Screen 1 - <code>AR890S01</code>):<ul> <li>Validates company number (<code>co</code>) against <code>ARCONT</code>. If invalid, displays error message (<code>msg1</code> = \"INVALID COMPANY NUMBER ENTERED\").</li> <li>Chains to <code>ARCUST</code> and <code>ARCUSP</code> using <code>arkey</code> (company/customer number). If not found, displays \"CUSTOMER NOT FOUND\".</li> <li>Checks for EFT (Electronic Funds Transfer) data and sets <code>*in60</code> if valid.</li> <li>Chains to <code>BICONT</code> to get invoicing style (<code>bcinst</code>) and sets the header (<code>s4head</code>) for screen 4.</li> <li>Calls <code>getcus</code> to retrieve customer data and <code>getsup</code> for supplemental data.</li> <li>Sets <code>*in82</code> to display screen 2 (<code>AR890S02</code>).</li> </ul> </li> <li>s2 (Screen 2 - <code>AR890S02</code>):<ul> <li>Sets <code>*in83</code> to display screen 3 (<code>AR890S03</code>).</li> </ul> </li> <li>s3 (Screen 3 - <code>AR890S03</code>):<ul> <li>Prepares to display customer ship-to products but skips direct <code>ARCUPR</code> processing, instead calling <code>BI907AC</code> (commented out in the code but referenced in comments).</li> <li>Sets <code>*in85</code> to display screen 5 (<code>AR890S05</code>).</li> </ul> </li> <li>s4 (Screen 4 - <code>AR890S04</code>):<ul> <li>Clears arrays for product codes, descriptions, and related fields.</li> <li>If array index <code>x</code> reaches 18, reads previous <code>GSPROD</code> record and fills arrays via <code>filara</code>.</li> <li>If invoicing style (<code>bcinst</code>) is '5', displays screen 5; otherwise, calls <code>s5</code>.</li> </ul> </li> <li> <p>s5 (Screen 5 - <code>AR890S05</code>):</p> <ul> <li>Clears fields using <code>clear</code> and sets <code>*in81</code> to return to screen 1.</li> </ul> </li> <li> <p>Data Retrieval Subroutines:</p> </li> <li>getcus:<ul> <li>Checks if the customer is deleted (<code>ardel = 'D'</code>). If so, displays \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</li> <li>Moves customer data from <code>ARCUST</code> (e.g., name, address, financials) to display fields.</li> <li>Retrieves descriptions for salesman (<code>sls#</code>), terms (<code>term</code>), group (<code>grup</code>), and class (<code>cucl</code>) from <code>GSTABL</code>.</li> </ul> </li> <li>getsup:<ul> <li>Checks if the supplemental record is deleted (<code>csdel = 'D'</code>). If so, displays the deletion message.</li> <li>Converts dates (<code>csstdt</code>, <code>csfsdt</code>, <code>csicdt</code>) to MMDDYY format.</li> <li>Moves supplemental data (e.g., tax codes, comments, freight info) to display fields.</li> </ul> </li> <li> <p>filara:</p> <ul> <li>Fills arrays for screen 4 (<code>prcd</code>, <code>prds</code>, <code>glcd</code>, <code>stno</code>, <code>pfrc</code>, <code>psfr</code>, <code>pcfr</code>) with product data from <code>GSPROD</code> and <code>ARCUPR</code>.</li> <li>Stops when 17 records are filled or end of file is reached (<code>*in70</code>).</li> </ul> </li> <li> <p>Roll Key Handling:</p> </li> <li>rollky: Detects roll forward (<code>status = 01122</code>) or backward (<code>status = 01123</code>) and clears function key indicators.</li> <li>rollfw: Moves to the next customer record in <code>ARCUST</code> and updates <code>arkey</code>.</li> <li> <p>rollbw: Moves to the previous customer record in <code>ARCUST</code> and updates <code>arkey</code>.</p> </li> <li> <p>Write to Display:</p> </li> <li> <p>Writes to the appropriate screen format (<code>AR890S01</code> to <code>AR890S05</code>) based on indicators <code>*in81</code> to <code>*in85</code>.</p> </li> <li> <p>Termination:</p> </li> <li>If <code>*inu8</code> and <code>*in81</code> are on, sets <code>*inlr</code> to terminate the program.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules based on the code and comments:</p> <ol> <li>Customer Validation:</li> <li>Validates company number (<code>co</code>) against <code>ARCONT</code>. If invalid, displays \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Checks if customer exists in <code>ARCUST</code> and <code>ARCUSP</code>. If not found, displays \"CUSTOMER NOT FOUND\".</li> <li> <p>Checks for deletion status (<code>ardel</code> or <code>csdel = 'D'</code>). If deleted, displays \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</p> </li> <li> <p>EFT Validation:</p> </li> <li> <p>If <code>areft = 'Y'</code> (EFT participant), verifies that <code>csarte</code> (ACH bank routing code) and <code>csabk#</code> (ACH bank account number) are non-blank/zero, setting <code>*in60</code> to indicate valid EFT data.</p> </li> <li> <p>Invoicing Style:</p> </li> <li> <p>Uses <code>bcinst</code> from <code>BICONT</code> to determine the header for screen 4 (<code>s4head</code>). If <code>bcinst = '5'</code>, uses alternate header (\"To Bill Gross Gallons Enter 'G'\"); otherwise, uses default (\"To Bill Net Gallons Enter 'N'\").</p> </li> <li> <p>Product Code Handling:</p> </li> <li>Originally processed <code>ARCUPR</code> directly for product codes but now calls <code>BI907AC</code> for maintenance (per revision <code>JB06</code>).</li> <li> <p>Limits array filling to 17 records for product codes (<code>prcd</code>), descriptions (<code>prds</code>), and related fields.</p> </li> <li> <p>Navigation:</p> </li> <li>Supports roll forward/backward to navigate customer records.</li> <li> <p>Command keys (F2, F3, F4) trigger specific inquiries, with F3 and F4 linked to external programs (<code>AR915P</code>, <code>BI907AC</code>) for detailed processing.</p> </li> <li> <p>Data Display:</p> </li> <li>Formats financial data (e.g., <code>artotd</code>, <code>arcurd</code>, <code>arfin$</code>) with specific decimal places.</li> <li>Converts dates (e.g., <code>arhidt</code>, <code>csstdt</code>) from YYMMDD to MMDDYY for display.</li> <li> <p>Retrieves descriptive text for salesman, terms, group, and class codes from <code>GSTABL</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays error messages (<code>msg1</code>, <code>msg2</code>) for invalid inputs or missing records.</li> <li>Sets <code>*in90</code> for error conditions, triggering error message display.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, defined in the file specifications (<code>F-specs</code>):</p> <ol> <li><code>ar890d</code> (Workstation File):</li> <li>Display file for interactive user interface, using formats <code>AR890S01</code> to <code>AR890S05</code>.</li> <li> <p>Handled by <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</p> </li> <li> <p><code>arcust</code> (Customer Master File):</p> </li> <li>Input file, 384 bytes, keyed by company/customer number (<code>keyloc(2)</code>).</li> <li> <p>Contains core customer data (e.g., name, address, financials, credit limit).</p> </li> <li> <p><code>arcusp</code> (Customer Supplemental File):</p> </li> <li>Input file, 1344 bytes, keyed by company/customer number.</li> <li> <p>Stores supplemental data (e.g., tax codes, comments, freight details).</p> </li> <li> <p><code>arcupr</code> (Customer Product Master):</p> </li> <li>Input file, 80 bytes, keyed by company/customer/ship-to/product.</li> <li> <p>Holds product-specific data (e.g., product code, freight codes).</p> </li> <li> <p><code>gsprod</code> (Product File):</p> </li> <li>Input file, 512 bytes, keyed by company/product code.</li> <li> <p>Contains product codes and descriptions.</p> </li> <li> <p><code>arcont</code> (Contact File):</p> </li> <li>Input file, 256 bytes, keyed by company number.</li> <li> <p>Stores ageing period limits (<code>aclmt1</code> to <code>aclmt4</code>).</p> </li> <li> <p><code>bicont</code> (Billing Contact File):</p> </li> <li>Input file, 256 bytes, keyed by company number.</li> <li> <p>Contains invoicing style (<code>bcinst</code>).</p> </li> <li> <p><code>gstabl</code> (Table File):</p> </li> <li>Input file, 256 bytes, keyed by table type/code.</li> <li> <p>Stores descriptions for salesman, terms, group, and class codes.</p> </li> <li> <p><code>gscont</code> (General Contact File):</p> </li> <li>Input file, externally defined, keyed (assumed by company number).</li> <li>Provides default company number (<code>gxcono</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program references the following external programs, though some calls are commented out, indicating they may be invoked conditionally or replaced:</p> <ol> <li><code>GB730P</code> (Commented Out):</li> <li>Previously called for inquiries on <code>ARCUST</code>, <code>ARCUSP</code>, and <code>ARCUPR</code>.</li> <li> <p>Parameters included <code>parmst</code> (data structure with file, company, customer, ship-to).</p> </li> <li> <p><code>AR915P</code> (Commented Out):</p> </li> <li>Previously called for customer form type contacts inquiry (<code>ARCUFM</code>, <code>ARCUFMX</code>).</li> <li> <p>Parameters included company (<code>a$co</code>), customer (<code>a$cust</code>), mode (<code>'INQ'</code>), and file group (<code>a$fgrp</code>).</p> </li> <li> <p><code>BI907AC</code> (Commented Out but Referenced):</p> </li> <li>Called to maintain <code>ARCUPR</code> records instead of direct processing in <code>s3</code> (per revision <code>JB06</code>).</li> <li>Parameters included company (<code>@cpco</code>), customer (<code>@cpcus</code>), ship-to (<code>@cpshp</code>), mode (<code>'INQ'</code>), and file group (<code>@cpfgr</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/AR890%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR890</code> RPGLE program is an interactive customer inquiry application that retrieves and displays customer data across multiple screens. It: - Validates company and customer data, checks deletion status, and handles EFT data. - Supports navigation through roll keys and command keys for specific inquiries. - Retrieves data from multiple files (<code>ARCUST</code>, <code>ARCUSP</code>, <code>ARCUPR</code>, etc.) and formats it for display. - Calls external programs (<code>BI907AC</code>, potentially <code>AR915P</code>, <code>GB730P</code>) for specialized inquiries.</p> <p>Tables Used: <code>ar890d</code>, <code>arcust</code>, <code>arcusp</code>, <code>arcupr</code>, <code>gsprod</code>, <code>arcont</code>, <code>bicont</code>, <code>gstabl</code>, <code>gscont</code>. External Programs Called: <code>GB730P</code> (commented out), <code>AR915P</code> (commented out), <code>BI907AC</code> (commented out but referenced).</p> <p>If you need further analysis of the screen formats, specific field mappings, or the logic of <code>BI907AC</code> or other called programs, please provide additional source code or context.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/","title":"Summary AR890 OCL","text":"<p>The <code>AR890.ocl36</code> OCL script and <code>AR890.rpgle</code> RPGLE program together implement a Customer Master Inquiry system on an IBM midrange platform. Below, I\u2019ll identify the use cases implemented by this program and provide a Function Requirement Document for the primary use case, reimagined as a non-interactive function that processes inputs to produce customer inquiry data.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#list-of-use-cases","title":"List of Use Cases","text":"<p>Based on the OCL and RPGLE code, the program implements the following use cases, all centered around retrieving and presenting customer-related data for inquiry purposes:</p> <ol> <li>Customer Master Inquiry:</li> <li>Description: Allows users to retrieve and view comprehensive customer information, including basic details (name, address), financial data (balances, credit limits), supplemental data (tax codes, comments), product codes, and contact information. Users can navigate through customer records and access specific inquiries (e.g., customer history, product codes, contacts) using command keys.</li> <li>Details: The program supports multiple display formats (<code>AR890S01</code> to <code>AR890S05</code>) for different data views, validates inputs, and integrates with external programs (<code>AR915P</code>, <code>BI907AC</code>) for specific inquiries. It handles navigation (roll forward/backward) and error conditions (e.g., invalid company, deleted customer).</li> </ol> <p>No additional distinct use cases are evident, as the program\u2019s core functionality revolves around this single inquiry process, with variations in data displayed based on user input (e.g., command keys F2, F3, F4).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#customer-master-inquiry-function-requirements","title":"Customer Master Inquiry Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#overview","title":"Overview","text":"<p>The Customer Master Inquiry Function retrieves comprehensive customer information based on provided company and customer numbers, returning data from multiple related files without requiring interactive screen input. The function supports business needs for retrieving customer details, financials, supplemental data, product codes, and contact information for reporting, auditing, or integration purposes.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>): 2-digit numeric (e.g., 01).</li> <li>Customer Number (<code>cust</code>): 6-digit numeric (e.g., 000123).</li> <li>Ship-To Number (<code>ship</code>): 3-digit numeric (optional, default 000 for product inquiries).</li> <li>Inquiry Type (<code>inquiryType</code>): String indicating the type of inquiry:</li> <li>\"CUST\": Customer history (ARCUST).</li> <li>\"SUPP\": Supplemental data (ARCUSP).</li> <li>\"PROD\": Product code history (ARCUPR).</li> <li>\"CONT\": Form type contacts (ARCUFM, via AR915P).</li> <li>File Group (<code>fileGroup</code>): 1-character library prefix (e.g., 'X').</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#outputs","title":"Outputs","text":"<p>A structured data object containing: - Customer Details: Name, address, zip, phone, salesman, terms, credit limit, etc. - Financial Data: Total due, current due, aged balances, sales MTD/YTD, etc. - Supplemental Data: Tax codes, comments, freight details, ACH information, etc. - Product Data: Up to 17 product codes, descriptions, freight codes, etc. - Contact Data: Ageing periods, invoicing style. - Error Messages: Descriptive messages for invalid inputs or missing records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>co</code> exists in <code>ARCONT</code>. If not, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Chain <code>co</code> + <code>cust</code> to <code>ARCUST</code> and <code>ARCUSP</code>. If not found, return error: \"CUSTOMER NOT FOUND\".</li> <li> <p>Check deletion status (<code>ardel</code> or <code>csdel = 'D'</code>). If deleted, return error: \"THIS CUSTOMER WAS PREVIOUSLY DELETED\".</p> </li> <li> <p>Retrieve Customer Data (if <code>inquiryType = \"CUST\"</code> or others):</p> </li> <li>From <code>ARCUST</code>, retrieve:<ul> <li>Name (<code>arname</code>), address (<code>aradr1-4</code>), zip (<code>arzip9</code>), phone (<code>ararea</code>, <code>artele</code>).</li> <li>Financials: Total due (<code>artotd</code>), current due (<code>arcurd</code>), aged balances (<code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code>), sales MTD/YTD (<code>armtd$</code>, <code>arytd$</code>), credit limit (<code>arclmt</code>), etc.</li> <li>Other: Salesman (<code>arsls#</code>), terms (<code>arterm</code>), group (<code>argrup</code>), class (<code>arcucl</code>), EFT status (<code>areft</code>), federal EIN (<code>arfein</code>), etc.</li> </ul> </li> <li> <p>Lookup descriptions for salesman, terms, group, and class in <code>GSTABL</code> using <code>tbdesc</code>.</p> </li> <li> <p>Retrieve Supplemental Data (if <code>inquiryType = \"SUPP\"</code> or others):</p> </li> <li>From <code>ARCUSP</code>, retrieve:<ul> <li>Tax codes (<code>tc</code>), tax exemptions (<code>te</code>), start date (<code>csstdt</code>), credit comments (<code>cscmt1-3</code>), contact name (<code>cscnct</code>).</li> <li>Freight details: Freight code (<code>csfrcd</code>), separate freight (<code>cssfrt</code>), freight bill name/address (<code>csfrnm</code>, <code>csfra1-3</code>).</li> <li>Order/invoice marks (<code>csomk1-4</code>, <code>csimk1-2</code>), dispatch info (<code>csdsp1-4</code>), blanket PO (<code>csbkpo</code>), ACH data (<code>csarte</code>, <code>csabk#</code>).</li> </ul> </li> <li> <p>Convert dates (<code>csstdt</code>, <code>csfsdt</code>, <code>csicdt</code>) from YYMMDD to MMDDYY for output.</p> </li> <li> <p>Retrieve Product Data (if <code>inquiryType = \"PROD\"</code>):</p> </li> <li>Call <code>BI907AC</code> with <code>co</code>, <code>cust</code>, <code>ship</code>, <code>inquiryType = \"INQ\"</code>, and <code>fileGroup</code> to retrieve product data from <code>ARCUPR</code>.</li> <li>For each product (up to 17):<ul> <li>From <code>GSPROD</code>, retrieve product code (<code>tpprod</code>), description (<code>tpdes1</code>).</li> <li>From <code>ARCUPR</code>, retrieve gallons to bill (<code>cpglcd</code>), customer stock number (<code>cpcstk</code>), freight code (<code>cpfrcd</code>), separate freight (<code>cpsfrt</code>), calculated freight (<code>cpcafr</code>), container type (<code>cpcnty</code>).</li> </ul> </li> <li> <p>Return error if no products found for <code>co</code> + <code>cust</code> + <code>ship</code>.</p> </li> <li> <p>Retrieve Contact Data (if <code>inquiryType = \"CONT\"</code>):</p> </li> <li>Call <code>AR915P</code> with <code>co</code>, <code>cust</code>, <code>mode = \"INQ\"</code>, and <code>fileGroup</code> to retrieve contact data from <code>ARCUFM</code>/<code>ARCUFMX</code>.</li> <li>From <code>ARCONT</code>, retrieve ageing periods (<code>aclmt1-4</code>).</li> <li> <p>From <code>BICONT</code>, retrieve invoicing style (<code>bcinst</code>).</p> </li> <li> <p>Handle EFT Validation:</p> </li> <li> <p>If <code>areft = 'Y'</code>, validate <code>csarte</code> (ACH routing code) and <code>csabk#</code> (ACH account number) are non-zero/non-blank. Include EFT validity flag in output.</p> </li> <li> <p>Return Results:</p> </li> <li>Combine data from all relevant files into a structured output.</li> <li>Include any error messages from validation steps.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Input Validation:</li> <li>Company number must exist in <code>ARCONT</code>.</li> <li>Customer must exist in <code>ARCUST</code> and <code>ARCUSP</code> and not be marked as deleted.</li> <li>Product inquiry requires valid <code>ship</code> (defaults to 000).</li> <li>Data Access:</li> <li>Only retrieve data for the specified <code>co</code> + <code>cust</code> combination.</li> <li>Limit product data to 17 records to prevent overflow.</li> <li>Use <code>fileGroup</code> to determine library prefix for file access.</li> <li>EFT Processing:</li> <li>EFT is valid only if <code>areft = 'Y'</code> and both <code>csarte</code> and <code>csabk#</code> are populated.</li> <li>Invoicing Style:</li> <li>If <code>bcinst = '5'</code> in <code>BICONT</code>, use header \"To Bill Gross Gallons Enter 'G'\"; otherwise, \"To Bill Net Gallons Enter 'N'\".</li> <li>Date Conversion:</li> <li>Convert YYMMDD dates (e.g., <code>arhidt</code>, <code>csstdt</code>) to MMDDYY using multiplication by 100.0001 (e.g., <code>arhidt * 100.0001</code>).</li> <li>Financial Calculations:</li> <li>Aged balances (<code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code>) are pre-calculated in <code>ARCUST</code> and returned as-is.</li> <li>Ageing periods (<code>aclmt1-4</code>) from <code>ARCONT</code> are formatted for display (e.g., <code>1-10</code>, <code>11-20</code>, <code>21-30</code>, <code>Over 30</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for:</li> <li>Invalid company number.</li> <li>Customer not found.</li> <li>Deleted customer.</li> <li>End of file reached (for product data).</li> <li>Ensure all output fields are initialized to blanks/zeros if data is unavailable.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>ARCUSP</code>: Supplemental customer data.</li> <li><code>ARCUPR</code>: Customer product data.</li> <li><code>GSPROD</code>: Product codes and descriptions.</li> <li><code>ARCONT</code>: Ageing periods.</li> <li><code>BICONT</code>: Invoicing style.</li> <li><code>GSTABL</code>: Descriptions for salesman, terms, group, class.</li> <li><code>GSCONT</code>: Default company number.</li> <li>External Programs:</li> <li><code>BI907AC</code>: Retrieves <code>ARCUPR</code> data for product inquiries.</li> <li><code>AR915P</code>: Retrieves <code>ARCUFM</code>/<code>ARCUFMX</code> data for contact inquiries.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR890%20Customer%20Master%20Inquiry/Summary%20AR890%20OCL/#summary","title":"Summary","text":"<p>The <code>AR890</code> program implements a single primary use case: Customer Master Inquiry, with variations for customer history, supplemental data, product codes, and contacts. The function requirement document reimagines this as a non-interactive function that takes company, customer, ship-to, inquiry type, and file group as inputs, retrieving and validating data from multiple files, applying business rules, and returning structured output with error handling. The document focuses on business requirements (validation, data retrieval, EFT checks) and includes calculations (e.g., date conversions) as needed.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/","title":"AR900 OCL","text":"<p>The provided document is an OCL (Operation Control Language) script, typically used on IBM midrange systems like the IBM System/36 or AS/400 (now IBM i). This script, <code>AR900.ocl36.txt</code>, appears to control a Customer Master Add/Update process, likely written in RPG (Report Program Generator) or a related language. Below, I will explain the process steps of the OCL program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL scripts are used to define the environment, specify files, and control the execution of programs on IBM midrange systems. The steps in this script can be broken down based on the commands and directives present:</p> <ol> <li>Environment Setup and Parameters:</li> <li><code>SCPROCP ,,,,,,,,?9?</code>: This likely specifies the procedure name or parameters for the job, with <code>?9?</code> being a placeholder for a parameter passed at runtime (possibly a library or dataset identifier).</li> <li><code>GSY2K</code>: This might reference a system or configuration setting, possibly related to Y2K compliance or a specific system module.</li> <li><code>LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local variable or parameter at offset 480 with the value of the <code>?9?</code> placeholder.</li> <li><code>LOCAL OFFSET-410,DATA-'?WS?'</code>: Sets another local variable at offset 410 with the value <code>?WS?</code> (possibly a workstation ID or user-specific data).</li> <li> <p><code>LOCAL OFFSET-400,DATA-'?USER?'</code>: Sets a local variable at offset 400 with the value <code>?USER?</code> (likely the user ID running the job).</p> </li> <li> <p>Conditional Logic and Index Building:</p> </li> <li> <p><code>IFF ACTIVE-AR300 IFF DATAF1-?9?CRDETX BLDINDEX ?9?CRDETX,2,8,+ ?9?ARDETL,,DUPKEY,,71,8,10,7</code>:</p> <ul> <li>This is a conditional statement (<code>IFF</code>) that checks if the program <code>AR300</code> is active and if the <code>DATAF1</code> field contains the value <code>?9?CRDETX</code>.</li> <li>If true, it executes <code>BLDINDEX</code> to build an index for the file <code>?9?CRDETX</code>:</li> <li>Key starts at position 2, length 8, in ascending order (<code>+</code>).</li> <li>Another index is built for <code>?9?ARDETL</code> with <code>DUPKEY</code> (allowing duplicate keys), starting at position 71, with key lengths of 8, 10, and 7.</li> <li>This step ensures that the necessary file indexes are created for efficient data access.</li> </ul> </li> <li> <p>Program Loading:</p> </li> <li> <p><code>LOAD AR900</code>: Loads the main RPG program <code>AR900</code>, which handles the core customer master add/update logic.</p> </li> <li> <p>File Definitions:</p> </li> <li> <p>The script defines multiple files with the <code>FILE NAME</code> directive, specifying their labels (e.g., <code>?9?ARCUST</code>) and disposition (<code>DISP-SHR</code> for shared access). These files are used by the <code>AR900</code> program and other called programs for reading or updating customer-related data. The files are listed in the \"Tables Used\" section below.</p> </li> <li> <p>Execution of the Main Program:</p> </li> <li> <p><code>RUN</code>: Executes the loaded <code>AR900</code> program, which likely performs the customer master add/update operations using the defined files.</p> </li> <li> <p>Support for Called Programs:</p> </li> <li> <p>The script specifies additional files for programs called by <code>AR900</code>, including <code>AR9009</code>, <code>AR9006</code>, <code>AR915P</code>, and <code>BI907</code>. These programs likely handle specific sub-tasks, such as additional file processing, validation, or reporting.</p> </li> <li> <p>Additional Procedure:</p> </li> <li><code>ARFX39 ,,,,,,,,?9?</code>: This line might initiate another procedure or job step, possibly a cleanup or follow-up process, with <code>?9?</code> as a parameter.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script references several external programs that are called by the main <code>AR900</code> program or as part of the process:</p> <ol> <li>AR900: The main RPG program responsible for the customer master add/update logic.</li> <li>AR9009: A supporting program, likely handling specific customer data processing or validation.</li> <li>AR9006: Another supporting program, possibly related to updating or processing specific customer records.</li> <li>AR915P: A program that might handle additional customer file maintenance or reporting.</li> <li>BI907: Likely a program related to billing or shipping (based on the <code>SHIPTO</code> file reference).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL script lists several files (referred to as \"tables\" in some contexts) used by the programs. These files are defined with the <code>FILE NAME</code> directive and are accessed in shared mode (<code>DISP-SHR</code>). The <code>?9?</code> prefix suggests a library or dataset name provided at runtime. Below is the list of files:</p> <ol> <li>ARCUST (<code>?9?ARCUST</code>): Primary customer master file.</li> <li>ARCUSP (<code>?9?ARCUSP</code>): Possibly a secondary customer file or a suspense file for pending updates.</li> <li>ARCUPR (<code>?9?ARCUPR</code>): Customer pricing or profile data, also referenced as <code>PFARCUPR</code> and <code>PTARCUPR</code> for specific programs.</li> <li>CRDETX (<code>?9?CRDETX</code>): Credit details or transaction file, used for indexing.</li> <li>ARCONT (<code>?9?ARCONT</code>): Customer contact information.</li> <li>BICONT (<code>?9?BICONT</code>): Billing contact information.</li> <li>GSPROD (<code>?9?GSPROD</code>): General system product file, possibly for product-related customer data.</li> <li>GSTABL (<code>?9?GSTABL</code>): General system table, likely containing configuration or reference data.</li> <li>BISLTX (<code>?9?BISLTX</code>): Billing or sales transaction file.</li> <li>ARCLGR (<code>?9?ARCLGR</code>): Customer ledger or accounting file.</li> <li>ARCUST2 (<code>?9?ARCUST</code>): Likely an alias or secondary reference to the customer master file.</li> <li>ARCUSHS (<code>?9?ARCUSHS</code>): Customer history or summary file.</li> <li>ARCUSPH (<code>?9?ARCUSPH</code>): Customer profile history.</li> <li>ARCUPHS (<code>?9?ARCUPHS</code>): Customer pricing history.</li> <li>SA5FIXD (<code>?9?SA5FIXD</code>): Fixed data file for program <code>AR9009</code>, possibly for sales or customer data.</li> <li>SA5FIXM (<code>?9?SA5FIXM</code>): Master fixed data file for <code>AR9009</code>.</li> <li>SA5BCXD (<code>?9?SA5BCXD</code>): Billing or customer detail file for <code>AR9009</code>.</li> <li>SA5BCXM (<code>?9?SA5BCXM</code>): Master billing/customer file for <code>AR9009</code>.</li> <li>SA5DBXD (<code>?9?SA5DBXD</code>): Debit or detail file for <code>AR9009</code>.</li> <li>SA5DBXM (<code>?9?SA5DBXM</code>): Master debit file for <code>AR9009</code>.</li> <li>SA5COXD (<code>?9?SA5COXD</code>): Customer order detail file for <code>AR9009</code>.</li> <li>SA5COXM (<code>?9?SA5COXM</code>): Master customer order file for <code>AR9009</code>.</li> <li>ARCUFM (<code>?9?ARCUFM</code>): Customer file maintenance for <code>AR915P</code>.</li> <li>ARCUFMX (<code>?9?ARCUFMX</code>): Extended customer file maintenance for <code>AR915P</code>.</li> <li>SHIPTO (<code>?9?SHIPTO</code>): Shipping address file for <code>BI907</code>.</li> <li>ARCUP3 (<code>?9?ARCUP3</code>): Additional customer pricing or profile file for <code>BI907</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL script sets up the environment, defines parameters, conditionally builds file indexes, loads the <code>AR900</code> program, specifies files, and executes the program. It also supports additional programs for specific tasks.</li> <li>External Programs Called: <code>AR900</code>, <code>AR9009</code>, <code>AR9006</code>, <code>AR915P</code>, <code>BI907</code>.</li> <li>Tables Used: 26 files, including customer master (<code>ARCUST</code>), credit details (<code>CRDETX</code>), pricing (<code>ARCUPR</code>), contact (<code>ARCONT</code>), and various sales/customer files for supporting programs.</li> </ul> <p>This OCL script orchestrates a complex customer master maintenance process, ensuring proper file access and program execution for updating customer records on an IBM midrange system. If you need further details about specific files or programs, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/","title":"AR900 RPGLE","text":"<p>The provided document is an RPGLE (Report Program Generator Language Enhanced) program named <code>AR900.rpgle.txt</code>, which is called from the OCL script <code>AR900.ocl36.txt</code> for Customer Master Add/Update functionality on an IBM midrange system (likely IBM System/36 or AS/400, now IBM i). Below, I will explain the process steps, business rules, tables used, and external programs called by this RPGLE program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR900</code> RPGLE program manages the maintenance (add, update, delete, reactivate) of customer master records through a workstation display file (<code>AR900D</code>). It interacts with multiple files and performs validations, updates, and history tracking. The process steps are structured around a main loop that displays screen formats and processes user inputs.</p> <ol> <li>Program Initialization (<code>ONETIM</code> Subroutine):</li> <li>Purpose: Sets up initial variables and constants for the program.</li> <li> <p>Steps:</p> <ul> <li>Initializes zero-filled variables (<code>ZERO5</code>, <code>ZERO6</code>, etc.) for calculations and comparisons.</li> <li>Sets key table lookup values (<code>SLKEY</code> for salesman, <code>TRMKEY</code> for terms, <code>CUCLKY</code> for customer class, <code>GRUPKY</code> for group code).</li> <li>Captures the system date (<code>UDATE</code>) and time (<code>SYSTIM</code>) for history file updates, formatting the date as <code>SYSCYM</code> (e.g., <code>20YYMMDD</code>).</li> <li>Sets default values for company (<code>CO</code>) and customer number (<code>CUSN</code>) to zero and enables the initial screen format (<code>FMT01</code>) by setting indicator <code>81</code>.</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Purpose: Continuously displays and processes screen formats (<code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>FMT05</code>) until the user exits.</li> <li> <p>Steps:</p> <ul> <li>Enters a <code>DO</code> loop controlled by <code>fmtagn</code> (set to <code>*ON</code> initially).</li> <li>Clears error indicators (<code>01</code>, <code>02</code>, <code>03</code>, <code>05</code>, <code>09</code>) and message fields (<code>MSG1</code>, <code>MSG2</code>).</li> <li>Selects and displays the appropriate screen format based on indicators:</li> <li><code>FMT01</code> (indicator <code>81</code>): Initial customer selection screen.</li> <li><code>FMT02</code> (indicator <code>82</code>): Customer detail entry/update screen.</li> <li><code>FMT03</code> (indicator <code>83</code>): Supplemental data screen.</li> <li><code>FMT05</code> (indicator <code>85</code>): Additional maintenance screen.</li> <li>Processes user input based on the selected screen and command keys (e.g., <code>KA</code>, <code>KD</code>, <code>KG</code>, <code>KJ</code>, <code>KK</code>).</li> </ul> </li> <li> <p>Command Key Processing:</p> </li> <li>KA (Rekey, No Add/Update):<ul> <li>Clears input fields using the <code>CLEAR</code> subroutine.</li> <li>Sets appropriate screen indicators (<code>81</code> for update mode, <code>82</code> for entry mode).</li> <li>Resets error and format indicators.</li> </ul> </li> <li>KD (Delete/Reactivate):<ul> <li>If update mode (<code>07</code>) is active, checks if the customer can be deleted (subroutine <code>DELETE</code>) or reactivated (subroutine <code>REACTI</code>).</li> <li>Prevents deletion if the customer has outstanding invoices (non-zero balance).</li> </ul> </li> <li>KG (End of Job):<ul> <li>Sets the Last Record indicator (<code>LR</code>) to exit the program.</li> <li>Clears format indicators and turns off <code>fmtagn</code> to exit the main loop.</li> </ul> </li> <li>KJ (Entry Mode Selected):<ul> <li>Clears fields, sets entry mode (<code>08</code>), and displays <code>FMT02</code> for new customer entry.</li> </ul> </li> <li> <p>KK (Update Mode Selected):</p> <ul> <li>Clears fields, sets update mode (<code>07</code>), and displays <code>FMT02</code> for editing an existing customer.</li> </ul> </li> <li> <p>Screen Processing Subroutines:</p> </li> <li>S1 (Customer Selection, <code>FMT01</code>):<ul> <li>Validates the company number (<code>CO</code>) against <code>ARCONT</code>. If invalid, displays an error (<code>MSG(1)</code>).</li> <li>Retrieves customer data from <code>ARCUST</code> and <code>ARCUSP</code> using the key <code>ARKEY</code> (company + customer number).</li> <li>Checks for EFT (Electronic Funds Transfer) data if <code>AREFT = 'Y'</code>, ensuring bank routing (<code>CSARTE</code>) and account (<code>CSABK#</code>) are not blank.</li> <li>Retrieves billing instructions from <code>BICONT</code> and sets the screen header (<code>S4HEAD</code>) based on <code>BCINST</code>.</li> <li>Calls <code>GETCUS</code> and <code>GETSUP</code> to populate screen fields with customer and supplemental data.</li> <li>Transitions to <code>FMT02</code> (indicator <code>82</code>).</li> </ul> </li> <li>S2 (Customer Detail Entry/Update, <code>FMT02</code>):<ul> <li>Validates company and customer numbers for new entries (<code>08</code> mode).</li> <li>Ensures customer number is non-zero and not already in use (for new entries).</li> <li>Calls <code>SC2EDT</code> to validate input fields (e.g., sort name, salesman, terms, state, statement code).</li> <li>Transitions to <code>FMT03</code> (indicator <code>83</code>) if validations pass.</li> </ul> </li> <li>S3 (Supplemental Data, <code>FMT03</code>):<ul> <li>Validates and adjusts date fields (<code>STDATE</code>, <code>FSDATE</code>, <code>ICDATE</code>) for century (Y2K compliance).</li> <li>Calls <code>@DTEDT</code> to validate dates (month, day, leap year checks).</li> <li>Calls <code>BI907AC</code> to maintain <code>ARCUPR</code> (customer pricing) data.</li> <li>Transitions to <code>FMT05</code> (indicator <code>85</code>).</li> </ul> </li> <li> <p>S5 (Add/Update Customer, <code>FMT05</code>):</p> <ul> <li>Updates or adds records to <code>ARCUST</code> and <code>ARCUSP</code> based on mode (<code>07</code> for update, <code>08</code> for add).</li> <li>Updates grouped customer records in <code>ARCLGR</code> to reflect credit problem status (<code>ARCLPB</code>).</li> <li>Writes history records to <code>ARCUSHS</code> and <code>ARCUSPH</code>.</li> <li>Clears fields and returns to <code>FMT01</code>.</li> </ul> </li> <li> <p>Data Validation (<code>SC2EDT</code> Subroutine):</p> </li> <li>Validates key fields:<ul> <li>Sort Name (<code>LSTN</code>): Must not be blank.</li> <li>Salesman Number (<code>SLS#</code>): Must exist in <code>GSTABL</code>.</li> <li>Terms Code (<code>TERM</code>): Must exist in <code>GSTABL</code>.</li> <li>State (<code>STAT</code>): Must not be blank.</li> <li>Statement Code (<code>STMT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Separate Freight Code (<code>SFRT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Finance Charge Code (<code>FINC</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Freight Code (<code>FRCD</code>): Must be <code>C</code> (collect), <code>P</code> (prepaid), <code>A</code> (prepaid &amp; add), or blank.</li> <li>EFT Participant (<code>EFT</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>EDI Participant (<code>EDI</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Credit Problem Code (<code>CLPB</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Wire Transfer Code (<code>WIRE</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> <li>Customer Class (<code>CCLASS</code>): Must exist in <code>GSTABL</code> under table type <code>ARCUCL</code>.</li> <li>Federal EIN (<code>FEIN</code>): Must be non-zero (required field, per <code>JB06</code>).</li> <li>Duplicate Order Match Type (<code>DUPC</code>): Must be <code>A</code> (match on customer, shipto, product), <code>B</code> (match on customer, shipto, product, PO#), or blank.</li> <li>Product Move (<code>PRMV</code>): Must be <code>Y</code>, <code>N</code>, or blank.</li> </ul> </li> <li> <p>Sets error indicators and messages if validations fail, preventing progression to the next screen.</p> </li> <li> <p>Delete Processing (<code>DELETE</code> Subroutine):</p> </li> <li>Checks if the customer has outstanding invoices by summing aging fields (<code>AGE</code> array).</li> <li>If the balance is non-zero, displays an error (<code>MSG(9)</code>, <code>MSG(10)</code>) and prevents deletion.</li> <li>Marks the customer as inactive (<code>ARDEL = 'I'</code>, <code>CSDEL = 'I'</code>) in <code>ARCUST</code> and <code>ARCUSP</code> instead of deleting (per revision note).</li> <li> <p>Updates history files (<code>ARCUSHS</code>, <code>ARCUSPH</code>) and displays a success message (<code>MSG(4)</code>).</p> </li> <li> <p>Reactivate Processing (<code>REACTI</code> Subroutine):</p> </li> <li>Changes the delete flag from <code>I</code> (inactive) to <code>A</code> (active) in <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li> <p>Updates history files and displays a success message (<code>MSG(12)</code>).</p> </li> <li> <p>Date Validation (<code>@DTEDT</code> Subroutine):</p> </li> <li>Validates dates (<code>MMDDYY</code>) for month, day, and leap year correctness.</li> <li>Handles Y2K century adjustments and checks for valid months (1-12) and days (1-31, or 1-28/29 for February).</li> <li> <p>Sets error indicator <code>79</code> if the date is invalid.</p> </li> <li> <p>History File Updates:</p> </li> <li>Writes records to <code>ARCUSHS</code> (customer history) and <code>ARCUSPH</code> (supplemental history) during add (<code>89</code> indicator), update (<code>89N91</code>), or delete/reactivate (<code>88</code>) operations.</li> <li> <p>Includes system date (<code>SYSCYM</code>), time (<code>SYSTIM</code>), user ID (<code>USERID</code>), and workstation ID (<code>WSID</code>) in history records.</p> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files, sets the Last Record indicator (<code>LR</code>), and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces several business rules to ensure data integrity and compliance with customer master maintenance requirements:</p> <ol> <li>Customer Number Validation:</li> <li>Customer number (<code>CUSN</code>) cannot be zero for new entries (<code>MSG(19)</code>).</li> <li>Must not already exist in <code>ARCUST</code> or <code>ARCUSP</code> for new entries (<code>MSG(7)</code>, <code>MSG(26)</code>).</li> <li> <p>Must exist in both <code>ARCUST</code> and <code>ARCUSP</code> for updates.</p> </li> <li> <p>Company Number Validation:</p> </li> <li> <p>Company number (<code>CO</code>) must exist in <code>ARCONT</code> (<code>MSG(1)</code>).</p> </li> <li> <p>Field Validations:</p> </li> <li>Mandatory fields like sort name (<code>LSTN</code>), salesman number (<code>SLS#</code>), terms code (<code>TERM</code>), state (<code>STAT</code>), and Federal EIN (<code>FEIN</code>) must be valid.</li> <li>Codes like <code>STMT</code>, <code>FINC</code>, <code>SFRT</code>, <code>FRCD</code>, <code>EFT</code>, <code>EDI</code>, <code>CLPB</code>, <code>WIRE</code>, and <code>PRMV</code> must match specific values (<code>Y</code>, <code>N</code>, or blank).</li> <li>Freight code (<code>FRCD</code>) must be <code>C</code>, <code>P</code>, <code>A</code>, or blank, with specific rules for separate freight (<code>SFRT</code>) based on freight type.</li> <li> <p>Customer class (<code>CCLASS</code>) and other codes must exist in <code>GSTABL</code> under specific table types (e.g., <code>ARCUCL</code>, <code>SLSMAN</code>, <code>ARTERM</code>).</p> </li> <li> <p>Deletion Rules:</p> </li> <li>Customers with outstanding invoices (non-zero balance in <code>AGE</code>) cannot be deleted (<code>MSG(9)</code>, <code>MSG(10)</code>).</li> <li> <p>Deletion marks records as inactive (<code>ARDEL = 'I'</code>, <code>CSDEL = 'I'</code>) rather than physically deleting them.</p> </li> <li> <p>EFT Validation:</p> </li> <li> <p>If <code>AREFT = 'Y'</code>, bank routing (<code>CSARTE</code>) and account (<code>CSABK#</code>) must be provided.</p> </li> <li> <p>Date Handling:</p> </li> <li>Dates (<code>STDATE</code>, <code>FSDATE</code>, <code>ICDATE</code>) are validated for correctness, including leap year checks.</li> <li> <p>Century is added for Y2K compliance if not provided, using <code>Y2KCEN</code> (19 or 20) based on the year compared to <code>Y2KCMP</code> (80).</p> </li> <li> <p>Group Account Updates:</p> </li> <li> <p>If a customer is part of a group (<code>ARCLGR</code>), the credit problem flag (<code>ARCLPB</code>) is propagated to all grouped accounts.</p> </li> <li> <p>Freight and Billing:</p> </li> <li>Supports special freight scenarios:<ul> <li><code>CNY</code> (calculate freight for freight collect, <code>JB09</code>): For non-Bradford locations (e.g., Anchor).</li> <li><code>CYY</code> (freight collect with service fee, <code>JB10</code>): ARG arranges shipping, customer is billed by the carrier, and a $100 service fee is charged.</li> </ul> </li> <li> <p>Wire transfer instructions are printed on invoices/statements if <code>ARWIRE = 'Y'</code>.</p> </li> <li> <p>History Tracking:</p> </li> <li>All add, update, and delete/reactivate operations are logged to <code>ARCUSHS</code> and <code>ARCUSPH</code> with timestamps and user details.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The RPGLE program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>AR900D (<code>WORKSTN</code>, Update/Input, <code>CF</code>): Workstation display file for user interaction, externally described with the <code>PROFOUNDUI</code> handler.</li> <li>ARCUST (<code>UF A</code>, Update/Add, 384 bytes, Key at position 2): Primary customer master file.</li> <li>ARCUSP (<code>UF A</code>, Update/Add, 1344 bytes, Key at position 2): Customer supplemental file.</li> <li>GSTABL (<code>IF</code>, Input, 256 bytes, Key at position 2): General system table for validating salesman, terms, customer class, and group codes.</li> <li>ARCONT (<code>IF</code>, Input, 256 bytes, Key at position 2): Customer contact file for company validation.</li> <li>BICONT (<code>IF</code>, Input, 256 bytes, Key at position 2): Billing contact file for invoice styling.</li> <li>ARCLGR (<code>IF</code>, Input, 240 bytes, Key at position 2): Customer group ledger file for grouped account updates.</li> <li>ARCUST2 (<code>UF</code>, Update, 384 bytes, Key at position 2): Secondary reference to <code>ARCUST</code> for group updates.</li> <li>ARCUSHS (<code>O A</code>, Output/Add, 411 bytes, Key at position 2): Customer history file.</li> <li>ARCUSPH (<code>O A</code>, Output/Add, 1371 bytes, Key at position 2): Customer supplemental history file.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs, as indicated in the code (some calls are commented out, reflecting updates in <code>JB11</code> and <code>JB08</code>):</p> <ol> <li>BI907AC:</li> <li>Called in the <code>S3</code> subroutine to maintain <code>ARCUPR</code> (customer pricing) data.</li> <li>Parameters: Company (<code>@CPCO</code>), Customer (<code>@CPCUS</code>), Shipto (<code>@CPSHP</code>, set to <code>'000'</code>), Mode (<code>@CPMI</code>, set to <code>'MNT'</code>), and File Group (<code>@CPFGR</code>, set to <code>' '</code>).</li> <li> <p>Replaced direct <code>ARCUPR</code> processing (per <code>JB08</code>).</p> </li> <li> <p>AR915P (Commented Out, per <code>DC01</code>):</p> </li> <li>Previously called in <code>S3</code> for customer form type contacts maintenance (<code>ARCUFM</code>).</li> <li>Parameters included company (<code>A$CO</code>), customer (<code>A$CUST</code>), mode (<code>A$MODE = 'MNT'</code>), and file group (<code>A$FGRP = 'X'</code>).</li> <li> <p>No longer used due to <code>JB11</code> revisions.</p> </li> <li> <p>GB730P (Commented Out, per <code>JK01</code>):</p> </li> <li>Previously called in <code>S2</code> for history inquiries on <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li>Parameters included file name (<code>O$FILE</code>), file group (<code>O$FGRP</code>), company (<code>O$CO</code>), customer (<code>O$CUST</code>), and shipto (<code>O$SHIP</code>).</li> <li>No longer used due to <code>JB11</code> revisions.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR900%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes variables, loops through screen formats (<code>FMT01</code>, <code>FMT02</code>, <code>FMT03</code>, <code>FMT05</code>) to manage customer data, validates inputs, updates/adds records to <code>ARCUST</code> and <code>ARCUSP</code>, maintains group accounts in <code>ARCLGR</code>, logs history to <code>ARCUSHS</code> and <code>ARCUSPH</code>, and handles deletions/reactivations.</li> <li>Business Rules: Enforces strict validations on customer numbers, mandatory fields, codes, and dates; prevents deletion of customers with outstanding invoices; supports freight and billing scenarios; and maintains history records.</li> <li>Tables Used: <code>AR900D</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>GSTABL</code>, <code>ARCONT</code>, <code>BICONT</code>, <code>ARCLGR</code>, <code>ARCUST2</code>, <code>ARCUSHS</code>, <code>ARCUSPH</code>.</li> <li>External Programs Called: <code>BI907AC</code> (active), <code>AR915P</code> and <code>GB730P</code> (commented out, no longer used).</li> </ul> <p>This RPGLE program is a critical component of the customer master maintenance process, integrating with the OCL script to provide a robust interface for managing customer data. If you need further clarification on specific subroutines or business rules, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/","title":"AR9006 RPG36","text":"<p>The provided document is an RPG/36 program named <code>AR9006.rpg36.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> for the purpose of copying alternate product descriptions from a selected customer to another customer in the Customer Master Add/Update process on an IBM midrange system (likely System/36 or AS/400, now IBM i). Below, I will explain the process steps, business rules, tables used, and external programs called by this RPG program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR9006</code> program is designed to copy alternate product descriptions (<code>FMCPDS</code>) from one customer\u2019s record in the <code>PFARCUPR</code> file to another customer\u2019s record in the <code>PTARCUPR</code> file, based on matching keys. It is invoked from <code>AR900</code> (Customer Master File Maintenance) and <code>BI900</code> (Customer Shipto Master File Maintenance). The program operates in a straightforward manner, focusing on reading, validating, and updating/adding records.</p> <ol> <li>Program Entry and Parameter Handling:</li> <li>Purpose: Receives input parameters to identify the source and target customer records.</li> <li> <p>Steps:</p> <ul> <li>The program defines a parameter list (<code>*ENTRY PLIST</code>) with the following parameters:</li> <li><code>CO</code> (2 bytes): Company number.</li> <li><code>CUST</code> (6 bytes): Target customer number.</li> <li><code>SHIP</code> (3 bytes): Target shipto number.</li> <li><code>KICUST</code> (6 bytes): Source customer number (from which to copy descriptions).</li> <li><code>KISHIP</code> (3 bytes): Source shipto number.</li> <li>These parameters are used to construct keys for accessing records in the <code>PFARCUPR</code> and <code>PTARCUPR</code> files.</li> </ul> </li> <li> <p>Execution of the Main Subroutine (<code>DOCOPY</code>):</p> </li> <li>Purpose: Performs the core logic of copying alternate product descriptions.</li> <li> <p>Steps:</p> <ul> <li>Calls the <code>DOCOPY</code> subroutine to process the copy operation.</li> <li>Sets the Last Record indicator (<code>LR</code>) to terminate the program after processing.</li> <li>Proceeds to the <code>OUT</code> tag to exit.</li> </ul> </li> <li> <p>DOCOPY Subroutine:</p> </li> <li>Purpose: Copies alternate product descriptions from the source customer to the target customer.</li> <li> <p>Steps:</p> <ul> <li>Build Source Key (<code>CPLM16</code>):</li> <li>Constructs an 8-byte key (<code>CPLM8</code>) by combining <code>CO</code> (company) and <code>KICUST</code> (source customer).</li> <li>Extends to an 11-byte key (<code>CPLM11</code>) by appending <code>KISHIP</code> (source shipto).</li> <li>Extends to a 16-byte key (<code>CPLM16</code>) by appending four blank spaces (per <code>JB01</code>, likely for <code>FMCNTY</code> container type compatibility).</li> <li>Uses <code>SETLL</code> to position the file pointer at the first record in <code>PFARCUPR</code> matching <code>CPLM16</code>.</li> <li>Read Source Records:</li> <li>Enters a loop (<code>AGNP</code> tag) to read records from <code>PFARCUPR</code> until end-of-file (<code>EOF</code>, indicator <code>10</code>).</li> <li>Skips records marked as deleted (<code>FMDEL = 'D'</code>).</li> <li>Validates that the record matches the source company (<code>FMCONO = CO</code>), customer (<code>FMCUST = KICUST</code>), and shipto (<code>FMSHIP = KISHIP</code>). If any mismatch occurs, skips to the next record (<code>NOMRP</code> tag).</li> <li>Build Target Key (<code>CPKY16</code>):</li> <li>Constructs an 8-byte key (<code>CPKY8</code>) using <code>CO</code> and <code>CUST</code> (target customer).</li> <li>Extends to an 11-byte key (<code>CPKY11</code>) by appending <code>SHIP</code> (target shipto).</li> <li>Extends to a 15-byte key (<code>CPKY15</code>) by appending <code>FMPROD</code> (product code from the source record).</li> <li>Extends to a 16-byte key (<code>CPKY16</code>) by appending <code>FMCNTY</code> (container type from the source record, per <code>JB01</code>).</li> <li>Check Target Record:</li> <li>Uses <code>CHAIN</code> to locate a matching record in <code>PTARCUPR</code> using <code>CPKY16</code>.</li> <li>If no record exists (indicator <code>90</code> on):<ul> <li>Copies the alternate product description (<code>FMCPDS</code>) to <code>CPCPDS</code>.</li> <li>Writes a new record to <code>PTARCUPR</code> using the <code>ADDREC</code> exception output.</li> </ul> </li> <li>If a record exists (indicator <code>90</code> off):<ul> <li>Checks if the existing alternate description (<code>CPCPDS</code>) is blank.</li> <li>If blank, updates <code>CPCPDS</code> with <code>FMCPDS</code> and writes the updated record to <code>PTARCUPR</code> using the <code>UPDREC</code> exception output.</li> </ul> </li> <li>Loop Continuation:</li> <li>Returns to the <code>AGNP</code> tag to process the next record in <code>PFARCUPR</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>After processing all matching records, the program exits via the <code>OUT</code> tag, setting the <code>LR</code> indicator to close files and terminate.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure accurate copying of alternate product descriptions:</p> <ol> <li>Record Matching:</li> <li>Only non-deleted records (<code>FMDEL \u2260 'D'</code>) from the source file (<code>PFARCUPR</code>) are considered for copying.</li> <li> <p>The source record must match the input parameters: company (<code>FMCONO = CO</code>), customer (<code>FMCUST = KICUST</code>), and shipto (<code>FMSHIP = KISHIP</code>).</p> </li> <li> <p>Target Record Handling:</p> </li> <li>If a matching record does not exist in <code>PTARCUPR</code> (based on company, customer, shipto, product code, and container type), a new record is created with the copied alternate description (<code>FMCPDS</code>).</li> <li>If a matching record exists in <code>PTARCUPR</code> but its alternate description (<code>CPCPDS</code>) is blank, it is updated with the source description (<code>FMCPDS</code>).</li> <li> <p>If the existing <code>CPCPDS</code> is non-blank, no update is performed (preserving the existing description).</p> </li> <li> <p>Key Structure:</p> </li> <li>The key for both files includes company, customer, shipto, product code, and container type (<code>FMCNTY</code>, added in <code>JB01</code>).</li> <li> <p>The container type (<code>FMCNTY</code>) is part of the key to ensure precise matching, reflecting a business requirement to differentiate products by container type.</p> </li> <li> <p>Data Integrity:</p> </li> <li>The program ensures that only valid, non-deleted source records are copied to maintain data consistency.</li> <li>The alternate description (<code>CPCPDS</code>) is only updated or added if necessary, avoiding unnecessary overwrites.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>PFARCUPR (<code>IF</code>, Input, 80 bytes, Key at position 2, Logical File):</li> <li>Source file containing customer product records with alternate descriptions.</li> <li> <p>Fields include:</p> <ul> <li><code>FMDEL</code> (1 byte): Delete code (<code>D</code> for deleted).</li> <li><code>FMCONO</code> (2 bytes): Company number.</li> <li><code>FMCUST</code> (6 bytes): Customer number.</li> <li><code>FMSHIP</code> (3 bytes): Shipto number.</li> <li><code>FMPROD</code> (4 bytes): Product code.</li> <li><code>FMCPDS</code> (30 bytes): Customer product description (alternate description).</li> <li><code>FMCNTY</code> (1 byte): Container type (added in <code>JB01</code>).</li> </ul> </li> <li> <p>PTARCUPR (<code>UF</code>, Update/Add, 80 bytes, Key at position 2, Physical File):</p> </li> <li>Target file for adding or updating customer product records.</li> <li>Fields include:<ul> <li><code>CPDEL</code> (1 byte): Delete code.</li> <li><code>CPCPDS</code> (30 bytes): Customer product description (target for copying).</li> <li>Other fields (implied by key structure): Company, customer, shipto, product code, and container type.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR9006</code> program does not call any external programs. It operates independently, performing direct file operations on <code>PFARCUPR</code> and <code>PTARCUPR</code> to copy alternate product descriptions.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9006%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program receives parameters for source and target customers, reads non-deleted records from <code>PFARCUPR</code>, validates them against input parameters, and either adds new records or updates existing records in <code>PTARCUPR</code> with the alternate product description.</li> <li>Business Rules: Ensures only valid, non-deleted source records are copied; updates target records only if their description is blank; includes container type in the key for precise matching; and preserves existing non-blank descriptions.</li> <li>Tables Used: <code>PFARCUPR</code> (input, source records), <code>PTARCUPR</code> (update/add, target records).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG/36 program is a specialized utility for copying alternate product descriptions, supporting the customer master and shipto maintenance processes by ensuring consistent product descriptions across customer records. If you need further details on specific logic or file structures, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/","title":"AR9009 RPG36","text":"<p>The provided document is an RPG/36 program named <code>AR9009.rpg36.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> to verify whether a customer has activity (e.g., invoices or sales) before allowing deletion in the Customer Master File Maintenance process (<code>AR900</code>) on an IBM midrange system (likely System/36 or AS/400, now IBM i). Below, I explain the process steps, business rules, tables used, and external programs called by this RPG program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR9009</code> program checks for customer activity in specific files to determine if a customer can be deleted. It is invoked from <code>AR900</code> to ensure that customers with active records (e.g., open invoices or sales) are not deleted. The program processes input parameters, checks multiple files for matching records, and returns a flag indicating whether activity was found.</p> <ol> <li>Program Entry and Parameter Handling:</li> <li>Purpose: Receives input parameters to identify the customer and control the verification process.</li> <li> <p>Steps:</p> <ul> <li>Defines a parameter list (<code>*ENTRY PLIST</code>) with:</li> <li><code>ARKEY</code> (8 bytes): Key combining company and customer number (e.g., <code>COCUST</code>).</li> <li><code>BCINST</code> (1 byte): Billing instruction code, used to determine if sales files should be checked.</li> <li><code>FOUND</code> (1 byte): Output parameter set to indicate whether activity was found (<code>'A'</code> for invoices, <code>'S'</code> for sales, or blank if no activity).</li> <li>Calls the <code>EACH</code> subroutine to perform the activity check.</li> <li>Sets the Last Record indicator (<code>LR</code>) and exits via the <code>OUT</code> tag.</li> </ul> </li> <li> <p>EACH Subroutine:</p> </li> <li>Purpose: Checks for customer activity in invoice and sales files.</li> <li>Steps:<ul> <li>Invoice File Check (<code>CRDETX</code>):</li> <li>Moves <code>ARKEY</code> to a 23-byte key (<code>KEY21</code>) for positioning in <code>CRDETX</code> (invoice detail file).</li> <li>Uses <code>SETLL</code> to position the file pointer at the first record matching <code>KEY21</code>.</li> <li>Reads <code>CRDETX</code> records in a loop (<code>RDAGN</code> tag) until end-of-file (indicator <code>10</code>).</li> <li>For each record:<ul> <li>Skips deleted records (<code>ADDEL = 'D'</code>).</li> <li>Compares the record\u2019s key (<code>ARDKEY</code>) with <code>ARKEY</code>. If they match and the record is not deleted, sets <code>FOUND = 'A'</code> (indicating the customer has invoices) and exits to <code>ENDDEL</code>.</li> </ul> </li> <li>Sales File Checks (Conditional on <code>BCINST = '5'</code>):</li> <li>If <code>BCINST = '5'</code>, checks multiple sales files for activity:<ul> <li><code>SA5FIXD</code> and <code>SA5FIXM</code> (fixed sales data, per <code>LT02</code>).</li> <li><code>SA5BCXD</code> and <code>SA5BCXM</code> (billing-related sales data, per <code>JB03</code>).</li> <li><code>SA5DBXD</code> and <code>SA5DBXM</code> (distribution-related sales data, per <code>JB03</code>).</li> <li><code>SA5COXD</code> and <code>SA5COXM</code> (customer order-related sales data, per <code>JB03</code>).</li> </ul> </li> <li>For each file:<ul> <li>Moves <code>ARKEY</code> to a 39-byte key (<code>SAKEY</code>) for positioning.</li> <li>Uses <code>SETLL</code> to position the file pointer.</li> <li>Reads the file and checks if the record\u2019s key (<code>SACOCU</code>) matches <code>ARKEY</code>.</li> <li>If a match is found, sets <code>FOUND = 'S'</code> (indicating the customer has sales activity) and exits to <code>ENDDEL</code>.</li> </ul> </li> <li>Termination:</li> <li>If no activity is found, <code>FOUND</code> remains blank.</li> <li>Exits via <code>ENDDEL</code>, closes files, and terminates the program.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure accurate verification of customer activity before deletion:</p> <ol> <li>Invoice Activity Check:</li> <li>A customer cannot be deleted if they have active (non-deleted, <code>ADDEL \u2260 'D'</code>) invoices in <code>CRDETX</code>.</li> <li> <p>If a matching invoice record is found, <code>FOUND</code> is set to <code>'A'</code>, signaling that deletion is not allowed.</p> </li> <li> <p>Sales Activity Check:</p> </li> <li>Sales activity is checked only if the billing instruction code (<code>BCINST</code>) is <code>'5'</code>.</li> <li>The program checks multiple sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for records matching the customer key (<code>SACOCU = ARKEY</code>).</li> <li> <p>If a matching record is found in any of these files, <code>FOUND</code> is set to <code>'S'</code>, indicating that deletion is not allowed due to sales activity.</p> </li> <li> <p>Key Matching:</p> </li> <li>The customer key (<code>ARKEY</code>) combines company and customer number and is used to match records in both invoice and sales files.</li> <li> <p>Only non-deleted invoice records (<code>ADDEL \u2260 'D'</code>) are considered for activity checks.</p> </li> <li> <p>Sequential File Checking:</p> </li> <li>The program checks <code>CRDETX</code> first for invoices. If no activity is found, it proceeds to check sales files (if <code>BCINST = '5'</code>).</li> <li> <p>Sales files are checked in pairs (e.g., <code>SA5FIXD</code> and <code>SA5FIXM</code>), reflecting different data structures or indexes (per <code>LT02</code> and <code>JB03</code> revisions).</p> </li> <li> <p>Output:</p> </li> <li>The <code>FOUND</code> parameter is set to:<ul> <li><code>'A'</code> if invoice activity is found.</li> <li><code>'S'</code> if sales activity is found.</li> <li>Blank if no activity is found, indicating the customer may be eligible for deletion.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>CRDETX (<code>IF</code>, Input, 128 bytes, Key at position 2, Logical File):</li> <li>Invoice detail file used to check for customer invoices.</li> <li> <p>Fields:</p> <ul> <li><code>ADDEL</code> (1 byte): Delete code (<code>D</code> for deleted).</li> <li><code>ARDKEY</code> (8 bytes): Key combining company and customer number.</li> </ul> </li> <li> <p>SA5FIXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>LT02</code>):</p> </li> <li>Sales file (fixed data, detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5FIXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>LT02</code>):</p> </li> <li>Sales file (fixed data, master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5BCXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Billing-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5BCXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Billing-related sales file (master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5DBXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Distribution-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5DBXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Distribution-related sales file (master) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5COXD (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Customer order-related sales file (detail) for checking customer sales activity.</li> <li> <p>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</p> </li> <li> <p>SA5COXM (<code>IF</code>, Input, 1024 bytes, Key at position 2, Logical File, per <code>JB03</code>):</p> </li> <li>Customer order-related sales file (master) for checking customer sales activity.</li> <li>Field: <code>SACOCU</code> (8 bytes): Key combining company and customer number.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR9009</code> program does not call any external programs. It performs direct file operations on <code>CRDETX</code> and the sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) to check for customer activity.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/AR9009%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: Receives parameters (<code>ARKEY</code>, <code>BCINST</code>, <code>FOUND</code>), checks <code>CRDETX</code> for invoice activity, and, if <code>BCINST = '5'</code>, checks multiple sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for sales activity. Sets <code>FOUND</code> to <code>'A'</code> (invoices), <code>'S'</code> (sales), or blank (no activity).</li> <li>Business Rules: Prevents deletion if the customer has active invoices or sales (when <code>BCINST = '5'</code>); skips deleted invoice records; checks multiple sales files for comprehensive activity verification.</li> <li>Tables Used: <code>CRDETX</code> (invoices), <code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code> (sales data).</li> <li>External Programs Called: None.</li> </ul> <p>This RPG/36 program is a critical validation step in the customer deletion process, ensuring that customers with active invoices or sales are not deleted, maintaining data integrity in the customer master maintenance system. If you need further details on specific logic or file structures, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/","title":"BI907 RPGLE","text":"<p>The provided document is an RPGLE program named <code>BI907.rpgle.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> for Customer &amp; Ship To File Maintenance/Inquiry within the Bradford Order Entry/Invoices system on an IBM midrange system (likely AS/400, now IBM i). This program manages customer and shipto-specific product data, including alternate descriptions, freight codes, and container types, with support for add, update, delete, and reactivate operations. Below, I explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>BI907</code> program provides a subfile-based interface (<code>BI907D</code>) for maintaining or inquiring about customer and shipto product data stored in the <code>ARCUPR</code> file. It supports operations such as adding new records, updating existing records, deleting records (marking as inactive), reactivating records, and copying alternate descriptions from other customers or shiptos. The program operates in three modes: Update Mode, All Mode, and Add Mode, controlled by function keys and user input.</p> <ol> <li>Program Initialization (<code>*INZSR</code> Subroutine):</li> <li>Purpose: Sets up initial parameters, opens files, and initializes the program state.</li> <li> <p>Steps:</p> <ul> <li>Receives input parameters: company (<code>p$co</code>), customer (<code>p$cst</code>), shipto (<code>p$shp</code>), mode (<code>p$mode</code>, <code>MNT</code> for maintenance or <code>INQ</code> for inquiry), and file group (<code>p$fgrp</code>, <code>Z</code> or <code>G</code>).</li> <li>Applies file overrides (<code>ovg</code> for <code>G</code> files, <code>ovz</code> for <code>Z</code> files) based on <code>p$fgrp</code> using <code>QCMDEXC</code>.</li> <li>Opens database files: <code>GSTABL</code>, <code>ARCUPR</code>, <code>BICONT</code>, <code>GSPROD</code>, <code>ARCUST</code>, <code>SHIPTO</code>, <code>ARCUPHS</code>, and <code>BI907W</code>.</li> <li>Sets the screen header (<code>c$hdr1</code>) based on mode (<code>MNT</code> or <code>INQ</code>).</li> <li>Initializes subfile control fields (<code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>) from input parameters and sets default container type (<code>c1cnty = 'A'</code>).</li> <li>Checks if records exist in <code>ARCUPR</code> for the company, customer, and shipto:</li> <li>If records exist, sets Update Mode (<code>c1mode = 'Update Mode'</code>, <code>s1updt = *ON</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>If no records exist and inquiry mode is off, sets All Mode (<code>c1mode = 'All Mode'</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>If no records exist and inquiry mode is on, sets All Mode with protected fields.</li> <li>Captures the current date and time (<code>t#time</code>) and formats it as <code>t#cymd</code> (YYYYMMDD) for history records.</li> </ul> </li> <li> <p>Main Subfile Processing (<code>srsfl1</code> Subroutine):</p> </li> <li>Purpose: Manages the subfile (<code>SFL1</code>) display and user interactions in a loop.</li> <li> <p>Steps:</p> <ul> <li>Clears the message subfile and initializes the company number (<code>c1cono = 10</code>).</li> <li>Positions the work file (<code>BI907W</code>) based on user input (<code>sf1rep</code>).</li> <li>Suppresses errors on the first display (<code>w$frst</code>).</li> <li>Enters a loop (<code>sf1agn</code>) to display the subfile control format (<code>SFLCTL1</code>) and process user inputs:</li> <li>Writes the command line (<code>SFLCMD1</code>) and message subfile if needed.</li> <li>Sets cursor position for Add Mode (<code>row1 = 10</code>, <code>col1 = 02</code>).</li> <li>Displays the subfile if records exist (<code>*IN41</code>) and control format (<code>*IN40</code>).</li> <li>Processes function keys and user actions (see below).</li> <li>Updates cursor location (<code>csrloc</code>) and subfile record number (<code>rcdnb1</code>) for redisplay.</li> </ul> </li> <li> <p>Function Key Processing:</p> </li> <li>F03 (Exit): Exits the program by clearing flags (<code>sf1agn</code>, <code>fmtagn</code>) and iterating.</li> <li>F04 (Field Prompting):<ul> <li>For <code>SFLCTL1</code>: Prompts for product code (<code>C1PROD</code>) or container type (<code>C1CNTY</code>) using <code>LGSPROD</code> or <code>LGSTABL</code>.</li> <li>For <code>SFL1</code>: Prompts for product code (<code>S1PROD</code>) or container type (<code>S1CNTY</code>) and updates subfile fields.</li> <li>For <code>SFLCCPY</code>: Prompts for customer (<code>S3CUST</code>) or shipto (<code>S3SHIP</code>) using <code>LARCUST</code> or <code>LCSTSHP</code>.</li> </ul> </li> <li>F05 (Refresh): Clears container type (<code>r$cnty</code>) and repositions the subfile (<code>repsfl</code>).</li> <li>F08 (Copy Alternate Description):<ul> <li>Opens a window (<code>SFLCCPY</code>) to input source customer (<code>s3cust</code>) and shipto (<code>s3ship</code>).</li> <li>Validates inputs against <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Calls <code>BI9078</code> to copy alternate descriptions, updates the message subfile, and repositions the subfile.</li> </ul> </li> <li>F09 (History Inquiry):<ul> <li>Calls <code>GB730P</code> to display history for the selected subfile record (<code>SFL1</code>) using parameters (<code>o$file = 'ARCUPR'</code>, <code>o$fgrp</code>, <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s1prod</code>, <code>s1cnty</code>).</li> </ul> </li> <li>F10 (Toggle Mode):<ul> <li>Toggles between Update Mode, All Mode, and Add Mode:</li> <li>Update Mode: Shows existing <code>ARCUPR</code> records, allows updates (<code>s1updt = *ON</code>, <code>s1f10d = 'F10=Add Mode'</code>).</li> <li>All Mode: Shows all products from <code>GSPROD</code>, allows adding new records (<code>s1updt = *OFF</code>, <code>s1f10d = 'F10=Update Mode'</code>).</li> <li>Add Mode: Allows adding new records (<code>s1updt = *ON</code>, <code>s1f10d = 'F10=All Mode'</code>).</li> <li>Repositions the subfile after mode change.</li> </ul> </li> <li>F12 (Cancel): Exits the subfile loop.</li> <li>F22 (Reactivate):<ul> <li>For a selected subfile record (<code>SFL1</code>) marked as deleted (<code>s1del = 'D'</code>, <code>s1exis = 'Y'</code>), opens a window (<code>SFLRST1</code>).</li> <li>Sets <code>cpdel = 'A'</code> in <code>ARCUPR</code>, updates the record, writes to history (<code>ARCUPHS</code>), and clears the subfile record.</li> </ul> </li> <li>F23 (Delete):<ul> <li>For a selected subfile record (<code>SFL1</code>, <code>s1exis = 'Y'</code>, <code>s1del \u2260 'D'</code>), opens a window (<code>SFLDEL1</code>).</li> <li>Sets <code>cpdel = 'D'</code> in <code>ARCUPR</code>, updates the record, writes to history, and clears the subfile record.</li> </ul> </li> <li>Page Down: Loads additional subfile records (<code>sf1lod</code>).</li> <li> <p>Enter: Processes subfile changes (<code>sf1prc</code>) or repositions the subfile if control fields (<code>c1prod</code>, <code>c1cnty</code>, <code>c$dlyn</code>) change.</p> </li> <li> <p>Subfile Processing (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records (<code>readc SFL1</code>) and processes them (<code>sf1chg</code>).</li> <li> <p>Sets <code>s1chng</code> if changes are detected.</p> </li> <li> <p>Subfile Change Processing (<code>sf1chg</code> Subroutine):</p> </li> <li>Validates subfile input (<code>sf1edt</code>).</li> <li>If no errors (<code>*IN50 = *OFF</code>) and not in inquiry mode, updates or adds records to <code>ARCUPR</code> (<code>sf1upd</code>).</li> <li> <p>Updates the subfile record (<code>sf1pro</code>) and sets <code>SFLNXTCHG</code> (<code>*IN44</code>) if errors occur.</p> </li> <li> <p>Subfile Input Validation (<code>sf1edt</code> Subroutine):</p> </li> <li>Validates subfile fields:<ul> <li>Product Code (<code>s1prod</code>): Required in Add Mode; must exist in <code>GSPROD</code>.</li> <li>Existing Record (<code>s1exis</code>): In Add Mode, checks if the record already exists in <code>ARCUPR</code>.</li> <li>Container Type (<code>s1cnty</code>): Must exist in <code>GSTABL</code> (<code>CNTRTY</code> table) if not blank.</li> <li>Gallons Billed Code (<code>s1glcd</code>): Must be <code>'G'</code> or blank.</li> <li>Freight Code (<code>s1frcd</code>): Must exist in <code>GSTABL</code> (<code>BBFRCD</code> table) if not blank.</li> <li>Separate Freight Code (<code>s1sfrt</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Calculate Freight Code (<code>s1cafr</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Freight Code Rules:</li> <li>If <code>s1frcd = 'C'</code> (collect), <code>s1sfrt</code> and <code>s1cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank (per <code>JB01</code>, <code>JB02</code>).</li> <li>If <code>s1frcd = 'P'</code> (prepaid), defaults <code>s1sfrt = 'N'</code>, <code>s1cafr = 'Y'</code> if blank.</li> <li>If <code>s1frcd = 'A'</code> (prepaid &amp; add), <code>s1sfrt</code> must be <code>'Y'</code>, defaults <code>s1cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>Sets error indicators (<code>*IN50</code>\u2013<code>*IN57</code>, <code>*IN61</code>, <code>*IN62</code>) and adds error messages to the message subfile if validations fail.</p> </li> <li> <p>Update/Add to Database (<code>sf1upd</code> Subroutine):</p> </li> <li> <p>If <code>s1prod</code> is not blank:</p> <ul> <li>Checks if the record exists in <code>ARCUPR</code> (<code>klsfl1</code>).</li> <li>If it does not exist (<code>*IN99 = *ON</code>) and fields (<code>s1glcd</code>, <code>s1cpds</code>, <code>s1frcd</code>, <code>s1sfrt</code>, <code>s1cafr</code>) are not blank:</li> <li>Clears <code>ARCUPR</code> record, sets <code>cpdel = 'A'</code>, and populates fields from subfile (<code>sf1mov</code>).</li> <li>Writes a new record to <code>ARCUPR</code>.</li> <li>Writes a history record to <code>ARCUPHS</code>.</li> <li>Sets <code>s1exis = 'Y'</code>.</li> <li>If it exists:</li> <li>Updates <code>ARCUPR</code> with subfile values (<code>sf1mov</code>).</li> <li>Writes a history record to <code>ARCUPHS</code>.</li> <li>Sets <code>s1exis = 'Y'</code>.</li> </ul> </li> <li> <p>Move Subfile Values to File (<code>sf1mov</code> Subroutine):</p> </li> <li> <p>Moves subfile fields (<code>s1cpds</code>, <code>s1glcd</code>, <code>s1frcd</code>, <code>s1sfrt</code>, <code>s1cafr</code>) to <code>ARCUPR</code> fields (<code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>).</p> </li> <li> <p>Reactivate Record (<code>sf1rst</code> Subroutine):</p> </li> <li>Displays a window (<code>SFLRST1</code>) to confirm reactivation.</li> <li> <p>If <code>F22</code> is pressed and the record exists in <code>ARCUPR</code>:</p> <ul> <li>Sets <code>cpdel = 'A'</code>, updates <code>ARCUPR</code>, writes to <code>ARCUPHS</code>, and displays a message (<code>err(11)</code>).</li> <li>Clears the subfile record.</li> </ul> </li> <li> <p>Delete Record (<code>sf1del</code> Subroutine):</p> <ul> <li>Displays a window (<code>SFLDEL1</code>) to confirm deletion.</li> <li>If <code>F23</code> is pressed and the record exists in <code>ARCUPR</code>:</li> <li>Sets <code>cpdel = 'D'</code>, updates <code>ARCUPR</code>, writes to <code>ARCUPHS</code>, and displays a message (<code>err(10)</code>).</li> <li>Clears the subfile record.</li> </ul> </li> <li> <p>Copy Alternate Description (<code>sf1cpy</code> Subroutine):</p> <ul> <li>Displays a window (<code>SFLCCPY</code>) to input source customer (<code>s3cust</code>) and shipto (<code>s3ship</code>).</li> <li>Validates inputs against <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Calls <code>BI9078</code> to copy alternate descriptions, passing <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s3cust</code>, <code>s3ship</code>, and <code>p$fgrp</code>.</li> <li>Displays a success message (<code>err(12)</code>).</li> </ul> </li> <li> <p>Load Subfile (<code>sf1lod</code> Subroutine):</p> <ul> <li>Loads up to 12 records (<code>pagsz1</code>) from <code>BI907W</code> into the subfile (<code>SFL1</code>).</li> <li>Filters records based on mode (<code>s1updt</code>), container type (<code>c1cnty</code>), and include deleted flag (<code>c$dlyn</code>).</li> <li>Formats each record (<code>sf1fmt</code>) and writes to the subfile.</li> </ul> </li> <li> <p>Build Work File (<code>ArcuprSrBld</code> and <code>GsprodSrBld</code> Subroutines):</p> <ul> <li>ArcuprSrBld: Builds <code>BI907W</code> from <code>ARCUPR</code> for Update Mode, adding missing container types from <code>GSTABL</code>.</li> <li>GsprodSrBld: Builds <code>BI907W</code> from <code>GSPROD</code> for All Mode, including sellable products (<code>tpsell = 'Y'</code>) and container types, merging with <code>ARCUPR</code> data if available.</li> </ul> </li> <li> <p>Clear Work File (<code>ClrWrkFile</code> Subroutine):</p> <ul> <li>Closes <code>BI907W</code>, calls <code>BI907C2</code> to clear it, and reopens it.</li> </ul> </li> <li> <p>Write History (<code>writehist</code> Subroutine):</p> <ul> <li>Writes a record to <code>ARCUPHS</code> with fields from <code>ARCUPR</code>, current date (<code>t#cymd</code>), time (<code>t#hms</code>), and user ID (<code>ps#usr8</code>).</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files, sets <code>*INLR = *ON</code>, and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules to ensure data integrity:</p> <ol> <li>Mode-Based Operations:</li> <li>Update Mode: Displays existing <code>ARCUPR</code> records for the specified company, customer, and shipto; allows updates, deletions, and reactivations.</li> <li>All Mode: Displays all sellable products from <code>GSPROD</code>, allowing new record additions.</li> <li>Add Mode: Enables adding new records to <code>ARCUPR</code> with validated fields.</li> <li> <p>Inquiry mode (<code>p$mode = 'INQ'</code>) protects all input fields (<code>*IN71</code>).</p> </li> <li> <p>Field Validations:</p> </li> <li>Product Code (<code>s1prod</code>): Mandatory in Add Mode; must exist in <code>GSPROD</code>.</li> <li>Container Type (<code>s1cnty</code>): Must exist in <code>GSTABL</code> (<code>CNTRTY</code>) if not blank.</li> <li>Gallons Billed Code (<code>s1glcd</code>): Must be <code>'G'</code> or blank.</li> <li>Freight Code (<code>s1frcd</code>): Must exist in <code>GSTABL</code> (<code>BBFRCD</code>) if not blank (e.g., <code>C</code> for collect, <code>P</code> for prepaid, <code>A</code> for prepaid &amp; add).</li> <li>Separate Freight Code (<code>s1sfrt</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Calculate Freight Code (<code>s1cafr</code>): Must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li> <p>Freight Code Rules:</p> <ul> <li>For <code>s1frcd = 'C'</code> (collect):</li> <li><code>s1sfrt</code> and <code>s1cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank (per <code>JB01</code>, <code>JB02</code>).</li> <li>Defaults: <code>s1sfrt = 'N'</code>, <code>s1cafr = 'N'</code> if blank.</li> <li>For <code>s1frcd = 'P'</code> (prepaid):</li> <li>Defaults: <code>s1sfrt = 'N'</code>, <code>s1cafr = 'Y'</code> if blank.</li> <li>For <code>s1frcd = 'A'</code> (prepaid &amp; add):</li> <li><code>s1sfrt</code> must be <code>'Y'</code>.</li> <li>Defaults: <code>s1cafr = 'Y'</code> if blank.</li> <li><code>JB01</code>: Allows <code>s1cafr = 'Y'</code> for collect (non-Bradford locations, e.g., Anchor).</li> <li><code>JB02</code>: Allows <code>s1sfrt = 'Y'</code> for collect with a $100 service fee when ARG arranges shipping.</li> </ul> </li> <li> <p>Record Existence:</p> </li> <li>Prevents adding a record if it already exists in <code>ARCUPR</code> or is marked as deleted.</li> <li>Deletion marks records as inactive (<code>cpdel = 'D'</code>) rather than physically deleting.</li> <li> <p>Reactivation changes <code>cpdel</code> from <code>'D'</code> to <code>'A'</code>.</p> </li> <li> <p>Copy Alternate Descriptions:</p> </li> <li>Source customer and shipto must exist in <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li> <p>Copied descriptions are applied via the <code>BI9078</code> program.</p> </li> <li> <p>History Tracking:</p> </li> <li> <p>All add, update, delete, and reactivate operations are logged to <code>ARCUPHS</code> with date, time, and user ID.</p> </li> <li> <p>Subfile Filters:</p> </li> <li>In Update Mode, filters by container type (<code>c1cnty</code>) and excludes deleted records unless <code>c$dlyn = 'Y'</code>.</li> <li>In All Mode, includes all sellable products from <code>GSPROD</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the File Specification (<code>F</code>) section:</p> <ol> <li>BI907D (<code>CF</code>, Workstation, Update/Input):</li> <li>Display file with subfile <code>SFL1</code> and control format <code>SFLCTL1</code>, using the <code>PROFOUNDUI</code> handler.</li> <li> <p>Includes formats for reactivation (<code>SFLRST1</code>), deletion (<code>SFLDEL1</code>), and copy (<code>SFLCCPY</code>).</p> </li> <li> <p>GSTABL (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>General system table for validating container types (<code>CNTRTY</code>) and freight codes (<code>BBFRCD</code>).</p> </li> <li> <p>BICONT (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Billing contact file for validating company codes and retrieving company names (<code>bcname</code>).</p> </li> <li> <p>GSPROD (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Product file for validating product codes and retrieving descriptions (<code>tpabds</code>).</p> </li> <li> <p>SHIPTO (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Shipto file for validating shipto codes and retrieving names (<code>csname</code>).</p> </li> <li> <p>ARCUST (<code>IF</code>, Input, Keyed, User Open):</p> </li> <li> <p>Customer master file for validating customer codes and retrieving names (<code>arname</code>).</p> </li> <li> <p>BI907W (<code>UF</code>, Update/Add, Keyed, User Open):</p> </li> <li> <p>Work file for temporary storage of subfile data, built from <code>ARCUPR</code> or <code>GSPROD</code>.</p> </li> <li> <p>ARCUPR (<code>UF</code>, Update/Add, Keyed, User Open):</p> </li> <li> <p>Customer product file for storing product-specific data (e.g., <code>cpdel</code>, <code>cpcono</code>, <code>cpcust</code>, <code>cpship</code>, <code>cpprod</code>, <code>cpcnty</code>, <code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>).</p> </li> <li> <p>ARCUPHS (<code>O</code>, Output/Add, Keyed, User Open):</p> </li> <li>Customer product history file for logging changes (<code>ahdel</code>, <code>ahcono</code>, <code>ahcust</code>, <code>ahship</code>, <code>ahprod</code>, <code>ahcnty</code>, <code>ahcpds</code>, <code>ahglcd</code>, <code>ahfrcd</code>, <code>ahsfrt</code>, <code>ahcafr</code>, <code>ahchd8</code>, <code>ahchtm</code>, <code>ahuser</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs:</p> <ol> <li>BI9078:</li> <li>Called in <code>sf1cpy</code> to copy alternate product descriptions from a source customer/shipto to the target.</li> <li> <p>Parameters: <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code> (target), <code>s3cust</code>, <code>s3ship</code> (source), <code>p$fgrp</code>.</p> </li> <li> <p>BI907C2:</p> </li> <li>Called in <code>ClrWrkFile</code> to clear the work file <code>BI907W</code>.</li> <li> <p>No parameters specified.</p> </li> <li> <p>GB730P:</p> </li> <li>Called in <code>histinq</code> for history inquiries on <code>ARCUPR</code> records.</li> <li> <p>Parameters: <code>x$arcuprhist</code> (structure with <code>o$file = 'ARCUPR'</code>, <code>o$fgrp</code>, <code>c1cono</code>, <code>c1cust</code>, <code>c1ship</code>, <code>s1prod</code>, <code>s1cnty</code>).</p> </li> <li> <p>LGSPROD:</p> </li> <li>Called in <code>prompt</code> for product code prompting.</li> <li> <p>Parameters: <code>c1cono</code>, <code>s1prod</code> or <code>c1prod</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LGSTABL:</p> </li> <li>Called in <code>prompt</code> for container type prompting.</li> <li> <p>Parameters: <code>k$ctyp = 'CNTRTY'</code>, <code>k$cnty</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LARCUST:</p> </li> <li>Called in <code>prompt</code> for customer prompting.</li> <li> <p>Parameters: <code>c1cono</code>, <code>o$cust</code>, <code>p$fgrp</code>.</p> </li> <li> <p>LCSTSHP:</p> </li> <li>Called in <code>prompt</code> for shipto prompting.</li> <li> <p>Parameters: <code>x$cstshp</code> (structure with <code>x$co</code>, <code>x$srch</code>, <code>x$cust</code>, <code>x$ship</code>, <code>x$flag</code>, <code>x$fgrp</code>).</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in <code>opntbl</code> to execute file override commands (<code>ovg</code> or <code>ovz</code>).</li> <li> <p>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (length).</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in <code>addmsg</code> to send error messages to the program message queue.</li> <li> <p>Parameters: <code>m@id</code>, <code>m@msgf</code>, <code>m@data</code>, <code>m@l</code>, <code>m@type</code>, <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@key</code>, <code>m@errc</code>.</p> </li> <li> <p>QMHRMVPM:</p> <ul> <li>Called in <code>clrmsg</code> to clear the message subfile.</li> <li>Parameters: <code>m@pgmq</code>, <code>m@scnt</code>, <code>m@rmvk</code>, <code>m@rmv</code>, <code>m@errc</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/BI907%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: Initializes parameters and files, displays a subfile (<code>SFL1</code>) for maintenance/inquiry, processes user inputs (F03, F04, F05, F08, F09, F10, F12, F22, F23, Page Down, Enter), validates subfile inputs, adds/updates/deletes/reactivates records in <code>ARCUPR</code>, logs changes to <code>ARCUPHS</code>, and supports copying alternate descriptions via <code>BI9078</code>.</li> <li>Business Rules: Enforces mode-based operations (Update, All, Add, Inquiry); validates product codes, container types, freight codes, and related fields; supports special freight scenarios (<code>JB01</code>, <code>JB02</code>); prevents adding existing/deleted records; logs all changes; and filters subfile data based on user inputs.</li> <li>Tables Used: <code>BI907D</code>, <code>GSTABL</code>, <code>BICONT</code>, <code>GSPROD</code>, <code>SHIPTO</code>, <code>ARCUST</code>, <code>BI907W</code>, <code>ARCUPR</code>, <code>ARCUPHS</code>.</li> <li>External Programs Called: <code>BI9078</code>, <code>BI907C2</code>, <code>GB730P</code>, <code>LGSPROD</code>, <code>LGSTABL</code>, <code>LARCUST</code>, <code>LCSTSHP</code>, <code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</li> </ul> <p>This RPGLE program is a comprehensive tool for managing customer and shipto product data, integrating with other system components to ensure accurate and validated data maintenance. If you need further details on specific subroutines or validations, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/","title":"Summary AR900 OCL","text":"<p>The call stack involves two RPG programs, <code>AR9009.rpg36.txt</code> and <code>BI907.rpgle.txt</code>, called from the main OCL script <code>AR900.ocl36.txt</code> within the Bradford Order Entry/Invoices system. Together, these programs support customer master file maintenance, specifically focusing on validating customer deletion (<code>AR9009</code>) and managing customer and shipto product data (<code>BI907</code>). Below, I identify the use cases implemented by these programs and provide a function requirement document for a large function that performs customer and shipto product maintenance without screen interaction, incorporating the process steps and business rules from both programs.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The programs collectively implement the following use cases:</p> <ol> <li>Customer Deletion Validation (<code>AR9009</code>):</li> <li>Validates whether a customer can be deleted from the customer master file by checking for existing activity (invoices or sales) in related files.</li> <li> <p>Ensures data integrity by preventing deletion of customers with active records.</p> </li> <li> <p>Customer and Shipto Product Maintenance (<code>BI907</code>):</p> </li> <li>Manages product-specific data for customers and shiptos, including alternate descriptions, freight codes, gallons billed codes, and container types.</li> <li>Supports adding, updating, deleting (marking as inactive), reactivating, and copying alternate descriptions, with history tracking.</li> <li>Provides inquiry mode to view data without modifications.</li> </ol> <p>Given that <code>AR9009</code> is a validation step within the broader customer maintenance process, and <code>BI907</code> handles detailed product data maintenance, these use cases are interconnected. For the function requirement document, I will focus on a consolidated function that performs Customer and Shipto Product Maintenance, incorporating the deletion validation logic from <code>AR9009</code> as a prerequisite check, assuming the function processes inputs programmatically rather than through a screen.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#customer-and-shipto-product-maintenance-function-requirements","title":"Customer and Shipto Product Maintenance Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#overview","title":"Overview","text":"<p>The Customer and Shipto Product Maintenance function programmatically manages product-specific data for customers and shiptos in the Bradford Order Entry/Invoices system, including validation to prevent deletion of customers with active records. It supports adding, updating, deleting (marking as inactive), reactivating, and copying alternate product descriptions, with history tracking.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>, 2 bytes, numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>, 6 bytes, numeric): Identifies the customer.</li> <li>Shipto Number (<code>ship</code>, 3 bytes, numeric): Identifies the shipto location.</li> <li>Mode (<code>mode</code>, 3 bytes, string): <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry).</li> <li>File Group (<code>fgrp</code>, 1 byte, string): <code>Z</code> or <code>G</code> for file overrides.</li> <li>Billing Instruction Code (<code>bcinst</code>, 1 byte, string): Determines if sales files are checked (<code>'5'</code> for sales check).</li> <li>Operation (<code>operation</code>, string): <code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>, <code>COPY</code>, or <code>INQUIRE</code>.</li> <li>Product Data List (array of records):</li> <li><code>prod</code> (4 bytes, string): Product code.</li> <li><code>cnty</code> (1 byte, string): Container type code.</li> <li><code>cpds</code> (20 bytes, string): Alternate product description.</li> <li><code>glcd</code> (1 byte, string): Gallons billed code (<code>'G'</code> or blank).</li> <li><code>frcd</code> (1 byte, string): Freight code (<code>'C'</code>, <code>'P'</code>, <code>'A'</code>, or blank).</li> <li><code>sfrt</code> (1 byte, string): Separate freight code (<code>'Y'</code>, <code>'N'</code>, or blank).</li> <li><code>cafr</code> (1 byte, string): Calculate freight code (<code>'Y'</code>, <code>'N'</code>, or blank).</li> <li>Copy Source (for <code>COPY</code> operation):</li> <li><code>copy_cust</code> (6 bytes, numeric): Source customer number.</li> <li><code>copy_ship</code> (3 bytes, numeric): Source shipto number.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Result (string): <code>SUCCESS</code>, <code>ERROR</code>, or <code>NO_ACTIVITY</code> (for deletion validation).</li> <li>Found Flag (<code>found</code>, 1 byte, string): <code>'A'</code> (invoices found), <code>'S'</code> (sales found), or blank (no activity, for deletion validation).</li> <li>Error Messages (array of strings): List of validation errors, if any.</li> <li>Processed Records (array of records): Returns updated or inquired records with fields as in input <code>Product Data List</code>, plus:</li> <li><code>exis</code> (1 byte, string): <code>'Y'</code> if record exists, <code>'N'</code> otherwise.</li> <li><code>del</code> (1 byte, string): <code>'D'</code> if deleted, <code>'A'</code> if active.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>co</code> exists in <code>BICONT</code>.</li> <li>Verify <code>cust</code> exists in <code>ARCUST</code>.</li> <li>Verify <code>ship</code> exists in <code>SHIPTO</code> for the given <code>cust</code> and <code>co</code>.</li> <li>If <code>operation = DELETE</code>, validate <code>bcinst</code> is <code>'5'</code> for sales checks.</li> <li> <p>For each record in <code>Product Data List</code>:</p> <ul> <li>Ensure <code>prod</code> exists in <code>GSPROD</code> and is sellable (<code>tpsell = 'Y'</code>).</li> <li>Ensure <code>cnty</code> exists in <code>GSTABL</code> (<code>CNTRTY</code> table) if not blank or <code>'A'</code>.</li> <li>Ensure <code>glcd</code> is <code>'G'</code> or blank.</li> <li>Ensure <code>frcd</code> exists in <code>GSTABL</code> (<code>BBFRCD</code> table) if not blank.</li> <li>Ensure <code>sfrt</code> and <code>cafr</code> are <code>'Y'</code>, <code>'N'</code>, or blank.</li> </ul> </li> <li> <p>Deletion Validation (if <code>operation = DELETE</code>):</p> </li> <li>Check <code>CRDETX</code> for active invoices (<code>ADDEL \u2260 'D'</code>, <code>ARDKEY = co + cust</code>).<ul> <li>If found, set <code>found = 'A'</code> and return <code>ERROR</code> with message \"Customer has active invoices\".</li> </ul> </li> <li>If <code>bcinst = '5'</code>, check sales files (<code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>) for records matching <code>SACOCU = co + cust</code>.<ul> <li>If found, set <code>found = 'S'</code> and return <code>ERROR</code> with message \"Customer has sales activity\".</li> </ul> </li> <li> <p>If no activity found, set <code>found = ''</code> and proceed.</p> </li> <li> <p>Process Operation:</p> </li> <li>INQUIRE (<code>mode = 'INQ'</code>):<ul> <li>Retrieve records from <code>ARCUPR</code> for <code>co</code>, <code>cust</code>, <code>ship</code>, optionally filtered by <code>prod</code> and <code>cnty</code>.</li> <li>Include deleted records if specified.</li> <li>Return records with <code>exis = 'Y'</code> and <code>del</code> status.</li> </ul> </li> <li>ADD (<code>mode = 'MNT'</code>):<ul> <li>For each record in <code>Product Data List</code>, check if it exists in <code>ARCUPR</code> (<code>cpcono = co</code>, <code>cpcust = cust</code>, <code>cpship = ship</code>, <code>cpprod = prod</code>, <code>cpcnty = cnty</code>).</li> <li>If exists or marked deleted, return error \"Record already exists or is deleted\".</li> <li>Create new <code>ARCUPR</code> record with <code>cpdel = 'A'</code>, populate fields (<code>cpprod</code>, <code>cpcnty</code>, <code>cpcpds</code>, <code>cpglcd</code>, <code>cpfrcd</code>, <code>cpsfrt</code>, <code>cpcafr</code>), and write.</li> <li>Log to <code>ARCUPHS</code> with current date, time, and user ID.</li> </ul> </li> <li>UPDATE (<code>mode = 'MNT'</code>):<ul> <li>For each record, verify existence in <code>ARCUPR</code>.</li> <li>Update existing record with new values, retaining <code>cpdel = 'A'</code>.</li> <li>Log to <code>ARCUPHS</code>.</li> </ul> </li> <li>DELETE (<code>mode = 'MNT'</code>):<ul> <li>Verify no activity via Step 2.</li> <li>For each record, verify existence in <code>ARCUPR</code> and <code>cpdel \u2260 'D'</code>.</li> <li>Set <code>cpdel = 'D'</code>, update <code>ARCUPR</code>, and log to <code>ARCUPHS</code>.</li> </ul> </li> <li>REACTIVATE (<code>mode = 'MNT'</code>):<ul> <li>For each record, verify existence in <code>ARCUPR</code> and <code>cpdel = 'D'</code>.</li> <li>Set <code>cpdel = 'A'</code>, update <code>ARCUPR</code>, and log to <code>ARCUPHS</code>.</li> </ul> </li> <li> <p>COPY (<code>mode = 'MNT'</code>):</p> <ul> <li>Verify <code>copy_cust</code> and <code>copy_ship</code> exist in <code>ARCUST</code> and <code>SHIPTO</code>.</li> <li>Copy alternate descriptions (<code>cpcpds</code>) from source <code>ARCUPR</code> records (<code>cpcono = co</code>, <code>cpcust = copy_cust</code>, <code>cpship = copy_ship</code>) to target records.</li> <li>Add or update target <code>ARCUPR</code> records, log to <code>ARCUPHS</code>.</li> </ul> </li> <li> <p>Apply Freight Code Rules:</p> </li> <li>If <code>frcd = 'C'</code> (collect):<ul> <li><code>sfrt</code> and <code>cafr</code> must be <code>'Y'</code>, <code>'N'</code>, or blank.</li> <li>Defaults: <code>sfrt = 'N'</code>, <code>cafr = 'N'</code> if blank.</li> <li>If <code>cafr = 'Y'</code>, calculate freight for non-Bradford locations (e.g., Anchor).</li> <li>If <code>sfrt = 'Y'</code>, apply $100 service fee for ARG-arranged shipping.</li> </ul> </li> <li>If <code>frcd = 'P'</code> (prepaid):<ul> <li>Defaults: <code>sfrt = 'N'</code>, <code>cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>If <code>frcd = 'A'</code> (prepaid &amp; add):</p> <ul> <li><code>sfrt</code> must be <code>'Y'</code>.</li> <li>Defaults: <code>cafr = 'Y'</code> if blank.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Return <code>SUCCESS</code> with processed records if no errors.</li> <li>Return <code>ERROR</code> with error messages if validations fail.</li> <li>For <code>DELETE</code>, return <code>NO_ACTIVITY</code> if no invoices or sales found.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company, customer, and shipto must exist in respective files.</li> <li>Product codes must be sellable (<code>GSPROD.tpsell = 'Y'</code>).</li> <li>Container types and freight codes must exist in <code>GSTABL</code>.</li> <li>Gallons billed code must be <code>'G'</code> or blank.</li> <li> <p>Separate and calculate freight codes must be <code>'Y'</code>, <code>'N'</code>, or blank.</p> </li> <li> <p>Freight Code Logic:</p> </li> <li>Collect (<code>frcd = 'C'</code>): Supports non-Bradford locations (<code>cafr = 'Y'</code>) and ARG-arranged shipping with $100 fee (<code>sfrt = 'Y'</code>).</li> <li>Prepaid (<code>frcd = 'P'</code>): Freight included in price.</li> <li> <p>Prepaid &amp; Add (<code>frcd = 'A'</code>): Freight added separately, requires <code>sfrt = 'Y'</code>.</p> </li> <li> <p>Deletion Restrictions:</p> </li> <li>Customers with active invoices (<code>CRDETX</code>) or sales (if <code>bcinst = '5'</code>) cannot be deleted.</li> <li> <p>Deletion marks records as inactive (<code>cpdel = 'D'</code>) rather than physical deletion.</p> </li> <li> <p>Record Management:</p> </li> <li>Prevent adding duplicate or deleted records.</li> <li>Reactivation restores deleted records (<code>cpdel = 'A'</code>).</li> <li> <p>All changes (add, update, delete, reactivate, copy) are logged to <code>ARCUPHS</code>.</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>Read-only access, no updates allowed.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Freight Service Fee (if <code>frcd = 'C'</code> and <code>sfrt = 'Y'</code>):</li> <li>Add $100 fee for ARG-arranged shipping (per <code>JB02</code>).</li> <li>Timestamp for History:</li> <li>Use system date and time (YYYYMMDD, HHMMSS) for <code>ARCUPHS</code> records.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files: <code>BICONT</code>, <code>ARCUST</code>, <code>SHIPTO</code>, <code>GSPROD</code>, <code>GSTABL</code>, <code>CRDETX</code>, <code>SA5FIXD</code>, <code>SA5FIXM</code>, <code>SA5BCXD</code>, <code>SA5BCXM</code>, <code>SA5DBXD</code>, <code>SA5DBXM</code>, <code>SA5COXD</code>, <code>SA5COXM</code>, <code>ARCUPR</code>, <code>ARCUPHS</code>.</li> <li>External Logic: Assumes external validation for copying alternate descriptions (similar to <code>BI9078</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific error messages for invalid inputs, duplicate records, or deletion restrictions.</li> <li>Log errors in the output <code>Error Messages</code> array.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR900%20Customer%20Master%20Add-Update/Summary%20AR900%20OCL/#explanation","title":"Explanation","text":"<ul> <li>Use Cases: The two programs cover customer deletion validation (<code>AR9009</code>) and comprehensive product data maintenance (<code>BI907</code>). These are treated as distinct but related use cases, with <code>AR9009</code> serving as a prerequisite for deletion in the broader maintenance process.</li> <li>Function Design: The function consolidates both use cases into a single, programmatic process, eliminating screen interactions. It incorporates <code>AR9009</code>\u2019s deletion validation as a step within the <code>DELETE</code> operation and extends <code>BI907</code>\u2019s functionality to handle all operations (add, update, delete, reactivate, copy, inquire) via structured inputs.</li> <li>Conciseness: The document focuses on business requirements (validations, freight rules, deletion restrictions, history tracking) and briefly describes calculations (freight fee, timestamp). Technical details like file structures are implied through dependencies.</li> <li>Assumptions: The function assumes external logic for copying alternate descriptions (akin to <code>BI9078</code>) and omits screen-specific logic (e.g., subfile handling) to focus on data processing.</li> </ul> <p>If you need further refinements or additional details, let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/","title":"AR901 RPG36","text":"<p>The provided document, <code>AR901.rpg36.txt</code>, is an RPG II program for the IBM System/36, called from the main OCL program (<code>AR901P.ocl36.txt</code>). It generates a \"Customer Master File List,\" a report listing customer details. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#process-steps-of-the-rpg-ii-program","title":"Process Steps of the RPG II Program","text":"<p>The RPG II program <code>AR901</code> processes customer data from multiple files to produce a formatted printed report. It uses fixed-format specifications (F, I, C, O) typical of RPG II on System/36. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specification:<ul> <li><code>H P014</code>: Specifies program identifier <code>P014</code> for <code>AR901</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>FARCUST IP F 384 384R I DISK</code>: Primary input file <code>ARCUST</code> (customer master file), 384 bytes, indexed.</li> <li><code>FAR901S IR F 30 3 3IT EDISK</code>: Input file <code>AR901S</code>, 30 bytes, likely a selection or parameter file, externally described.</li> <li><code>FARCONT IC F 256 256R 2AI 2 DISK</code>: Input file <code>ARCONT</code> (company master file), 256 bytes, indexed, keyed on position 2 (<code>ARCO</code>, company number).</li> <li><code>FARCUSP IC F 1344 1344R 8AI 2 DISK</code>: Input file <code>ARCUSP</code> (customer supplemental file), 1344 bytes, indexed, keyed on position 2.</li> <li><code>FGSTABL IF F 256 256 12AI 2 DISK</code>: Input file <code>GSTABL</code> (table file), 256 bytes, indexed, keyed on position 2.</li> <li><code>FPRINTER O F 164 164 OF PRINTER</code>: Output file <code>PRINTER</code>, 164 bytes, for generating the printed report.</li> </ul> </li> <li>Extension Specification:<ul> <li><code>E AR901S ARCUST</code>: Links the externally described file <code>AR901S</code> to <code>ARCUST</code> for field definitions.</li> </ul> </li> <li> <p>Input Specifications:</p> <ul> <li><code>IARCUST NS 01</code>: Defines fields for <code>ARCUST</code>:</li> <li><code>ARCOCU</code> (positions 2-9): Customer number.</li> <li><code>ARCO</code> (positions 2-3, level L1): Company number.</li> <li><code>ARCUST</code> (positions 4-9): Customer number (subset of <code>ARCOCU</code>).</li> <li><code>ARNAME</code> (positions 10-39): Customer name.</li> <li><code>ARADR1-4</code> (positions 40-69, 70-99, 100-129, 130-159): Address lines 1-4.</li> <li><code>ARAREA</code> (positions 257-258, packed): Area code.</li> <li><code>ARTELE</code> (positions 259-262, packed): Telephone number.</li> <li><code>ARTERM</code> (positions 265-266): Terms code.</li> <li><code>IARCONT NS 02</code>: Defines fields for <code>ARCONT</code>:</li> <li><code>ACNAME</code> (positions 4-33): Company name.</li> <li><code>IARCUSP NS</code>: Defines fields for <code>ARCUSP</code>:</li> <li><code>CSCNCT</code> (positions 267-291): Contact name.</li> <li><code>IGSTABL NS 01</code>: Defines fields for <code>GSTABL</code>:</li> <li><code>TBDEL</code> (position 1): Deletion flag ('D' for deleted).</li> <li><code>TBTYPE</code> (positions 2-7): Table type.</li> <li><code>TBCODE</code> (positions 8-13): Table code.</li> <li><code>TBDESC</code> (positions 14-43): Table description.</li> </ul> </li> <li> <p>Main Processing Logic (Calculation Specifications):</p> </li> <li> <p>Level 1 (L1) Processing:</p> <ul> <li>Triggered for each <code>ARCUST</code> record matching the company number (<code>ARCO</code>, level indicator L1).</li> <li>Company Lookup:</li> <li><code>ARCO CHAIN ARCONT 99</code>: Chains (looks up) the company number in <code>ARCONT</code>.</li> <li>If not found (<code>*in99 = *on</code>), sets <code>ACNAME</code> to blanks.</li> <li>Time and Date Setup:</li> <li><code>TIME TIME12 120</code>: Retrieves the system time into <code>TIME12</code> (12 digits).</li> <li><code>MOVEL TIME12 TIME 60</code>: Moves the time to a 6-character field.</li> <li><code>MOVE TIME12 DATE 60</code>: Moves the date portion to a 6-character field (formatted as YYMMDD).</li> <li><code>Z-ADD *ZEROS PAGE</code>: Initializes the page number to 0.</li> <li>Customer Data Processing:</li> <li><code>Z-ADD ARAREA AREA 30</code>: Moves the area code to <code>AREA</code> (3 digits, zoned).</li> <li><code>Z-ADD ARTELE TELE 70</code>: Moves the telephone number to <code>TELE</code> (7 digits, zoned).</li> <li><code>ARCOCU CHAIN ARCUSP 97</code>: Chains the customer number to <code>ARCUSP</code> to retrieve contact information.</li> <li>If not found (<code>*in97 = *on</code>), sets <code>CSCNCT</code> to blanks.</li> <li>Terms Code Lookup:<ul> <li><code>MOVEL 'ARTERM' TRMKEY 12</code>: Sets the table key prefix to 'ARTERM'.</li> <li><code>MOVE ARTERM TRMKEY</code>: Appends the terms code to <code>TRMKEY</code>.</li> <li><code>TRMKEY CHAIN GSTABL 99</code>: Chains to <code>GSTABL</code> to retrieve the terms description.</li> <li>If found (<code>*in99 = *off</code>), moves <code>TBDESC</code> to <code>TRMDSC</code> (20 characters); otherwise, sets <code>TRMDSC</code> to blanks.</li> </ul> </li> </ul> </li> <li> <p>Output Processing (Output Specifications):</p> </li> <li>Header Output (H):<ul> <li><code>OPRINTER H 103 L1</code>: Prints header lines at level 1 (for each company).</li> <li>Outputs:</li> <li><code>ACNAME</code> (company name, position 30).</li> <li>Literal 'PAGE' (position 134).</li> <li><code>PAGE</code> (zoned, position 138).</li> <li>Literal 'DATE' (position 150).</li> <li><code>DATE</code> (formatted as YY/MM/DD, position 159).</li> <li><code>H 2 L1</code>: Prints a title line:</li> <li>Literal ' CUSTOMER MASTER LIST ' (position 77).</li> <li>Literal 'TIME' (position 150).</li> <li><code>TIME</code> (formatted as HH.MM.SS, position 159).</li> </ul> </li> <li>Detail Lines (D):<ul> <li><code>D 1 L1</code>: Prints decorative lines (asterisks) for formatting (positions 24, 48, 72, 96, 120, 144, 164).</li> <li><code>D 1 L1</code>: Prints column headers:</li> <li>'CUST#' (position 6).</li> <li>'CUSTOMER NAME' (position 20).</li> <li>'ADDRESS' (position 52).</li> <li>'PHONE' (position 83).</li> <li>'CONTACT' (position 102).</li> <li>'PAYMENT TERMS' (position 137).</li> <li><code>D 2 L1</code>: Prints additional decorative lines for formatting.</li> <li><code>D 2 01</code>: Prints customer details:</li> <li><code>ARCUST</code> (customer number, zoned, position 6).</li> <li><code>ARNAME</code> (customer name, position 37).</li> <li><code>ARADR1</code> (address line 1, position 68).</li> <li><code>AREA</code> (area code, zoned, blank-suppressed, position 74).</li> <li><code>TELE</code> (telephone, blank-suppressed, formatted as XXX-XXXX, position 83).</li> <li><code>CSCNCT</code> (contact name, position 121).</li> <li><code>TRMDSC</code> (terms description, position 144).</li> <li><code>D 1 01</code>: Prints additional address lines:</li> <li><code>ARADR2</code> (address line 2, position 68).</li> <li><code>ARADR3</code> (address line 3, position 68).</li> <li><code>ARADR4</code> (address line 4, position 68, conditional on <code>*in10 = *off</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the customer master list:</p> <ol> <li>Company Validation:</li> <li>For each customer record in <code>ARCUST</code>, the company number (<code>ARCO</code>) is looked up in <code>ARCONT</code> to retrieve the company name (<code>ACNAME</code>).</li> <li> <p>If no matching company is found, the company name is blank.</p> </li> <li> <p>Customer Data Retrieval:</p> </li> <li>Customer number (<code>ARCOCU</code>) is used to retrieve contact information (<code>CSCNCT</code>) from <code>ARCUSP</code>.</li> <li> <p>If no matching record is found, the contact name is blank.</p> </li> <li> <p>Terms Code Lookup:</p> </li> <li>The terms code (<code>ARTERM</code>) is used to look up a description in <code>GSTABL</code> with the key 'ARTERM' + <code>ARTERM</code>.</li> <li> <p>If found, the description (<code>TBDESC</code>) is used; otherwise, the terms description (<code>TRMDSC</code>) is blank.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report is grouped by company (<code>L1</code> level), with headers including company name, page number, date, and time.</li> <li>Customer details include customer number, name, address (up to 4 lines), phone number (formatted as XXX-XXXX), contact name, and payment terms description.</li> <li> <p>Address line 4 is printed only if indicator <code>*in10</code> is off (likely controlled by parameters from <code>AR901P</code>).</p> </li> <li> <p>Data Formatting:</p> </li> <li>Numeric fields like <code>ARAREA</code> and <code>ARTELE</code> are converted to zoned format for printing.</li> <li>The telephone number is formatted with a hyphen (XXX-XXXX).</li> <li>The date is formatted as YY/MM/DD, and the time as HH.MM.SS.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>ARCUST:</li> <li>Type: Primary input file (disk, indexed).</li> <li>Record Length: 384 bytes.</li> <li>Key: Not explicitly defined in the code but implied to be <code>ARCO</code> (company number) for level processing.</li> <li>Fields:<ul> <li><code>ARCOCU</code> (positions 2-9): Customer number (8 characters).</li> <li><code>ARCO</code> (positions 2-3): Company number (2 characters, level L1).</li> <li><code>ARCUST</code> (positions 4-9): Customer number (6 characters).</li> <li><code>ARNAME</code> (positions 10-39): Customer name (30 characters).</li> <li><code>ARADR1-4</code> (positions 40-159): Address lines (30 characters each).</li> <li><code>ARAREA</code> (positions 257-258, packed): Area code (3 digits).</li> <li><code>ARTELE</code> (positions 259-262, packed): Telephone number (7 digits).</li> <li><code>ARTERM</code> (positions 265-266): Terms code (2 digits).</li> </ul> </li> <li> <p>Purpose: Main customer master file containing core customer data.</p> </li> <li> <p>AR901S:</p> </li> <li>Type: Input file (disk, externally described).</li> <li>Record Length: 30 bytes.</li> <li> <p>Purpose: Likely contains selection parameters (e.g., company or customer filters) from <code>AR901P</code>. Linked to <code>ARCUST</code> via the extension specification.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: Position 2 (<code>ARCO</code>, company number).</li> <li>Fields:<ul> <li><code>ACNAME</code> (positions 4-33): Company name (30 characters).</li> </ul> </li> <li> <p>Purpose: Stores company details for the report header.</p> </li> <li> <p>ARCUSP:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 1344 bytes.</li> <li>Key: Position 2 (likely customer number).</li> <li>Fields:<ul> <li><code>CSCNCT</code> (positions 267-291): Contact name (25 characters).</li> </ul> </li> <li> <p>Purpose: Stores supplemental customer data, such as contact information.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: Position 2 (likely <code>TBTYPE</code> + <code>TBCODE</code>).</li> <li>Fields:<ul> <li><code>TBDEL</code> (position 1): Deletion flag ('D' for deleted).</li> <li><code>TBTYPE</code> (positions 2-7): Table type (6 characters).</li> <li><code>TBCODE</code> (positions 8-13): Table code (6 characters).</li> <li><code>TBDESC</code> (positions 14-43): Table description (30 characters).</li> </ul> </li> <li> <p>Purpose: Stores lookup data for terms codes (e.g., payment terms descriptions).</p> </li> <li> <p>PRINTER:</p> </li> <li>Type: Output file (printer).</li> <li>Record Length: 164 bytes.</li> <li>Purpose: Generates the printed customer master list report.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>No external programs are explicitly called within <code>AR901.rpg36</code> (e.g., via <code>CALL</code> operations). The program is invoked by the OCL program (<code>AR901P.ocl36.txt</code>), which loads and runs <code>AR901</code> (referenced in the <code>JOBQ</code> or <code>ELSE</code> clause). The RPGLE program <code>AR901P</code> likely passes parameters (e.g., <code>kyalco</code>, <code>kyco1-kyco3</code>, <code>addlst</code>) that control the report\u2019s behavior, but no direct program calls occur within <code>AR901</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Integration with OCL and RPGLE:</li> <li>The OCL program (<code>AR901P.ocl36.txt</code>) sets up the environment, loads <code>AR901P</code>, and optionally queues or runs <code>AR901</code>.</li> <li>The RPGLE program (<code>AR901P.rpgle</code>) collects and validates user input (e.g., company/customer selections, address list flag) and passes parameters to <code>AR901</code> via shared memory or files like <code>AR901S</code>.</li> <li> <p><code>AR901</code> processes these parameters to filter records from <code>ARCUST</code> and generate the report.</p> </li> <li> <p>Indicator Usage:</p> </li> <li><code>*in99</code>: Indicates whether a <code>CHAIN</code> to <code>ARCONT</code> or <code>GSTABL</code> fails.</li> <li><code>*in97</code>: Indicates whether a <code>CHAIN</code> to <code>ARCUSP</code> fails.</li> <li><code>*in10</code>: Controls whether address line 4 (<code>ARADR4</code>) is printed (likely set by <code>addlst</code> from <code>AR901P</code>).</li> <li> <p><code>L1</code>: Level indicator for processing records by company number (<code>ARCO</code>).</p> </li> <li> <p>Report Structure:</p> </li> <li>The report includes a header with company name, page number, date, and time, followed by a formatted customer list with columns for customer number, name, address, phone, contact, and payment terms.</li> <li> <p>Decorative lines (asterisks) separate sections for readability.</p> </li> <li> <p>No Chart Generation:</p> </li> <li>The query does not request a chart, and no numerical data is provided for visualization, so no chart is generated.</li> </ul> <p>If you need further analysis (e.g., specific field mappings, sample report output, or deeper integration details with <code>AR901P</code>), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/","title":"AR901P OCL","text":"<p>The provided document is an Operations Control Language (OCL) program, specifically <code>AR901P.ocl36.txt</code>, used to control job execution in IBM System/36 environments. OCL is a scripting language for managing job steps, file operations, and program execution on System/36. Below, I\u2019ll explain the process steps of the OCL program, identify any external programs called, and list the tables (or files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL programs define job control steps, including program execution, file handling, and conditional logic. Here\u2019s a breakdown of the steps in <code>AR901P.ocl36.txt</code>:</p> <ol> <li>Invoke GSGENIEC Program:</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>This command calls an external program named <code>GSGENIEC</code>.</li> <li>Likely a utility or initialization program, possibly for setting up the environment or validating conditions before proceeding.</li> <li>No parameters are explicitly passed in this call.</li> </ul> </li> <li> <p>Conditional Check on Location 506, Position 3:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This checks the value at memory location 506, position 3 (likely a system switch or flag).</li> <li>If the condition evaluates to <code>YES</code> (true), the job terminates (<code>RETURN</code>).</li> <li>This acts as an early exit condition, possibly to skip execution based on a specific system state.</li> </ul> </li> <li> <p>Set Local Variables to Blank:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>Initializes all local variables to blank (empty).</li> <li>Ensures a clean state for subsequent processing, preventing residual data from affecting the job.</li> </ul> </li> <li> <p>Set Procedure Context:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This command likely sets up a procedure context or scope for the job.</li> <li>The <code>,,,,,,,?9?</code> indicates placeholders for parameters, with <code>?9?</code> possibly referring to a specific library, file, or parameter (context-specific, often a system-defined value).</li> <li>Exact meaning depends on the system configuration, but it\u2019s typically for procedure execution control.</li> </ul> </li> <li> <p>Invoke GSY2K:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls a program or procedure named <code>GSY2K</code>.</li> <li>Likely a utility for Year 2000 compliance or date-related processing, common in legacy systems like System/36.</li> <li>No additional parameters are specified.</li> </ul> </li> <li> <p>Set Switch to 0XXXXXXX:</p> </li> <li> <p><code>// SWITCH 0XXXXXXX</code>:</p> <ul> <li>Sets a system switch to the pattern <code>0XXXXXXX</code> (a binary or bit pattern).</li> <li>In System/36, switches control program flow or behavior. Here, the first bit is set to <code>0</code>, and the remaining bits (<code>XXXXXXX</code>) are unspecified or left unchanged.</li> <li>This configures the environment for the subsequent program load.</li> </ul> </li> <li> <p>Load the AR901P Program:</p> </li> <li> <p><code>// LOAD AR901P</code>:</p> <ul> <li>Loads the main program <code>AR901P</code> into memory for execution.</li> <li>This is likely the core RPG program responsible for generating the \"Customer Master Listing.\"</li> </ul> </li> <li> <p>Define File ARCONT:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> with a label <code>?9?ARCONT</code> (the <code>?9?</code> prefix likely indicates a library or system-specific naming convention).</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple jobs to access it concurrently.</li> <li>This file is likely the customer master file containing data for the listing.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Initiates execution of the loaded program (<code>AR901P</code>).</li> <li>The program processes the <code>ARCONT</code> file to generate the customer master listing.</li> </ul> </li> <li> <p>Check Switch 1 and Cancel if Set:</p> <ul> <li><code>// IF SWITCH1-1 CANCEL</code>:</li> <li>Checks if the first switch (bit) is set to <code>1</code>.</li> <li>If true, the job is canceled, terminating execution.</li> <li>This provides a conditional exit based on runtime conditions (e.g., an error or specific state).</li> </ul> </li> <li> <p>Conditional Job Queue or Direct Execution:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR901,,,,,,,,,?9?</code>:</li> <li>Checks the value at memory location 120, position 1.</li> <li>If true (<code>/Y</code>), the job <code>AR901</code> is submitted to a job queue in the library <code>?CLIB?</code> (a placeholder for a specific library), with <code>?9?</code> indicating additional parameters or a system-specific value.</li> <li>This queues the job for asynchronous execution.</li> <li><code>// ELSE AR901 ,,,,,,,,?9?</code>:</li> <li>If the condition is false, the <code>AR901</code> job is executed directly (synchronously) with placeholder parameters (<code>?9?</code>).</li> <li>This provides flexibility to either queue or run the job based on system state.</li> </ul> </li> <li> <p>Reset Local Variables:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Again, sets all local variables to blank at the end of the job.</li> <li>Ensures cleanup and prevents data leakage for subsequent jobs.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility program for initialization or environment setup. 2. GSY2K:    - Invoked via <code>// GSY2K</code>.    - Possibly a Year 2000 compliance utility or date-processing program. 3. AR901P:    - Loaded and executed via <code>// LOAD AR901P</code> and <code>// RUN</code>.    - The main RPG program that processes the customer master file to produce the listing. 4. AR901:    - Referenced in the conditional job queue or execution step (<code>JOBQ ?CLIB?,AR901</code> or <code>AR901</code>).    - Likely the same as <code>AR901P</code> or a related program/procedure for generating the customer master listing.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following file (table): 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - This is likely the customer master file, containing records such as customer IDs, names, addresses, or other relevant data used by <code>AR901P</code> to generate the listing.    - The <code>?9?</code> prefix in the label suggests a library or system-specific naming convention (e.g., a library like <code>QS36F</code> or a user-defined library).    - Opened in shared mode (<code>DISP-SHR</code>), indicating it can be accessed by multiple jobs.</p> <p>No other files or tables are explicitly mentioned in the OCL code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Placeholder <code>?9?</code>: The <code>?9?</code> appears multiple times (e.g., in <code>SCPROCP</code>, file labels, and job queue parameters). This is likely a system-specific variable or library reference, possibly resolved at runtime based on the System/36 configuration.</li> <li>System/36 Context: The OCL syntax and commands like <code>SWITCH</code>, <code>LOCAL</code>, and <code>JOBQ</code> are specific to IBM System/36, a midrange computer system from the 1980s. The program assumes a legacy environment with RPG II or RPG III for business applications.</li> <li>Conditional Logic: The use of <code>IFF</code> and <code>IF</code> statements with memory locations (<code>?L'506,3'?</code> and <code>?L'120,1'?</code>) suggests dynamic control based on system or job states, typical in batch processing environments.</li> <li>No Chart Generation: Since the query does not explicitly request a chart and no numerical data is provided, no chart is generated.</li> </ul> <p>If you need further clarification or analysis (e.g., details about <code>AR901P</code>\u2019s RPG logic, assuming its code is available), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/","title":"AR901P RPGLE","text":"<p>The provided document, <code>AR901P.rpgle.txt</code>, is an RPGLE (RPG IV) program for IBM System/36 or AS/400 (IBM i) that generates a \"Customer Master Listing.\" It is called from the previously analyzed OCL program (<code>AR901P.ocl36.txt</code>). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program <code>AR901P</code> is designed to prompt for user input, validate parameters, and prepare data for generating a customer master listing. It interacts with a workstation display file (<code>ar901pd</code>) and processes data from customer master files (<code>arcont</code> and <code>gscont</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group, ensuring modern RPG IV behavior.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures numeric fields are handled as zoned or packed decimal during input.</li> <li><code>H DFTNAME(AR901P)</code>: Sets the default program name to <code>AR901P</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>far901pd cf e workstn Handler('PROFOUNDUI(HANDLER)')</code>: Defines a workstation file for interactive display, using a Profound UI handler for modern UI support.</li> <li><code>farcont if f 256 2aidisk keyloc(2)</code>: Defines the customer master file <code>ARCONT</code> as input, with a record length of 256 bytes, indexed (keyed) on field position 2 (<code>acco</code>, company number).</li> <li><code>fgscont if f 512 2aidisk keyloc(2)</code>: Defines another file <code>GSCONT</code>, likely a global or system control file, also keyed on position 2 (<code>gxcono</code>, company number).</li> </ul> </li> <li> <p>Data Structures and Variables:</p> <ul> <li><code>dco</code>: Array of 35-character fields to store company data (up to 3 companies).</li> <li><code>msg</code>: Array of 25-character messages for user feedback (e.g., \"ENTER ALL OR CO\", \"INVALID COMPANY #\").</li> <li><code>uds</code>: User data structure defining input fields like <code>kyalco</code> (all/company selection), <code>kyco1-kyco3</code> (company numbers), <code>kyalcs</code> (all/select customer selection), <code>kycs01-kycs10</code> (customer numbers), <code>addlst</code> (address list flag), <code>dollst</code> (dollar list flag), <code>kyjobq</code> (job queue flag), and <code>kycopy</code> (number of copies).</li> </ul> </li> <li> <p>Workstation File Processing:</p> </li> <li>Initial Screen Check:<ul> <li>If <code>qsctl</code> (control field) is blank, set indicator <code>*in01</code> to '1' and <code>qsctl</code> to 'R' to display the input screen (<code>ar901pfm</code>).</li> <li>Otherwise, read the workstation file (<code>ar901pfm</code>). If the last record is read (<code>lr</code>), the program terminates (<code>return</code>).</li> </ul> </li> <li> <p>Cancel Key Check:</p> <ul> <li>If <code>*inkg</code> (cancel key, e.g., F3) is pressed, set <code>*inu1</code> and <code>*inlr</code> to <code>*on</code>, clear <code>*in01</code>, and jump to the <code>end</code> tag to exit the program.</li> </ul> </li> <li> <p>Main Processing Logic:</p> </li> <li>Conditional Subroutine Calls:<ul> <li>If <code>*in10</code> is <code>*on</code> (indicating prior initialization), call the <code>edit</code> subroutine if <code>*in11</code> is <code>*off</code>.</li> <li>If <code>*in10</code> is <code>*off</code> (first run), call the <code>onetim</code> subroutine if <code>*in11</code> is <code>*off</code>.</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>If <code>*in11</code> is <code>*off</code>, write to the workstation file (<code>ar901pfm</code>) to display the input screen.</li> <li>If <code>*in11</code> is <code>*on</code>, set <code>*inlr</code> to <code>*on</code> to end the program.</li> </ul> </li> <li> <p>Edit Subroutine (<code>edit</code>):</p> </li> <li>Validates user input parameters for generating the customer master listing.</li> <li> <p>Steps:</p> <ul> <li>Clear error indicators (<code>*in31</code> to <code>*in38</code>) and message output (<code>msgout</code>).</li> <li>Validate <code>kyalco</code> (All/Company Selection):</li> <li>If <code>kyalco</code> is neither 'ALL' nor 'CO ', set <code>*in31</code> and display message \"ENTER ALL OR CO\".</li> <li>Validate Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>):</li> <li>If <code>kyalco</code> is 'CO ' and all company numbers are zero, set <code>*in31</code> and display \"ENTER COMPANY #\".</li> <li>For each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:<ul> <li>Position the file pointer (<code>setll</code>) on <code>arcont</code> using the company number.</li> <li>Read the record. If no record exists (<code>*in20</code> is <code>*on</code>) or the record is deleted (<code>acdel = 'D'</code>) or the company number doesn\u2019t match, set <code>*in32</code>, <code>*in33</code>, or <code>*in34</code> and display \"INVALID COMPANY #\".</li> </ul> </li> <li>Validate <code>kyalcs</code> (All/Select Customer Selection):</li> <li>If <code>kyalcs</code> is neither 'ALL' nor 'SEL', set <code>*in35</code> and display \"ENTER ALL OR SEL\".</li> <li>If <code>kyalcs</code> is 'SEL' and all customer numbers (<code>kycs01</code> to <code>kycs10</code>) are zero, set <code>*in39</code> and display \"ENTER CUSTOMER #\".</li> <li>Validate <code>addlst</code> (Address List Flag):</li> <li>If <code>addlst</code> is not 'Y', 'N', or blank, set <code>*in36</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Validate <code>dollst</code> (Dollar List Flag):</li> <li>If <code>dollst</code> is not 'Y', 'N', or blank, set <code>*in37</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Validate <code>kyjobq</code> (Job Queue Flag):</li> <li>If <code>kyjobq</code> is not 'Y', 'N', or blank, set <code>*in38</code> and display \"ENTER Y, N OR BLANK\".</li> <li>Set Default for <code>kycopy</code>:</li> <li>If <code>kycopy</code> (number of copies) is zero, set it to 1.</li> <li>Set Default for <code>addlst</code> and <code>dollst</code>:</li> <li>If both <code>addlst</code> and <code>dollst</code> are not 'Y', set <code>addlst</code> to 'Y'.</li> <li>End of Validation:</li> <li>Set <code>*in11</code> to <code>*on</code> to indicate validation is complete and return to the main loop.</li> </ul> </li> <li> <p>One-Time Subroutine (<code>onetim</code>):</p> </li> <li>Performs initial setup for the program.</li> <li> <p>Steps:</p> <ul> <li>Clear the <code>dco</code> array and initialize variables (<code>x = 1</code>, <code>arlim = 00</code>).</li> <li>Position the file pointer (<code>setll</code>) on <code>arcont</code> using <code>arlim</code> (likely to read from the start).</li> <li>Read <code>arcont</code> records in a loop (<code>agnco</code>):</li> <li>Skip deleted records (<code>acdel = 'D'</code>).</li> <li>Store company number (<code>acco</code>) and name (<code>acname</code>) in the <code>dco</code> array.</li> <li>Increment <code>x</code> until 3 records are processed or end of file (<code>*in20</code> is <code>*on</code>).</li> <li>Move <code>dco(1)</code>, <code>dco(2)</code>, and <code>dco(3)</code> to output fields <code>dco1</code>, <code>dco2</code>, and <code>dco3</code> for display.</li> <li>Check <code>gscont</code> File:</li> <li>Chain (lookup) to <code>gscont</code> using key '00'.</li> <li>If found (<code>*in99</code> is <code>*off</code>) and <code>gxcono</code> is non-zero, set <code>kyalco</code> to 'CO ' and <code>kyco1</code> to <code>gxcono</code>.</li> <li>Otherwise, set <code>kyalco</code> to 'ALL'.</li> <li>Set Defaults:</li> <li>Set <code>kyalcs</code> to 'ALL', <code>addlst</code> to 'Y', <code>dollst</code> to blank, <code>kyjobq</code> to 'N', and <code>kycopy</code> to 1.</li> <li>Set <code>*in10</code> to <code>*on</code> to indicate initialization is complete and clear <code>*in20</code>.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Write to <code>ar901pfm</code> (workstation file) if <code>*in11</code> is <code>*off</code>, outputting fields like <code>kyalco</code>, <code>kyco1-kyco3</code>, <code>dco</code>, <code>kyalcs</code>, <code>kycs01-kycs10</code>, <code>addlst</code>, <code>dollst</code>, <code>kyjobq</code>, <code>kycopy</code>, and <code>msgout</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the customer master listing:</p> <ol> <li>Company Selection (<code>kyalco</code>):</li> <li>Must be 'ALL' (all companies) or 'CO ' (specific companies).</li> <li> <p>If 'CO ', at least one valid company number (<code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>) must be provided and must exist in <code>arcont</code> without being deleted (<code>acdel \u2260 'D'</code>).</p> </li> <li> <p>Customer Selection (<code>kyalcs</code>):</p> </li> <li>Must be 'ALL' (all customers) or 'SEL' (selected customers).</li> <li> <p>If 'SEL', at least one customer number (<code>kycs01</code> to <code>kycs10</code>) must be non-zero.</p> </li> <li> <p>Address and Dollar List Flags (<code>addlst</code>, <code>dollst</code>):</p> </li> <li>Must be 'Y' (yes), 'N' (no), or blank.</li> <li> <p>If both are not 'Y', <code>addlst</code> defaults to 'Y' to ensure at least one report type is generated.</p> </li> <li> <p>Job Queue Flag (<code>kyjobq</code>):</p> </li> <li> <p>Must be 'Y' (queue the job), 'N' (run interactively), or blank.</p> </li> <li> <p>Number of Copies (<code>kycopy</code>):</p> </li> <li> <p>Defaults to 1 if zero is entered.</p> </li> <li> <p>Data Validation:</p> </li> <li>Company numbers must exist in <code>arcont</code> and not be marked as deleted.</li> <li> <p>Invalid inputs result in error messages displayed to the user, prompting correction.</p> </li> <li> <p>Initialization:</p> </li> <li>The <code>onetim</code> subroutine populates default values and retrieves up to three company records from <code>arcont</code> for display.</li> <li>The <code>gscont</code> file provides a default company number if available; otherwise, 'ALL' is used.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR901PD:</li> <li>Type: Workstation file (display file).</li> <li>Purpose: Handles interactive user input/output via the <code>ar901pfm</code> format.</li> <li> <p>Handler: Uses Profound UI (<code>PROFOUNDUI(HANDLER)</code>) for modern UI rendering.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 256 bytes.</li> <li>Key: <code>acco</code> (company number, position 2).</li> <li>Fields:<ul> <li><code>acdel</code> (position 1, 1 byte): Deletion flag ('D' for deleted).</li> <li><code>acco</code> (position 2-3, 2 bytes, numeric): Company number.</li> <li><code>acname</code> (position 4-33, 30 bytes): Company name.</li> </ul> </li> <li> <p>Purpose: Stores customer master data (company details).</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (disk, indexed).</li> <li>Record Length: 512 bytes.</li> <li>Key: Position 2 (likely <code>gxcono</code>, company number).</li> <li>Fields:<ul> <li><code>gxdel</code> (position 1, 1 byte): Deletion flag.</li> <li><code>gxcono</code> (position 77-78, 2 bytes, numeric): Company number.</li> </ul> </li> <li>Purpose: Likely a system control file storing default or global company settings.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>No external RPG programs are explicitly called (e.g., via <code>CALL</code> operation) within <code>AR901P.rpgle</code>. The program interacts with the OCL program (<code>AR901P.ocl36.txt</code>) that loads and runs it, and it uses the Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) for workstation file processing, but this is a system-level interface, not a program call.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/AR901P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Conversion Notes:</li> <li>The program was converted on 04/08/23 using TARGET/400, with 161 lines added (<code>T4A</code>), 5 modified (<code>T4M</code>), and original lines (<code>T4O</code>) retained from an older RPG source.</li> <li> <p>Conversion likely modernized the program from RPG II/III to RPGLE, adding features like <code>EVAL</code> and modern file handling.</p> </li> <li> <p>Indicators:</p> </li> <li>Uses indicators (<code>*in01</code>, <code>*in10</code>, <code>*in11</code>, <code>*in20</code>, <code>*in31</code> to <code>*in39</code>, etc.) for flow control and error handling, typical in legacy RPG.</li> <li> <p>Modernized with <code>EVAL</code> for setting indicators (e.g., <code>eval *in31 = *on</code> instead of <code>SETON 31</code>).</p> </li> <li> <p>OCL Integration:</p> </li> <li>The OCL program (<code>AR901P.ocl36.txt</code>) sets up the environment, loads <code>AR901P</code>, and passes parameters via memory locations (e.g., <code>kyjobq</code> at position 120).</li> <li> <p>The RPGLE program uses these parameters (e.g., <code>kyjobq</code>, <code>kycopy</code>) to control job execution (interactive or queued).</p> </li> <li> <p>No Chart Generation:</p> </li> <li>The query does not request a chart, and no numerical data is provided for visualization, so no chart is generated.</li> </ul> <p>If you need further details (e.g., specific field mappings, sample output format, or integration with other programs), please provide additional context or files.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/","title":"Summary AR901P OCL","text":"<p>The call stack consists of three programs: the OCL program (<code>AR901P.ocl36.txt</code>), the RPGLE program (<code>AR901P.rpgle.txt</code>), and the RPG II program (<code>AR901.rpg36.txt</code>). These programs work together to generate a \"Customer Master File List\" report on the IBM System/36. Below, I\u2019ll identify the use cases implemented by this program suite and provide a concise function requirements document for a non-interactive version of the primary use case, assuming inputs are provided programmatically rather than via a screen.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The program suite implements a single primary use case:</p> <ol> <li>Generate Customer Master File List Report:</li> <li>Description: Produces a printed report listing customer details, including customer number, name, address, phone number, contact name, and payment terms, grouped by company. The report can be filtered by company number(s) or customer number(s), with options to include address details, run interactively or in batch, and specify the number of copies.</li> <li>Components:<ul> <li>OCL Program (<code>AR901P.ocl36.txt</code>): Sets up the job environment, calls initialization utilities (<code>GSGENIEC</code>, <code>GSY2K</code>), loads the RPGLE program (<code>AR901P</code>), and conditionally queues or runs the RPG II program (<code>AR901</code>).</li> <li>RPGLE Program (<code>AR901P.rpgle</code>): Collects and validates user inputs (company/customer selections, address list flag, job queue flag, number of copies) and prepares parameters for the report generation.</li> <li>RPG II Program (<code>AR901.rpg36</code>): Processes customer data from files (<code>ARCUST</code>, <code>ARCONT</code>, <code>ARCUSP</code>, <code>GSTABL</code>) and generates the printed report.</li> </ul> </li> </ol> <p>No additional distinct use cases are evident, as the programs focus on a single workflow: generating a customer master list report with configurable parameters.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#function-requirements-document","title":"Function Requirements Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#customer-master-list-function-requirements","title":"Customer Master List Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#overview","title":"Overview","text":"<p>The <code>GenerateCustomerMasterList</code> function generates a customer master file list report, listing customer details (customer number, name, address, phone, contact, payment terms) grouped by company. It accepts input parameters programmatically (no screen interaction) and produces a printed report, supporting filtering by company/customer and configuration options.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection (<code>kyalco</code>, string):</li> <li>Values: 'ALL' (all companies) or 'CO ' (specific companies).</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, numeric, 2 digits each):</li> <li>Required if <code>kyalco = 'CO '</code>. Must exist in <code>ARCONT</code> and not be deleted (<code>acdel \u2260 'D'</code>).</li> <li>Customer Selection (<code>kyalcs</code>, string):</li> <li>Values: 'ALL' (all customers) or 'SEL' (selected customers).</li> <li>Customer Numbers (<code>kycs01</code> to <code>kycs10</code>, numeric, 6 digits each):</li> <li>Required if <code>kyalcs = 'SEL'</code>. At least one non-zero value.</li> <li>Address List Flag (<code>addlst</code>, string):</li> <li>Values: 'Y' (include address line 4), 'N' (exclude), or blank.</li> <li>Dollar List Flag (<code>dollst</code>, string):</li> <li>Values: 'Y', 'N', or blank (not used in report generation but validated).</li> <li>Job Queue Flag (<code>kyjobq</code>, string):</li> <li>Values: 'Y' (queue report job), 'N' (run interactively), or blank.</li> <li>Number of Copies (<code>kycopy</code>, numeric, 2 digits):</li> <li>Number of report copies (default: 1 if zero).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Report (<code>PRINTER</code> file):</li> <li>Format: 164-character lines, grouped by company.</li> <li>Header: Company name, page number, date (YY/MM/DD), time (HH.MM.SS).</li> <li>Columns: Customer number (6 digits), name (30 chars), address (4 lines, 30 chars each, line 4 conditional on <code>addlst = 'Y'</code>), phone (XXX-XXXX), contact name (25 chars), payment terms (20 chars).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Check <code>kyalco</code> is 'ALL' or 'CO '; else return error \"ENTER ALL OR CO\".</li> <li>If <code>kyalco = 'CO '</code>, verify <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code> are non-zero, exist in <code>ARCONT</code>, and not deleted; else return \"ENTER COMPANY #\" or \"INVALID COMPANY #\".</li> <li>Check <code>kyalcs</code> is 'ALL' or 'SEL'; else return \"ENTER ALL OR SEL\".</li> <li>If <code>kyalcs = 'SEL'</code>, ensure at least one <code>kycs01</code> to <code>kycs10</code> is non-zero; else return \"ENTER CUSTOMER #\".</li> <li>Check <code>addlst</code>, <code>dollst</code>, <code>kyjobq</code> are 'Y', 'N', or blank; else return \"ENTER Y, N OR BLANK\".</li> <li>Set <code>kycopy</code> to 1 if zero.</li> <li> <p>If <code>addlst \u2260 'Y'</code> and <code>dollst \u2260 'Y'</code>, set <code>addlst = 'Y'</code>.</p> </li> <li> <p>Initialize Data:</p> </li> <li>Retrieve up to three company records from <code>ARCONT</code> (company number, name) for filtering.</li> <li>Check <code>GSCONT</code> for default company number (<code>gxcono</code>); set <code>kyalco = 'CO '</code> and <code>kyco1 = gxcono</code> if found, else <code>kyalco = 'ALL'</code>.</li> <li> <p>Set defaults: <code>kyalcs = 'ALL'</code>, <code>addlst = 'Y'</code>, <code>dollst = ' '</code>, <code>kyjobq = 'N'</code>, <code>kycopy = 1</code>.</p> </li> <li> <p>Process Customer Records:</p> </li> <li>Read <code>ARCUST</code> records, filtered by:<ul> <li><code>kyalco = 'ALL'</code>: All records.</li> <li><code>kyalco = 'CO '</code>: Records matching <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>.</li> <li><code>kyalcs = 'ALL'</code>: All customers per company.</li> <li><code>kyalcs = 'SEL'</code>: Customers matching <code>kycs01</code> to <code>kycs10</code>.</li> </ul> </li> <li> <p>For each record:</p> <ul> <li>Chain <code>ARCO</code> to <code>ARCONT</code> for company name (<code>ACNAME</code>); set to blanks if not found.</li> <li>Chain <code>ARCOCU</code> to <code>ARCUSP</code> for contact name (<code>CSCNCT</code>); set to blanks if not found.</li> <li>Chain <code>ARTERM</code> (prefixed with 'ARTERM') to <code>GSTABL</code> for terms description (<code>TBDESC</code>); set to blanks if not found.</li> <li>Convert <code>ARAREA</code> (3 digits) and <code>ARTELE</code> (7 digits) to zoned format; format phone as XXX-XXXX.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>For each company (<code>ARCO</code>):<ul> <li>Print header: <code>ACNAME</code>, page number, date (from system time), time (HH.MM.SS).</li> <li>Print title: \" CUSTOMER MASTER LIST \".</li> <li>Print column headers: \"CUST#\", \"CUSTOMER NAME\", \"ADDRESS\", \"PHONE\", \"CONTACT\", \"PAYMENT TERMS\".</li> <li>Print decorative lines (asterisks).</li> </ul> </li> <li>For each customer:<ul> <li>Print: <code>ARCUST</code> (customer number), <code>ARNAME</code>, <code>ARADR1-3</code>, <code>ARADR4</code> (if <code>addlst = 'Y'</code>), <code>AREA-TELE</code>, <code>CSCNCT</code>, <code>TRMDSC</code>.</li> </ul> </li> <li>Repeat for <code>kycopy</code> copies, either interactively or queued based on <code>kyjobq</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Filtering:</li> <li>If <code>kyalco = 'CO '</code>, include only customers with company numbers matching <code>kyco1</code>, <code>kyco2</code>, or <code>kyco3</code>, validated against <code>ARCONT</code> (non-deleted).</li> <li> <p>If <code>kyalco = 'ALL'</code>, include all companies.</p> </li> <li> <p>Customer Filtering:</p> </li> <li>If <code>kyalcs = 'SEL'</code>, include only customers matching <code>kycs01</code> to <code>kycs10</code>.</li> <li> <p>If <code>kyalcs = 'ALL'</code>, include all customers per company.</p> </li> <li> <p>Address Inclusion:</p> </li> <li>Include address line 4 only if <code>addlst = 'Y'</code>.</li> <li> <p>Default to <code>addlst = 'Y'</code> if both <code>addlst</code> and <code>dollst</code> are not 'Y'.</p> </li> <li> <p>Validation:</p> </li> <li>Invalid inputs (e.g., <code>kyalco \u2260 'ALL' or 'CO '</code>, non-existent company numbers, zero customer numbers for <code>kyalcs = 'SEL'</code>) return specific error messages.</li> <li> <p><code>kycopy</code> defaults to 1 if zero.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>kyjobq = 'Y'</code>, queue the report job; if 'N' or blank, run interactively.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date and Time:</li> <li>Retrieve system time (12 digits) and extract date (YYMMDD, formatted as YY/MM/DD) and time (HHMMSS, formatted as HH.MM.SS).</li> <li>Page Number:</li> <li>Initialize to 0, increment per company group.</li> <li>Phone Number:</li> <li>Combine <code>ARAREA</code> (3 digits) and <code>ARTELE</code> (7 digits) into XXX-XXXX format.</li> <li>Default Values:</li> <li>Set <code>kycopy = 1</code> if zero.</li> <li>Set <code>addlst = 'Y'</code> if both <code>addlst</code> and <code>dollst \u2260 'Y'</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCUST: Customer master (customer number, name, address, phone, terms).</li> <li>ARCONT: Company master (company name).</li> <li>ARCUSP: Customer supplemental (contact name).</li> <li>GSTABL: Table file (terms descriptions).</li> <li>GSCONT: System control (default company number).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return error messages for invalid inputs (e.g., \"INVALID COMPANY #\", \"ENTER CUSTOMER #\").</li> <li>Skip deleted records (<code>acdel = 'D'</code> in <code>ARCONT</code>, <code>tbdel = 'D'</code> in <code>GSTABL</code>).</li> <li>Set blank values for missing data (e.g., <code>ACNAME</code>, <code>CSCNCT</code>, <code>TRMDSC</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR901P%20Customer%20Master%20List/Summary%20AR901P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Non-Interactive Design: The function assumes inputs are provided programmatically (e.g., via API or parameter list) rather than through the interactive workstation file (<code>AR901PD</code>) used in <code>AR901P.rpgle</code>. This eliminates the need for screen handling logic (e.g., <code>read ar901pfm</code>, <code>*in01</code>).</li> <li>Dollst Flag: The <code>dollst</code> flag is validated but not used in <code>AR901.rpg36</code> for report generation, suggesting it may be a legacy parameter or used in related programs not provided.</li> <li>UUID Choice: A new UUID (<code>e8e616e0-d894-4936-a3f5-391682ee794d</code>) is used as this is a new artifact, unrelated to previous artifacts in the conversation.</li> <li>Conciseness: The document focuses on business requirements and key calculations, omitting low-level RPG II/LE/OCL syntax details while preserving the core logic and rules.</li> </ul> <p>If you need further refinements (e.g., specific input formats, output report layout, or additional use cases), please provide additional details.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/","title":"AR915 RPGLE","text":"<p>The RPGLE program <code>AR915</code> is a customer form type contacts maintenance and inquiry program within the Customer Master Information system. It is called from the main program <code>AR915P</code> (as seen in the previous document) to handle the creation, updating, or displaying of individual customer form type contact records. The program supports both maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes, providing a user interface to manage contact details such as form type, contact name, email, and various flags. Below is a detailed explanation of the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#process-steps-of-the-ar915-program","title":"Process Steps of the AR915 Program","text":"<p>The <code>AR915</code> program follows a structured flow to manage a single customer form type contact record through a display file interface. The process steps are organized by the main subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Initializes variables, defines key lists, and processes input parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>p$cono</code> (company), <code>p$seq#</code> (sequence number), <code>p$cust</code> (customer), <code>p$mode</code> (run mode: 'MNT' or 'INQ'), <code>p$fgrp</code> (file group: 'Z' or 'G'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to display file fields (<code>f$cono</code>, <code>f$seq#</code>) and initializes output parameters (<code>o$fgrp</code>, <code>o$mode</code>, <code>o$flag</code>).</li> <li>Defines key lists (<code>klcufm</code>, <code>klcust</code>, <code>klfrmtyp</code>) for database operations.</li> <li>Initializes work fields, message handling fields, and date validation parameters.</li> <li>Sets up the display file fields and headers based on the mode (<code>MNT</code> or <code>INQ</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, and <code>bicont</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Retrieve Data for Passed Parameters (<code>rtvdta</code>):</p> </li> <li>Purpose: Retrieves data for the provided company, sequence number, and customer to populate the display file fields.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>arcufm</code> using <code>klcufm</code> (company, sequence number) to retrieve the contact record; if not found (<code>*in99</code>), clears the record and sets <code>fmcust</code> to <code>p$cust</code>.</li> <li>Sets <code>w$exists</code> to indicate whether the record exists.</li> <li>Chains to <code>bicont</code> to validate the company code (<code>f$cono</code>); clears <code>bcname</code> if not found.</li> <li>Chains to <code>arcust</code> to validate the customer code (<code>fmcust</code>); clears <code>arname</code> if not found.</li> <li>Sets the display header (<code>c$hdr1</code>) and protection indicator (<code>*in70</code>) based on <code>p$mode</code> ('MNT' for maintenance, 'INQ' for inquiry).</li> </ul> </li> <li> <p>Process Panel Formats (<code>srfmt</code>):</p> </li> <li>Purpose: Manages the main loop for displaying and processing the panel format (<code>fmt01</code>).</li> <li> <p>Actions:</p> <ul> <li>Clears the screen (<code>clrscr</code>).</li> <li>Initializes the panel format (<code>f01mov</code>) and sets the format name to <code>FMT01</code>.</li> <li>Enters a loop (<code>fmtagn</code>) that:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears the screen.</li> <li>Displays the <code>fmt01</code> format using <code>exfmt</code> and clears error indicators (<code>*in50</code>-<code>*in69</code>).</li> <li>Processes user input via <code>f01sr</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Continues until <code>fmtagn</code> is turned off (e.g., via F12 or inquiry mode completion).</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code>):</p> </li> <li>Purpose: Handles user input for the <code>fmt01</code> format based on function keys or ENTER.</li> <li> <p>Actions:</p> <ul> <li>Processes function keys:</li> <li>F04: Calls the <code>prompt</code> subroutine for field prompting.</li> <li>F10: Resets the cursor position (<code>row</code>, <code>col</code>) to home.</li> <li>F12: Exits the program by setting <code>fmtagn</code> to off.</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), determines the next format (<code>f01nxt</code>) and exits.</li> <li>For ENTER, validates input (<code>f01edt</code>) and, if no errors (<code>*in50 = *off</code>), updates the database (<code>upddbf</code>) in maintenance mode and determines the next format (<code>f01nxt</code>).</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code>):</p> </li> <li>Purpose: Decides whether to continue or exit the panel loop.</li> <li> <p>Actions:</p> <ul> <li>If no input change occurred (<code>*in19 = *off</code>), sets <code>fmtagn</code> to off to exit the loop.</li> <li>Note: The subroutine is prepared to handle a second format (<code>FMT02</code>), but it is commented out, so the program only uses <code>FMT01</code>.</li> </ul> </li> <li> <p>Edit Format Input (<code>f01edt</code>):</p> </li> <li>Purpose: Validates user input fields in maintenance mode.</li> <li> <p>Actions:</p> <ul> <li>Validates form type code (<code>fmfmty</code>) by chaining to <code>gstabl</code> using <code>klfrmtyp</code>; if valid and not deleted, sets <code>f$fmty</code> to the description; else, adds error message <code>ERR0010</code> and sets <code>*in50</code>, <code>*in51</code>.</li> <li>Checks if contact name (<code>fmcntc</code>) is non-blank; if blank, adds error message <code>ERR0012</code> and sets <code>*in50</code>, <code>*in52</code>.</li> <li>Validates send original flag (<code>fmfmyn</code>), reprint flag (<code>fmrpyn</code>), mail flag (<code>fmmlyn</code>), and back terms flag (<code>fmbkyn</code>); each must be 'Y' or 'N', else adds error message <code>ERR0014</code> and sets <code>*in50</code>, <code>*in55</code>-<code>*in58</code> as appropriate.</li> <li>Validates email address (<code>fmemla</code>):</li> <li>As of the 08/30/22 revision (JK01), fax number validation is removed.</li> <li>If <code>fmemla</code> is non-blank, calls <code>VALMAILID</code> to validate the email; if invalid (<code>p$valid = 'N'</code>), adds error message <code>ERR0000</code> with <code>com(02)</code> (\"Invalid Email Address Entered\") and sets <code>*in50</code>, <code>*in53</code>.</li> <li>Allows blank email if <code>fmfmyn = 'N'</code> (no original sent).</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), clears error indicators and messages.</li> </ul> </li> <li> <p>Initialize Format Field Values (<code>f01mov</code>):</p> </li> <li>Purpose: Initializes the <code>fmt01</code> format fields and clears any prior errors.</li> <li> <p>Actions:</p> <ul> <li>Calls <code>f01edt</code> to validate fields.</li> <li>If errors exist (<code>*in50</code>), clears error indicators and messages (<code>clrmsg</code>).</li> </ul> </li> <li> <p>Format Protection Schemes (<code>f01pro</code>):</p> </li> <li>Purpose: Sets field protection indicators based on the mode.</li> <li> <p>Actions:</p> <ul> <li>Clears protection indicators (<code>*in70</code>-<code>*in74</code>).</li> <li>In inquiry mode (<code>p$mode != 'MNT'</code>), sets <code>*in70</code>-<code>*in73</code> to protect fields.</li> <li>Note: Protection for existing records (<code>w$exists</code>) is commented out, so key fields are not protected based on record existence.</li> </ul> </li> <li> <p>Update Database Files (<code>upddbf</code>):</p> <ul> <li>Purpose: Updates or creates a record in <code>arcufm</code> in maintenance mode.</li> <li>Actions:</li> <li>If <code>f$seq#</code> is zero, retrieves the next sequence number (<code>rtvnxtseq</code>).</li> <li>Saves the current <code>arcufm</code> record fields to <code>svds</code>.</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>:<ul> <li>If found (<code>*in80 = *off</code>), updates the record if changes exist (<code>svds != wkds01</code>) and sets <code>p$flag = '1'</code>.</li> <li>If not found, creates a new record with <code>f$cono</code> and <code>f$seq#</code>, writes to <code>arcufm</code>, and sets <code>p$flag = '1'</code>.</li> </ul> </li> <li>Sets <code>w$exists</code> to indicate the record now exists.</li> </ul> </li> <li> <p>Retrieve Next Sequence Number (<code>rtvnxtseq</code>):</p> <ul> <li>Purpose: Generates the next sequence number for a new <code>arcufm</code> record.</li> <li>Actions:</li> <li>Chains to <code>bicont</code> to get the current sequence number (<code>bcseqn</code>).</li> <li>Increments <code>f$seq#</code> until a unique value is found by checking <code>arcufm</code> with <code>klcufm</code>.</li> <li>Increments <code>bcseqn</code> in <code>bicont</code> and updates the record.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code>):</p> <ul> <li>Purpose: Provides lookup functionality for the form type field.</li> <li>Actions:</li> <li>If the cursor is on <code>FMFMTY</code> and input is not protected (<code>*in70</code>), calls <code>LGSTABL</code> to prompt for a form type code.</li> <li>Updates <code>fmfmty</code> with the selected value if non-blank.</li> <li>Sets <code>*in19</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> <ul> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li>Actions:</li> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code> and restores the current record format and page number.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Purpose: Closes files and exits.</li> <li>Actions:</li> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program (<code>AR915P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during input validation and processing: 1. Form Type Code (<code>fmfmty</code>):    - Must exist in the <code>gstabl</code> file with type <code>FRMTYP</code> and not be marked deleted (<code>tbdel != 'D'</code>).    - If invalid, displays error <code>ERR0010</code> and sets error indicators.</p> <ol> <li>Contact Name (<code>fmcntc</code>):</li> <li>Must be non-blank.</li> <li> <p>If blank, displays error <code>ERR0012</code> and sets error indicators.</p> </li> <li> <p>Email Address (<code>fmemla</code>):</p> </li> <li>As of the 08/30/22 revision, fax number validation is removed, and email is the primary contact method.</li> <li>If non-blank, must be valid as determined by the <code>VALMAILID</code> program (<code>p$valid = 'Y'</code>).</li> <li>If invalid, displays error <code>ERR0000</code> with message \"Invalid Email Address Entered\".</li> <li> <p>Can be blank if <code>fmfmyn = 'N'</code> (no original sent); otherwise, a non-blank email is required if <code>fmfmyn</code> is 'Y' or blank.</p> </li> <li> <p>Flags (<code>fmfmyn</code>, <code>fmrpyn</code>, <code>fmmlyn</code>, <code>fmbkyn</code>):</p> </li> <li>Each flag (send original, reprint, mail, back terms) must be 'Y' or 'N'.</li> <li> <p>If invalid, displays error <code>ERR0014</code> and sets corresponding error indicators (<code>*in55</code>-<code>*in58</code>).</p> </li> <li> <p>Mode-Based Behavior:</p> </li> <li>In maintenance mode (<code>p$mode = 'MNT'</code>), fields are editable, and updates are written to <code>arcufm</code>.</li> <li>In inquiry mode (<code>p$mode = 'INQ'</code>), fields are protected (<code>*in70</code>-<code>*in73</code>), errors are cleared, and no database updates occur.</li> <li> <p>The display header changes based on the mode: \"Customer Form Type Contacts Maintenance\" for <code>MNT</code>, \"Customer Form Type Contacts Inquiry\" for <code>INQ</code>.</p> </li> <li> <p>Sequence Number Generation:</p> </li> <li>For new records (<code>f$seq# = 0</code>), the next sequence number is retrieved from <code>bicont</code> (<code>bcseqn</code>) and incremented until a unique value is found in <code>arcufm</code>.</li> <li> <p>The <code>bicont</code> record is updated with the new sequence number.</p> </li> <li> <p>Database Updates:</p> </li> <li>In maintenance mode, updates or creates records in <code>arcufm</code> only if input validation passes.</li> <li> <p>Sets <code>p$flag = '1'</code> to indicate a successful update or creation.</p> </li> <li> <p>Field Prompting:</p> </li> <li>The form type code (<code>fmfmty</code>) can be prompted via F04, calling <code>LGSTABL</code> to select a valid value.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code>: 1. arcust:    - Purpose: Customer master file for validating customer codes.    - Usage: Chained to using <code>klcust</code> (company, customer) to retrieve <code>arname</code> (customer name).    - Access: Input only, keyed (<code>k disk</code>).    - Override: <code>garcust</code> (for 'G' file group) or <code>zarcust</code> (for 'Z' file group).</p> <ol> <li>gstabl:</li> <li>Purpose: General table file for validating form type codes.</li> <li>Usage: Chained to using <code>klfrmtyp</code> (type <code>FRMTYP</code>, code <code>fmfmty</code>) to retrieve <code>tbdesc</code> (description).</li> <li>Access: Input only, keyed (<code>k disk</code>).</li> <li> <p>Override: <code>ggstabl</code> (for 'G') or <code>zgstabl</code> (for 'Z').</p> </li> <li> <p>arcufm:</p> </li> <li>Purpose: Primary file for customer form type contact records.</li> <li>Usage: Chained to for retrieving records (<code>klcufm</code>), updated, or written to in maintenance mode.</li> <li>Access: Update and add, keyed (<code>uf a e k disk</code>).</li> <li> <p>Override: <code>garcufm</code> (for 'G') or <code>zarcufm</code> (for 'Z').</p> </li> <li> <p>bicont:</p> </li> <li>Purpose: Company master file for validating company codes and managing sequence numbers.</li> <li>Usage: Chained to for validating <code>f$cono</code> and retrieving <code>bcname</code>; updated to increment <code>bcseqn</code> for new records.</li> <li>Access: Update, keyed (<code>uf e k disk</code>).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>ar915d:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains the <code>fmt01</code> format and message subfile control (<code>msgctl</code>) for interactive display and input.</li> <li>Access: Work station file (<code>cf e workstn</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. LGSTABL:    - Called in subroutine <code>prompt</code>.    - Parameters: <code>k$ft</code> (table type, set to <code>FRMTYP</code>), <code>k$fmty</code> (form type code), <code>o$fgrp</code> (file group).    - Purpose: Provides a lookup window for selecting a valid form type code.</p> <ol> <li>VALMAILID:</li> <li>Called in subroutine <code>f01edt</code> (added in 08/30/22 revision).</li> <li>Parameters: <code>p$email</code> (email address, 100 characters), <code>p$valid</code> (validity flag, 'Y' or 'N').</li> <li> <p>Purpose: Validates the email address entered in <code>fmemla</code>.</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in subroutine <code>opntbl</code>.</li> <li>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).</li> <li> <p>Purpose: Executes file override commands for <code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, and <code>bicont</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR915</code> program, called by <code>AR915P</code>, provides a detailed interface for maintaining or inquiring about customer form type contact records. It supports creating new records, updating existing ones, and displaying details in a single-panel format (<code>fmt01</code>). The program enforces strict validation rules for form type, contact name, email, and flags, with email validation introduced in the 08/30/22 revision. It uses four database files (<code>arcust</code>, <code>gstabl</code>, <code>arcufm</code>, <code>bicont</code>) with dynamic overrides and interacts with external programs for field prompting and email validation. The program ensures data integrity through comprehensive input validation and provides user feedback via a message subfile.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/","title":"AR9154 RPGLE","text":"<p>The RPGLE program <code>AR9154</code> is a specialized program within the Customer Master Information system, designed to handle the deletion or restoration of customer form type contact records. It is called from the main program <code>AR915P</code> to process the delete (option 4) functionality for a specific contact record. The program presents a confirmation window (<code>delwdw</code>) to the user, allowing them to either restore a previously deleted record (F22) or mark an active record as deleted (F23). Below is a detailed explanation of the process steps, business rules, database tables used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#process-steps-of-the-ar9154-program","title":"Process Steps of the AR9154 Program","text":"<p>The <code>AR9154</code> program follows a structured flow to manage the deletion or restoration of a customer form type contact record through a display file window. The process steps are organized by the main subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Initializes variables, defines key lists, and processes input parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>p$cono</code> (company), <code>p$seq#</code> (sequence number), <code>p$fgrp</code> (file group: 'Z' or 'G'), and <code>p$flag</code> (return flag).</li> <li>Moves input parameters to display file fields (<code>f$cono</code>, <code>f$seq#</code>).</li> <li>Initializes message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>) and date validation parameters (<code>pld010</code>).</li> <li>Defines key lists (<code>klcufm</code> for <code>arcufm</code>, <code>klcust</code> for <code>arcust</code>) for database operations.</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcust</code>, <code>bicont</code>, and <code>arcufm</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Retrieve Data (<code>rtvdta</code>):</p> </li> <li>Purpose: Retrieves data for the provided company and sequence number to populate the display file fields.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>arcufm</code> using <code>klcufm</code> (company, sequence number) to retrieve the contact record.</li> <li>If the record exists (<code>*in99 = *off</code>):</li> <li>Checks the deletion status (<code>fmdel</code>):<ul> <li>If deleted (<code>fmdel = 'D'</code>), sets the header to \"Customer Form Type Contacts Restore\" (<code>hdr(01)</code>), function key label to \"F22=Restore\" (<code>fky(01)</code>), and enables F22 (<code>*in72</code>).</li> <li>If not deleted, sets the header to \"Customer Form Type Contacts Delete\" (<code>hdr(02)</code>), function key label to \"F23=Delete\" (<code>fky(02)</code>), and enables F23 (<code>*in73</code>).</li> </ul> </li> <li>Chains to <code>bicont</code> to retrieve the company name (<code>bcname</code>) into <code>f$conm</code>; clears if not found.</li> <li>Chains to <code>arcust</code> to retrieve the customer name (<code>arname</code>) into <code>f$csnm</code>; clears if not found.</li> <li>Moves the contact name (<code>fmcntc</code>) to the display field <code>s1cntc</code>.</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code>):</p> </li> <li>Purpose: Manages the main loop for displaying and processing the deletion/restoration confirmation window (<code>delwdw</code>).</li> <li> <p>Actions:</p> <ul> <li>Enters a loop (<code>winagn</code>) that:</li> <li>Displays the message subfile if needed (<code>wrtmsg</code>) or clears it (<code>msgclr</code>).</li> <li>Displays the <code>delwdw</code> format using <code>exfmt</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) if displayed.</li> <li>Clears error indicators (<code>*in50</code>-<code>*in69</code>).</li> <li>Processes user input:<ul> <li>F12: Exits the window by setting <code>winagn</code> to off.</li> <li>F22 or F23: Validates input (<code>winedt</code>), and if no errors (<code>*in50 = *off</code>), updates the database (<code>winupd</code>) and exits the loop.</li> <li>Other (e.g., ENTER): Validates input (<code>winedt</code>) and redisplays the window.</li> </ul> </li> <li>Continues until <code>winagn</code> is turned off.</li> </ul> </li> <li> <p>Edit Window Input (<code>winedt</code>):</p> </li> <li>Purpose: Validates user input, specifically checking for activity before deletion.</li> <li> <p>Actions:</p> <ul> <li>If F23 (delete) is pressed, calls <code>chkact</code> to check for activity (e.g., open orders).</li> <li>Note: The <code>chkact</code> subroutine has commented-out logic for checking open orders, so no validation currently occurs.</li> </ul> </li> <li> <p>Check Activity Prior to Deleting (<code>chkact</code>):</p> </li> <li>Purpose: Intended to verify if the record can be deleted (e.g., no open orders).</li> <li> <p>Actions:</p> <ul> <li>Currently, the logic is commented out, so no checks are performed, and deletion proceeds without validation.</li> <li>Commented logic would check <code>arcust</code> for open orders and display an error (<code>ERR0000</code> with <code>com(01)</code>: \"This Company Has Assigned Customers, Cannot Delete\") if found.</li> </ul> </li> <li> <p>Update Database from Window Input (<code>winupd</code>):</p> </li> <li>Purpose: Updates the <code>arcufm</code> record to mark it as deleted or restored.</li> <li> <p>Actions:</p> <ul> <li>For F22 (Restore):</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>.</li> <li>If the record exists and is deleted (<code>fmdel = 'D'</code>), sets <code>fmdel</code> to 'A' (active), updates the record, and sets <code>p$flag = 'A'</code>.</li> <li>For F23 (Delete):</li> <li>Chains to <code>arcufm</code> using <code>klcufm</code>.</li> <li>If the record exists and is not deleted (<code>fmdel != 'D'</code>), sets <code>fmdel</code> to 'D', updates the record, and sets <code>p$flag = 'D'</code>.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> </li> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li> <p>Actions:</p> <ul> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Purpose: Closes files and exits.</li> <li>Actions:<ul> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program (<code>AR915P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Deletion:    - A record can be marked as deleted (<code>fmdel = 'D'</code>) using F23 if it is currently active (<code>fmdel != 'D'</code>).    - The <code>p$flag</code> is set to 'D' to indicate successful deletion.    - Note: The check for open orders or other activity that might prevent deletion is commented out, so deletion is unrestricted.</p> <ol> <li>Record Restoration:</li> <li>A deleted record (<code>fmdel = 'D'</code>) can be restored to active status (<code>fmdel = 'A'</code>) using F22.</li> <li> <p>The <code>p$flag</code> is set to 'A' to indicate successful restoration.</p> </li> <li> <p>Display Logic:</p> </li> <li>If the record is deleted, the window displays \"Customer Form Type Contacts Restore\" with F22 enabled.</li> <li>If the record is active, the window displays \"Customer Form Type Contacts Delete\" with F23 enabled.</li> <li> <p>Company and customer names are retrieved for display, but the operation proceeds even if they are not found.</p> </li> <li> <p>Input Validation:</p> </li> <li>No additional input validation is performed beyond checking the record's deletion status, as <code>chkact</code> logic is disabled.</li> <li> <p>The program assumes the provided company and sequence number are valid, relying on <code>AR915P</code> for prior validation.</p> </li> <li> <p>Return Flag:</p> </li> <li>The <code>p$flag</code> is set to 'D' for deletion or 'A' for restoration, which <code>AR915P</code> uses to display confirmation messages (<code>com(05)</code> for deletion, <code>com(06)</code> for reactivation).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code>: 1. arcust:    - Purpose: Customer master file for retrieving customer names.    - Usage: Chained to using <code>klcust</code> (company, customer) to retrieve <code>arname</code> (customer name) for display.    - Access: Input only, keyed (<code>if e k disk</code>).    - Override: <code>garcust</code> (for 'G' file group) or <code>zarcust</code> (for 'Z' file group).</p> <ol> <li>bicont:</li> <li>Purpose: Company master file for retrieving company names.</li> <li>Usage: Chained to using <code>f$cono</code> to retrieve <code>bcname</code> (company name) for display.</li> <li>Access: Input only, keyed (<code>if e k disk</code>).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>arcufm:</p> </li> <li>Purpose: Primary file for customer form type contact records.</li> <li>Usage: Chained to using <code>klcufm</code> (company, sequence number) to retrieve and update the record\u2019s deletion status (<code>fmdel</code>).</li> <li>Access: Update, keyed (<code>uf e k disk</code>).</li> <li> <p>Override: <code>garcufm</code> (for 'G') or <code>zarcufm</code> (for 'Z').</p> </li> <li> <p>ar9154d:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains the <code>delwdw</code> format and message subfile control (<code>msgctl</code>) for displaying the confirmation window.</li> <li>Access: Work station file (<code>cf e workstn</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. QCMDEXC:    - Called in subroutine <code>opntbl</code>.    - Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).    - Purpose: Executes file override commands for <code>arcust</code>, <code>bicont</code>, and <code>arcufm</code>.</p> <ol> <li>QMHSNDPM:</li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR9154%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR9154</code> program, called by <code>AR915P</code>, provides a simple confirmation window for deleting or restoring customer form type contact records. It updates the <code>arcufm</code> file by setting the <code>fmdel</code> field to 'D' (deleted) or 'A' (active) based on user input (F23 or F22). The program retrieves company and customer names for display but does not currently enforce activity checks (e.g., open orders) due to commented-out logic. It uses three database files (<code>arcust</code>, <code>bicont</code>, <code>arcufm</code>) with dynamic overrides and relies on system programs for message handling and file overrides. The program ensures a straightforward user interaction with clear feedback via the <code>p$flag</code> return value.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/","title":"AR915P RPGLE","text":"<p>The RPGLE program <code>AR915P</code> is designed to manage customer form type contacts within a Customer Master Information system. It provides an interactive interface to display, create, update, and delete contact records in a subfile (SFL). Below is a detailed explanation of the process steps, external programs called, and database tables used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#process-steps-of-the-ar915p-program","title":"Process Steps of the AR915P Program","text":"<p>The program follows a structured flow to handle customer form type contacts using a subfile interface. Here are the key process steps, organized by the main subroutines and their purposes:</p> <ol> <li>Program Initialization (<code>*inzsr</code>):</li> <li>Purpose: Sets up initial variables, defines key lists, and processes entry parameters.</li> <li> <p>Actions:</p> <ul> <li>Defines the parameter list for receiving input parameters: <code>a$cono</code> (company), <code>a$cust</code> (customer), <code>p$mode</code> (run mode: maintenance or inquiry), and <code>p$fgrp</code> (file group: 'Z' or 'G').</li> <li>Initializes subfile control fields (e.g., <code>rrn1</code> for relative record number, <code>pagsz1</code> for page size set to 28).</li> <li>Sets up message handling fields and key lists (<code>klsfl1</code>, <code>kls1s1</code>, <code>kls1r1</code>, <code>klcust</code>) for database operations.</li> <li>Captures the current date and time into <code>t#time</code> and converts it to a <code>CYMD</code> format for use in the program.</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code>):</p> </li> <li>Purpose: Opens the required database files with appropriate overrides based on the file group (<code>p$fgrp</code>).</li> <li> <p>Actions:</p> <ul> <li>Checks if <code>p$fgrp</code> is 'G' or 'Z' to apply the correct file overrides (<code>ovg</code> or <code>ovz</code>) using the <code>QCMDEXC</code> command.</li> <li>Opens files <code>arcufm</code>, <code>arcufmx</code>, <code>arcust</code>, and <code>bicont</code> with user-controlled open (<code>usropn</code>).</li> </ul> </li> <li> <p>Error Handling (<code>*pssr</code>):</p> </li> <li>Purpose: Handles errors, particularly related to parameter passing.</li> <li> <p>Actions:</p> <ul> <li>Checks for error code 221 (invalid number of parameters) and sets a return code if detected.</li> <li>Returns control to the calling program if an error occurs.</li> </ul> </li> <li> <p>Process Parameters (<code>@parms</code>):</p> </li> <li>Purpose: Validates and processes input parameters passed to the program.</li> <li> <p>Actions:</p> <ul> <li>If parameters are provided (<code>ps#prm &gt;= 1</code>), moves <code>a$cono</code> to <code>c1cono</code> (company) and <code>a$cust</code> to <code>c1cust</code> (customer) if they are non-blank and non-zero.</li> <li>Sets indicator <code>*in71</code> to indicate valid parameters were passed.</li> <li>Includes commented-out test values for <code>c1cono</code> and <code>c1cust</code> (not used in production).</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code>):</p> </li> <li>Purpose: Manages the main logic for displaying and interacting with the subfile.</li> <li> <p>Actions:</p> <ul> <li>Calls <code>*pssr</code> for error handling.</li> <li>Processes parameters via <code>@parms</code>.</li> <li>Clears the message subfile (<code>clrmsg</code>) and writes it (<code>wrtmsg</code>).</li> <li>Initializes subfile mode (<code>sfmod1</code>) to folded (<code>'1'</code>) and sets <code>*in45</code> for folded display.</li> <li>Sets global protection mode (<code>*in70</code>) based on <code>p$mode</code> ('MNT' for maintenance, else inquiry).</li> <li>Repositions the subfile (<code>sf1rep</code>) to the first record.</li> <li>Enters a main loop (<code>sf1agn</code>) that:</li> <li>Handles repositioning if requested (<code>repsfl</code>).</li> <li>Displays the command line and message subfile.</li> <li>Checks for existing subfile records to enable/disable display (<code>*in41</code>).</li> <li>Sets folded/unfolded mode (<code>*in45</code>) based on <code>sfmod1</code>.</li> <li>Displays the subfile control (<code>sflctl1</code>) using <code>exfmt</code>.</li> <li>Processes user input based on function keys:<ul> <li>F03: Exits the program.</li> <li>F04: Calls the <code>prompt</code> subroutine for field prompting.</li> <li>F05: Refreshes the subfile by clearing <code>r$fmty</code> and triggering repositioning.</li> <li>F08: Toggles include/exclude deleted records (<code>w$del</code>) and updates the display label (<code>s1f08d</code>).</li> <li>PAGEDN: Loads additional subfile records (<code>sf1lod</code>).</li> <li>ENTER: Processes subfile changes (<code>sf1prc</code>).</li> <li>F06: Creates a new contact record (<code>sf1f06</code>).</li> <li>F10: Positions the cursor to the control record.</li> </ul> </li> <li>Repositions the subfile if user input changes (<code>c1cono</code>, <code>c1cust</code>, <code>c1fmty</code> differ from retained values).</li> <li>Clears format indicators and updates cursor location (<code>row1</code>, <code>col1</code>) and subfile record number (<code>rcdnb1</code>).</li> </ul> </li> <li> <p>Process Subfile on ENTER (<code>sf1prc</code>):</p> </li> <li>Purpose: Processes user selections in the subfile when the ENTER key is pressed.</li> <li> <p>Actions:</p> <ul> <li>Reads changed subfile records (<code>readc sfl1</code>) and processes each record via <code>sf1chg</code> if the subfile is not empty.</li> </ul> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code>):</p> </li> <li>Purpose: Handles user-selected options (2, 4, 5) for subfile records.</li> <li> <p>Actions:</p> <ul> <li>For option 2 (Change, maintenance mode, not deleted): Calls <code>sf1s02</code>.</li> <li>For option 4 (Delete, maintenance mode): Calls <code>sf1s04</code>.</li> <li>For option 5 (Display): Calls <code>sf1s05</code>.</li> <li>Updates the subfile record after processing by chaining to <code>arcufm</code>, formatting (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating the subfile (<code>sfl1</code>).</li> </ul> </li> <li> <p>Reposition Subfile (<code>sf1rep</code>):</p> </li> <li>Purpose: Clears and repositions the subfile based on user input.</li> <li> <p>Actions:</p> <ul> <li>Clears the subfile (<code>sf1clr</code>).</li> <li>Validates control input (<code>sf1cte</code>).</li> <li>If no errors, positions the file (<code>arcufmx</code>) using <code>kls1s1</code> and loads subfile records (<code>sf1lod</code>).</li> <li>Retains control fields (<code>c1cono</code>, <code>c1cust</code>, <code>c1fmty</code>) for future repositioning.</li> </ul> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code>):</p> </li> <li>Purpose: Validates company (<code>c1cono</code>) and customer (<code>c1cust</code>) input.</li> <li> <p>Actions:</p> <ul> <li>Chains to <code>bicont</code> to validate company code; if valid and not deleted, sets <code>c1conm</code> (company name); else, adds an error message.</li> <li>Chains to <code>arcust</code> to validate customer code; if valid and not deleted, sets <code>c1csnm</code> (customer name); else, adds an error message.</li> <li>Sets error indicators (<code>*in50</code>, <code>*in51</code>, <code>*in52</code>) if validation fails.</li> </ul> </li> <li> <p>Load Subfile Records (<code>sf1lod</code>):</p> <ul> <li>Purpose: Loads records into the subfile up to the page size (<code>pagsz1</code>).</li> <li>Actions:</li> <li>Sets the relative record number (<code>rrn1</code>) to the last saved value (<code>rrnsv1</code>).</li> <li>Reads records from <code>arcufmx</code> using <code>kls1r1</code> (company/customer key).</li> <li>Skips deleted records if <code>w$del</code> is off.</li> <li>Formats each record (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes to the subfile (<code>sfl1</code>).</li> <li>Updates <code>rrn1</code> and saves it to <code>rrnsv1</code>.</li> </ul> </li> <li> <p>Format Subfile Detail Line (<code>sf1fmt</code>):</p> <ul> <li>Purpose: Populates subfile fields for display.</li> <li>Actions:</li> <li>Clears the subfile record.</li> <li>Moves fields from <code>arcufmx</code> (<code>fmseq#</code>, <code>fmfmty</code>, <code>fmcntc</code>, etc.) to subfile fields (<code>s1seq#</code>, <code>s1fmty</code>, etc.).</li> <li>Sets <code>s1emfx</code> and <code>s1note</code> based on whether email (<code>fmemla</code>) or fax (<code>fmfax#</code>) is present.</li> <li>Sets <code>s1del</code> if the record is marked deleted.</li> </ul> </li> <li> <p>Subfile Color Coding (<code>sf1col</code>):</p> <ul> <li>Purpose: Applies color to subfile records based on their status.</li> <li>Actions:</li> <li>Sets <code>*in76</code> (blue color) if the record is marked deleted (<code>s1del = 'D'</code>).</li> </ul> </li> <li> <p>Clear Subfile (<code>sf1clr</code>):</p> <ul> <li>Purpose: Clears the subfile and resets control indicators.</li> <li>Actions:</li> <li>Resets <code>rrn1</code> and <code>rrnsv1</code> to zero.</li> <li>Sets <code>*in42</code> (SFLCLR) on, writes <code>sflctl1</code>, and turns <code>*in42</code> off.</li> <li>Disables subfile display (<code>*in41</code>) and control (<code>*in40</code>).</li> </ul> </li> <li> <p>Create Contact (<code>sf1f06</code>):</p> <ul> <li>Purpose: Initiates creation of a new contact record.</li> <li>Actions:</li> <li>Calls program <code>AR915</code> with parameters for company, sequence number (zero), customer, mode ('MNT'), file group, and return flag.</li> <li>If the return flag is '1', adds a confirmation message and triggers subfile repositioning.</li> </ul> </li> <li> <p>Change Contact (<code>sf1s02</code>):</p> <ul> <li>Purpose: Updates an existing contact record.</li> <li>Actions:</li> <li>Validates that the record is not deleted; if deleted, adds an error message.</li> <li>If valid, calls <code>AR915</code> with parameters for company, sequence number, customer, mode ('MNT'), file group, and return flag.</li> <li>If the return flag is '1', adds a confirmation message.</li> </ul> </li> <li> <p>Delete Contact (<code>sf1s04</code>):</p> <ul> <li>Purpose: Marks a contact record as deleted or reactivated.</li> <li>Actions:</li> <li>Calls <code>AR9154</code> with parameters for company, sequence number, file group, and return flag.</li> <li>Based on the return flag ('D' for deleted, 'A' for reactivated), adds the appropriate confirmation message.</li> </ul> </li> <li> <p>Display Customer Order (<code>sf1s05</code>):</p> <ul> <li>Purpose: Displays contact details in inquiry mode.</li> <li>Actions:</li> <li>Calls <code>AR915</code> with parameters for company, sequence number, customer, mode ('INQ'), file group, and return flag.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code>):</p> <ul> <li>Purpose: Provides lookup functionality for company and customer fields.</li> <li>Actions:</li> <li>If the cursor is on <code>C1CONO</code> and input is not protected (<code>*in71</code>), calls <code>LBICONT</code> to prompt for a company code.</li> <li>If the cursor is on <code>C1CUST</code> and input is not protected, calls <code>LARCUST</code> to prompt for a customer code.</li> <li>Sets <code>*in19</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code>):</p> <ul> <li>Purpose: Manages error and confirmation messages displayed in the message subfile.</li> <li>Actions:</li> <li><code>addmsg</code>: Sends messages to the program message queue using <code>QMHSNDPM</code> with message ID, file, data, and type.</li> <li><code>wrtmsg</code>: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> on.</li> <li><code>clrmsg</code>: Clears the message subfile using <code>QMHRMVPM</code> and restores the current record format and page number.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Purpose: Closes files and exits.</li> <li>Actions:</li> <li>Closes all open files (<code>close *all</code>).</li> <li>Sets <code>*inlr</code> to <code>*on</code> and returns control to the calling program.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program interacts with the following external programs: 1. AR915:    - Called in subroutines <code>sf1f06</code> (create), <code>sf1s02</code> (change), and <code>sf1s05</code> (display).    - Parameters: <code>o$cono</code> (company), <code>o$seq#</code> (sequence number), <code>o$cust</code> (customer), <code>o$mode</code> ('MNT' or 'INQ'), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).    - Purpose: Manages creation, updating, or displaying of contact records.</p> <ol> <li>AR9154:</li> <li>Called in subroutine <code>sf1s04</code> (delete).</li> <li>Parameters: <code>o$cono</code> (company), <code>o$seq#</code> (sequence number), <code>o$fgrp</code> (file group), <code>o$flag</code> (return flag).</li> <li> <p>Purpose: Handles deletion or reactivation of contact records.</p> </li> <li> <p>LBICONT:</p> </li> <li>Called in subroutine <code>prompt</code> for company code lookup.</li> <li>Parameters: <code>o$cono</code> (company), <code>o$fgrp</code> (file group).</li> <li> <p>Purpose: Provides a lookup window for valid company codes.</p> </li> <li> <p>LARCUST:</p> </li> <li>Called in subroutine <code>prompt</code> for customer code lookup.</li> <li>Parameters: <code>o$cono</code> (company), <code>o$cust</code> (customer), <code>o$fgrp</code> (file group).</li> <li> <p>Purpose: Provides a lookup window for valid customer codes.</p> </li> <li> <p>QCMDEXC:</p> </li> <li>Called in subroutine <code>opntbl</code>.</li> <li>Parameters: <code>dbov##</code> (override command), <code>dbol##</code> (command length).</li> <li> <p>Purpose: Executes file override commands for <code>arcufm</code>, <code>arcufmx</code>, <code>arcust</code>, and <code>bicont</code>.</p> </li> <li> <p>QMHSNDPM:</p> </li> <li>Called in subroutine <code>addmsg</code>.</li> <li>Parameters: <code>m@id</code> (message ID), <code>m@msgf</code> (message file), <code>m@data</code> (message data), <code>m@l</code> (message length), <code>m@type</code> (message type), <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@key</code> (message key), <code>m@errc</code> (error code).</li> <li> <p>Purpose: Sends messages to the program message queue.</p> </li> <li> <p>QMHRMVPM:</p> </li> <li>Called in subroutine <code>clrmsg</code>.</li> <li>Parameters: <code>m@pgmq</code> (program message queue), <code>m@scnt</code> (stack counter), <code>m@rmvk</code> (message key), <code>m@rmv</code> (remove option), <code>m@errc</code> (error code).</li> <li>Purpose: Removes messages from the program message queue.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program uses the following database files, all opened with <code>usropn</code> and keyed access (<code>k disk</code>): 1. arcufm:    - Purpose: Primary file for customer form type contact records.    - Usage: Read and chained to for subfile data and updates.    - Override: <code>garcufm</code> (for 'G' file group) or <code>zarcufm</code> (for 'Z' file group).</p> <ol> <li>arcufmx:</li> <li>Purpose: Same as <code>arcufm</code> but with a renamed record format (<code>arcufmhx</code>).</li> <li>Usage: Used for reading records to populate the subfile.</li> <li> <p>Override: <code>garcufmx</code> (for 'G') or <code>zarcufmx</code> (for 'Z').</p> </li> <li> <p>arcust:</p> </li> <li>Purpose: Customer master file for validating customer codes.</li> <li>Usage: Chained to for validating <code>c1cust</code> and retrieving <code>arname</code> (customer name).</li> <li> <p>Override: <code>garcust</code> (for 'G') or <code>zarcust</code> (for 'Z').</p> </li> <li> <p>bicont:</p> </li> <li>Purpose: Company master file for validating company codes.</li> <li>Usage: Chained to for validating <code>c1cono</code> and retrieving <code>bcname</code> (company name).</li> <li> <p>Override: <code>gbicont</code> (for 'G') or <code>zbicont</code> (for 'Z').</p> </li> <li> <p>ar915pd:</p> </li> <li>Purpose: Display file for the user interface.</li> <li>Usage: Contains subfile <code>sfl1</code> and control format <code>sflctl1</code> for interactive display and input.</li> <li>Handler: Uses <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/AR915P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR915P</code> program is a robust RPGLE application for managing customer form type contacts. It uses a subfile to display records, supports create, update, delete, and display operations, and includes field prompting and error handling. The program interacts with external programs for specific actions and uses multiple database files with dynamic overrides based on the file group. The process is highly interactive, driven by function keys and user input, with comprehensive message handling for user feedback.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/","title":"Summary AR915P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#list-of-use-cases-implemented-by-the-ar915p-call-stack","title":"List of Use Cases Implemented by the AR915P Call Stack","text":"<p>The <code>AR915P</code> program, along with its called programs <code>AR915</code> and <code>AR9154</code>, implements the following use case within the Customer Master Information system:</p> <ol> <li>Manage Customer Form Type Contacts:</li> <li>Description: This use case allows users to view, create, update, delete, or restore customer form type contact records. It provides an interactive interface to manage contact details (e.g., form type, contact name, email, flags) for a specific company and customer, supporting both maintenance (<code>MNT</code>) and inquiry (<code>INQ</code>) modes.</li> <li>Components:<ul> <li><code>AR915P</code>: Displays a subfile listing contact records, allowing users to select records for viewing, updating, deleting, or creating new ones.</li> <li><code>AR915</code>: Handles the creation or update of a single contact record, with validation of form type, contact name, email, and flags.</li> <li><code>AR9154</code>: Manages the deletion or restoration of a contact record via a confirmation window.</li> </ul> </li> </ol> <p>This is the primary use case, as the programs are tightly integrated to manage customer form type contacts comprehensively.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#function-requirement-document-manage-customer-form-type-contacts","title":"Function Requirement Document: Manage Customer Form Type Contacts","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#function-requirement-document-manage-customer-form-type-contacts_1","title":"Function Requirement Document: Manage Customer Form Type Contacts","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#purpose","title":"Purpose","text":"<p>The <code>Manage Customer Form Type Contacts</code> function allows the system to retrieve, create, update, delete, or restore customer form type contact records for a specified company and customer without interactive screen input. It processes input parameters to perform the requested operation and returns a status flag to indicate success or failure.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>cono</code>): 2-character code identifying the company (required).</li> <li>Customer Code (<code>cust</code>): Customer identifier (required).</li> <li>Sequence Number (<code>seq#</code>): Numeric identifier for the contact record; 0 for new records (required).</li> <li>Mode (<code>mode</code>): Operation mode, either <code>MNT</code> (maintenance) or <code>INQ</code> (inquiry) (required).</li> <li>File Group (<code>fgrp</code>): File group identifier, <code>Z</code> or <code>G</code>, for database overrides (required).</li> <li>Operation (<code>oper</code>): Action to perform: <code>CREATE</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>RESTORE</code>, or <code>VIEW</code> (required).</li> <li>Form Type Code (<code>fmty</code>): Code for the form type (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Contact Name (<code>cntc</code>): Name of the contact person (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Email Address (<code>emla</code>): Email address for the contact (optional for <code>CREATE</code>, <code>UPDATE</code> if <code>fmyn = 'N'</code>).</li> <li>Send Original Flag (<code>fmyn</code>): <code>Y</code> or <code>N</code>, indicates if the original form is sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send Reprint Flag (<code>rpyn</code>): <code>Y</code> or <code>N</code>, indicates if reprints are sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send by Mail Flag (<code>mlyn</code>): <code>Y</code> or <code>N</code>, indicates if sent by mail (required for <code>CREATE</code>, <code>UPDATE</code>).</li> <li>Send Back Terms Flag (<code>bkyn</code>): <code>Y</code> or <code>N</code>, indicates if back terms are sent (required for <code>CREATE</code>, <code>UPDATE</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Return Flag (<code>flag</code>): Status indicator:</li> <li><code>1</code>: Successful creation or update.</li> <li><code>D</code>: Successful deletion.</li> <li><code>A</code>: Successful restoration.</li> <li><code>E</code>: Error (e.g., validation failure or record not found).</li> <li>Error Message (<code>errmsg</code>): Description of any error encountered (e.g., \"Invalid form type code\").</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify <code>cono</code> exists in <code>bicont</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid company code\"</code>.</li> <li>Verify <code>cust</code> exists in <code>arcust</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid customer code\"</code>.</li> <li>For <code>CREATE</code>, <code>UPDATE</code>:<ul> <li>Verify <code>fmty</code> exists in <code>gstabl</code> with type <code>FRMTYP</code> and is not deleted; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid form type code\"</code>.</li> <li>Verify <code>cntc</code> is non-blank; else, return <code>flag = 'E'</code>, <code>errmsg = \"Contact name required\"</code>.</li> <li>If <code>emla</code> is non-blank, validate via <code>VALMAILID</code>; if invalid, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid email address\"</code>.</li> <li>If <code>fmyn = 'Y'</code> or blank, <code>emla</code> must be non-blank; else, return <code>flag = 'E'</code>, <code>errmsg = \"Email address required\"</code>.</li> <li>Verify <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code> are <code>Y</code> or <code>N</code>; else, return <code>flag = 'E'</code>, <code>errmsg = \"Invalid flag value\"</code>.</li> </ul> </li> <li> <p>For <code>UPDATE</code>, <code>DELETE</code>, <code>RESTORE</code>, <code>VIEW</code>, verify <code>seq#</code> exists in <code>arcufm</code> using <code>cono</code> and <code>seq#</code>; else, return <code>flag = 'E'</code>, <code>errmsg = \"Record not found\"</code>.</p> </li> <li> <p>Apply File Overrides:</p> </li> <li> <p>Use <code>fgrp</code> (<code>Z</code> or <code>G</code>) to override database files (<code>arcust</code>, <code>bicont</code>, <code>arcufm</code>, <code>gstabl</code>) to the appropriate library (e.g., <code>garcust</code> or <code>zarcust</code>).</p> </li> <li> <p>Process Operation:</p> </li> <li>VIEW:<ul> <li>Retrieve record from <code>arcufm</code> using <code>cono</code> and <code>seq#</code>.</li> <li>Return record fields (<code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, <code>del</code>) and <code>flag = '1'</code>.</li> </ul> </li> <li>CREATE:<ul> <li>If <code>seq# = 0</code>, retrieve next sequence number from <code>bicont.bcseqn</code>, increment until unique in <code>arcufm</code>, and update <code>bicont.bcseqn</code>.</li> <li>Create new <code>arcufm</code> record with <code>cono</code>, <code>seq#</code>, <code>cust</code>, <code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, and <code>del = 'A'</code>.</li> <li>Set <code>flag = '1'</code>.</li> </ul> </li> <li>UPDATE:<ul> <li>Update existing <code>arcufm</code> record with provided <code>fmty</code>, <code>cntc</code>, <code>emla</code>, <code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code>, retaining <code>del</code> status.</li> <li>Set <code>flag = '1'</code>.</li> </ul> </li> <li>DELETE:<ul> <li>If <code>del != 'D'</code>, update <code>arcufm</code> record to set <code>del = 'D'</code>.</li> <li>Set <code>flag = 'D'</code>.</li> </ul> </li> <li> <p>RESTORE:</p> <ul> <li>If <code>del = 'D'</code>, update <code>arcufm</code> record to set <code>del = 'A'</code>.</li> <li>Set <code>flag = 'A'</code>.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Return <code>flag</code> and <code>errmsg</code> (if applicable).</li> <li>For <code>VIEW</code>, include retrieved record fields.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Company and Customer Validation:</li> <li><code>cono</code> must exist in <code>bicont</code> and not be deleted.</li> <li> <p><code>cust</code> must exist in <code>arcust</code> and not be deleted.</p> </li> <li> <p>Form Type Validation:</p> </li> <li> <p><code>fmty</code> must exist in <code>gstabl</code> with type <code>FRMTYP</code> and not be deleted.</p> </li> <li> <p>Contact Name:</p> </li> <li> <p><code>cntc</code> must be non-blank for <code>CREATE</code> and <code>UPDATE</code>.</p> </li> <li> <p>Email Validation:</p> </li> <li>If <code>emla</code> is provided, it must be valid per <code>VALMAILID</code>.</li> <li> <p><code>emla</code> is optional if <code>fmyn = 'N'</code>; otherwise, it is required for <code>CREATE</code> and <code>UPDATE</code>.</p> </li> <li> <p>Flag Validation:</p> </li> <li> <p><code>fmyn</code>, <code>rpyn</code>, <code>mlyn</code>, <code>bkyn</code> must be <code>Y</code> or <code>N</code>.</p> </li> <li> <p>Sequence Number for CREATE:</p> </li> <li> <p>If <code>seq# = 0</code>, generate a unique sequence number by incrementing <code>bicont.bcseqn</code> until no conflict exists in <code>arcufm</code>.</p> </li> <li> <p>Deletion and Restoration:</p> </li> <li>Deletion sets <code>del = 'D'</code> only if the record is active (<code>del != 'D'</code>).</li> <li> <p>Restoration sets <code>del = 'A'</code> only if the record is deleted (<code>del = 'D'</code>).</p> </li> <li> <p>Inquiry Mode:</p> </li> <li>In <code>INQ</code> mode, only <code>VIEW</code> operation is allowed; no database updates occur.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Sequence Number Generation:</li> <li>Retrieve <code>bcseqn</code> from <code>bicont</code> for the given <code>cono</code>.</li> <li>Increment <code>bcseqn</code> and check <code>arcufm</code> for uniqueness using <code>cono</code> and <code>seq#</code>.</li> <li>Repeat until a unique <code>seq#</code> is found, then update <code>bicont.bcseqn</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#database-tables","title":"Database Tables","text":"<ul> <li>arcust: Validates customer code (<code>cust</code>) and retrieves customer name.</li> <li>bicont: Validates company code (<code>cono</code>), retrieves company name, and manages sequence numbers (<code>bcseqn</code>).</li> <li>arcufm: Stores contact records; used for retrieval, creation, update, deletion, or restoration.</li> <li>gstabl: Validates form type code (<code>fmty</code>) with type <code>FRMTYP</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR915P%20Customer%20Forms%20Add-Update/Summary%20AR915P%20RPGLE/#external-programs","title":"External Programs","text":"<ul> <li>VALMAILID: Validates email addresses for <code>CREATE</code> and <code>UPDATE</code> operations.</li> <li>QCMDEXC: Applies file overrides based on <code>fgrp</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/","title":"AR932 OCL","text":"<p>Let\u2019s break down the provided A/R Fuels Customer Maintenance program, which is written in Operation Control Language (OCL), commonly used on IBM midrange systems like the IBM System/36. OCL is a job control language used to define and execute programs, manage files, and control job flow. The program snippet provided appears to be part of a batch process for maintaining customer data in an Accounts Receivable (A/R) system for a fuels-related application.</p> <p>Below, I\u2019ll explain the process steps of the OCL program, identify the external programs called, and list the tables (files) used, based on the provided code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL code provided is a control script that sets up the environment and executes a program, likely written in RPG (Report Program Generator), a language commonly used with OCL on IBM systems. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The <code>CALL</code> statement initiates the execution of a program named <code>GSGENIEC</code>.</li> <li>This is likely a utility or initialization program that sets up the environment or performs a prerequisite task for the A/R Fuels Customer Maintenance process.</li> <li> <p>The exact functionality of <code>GSGENIEC</code> is not specified in the code, but it could handle tasks like validating the environment, checking user permissions, or preparing data for subsequent steps.</p> </li> <li> <p>Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> (If) statement checks a condition using a system variable or parameter <code>?L'506,3'?</code>.</li> <li>The <code>L</code> likely refers to a local data area or a system variable at position 506, with a length of 3 characters.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes the <code>RETURN</code> command, which terminates the OCL procedure immediately.</li> <li> <p>This acts as a gatekeeper, ensuring that the rest of the program only runs if the condition is false (e.g., a specific status or flag is not set).</p> </li> <li> <p>Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command appears to invoke a system procedure or a subroutine, passing parameters.</li> <li>The commas (<code>,,,,,,,,</code>) indicate placeholder parameters, and <code>?9?</code> is a substitution variable (likely a parameter passed to the procedure, such as a library or file identifier).</li> <li> <p>The exact purpose of <code>SCPROCP</code> is unclear without more context, but it might set up additional environment settings, call a subroutine, or perform a system-level operation.</p> </li> <li> <p>Environment Setup (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command is likely a custom or system-specific command related to Year 2000 (Y2K) compliance or date handling.</li> <li>It may initialize date-related settings or ensure that the system handles dates correctly (e.g., using a four-digit year format).</li> <li> <p>This step ensures the program operates in a Y2K-compliant environment, which was critical for older systems processing dates.</p> </li> <li> <p>Program Load (<code>// LOAD AR932</code>):</p> </li> <li>The <code>LOAD</code> statement loads the main program, <code>AR932</code>, into memory for execution.</li> <li><code>AR932</code> is likely an RPG program responsible for the core A/R Fuels Customer Maintenance logic, such as updating customer records, processing fuel-related transactions, or generating reports.</li> <li> <p>This step prepares the system to run the actual business logic.</p> </li> <li> <p>File Definitions:</p> </li> <li>The <code>FILE</code> statements define the files (tables) that the <code>AR932</code> program will use. Each file is associated with a specific dataset and access mode:<ul> <li><code>FILE NAME-ARFUEL,LABEL-?9?ARFUEL,DISP-SHR</code>:</li> <li>Defines a file named <code>ARFUEL</code> (likely the A/R Fuels file).</li> <li>The <code>LABEL-?9?ARFUEL</code> specifies the file\u2019s label, where <code>?9?</code> is a substitution variable (e.g., a library or prefix like <code>QSYS/</code> or a specific library name).</li> <li><code>DISP-SHR</code> indicates the file is opened in shared mode, allowing multiple programs or users to access it concurrently.</li> <li><code>FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR</code>:</li> <li>Defines a file named <code>ARCUST</code> (likely the A/R Customer file).</li> <li>Similar to <code>ARFUEL</code>, it uses a substitution variable for the label and is opened in shared mode.</li> <li><code>FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</li> <li>Defines a file named <code>ARCONT</code> (likely the A/R Control file, which may store configuration or summary data).</li> <li>Also uses a substitution variable and shared mode.</li> </ul> </li> <li> <p>These files are critical for the <code>AR932</code> program to read or update customer and fuel-related data.</p> </li> <li> <p>Program Execution (<code>// RUN</code>):</p> </li> <li>The <code>RUN</code> statement executes the loaded <code>AR932</code> program.</li> <li>This is where the actual customer maintenance logic is performed, using the files defined above (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>).</li> <li>The program likely performs tasks like adding, updating, or deleting customer records, processing fuel transactions, or generating maintenance reports.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external program: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility or initialization program that performs setup tasks before the main logic.</p> <p>Additionally, the main program executed is: 2. AR932:    - Loaded and run via <code>// LOAD AR932</code> and <code>// RUN</code>.    - This is the core RPG program responsible for A/R Fuels Customer Maintenance.</p> <p>The <code>SCPROCP</code> command may also invoke a system procedure or subroutine, but it\u2019s unclear whether this is a distinct program or a system function. Without further context, I\u2019ll treat it as a system-level operation rather than a named external program.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (tables), as defined in the <code>FILE</code> statements: 1. ARFUEL:    - Likely contains fuel-specific accounts receivable data, such as fuel purchase records, transaction details, or billing information for fuel customers.    - Label: <code>?9?ARFUEL</code> (with <code>?9?</code> as a substitution variable for the library or prefix).    - Access mode: Shared (<code>DISP-SHR</code>).</p> <ol> <li>ARCUST:</li> <li>Likely the customer master file, storing customer details such as account numbers, names, addresses, and credit information.</li> <li>Label: <code>?9?ARCUST</code>.</li> <li> <p>Access mode: Shared (<code>DISP-SHR</code>).</p> </li> <li> <p>ARCONT:</p> </li> <li>Likely a control file containing configuration data, summary totals, or control parameters for the A/R system (e.g., batch numbers, processing flags, or system settings).</li> <li>Label: <code>?9?ARCONT</code>.</li> <li>Access mode: Shared (<code>DISP-SHR</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Calls <code>GSGENIEC</code> to initialize or validate the environment.</li> <li>Checks a condition (<code>?L'506,3'?</code>) and returns if true, halting further execution.</li> <li>Invokes <code>SCPROCP</code> with a parameter (<code>?9?</code>), possibly for system setup.</li> <li>Sets up Y2K compliance with <code>GSY2K</code>.</li> <li>Loads the main program <code>AR932</code>.</li> <li>Defines three files (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>) for use by <code>AR932</code>.</li> <li> <p>Runs <code>AR932</code> to perform customer maintenance tasks.</p> </li> <li> <p>External Programs Called:</p> </li> <li><code>GSGENIEC</code> (initialization utility).</li> <li> <p><code>AR932</code> (main RPG program for A/R Fuels Customer Maintenance).</p> </li> <li> <p>Tables (Files) Used:</p> </li> <li><code>ARFUEL</code> (fuel transaction data).</li> <li><code>ARCUST</code> (customer master data).</li> <li><code>ARCONT</code> (control or configuration data).</li> </ul> <p>If you have additional details about the system (e.g., IBM System/36 specifics, the purpose of <code>GSGENIEC</code>, or the <code>SCPROCP</code> command), I can refine the explanation further. Let me know if you need more analysis or clarification!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/","title":"AR932 RPGLE","text":"<p>The provided AR932.rpgle.txt is an RPGLE (RPG IV) program, converted from an earlier RPG version (as indicated by the TARGET/400 source conversion comments), used for Accounts Receivable Fuels Customer Maintenance. This program is called from the OCL program (<code>AR932.ocl36.txt</code>) and provides an interactive screen-based interface for maintaining customer records in an A/R fuels system on an IBM midrange platform (likely IBM System/36 or AS/400). Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program (<code>AR932</code>) is designed to manage customer records for fuel-related accounts receivable, allowing users to add, update, delete, or reactivate records through a workstation interface. The program uses multiple files and handles user interactions via screens (<code>AR932S1</code> and <code>AR932S2</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications (<code>H</code> specs):<ul> <li><code>DFTACTGRP(*NO)</code>: Runs in a named activation group, typical for ILE programs.</li> <li><code>DFTNAME(AR932)</code>: Specifies the default program name.</li> <li><code>FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> </ul> </li> <li>File Declarations (<code>F</code> specs):<ul> <li>Defines files (<code>ARFUEL</code>, <code>ARCUST</code>, <code>ARCONT</code>, <code>GSCONT</code>, <code>PRINT</code>, and workstation file <code>AR932D</code>).</li> <li>Initializes the workstation file with a handler (<code>PROFOUNDUI(HANDLER)</code>) for modern UI integration and an information data structure (<code>INFDS</code>) for screen status.</li> </ul> </li> <li> <p>Data Structures and Arrays:</p> <ul> <li>Defines arrays <code>SEP</code> and <code>SEP2</code> for formatting output (likely separators for reports).</li> <li>Defines <code>MSG</code> array with 12 predefined messages for user feedback (e.g., \"THIS RECORD PREVIOUSLY DELETED\", \"RECORD NOT FOUND\").</li> <li>Defines <code>INFDS</code> to capture workstation status (e.g., function key presses).</li> </ul> </li> <li> <p>Initial Setup and Screen Control:</p> </li> <li>Checks <code>QSCTL</code> (likely a control variable) to determine the initial screen mode:<ul> <li>If <code>QSCTL</code> is blank, sets <code>*IN09</code> and <code>*IN01</code> to '1' (on), indicating initial screen display (<code>AR932S1</code>), and sets <code>QSCTL</code> to 'R'.</li> <li>Otherwise, clears <code>*IN09</code>, <code>*IN01</code>, and <code>*IN02</code>, and attempts to read from screen formats <code>AR932S1</code> (indicator 81) or <code>AR932S2</code> (indicator 82).</li> </ul> </li> <li>If <code>*IN09</code> is on (error or initial state), calls the <code>ROLLSR</code> subroutine to handle screen navigation and clears function key indicators (<code>*INKA</code>, <code>*INKD</code>, etc.).</li> <li>Initializes flags (<code>*IN15</code>, <code>*IN75</code>) and sets up time/date fields (<code>TIMDAT</code>, <code>TIME</code>, <code>DATE</code>) for display or reporting.</li> <li> <p>Chains to <code>ARCONT</code> to retrieve control data, setting <code>*IN75</code> and <code>*IN15</code> if successful.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program operates in a loop, handling user inputs via function keys (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>) and screen formats (<code>AR932S1</code>, <code>AR932S2</code>).</li> <li>Function Key Handling:<ul> <li><code>*INKA</code> (Bypass Entry): Clears fields (<code>CLEAR</code> subroutine), sets <code>*IN81</code> and <code>*IN11</code> (update mode), and skips to the end of the loop.</li> <li><code>*INKD</code> (Delete Record): Checks mode (<code>*IN10</code> for entry, <code>*IN11</code> for update) and deletion status (<code>*IN21</code>):</li> <li>If <code>*IN21</code> is off, calls <code>DELETE</code> subroutine to mark a record for deletion.</li> <li>If <code>*IN21</code> is on, calls <code>REACTI</code> subroutine to reactivate a deleted record.</li> <li><code>*INKG</code> (End of Screen): Clears screen indicators (<code>*IN81</code>, <code>*IN82</code>) and sets <code>*INLR</code> (last record) to exit the program.</li> <li><code>*INKJ</code> (Switch to Entry Mode): Clears fields, sets <code>*IN82</code> and <code>*IN10</code> (entry mode), and clears other indicators.</li> <li><code>*INKK</code> (Switch to Update Mode): Clears fields, sets <code>*IN81</code> and <code>*IN11</code> (update mode), and clears other indicators.</li> </ul> </li> <li>Screen Processing:<ul> <li>If <code>*IN01</code> is on, executes <code>S1</code> subroutine (processes <code>AR932S1</code> screen).</li> <li>If <code>*IN02</code> is on, executes <code>S2</code> subroutine (processes <code>AR932S2</code> screen).</li> </ul> </li> <li> <p>Writes to screen formats <code>AR932S1</code> or <code>AR932S2</code> based on indicators <code>*IN81</code> or <code>*IN82</code>.</p> </li> <li> <p>Subroutine Execution:</p> </li> <li>S1 Subroutine (Screen 1 Processing):<ul> <li>Chains to <code>ARCONT</code> using company number (<code>CO</code>) to validate the company.</li> <li>If not found (<code>*IN92</code> on), displays error message 6 (\"RECORD NOT FOUND\").</li> <li>Chains to <code>ARCUST</code> using <code>CO</code> and <code>CUST</code> (customer number) to validate the customer.</li> <li>If not found, displays error message 11 (\"INVALID CUSTOMER NUMBER ENTERED\").</li> <li>Chains to <code>ARFUEL</code> to check if a fuel record exists.</li> <li>If not found, displays messages 6 and 7 (\"RECORD NOT FOUND\", \"PRESS F10 TO ADD\").</li> <li>If the fuel record is marked deleted (<code>AFDEL = 'D'</code>), sets <code>*IN21</code> and displays messages 1 and 10 (\"THIS RECORD PREVIOUSLY DELETED\", \"PRESS F4 TO REACTIVATE\").</li> <li>If valid, moves data to screen fields (<code>MOVE</code> subroutine) and sets update mode (<code>*IN11</code>, <code>*IN62</code>, <code>*IN82</code>).</li> </ul> </li> <li>S2 Subroutine (Screen 2 Processing):<ul> <li>Validates company and customer numbers similar to <code>S1</code>.</li> <li>In entry mode (<code>*IN10</code>):</li> <li>Checks if <code>CO</code> is zero (displays message 4: \"COMPANY CAN'T BE ZERO\").</li> <li>Checks if a fuel record already exists (displays messages 8 and 9: \"CANNOT ADD - THIS RECORD EXISTS\", \"PRES F11 TO UPDATE\").</li> <li>Sets appropriate mode indicators (<code>*IN82</code> for entry, <code>*IN81</code> for update) and writes to the output file if needed.</li> </ul> </li> <li>CLEAR Subroutine:<ul> <li>Resets <code>CUST</code> and <code>NAME</code> fields to zeros or blanks.</li> </ul> </li> <li>MOVE Subroutine:<ul> <li>Moves <code>AFCO</code> (company number) and <code>AFCUST</code> (customer number) from <code>ARFUEL</code> to screen fields <code>CO</code> and <code>CUST</code>.</li> </ul> </li> <li>ROLLSR Subroutine:<ul> <li>Clears function key indicators (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>).</li> <li>Checks workstation status for roll-up (<code>01122</code>, <code>*IN54</code>) or roll-down (<code>01123</code>, <code>*IN55</code>) events, triggering <code>ROLLFW</code> or <code>ROLLBW</code> subroutines.</li> </ul> </li> <li>ROLLFW Subroutine (Roll Forward):<ul> <li>Chains to <code>ARFUEL</code> using <code>CO</code> and <code>CUST</code>, then reads the next record.</li> <li>Updates screen fields with new <code>AFCO</code> and <code>AFCUST</code> values or displays message 2 (\"END OF FILE HAS BEEN REACHED\") if no more records.</li> </ul> </li> <li>ROLLBW Subroutine (Roll Backward):<ul> <li>Chains to <code>ARFUEL</code>, then reads the previous record (<code>READP</code>).</li> <li>Updates screen fields or displays message 3 (\"BEGINNING OF FILE REACHED\") if at the start.</li> </ul> </li> <li>DELETE Subroutine:<ul> <li>Sets deletion message 5 (\"PREVIOUS RECORD DELETED\") and indicators (<code>*IN88</code>, <code>*IN90</code>, <code>*IN81</code>, <code>*IN72</code>).</li> <li>Writes to the output file and clears screen indicators.</li> </ul> </li> <li> <p>REACTI Subroutine:</p> <ul> <li>Sets reactivation message 12 (\"PREVIOUS RECORD WAS REACTIVATED\") and indicators (<code>*IN88</code>, <code>*IN90</code>, <code>*IN81</code>, <code>*IN73</code>).</li> <li>Writes to the output file and clears screen indicators.</li> </ul> </li> <li> <p>Output and Reporting:</p> </li> <li>Writes to the <code>PRINT</code> file for a customer maintenance listing, including:<ul> <li>Company name (<code>ACNAME</code>), page number, date, time, and headers (\"FUELS CUSTOMER MAINTENANCE LISTING\").</li> <li>Details for each record (<code>AFCO</code>, <code>AFCUST</code>, <code>NAME</code>, and action: \"NO ACTION TAKEN\", \"RECORD ADDED\", \"RECORD DELETED\", \"RECORD REACTIVATED\").</li> </ul> </li> <li> <p>Uses indicators <code>*IN15</code> (report header) and <code>*INOF</code> (overflow) to control report formatting.</p> </li> <li> <p>Program Termination:</p> </li> <li>If neither <code>*IN81</code> nor <code>*IN82</code> is on, sets <code>*INLR</code> (last record) to exit the program.</li> <li>The program loops back to handle additional user inputs until <code>*INKG</code> or another exit condition is met.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R fuels customer maintenance:</p> <ol> <li>Company and Customer Validation:</li> <li>A valid company number (<code>CO</code>) must exist in <code>ARCONT</code> before processing.</li> <li>A valid customer number (<code>CUST</code>) must exist in <code>ARCUST</code> for updates or deletions.</li> <li> <p>Company number cannot be zero in entry mode (message 4: \"COMPANY CAN'T BE ZERO\").</p> </li> <li> <p>Record Existence:</p> </li> <li>In entry mode (<code>*IN10</code>), a new fuel record cannot be added if it already exists in <code>ARFUEL</code> (messages 8 and 9).</li> <li> <p>In update mode (<code>*IN11</code>), the record must exist in <code>ARFUEL</code> for updates or deletions (message 6: \"RECORD NOT FOUND\").</p> </li> <li> <p>Deletion and Reactivation:</p> </li> <li>Records marked as deleted (<code>AFDEL = 'D'</code>) can be reactivated using F4 (<code>*INKD</code> with <code>*IN21</code> on, message 10: \"PRESS F4 TO REACTIVATE\").</li> <li>Deletion is only allowed if the record exists and is not already deleted (<code>*IN21</code> off, message 5: \"PREVIOUS RECORD DELETED\").</li> <li> <p>Reactivation updates the record to remove the deletion flag (message 12: \"PREVIOUS RECORD WAS REACTIVATED\").</p> </li> <li> <p>Screen Modes:</p> </li> <li>Entry Mode (<code>*IN10</code>): Allows adding new records (F10 key, <code>*INKJ</code>).</li> <li>Update Mode (<code>*IN11</code>): Allows updating or deleting existing records (F11 key, <code>*INKK</code>).</li> <li>Bypass Entry (<code>*INKA</code>): Skips data entry and returns to update mode.</li> <li> <p>End of Screen (<code>*INKG</code>): Exits the program.</p> </li> <li> <p>Navigation:</p> </li> <li> <p>Roll-up (<code>*IN54</code>) and roll-down (<code>*IN55</code>) allow browsing through <code>ARFUEL</code> records, with messages for end-of-file (message 2) or beginning-of-file (message 3).</p> </li> <li> <p>Error Handling:</p> </li> <li>Displays appropriate error messages for invalid inputs (e.g., message 11: \"INVALID CUSTOMER NUMBER ENTERED\").</li> <li> <p>Prevents actions on deleted records unless reactivating.</p> </li> <li> <p>Reporting:</p> </li> <li>Generates a printed report listing actions taken (add, delete, reactivate, or no action) for each customer record, including company and customer numbers, names, and timestamps.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files, as defined in the <code>F</code> specifications:</p> <ol> <li>AR932D:</li> <li>Type: Workstation file (CF, combined file).</li> <li>Purpose: Handles interactive screen input/output for formats <code>AR932S1</code> and <code>AR932S2</code>.</li> <li>Handler: <code>PROFOUNDUI(HANDLER)</code> for modern UI integration.</li> <li> <p>Information Data Structure: <code>INFDS</code> captures screen status (e.g., function key codes).</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (IF, fixed-length 256 bytes, key length 2).</li> <li>Purpose: Stores control data (e.g., company details).</li> <li>Fields: <code>ACDEL</code> (delete flag), <code>ACCO</code> (company number), <code>ACNAME</code> (company name).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>ARFUEL:</p> </li> <li>Type: Update file (UF, fixed-length 9 bytes, key length 8).</li> <li>Purpose: Stores fuel-specific A/R data (e.g., customer fuel transactions).</li> <li>Fields: <code>AFDEL</code> (delete flag), <code>AFCO</code> (company number), <code>AFCUST</code> (customer number).</li> <li> <p>Access: Keyed access starting at position 2, supports add (<code>EADD</code>) and delete (<code>EDEL</code>) operations.</p> </li> <li> <p>ARCUST:</p> </li> <li>Type: Input file (IF, fixed-length 384 bytes, key length 8).</li> <li>Purpose: Stores customer master data.</li> <li>Fields: <code>ARDEL</code> (delete flag), <code>ARCO</code> (company number), <code>ARNAME</code> (customer name).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (IF, fixed-length 512 bytes, key length 2).</li> <li>Purpose: Likely a general system control file, possibly for cross-module data.</li> <li>Fields: <code>GXDEL</code> (delete flag), <code>GXCONO</code> (company number).</li> <li> <p>Access: Keyed access starting at position 2.</p> </li> <li> <p>PRINT:</p> </li> <li>Type: Output file (O, fixed-length 160 bytes).</li> <li>Purpose: Generates a printed report for customer maintenance actions.</li> <li>Fields: Includes <code>ACNAME</code>, <code>AFCO</code>, <code>AFCUST</code>, <code>NAME</code>, <code>PAGE</code>, <code>DATE</code>, <code>TIME</code>, and action descriptions.</li> <li>Overflow Indicator: <code>*INOF</code>.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs via <code>CALL</code> operations. All processing is handled within the program using subroutines (<code>S1</code>, <code>S2</code>, <code>CLEAR</code>, <code>MOVE</code>, <code>ROLLSR</code>, <code>ROLLFW</code>, <code>ROLLBW</code>, <code>DELETE</code>, <code>REACTI</code>). However, the program is called from the OCL program (<code>AR932.ocl36.txt</code>), which also invokes <code>GSGENIEC</code> as part of the job setup. Thus, no additional external programs are called directly by <code>AR932</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/AR932%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps:</li> <li>Initializes the program, files, and screen environment.</li> <li>Sets up initial screen mode based on <code>QSCTL</code> and reads screen input (<code>AR932S1</code> or <code>AR932S2</code>).</li> <li>Processes user inputs via function keys (<code>*INKA</code>, <code>*INKD</code>, <code>*INKG</code>, <code>*INKJ</code>, <code>*INKK</code>) to manage modes (entry/update), delete, or reactivate records.</li> <li>Executes subroutines for screen processing (<code>S1</code>, <code>S2</code>), navigation (<code>ROLLFW</code>, <code>ROLLBW</code>), and record actions (<code>DELETE</code>, <code>REACTI</code>).</li> <li>Generates a printed report of customer maintenance actions.</li> <li> <p>Loops until an exit condition (<code>*INKG</code> or no active screen indicators) sets <code>*INLR</code> to terminate.</p> </li> <li> <p>Business Rules:</p> </li> <li>Validates company and customer numbers.</li> <li>Prevents adding duplicate records or invalid actions (e.g., zero company number).</li> <li>Manages deletion and reactivation with appropriate flags and messages.</li> <li>Supports entry and update modes with distinct screen behaviors.</li> <li>Provides navigation for browsing records and detailed error messaging.</li> <li> <p>Produces a formatted report of actions taken.</p> </li> <li> <p>Tables (Files) Used:</p> </li> <li><code>AR932D</code> (workstation, screen I/O).</li> <li><code>ARCONT</code> (control data).</li> <li><code>ARFUEL</code> (fuel A/R data).</li> <li><code>ARCUST</code> (customer master data).</li> <li><code>GSCONT</code> (system control data).</li> <li> <p><code>PRINT</code> (report output).</p> </li> <li> <p>External Programs Called:</p> </li> <li>None directly called by <code>AR932.rpgle</code>. The OCL program calls <code>AR932</code> and <code>GSGENIEC</code>.</li> </ul> <p>If you have additional details (e.g., the content of <code>AR932S1</code>/<code>AR932S2</code> screen formats, the purpose of <code>GSCONT</code>, or specific business requirements), I can provide a more detailed analysis. Let me know if you need further clarification or specific aspects explored!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/","title":"Summary AR932 OCL","text":"<p>Based on the provided AR932.ocl36.txt (OCL program) and AR932.rpgle.txt (RPGLE program), I\u2019ve analyzed the call stack and program logic to identify the use cases implemented and to create a function requirement document for a non-interactive version of the primary use case. The OCL program sets up the environment and calls the RPGLE program <code>AR932</code>, which handles the core functionality of Accounts Receivable Fuels Customer Maintenance. Below, I\u2019ll list the use cases and provide a concise function requirement document, assuming the process is driven by input parameters rather than screen interactions.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The program implements a single primary use case, with sub-functions handled through different modes and actions. The use case is:</p> <ol> <li>Maintain Accounts Receivable Fuels Customer Records:</li> <li>Description: Allows maintenance of customer records in the A/R fuels system, including adding new fuel records, updating existing records, deleting records (marking as deleted), and reactivating previously deleted records.</li> <li>Sub-functions:<ul> <li>Add Record: Create a new fuel record for a valid company and customer.</li> <li>Update Record: Modify details of an existing fuel record.</li> <li>Delete Record: Mark a fuel record as deleted (<code>AFDEL = 'D'</code>).</li> <li>Reactivate Record: Remove the deletion flag from a previously deleted record.</li> <li>Browse Records: Navigate through fuel records (forward/backward) to review existing data.</li> <li>Generate Report: Produce a printed report of maintenance actions (add, delete, reactivate, or no action).</li> </ul> </li> <li>Inputs: Company number (<code>CO</code>), customer number (<code>CUST</code>), and action type (add, update, delete, reactivate).</li> <li>Outputs: Updated <code>ARFUEL</code> file, error messages, and a printed report in the <code>PRINT</code> file.</li> <li>Context: The program validates inputs against <code>ARCONT</code> (control file), <code>ARCUST</code> (customer master), and <code>GSCONT</code> (system control), ensuring data integrity and compliance with business rules.</li> </ol> <p>No additional use cases are implemented, as the program focuses solely on customer maintenance for the A/R fuels system.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#ar-fuels-customer-maintenance-function-requirements","title":"A/R Fuels Customer Maintenance Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#overview","title":"Overview","text":"<p>This function maintains customer records in the Accounts Receivable (A/R) Fuels system by processing actions (add, update, delete, reactivate) on fuel-related customer data. It validates inputs, updates the <code>ARFUEL</code> file, and generates a report of actions taken. The function accepts input parameters instead of interactive screen inputs, ensuring batch or API-driven execution.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CO</code>): Numeric (2 digits), identifies the company.</li> <li>Customer Number (<code>CUST</code>): Numeric (6 digits), identifies the customer.</li> <li>Action Type: String, one of:</li> <li><code>ADD</code>: Create a new fuel record.</li> <li><code>UPDATE</code>: Modify an existing fuel record.</li> <li><code>DELETE</code>: Mark a fuel record as deleted.</li> <li><code>REACTIVATE</code>: Remove deletion flag from a deleted record.</li> <li>Customer Name (<code>NAME</code>): String (30 characters), required for <code>ADD</code> and <code>UPDATE</code>.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated <code>ARFUEL</code> File: Modified fuel record (added, updated, deleted, or reactivated).</li> <li>Report Output (<code>PRINT</code>): Listing of actions taken, including company number, customer number, customer name, and action description.</li> <li>Error Message: String indicating success or failure (e.g., \"RECORD NOT FOUND\", \"INVALID CUSTOMER NUMBER\").</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Check if <code>CO</code> exists in <code>ARCONT</code>. If not, return error: \"RECORD NOT FOUND\".</li> <li>Check if <code>CUST</code> exists in <code>ARCUST</code>. If not, return error: \"INVALID CUSTOMER NUMBER ENTERED\".</li> <li>For <code>ADD</code>, ensure <code>CO</code> is not zero. If zero, return error: \"COMPANY CAN'T BE ZERO\".</li> <li>Check Record Existence:</li> <li>For <code>ADD</code>, verify no existing record in <code>ARFUEL</code> for <code>CO</code> and <code>CUST</code>. If found, return error: \"CANNOT ADD - THIS RECORD EXISTS\".</li> <li>For <code>UPDATE</code>, <code>DELETE</code>, or <code>REACTIVATE</code>, verify record exists in <code>ARFUEL</code>. If not, return error: \"RECORD NOT FOUND\".</li> <li>Perform Action:</li> <li>ADD: Create new <code>ARFUEL</code> record with <code>CO</code>, <code>CUST</code>, <code>NAME</code>, and <code>AFDEL = ' '</code> (not deleted).</li> <li>UPDATE: Update existing <code>ARFUEL</code> record with new <code>NAME</code>.</li> <li>DELETE: Set <code>AFDEL = 'D'</code> in <code>ARFUEL</code> record. Return message: \"PREVIOUS RECORD DELETED\".</li> <li>REACTIVATE: If <code>AFDEL = 'D'</code>, set <code>AFDEL = ' '</code>. Return message: \"PREVIOUS RECORD WAS REACTIVATED\".</li> <li>Generate Report:</li> <li>Write to <code>PRINT</code> file with:<ul> <li>Header: Company name (<code>ACNAME</code> from <code>ARCONT</code>), date, time, \"FUELS CUSTOMER MAINTENANCE LISTING\".</li> <li>Detail: <code>CO</code>, <code>CUST</code>, <code>NAME</code>, and action (\"RECORD ADDED\", \"RECORD DELETED\", \"RECORD REACTIVATED\", or \"NO ACTION TAKEN\").</li> </ul> </li> <li>Return Result:</li> <li>Return success message or error message based on validation and action outcome.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Validation:</li> <li>Company number must exist in <code>ARCONT</code>.</li> <li>Customer number must exist in <code>ARCUST</code>.</li> <li>Company number cannot be zero for <code>ADD</code>.</li> <li>Record Management:</li> <li><code>ADD</code> fails if a record already exists in <code>ARFUEL</code> for the same <code>CO</code> and <code>CUST</code>.</li> <li><code>UPDATE</code> and <code>DELETE</code> require an existing <code>ARFUEL</code> record.</li> <li><code>REACTIVATE</code> only applies to records with <code>AFDEL = 'D'</code>.</li> <li>Deletion:</li> <li>Deletion sets <code>AFDEL = 'D'</code> (soft delete) rather than removing the record.</li> <li>Reactivation clears <code>AFDEL</code> to restore the record.</li> <li>Reporting:</li> <li>All actions are logged in the <code>PRINT</code> file with timestamps and action details.</li> <li>System Control:</li> <li>Validates against <code>GSCONT</code> for system-wide settings (e.g., company number consistency).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date and Time: Retrieved from system clock and formatted as <code>MMDDYY</code> (6 digits) for <code>DATE</code> and <code>HHMMSS</code> (6 digits) for <code>TIME</code> in the report.</li> <li>Key Construction: Combines <code>CO</code> (2 digits) and <code>CUST</code> (6 digits) into an 8-digit key (<code>MASKEY</code>) for <code>ARFUEL</code> and <code>ARCUST</code> lookups.</li> <li>Page Number: Increments for each report page, included in <code>PRINT</code> output.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: Control data (company details).</li> <li><code>ARFUEL</code>: Fuel A/R data (updateable).</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>GSCONT</code>: System control data.</li> <li><code>PRINT</code>: Output file for reports.</li> <li>External Programs: None directly called by the function (OCL calls <code>GSGENIEC</code> for setup, but not required in non-interactive mode).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Returns specific error messages for validation failures (e.g., \"RECORD NOT FOUND\", \"CANNOT ADD - THIS RECORD EXISTS\").</li> <li>Ensures no action is taken if validations fail, preserving data integrity.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/AR932%20Fuels%20Customer%20Add-Update/Summary%20AR932%20OCL/#notes","title":"Notes","text":"<ul> <li>The function requirement document assumes a non-interactive process, replacing screen inputs (<code>AR932S1</code>, <code>AR932S2</code>) with direct parameter inputs (<code>CO</code>, <code>CUST</code>, <code>ACTION</code>, <code>NAME</code>).</li> <li>The business rules and process steps are derived from the RPGLE program\u2019s logic, focusing on core functionality and validation.</li> <li>No calculations beyond simple key construction and date/time formatting are required, as the program primarily manages record states and reporting.</li> <li>The document is concise, focusing on business requirements while including necessary technical details (e.g., file dependencies, error messages).</li> </ul> <p>If you need further refinements, additional use cases, or specific details (e.g., sample input/output formats), please let me know!</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/","title":"BB928 RPGLE","text":"<p>The RPGLE program <code>BB928</code> is a component of a billing and invoicing system designed to handle the maintenance and inquiry of salesman ID entries. It is called by the main program <code>BB928P</code> (as referenced in the previous document) to perform specific operations such as creating, updating, or displaying salesman ID records. Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#process-steps-of-the-bb928-program","title":"Process Steps of the BB928 Program","text":"<p>The program is structured to interact with a display file (<code>bb928d</code>) and manage salesman ID records through a single panel format (<code>fmt01</code>). It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, based on input parameters. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>p$co</code>: Company number.</li> <li><code>p$smid</code>: Salesman ID.</li> <li><code>p$mode</code>: Run mode (<code>MNT</code> for maintenance, <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>).</li> <li><code>p$flag</code>: Return flag to indicate success or failure.</li> </ul> </li> <li>Field Setup: Moves input parameters <code>p$co</code> and <code>p$smid</code> to display file fields (<code>f$co</code>, <code>f$smid</code>). Initializes output parameters (<code>o$co</code>, <code>o$smid</code>, <code>o$mode</code>, <code>o$fgrp</code>, <code>o$flag</code>) and miscellaneous fields (<code>fmtagn</code>, <code>delagn</code>, <code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li> <p>Keylist: Defines <code>klslsm</code> keylist using <code>f$co</code> and <code>f$smid</code> for database access.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies database overrides from <code>ovg</code> or <code>ovz</code> arrays to point to the correct files (<code>gbbslsm</code> or <code>zbbslsm</code>, <code>gbicont</code> or <code>zbicont</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> (update/add mode) and <code>bicont</code> (input mode) with <code>usropn</code>. Chains to <code>bicont</code> using <code>f$co</code> to validate the company number.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Record Retrieval: Chains to <code>bbslsm</code> using <code>klslsm</code> (company and salesman ID) to check if the record exists.<ul> <li>If the record is not found (<code>*in99 = *on</code>), clears the record buffer (<code>bbslsmpf</code>) and sets <code>w$exists</code> to <code>*off</code>.</li> <li>If found, sets <code>w$exists</code> to <code>*on</code>.</li> </ul> </li> <li> <p>Header and Protection: Sets the display header (<code>c$hdr1</code>) to \"Salesman Id Entry Maintenance\" or \"Salesman Id Inquiry\" based on <code>p$mode</code>. Sets <code>*in70</code> to <code>*on</code> for inquiry mode (protecting input fields) or <code>*off</code> for maintenance mode.</p> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes the <code>clrscr</code> format to clear the display.</li> <li>Initial Setup: Calls <code>f01mov</code> to initialize format fields and sets <code>w$fmt</code> to <code>FMT01</code>.</li> <li> <p>Main Loop:</p> <ul> <li>Displays the message subfile if <code>dspmsg</code> is <code>*on</code> (via <code>wrtmsg</code>) or clears the screen.</li> <li>Sets <code>*in19</code> to <code>*off</code> to indicate no format change.</li> <li>Displays <code>fmt01</code> using <code>exfmt</code> (other formats like <code>fmt02</code> are commented out, indicating only <code>fmt01</code> is currently used).</li> <li>Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>) and cursor position (<code>row</code>, <code>col</code>).</li> <li>Clears the message subfile if <code>dspmsg</code> is <code>*on</code> (via <code>clrmsg</code>).</li> <li>Processes the current format (<code>fmt01</code>) by calling <code>f01sr</code>.</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li> <p>Handles user input for <code>fmt01</code>:</p> <ul> <li>F4 (Field Prompting): Calls <code>prompt</code> to set <code>*in19</code> for cursor positioning.</li> <li>F10 (Position Cursor Home): Clears cursor position (<code>row</code>, <code>col</code>).</li> <li>F12 (Exit): Sets <code>fmtagn</code> to <code>*off</code> to exit the loop.</li> <li>Inquiry Mode: If <code>p$mode = 'INQ'</code>, calls <code>f01nxt</code> to determine the next format (though it currently exits the loop).</li> <li>Enter Key:</li> <li>Validates input fields via <code>f01edt</code>.</li> <li>If no errors (<code>*in50 = *off</code>) and in maintenance mode (<code>p$mode = 'MNT'</code>), updates the database via <code>upddbf</code>.</li> <li>Calls <code>f01nxt</code> to determine the next format or exit.</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li> <p>If <code>*in19</code> is <code>*off</code>, sets <code>fmtagn</code> to <code>*off</code> to exit the main loop (no additional formats like <code>fmt02</code> are used).</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validates input fields in <code>fmt01</code>:<ul> <li>Checks if <code>smsmnm</code> (salesman name) is blank, setting <code>m@id</code> to <code>ERR0012</code>, <code>*in50</code>, and <code>*in51</code> if true.</li> <li>Checks if <code>smemal</code> (email address) is blank, setting <code>m@id</code> to <code>ERR0012</code>, <code>*in50</code>, and <code>*in52</code> if true.</li> </ul> </li> <li> <p>In inquiry mode (<code>p$mode = 'INQ'</code>), clears error indicators and messages to prevent validation errors.</p> </li> <li> <p>Initialize Format Fields (<code>f01mov</code> Subroutine):</p> </li> <li> <p>Calls <code>f01edt</code> to validate fields and clears error indicators and messages if validation fails.</p> </li> <li> <p>Format Protection Schemes (<code>f01pro</code> Subroutine):</p> </li> <li> <p>Sets protection indicators:</p> <ul> <li>Clears <code>*in70</code>\u2013<code>*in74</code> by default.</li> <li>In inquiry mode (<code>p$mode \u2260 'MNT'</code>), sets <code>*in70</code>\u2013<code>*in73</code> to <code>*on</code> to protect input fields.</li> <li>In maintenance mode, if the record exists (<code>w$exists = *on</code>), sets <code>*in71</code> to protect key fields (<code>f$co</code>, <code>f$smid</code>).</li> </ul> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> <ul> <li>Saves current field values to <code>svds</code>.</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>:</li> <li>If the record exists (<code>*in80 = *off</code>):<ul> <li>If fields have changed (<code>svds \u2260 wkds01</code>), restores <code>svds</code> to <code>wkds01</code> and updates the record (<code>bbslsmpf</code>).</li> <li>Sets <code>p$flag</code> to <code>1</code> to indicate success.</li> <li>If no changes, forces end-of-data (<code>feod</code>) to reset the file pointer.</li> </ul> </li> <li>If the record does not exist:<ul> <li>Clears the record buffer, sets <code>smco</code> (company), <code>smsmid</code> (salesman ID), and <code>smdel</code> to <code>A</code> (active), and writes a new record to <code>bbslsmpf</code>.</li> <li>Sets <code>p$flag</code> to <code>1</code>.</li> </ul> </li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Determines cursor location (<code>row</code>, <code>col</code>) from <code>csrloc</code> and sets <code>*in19</code> to indicate a format change.</li> </ul> </li> <li> <p>Message Handling:</p> <ul> <li>addmsg: Sends error messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>, preserving the current record format and <code>pagrrn</code>.</li> </ul> </li> <li> <p>Program Exit:</p> <ul> <li>Closes all files, sets <code>*inlr</code> to <code>*on</code>, and returns to the calling program (<code>BB928P</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Input Validation:    - Salesman name (<code>smsmnm</code>) and email address (<code>smemal</code>) are mandatory fields. If either is blank, an <code>ERR0012</code> message is displayed, and error indicators (<code>*in50</code>, <code>*in51</code>, <code>*in52</code>) are set.    - In inquiry mode, validation errors are cleared to allow read-only access. 2. Mode-Based Access:    - Maintenance Mode (<code>MNT</code>):      - Allows creation or update of salesman ID records.      - Protects key fields (<code>f$co</code>, <code>f$smid</code>) if the record exists (<code>w$exists = *on</code>) to prevent changes to the company or salesman ID.      - Updates or creates records in <code>bbslsm</code> and sets <code>p$flag</code> to <code>1</code> on success.    - Inquiry Mode (<code>INQ</code>):      - Protects all input fields (<code>*in70</code>\u2013<code>*in73</code>) to prevent modifications.      - Displays existing records without allowing changes. 3. Record Existence:    - Checks if the salesman ID record exists in <code>bbslsm</code> before displaying or updating.    - Creates a new record with <code>smdel = 'A'</code> (active) if it does not exist. 4. Company Validation:    - Validates the company number (<code>f$co</code>) against <code>bicont</code> during file open. 5. Message Handling:    - Displays error messages for invalid input and clears them after display or in inquiry mode. 6. Database Integrity:    - Uses file overrides to select the correct database files based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>).    - Ensures only changed records are updated, and new records are written with appropriate default values.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files: 1. bbslsm: Primary file for salesman ID records, opened in update/add mode (<code>uf a</code>) with <code>usropn</code>. Used for reading, updating, and creating records. 2. bicont: Input file for company records, opened with <code>usropn</code>. Used to validate the company number (<code>f$co</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. QCMDEXC: Executes file override commands for <code>bbslsm</code> and <code>bicont</code>. 2. QMHSNDPM: Sends messages to the program message queue for error display. 3. QMHRMVPM: Removes messages from the program message queue.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb928d</code> is a workstation file using the <code>PROFOUNDUI(HANDLER)</code> for the user interface, with a single active format (<code>fmt01</code>). References to <code>fmt02</code> are commented out, suggesting it was planned but not implemented.</li> <li>Indicators: Uses indicators (19, 21\u201379, 90\u201399) for screen control, error handling, and field protection, consistent with <code>BB928P</code>.</li> <li>Field Prefixes: Follows the same naming conventions as <code>BB928P</code> (e.g., <code>f$</code> for display fields, <code>p$</code> for input parameters, <code>o$</code> for output parameters).</li> <li>Integration with BB928P: <code>BB928</code> is called by <code>BB928P</code> for options 1 (create), 2 (change), and 5 (display) to handle individual record operations, returning a flag (<code>p$flag</code>) to indicate success.</li> </ul> <p>This program is a focused module for maintaining or viewing salesman ID records, complementing the subfile-based interface of <code>BB928P</code> by providing detailed record manipulation functionality.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/","title":"BB9284 RPGLE","text":"<p>The RPGLE program <code>BB9284</code> is a specialized module within a billing and invoicing system, designed to handle the inactivation and reactivation of salesman ID entries. It is called by the main program <code>BB928P</code> (as referenced in the earlier document) to perform these specific operations. The program uses a display file (<code>bb9284d</code>) to present a window (<code>actwdw</code>) for user interaction and updates the salesman ID record status in the database. Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#process-steps-of-the-bb9284-program","title":"Process Steps of the BB9284 Program","text":"<p>The program is structured to display a window for confirming the inactivation or reactivation of a salesman ID record and update the database accordingly. It operates in a single mode, focusing on toggling the record\u2019s status (<code>smdel</code>) between active (<code>A</code>) and inactive (<code>I</code>). Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters:<ul> <li><code>p$co</code>: Company number.</li> <li><code>p$smid</code>: Salesman ID.</li> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>).</li> <li><code>p$flag</code>: Return flag to indicate the outcome (e.g., <code>I</code> for inactivated, <code>A</code> for reactivated).</li> </ul> </li> <li>Field Setup: Moves input parameters <code>p$co</code> and <code>p$smid</code> to display file fields (<code>f$co</code>, <code>f$smid</code>). Initializes <code>winagn</code> to <code>*on</code> to control the window processing loop, and sets up message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li>Keylist: Defines <code>klslsm</code> keylist using <code>f$co</code> and <code>f$smid</code> for database access.</li> <li> <p>Date Validation: Defines a parameter list (<code>pld010</code>) for a potential date validation module (<code>dtp010r</code>), though it is not used in the provided code.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies a database override from <code>ovg</code> or <code>ovz</code> arrays to point to the correct file (<code>gbbslsm</code> or <code>zbbslsm</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> in update/add mode (<code>uf a</code>) with <code>usropn</code>.</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li> <p>Record Retrieval: Chains to <code>bbslsm</code> using <code>klslsm</code> (company and salesman ID) to retrieve the record.</p> <ul> <li>If the record exists (<code>*in99 = *off</code>):</li> <li>If <code>smdel = 'I'</code> (inactive), sets the display header (<code>f$hdr</code>) to \"Salesman Id Entry ReActivate\" (<code>hdr(01)</code>), function key label (<code>f$fkyd</code>) to \"F22=ReActivate\" (<code>fky(01)</code>), and <code>*in72</code> to <code>*on</code> (indicating reactivation is available).</li> <li>Otherwise, sets <code>f$hdr</code> to \"Salesman Id Entry InActivate\" (<code>hdr(02)</code>), <code>f$fkyd</code> to \"F23=InActivate\" (<code>fky(02)</code>), and <code>*in73</code> to <code>*on</code> (indicating inactivation is available).</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li>Main Loop: Runs while <code>winagn = *on</code>:<ul> <li>Display Messages: If <code>dspmsg = *on</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>msgclr</code> to clear the message area.</li> <li>Display Window: Displays the <code>actwdw</code> window using <code>exfmt</code>.</li> <li>Clear Messages: If <code>dspmsg = *on</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Indicators: Clears error indicators (<code>*in50</code>\u2013<code>*in69</code>) using <code>zero20</code>.</li> <li>Process User Input:</li> <li>F12 (Exit): Sets <code>winagn</code> to <code>*off</code> to exit the loop without changes.</li> <li>F22 (ReActivate) or F23 (InActivate):<ul> <li>Calls <code>winedt</code> to validate input (which calls <code>chkact</code>).</li> <li>If no errors (<code>*in50 = *off</code>), calls <code>winupd</code> to update the database and sets <code>winagn</code> to <code>*off</code> to exit.</li> </ul> </li> <li>Other (e.g., Enter): Calls <code>winedt</code> to validate input but does not update the database.</li> </ul> </li> <li> <p>Cursor Positioning: Commented-out code suggests cursor location (<code>row</code>, <code>col</code>) could be calculated from <code>csrloc</code>, but it is not currently used.</p> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li> <p>Calls <code>chkact</code> to perform validation, though <code>chkact</code> is currently empty, indicating no specific input validation is implemented.</p> </li> <li> <p>Check Activity (<code>chkact</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for future validation of the salesman ID\u2019s activity (e.g., checking if the record is linked to other data preventing inactivation).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li> <p>Processes based on the function key:</p> <ul> <li>F22 (ReActivate):</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is inactive (<code>smdel = 'I'</code>), sets <code>smdel</code> to <code>A</code> (active), updates the record (<code>bbslsmpf</code>), and sets <code>p$flag</code> to <code>A</code>.</li> <li>F23 (InActivate):</li> <li>Chains to <code>bbslsm</code> using <code>klslsm</code>.</li> <li>If the record exists (<code>*in99 = *off</code>) and is not already inactive (<code>smdel \u2260 'I'</code>), sets <code>smdel</code> to <code>I</code> (inactive), updates the record (<code>bbslsmpf</code>), and sets <code>p$flag</code> to <code>I</code>.</li> </ul> </li> <li> <p>Message Handling:</p> </li> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li> <p>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>. Commented-out code for saving/restoring <code>rcdnam</code> and <code>pagrrn</code> suggests it was planned but not needed for the window format.</p> </li> <li> <p>Program Exit:</p> </li> <li>Closes all files, sets <code>*inlr</code> to <code>*on</code>, and returns to the calling program (<code>BB928P</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Record Status Toggle:    - A salesman ID record can be toggled between active (<code>smdel = 'A'</code>) and inactive (<code>smdel = 'I'</code>) states.    - Only inactive records can be reactivated (F22), and only non-inactive records can be inactivated (F23). 2. Record Existence:    - The program checks if the salesman ID record exists in <code>bbslsm</code> before allowing status changes.    - If the record does not exist or is in an invalid state (e.g., already inactive for F23), no update occurs. 3. User Interface:    - The window (<code>actwdw</code>) displays a header and function key label based on the record\u2019s current status:      - Inactive records show \"Salesman Id Entry ReActivate\" with F22 enabled.      - Active records show \"Salesman Id Entry InActivate\" with F23 enabled.    - F12 allows the user to exit without changes. 4. Database Integrity:    - Uses file overrides to select the correct database file (<code>gbbslsm</code> or <code>zbbslsm</code>) based on <code>p$fgrp</code>.    - Updates only the <code>smdel</code> field in the <code>bbslsm</code> record, preserving other fields. 5. Return Flag:    - Sets <code>p$flag</code> to <code>A</code> for reactivation or <code>I</code> for inactivation to inform the calling program (<code>BB928P</code>) of the outcome.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. bbslsm: Primary file for salesman ID records, opened in update/add mode (<code>uf a</code>) with <code>usropn</code>. Used for reading and updating the record status (<code>smdel</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes the file override command for <code>bbslsm</code>. 2. QMHSNDPM: Sends messages to the program message queue for error or confirmation display. 3. QMHRMVPM: Removes messages from the program message queue.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9284%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb9284d</code> is a workstation file using the <code>PROFOUNDUI(HANDLER)</code> for the user interface, with a single window format (<code>actwdw</code>) for inactivation/reactivation.</li> <li>Indicators: Uses indicators (19, 21\u201379, 90\u201399) for screen control and message handling, consistent with <code>BB928P</code> and <code>BB928</code>. Notably, <code>*in72</code> and <code>*in73</code> control the display of reactivation/inactivation options.</li> <li>Field Prefixes: Follows the same naming conventions as <code>BB928P</code> and <code>BB928</code> (e.g., <code>f$</code> for display fields, <code>p$</code> for input parameters, <code>o$</code> for output parameters).</li> <li>Integration with BB928P: <code>BB9284</code> is called by <code>BB928P</code> for option 4 (inactivate/reactivate) to toggle the status of a salesman ID record, returning a flag (<code>p$flag</code>) to indicate the result.</li> <li>Empty Subroutine: The <code>chkact</code> subroutine is empty, suggesting that additional validation (e.g., checking for dependencies like vendor links in <code>BB928P</code>) was planned but not implemented.</li> </ul> <p>This program is a focused module for toggling the active/inactive status of salesman ID records, complementing the broader functionality of <code>BB928P</code> and <code>BB928</code> by providing a simple, user-driven interface for status changes.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/","title":"BB9285 RPGLE","text":"<p>The RPGLE program <code>BB9285</code> is a component of a billing and invoicing system designed to generate a printed listing of salesman ID records. It is called by the main program <code>BB928P</code> (as referenced in earlier documents) to produce a report of salesman ID data. The program reads records from a database file, formats them, and outputs them to a printer file (<code>qsysprt</code>). Below, I\u2019ll explain the process steps, outline the business rules, list the database tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#process-steps-of-the-bb9285-program","title":"Process Steps of the BB9285 Program","text":"<p>The program is structured to open files, read salesman ID records sequentially, and print a formatted report with headers and details. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives one input parameter:<ul> <li><code>p$fgrp</code>: File group (<code>Z</code> or <code>G</code>), determining which database file to use.</li> </ul> </li> <li>Header Setup: Sets the report header (<code>c$hdr1</code>) to \"Salesman Id Listing By Co#/Salesman Id\" from the <code>hdr</code> array.</li> <li>Initial State: Sets <code>prtovr</code> to <code>*on</code> to trigger printing of the report header on the first page.</li> <li> <p>File Open: Calls <code>opntbl</code> to open the database file.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>), applies database overrides from <code>ovg</code> or <code>ovz</code> arrays to point to the correct file (<code>gbbslsm</code> or <code>zbbslsm</code>) using the <code>QCMDEXC</code> program.</li> <li> <p>File Open: Opens <code>bbslsm</code> in input mode (<code>if</code>) with <code>usropn</code>.</p> </li> <li> <p>Print Listing (<code>prtlist</code> Subroutine):</p> </li> <li>Open Printer File: Calls <code>openprtf</code> to set up and open the printer file (<code>qsysprt</code>).</li> <li>Read Records: Reads <code>bbslsm</code> sequentially until the last record (<code>*inlr = *on</code>):<ul> <li>For each record, calls <code>ovrflo</code> to handle page overflow and print headers if needed.</li> <li>Prints the detail line (<code>dtl01</code>) containing the salesman ID record fields.</li> </ul> </li> <li> <p>Close Printer File: Calls <code>closprtf</code> to close <code>qsysprt</code> and clean up overrides.</p> </li> <li> <p>Handle Overflow (<code>ovrflo</code> Subroutine):</p> </li> <li>Checks if the printer file overflow indicator (<code>*inof</code>) is <code>*on</code>.<ul> <li>If true, sets <code>prtovr</code> to <code>*on</code> and sets indicators <code>*in81</code>\u2013<code>*in85</code> to <code>*on</code> for header printing.</li> </ul> </li> <li> <p>If <code>prtovr = *on</code>, prints the report header (<code>hdr01</code>) and resets <code>prtovr</code> to <code>*off</code>.</p> </li> <li> <p>Open Printer File (<code>openprtf</code> Subroutine):</p> </li> <li>Constructs a printer override command by combining <code>ovr(01)</code> and <code>ovr(02)</code> (defining page size, lines per inch, characters per inch, overflow line, output queue, form type, hold, and save options).</li> <li>Executes the override using <code>QCMDEXC</code>.</li> <li> <p>Opens the printer file <code>qsysprt</code>.</p> </li> <li> <p>Close Printer File (<code>closprtf</code> Subroutine):</p> </li> <li>Closes <code>qsysprt</code>.</li> <li> <p>Applies the delete override command (<code>ovr(03)</code>) using <code>QCMDEXC</code> to remove the printer file override.</p> </li> <li> <p>Program Exit:</p> </li> <li>Closes all files and returns to the calling program (<code>BB928P</code>).</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Report Content:    - The report lists all salesman ID records from <code>bbslsm</code>, sorted by company number (<code>smco</code>) and salesman ID (<code>smsmid</code>).    - Each detail line includes:      - <code>smco</code>: Company number (position 2).      - <code>smsmid</code>: Salesman ID (position 8).      - <code>smsmnm</code>: Salesman name (position 44).      - <code>smemal</code>: Email address (position 95).      - <code>smdel</code>: Deletion status (position 100, e.g., <code>A</code> for active, <code>I</code> for inactive, <code>D</code> for deleted). 2. Report Format:    - The report header (<code>hdr01</code>) includes:      - Company name (\"American Refining Group\") at position 24.      - Report title (<code>c$hdr1</code>) at position 65.      - Page number at position 154.      - Job name and program name at position 10/23.      - Date (<code>t#mdcy</code>) at position 154 in <code>MM/DD/YYYY</code> format.      - User ID (<code>ps#usr</code>) and file group (<code>p$fgrp</code>) at position 10/20.      - Time (<code>t#hms</code>) at position 154 in <code>HH:MM:SS</code> format.      - Column headers (\"Co\", \"Slsm Id\", \"Salesman Name\", \"Email Address\", \"Del\") at positions 2, 10, 27, 58, and 100.    - Headers are printed at the start of the report and on overflow (line 62, as specified in <code>ovr(01)</code>). 3. Printer Configuration:    - The printer file uses a page size of 68 lines and 164 characters, 8 lines per inch, 15 characters per inch, with overflow at line 62.    - The output is sent to the job\u2019s output queue (<code>OUTQ(*JOB)</code>), with the spool file held (<code>HOLD(*YES)</code>) and saved (<code>SAVE(*YES)</code>). 4. Database Selection:    - Uses file overrides to select <code>gbbslsm</code> or <code>zbbslsm</code> based on <code>p$fgrp</code> (<code>G</code> or <code>Z</code>). 5. Record Inclusion:    - Includes all records from <code>bbslsm</code>, regardless of status (<code>smdel</code>), unlike <code>BB928P</code>, which can filter inactive records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database file: 1. bbslsm: Input file for salesman ID records, opened with <code>usropn</code>. Read sequentially to generate the report.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program: 1. QCMDEXC: Executes file override commands for <code>bbslsm</code> and <code>qsysprt</code>, and deletes the printer file override after printing.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB9285%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Printer File: <code>qsysprt</code> is a standard IBM i printer file, opened with <code>usropn</code> and configured for a 164-character wide report with overflow handling.</li> <li>Indicators: Uses <code>*inof</code> for printer overflow and <code>*in81</code>\u2013<code>*in85</code> for header printing control, but does not use display-related indicators (e.g., 19, 21\u201379) since it is a print-only program.</li> <li>Field Prefixes: Uses <code>c$</code> for the report header, <code>p$</code> for the input parameter, and standard database fields (<code>smco</code>, <code>smsmid</code>, etc.) without additional prefixes like <code>f$</code> or <code>s1</code> used in <code>BB928P</code> and <code>BB928</code>.</li> <li>Integration with BB928P: Called by <code>BB928P</code> for option 15 (F15) to print a salesman ID listing, passing the file group (<code>p$fgrp</code>) to determine the database file.</li> <li>Data Structures: Includes time (<code>t#</code>) and date (<code>d#</code>) conversion structures, used to format the report\u2019s date (<code>t#mdcy</code>) and time (<code>t#hms</code>) fields.</li> </ul> <p>This program is a straightforward report generator, complementing the interactive maintenance and inquiry functions of <code>BB928P</code>, <code>BB928</code>, and <code>BB9284</code> by providing a printed summary of all salesman ID records.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/","title":"BB928P RPGLE","text":"<p>The provided RPGLE program, <code>BB928P</code>, is designed to manage salesman IDs within a billing and invoicing system. It uses a display file with a subfile to interact with users, allowing them to view, create, update, inactivate, reactivate, or print salesman ID records. Below, I\u2019ll explain the process steps, list the external programs called, and identify the database tables used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#process-steps-of-the-bb928p-program","title":"Process Steps of the BB928P Program","text":"<p>The program follows a structured flow, primarily driven by user interaction with a subfile (SFL1) displayed on a workstation. Here\u2019s a breakdown of the key process steps based on the program\u2019s logic:</p> <ol> <li>Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameters: Receives input parameters <code>p$mode</code> (run mode: 'MNT' for maintenance or 'INQ' for inquiry) and <code>p$fgrp</code> (file group: 'Z' or 'G').</li> <li>Genie Check: Calls <code>GSGENIE2C</code> to verify if the program is running in a Genie environment. If <code>genievar</code> is not 'YES', the program closes all files and exits.</li> <li>Field Setup: Initializes subfile control fields, message handling fields, and key lists (<code>klsfl1</code>, <code>kls1s1</code>) for database access. Sets up date/time fields using the system timestamp.</li> <li> <p>Headers: Sets the display header (<code>c$hdr1</code>) from the <code>hdr</code> array.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> ('G' or 'Z'), applies database overrides using <code>ovg</code> or <code>ovz</code> arrays to point to the correct files (<code>gbbslsm</code>, <code>zbbslsm</code>, <code>gbicont</code>, <code>zbicont</code>).</li> <li> <p>File Open: Opens the database files <code>bbslsm</code>, <code>bbslsmrd</code> (renamed record format), and <code>bicont</code> for input.</p> </li> <li> <p>Subfile Processing (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages in the message subfile and <code>wrtmsg</code> to write the message subfile control.</li> <li>Subfile Initialization: Sets the subfile mode (<code>sfmod1</code>) to folded (<code>#fold = '0'</code>, <code>*in45 = *on</code>) and initializes control fields (<code>c1co</code>, <code>c1smid</code>) to zeros or blanks.</li> <li>Inactive Records Filter: Sets <code>w$inact</code> to <code>*on</code> (include inactive records) due to the <code>jb01</code> revision, which removed the F8 toggle functionality.</li> <li>Protection Mode: Sets <code>*in70</code> based on <code>p$mode</code> (<code>*off</code> for 'MNT', <code>*on</code> for 'INQ' to protect input fields in inquiry mode).</li> <li>Initial Positioning: Calls <code>sf1rep</code> to position the file and load the subfile initially.</li> <li> <p>Main Loop:</p> <ul> <li>Display: Writes the command line (<code>sflcmd1</code>) and message subfile if needed, checks if subfile records exist to set <code>*in41</code> (SFLDSP), and determines folded/unfolded mode (<code>*in45</code>).</li> <li>User Input: Displays the subfile control (<code>sflctl1</code>) using <code>exfmt</code> and processes user input based on function keys and direct input:</li> <li>F3 (Exit): Sets <code>sf1agn</code> to <code>*off</code> to exit the loop.</li> <li>F4 (Field Prompting): Calls <code>prompt</code> to set <code>*in19</code> for cursor positioning.</li> <li>F5 (Refresh): Clears positioning fields (<code>r$co</code>, <code>r$smid</code>) and sets <code>repsfl</code> to reposition the subfile.</li> <li>F8 (Toggle Inactive): Previously toggled <code>w$inact</code> to include/exclude inactive records, but <code>jb01</code> revision defaults to include all records.</li> <li>F15 (Print Listing): Calls <code>BB9285</code> to print a salesman ID listing, passing <code>p$fgrp</code> as a parameter, and displays a confirmation message.</li> <li>Direct Access: If <code>d1opt</code>, <code>d1co</code>, or <code>d1smid</code> are non-zero, calls <code>sf1dir</code> for direct processing (create, change, inactivate, or display).</li> <li>Page Down: Calls <code>sf1lod</code> to load more subfile records.</li> <li>Enter Key: Calls <code>sf1prc</code> to process subfile changes.</li> <li>Repositioning: If <code>c1co</code> or <code>c1smid</code> are non-zero, calls <code>sf1rep</code> to reposition the subfile. F10 clears cursor positioning (<code>row1</code>, <code>col1</code>).</li> <li>Cursor and Record Number: Updates cursor location (<code>row1</code>, <code>col1</code>) and sets the subfile record number (<code>rcdnb1</code>) based on <code>pagrrn</code>.</li> </ul> </li> <li> <p>Subfile Record Processing (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads subfile records (<code>sfl1</code>) using <code>readc</code> until no more changed records (<code>*in81</code>).</li> <li> <p>For each changed record, calls <code>sf1chg</code> to process user-selected options.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Stores selected values (<code>s1co</code>, <code>s1smid</code>) in <code>s$co</code>, <code>s$smid</code>.</li> <li>Processes options based on <code>s1opt</code>:<ul> <li>Option 2 (Change): If in maintenance mode (<code>p$mode = 'MNT'</code>) and the record is not deleted/inactive, calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): If in maintenance mode, calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> </ul> </li> <li> <p>Updates the subfile record after processing by chaining to <code>bbslsm</code>, clearing <code>s1opt</code>, formatting (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating <code>sfl1</code>.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets <code>rrn1</code>.</li> <li>Validates control input (<code>sf1cte</code>).</li> <li>Positions the file using <code>kls1s1</code> (based on <code>c1co</code>, <code>c1smid</code>) and loads the subfile (<code>sf1lod</code>).</li> <li> <p>Retains control fields (<code>r$co</code>, <code>r$smid</code>) for future repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for future input validation.</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Sets <code>rrn1</code> to the last saved record number (<code>rrnsv1</code>) and <code>rcdnb1</code> to the next record number for display.</li> <li>Loads up to <code>pagsz1</code> (14) records:<ul> <li>Reads the next record from <code>bbslsmrd</code>.</li> <li>Skips deleted/inactive records if <code>w$inact = *off</code>.</li> <li>Formats the subfile line (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes to <code>sfl1</code>.</li> </ul> </li> <li> <p>Updates <code>rrnsv1</code> with the last <code>rrn1</code>.</p> </li> <li> <p>Format Subfile Line (<code>sf1fmt</code> Subroutine):</p> </li> <li> <p>Clears the subfile record and populates fields (<code>s1co</code>, <code>s1smid</code>, <code>s1smnm</code>, <code>s1emal</code>, <code>s1del</code>) from the database record.</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets <code>*in72</code> (blue color) for deleted (<code>s1del = 'D'</code>) or inactive (<code>s1del = 'I'</code>) records.</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Validates direct input (<code>d1opt</code>, <code>d1co</code>, <code>d1smid</code>):</li> <li>For option 1 (create), ensures <code>d1co</code> and <code>d1smid</code> are non-zero and checks if the company number exists in <code>bicont</code>.</li> <li>Checks if the record exists in <code>bbslsm</code> to prevent duplicate creation or invalid updates.</li> <li>Processes valid options (1, 2, 4, 5) by calling <code>sf1s01</code>, <code>sf1s02</code>, <code>sf1s04</code>, or <code>sf1s05</code>.</li> <li>Clears input fields upon successful processing.</li> </ul> </li> <li> <p>Subfile Options:</p> <ul> <li>sf1s01 (Create): Calls <code>BB928</code> in maintenance mode, passing <code>s$co</code>, <code>s$smid</code>, <code>p$fgrp</code>, and mode 'MNT'. Displays a confirmation message if successful (<code>o$flag = '1'</code>).</li> <li>sf1s02 (Change): Checks if the record is not deleted/inactive, calls <code>BB928</code> in maintenance mode, and displays a confirmation message if successful.</li> <li>sf1s04 (Inactivate/Reactivate): Calls <code>BB9284</code>, processes the return flag ('I' for inactivated, 'A' for reactivated, 'E' for vendor-linked error), and displays a message.</li> <li>sf1s05 (Display): Calls <code>BB928</code> in inquiry mode to display the record.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Sets <code>*in19</code> to indicate a panel format change for cursor positioning.</li> </ul> </li> <li> <p>Message Handling:</p> <ul> <li>addmsg: Sends messages to the program message queue using <code>QMHSNDPM</code>, setting <code>dspmsg</code> to <code>*on</code>.</li> <li>wrtmsg: Writes the message subfile control (<code>msgctl</code>) with <code>*in49</code> enabled.</li> <li>clrmsg: Clears the message subfile using <code>QMHRMVPM</code>, preserving the current record format and <code>pagrrn</code>.</li> </ul> </li> <li> <p>Program Exit:</p> <ul> <li>Closes all files, sets <code>*inlr = *on</code>, and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. GSGENIE2C: Checks if the program is running in a Genie environment, returning <code>genievar</code> ('YES' or not). 2. QCMDEXC: Executes file override commands for <code>bbslsm</code>, <code>bbslsmrd</code>, and <code>bicont</code>. 3. QMHSNDPM: Sends messages to the program message queue. 4. QMHRMVPM: Removes messages from the program message queue. 5. BB928: Handles create, change, and display operations for salesman ID records, called with parameters for company, salesman ID, mode, file group, and return flag. 6. BB9284: Manages inactivate/reactivate operations for salesman ID records. 7. BB9285: Prints a salesman ID listing, called with the file group parameter.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#database-tables-used","title":"Database Tables Used","text":"<p>The program interacts with the following database files: 1. bbslsm: Primary input file for salesman ID records, opened with <code>usropn</code>. 2. bbslsmrd: Input file with a renamed record format (<code>bbslsmpr</code>) for salesman ID records, opened with <code>usropn</code>. 3. bicont: Input file for company records, used for validation, opened with <code>usropn</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/BB928P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Display File: <code>bb928pd</code> is a workstation file with a subfile (<code>sfl1</code>) and uses the <code>PROFOUNDUI(HANDLER)</code> for the user interface.</li> <li>Indicators: The program uses indicators (19, 21\u201379, 90\u201399) to control display behavior, error handling, and subfile operations.</li> <li>Field Prefixes: Uses prefixes like <code>f$</code>, <code>c1</code>, <code>s1</code>, <code>p$</code>, etc., to organize fields for display, control, and parameters.</li> <li>Revisions: The <code>jb01</code> revision (10/10/2023) modified the program to default to displaying all records (active and inactive) due to issues with Profound UI\u2019s F8 functionality.</li> </ul> <p>This program is a typical IBM i RPG application for interactive data management, leveraging subfiles for user interaction and database operations for data retrieval and manipulation.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/","title":"Summary BB928P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The RPGLE program call stack, consisting of <code>BB928P</code>, <code>BB928</code>, <code>BB9284</code>, and <code>BB9285</code>, implements a set of functionalities for managing salesman ID records within a billing and invoicing system on IBM i. These programs collectively support the following use cases:</p> <ol> <li>View Salesman ID Records:</li> <li> <p>Allows users to view a list of salesman ID records in a subfile, with options to filter by company number and salesman ID, and display all records (active and inactive) in inquiry mode.</p> </li> <li> <p>Create a Salesman ID Record:</p> </li> <li> <p>Enables users to create a new salesman ID record, specifying company number, salesman ID, name, and email address, ensuring the company exists and the record does not already exist.</p> </li> <li> <p>Update a Salesman ID Record:</p> </li> <li> <p>Permits users to modify existing salesman ID records (name and email address), protecting key fields (company number and salesman ID) to maintain data integrity.</p> </li> <li> <p>Inactivate/Reactivate a Salesman ID Record:</p> </li> <li> <p>Allows users to toggle the status of a salesman ID record between active (<code>A</code>) and inactive (<code>I</code>), ensuring the record exists and is in the appropriate state for the action.</p> </li> <li> <p>Print a Salesman ID Listing:</p> </li> <li>Generates a printed report of all salesman ID records, including company number, salesman ID, name, email address, and status, sorted by company and salesman ID.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#function-requirement-document-manage-salesman-id-records","title":"Function Requirement Document: Manage Salesman ID Records","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#salesman-id-management-function-requirements","title":"Salesman ID Management Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#purpose","title":"Purpose","text":"<p>The <code>ManageSalesmanID</code> function manages salesman ID records in a billing and invoicing system, supporting creation, update, inactivation/reactivation, and printing of records without interactive screen handling. It processes inputs directly and applies business rules to maintain data integrity.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>co</code>): Numeric, identifies the company (validated against <code>bicont</code>).</li> <li>Salesman ID (<code>smid</code>): Alphanumeric, unique identifier for the salesman.</li> <li>Salesman Name (<code>smnm</code>): Alphanumeric, required for create/update.</li> <li>Email Address (<code>emal</code>): Alphanumeric, required for create/update.</li> <li>File Group (<code>fgrp</code>): <code>G</code> or <code>Z</code>, selects database file (<code>gbbslsm</code> or <code>zbbslsm</code>).</li> <li>Operation (<code>op</code>): Enum (<code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, <code>REACTIVATE</code>, <code>PRINT</code>).</li> <li>Output Flag (<code>flag</code>): Output parameter, indicates success (<code>1</code>, <code>A</code>, <code>I</code>) or failure (<code>E</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>co</code> exists in <code>bicont</code>.</li> <li>For <code>CREATE</code>, verify <code>co</code> and <code>smid</code> do not exist in <code>bbslsm</code>.</li> <li>For <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>, verify <code>co</code> and <code>smid</code> exist in <code>bbslsm</code>.</li> <li>For <code>CREATE</code> and <code>UPDATE</code>, ensure <code>smnm</code> and <code>emal</code> are non-blank.</li> <li>For <code>INACTIVATE</code>, ensure the record is not already inactive (<code>smdel \u2260 'I'</code>).</li> <li> <p>For <code>REACTIVATE</code>, ensure the record is inactive (<code>smdel = 'I'</code>).</p> </li> <li> <p>Select Database File:</p> </li> <li> <p>Apply file override to use <code>gbbslsm</code> (if <code>fgrp = 'G'</code>) or <code>zbbslsm</code> (if <code>fgrp = 'Z'</code>).</p> </li> <li> <p>Execute Operation:</p> </li> <li>CREATE:<ul> <li>Write a new record to <code>bbslsm</code> with <code>co</code>, <code>smid</code>, <code>smnm</code>, <code>emal</code>, and <code>smdel = 'A'</code> (active).</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li>UPDATE:<ul> <li>Update the existing record in <code>bbslsm</code> with new <code>smnm</code> and <code>emal</code>, preserving <code>co</code>, <code>smid</code>, and <code>smdel</code>.</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li>INACTIVATE:<ul> <li>Update the record in <code>bbslsm</code>, setting <code>smdel = 'I'</code>.</li> <li>Set <code>flag = 'I'</code> on success.</li> </ul> </li> <li>REACTIVATE:<ul> <li>Update the record in <code>bbslsm</code>, setting <code>smdel = 'A'</code>.</li> <li>Set <code>flag = 'A'</code> on success.</li> </ul> </li> <li> <p>PRINT:</p> <ul> <li>Read all records from <code>bbslsm</code> sequentially.</li> <li>Generate a report to <code>qsysprt</code> with:</li> <li>Header: Company name, report title (\"Salesman Id Listing By Co#/Salesman Id\"), page number, job name, program name, user ID, file group, date (MM/DD/YYYY), time (HH:MM:SS), and column headers (\"Co\", \"Slsm Id\", \"Salesman Name\", \"Email Address\", \"Del\").</li> <li>Detail: For each record, print <code>smco</code>, <code>smsmid</code>, <code>smsmnm</code>, <code>smemal</code>, <code>smdel</code>.</li> <li>Format: 68 lines, 164 characters wide, 8 LPI, 15 CPI, overflow at line 62, held and saved in the job\u2019s output queue.</li> <li>Set <code>flag = '1'</code> on success.</li> </ul> </li> <li> <p>Handle Errors:</p> </li> <li>If <code>co</code> is invalid, set <code>flag = 'E'</code> and return error message \"Invalid company number.\"</li> <li>If <code>smnm</code> or <code>emal</code> is blank for <code>CREATE</code> or <code>UPDATE</code>, set <code>flag = 'E'</code> and return error message \"Salesman name and email required.\"</li> <li>If record exists for <code>CREATE</code> or does not exist for <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>, set <code>flag = 'E'</code> and return appropriate error message.</li> <li> <p>If status is invalid for <code>INACTIVATE</code> or <code>REACTIVATE</code>, set <code>flag = 'E'</code> and return error message \"Invalid record status.\"</p> </li> <li> <p>Clean Up:</p> </li> <li>Close all files and remove overrides.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Data Integrity:</li> <li>Company number must exist in <code>bicont</code>.</li> <li>Salesman ID must be unique for <code>CREATE</code> and exist for <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>.</li> <li>Salesman name and email address are mandatory for <code>CREATE</code> and <code>UPDATE</code>.</li> <li>Status Management:</li> <li>Records can be active (<code>A</code>), inactive (<code>I</code>), or deleted (<code>D</code>).</li> <li>Only non-inactive records can be inactivated; only inactive records can be reactivated.</li> <li>Report Generation:</li> <li>The <code>PRINT</code> operation includes all records, regardless of status, sorted by company number and salesman ID.</li> <li>The report is formatted with fixed positions and includes metadata (job, user, date, time).</li> <li>Database Selection:</li> <li>File group (<code>G</code> or <code>Z</code>) determines the database file (<code>gbbslsm</code> or <code>zbbslsm</code>).</li> <li>Error Handling:</li> <li>Invalid inputs or operations result in <code>flag = 'E'</code> with a descriptive error message.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Date and Time Formatting (for <code>PRINT</code>):</li> <li>Date: Converted to <code>MM/DD/YYYY</code> format using system timestamp (<code>ps#mdy</code>) and time conversion structure (<code>t#mdcy</code>).</li> <li>Time: Converted to <code>HH:MM:SS</code> format using system timestamp (<code>ps#hms</code>) and time conversion structure (<code>t#hms</code>).</li> <li>Page Overflow (for <code>PRINT</code>):</li> <li>Triggers header printing when the printer file reaches line 62, as defined in the printer override.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>Database Updates: Modified <code>bbslsm</code> records for <code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, or <code>REACTIVATE</code>.</li> <li>Report: Printed listing to <code>qsysprt</code> for <code>PRINT</code>.</li> <li>Flag: Returns <code>1</code> (success for <code>CREATE</code>, <code>UPDATE</code>, <code>PRINT</code>), <code>A</code> (success for <code>REACTIVATE</code>), <code>I</code> (success for <code>INACTIVATE</code>), or <code>E</code> (error).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB928P%20Salesman%20Email%20Add-Update/Summary%20BB928P%20RPGLE/#dependencies","title":"Dependencies","text":"<ul> <li>Database Files:</li> <li><code>bbslsm</code>: Salesman ID records (input for <code>PRINT</code>, update/add for others).</li> <li><code>bicont</code>: Company records (input for validation).</li> <li>External Programs:</li> <li><code>QCMDEXC</code>: Executes file overrides for <code>bbslsm</code> and <code>qsysprt</code>.</li> <li><code>QMHSNDPM</code>: Sends error messages to the program message queue.</li> <li><code>QMHRMVPM</code>: Removes messages from the program message queue.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/","title":"BB929 RPGLE","text":"<p>The <code>BB929</code> RPGLE program is part of the Billing and Invoicing system and is designed for CSR (Customer Service Representative) ID Entry Maintenance and Inquiry. It is called by the main program <code>BB929P</code> to handle the creation, modification, or inquiry of individual CSR records. Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#process-steps-of-the-rpgle-program-bb929","title":"Process Steps of the RPGLE Program (<code>BB929</code>)","text":"<p>The program is an interactive workstation-based application that uses a display file (<code>bb929d</code>) to present a single record format (<code>FMT01</code>) for maintaining or inquiring CSR ID records. It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, allowing users to create or update CSR records or view them without modification. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives five parameters:<ul> <li><code>p$co</code>: Company number (input).</li> <li><code>p$crid</code>: CSR ID (input).</li> <li><code>p$mode</code> (3 characters): Run mode (<code>MNT</code> for maintenance, <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> <li><code>p$flag</code> (1 character): Return flag (output, set to <code>1</code> on successful update/create).</li> </ul> </li> <li>Field Initialization:<ul> <li>Moves input parameters <code>p$co</code> and <code>p$crid</code> to display file fields <code>f$co</code> and <code>f$crid</code>.</li> <li>Initializes output parameters (<code>o$co</code>, <code>o$crid</code>, <code>o$mode</code>, <code>o$fgrp</code>, <code>o$flag</code>) to blanks or zeros.</li> <li>Sets up message handling fields (<code>dspmsg</code>, <code>m@pgmq</code>, <code>m@key</code>).</li> <li>Defines key list <code>klcsr</code> for accessing the <code>bbcsr</code> file using <code>f$co</code> and <code>f$crid</code>.</li> <li>Initializes flags (<code>fmtagn</code>, <code>delagn</code>, <code>winagn</code>) to <code>*OFF</code>.</li> </ul> </li> <li> <p>Commented Test Code: Includes commented-out code for testing with hardcoded values (e.g., <code>p$mode = 'MNT'</code>).</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>Z</code> or <code>G</code>), applies database overrides using the <code>QCMDEXC</code> API to redirect file access to the appropriate library (<code>gbbcsr</code> or <code>zbcsr</code> for <code>bbcsr</code>, <code>gbicont</code> or <code>zbicont</code> for <code>bicont</code>).</li> <li>File Opening: Opens two files:<ul> <li><code>bbcsr</code> (update/add, keyed access).</li> <li><code>bicont</code> (input-only, keyed access).</li> </ul> </li> <li> <p>Company Validation: Chains to <code>bicont</code> using <code>f$co</code> to validate the company number (no specific error handling is implemented here).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Record Retrieval: Chains to <code>bbcsr</code> using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>) to check if the record exists.<ul> <li>If <code>*IN99</code> is <code>*ON</code> (record not found), clears the <code>bbcsrpf</code> record format and sets <code>w$exists</code> to <code>*OFF</code>.</li> <li>If <code>*IN99</code> is <code>*OFF</code> (record found), sets <code>w$exists</code> to <code>*ON</code>.</li> </ul> </li> <li> <p>Header and Protection Setup:</p> <ul> <li>If <code>p$mode</code> is <code>MNT</code>, sets <code>*IN70</code> to <code>*OFF</code> (no global protection) and sets the header <code>c$hdr1</code> to \"CSR Id Entry Maintenance\".</li> <li>If <code>p$mode</code> is <code>INQ</code>, sets <code>*IN70</code> to <code>*ON</code> (global protection) and sets <code>c$hdr1</code> to \"CSR Id Inquiry\".</li> </ul> </li> <li> <p>Process Panel Formats (<code>srfmt</code> Subroutine):</p> </li> <li>Clear Screen: Writes the <code>clrscr</code> format to clear the display.</li> <li>Initialize Format: Calls <code>f01mov</code> to initialize fields for the <code>FMT01</code> format and sets <code>w$fmt</code> to <code>FMT01</code>.</li> <li> <p>Main Loop (<code>fmtagn</code>):</p> <ul> <li>Display Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>clrscr</code>.</li> <li>Clear Format Change Indicator: Sets <code>*IN19</code> to <code>*OFF</code>.</li> <li>Display Format: </li> <li>If <code>w$fmt</code> is <code>FMT01</code>, calls <code>f01pro</code> to set protection indicators and executes <code>exfmt fmt01</code> to display the format and accept user input.</li> <li>If <code>w$fmt</code> is not <code>FMT01</code>, defaults to processing <code>FMT01</code> (note: <code>FMT02</code> is commented out, indicating it may not be used).</li> <li>Clear Error Indicators: Resets indicators <code>*IN50</code> to <code>*IN69</code> to zero.</li> <li>Clear Cursor Position: Clears <code>row</code> and <code>col</code>.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Process Format Input: If the current format is <code>FMT01</code>, calls <code>f01sr</code> to process user input.</li> <li>The loop continues until <code>fmtagn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Process Format (<code>f01sr</code> Subroutine):</p> </li> <li> <p>Handle User Input:</p> <ul> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting.</li> <li>F10 (Position Cursor Home): Clears <code>row</code> and <code>col</code> to reposition the cursor.</li> <li>F12 (Exit): Sets <code>fmtagn</code> to <code>*OFF</code> to exit the loop.</li> <li>Inquiry Mode: If <code>p$mode</code> is <code>INQ</code>, calls <code>f01nxt</code> to determine the next format (which terminates the loop since <code>*IN19</code> is <code>*OFF</code>).</li> <li>Enter Key:</li> <li>Calls <code>f01edt</code> to validate input fields.</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>) and in <code>MNT</code> mode, calls <code>upddbf</code> to update the database.</li> <li>Calls <code>f01nxt</code> to determine the next format (terminates the loop if <code>*IN19</code> is <code>*OFF</code>).</li> </ul> </li> <li> <p>Determine Next Format (<code>f01nxt</code> Subroutine):</p> </li> <li>If <code>*IN19</code> is <code>*OFF</code>, sets <code>fmtagn</code> to <code>*OFF</code> to exit the main loop.</li> <li> <p>(Note: Code for <code>FMT02</code> is commented out, suggesting only <code>FMT01</code> is used.)</p> </li> <li> <p>Edit Format Input (<code>f01edt</code> Subroutine):</p> </li> <li>Validate CSR Name: If <code>crcrnm</code> (CSR name) is blank, sets error <code>ERR0012</code>, sets <code>*IN50</code> and <code>*IN51</code> to <code>*ON</code>, and calls <code>addmsg</code>.</li> <li>Validate Email Address: If <code>cremal</code> (email address) is blank, sets error <code>ERR0012</code>, sets <code>*IN50</code> and <code>*IN52</code> to <code>*ON</code>, and calls <code>addmsg</code>.</li> <li> <p>Inquiry Mode: If <code>p$mode</code> is <code>INQ</code>, clears error indicators (<code>*IN50</code> to <code>*IN69</code>) and clears messages using <code>clrmsg</code>.</p> </li> <li> <p>Initialize Format Field Values (<code>f01mov</code> Subroutine):</p> </li> <li>Calls <code>f01edt</code> to validate fields.</li> <li> <p>If errors exist (<code>*IN50</code> is <code>*ON</code>), clears error indicators and messages.</p> </li> <li> <p>Format Protection Schemes (<code>f01pro</code> Subroutine):</p> </li> <li>Clears protection indicators <code>*IN70</code> to <code>*IN74</code> to <code>0</code>.</li> <li>If <code>p$mode</code> is not <code>MNT</code> (i.e., <code>INQ</code>), sets <code>*IN70</code> to <code>*IN73</code> to <code>1</code> for global input protection.</li> <li> <p>If in <code>MNT</code> mode and the record exists (<code>w$exists</code> is <code>*ON</code>), sets <code>*IN71</code> to <code>*ON</code> to protect key fields (<code>f$co</code>, <code>f$crid</code>).</p> </li> <li> <p>Update Database (<code>upddbf</code> Subroutine):</p> <ul> <li>Saves the current <code>wkds01</code> (external data structure for <code>bbcsr</code>) to <code>svds</code>.</li> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>:</li> <li>If the record exists (<code>*IN80</code> is <code>*OFF</code>):<ul> <li>If <code>svds</code> differs from <code>wkds01</code> (indicating changes), restores <code>svds</code> to <code>wkds01</code>, updates the <code>bbcsrpf</code> record, and sets <code>p$flag</code> to <code>1</code>.</li> <li>If no changes, forces end-of-data (<code>feod</code>) on <code>bbcsr</code>.</li> </ul> </li> <li>If the record does not exist (<code>*IN80</code> is <code>*ON</code>):<ul> <li>Clears <code>bbcsrpf</code>, restores <code>svds</code> to <code>wkds01</code>, sets <code>crco</code> (company), <code>crcrid</code> (CSR ID), and <code>crdel</code> to <code>A</code> (active), writes the new record, and sets <code>p$flag</code> to <code>1</code>.</li> </ul> </li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Calculates cursor position (<code>row</code>, <code>col</code>) using <code>csrloc</code>.</li> <li>Checks the current format (<code>rcdnam</code> = <code>FMT01</code>) but has no specific logic implemented (likely a placeholder for field-specific prompting).</li> <li>Sets <code>*IN19</code> to <code>*ON</code> to indicate a panel format change.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> <li>Write Message Subfile (<code>wrtmsg</code>):</li> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> <li>Clear Message Subfile (<code>clrmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Saves and restores <code>rcdnam</code> and <code>pagrrn</code>.</li> <li>Clears messages using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB929</code> program enforces the following business rules for managing CSR ID records:</p> <ol> <li>Operational Modes:</li> <li>Maintenance Mode (<code>MNT</code>): Allows creation and updating of CSR records. Key fields (<code>f$co</code>, <code>f$crid</code>) are protected if the record already exists (<code>w$exists</code> is <code>*ON</code>). Input validation is performed, and the database is updated if no errors occur.</li> <li> <p>Inquiry Mode (<code>INQ</code>): Displays CSR records in read-only mode, with all input fields protected (<code>*IN70</code> to <code>*IN73</code> set to <code>1</code>). No database updates are performed.</p> </li> <li> <p>Input Validation:</p> </li> <li>CSR Name (<code>crcrnm</code>): Must not be blank; otherwise, error <code>ERR0012</code> is displayed, and <code>*IN51</code> is set.</li> <li>Email Address (<code>cremal</code>): Must not be blank; otherwise, error <code>ERR0012</code> is displayed, and <code>*IN52</code> is set.</li> <li> <p>In inquiry mode, validation errors are cleared, and no updates are attempted.</p> </li> <li> <p>Database Operations:</p> </li> <li>Create Record: If the record does not exist (<code>*IN80</code> is <code>*ON</code>), a new record is written to <code>bbcsr</code> with <code>crdel</code> set to <code>A</code> (active).</li> <li>Update Record: If the record exists and changes are detected (<code>svds</code> differs from <code>wkds01</code>), the record is updated.</li> <li>No Changes: If no changes are detected, the file is set to end-of-data (<code>feod</code>).</li> <li> <p>Success Flag: Sets <code>p$flag</code> to <code>1</code> on successful create or update.</p> </li> <li> <p>Field Protection:</p> </li> <li>In maintenance mode, key fields (<code>f$co</code>, <code>f$crid</code>) are protected for existing records to prevent modification.</li> <li> <p>In inquiry mode, all input fields are protected to prevent any changes.</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>The program uses the <code>p$fgrp</code> parameter to determine the file library (<code>Z</code> or <code>G</code>) and applies overrides to access <code>gbbcsr</code> or <code>zbcsr</code> for <code>bbcsr</code>, and <code>gbicont</code> or <code>zbicont</code> for <code>bicont</code>.</p> </li> <li> <p>User Interface:</p> </li> <li>Displays a single format (<code>FMT01</code>) for entering or viewing CSR data.</li> <li>Supports function keys:<ul> <li>F04: Initiates field prompting (logic not fully implemented).</li> <li>F10: Repositions the cursor to the home position.</li> <li>F12: Exits the program.</li> </ul> </li> <li> <p>Provides message feedback for validation errors and successful operations.</p> </li> <li> <p>Message Handling:</p> </li> <li>Uses the <code>GSMSGF</code> message file in <code>*LIBL</code> for error messages (e.g., <code>ERR0012</code> for blank fields).</li> <li>Displays messages in a message subfile (<code>msgctl</code>) and clears them as needed.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb929d:    - Type: Workstation file (display file).    - Usage: Contains the <code>FMT01</code> format (and possibly <code>FMT02</code>, commented out) for user interaction, along with a message subfile (<code>msgctl</code>) and clear screen format (<code>clrscr</code>).    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (update/add, keyed access).    - Usage: Stores CSR records, used for creating, updating, and retrieving records. Accessed using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 3. bicont:    - Type: Physical file (input-only, keyed access).    - Usage: Used to validate the company number (<code>f$co</code>).    - Override: Redirected to <code>gbicont</code> or <code>zbicont</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs (all IBM i APIs): 1. QCMDEXC:    - Purpose: Executes file override commands to redirect <code>bbcsr</code> and <code>bicont</code> to the appropriate library.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 2. QMHSNDPM:    - Purpose: Sends messages (e.g., error <code>ERR0012</code>) to the program message queue for display in the message subfile.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 3. QMHRMVPM:    - Purpose: Clears messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB929</code> RPGLE program, called by <code>BB929P</code>, is responsible for the maintenance and inquiry of individual CSR ID records in the Billing and Invoicing system. It operates in <code>MNT</code> or <code>INQ</code> mode, allowing users to create or update CSR records (with validation for non-blank name and email fields) or view them in read-only mode. The program uses a single display format (<code>FMT01</code>) with Profound UI integration, enforces field protection based on mode and record existence, and updates the <code>bbcsr</code> file accordingly. It validates the company number against <code>bicont</code> and uses file overrides to access the correct library (<code>Z</code> or <code>G</code>). The program relies on IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) for file overrides and message handling, and interacts with three files: <code>bb929d</code> (display), <code>bbcsr</code> (CSR data), and <code>bicont</code> (company validation).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/","title":"BB9294 RPGLE","text":"<p>The <code>BB9294</code> RPGLE program is part of the Billing and Invoicing system and is designed to handle the Inactivation and Reactivation of Customer Service Representative (CSR) IDs. It is called by the main program <code>BB929P</code> to toggle the status of a CSR record between active (<code>A</code>) and inactive (<code>I</code>). Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#process-steps-of-the-rpgle-program-bb9294","title":"Process Steps of the RPGLE Program (<code>BB9294</code>)","text":"<p>The program is an interactive workstation-based application that uses a display file (<code>bb9294d</code>) to present a window format (<code>actwdw</code>) for confirming the inactivation or reactivation of a CSR record. It updates the <code>crdel</code> field in the <code>bbcsr</code> file to reflect the status change. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives four parameters:<ul> <li><code>p$co</code>: Company number (input).</li> <li><code>p$crid</code>: CSR ID (input).</li> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> <li><code>p$flag</code> (1 character): Return flag (output, set to <code>A</code> for reactivation or <code>I</code> for inactivation).</li> </ul> </li> <li>Field Initialization:<ul> <li>Moves input parameters <code>p$co</code> and <code>p$crid</code> to display file fields <code>f$co</code> and <code>f$crid</code>.</li> <li>Defines key list <code>klcsr</code> for accessing the <code>bbcsr</code> file using <code>f$co</code> and <code>f$crid</code>.</li> <li>Sets <code>winagn</code> to <code>*ON</code> to control the window processing loop.</li> <li>Initializes message handling fields (<code>dspmsg</code> to blank, <code>m@pgmq</code> to <code>*</code>, <code>m@key</code> to blanks).</li> <li>Defines a parameter list (<code>pld010</code>) for date validation (not used in the provided code).</li> </ul> </li> <li> <p>Commented Test Code: Includes commented-out code for testing with hardcoded values (e.g., <code>p$co = '10'</code>, <code>p$crid = 'JGK'</code>).</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on <code>p$fgrp</code> (<code>Z</code> or <code>G</code>), applies a database override using the <code>QCMDEXC</code> API to redirect access to the <code>bbcsr</code> file to either <code>gbbcsr</code> or <code>zbcsr</code>.</li> <li> <p>File Opening: Opens the <code>bbcsr</code> file (update/add, keyed access).</p> </li> <li> <p>Retrieve Data (<code>rtvdta</code> Subroutine):</p> </li> <li>Chains to <code>bbcsr</code> using <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>) to retrieve the CSR record.</li> <li> <p>If the record exists (<code>*IN99</code> is <code>*OFF</code>):</p> <ul> <li>If <code>crdel</code> is <code>I</code> (inactive):</li> <li>Sets the header <code>f$hdr</code> to \"CSR Id Entry ReActivate\" (<code>hdr(01)</code>).</li> <li>Sets the function key label <code>f$fkyd</code> to \"F22=ReActivate\" (<code>fky(01)</code>).</li> <li>Sets <code>*IN72</code> to <code>*ON</code> (likely for display formatting, e.g., color).</li> <li>If <code>crdel</code> is not <code>I</code> (active or other status):</li> <li>Sets <code>f$hdr</code> to \"CSR Id Entry InActivate\" (<code>hdr(02)</code>).</li> <li>Sets <code>f$fkyd</code> to \"F23=InActivate\" (<code>fky(02)</code>).</li> <li>Sets <code>*IN73</code> to <code>*ON</code>.</li> </ul> </li> <li> <p>Process Window (<code>prcwdw</code> Subroutine):</p> </li> <li> <p>Main Loop (<code>winagn</code>):</p> <ul> <li>Display Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code> to display the message subfile; otherwise, writes <code>msgclr</code> to clear messages.</li> <li>Display Window: Executes <code>exfmt actwdw</code> to display the window format and accept user input.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Error Indicators: Resets indicators <code>*IN50</code> to <code>*IN69</code> to zero.</li> <li>Cursor Positioning: Contains commented-out code for calculating cursor position (<code>row</code>, <code>col</code>) using <code>csrloc</code>.</li> <li>Process User Input:</li> <li>F12 (Exit): Sets <code>winagn</code> to <code>*OFF</code> to exit the loop.</li> <li>F22 or F23 (ReActivate/InActivate):<ul> <li>Calls <code>winedt</code> to validate input (which calls <code>chkact</code>).</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), calls <code>winupd</code> to update the database and sets <code>winagn</code> to <code>*OFF</code> to exit.</li> </ul> </li> <li>Other (e.g., Enter): Calls <code>winedt</code> to validate input (no further action unless F22/F23 is pressed).</li> <li>The loop continues until <code>winagn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Edit Window Input (<code>winedt</code> Subroutine):</p> </li> <li> <p>Calls <code>chkact</code> to check activity prior to status change (no logic implemented in <code>chkact</code>).</p> </li> <li> <p>Check Activity (<code>chkact</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended as a placeholder for checking if the CSR ID is used in other tables (e.g., vendor table, as indicated by the <code>E</code> flag in <code>BB929P</code>).</p> </li> <li> <p>Update Database (<code>winupd</code> Subroutine):</p> </li> <li>ReActivate (F22):<ul> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>.</li> <li>If the record exists (<code>*IN99</code> is <code>*OFF</code>) and <code>crdel</code> is <code>I</code> (inactive):</li> <li>Sets <code>crdel</code> to <code>A</code> (active).</li> <li>Updates the <code>bbcsrpf</code> record.</li> <li>Sets <code>p$flag</code> to <code>A</code> to indicate successful reactivation.</li> </ul> </li> <li> <p>InActivate (F23):</p> <ul> <li>Chains to <code>bbcsr</code> using <code>klcsr</code>.</li> <li>If the record exists (<code>*IN99</code> is <code>*OFF</code>) and <code>crdel</code> is not <code>I</code> (e.g., active):</li> <li>Sets <code>crdel</code> to <code>I</code> (inactive).</li> <li>Updates the <code>bbcsrpf</code> record.</li> <li>Sets <code>p$flag</code> to <code>I</code> to indicate successful inactivation.</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> </li> <li>Add Message (<code>addmsg</code>):<ul> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> </ul> </li> <li>Write Message Subfile (<code>wrtmsg</code>):<ul> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> </ul> </li> <li> <p>Clear Message Subfile (<code>clrmsg</code>):</p> <ul> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Calls <code>QMHRMVPM</code> to clear messages (note: saving/restoring <code>rcdnam</code> and <code>pagrrn</code> is commented out, suggesting a simplified message clearing process).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB9294</code> program enforces the following business rules for inactivating or reactivating CSR IDs:</p> <ol> <li>Purpose:</li> <li> <p>The program toggles the status of a CSR record in the <code>bbcsr</code> file by updating the <code>crdel</code> field between <code>A</code> (active) and <code>I</code> (inactive).</p> </li> <li> <p>Input Parameters:</p> </li> <li>Requires <code>p$co</code> (company number) and <code>p$crid</code> (CSR ID) to identify the record.</li> <li>Uses <code>p$fgrp</code> to determine the file library (<code>Z</code> or <code>G</code>).</li> <li> <p>Returns <code>p$flag</code> as <code>A</code> (reactivated), <code>I</code> (inactivated), or unchanged if no action is taken.</p> </li> <li> <p>Status Toggle:</p> </li> <li>ReActivate (F22): Only allowed if the record exists and <code>crdel</code> is <code>I</code>. Sets <code>crdel</code> to <code>A</code> and updates the record.</li> <li>InActivate (F23): Only allowed if the record exists and <code>crdel</code> is not <code>I</code>. Sets <code>crdel</code> to <code>I</code> and updates the record.</li> <li> <p>If the record does not exist (<code>*IN99</code> is <code>*ON</code>), no update is performed, and <code>p$flag</code> remains unchanged.</p> </li> <li> <p>Activity Check:</p> </li> <li> <p>The <code>chkact</code> subroutine is a placeholder, suggesting a business rule to check for dependencies (e.g., CSR ID used in a vendor table, as indicated by the <code>E</code> flag in <code>BB929P</code>). However, no logic is implemented, so no validation occurs.</p> </li> <li> <p>User Interface:</p> </li> <li>Displays a window (<code>actwdw</code>) with a header and function key label that reflect the current record status:<ul> <li>If inactive (<code>crdel = 'I'</code>), shows \"CSR Id Entry ReActivate\" and \"F22=ReActivate\".</li> <li>If active, shows \"CSR Id Entry InActivate\" and \"F23=InActivate\".</li> </ul> </li> <li>Supports function keys:<ul> <li>F12: Exits the program without changes.</li> <li>F22: Triggers reactivation.</li> <li>F23: Triggers inactivation.</li> </ul> </li> <li> <p>Provides message feedback using the <code>GSMSGF</code> message file (though no specific error messages are used in the provided code).</p> </li> <li> <p>File Overrides:</p> </li> <li> <p>Uses <code>p$fgrp</code> to apply overrides, redirecting <code>bbcsr</code> to <code>gbbcsr</code> or <code>zbcsr</code> based on the file group.</p> </li> <li> <p>Message Handling:</p> </li> <li>Displays messages in a message subfile (<code>msgctl</code>) and clears them as needed. The <code>com</code> array includes a placeholder error message, but it is not used in the code.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb9294d:    - Type: Workstation file (display file).    - Usage: Contains the <code>actwdw</code> format for the inactivation/reactivation window, along with a message subfile (<code>msgctl</code>) and clear message format (<code>msgclr</code>).    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (update/add, keyed access).    - Usage: Stores CSR records, used to retrieve and update the <code>crdel</code> field for status changes. Accessed using the key list <code>klcsr</code> (<code>f$co</code>, <code>f$crid</code>).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program (an IBM i API): 1. QCMDEXC:    - Purpose: Executes the file override command to redirect <code>bbcsr</code> to the appropriate library.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 2. QMHSNDPM:    - Purpose: Sends messages to the program message queue for display in the message subfile.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 3. QMHRMVPM:    - Purpose: Clears messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9294%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB9294</code> RPGLE program, called by <code>BB929P</code>, is responsible for toggling the status of CSR ID records between active (<code>A</code>) and inactive (<code>I</code>) in the <code>bbcsr</code> file. It presents a confirmation window (<code>actwdw</code>) with dynamic headers and function key labels based on the current record status, allowing users to reactivate (F22) or inactivate (F23) a record. The program enforces rules to ensure status changes are only applied to existing records with the appropriate current status, and it uses file overrides to access the correct library (<code>Z</code> or <code>G</code>). It interacts with two files: <code>bb9294d</code> (display) and <code>bbcsr</code> (CSR data), and relies on IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) for file overrides and message handling. The <code>chkact</code> subroutine suggests a potential business rule for dependency checking, but it is not implemented in the provided code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/","title":"BB9295 RPGLE","text":"<p>The <code>BB9295</code> RPGLE program is part of the Billing and Invoicing system and is designed to generate a printed listing of Customer Service Representative (CSR) IDs from the <code>bbcsr</code> file. It is called by the main program <code>BB929P</code> when the user presses F15 to produce a report. Below, I will explain the process steps, outline the business rules, list the tables used, and identify any external programs called.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#process-steps-of-the-rpgle-program-bb9295","title":"Process Steps of the RPGLE Program (<code>BB9295</code>)","text":"<p>The program is a batch-style printing application that reads all records from the <code>bbcsr</code> file and outputs them to a printer file (<code>qsysprt</code>) in a formatted report. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives one parameter:<ul> <li><code>p$fgrp</code> (1 character): File group (<code>Z</code> or <code>G</code>) for database overrides.</li> </ul> </li> <li>Field Initialization:<ul> <li>Sets the report header <code>c$hdr1</code> to \"CSR Id Listing By Co#/Cust Service Rep Id\" from the <code>hdr</code> array.</li> <li>Sets <code>prtovr</code> to <code>*ON</code> to trigger printing the report header initially.</li> <li>Calls <code>opntbl</code> to open the database file with the appropriate override.</li> </ul> </li> <li> <p>Data Structures:</p> <ul> <li>Initializes time (<code>t#time</code>, <code>t#hms</code>, etc.) and date (<code>d#cymd</code>, <code>d#mdy</code>, etc.) conversion data structures for formatting the report header.</li> <li>Uses the program status data structure (<code>psds##</code>) to retrieve environment details like job name (<code>ps#jobn</code>), user (<code>ps#usr</code>), and current date/time (<code>ps#mdy</code>, <code>ps#hms</code>).</li> <li>Uses the printer file data structure (<code>prtf_opn</code>) to access printer file details like file name (<code>prtf_name</code>) and spool file number (<code>prtf_spl#</code>).</li> </ul> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: If <code>p$fgrp</code> is <code>G</code> or <code>Z</code>, applies database overrides using the <code>QCMDEXC</code> API to redirect the <code>bbcsr</code> file to either <code>gbbcsr</code> or <code>zbcsr</code>.<ul> <li>Iterates twice to apply overrides from the <code>ovg</code> or <code>ovz</code> arrays (though only one override is needed for <code>bbcsr</code>).</li> <li>Calls <code>QCMDEXC</code> with the override command (<code>dbov##</code>) and length (<code>dbol## = 80</code>).</li> </ul> </li> <li> <p>File Opening: Opens the <code>bbcsr</code> file (input-only, keyed access).</p> </li> <li> <p>Print Listing (<code>prtlist</code> Subroutine):</p> </li> <li>Open Printer File: Calls <code>openprtf</code> to set up and open the printer file.</li> <li>Read and Print Loop:<ul> <li>Reads the <code>bbcsr</code> file sequentially until the last record (<code>*INLR</code> is <code>*ON</code>).</li> <li>For each record:</li> <li>Calls <code>ovrflo</code> to handle page overflow and print headers as needed.</li> <li>Prints the detail line (<code>dtl01</code>) containing <code>crco</code> (company), <code>crcrid</code> (CSR ID), <code>crcrnm</code> (CSR name), <code>cremal</code> (email address), and <code>crdel</code> (delete flag).</li> </ul> </li> <li> <p>Close Printer File: Calls <code>closprtf</code> to close the printer file and clean up overrides.</p> </li> <li> <p>Process Overflow (<code>ovrflo</code> Subroutine):</p> </li> <li>Checks if the printer file has reached overflow (<code>*INOF</code> is <code>*ON</code>).<ul> <li>If true, sets <code>prtovr</code> to <code>*ON</code> and sets indicators <code>*IN81</code> to <code>*IN85</code> to <code>1</code>.</li> </ul> </li> <li> <p>If <code>prtovr</code> is <code>*ON</code>:</p> <ul> <li>Prints the report header (<code>hdr01</code>).</li> <li>Sets <code>prtovr</code> to <code>*OFF</code>.</li> </ul> </li> <li> <p>Open Printer File (<code>openprtf</code> Subroutine):</p> </li> <li>Constructs a printer override command by concatenating <code>ovr(01)</code> and <code>ovr(02)</code> (specifying page size, lines per inch, characters per inch, overflow line, output queue, form type, hold, and save options).</li> <li>Calls <code>QCMDEXC</code> to execute the override command.</li> <li> <p>Opens the <code>qsysprt</code> printer file.</p> </li> <li> <p>Close Printer File (<code>closprtf</code> Subroutine):</p> </li> <li>Closes the <code>qsysprt</code> printer file.</li> <li> <p>Executes a delete override command (<code>ovr(03) = DLTOVR FILE(QSYSPRT)</code>) using <code>QCMDEXC</code> to clean up the printer file override.</p> </li> <li> <p>Program Termination:</p> </li> <li>The mainline logic does not explicitly close files or set <code>*INLR</code>, as this is handled in the <code>prtlist</code> and <code>closprtf</code> subroutines. The program returns after completing the print job.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The <code>BB9295</code> program enforces the following business rules for generating the CSR ID listing:</p> <ol> <li>Purpose:</li> <li> <p>Produces a printed report listing all CSR records from the <code>bbcsr</code> file, including company number (<code>crco</code>), CSR ID (<code>crcrid</code>), CSR name (<code>crcrnm</code>), email address (<code>cremal</code>), and delete flag (<code>crdel</code>).</p> </li> <li> <p>Report Format:</p> </li> <li>Header:<ul> <li>Includes the company name (\"American Refining Group\"), report title (<code>c$hdr1</code>), page number, job details (name, program, user), file group (<code>p$fgrp</code>), date (<code>t#mdcy</code>), and time (<code>t#hms</code>).</li> <li>Prints column headings: \"Co\", \"CSR Id\", \"CSR Name\", \"Email Address\", and \"Del\".</li> <li>Uses a fixed-width format (164 characters, as specified in the printer file definition).</li> </ul> </li> <li>Detail Lines:<ul> <li>Each record is printed with fields aligned at specific positions: <code>crco</code> (position 2), <code>crcrid</code> (position 8), <code>crcrnm</code> (position 44), <code>cremal</code> (position 95), <code>crdel</code> (position 100).</li> </ul> </li> <li> <p>Page Layout:</p> <ul> <li>Page size is 68 lines by 164 characters, with 8 lines per inch (LPI), 15 characters per inch (CPI), and overflow at line 62.</li> <li>The report is held (<code>HOLD(*YES)</code>) and saved (<code>SAVE(*YES)</code>) in the job\u2019s output queue (<code>OUTQ(*JOB)</code>).</li> </ul> </li> <li> <p>File Overrides:</p> </li> <li>Uses <code>p$fgrp</code> to redirect <code>bbcsr</code> to <code>gbbcsr</code> (for <code>G</code>) or <code>zbcsr</code> (for <code>Z</code>).</li> <li> <p>Applies printer file overrides to configure <code>qsysprt</code> with specific formatting and output options.</p> </li> <li> <p>Data Inclusion:</p> </li> <li> <p>Reads all records from <code>bbcsr</code> sequentially, including active, inactive, or deleted records (no filtering based on <code>crdel</code>).</p> </li> <li> <p>Output Handling:</p> </li> <li>The report is sent to the system printer file (<code>qsysprt</code>) and spooled for later retrieval.</li> <li>Overflow is managed by printing headers when the page limit (line 62) is reached.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bbcsr:    - Type: Physical file (input-only, keyed access).    - Usage: Source of CSR records for the report, containing fields <code>crco</code> (company), <code>crcrid</code> (CSR ID), <code>crcrnm</code> (CSR name), <code>cremal</code> (email address), and <code>crdel</code> (delete flag).    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 2. qsysprt:    - Type: Printer file (output, 164 characters wide).    - Usage: Outputs the formatted report with headers (<code>hdr01</code>) and detail lines (<code>dtl01</code>).    - Override: Configured with <code>OVRPRTF</code> to set page size (68x164), LPI (8), CPI (15), overflow (line 62), and output queue options (hold and save).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external program (an IBM i API): 1. QCMDEXC:    - Purpose: Executes file override commands for <code>bbcsr</code> (to <code>gbbcsr</code> or <code>zbcsr</code>) and printer file overrides for <code>qsysprt</code> (including <code>OVRPRTF</code> and <code>DLTOVR</code>).    - Parameters:      - <code>dbov##</code> (160 characters for printer overrides, 80 for database overrides, containing the override command).      - <code>dbol##</code> (15.5, command length, set to 160 for printer overrides, 80 for database overrides).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB9295%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB9295</code> RPGLE program, called by <code>BB929P</code> when F15 is pressed, generates a printed report of all CSR ID records from the <code>bbcsr</code> file. It reads records sequentially, formats them into a 164-character-wide report with headers and detail lines, and outputs to the <code>qsysprt</code> printer file. The report includes company number, CSR ID, name, email, and status, with headers showing job details, date, time, and file group. The program uses file overrides to access the correct <code>bbcsr</code> library (<code>Z</code> or <code>G</code>) and configures the printer file with specific formatting options. It relies on the <code>QCMDEXC</code> API for overrides and manages page overflow to ensure proper pagination. The program interacts with two files: <code>bbcsr</code> (data source) and <code>qsysprt</code> (output).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/","title":"BB929P RPGLE","text":"<p>The provided document is an RPGLE program named <code>BB929P</code>, part of a Billing and Invoicing system, designed to manage Customer Service Representative (CSR) IDs. Below, I will explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#process-steps-of-the-rpgle-program-bb929p","title":"Process Steps of the RPGLE Program (<code>BB929P</code>)","text":"<p>The program is a workstation-based interactive application that uses a subfile (SFL) to display and manage CSR IDs. It operates in either maintenance (<code>MNT</code>) or inquiry (<code>INQ</code>) mode, with functionality to create, change, inactivate/reactivate, and display CSR records. Below is a step-by-step explanation of its process flow, based on the mainline logic and subroutines:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Parameter Reception: The program receives two input parameters:<ul> <li><code>p$mode</code> (3 characters): Specifies the run mode (<code>MNT</code> for maintenance or <code>INQ</code> for inquiry).</li> <li><code>p$fgrp</code> (1 character): Specifies the file group (<code>Z</code> or <code>G</code>) for database overrides.</li> </ul> </li> <li>Genie Check: The program checks if it is being called from the Genie environment by calling <code>GSGENIE2C</code>. If <code>genievar</code> is not <code>YES</code>, the program closes all files and terminates.</li> <li>Field Initialization: Initializes various fields, including:<ul> <li>Subfile control fields (e.g., <code>rrn1</code>, <code>rrnsv1</code>, <code>pagsz1</code> set to 14 for page size).</li> <li>Message handling fields (e.g., <code>dspmsg</code>, <code>m@pgmq</code>).</li> <li>Current date and time (<code>t#time</code>, <code>t#cymd</code>).</li> <li>Key lists (<code>klsfl1</code>, <code>kls1s1</code>) for file access.</li> </ul> </li> <li> <p>Header Setup: Sets the display header (<code>c$hdr1</code>) from the <code>hdr</code> array.</p> </li> <li> <p>Open Database Tables (<code>opntbl</code> Subroutine):</p> </li> <li>File Overrides: Based on the <code>p$fgrp</code> parameter (<code>Z</code> or <code>G</code>), applies database overrides using the <code>QCMDEXC</code> API to redirect file access to the appropriate library (<code>gbbcsr</code>, <code>zbcsr</code>, <code>gbicont</code>, <code>zbicont</code>).</li> <li> <p>File Opening: Opens three files:</p> <ul> <li><code>bbcsr</code> (CSR master file, input-only).</li> <li><code>bbcsrrd</code> (CSR master file with renamed record format, input-only).</li> <li><code>bicont</code> (control file, input-only).</li> </ul> </li> <li> <p>Process Subfile (<code>srsfl1</code> Subroutine):</p> </li> <li>Clear Message Subfile: Calls <code>clrmsg</code> to clear any existing messages and <code>wrtmsg</code> to display the message subfile.</li> <li>Subfile Mode Initialization:<ul> <li>Sets <code>sfmod1</code> to <code>'1'</code> and <code>#fold</code> to <code>'0'</code> to control folded/unfolded display mode.</li> <li>Initializes subfile control fields (<code>c1co</code>, <code>c1crid</code>) to zeros or blanks.</li> <li>Sets <code>w$inact</code> to <code>*ON</code> (display all records, including inactive ones, per revision <code>jb01</code>).</li> </ul> </li> <li>Global Protection: Sets indicator <code>*IN70</code> based on <code>p$mode</code>:<ul> <li><code>*OFF</code> for maintenance mode (<code>MNT</code>).</li> <li><code>*ON</code> for inquiry mode (<code>INQ</code>), protecting input fields.</li> </ul> </li> <li>Subfile Repositioning: Calls <code>sf1rep</code> to position the file and load the subfile initially.</li> <li> <p>Main Loop (<code>sf1agn</code>):</p> <ul> <li>Reposition Subfile: If <code>repsfl</code> is <code>*ON</code>, updates control fields (<code>c1co</code>, <code>c1crid</code>) and calls <code>sf1rep</code> to reposition the subfile.</li> <li>Display Command Line: Writes the <code>sflcmd1</code> format (command line).</li> <li>Display Message Subfile: If <code>dspmsg</code> is <code>*ON</code>, calls <code>wrtmsg</code>; otherwise, writes <code>msgclr</code> to clear messages.</li> <li>Subfile Display Check: Sets <code>*IN41</code> (SFLDSP) based on whether <code>rrn1</code> (relative record number) is greater than zero.</li> <li>Folded/Unfolded Mode: Sets <code>*IN45</code> based on <code>sfmod1</code> and <code>#fold</code> to control subfile display mode.</li> <li>Display Subfile Control: Sets <code>*IN40</code> (SFLDSPCTL) to <code>*ON</code> and executes <code>exfmt sflctl1</code> to display the subfile control format and accept user input.</li> <li>Clear Messages: If <code>dspmsg</code> is <code>*ON</code>, calls <code>clrmsg</code> to clear the message subfile.</li> <li>Clear Indicators: Resets screen error indicators (<code>*IN21</code> to <code>*IN39</code>, <code>*IN50</code> to <code>*IN69</code>) to zero.</li> <li>Cursor Positioning: Calculates row (<code>row1</code>) and column (<code>col1</code>) for the cursor using <code>csrloc</code>.</li> <li>Set Record Number: Sets <code>rcdnb1</code> to <code>pagrrn</code> to ensure the correct subfile page is displayed.</li> <li>Process User Input (Before Subfile Read):</li> <li>F03 (Exit): Sets <code>sf1agn</code> to <code>*OFF</code> to exit the loop.</li> <li>F04 (Field Prompting): Calls <code>prompt</code> to handle field prompting and iterates.</li> <li>F05 (Refresh): Clears <code>r$co</code>, sets <code>repsfl</code> to <code>*ON</code>, and iterates to refresh the subfile.</li> <li>F08 (Toggle Inactive Filter): Toggles <code>w$inact</code> between <code>*ON</code> and <code>*OFF</code> to include/exclude inactive records, sets <code>repsfl</code> to <code>*ON</code>, and iterates. (Note: F8 functionality is commented out for Profound UI, defaulting to include all records.)</li> <li>F15 (Print Listing): Calls <code>BB9295</code> with parameters to print a CSR ID listing, sends a confirmation message, and iterates.</li> <li>Direct Access: If <code>d1opt</code>, <code>d1co</code>, or <code>d1crid</code> is non-blank/zero, calls <code>sf1dir</code> to process direct access options.</li> <li>Page Down: If the <code>PAGEDN</code> key is pressed, calls <code>sf1lod</code> to load the next page of subfile records.</li> <li>Process Subfile on Enter: If the <code>ENTER</code> key is pressed, calls <code>sf1prc</code> to process subfile changes.</li> <li>Process User Input (After Subfile Read):</li> <li>Position Request: If <code>c1co</code> or <code>c1crid</code> is non-blank/zero, calls <code>sf1rep</code> to reposition the subfile.</li> <li>F10 (Position Cursor): Clears <code>row1</code> and <code>col1</code> to reposition the cursor to the control record.</li> <li>The loop continues until <code>sf1agn</code> is <code>*OFF</code>.</li> </ul> </li> <li> <p>Process Subfile on Enter (<code>sf1prc</code> Subroutine):</p> </li> <li>Reads changed subfile records using <code>readc sfl1</code> (indicator <code>*IN81</code>).</li> <li> <p>For each changed record, calls <code>sf1chg</code> to process the selected option.</p> </li> <li> <p>Process Subfile Record Change (<code>sf1chg</code> Subroutine):</p> </li> <li>Retains selected values (<code>s1co</code>, <code>s1crid</code>) in <code>s$co</code> and <code>s$crid</code>.</li> <li>Processes based on the subfile option (<code>s1opt</code>):<ul> <li>Option 2 (Change): If in <code>MNT</code> mode and the record is not deleted (<code>s1del</code> is not <code>D</code> or <code>I</code>), calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): If in <code>MNT</code> mode, calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> </ul> </li> <li> <p>Updates the subfile record by chaining to <code>bbcsr</code> and <code>sfl1</code>, clearing <code>s1opt</code>, formatting the record (<code>sf1fmt</code>), applying color coding (<code>sf1col</code>), and updating the subfile.</p> </li> <li> <p>Reposition Subfile (<code>sf1rep</code> Subroutine):</p> </li> <li>Clears the subfile (<code>sf1clr</code>) and resets <code>rrn1</code>.</li> <li>Edits subfile control input (<code>sf1cte</code>).</li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), positions the file using <code>setll</code> on <code>bbcsrrd</code> and loads the subfile (<code>sf1lod</code>).</li> <li> <p>Retains control fields (<code>c1co</code>, <code>c1crid</code>) in <code>r$co</code> and <code>r$crid</code> for repositioning.</p> </li> <li> <p>Edit Subfile Control Input (<code>sf1cte</code> Subroutine):</p> </li> <li> <p>Currently empty, likely intended for input validation (not implemented in the provided code).</p> </li> <li> <p>Load Subfile Records (<code>sf1lod</code> Subroutine):</p> </li> <li>Sets <code>rrn1</code> to the last saved relative record number (<code>rrnsv1</code>).</li> <li>Sets <code>rcdnb1</code> to <code>rrn1 + 1</code> to ensure the new page is displayed.</li> <li>Loads up to <code>pagsz1</code> (14) records:<ul> <li>Reads the next record from <code>bbcsrrd</code> (indicator <code>*IN43</code> for end-of-file).</li> <li>Skips deleted or inactive records (<code>crdel</code> = <code>D</code> or <code>I</code>) if <code>w$inact</code> is <code>*OFF</code>.</li> <li>Formats the subfile line (<code>sf1fmt</code>), applies color coding (<code>sf1col</code>), and writes the record to <code>sfl1</code>.</li> <li>Increments <code>rrn1</code>.</li> </ul> </li> <li> <p>Saves the last <code>rrn1</code> in <code>rrnsv1</code>.</p> </li> <li> <p>Format Subfile Detail Line (<code>sf1fmt</code> Subroutine):</p> </li> <li>Clears the subfile record (<code>sfl1</code>).</li> <li> <p>Moves fields from the file record (<code>crco</code>, <code>crcrid</code>, <code>crcrnm</code>, <code>cremal</code>, <code>crdel</code>) to subfile fields (<code>s1co</code>, <code>s1crid</code>, <code>s1crnm</code>, <code>s1emal</code>, <code>s1del</code>).</p> </li> <li> <p>Subfile Color Coding (<code>sf1col</code> Subroutine):</p> <ul> <li>Sets <code>*IN72</code> to <code>*ON</code> (blue color) if the record is deleted or inactive (<code>s1del</code> = <code>D</code> or <code>I</code>).</li> </ul> </li> <li> <p>Direct Access Processing (<code>sf1dir</code> Subroutine):</p> <ul> <li>Retains direct input values (<code>d1co</code>, <code>d1crid</code>) in <code>s$co</code> and <code>s$crid</code>.</li> <li>Validates input:</li> <li>For option 1 (Create), ensures <code>d1co</code> and <code>d1crid</code> are not blank/zero; otherwise, sets error <code>ERR0103</code>.</li> <li>For option 1, checks if <code>d1co</code> exists in <code>bicont</code>; if not, sets error <code>ERR0021</code>.</li> <li>Checks if the record exists in <code>bbcsr</code> using <code>setll</code>:<ul> <li>For non-create options, if the record exists, proceeds; otherwise, sets error <code>ERR0102</code>.</li> <li>For create, if the record exists, sets error <code>ERR0101</code> (cannot create duplicate).</li> </ul> </li> <li>If no errors (<code>*IN50</code> is <code>*OFF</code>), processes the option:</li> <li>Option 1 (Create): Calls <code>sf1s01</code>.</li> <li>Option 2 (Change): Calls <code>sf1s02</code>.</li> <li>Option 4 (Inactivate/Reactivate): Calls <code>sf1s04</code>.</li> <li>Option 5 (Display): Calls <code>sf1s05</code>.</li> <li>Clears input fields and cursor position if no errors.</li> </ul> </li> <li> <p>Subfile Option 01 - Create (<code>sf1s01</code> Subroutine):</p> <ul> <li>Calls <code>BB929</code> with parameters:</li> <li><code>s$co</code>, <code>s$crid</code> (key fields).</li> <li><code>o$mode</code> set to <code>MNT</code>.</li> <li><code>p$fgrp</code> (file group).</li> <li><code>o$flag</code> (return flag).</li> <li>If <code>o$flag</code> is <code>1</code>, sends a confirmation message (<code>Code &lt;crid&gt; has been created</code>), sets <code>c1co</code> and <code>c1crid</code>, and sets <code>repsfl</code> to <code>*ON</code> to reposition the subfile.</li> </ul> </li> <li> <p>Subfile Option 02 - Change (<code>sf1s02</code> Subroutine):</p> <ul> <li>Chains to <code>bbcsr</code> to check if the record is deleted or inactive (<code>crdel</code> = <code>D</code> or <code>I</code>). If so, sends error message <code>Cannot Modify An Inactive Record</code>.</li> <li>If valid, calls <code>BB929</code> with parameters similar to <code>sf1s01</code>.</li> <li>If <code>o$flag</code> is <code>1</code>, sends a confirmation message (<code>Code &lt;crid&gt; has been changed</code>).</li> </ul> </li> <li> <p>Subfile Option 04 - Inactivate/Reactivate (<code>sf1s04</code> Subroutine):</p> <ul> <li>Calls <code>BB9294</code> with parameters:</li> <li><code>s$co</code>, <code>s$crid</code> (key fields).</li> <li><code>p$fgrp</code> (file group).</li> <li><code>o$flag</code> (return flag).</li> <li>Processes the return flag:</li> <li><code>I</code>: Sends message <code>Code &lt;crid&gt; has been InActivated</code>.</li> <li><code>A</code>: Sends message <code>Code &lt;crid&gt; has been ReActivated</code>.</li> <li><code>E</code>: Sends message <code>Code &lt;crid&gt; &lt;vendor table error&gt;</code>.</li> <li>Stores <code>o$co</code> in <code>a$co</code>.</li> </ul> </li> <li> <p>Subfile Option 05 - Display Customer Order (<code>sf1s05</code> Subroutine):</p> <ul> <li>Calls <code>BB929</code> with parameters, setting <code>o$mode</code> to <code>INQ</code> for inquiry mode.</li> </ul> </li> <li> <p>Field Prompting (<code>prompt</code> Subroutine):</p> <ul> <li>Sets <code>*IN19</code> to <code>*ON</code> to indicate panel format input change.</li> <li>(Note: Cursor positioning code is commented out.)</li> </ul> </li> <li> <p>Message Handling (<code>addmsg</code>, <code>wrtmsg</code>, <code>clrmsg</code> Subroutines):</p> <ul> <li>Add Message (<code>addmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*ON</code>.</li> <li>Calculates the length of <code>m@data</code> and sends a message to the program message queue using <code>QMHSNDPM</code>.</li> <li>Clears message data fields.</li> <li>Write Message Subfile (<code>wrtmsg</code>):</li> <li>Sets <code>*IN49</code> to <code>*ON</code> and writes the <code>msgctl</code> format to display messages.</li> <li>Clear Message Subfile (<code>clrmsg</code>):</li> <li>Sets <code>dspmsg</code> to <code>*OFF</code>.</li> <li>Saves and restores the current record format (<code>rcdnam</code>) and <code>pagrrn</code>.</li> <li>Clears messages using <code>QMHRMVPM</code>.</li> </ul> </li> <li> <p>Program Termination:</p> <ul> <li>Closes all files.</li> <li>Sets <code>*INLR</code> to <code>*ON</code> and returns.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls the following external programs: 1. GSGENIE2C:    - Called during initialization to check if the program is running in the Genie environment.    - Parameter: <code>genievar</code> (3 characters, returns <code>YES</code> if in Genie). 2. BB929:    - Called for options 1 (Create), 2 (Change), and 5 (Display).    - Parameters:      - <code>o$co</code> (company number, output).      - <code>o$crid</code> (CSR ID, output).      - <code>o$mode</code> (<code>MNT</code> or <code>INQ</code>, output).      - <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output).      - <code>o$flag</code> (return flag, output). 3. BB9294:    - Called for option 4 (Inactivate/Reactivate).    - Parameters:      - <code>o$co</code> (company number, output).      - <code>o$crid</code> (CSR ID, output).      - <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output).      - <code>o$flag</code> (return flag: <code>I</code>, <code>A</code>, or <code>E</code>, output). 4. BB9295:    - Called for F15 (Print Listing).    - Parameter: <code>o$fgrp</code> (file group <code>Z</code> or <code>G</code>, output). 5. QCMDEXC:    - IBM i API called to execute file override commands.    - Parameters:      - <code>dbov##</code> (80 characters, override command).      - <code>dbol##</code> (15.5, command length). 6. QMHSNDPM:    - IBM i API called to send messages to the program message queue.    - Parameters: Message ID, message file, message data, data length, message type, program queue, stack counter, message key, error code. 7. QMHRMVPM:    - IBM i API called to clear messages from the program message queue.    - Parameters: Program queue, stack counter, message key, remove option, error code.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. bb929pd:    - Type: Workstation file (display file).    - Usage: Contains the subfile <code>sfl1</code> and control format <code>sflctl1</code> for the user interface.    - Handler: <code>PROFOUNDUI(HANDLER)</code> for Profound UI integration. 2. bbcsr:    - Type: Physical file (input-only).    - Usage: Master file for CSR records, accessed using key list <code>klsfl1</code>.    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 3. bbcsrrd:    - Type: Physical file (input-only) with renamed record format (<code>bbcsrpf</code> to <code>bbcsrpr</code>).    - Usage: Used for sequential reading and positioning, accessed using key list <code>kls1s1</code>.    - Override: Redirected to <code>gbbcsr</code> or <code>zbcsr</code> based on <code>p$fgrp</code>. 4. bicont:    - Type: Physical file (input-only).    - Usage: Control file to validate company numbers (<code>d1co</code>).    - Override: Redirected to <code>gbicont</code> or <code>zbicont</code> based on <code>p$fgrp</code>.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/BB929P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>BB929P</code> program is an interactive RPGLE application that manages CSR IDs using a subfile-based interface. It supports creating, changing, inactivating/reactivating, and displaying records, with options to filter inactive records (though modified to always include them per <code>jb01</code>). The program uses database overrides to access files in different libraries (<code>Z</code> or <code>G</code>), integrates with Profound UI, and provides message handling for user feedback. It calls external programs (<code>BB929</code>, <code>BB9294</code>, <code>BB9295</code>, <code>GSGENIE2C</code>) and IBM i APIs (<code>QCMDEXC</code>, <code>QMHSNDPM</code>, <code>QMHRMVPM</code>) to perform its functions, and interacts with three database files (<code>bbcsr</code>, <code>bbcsrrd</code>, <code>bicont</code>) and one display file (<code>bb929pd</code>).</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/","title":"Summary BB929P RPGLE","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The RPGLE programs (<code>BB929P</code>, <code>BB929</code>, <code>BB9294</code>, <code>BB9295</code>) collectively form an interactive application for managing Customer Service Representative (CSR) IDs within the Billing and Invoicing system. The following use cases are implemented:</p> <ol> <li>List and Select CSR Records:</li> <li>Description: Users can view a subfile list of CSR records, filtered to include all records (active and inactive), and select records for further actions (create, change, inactivate/reactivate, display, or print).</li> <li>Program: <code>BB929P</code></li> <li> <p>Details: Displays a subfile with company number, CSR ID, name, email, and status. Users can position the list by company or CSR ID, refresh the list, or toggle between folded/unfolded views (though F8 is disabled in Profound UI). Supports direct access to create or modify records.</p> </li> <li> <p>Create a New CSR Record:</p> </li> <li>Description: Users can create a new CSR record by specifying company number, CSR ID, name, and email address.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 1)</li> <li> <p>Details: Validates that the company exists and the record does not already exist, then writes a new record with status <code>A</code> (active).</p> </li> <li> <p>Modify an Existing CSR Record:</p> </li> <li>Description: Users can update the name or email address of an existing, active CSR record.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 2)</li> <li> <p>Details: Ensures the record is not inactive or deleted before allowing changes. Key fields (company, CSR ID) are protected.</p> </li> <li> <p>Inactivate or Reactivate a CSR Record:</p> </li> <li>Description: Users can toggle a CSR record's status between active (<code>A</code>) and inactive (<code>I</code>).</li> <li>Program: <code>BB9294</code> (called by <code>BB929P</code> with option 4)</li> <li> <p>Details: Allows reactivation (F22) if the record is inactive or inactivation (F23) if the record is active. Includes a placeholder for checking dependencies (e.g., vendor table), but no validation is implemented.</p> </li> <li> <p>Display a CSR Record:</p> </li> <li>Description: Users can view the details of a CSR record in read-only mode.</li> <li>Program: <code>BB929</code> (called by <code>BB929P</code> with option 5)</li> <li> <p>Details: Displays record details without allowing modifications.</p> </li> <li> <p>Print a CSR ID Listing:</p> </li> <li>Description: Users can generate a printed report of all CSR records, including company, CSR ID, name, email, and status.</li> <li>Program: <code>BB9295</code> (called by <code>BB929P</code> with F15)</li> <li>Details: Produces a formatted report with headers and detail lines, sent to a spooled printer file.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#function-requirement-document-csr-record-management-function","title":"Function Requirement Document: CSR Record Management Function","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#csr-record-management-function-requirements","title":"CSR Record Management Function Requirements","text":""},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#overview","title":"Overview","text":"<p>The <code>manageCSRRecord</code> function handles the creation, modification, inactivation, reactivation, and retrieval of Customer Service Representative (CSR) records in the Billing and Invoicing system. It processes inputs programmatically without screen interaction, updating or retrieving data from the <code>bbcsr</code> file and validating against the <code>bicont</code> file.</p>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>company (numeric): Company number.</li> <li>csrId (string): CSR ID.</li> <li>mode (string, enum: <code>CREATE</code>, <code>UPDATE</code>, <code>INACTIVATE</code>, <code>REACTIVATE</code>, <code>RETRIEVE</code>): Operation mode.</li> <li>fileGroup (string, enum: <code>Z</code>, <code>G</code>): File group for database library selection.</li> <li>csrName (string, optional): CSR name (required for <code>CREATE</code> and <code>UPDATE</code>).</li> <li>email (string, optional): Email address (required for <code>CREATE</code> and <code>UPDATE</code>).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>status (string, enum: <code>SUCCESS</code>, <code>ERROR</code>): Operation outcome.</li> <li>flag (string, enum: <code>1</code>, <code>A</code>, <code>I</code>, <code>E</code>, null): Return flag (<code>1</code> for create/update success, <code>A</code> for reactivation, <code>I</code> for inactivation, <code>E</code> for error, null for retrieval or failure).</li> <li>message (string): Success or error message.</li> <li>record (object, optional): Retrieved CSR record details (for <code>RETRIEVE</code> mode).</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate File Group:</li> <li> <p>Ensure <code>fileGroup</code> is <code>Z</code> or <code>G</code>. If invalid, return <code>status=ERROR</code>, <code>message=\"Invalid file group\"</code>.</p> </li> <li> <p>Apply Database Overrides:</p> </li> <li>Redirect <code>bbcsr</code> to <code>gbbcsr</code> (if <code>fileGroup=G</code>) or <code>zbcsr</code> (if <code>fileGroup=Z</code>).</li> <li> <p>Redirect <code>bicont</code> to <code>gbicont</code> or <code>zbicont</code> accordingly.</p> </li> <li> <p>Validate Company:</p> </li> <li> <p>Check if <code>company</code> exists in <code>bicont</code>. If not, return <code>status=ERROR</code>, <code>message=\"Invalid company number\"</code>.</p> </li> <li> <p>Process by Mode:</p> </li> <li>CREATE:<ul> <li>Validate <code>csrName</code> and <code>email</code> are non-blank. If blank, return <code>status=ERROR</code>, <code>message=\"CSR name and email required\"</code>.</li> <li>Check if record (<code>company</code>, <code>csrId</code>) exists in <code>bbcsr</code>. If exists, return <code>status=ERROR</code>, <code>message=\"CSR ID already exists\"</code>.</li> <li>Write new record to <code>bbcsr</code> with <code>crdel=A</code> (active), <code>crco=company</code>, <code>crcrid=csrId</code>, <code>crcrnm=csrName</code>, <code>cremal=email</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=1</code>, <code>message=\"CSR &lt;csrId&gt; created\"</code>.</li> </ul> </li> <li>UPDATE:<ul> <li>Validate <code>csrName</code> and <code>email</code> are non-blank. If blank, return <code>status=ERROR</code>, <code>message=\"CSR name and email required\"</code>.</li> <li>Chain to <code>bbcsr</code> using <code>company</code>, <code>csrId</code>. If not found or <code>crdel</code> is <code>D</code> or <code>I</code>, return <code>status=ERROR</code>, <code>message=\"Cannot modify inactive or deleted record\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crcrnm=csrName</code>, <code>cremal=email</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=1</code>, <code>message=\"CSR &lt;csrId&gt; updated\"</code>.</li> </ul> </li> <li>INACTIVATE:<ul> <li>Chain to <code>bbcsr</code>. If not found or <code>crdel=I</code>, return <code>status=ERROR</code>, <code>message=\"Record not found or already inactive\"</code>.</li> <li>Check for dependencies (placeholder, not implemented). If dependencies exist, return <code>status=ERROR</code>, <code>flag=E</code>, <code>message=\"CSR &lt;csrId&gt; cannot be inactivated due to dependencies\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crdel=I</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=I</code>, <code>message=\"CSR &lt;csrId&gt; inactivated\"</code>.</li> </ul> </li> <li>REACTIVATE:<ul> <li>Chain to <code>bbcsr</code>. If not found or <code>crdel&lt;&gt;I</code>, return <code>status=ERROR</code>, <code>message=\"Record not found or not inactive\"</code>.</li> <li>Update <code>bbcsr</code> with <code>crdel=A</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>flag=A</code>, <code>message=\"CSR &lt;csrId&gt; reactivated\"</code>.</li> </ul> </li> <li>RETRIEVE:<ul> <li>Chain to <code>bbcsr</code>. If not found, return <code>status=ERROR</code>, <code>message=\"Record not found\"</code>.</li> <li>Return <code>status=SUCCESS</code>, <code>record={company, csrId, csrName, email, status}</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Data Validation:</li> <li>Company number must exist in <code>bicont</code>.</li> <li>CSR name and email must be non-blank for <code>CREATE</code> and <code>UPDATE</code>.</li> <li>CSR record must not exist for <code>CREATE</code>.</li> <li>CSR record must be active (<code>crdel=A</code>) for <code>UPDATE</code> or <code>INACTIVATE</code>.</li> <li> <p>CSR record must be inactive (<code>crdel=I</code>) for <code>REACTIVATE</code>.</p> </li> <li> <p>Status Management:</p> </li> <li>New records are created with <code>crdel=A</code> (active).</li> <li>Inactivation sets <code>crdel=I</code>. Reactivation sets <code>crdel=A</code>.</li> <li> <p>Deleted records (<code>crdel=D</code>) cannot be modified.</p> </li> <li> <p>File Group:</p> </li> <li> <p><code>fileGroup</code> determines the database library (<code>Z</code> for <code>zbcsr</code>/<code>zbicont</code>, <code>G</code> for <code>gbbcsr</code>/<code>gbicont</code>).</p> </li> <li> <p>Dependency Check:</p> </li> <li> <p>Inactivation should check for dependencies (e.g., vendor table usage), but this is not implemented (returns <code>flag=E</code> if added).</p> </li> <li> <p>Error Handling:</p> </li> <li>Returns descriptive error messages for invalid inputs, non-existent records, or invalid status changes.</li> </ol>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>No complex calculations are performed. The function primarily manages data validation, record retrieval, and updates to the <code>crdel</code> field.</li> </ul>"},{"location":"accounts-receivable/01%20Customer%20Maint/BB929P%20CSR%20Email%20Add-Update/Summary%20BB929P%20RPGLE/#notes","title":"Notes","text":"<ul> <li>The function assumes programmatic input instead of interactive screen input, consolidating the logic of <code>BB929</code>, <code>BB9294</code>, and part of <code>BB929P</code>.</li> <li>The printing use case (<code>BB9295</code>) is excluded, as it requires a separate function for report generation.</li> <li>The placeholder dependency check in <code>INACTIVATE</code> mode should be implemented to validate against related tables (e.g., vendor table).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/","title":"AR415 OCL","text":"<p>The provided document, <code>AR415.ocl36.txt</code>, is an Operation Control Language (OCL) program used on IBM midrange systems like the AS/400 (now IBM i). OCL is a scripting language used to control job execution, manage files, and invoke programs. The program appears to generate a Customer Credit Report by performing a series of steps involving file overrides, sorting, and report generation. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates a sequence of operations to produce the Customer Credit Report. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Delete All Overrides (DLTOVR *ALL):</li> <li> <p>The <code>DLTOVR *ALL</code> command clears all existing file overrides in the job to ensure no unintended file mappings interfere with the program\u2019s execution.</p> </li> <li> <p>Commented-Out Program Call (GSGENIEC):</p> </li> <li>The line <code>// CALL PGM(GSGENIEC)</code> is commented out (preceded by <code>//</code>), so it is not executed. If uncommented, it would call the program <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li> <p>The conditional logic <code>// IFF ?L'506,3'?/YES RETURN</code> is also commented out. If active, it would check a condition (likely a data area or variable at location <code>L'506,3'</code>) and terminate the job (<code>RETURN</code>) if the condition is met.</p> </li> <li> <p>SCPROCP Command:</p> </li> <li> <p>The line <code>// SCPROCP ,,,,,,,,?9?</code> invokes a procedure or command named <code>SCPROCP</code> with placeholder <code>?9?</code> for a parameter (likely a library or file prefix). The eight commas indicate empty parameters, suggesting <code>SCPROCP</code> may use default values or only require the ninth parameter.</p> </li> <li> <p>Set Local Variables (LOCAL BLANK-*ALL):</p> </li> <li> <p>The <code>LOCAL BLANK-*ALL</code> command clears all local variables in the job, ensuring a clean state for subsequent operations.</p> </li> <li> <p>GSY2K Command:</p> </li> <li> <p>The <code>GSY2K</code> command is executed, likely a utility to handle Year 2000 (Y2K) date conversions or system settings, ensuring date fields are processed correctly.</p> </li> <li> <p>Override Database File (OVRDBF):</p> </li> <li> <p>The command <code>OVRDBF FILE(BICONT) TOFILE(QS36F/?9?BICONT)</code> overrides the file <code>BICONT</code> to point to <code>QS36F/?9?BICONT</code> (a file in the <code>QS36F</code> library with a prefix <code>?9?</code>). This ensures the program uses the correct version of the <code>BICONT</code> file.</p> </li> <li> <p>Load and Run AR415P:</p> </li> <li>The <code>// LOAD AR415P</code> command loads the program <code>AR415P</code>, and the <code>// RUN</code> command executes it.</li> <li>The file specification <code>FILE NAME-BICONT,LABEL-?9?BICONT,DISP-SHR</code> indicates that <code>AR415P</code> uses the <code>BICONT</code> file (with prefix <code>?9?</code>) in shared mode (<code>DISP-SHR</code>), allowing multiple jobs to access it concurrently.</li> <li> <p>This program likely performs initial processing or validation on the <code>BICONT</code> file, preparing data for the report.</p> </li> <li> <p>Load and Run #GSORT for Sorting:</p> </li> <li>The <code>// LOAD #GSORT</code> command loads the <code>#GSORT</code> utility, a general-purpose sort program.</li> <li>Input and Output Files:<ul> <li>Input file: <code>ARCUST</code> (labeled <code>?9?ARCUST</code>, shared mode).</li> <li>Output file: <code>AR415S</code> (labeled <code>?9?AR415S</code>, with a capacity of 999,000 records, extendable by 999,000, and retained as a job file <code>RETAIN-J</code>).</li> </ul> </li> <li>Sort Specifications:<ul> <li><code>HSORTR 8A 3X 384 N</code>: Defines the sort header with an 8-character key, 3 fields, 384 bytes per record, and no sequence checking (<code>N</code>).</li> <li><code>I C 1 1NECD</code>: Includes records where position 1 (1 byte) is not equal to a specific condition (<code>NECD</code>, possibly \"not equal to customer delete\").</li> <li><code>IAC 2 3EQC?L'101,2'?</code>: Includes records where positions 2\u20133 equal a value at location <code>L'101,2'</code> (likely a data area or variable).</li> <li><code>FNC 2 9 KEY</code>: Specifies positions 2\u20139 as the sort key (ascending order by default).</li> <li><code>FDC 1 256 RECORD</code>: Includes positions 1\u2013256 in the output record.</li> <li><code>FDC 257 384 RECORD</code>: Includes positions 257\u2013384 in the output record.</li> </ul> </li> <li> <p>Purpose: This step sorts the <code>ARCUST</code> file based on a key (positions 2\u20139) and filters records based on conditions, writing the sorted output to <code>AR415S</code>.</p> </li> <li> <p>Load and Run AR415:</p> </li> <li>The <code>// LOAD AR415</code> command loads the main report program <code>AR415</code>, and <code>// RUN</code> executes it.</li> <li>Files Used:<ul> <li><code>ARCUST</code> (labeled <code>?9?AR415S</code>, the sorted output from <code>#GSORT</code>, shared mode).</li> <li><code>ARCUSA</code> (labeled <code>?9?ARCUST</code>, shared mode).</li> <li><code>ARCLGR</code> (labeled <code>?9?ARCLGR</code>, shared mode).</li> <li><code>BBORCL</code> (labeled <code>?9?BBORCL</code>, shared mode).</li> <li><code>BICONT</code> (labeled <code>?9?BICONT</code>, shared mode).</li> </ul> </li> <li> <p>Purpose: The <code>AR415</code> program processes the sorted <code>AR415S</code> file and other input files (<code>ARCUSA</code>, <code>ARCLGR</code>, <code>BBORCL</code>, <code>BICONT</code>) to generate the final Customer Credit Report, likely formatting and printing the data.</p> </li> <li> <p>End of Program:</p> <ul> <li>The <code>// END</code> statement marks the end of the <code>#GSORT</code> section, though it appears after the <code>AR415</code> section, possibly indicating a structured block for <code>#GSORT</code> or a minor formatting issue in the OCL.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program invokes the following external programs: 1. GSGENIEC: Commented out, so not executed. If active, it would be called as a utility or initialization program. 2. AR415P: A program that processes the <code>BICONT</code> file, likely for data preparation or validation. 3. #GSORT: A sort utility that sorts the <code>ARCUST</code> file and produces the <code>AR415S</code> file. 4. AR415: The main report program that generates the Customer Credit Report using multiple input files.</p> <p>Additionally, the <code>SCPROCP</code> command is executed, which may be a system command or procedure rather than a program, depending on its definition.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (tables) in the IBM i environment: 1. BICONT (<code>QS36F/?9?BICONT</code>): Used by <code>AR415P</code> and <code>AR415</code>, likely a control or configuration file. 2. ARCUST (<code>?9?ARCUST</code>): The input customer file used by <code>#GSORT</code> and <code>AR415</code> (as <code>ARCUSA</code>). 3. AR415S (<code>?9?AR415S</code>): The sorted output file created by <code>#GSORT</code> and used as input by <code>AR415</code>. 4. ARCUSA (<code>?9?ARCUST</code>): An alias or alternate reference to the <code>ARCUST</code> file, used by <code>AR415</code>. 5. ARCLGR (<code>?9?ARCLGR</code>): A ledger or transaction file used by <code>AR415</code>, likely containing customer credit data. 6. BBORCL (<code>?9?BBORCL</code>): Another file used by <code>AR415</code>, possibly containing billing or order data related to credit.</p> <p>The <code>?9?</code> placeholder in file labels likely represents a library or prefix dynamically substituted at runtime.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20OCL/#summary","title":"Summary","text":"<p>The OCL program <code>AR415.ocl36.txt</code> orchestrates the generation of a Customer Credit Report through the following steps: - Clears overrides and local variables. - Executes a Y2K utility and overrides the <code>BICONT</code> file. - Runs <code>AR415P</code> to process <code>BICONT</code>. - Uses <code>#GSORT</code> to sort the <code>ARCUST</code> file into <code>AR415S</code> based on specific keys and conditions. - Runs <code>AR415</code> to generate the final report using sorted and additional files.</p> <p>External Programs: <code>GSGENIEC</code> (commented out), <code>AR415P</code>, <code>#GSORT</code>, <code>AR415</code>, and possibly <code>SCPROCP</code> (if a program). Files Used: <code>BICONT</code>, <code>ARCUST</code>, <code>AR415S</code>, <code>ARCUSA</code>, <code>ARCLGR</code>, <code>BBORCL</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/","title":"AR415 RPG36","text":"<p>The provided document, <code>AR415.rpg36.txt</code>, is an RPG III program (RPG/400) on the IBM i (AS/400) platform, called by the OCL program <code>AR415.ocl36.txt</code>. This program generates a Customers Over Credit Report, processing customer data to identify and report customers whose total due amounts exceed their credit limits. It uses multiple files to gather customer, order, and ledger data, producing two printed reports: one for all customers and another for orders exceeding credit limits. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#process-steps-of-the-ar415-rpg-program","title":"Process Steps of the AR415 RPG Program","text":"<p>The <code>AR415</code> program processes customer data by company, calculates credit-related metrics, and generates two printed reports (<code>ARLIST</code> and <code>ARLIS2</code>). Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines files:<ul> <li><code>ARCUST</code> (input primary, 384 bytes, sorted input from <code>#GSORT</code>).</li> <li><code>ARCUSA</code> (input chained, 384 bytes, keyed at position 2).</li> <li><code>BBORCL</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>BICONT</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>ARCLGR</code> (input chained, 240 bytes, keyed at position 2).</li> <li><code>ARLIST</code> (output, 164 bytes, primary printer file).</li> <li><code>ARLIS2</code> (output, 164 bytes, secondary printer file for over-limit orders).</li> </ul> </li> <li>Defines arrays and data structures:<ul> <li><code>SEP</code> (2-element array for separator lines).</li> <li><code>ARC</code> (25-element array, 6 bytes each, for customer numbers from <code>ARCLGR</code>).</li> <li>Data structure <code>UDS</code> with <code>CO</code> (company code, 2 digits) and <code>KYCANC</code> (cancel key, 6 characters).</li> </ul> </li> <li>Input specifications define fields for each file (e.g., <code>ARKEY</code>, <code>ARCO</code>, <code>ARCUST</code>, <code>ARNAME</code>, <code>ARTOTD</code>, <code>ARCLMT</code>, etc.).</li> <li> <p>Initializes variables like <code>TIMDAT</code>, <code>SYTIME</code>, and <code>SYDATE</code> for report headers.</p> </li> <li> <p>Company-Level Processing (<code>L2</code> Loop):</p> </li> <li> <p>For each company (<code>L2</code> control break on <code>ARCO</code>):</p> <ul> <li>Chains to <code>BICONT</code> using <code>CO</code> to retrieve company name (<code>BCNAME</code>).</li> <li>Sets separator line (<code>SEP = '* '</code>) and captures system time (<code>SYTIME</code>) and date (<code>SYDATE</code>) using the <code>TIME</code> operation.</li> <li>Prints company-level headings on both <code>ARLIST</code> (via <code>PRTL2</code>) and <code>ARLIS2</code> (via <code>PRTL22</code>) output files.</li> </ul> </li> <li> <p>Customer-Level Processing (<code>L1</code> Loop):</p> </li> <li> <p>For each customer (<code>L1</code> control break on <code>ARCUST</code>):</p> <ul> <li>Initializes variables: <code>OVER</code>, <code>LIMIT</code>, <code>OWED</code>, <code>ORDVAL</code>, <code>TRXVAL</code> to zero, and clears indicator <code>93</code>.</li> <li>Chains to <code>ARCLGR</code> using <code>ARKEY</code> (positions 2\u20139) to retrieve customer numbers in the <code>ARC</code> array.</li> <li>If <code>ARCLGR</code> is found (<code>*IN95 = *OFF</code>) and not deleted (<code>CGDEL &lt;&gt; 'D'</code>):</li> <li>Loops through the <code>ARC</code> array (up to 25 customer numbers):<ul> <li>Constructs <code>CUSKEY</code> (company + customer number).</li> <li>Chains to <code>ARCUSA</code> using <code>CUSKEY</code> to get customer data (<code>AXCLMT</code>, <code>AXTOTD</code>).</li> <li>If found (<code>*IN93 = *OFF</code>) and <code>AXCLMT &lt;&gt; 0</code>, adds <code>AXCLMT</code> to <code>LIMIT</code>.</li> <li>Adds <code>AXTOTD</code> to <code>OWED</code>.</li> <li>Processes <code>BBORCL</code> records for the customer (using <code>BCLKEY</code> = <code>HLD8</code>):</li> <li>Sets lower limit (<code>SETLL</code>) and reads <code>BBORCL</code> until EOF (<code>*IN66</code>) or customer mismatch (<code>*IN79</code>).</li> <li>Skips deleted records (<code>BLDEL = 'D'</code>).</li> <li>Adds <code>BLTAMT</code> (unposted amount) to <code>TRXVAL</code> and <code>OWED</code> if non-zero.</li> <li>Adds <code>BLOAMT</code> (order amount) to <code>ORDVAL</code> and <code>OWED</code> if non-zero.</li> </ul> </li> </ul> </li> <li> <p>Primary Customer Processing:</p> </li> <li> <p>After the <code>ARCLGR</code> loop, processes the primary <code>ARCUST</code> record:</p> <ul> <li>If <code>LIMIT = 0</code>, sets <code>LIMIT = ARCLMT</code> (from <code>ARCUST</code>).</li> <li>Adds <code>ARTOTD</code> to <code>OWED</code>.</li> <li>Processes <code>BBORCL</code> records again for the customer (using <code>BCLKEY = ARKEY</code>):</li> <li>Similar logic to above: skips deleted records, adds <code>BLTAMT</code> to <code>TRXVAL</code> and <code>OWED</code>, adds <code>BLOAMT</code> to <code>ORDVAL</code> and <code>OWED</code>.</li> <li>If <code>BLOVCL = 'Y'</code> (over credit limit), prints an over-limit line (<code>OVRLNE</code>) to <code>ARLIS2</code> with order details (<code>BLORDR</code>, <code>BLTAMT</code>, <code>BLBTCH</code>).</li> </ul> </li> <li> <p>Credit Limit Check and Output:</p> </li> <li>Calculates <code>OVER = LIMIT - OWED</code>.</li> <li>If <code>OVER &lt; 0</code>, sets indicator <code>44</code> to indicate the customer is over their credit limit.</li> <li> <p>Prints customer details to <code>ARLIST</code> (via <code>PRTL2</code>):</p> <ul> <li>Includes <code>ARCUST</code>, <code>ARNAME</code>, <code>ARCLMT</code>, <code>ARTOTD</code>, <code>ORDVAL</code>, <code>TRXVAL</code>, and <code>OVER</code> (with \u201cOVER CREDIT LIMIT\u201d if <code>*IN44 = *ON</code>).</li> </ul> </li> <li> <p>Report Output:</p> </li> <li><code>ARLIST</code> report:<ul> <li>Prints company name (<code>BCNAME</code>), date (<code>SYDATE</code>), time (<code>SYTIME</code>), and page number.</li> <li>Includes headers for \u201cCREDIT LIMIT\u201d, \u201cTOTAL DUE\u201d, \u201cOPEN ORDERS TOTAL\u201d, \u201cUNPOSTED AMOUNT\u201d, and \u201cAVAIL CREDIT\u201d.</li> <li>Lists customer data with over-limit indication.</li> </ul> </li> <li> <p><code>ARLIS2</code> report:</p> <ul> <li>Prints similar headers but focuses on \u201cORDERS OVER CREDIT LIMIT\u201d.</li> <li>Lists orders exceeding credit limits with <code>BLORDR</code>, <code>BLTAMT</code>, and <code>BLBTCH</code>.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends after processing all <code>ARCUST</code> records, triggered by the end of the input file.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>The program processes data for a specific company (<code>CO</code>), retrieving the company name from <code>BICONT</code>.</li> <li> <p>If the company is not found in <code>BICONT</code>, processing continues with default values.</p> </li> <li> <p>Customer Credit Calculation:</p> </li> <li>Aggregates credit limit (<code>LIMIT</code>) from <code>ARCUSA</code> (<code>AXCLMT</code>) or <code>ARCUST</code> (<code>ARCLMT</code>).</li> <li>Calculates total owed (<code>OWED</code>) by summing:<ul> <li><code>ARTOTD</code> (total due from <code>ARCUST</code>).</li> <li><code>AXTOTD</code> (total due from <code>ARCUSA</code> for customers in <code>ARCLGR</code>).</li> <li><code>BLTAMT</code> (unposted amounts from <code>BBORCL</code>).</li> <li><code>BLOAMT</code> (order amounts from <code>BBORCL</code>).</li> </ul> </li> <li> <p>Tracks <code>TRXVAL</code> (unposted amounts) and <code>ORDVAL</code> (order amounts) separately.</p> </li> <li> <p>Over Credit Limit Detection:</p> </li> <li>A customer is over their credit limit if <code>OVER = LIMIT - OWED &lt; 0</code>.</li> <li> <p>Orders marked as over credit limit (<code>BLOVCL = 'Y'</code>) in <code>BBORCL</code> are printed in the <code>ARLIS2</code> report.</p> </li> <li> <p>Data Filtering:</p> </li> <li>Skips deleted customers (<code>CGDEL = 'D'</code> in <code>ARCLGR</code>) and deleted orders (<code>BLDEL = 'D'</code> in <code>BBORCL</code>).</li> <li> <p>Only processes non-zero amounts (<code>BLTAMT</code>, <code>BLOAMT</code>, <code>AXCLMT</code>, <code>AXTOTD</code>).</p> </li> <li> <p>Report Formatting:</p> </li> <li>Produces two reports:<ul> <li><code>ARLIST</code>: Lists all customers with credit limit, total due, open orders, unposted amounts, and available credit.</li> <li><code>ARLIS2</code>: Lists specific orders exceeding credit limits with order number, unposted amount, and batch number.</li> </ul> </li> <li>Includes company name, date, time, and page numbers in headers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ARCUST (<code>IP</code>, input primary, 384 bytes):    - Sorted input file (from <code>#GSORT</code> in the OCL).    - Fields: <code>ARKEY</code> (2\u20139, key), <code>ARCO</code> (2\u20133, company), <code>ARCUST</code> (4\u20139, customer), <code>ARNAME</code> (10\u201339, customer name), <code>ARTOTD</code> (174\u2013179, packed total due), <code>ARCLMT</code> (252\u2013256, packed credit limit). 2. ARCUSA (<code>IC</code>, input chained, 384 bytes, keyed at 2):    - Alternate customer file.    - Fields: <code>AXCUST</code> (4\u20139, customer), <code>AXTOTD</code> (174\u2013179, packed total due), <code>AXCLMT</code> (252\u2013256, packed credit limit). 3. BBORCL (<code>IF</code>, input file, 256 bytes, keyed at 2):    - Order file.    - Fields: <code>BLCOCU</code> (2\u20139, company/customer key), <code>BLDEL</code> (1, delete code), <code>BLCONO</code> (2\u20133, company), <code>BLCUST</code> (4\u20139, customer), <code>BLORDR</code> (10\u201315, order number), <code>BLBTCH</code> (16\u201317, batch number), <code>BLTAMT</code> (18\u201326, unposted amount), <code>BLOAMT</code> (27\u201335, order amount), <code>BLOVCL</code> (36, over limit Y/N), <code>BLAUIN</code> (37\u201339, authorization initials), <code>BLUSID</code> (40\u201347, user ID). 4. BICONT (<code>IF</code>, input file, 256 bytes, keyed at 2):    - Company control file.    - Fields: <code>BCNAME</code> (4\u201333, company name), <code>BCINST</code> (92, invoicing style). 5. ARCLGR (<code>IC</code>, input chained, 240 bytes, keyed at 2):    - Ledger file with customer numbers.    - Fields: <code>CGDEL</code> (1, delete code), <code>ARC</code> (10\u2013159, array of 25 customer numbers, 6 bytes each). 6. ARLIST (<code>O</code>, output, 164 bytes, printer):    - Primary report file for customer credit data. 7. ARLIS2 (<code>O</code>, output, 164 bytes, printer):    - Secondary report file for over-limit orders.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR415</code> program does not call any external programs. It performs all processing internally, relying on file I/O and printer output operations.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415%20RPG36/#summary","title":"Summary","text":"<p>Process Steps: - Initializes files, arrays, and variables. - Processes each company (<code>L2</code>), retrieving company name and printing headers. - For each customer (<code>L1</code>):   - Aggregates credit limits and amounts owed from <code>ARCUST</code>, <code>ARCUSA</code>, and <code>BBORCL</code>.   - Processes <code>ARCLGR</code> to include additional customer data.   - Calculates over-credit status and prints to <code>ARLIST</code> (all customers) and <code>ARLIS2</code> (over-limit orders). - Terminates after processing all records.</p> <p>Business Rules: - Validates company and skips deleted customers/orders. - Aggregates total owed from multiple sources (<code>ARTOTD</code>, <code>AXTOTD</code>, <code>BLTAMT</code>, <code>BLOAMT</code>). - Identifies customers over credit limits (<code>OVER &lt; 0</code>) and orders marked as over limit (<code>BLOVCL = 'Y'</code>). - Produces formatted reports with headers and detailed data.</p> <p>Files Used: <code>ARCUST</code>, <code>ARCUSA</code>, <code>BBORCL</code>, <code>BICONT</code>, <code>ARCLGR</code>, <code>ARLIST</code>, <code>ARLIS2</code>. External Programs: None.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/","title":"AR415P RPGLE","text":"<p>The provided document, <code>AR415P.rpgle.txt</code>, is an RPGLE (RPG IV) program on the IBM i (AS/400) platform, called by the OCL program <code>AR415.ocl36.txt</code>. The program appears to handle the initial screen processing for the Customer Credit Report, allowing the user to select a company code (<code>co</code>) and validating it against the <code>BICONT</code> and <code>GSCONT</code> files. Below, I\u2019ll explain the process steps, business rules, tables used, and any external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#process-steps-of-the-ar415p-rpgle-program","title":"Process Steps of the AR415P RPGLE Program","text":"<p>The <code>AR415P</code> program is a workstation-based interactive program that displays a screen to capture a company code, validates it, and sets up conditions for the subsequent report generation. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program uses the <code>DFTACTGRP(*NO)</code> directive, indicating it runs in a named activation group, and <code>DFTNAME(AR415P)</code> sets the default program name.</li> <li>The <code>FIXNBR(*ZONED:*INPUTPACKED)</code> option ensures zoned decimal and packed decimal fields are handled correctly during input.</li> <li>Files are defined:<ul> <li><code>AR415PD</code> (workstation file, likely a display file for screen interaction, using the Profound UI handler).</li> <li><code>BICONT</code> (input file, 256 bytes, keyed at position 2).</li> <li><code>GSCONT</code> (input file, 512 bytes, keyed at position 2).</li> </ul> </li> <li> <p>Data structures and variables are defined:</p> <ul> <li><code>msg</code> array for error messages.</li> <li><code>@infds</code> for workstation file information (e.g., function key status).</li> <li><code>uds</code> data structure with <code>co</code> (company code, 2-digit numeric) and <code>kycanc</code> (cancel key status, 6 characters).</li> <li>Input specifications for <code>BICONT</code> (field <code>bcdel</code> at position 1) and <code>GSCONT</code> (fields <code>GXDEL</code> at position 1, <code>GXCONO</code> at positions 77\u201378).</li> </ul> </li> <li> <p>Main Processing Loop (<code>dow @sfnex &lt;&gt; 'EJ'</code>)</p> </li> <li>The program enters a <code>DO</code> loop that continues until <code>@sfnex</code> (screen exit flag) equals <code>'EJ'</code> (end job).</li> <li>The loop processes the screen based on the <code>@sfid</code> (screen format ID) value:<ul> <li>If <code>@sfid</code> is blank, execute subroutine <code>$sblk</code> (initial blank screen).</li> <li>If <code>@sfid</code> is <code>'S1'</code>, execute subroutine <code>$s1</code> (process screen input).</li> </ul> </li> <li>The <code>$xcpt</code> subroutine is called to handle screen display.</li> <li>The program reads the <code>AR415S1</code> format (from <code>AR415PD</code> display file) with indicators <code>50</code> (error) or <code>LR</code> (last record), depending on whether it\u2019s the first screen (<code>@ccnt = 1</code>) or subsequent iterations.</li> <li> <p>The loop ends when <code>@sfnex = 'EJ'</code> (set in <code>$s1ent</code> or <code>$s1ck</code>), triggering the <code>endit</code> tag and setting <code>*INLR</code> to <code>*ON</code> to end the program.</p> </li> <li> <p>Subroutine <code>$sblk</code>: Initial Blank Screen</p> </li> <li>Executed when <code>@sfid</code> is blank (first time only).</li> <li>Sets indicator <code>*IN99</code> to <code>*ON</code> to display the blank screen.</li> <li>Retrieves the company code (<code>GXCONO</code>) from the <code>GSCONT</code> file using a <code>CHAIN</code> operation (keyed on <code>'00'</code>).<ul> <li>If found (<code>*IN95 = *OFF</code>) and <code>GXCONO</code> is non-zero, sets <code>co = GXCONO</code>.</li> </ul> </li> <li> <p>Sets <code>@sfnex</code> and <code>@sfid</code> to <code>'S1'</code> to display the <code>AR415S1</code> screen format next.</p> </li> <li> <p>Subroutine <code>$s1</code>: Process Screen Input</p> </li> <li>Handles input from the <code>AR415S1</code> screen format.</li> <li> <p>Checks the function key pressed (via <code>@vkey</code> in <code>@infds</code>):</p> <ul> <li>If <code>@vkey = 0</code> (Enter key), calls <code>$s1ent</code> to validate the entered company code.</li> <li>If <code>@vkey = 2</code> (Command key, likely F3 or Cancel), calls <code>$s1ck</code> to handle cancellation.</li> </ul> </li> <li> <p>Subroutine <code>$s1ent</code>: Validate Company Code</p> </li> <li>Validates the <code>co</code> field entered by the user:<ul> <li>If <code>co = 0</code>, sets error message <code>msg(1)</code> (\u201cINVALID COMPANY\u201d) and indicator <code>*IN90</code> to <code>*ON</code>, then jumps to <code>ends1e</code> to redisplay the screen.</li> <li>Performs a <code>CHAIN</code> to <code>BICONT</code> using <code>co</code> as the key:</li> <li>If not found (<code>*IN96 = *ON</code>), sets error message <code>msg(1)</code> (\u201cINVALID COMPANY\u201d) and <code>*IN90</code> to <code>*ON</code>.</li> <li>If found but <code>bcdel = 'D'</code> (deleted company), sets error message <code>msg(2)</code> (\u201cCOMPANY HAS BEEN DELETED\u201d) and <code>*IN90</code> to <code>*ON</code>.</li> <li>If validation passes (valid, non-deleted company), sets <code>@sfnex = 'EJ'</code> to exit the program.</li> </ul> </li> <li> <p>The <code>ends1e</code> label ensures the screen is redisplayed with error messages if validation fails.</p> </li> <li> <p>Subroutine <code>$s1ck</code>: Handle Command Key</p> </li> <li>Processes command key actions (e.g., F3 for Cancel).</li> <li>If <code>*INKG</code> (F3 key) is <code>*ON</code>, sets <code>@sfnex = 'EJ'</code> to exit the program and <code>kycanc = 'CANCEL'</code> to indicate cancellation.</li> <li> <p>Ends with the <code>ends1c</code> label.</p> </li> <li> <p>Subroutine <code>$xcpt</code>: Display Screen</p> </li> <li>Increments <code>@ccnt</code> (screen counter).</li> <li>If <code>@sfnex = @sfid</code>, sets <code>*IN98</code> to <code>*ON</code> to indicate the same screen is being redisplayed.</li> <li>If <code>@sfnex = 'S1'</code>, writes the <code>AR415S1</code> format to the display file to show the screen.</li> <li> <p>Calls <code>clrind</code> to clear indicators and error messages.</p> </li> <li> <p>Subroutine <code>clrind</code>: Clear Indicators</p> </li> <li>Resets indicators <code>*IN90</code>, <code>*IN81</code>, <code>*IN82</code>, <code>*IN12</code>, <code>*IN13</code>, <code>*IN14</code>, and <code>*IN15</code> to <code>*OFF</code>.</li> <li> <p>Clears the <code>msg1</code> field to ensure no residual error messages are displayed.</p> </li> <li> <p>Program Termination:</p> </li> <li>When <code>@sfnex = 'EJ'</code>, the program jumps to the <code>endit</code> tag, sets <code>*INLR = *ON</code>, and terminates.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules: 1. Company Code Validation:    - The user must enter a valid company code (<code>co</code>) that exists in the <code>BICONT</code> file.    - The company code must not be zero (invalid company).    - The company must not be marked as deleted (<code>bcdel &lt;&gt; 'D'</code> in <code>BICONT</code>). 2. Default Company Code:    - If available, the program retrieves a default company code (<code>GXCONO</code>) from the <code>GSCONT</code> file (key <code>'00'</code>) for the initial screen. 3. Error Handling:    - Displays \u201cINVALID COMPANY\u201d if the entered <code>co</code> is zero or not found in <code>BICONT</code>.    - Displays \u201cCOMPANY HAS BEEN DELETED\u201d if the company exists but is marked deleted.    - Errors cause the screen to be redisplayed with the appropriate message. 4. Cancellation:    - The user can cancel the program using a command key (F3, <code>*INKG</code>), setting <code>kycanc = 'CANCEL'</code> and exiting the program. 5. Screen Flow:    - Starts with a blank screen, then displays the <code>AR415S1</code> format for company code input.    - Exits only when a valid company code is entered or the user cancels.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. AR415PD (<code>cf</code>, workstation file):    - A display file for screen interaction, using the <code>AR415S1</code> format to capture the company code and display error messages.    - Managed by the Profound UI handler for modernized UI. 2. BICONT (<code>if</code>, input file):    - A 256-byte file, keyed at position 2, containing company data.    - Field: <code>bcdel</code> (position 1, 1 byte, indicates if the company is deleted with <code>'D'</code>). 3. GSCONT (<code>if</code>, input file):    - A 512-byte file, keyed at position 2, containing control data.    - Fields: <code>GXDEL</code> (position 1, 1 byte), <code>GXCONO</code> (positions 77\u201378, 2-digit numeric company code).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR415P</code> program does not explicitly call any external programs. It is an interactive program that processes user input and validates data using file I/O operations. The Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) is used for the workstation file, but this is a runtime component, not a separate program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/AR415P%20RPGLE/#summary","title":"Summary","text":"<p>Process Steps: - Initializes the program and displays a blank screen. - Retrieves a default company code from <code>GSCONT</code>. - Displays the <code>AR415S1</code> screen for user input. - Validates the entered company code against <code>BICONT</code>, checking for existence and deletion status. - Handles errors by redisplaying the screen with messages or exits on valid input/cancellation. - Terminates when a valid company code is entered or the user cancels.</p> <p>Business Rules: - Ensures a non-zero, non-deleted company code is entered. - Provides default company code from <code>GSCONT</code>. - Supports cancellation via F3. - Displays error messages for invalid or deleted companies.</p> <p>Files Used: <code>AR415PD</code> (display), <code>BICONT</code> (company data), <code>GSCONT</code> (control data). External Programs: None.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/","title":"Summary AR415 OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>The call stack consists of three components: 1. AR415.ocl36.txt: An OCL program that orchestrates the process by invoking <code>AR415P</code> and <code>AR415</code> programs and sorting data with <code>#GSORT</code>. 2. AR415P.rpgle.txt: An RPGLE program that handles interactive company code input and validation. 3. AR415.rpg36.txt: An RPG III program that generates the Customer Credit Report.</p> <p>Use Case Identified: - Generate Customer Credit Report: The primary use case is to produce a report listing customers' credit status, including those exceeding their credit limits, for a specified company. The report details credit limits, total amounts due, open orders, unposted amounts, and available credit, with a secondary report listing specific orders that exceed credit limits.</p> <p>Only one use case is implemented, as the programs collectively focus on generating this report, with <code>AR415P</code> validating the company code and <code>AR415</code> processing and printing the report data.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#customer-credit-report-function-requirements","title":"Customer Credit Report Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#overview","title":"Overview","text":"<p>The <code>generateCustomerCreditReport</code> function produces a Customer Credit Report for a specified company, listing customers' credit details and identifying those over their credit limits. A secondary report lists specific orders exceeding credit limits. The function takes input parameters and processes data from predefined files without interactive screen input.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Code (<code>co</code>, 2-digit numeric): Identifies the company for which the report is generated.</li> <li>Cancel Flag (<code>kycanc</code>, 6-character): Indicates if the process should be canceled (\"CANCEL\").</li> <li>Input Files:</li> <li><code>BICONT</code>: Company control file (company name, deletion status).</li> <li><code>ARCUST</code>: Sorted customer file (customer number, name, total due, credit limit).</li> <li><code>ARCUSA</code>: Alternate customer file (customer number, total due, credit limit).</li> <li><code>ARCLGR</code>: Ledger file (customer numbers array).</li> <li><code>BBORCL</code>: Order file (order details, amounts, over-limit status).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#outputs","title":"Outputs","text":"<ul> <li>ARLIST Report: Primary report listing all customers with:</li> <li>Customer number, name, credit limit, total due, open orders total, unposted amount, available credit.</li> <li>Indicates customers over their credit limit.</li> <li>ARLIS2 Report: Secondary report listing orders exceeding credit limits with:</li> <li>Customer number, name, credit limit, total due, order number, unposted amount, batch number.</li> <li>Return Status: Success, invalid company, deleted company, or canceled.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Company Code:</li> <li>Check if <code>co</code> is non-zero and exists in <code>BICONT</code>.</li> <li>Verify <code>co</code> is not marked as deleted (<code>bcdel &lt;&gt; 'D'</code>).</li> <li>If invalid or deleted, return error status.</li> <li>Sort Customer Data:</li> <li>Use sorted <code>ARCUST</code> file (pre-sorted by <code>#GSORT</code> on positions 2\u20139, filtering non-deleted customers and specific conditions).</li> <li>Process Company Data:</li> <li>Retrieve company name (<code>BCNAME</code>) from <code>BICONT</code> for report headers.</li> <li>Capture system date and time for report headers.</li> <li>Process Customer Data:</li> <li>For each customer in <code>ARCUST</code> (control break on customer number):<ul> <li>Initialize <code>LIMIT</code>, <code>OWED</code>, <code>ORDVAL</code>, <code>TRXVAL</code>, <code>OVER</code> to zero.</li> <li>Retrieve additional customer numbers from <code>ARCLGR</code> (up to 25, skipping deleted entries).</li> <li>For each customer (from <code>ARCLGR</code> and <code>ARCUST</code>):</li> <li>Chain to <code>ARCUSA</code> to get <code>AXCLMT</code> (credit limit) and <code>AXTOTD</code> (total due).</li> <li>Add <code>AXCLMT</code> to <code>LIMIT</code> if non-zero; add <code>AXTOTD</code> to <code>OWED</code>.</li> <li>Process <code>BBORCL</code> for matching orders (skip deleted, <code>BLDEL = 'D'</code>):<ul> <li>Add <code>BLTAMT</code> (unposted amount) to <code>TRXVAL</code> and <code>OWED</code>.</li> <li>Add <code>BLOAMT</code> (order amount) to <code>ORDVAL</code> and <code>OWED</code>.</li> <li>If <code>BLOVCL = 'Y'</code>, output order details to <code>ARLIS2</code>.</li> </ul> </li> <li>Set <code>LIMIT = ARCLMT</code> from <code>ARCUST</code> if <code>LIMIT = 0</code>.</li> <li>Add <code>ARTOTD</code> to <code>OWED</code>.</li> </ul> </li> <li>Calculate <code>OVER = LIMIT - OWED</code>.</li> <li>Generate Reports:</li> <li>ARLIST: Print for each customer:<ul> <li>Customer number (<code>ARCUST</code>), name (<code>ARNAME</code>), credit limit (<code>ARCLMT</code>), total due (<code>ARTOTD</code>), open orders (<code>ORDVAL</code>), unposted amount (<code>TRXVAL</code>), available credit (<code>OVER</code>).</li> <li>Mark \"OVER CREDIT LIMIT\" if <code>OVER &lt; 0</code>.</li> </ul> </li> <li>ARLIS2: Print for orders with <code>BLOVCL = 'Y'</code>:<ul> <li>Customer number, name, credit limit, total due, order number (<code>BLORDR</code>), unposted amount (<code>BLTAMT</code>), batch number (<code>BLBTCH</code>).</li> </ul> </li> <li>Include headers with company name, date, time, and page numbers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>Company code must be non-zero, exist in <code>BICONT</code>, and not be deleted (<code>bcdel &lt;&gt; 'D'</code>).</li> <li>Cancel process if <code>kycanc = 'CANCEL'</code>.</li> <li>Customer Filtering:</li> <li>Skip deleted customers (<code>CGDEL = 'D'</code> in <code>ARCLGR</code>) and orders (<code>BLDEL = 'D'</code> in <code>BBORCL</code>).</li> <li>Process only non-zero amounts (<code>AXCLMT</code>, <code>AXTOTD</code>, <code>BLTAMT</code>, <code>BLOAMT</code>).</li> <li>Credit Calculations:</li> <li><code>LIMIT = AXCLMT</code> (from <code>ARCUSA</code>) or <code>ARCLMT</code> (from <code>ARCUST</code> if <code>AXCLMT = 0</code>).</li> <li><code>OWED = ARTOTD + AXTOTD + BLTAMT + BLOAMT</code>.</li> <li><code>TRXVAL = sum(BLTAMT)</code> (unposted amounts).</li> <li><code>ORDVAL = sum(BLOAMT)</code> (open order amounts).</li> <li><code>OVER = LIMIT - OWED</code>; negative <code>OVER</code> indicates over credit limit.</li> <li>Report Output:</li> <li><code>ARLIST</code>: Lists all customers with credit details, marking over-limit cases.</li> <li><code>ARLIS2</code>: Lists orders exceeding credit limits (<code>BLOVCL = 'Y'</code>).</li> <li>Reports include company name, date, time, and page numbers.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Credit Limit (<code>LIMIT</code>): Sum of <code>AXCLMT</code> from <code>ARCUSA</code> for valid customers; defaults to <code>ARCLMT</code> from <code>ARCUST</code> if zero.</li> <li>Total Owed (<code>OWED</code>): Sum of <code>ARTOTD</code> (from <code>ARCUST</code>), <code>AXTOTD</code> (from <code>ARCUSA</code>), <code>BLTAMT</code> (unposted from <code>BBORCL</code>), and <code>BLOAMT</code> (orders from <code>BBORCL</code>).</li> <li>Unposted Amount (<code>TRXVAL</code>): Sum of <code>BLTAMT</code> from <code>BBORCL</code>.</li> <li>Open Orders (<code>ORDVAL</code>): Sum of <code>BLOAMT</code> from <code>BBORCL</code>.</li> <li>Available Credit (<code>OVER</code>): <code>LIMIT - OWED</code>; negative values trigger \"OVER CREDIT LIMIT\" in <code>ARLIST</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR415%20Credit%20Limit%20Report/Summary%20AR415%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return \"Invalid Company\" if <code>co = 0</code> or not found in <code>BICONT</code>.</li> <li>Return \"Company Deleted\" if <code>bcdel = 'D'</code> in <code>BICONT</code>.</li> <li>Return \"Canceled\" if <code>kycanc = 'CANCEL'</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/","title":"AR489 OCL","text":"<p>The provided document is an Operation Control Language (OCL) program snippet, typically used in IBM midrange systems like the IBM System/36 or AS/400 to control job execution and file operations. Below, I\u2019ll explain the process steps of the RPG .OCL program, identify external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used to define job control steps, such as loading programs, specifying files, and controlling execution flow. Here\u2019s a breakdown of the steps in the provided OCL program:</p> <ol> <li>Comment Section:</li> <li> <p>The lines starting with <code>**</code> are comments, providing metadata about the program:</p> <ul> <li><code>CREDIT LIMIT GROUPING MAINTENANCE</code> indicates the program\u2019s purpose, likely related to maintaining credit limit groupings in an accounts receivable (AR) system.</li> </ul> </li> <li> <p>Call External Program (<code>GSGENIEC</code>):</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>This step invokes an external program named <code>GSGENIEC</code>. This program is likely a utility or initialization program that performs setup or validation tasks before the main program execution.</li> <li>The specific functionality of <code>GSGENIEC</code> is not detailed in the snippet, but it\u2019s a prerequisite step.</li> </ul> </li> <li> <p>Conditional Check (<code>IFF</code> Statement):</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This is a conditional statement checking a system variable or parameter at location <code>L'506,3'</code>. The <code>?L'506,3'?</code> syntax refers to a specific memory location or indicator in the system\u2019s Local Data Area (LDA) or a similar mechanism.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes a <code>RETURN</code>, which terminates the OCL procedure without proceeding further.</li> <li>This acts as a gatekeeper, allowing the program to proceed only if the condition is false.</li> </ul> </li> <li> <p>Procedure Call (<code>SCPROCP</code>):</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code> with placeholder parameters (indicated by commas and <code>?9?</code>).</li> <li>The <code>?9?</code> likely represents a parameter or library reference (e.g., a library name or a specific value passed to the procedure).</li> <li>The exact purpose of <code>SCPROCP</code> is unclear from the snippet, but it could be a system procedure for setting up the environment or processing data.</li> </ul> </li> <li> <p>GSY2K Execution:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This step calls a program or proceduremechanism named <code>GSY2K</code>, likely related to Year 2000 (Y2K) compliance or date handling, which is common in legacy RPG systems.</li> <li>This program may perform date-related validations or transformations, ensuring compatibility with two-digit year formats.</li> </ul> </li> <li> <p>Load Program (<code>AR489</code>):</p> </li> <li> <p><code>// LOAD AR489</code>:</p> <ul> <li>This loads the main RPG program named <code>AR489</code>, which is the core program for the credit limit grouping maintenance functionality.</li> <li><code>AR489</code> is likely an RPG (Report Program Generator) program responsible for the business logic, such as updating or querying credit limit groupings.</li> </ul> </li> <li> <p>File Definitions:</p> </li> <li><code>// FILE NAME-ARCLGR,LABEL-?9?ARCLGR,DISP-SHR</code>:<ul> <li>Declares a file named <code>ARCLGR</code> (likely \u201cAccounts Receivable Credit Limit Grouping\u201d) with a label prefixed by <code>?9?</code> (indicating a library or system-specific prefix).</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple processes to access it concurrently.</li> </ul> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares another file named <code>ARCONT</code> (likely \u201cAccounts Receivable Control\u201d), also with a <code>?9?</code> prefix and shared access.</li> <li>These files are likely database files containing data for credit limit groupings and control information.</li> </ul> </li> <li> <p>Run the Program:</p> </li> <li><code>// RUN</code>:<ul> <li>Executes the loaded <code>AR489</code> program, which processes the data in the <code>ARCLGR</code> and <code>ARCONT</code> files to perform the credit limit grouping maintenance tasks.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. GSGENIEC:    - Likely a utility or initialization program for setup or validation. 2. GSY2K:    - A program handling Year 2000 date-related logic. 3. AR489:    - The main RPG program for credit limit grouping maintenance. 4. SCPROCP:    - A procedure, possibly for system setup or parameter processing, though its exact role is unclear.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The OCL program references the following files (equivalent to tables in modern database terminology): 1. ARCLGR:    - Likely stores data related to credit limit groupings, such as customer credit limits or group assignments. 2. ARCONT:    - Likely a control file containing configuration or control data for the accounts receivable system.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20OCL/#summary","title":"Summary","text":"<p>The OCL program orchestrates the execution of the <code>AR489</code> RPG program for maintaining credit limit groupings. It performs the following steps: - Calls <code>GSGENIEC</code> for initialization. - Checks a condition to decide whether to proceed or terminate. - Invokes <code>SCPROCP</code> for additional setup or processing. - Runs <code>GSY2K</code> for date-related processing. - Loads and executes <code>AR489</code>, using the <code>ARCLGR</code> and <code>ARCONT</code> files for data access.</p> <p>The program relies on two database files (<code>ARCLGR</code> and <code>ARCONT</code>) and calls four external programs/procedures (<code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR489</code>) to complete its tasks. The <code>?9?</code> placeholders suggest dynamic library or parameter references, typical in System/36 environments.</p> <p>If you need further details or clarification (e.g., specific RPG logic or file structures), please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/","title":"AR489 RPGLE","text":"<p>The provided RPGLE program (<code>AR489.rpgle.txt</code>) is an RPG IV program, converted from an earlier RPG version (likely RPG/400 or RPG III) for IBM midrange systems (e.g., AS/400 or IBM i). It is invoked by the OCL program (<code>AR489.ocl36.txt</code>) and handles the Credit Limit Grouping Maintenance functionality. Below, I\u2019ll explain the process steps, business rules, tables (files) used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The RPGLE program manages a workstation (interactive screen) application for maintaining credit limit groupings, allowing users to add, update, or delete customer records associated with credit limit groups. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization (<code>*inzsr</code> Subroutine):</li> <li>Code:       <pre><code>c     *inzsr        begsr\nc                   z-add     0             cono\nc                   z-add     0             cust\nc                   endsr\n</code></pre></li> <li> <p>Description: </p> <ul> <li>The initialization subroutine (<code>*inzsr</code>) sets the company number (<code>cono</code>) and customer number (<code>cust</code>) to zero.</li> <li>This ensures a clean state for variables used in the program.</li> </ul> </li> <li> <p>Main Routine Execution:</p> </li> <li>Code:      <pre><code>c                   if        qsctl = ' '\nc                   move      '1'           *in09\nc                   move      'R'           qsctl             1\nc                   else\nc                   move      '0'           *in09\nc                   move      '0'           *in01\nc                   move      '0'           *in02\nc   lr              return\nc                   end\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Checks the control variable <code>qsctl</code> (likely a system or session control flag).</li> <li>If <code>qsctl</code> is blank, sets indicator <code>*in09</code> to <code>'1'</code> (on) and <code>qsctl</code> to <code>'R'</code>, indicating the program is ready to process.</li> <li>If <code>qsctl</code> is not blank, clears indicators <code>*in09</code>, <code>*in01</code>, <code>*in02</code>, and sets <code>*inlr</code> (last record) to terminate the program.</li> <li>Indicators <code>*in01</code> and <code>*in02</code> control screen formats (<code>AR489S1</code> and <code>AR489S2</code>).</li> </ul> </li> <li> <p>Read Workstation File:</p> </li> <li>Code:      <pre><code>c   81              read      ar489s1                                lr\nc   82              read      ar489s2                                lr\nc   81              move      *on           *in01\nc   82              move      *on           *in02\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Reads the workstation file formats <code>AR489S1</code> (first screen) and <code>AR489S2</code> (second screen) based on indicators <code>*in81</code> and <code>*in82</code>.</li> <li>Sets <code>*in01</code> and <code>*in02</code> to control which screen format is active for display or input.</li> <li>Clears message fields (<code>msg1</code>, <code>msg2</code>) and indicators (<code>*in81</code>, <code>*in82</code>, <code>*in90</code>) to prepare for user interaction.</li> </ul> </li> <li> <p>Handle Function Keys:</p> </li> <li>Code:      <pre><code>c                   if        (*inka = *on)\nc                   eval      *in01 = *off\nc                   eval      *in02 = *off\nc                   eval      *in81 = *on\nc                   endif\nc                   if        (*inkg = *on)\nc                   eval      *inlr = *on\nc                   eval      *in01 = *off\nc                   eval      *in02 = *off\nc                   endif\n</code></pre></li> <li> <p>Description:</p> <ul> <li>If function key F10 (<code>*inka</code>) is pressed, clears <code>*in01</code> and <code>*in02</code> (disables screen formats) and sets <code>*in81</code> to display the first screen (<code>AR489S1</code>).</li> <li>If function key F3 or F12 (<code>*inkg</code>) is pressed, sets <code>*inlr</code> to terminate the program and clears <code>*in01</code> and <code>*in02</code>.</li> </ul> </li> <li> <p>Validate Company Number:</p> </li> <li>Code:      <pre><code>c   09              do\nc     '00'          chain     gscont                             99\nc  n99gxcono        ifne      *zeros\nc  n99              z-add     gxcono        cono\nc                   endif\nc                   end\n</code></pre></li> <li> <p>Description:</p> <ul> <li>When indicator <code>*in09</code> is on (initial program entry), the program reads the <code>GSCONT</code> file using key <code>'00'</code> to retrieve a company number (<code>gxcono</code>).</li> <li>If found (<code>*in99</code> off) and <code>gxcono</code> is non-zero, it sets the <code>cono</code> variable to <code>gxcono</code>.</li> <li>This validates or sets the company number for subsequent processing.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>Code:      <pre><code>c  n09              if        (*in01 = *on)\nc                   exsr      s1\nc                   endif\nc                   if        (*in02 = *on)\nc                   exsr      s2\nc                   endif\nc   81              write     ar489s1\nc   82              write     ar489s2\n</code></pre></li> <li> <p>Description:</p> <ul> <li>If <code>*inchelle01</code> is on, executes subroutine <code>s1</code> (processes first screen for company/customer validation).</li> <li>If <code>*in02</code> is on, executes subroutine <code>s2</code> (processes second screen for group maintenance).</li> <li>Writes the appropriate screen formats (<code>AR489S1</code> or <code>AR489S2</code>) to the workstation based on indicators <code>*in81</code> and <code>*in82</code>.</li> </ul> </li> <li> <p>Subroutine <code>s1</code> (First Screen Processing):</p> </li> <li>Code:      <pre><code>csr   s1            begsr\nc     cono          chain     arcont                             99\nc                   if        (*in99 = *on)\nc                   movel     msg(1)        msg2\nc                   eval      *in81 = *on\nc                   eval      *in90 = *on\nc                   goto      ends1\nc                   endif\nc                   if        cust = *zero\nc                   movel     msg(2)        msg2\nc                   eval      *in81 = *on\nc                   eval      *in90 = *on\nc                   goto      ends1\nc                   end\nc     clgrky        chain     arclgr                             99\nc                   move      cgdel         del\nc                   movea     arc           ars\nc                   eval      *in82 = *on\ncsr   ends1         endsr\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Validate Company: Uses <code>cono</code> to chain (read) the <code>ARCONT</code> file. If not found (<code>*in99</code> on), sets error message <code>msg(1)</code> (\"INVALID COMPANY NUMBER ENTERED\") in <code>msg2</code>, sets <code>*in81</code> and <code>*in90</code> (error indicator), and exits the subroutine.</li> <li>Validate Customer: Checks if <code>cust</code> is zero. If true, sets error message <code>msg(2)</code> (\"INVALID CUSTOMER\") in <code>msg2</code>, sets <code>*in81</code> and <code>*in90</code>, and exits.</li> <li>Retrieve Group Data: Uses the key <code>clgrky</code> (concatenation of <code>cono</code> and <code>cust</code>) to chain the <code>ARCLGR</code> file. If found, moves the delete code (<code>cgdel</code>) to <code>del</code> and the customer array (<code>arc</code>) to <code>ars</code>. Sets <code>*in82</code> to display the second screen.</li> <li>This subroutine validates input and retrieves existing group data for editing.</li> </ul> </li> <li> <p>Subroutine <code>s2</code> (Second Screen Processing):</p> </li> <li>Code:      <pre><code>csr   s2            begsr\nc                   z-add     0             y                 2 0\nc                   dou       y = 25\nc                   add       1             y\nc     clgrky        chain     arclgr                             99\nc                   if        (*in99 = *on)\nc                   except    addclg\nc                   else\nc                   except    updclg\nc                   endif\nc                   end\nc                   eval      *in81 = *on\ncsr   ends2         endsr\n</code></pre></li> <li> <p>Description:</p> <ul> <li>Iterates through the <code>ars</code> array (25 elements) to process customer group assignments.</li> <li>For each iteration, uses <code>clgrky</code> to chain the <code>ARCLGR</code> file:</li> <li>If not found (<code>*in99</code> on), executes the <code>addclg</code> exception to add a new record to <code>ARCLGR</code> with <code>del = 'A'</code>, <code>cono</code>, <code>cust</code>, and <code>ars</code> values.</li> <li>If found, executes the <code>updclg</code> exception to update the existing <code>ARCLGR</code> record with <code>del</code> and <code>ars</code> values.</li> <li>Sets <code>*in81</code> to return to the first screen after processing.</li> </ul> </li> <li> <p>Exception Outputs:</p> </li> <li>Code:      <pre><code>oarclgr    e            updclg\no                       del                  1\no                       ars                159\noarclgr    eadd         addclg\no                                            1 'A'\no                       cono                 3\no                       cust                 9\no                       ars                159\n</code></pre></li> <li>Description:<ul> <li><code>updclg</code>: Updates an existing <code>ARCLGR</code> record with the delete code (<code>del</code>) and customer array (<code>ars</code>).</li> <li><code>addclg</code>: Adds a new <code>ARCLGR</code> record with <code>del = 'A'</code> (active), <code>cono</code>, <code>cust</code>, and <code>ars</code>.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for credit limit grouping maintenance: 1. Company Number Validation:    - The company number (<code>cono</code>) must exist in the <code>ARCONT</code> file. If not, an \"INVALID COMPANY NUMBER ENTERED\" error is displayed, and the user is prompted to correct the input. 2. Customer Number Validation:    - The customer number (<code>cust</code>) must be non-zero. If zero, an \"INVALID CUSTOMER\" error is displayed. 3. Credit Limit Group Management:    - A group is identified by a composite key (<code>clgrky</code>, combining <code>cono</code> and <code>cust</code>).    - The program allows adding new group records (if not found in <code>ARCLGR</code>) or updating existing ones.    - The <code>ars</code> array stores up to 25 customer numbers associated with a group.    - The <code>del</code> field indicates the record\u2019s status (e.g., <code>'A'</code> for active, or other codes for deletion). 4. Interactive Processing:    - The first screen (<code>AR489S1</code>) accepts <code>cono</code> and <code>cust</code> for validation and retrieves group data.    - The second screen (<code>AR489S2</code>) displays group details (<code>arname</code>, <code>ars</code>, <code>del</code>) for editing or adding customers.    - Function keys (F10, F3/F12) control navigation and program termination. 5. Error Handling:    - Errors (invalid company or customer) are displayed via <code>msg1</code> and <code>msg2</code> fields, with indicator <code>*in90</code> enabling error highlighting. 6. Data Persistence:    - Changes to group assignments are saved to the <code>ARCLGR</code> file via <code>addclg</code> (add) or <code>updclg</code> (update) operations.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (equivalent to tables in modern database terminology): 1. ARCLGR:    - Description: Stores credit limit grouping data.    - Attributes: Update file (<code>uf</code>), 240 bytes, keyed on position 2 (likely <code>clgrky</code>, a composite of <code>cgcono</code> and <code>cgcust</code>).    - Fields:      - <code>cgdel</code> (1 byte): Delete code (e.g., 'A' for active).      - <code>cgcono</code> (2 bytes): Company number.      - <code>cgcust</code> (6 bytes): Customer number.      - <code>arc</code> (150 bytes): Array of customer numbers in the group. 2. ARCONT:    - Description: Accounts receivable control file, storing company information.    - Attributes: Input file (<code>if</code>), 256 bytes, keyed on position 2.    - Fields:      - <code>arname</code> (30 bytes): Company name. 3. GSCONT:    - Description: General system control file, likely for system-wide settings or defaults.    - Attributes: Input file (<code>if</code>), 512 bytes, keyed on position 2.    - Fields:      - <code>gxdel</code> (1 byte): Delete code.      - <code>gxcono</code> (2 bytes): Company number. 4. AR489D (Workstation File):    - Description: Display file for the interactive screens (<code>AR489S1</code> and <code>AR489S2</code>), handled by <code>PROFOUNDUI(HANDLER)</code>.    - Formats:      - <code>AR489S1</code>: Accepts <code>cono</code>, <code>cust</code>, and displays messages (<code>msg1</code>, <code>msg2</code>).      - <code>AR489S2</code>: Displays <code>cono</code>, <code>arname</code>, <code>cust</code>, <code>ars</code> (group customers), <code>del</code>, and messages.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs via <code>CALL</code> operations. All processing is handled within the program, using subroutines (<code>s1</code>, <code>s2</code>, <code>*inzsr</code>) and file I/O operations. However, the program is invoked by the OCL program (<code>AR489.ocl36.txt</code>), which calls <code>GSGENIEC</code>, <code>SCPROCP</code>, and <code>GSY2K</code> before loading <code>AR489</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/AR489%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR489</code> RPGLE program manages credit limit groupings through an interactive workstation interface: - Process Steps: Initializes variables, validates company and customer inputs, retrieves group data, and allows users to add or update group assignments via two screens. - Business Rules: Enforces valid company and customer numbers, manages up to 25 customers per group, and handles add/update/delete operations with error messaging. - Files Used: <code>ARCLGR</code> (group data), <code>ARCONT</code> (company data), <code>GSCONT</code> (system control), and <code>AR489D</code> (display file). - External Programs: None called directly within the RPGLE code, but the OCL program invokes <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR489</code>.</p> <p>If you need further details, such as specific field mappings, screen layouts, or additional context about the OCL integration, please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/","title":"Summary AR489 OCL","text":"<p>The RPGLE program <code>AR489</code> and its associated OCL program (<code>AR489.ocl36.txt</code>) implement a Credit Limit Grouping Maintenance system for managing customer credit limit groups in an accounts receivable system on an IBM midrange platform. Below, I\u2019ll identify the use cases implemented by the program and then provide a concise function requirement document for a non-interactive version of the primary use case, assuming inputs are provided programmatically rather than via a screen.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#list-of-use-cases-implemented","title":"List of Use Cases Implemented","text":"<p>Based on the analysis of the OCL and RPGLE programs, the primary use case implemented is:</p> <ol> <li>Maintain Customer Credit Limit Groups:</li> <li>Description: Allows users to add, update, or delete customer records associated with a credit limit group, identified by a company number and customer number. The program validates inputs, retrieves existing group data, and persists changes to the database.</li> <li>Details:<ul> <li>Validates the company number against the <code>ARCONT</code> file and ensures the customer number is non-zero.</li> <li>Manages a group of up to 25 customers (<code>ars</code> array) with a delete code (<code>del</code>) to indicate active or deleted status.</li> <li>Provides interactive screens (<code>AR489S1</code> and <code>AR489S2</code>) for input validation and group maintenance, with error handling for invalid inputs.</li> <li>Supports navigation via function keys (F10 to switch screens, F3/F12 to exit).</li> </ul> </li> </ol> <p>No additional distinct use cases are explicitly implemented, as the program focuses on the single function of maintaining credit limit groups. The OCL program\u2019s calls to <code>GSGENIEC</code>, <code>SCPROCP</code>, and <code>GSY2K</code> are preparatory steps (e.g., initialization, Y2K compliance) rather than separate use cases.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>Below is a function requirement document for a non-interactive version of the Maintain Customer Credit Limit Groups use case, assuming inputs are provided programmatically (e.g., via function parameters) rather than through interactive screens. The document outlines the business requirements, process steps, and calculations concisely.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#function-requirement-document-maintain-customer-credit-limit-groups","title":"Function Requirement Document: Maintain Customer Credit Limit Groups","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#purpose","title":"Purpose","text":"<p>The <code>MaintainCustomerCreditLimitGroups</code> function manages customer credit limit groups by adding, updating, or deleting customer assignments for a specified company and customer group, ensuring valid inputs and persisting changes to the database.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cono</code>: 2-digit numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>: 6-digit numeric): Identifies the primary customer for the group.</li> <li>Customer Array (<code>ars</code>: Array of 25 6-digit numeric): List of customer numbers in the group.</li> <li>Delete Code (<code>del</code>: 1-character): Status of the group record ('A' for active, other values for deletion).</li> <li>System Control Key (<code>control_key</code>: 2-character): Key for accessing system control data (e.g., '00').</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Success Indicator: Boolean indicating successful processing.</li> <li>Error Message: String describing any validation or processing errors (e.g., \"INVALID COMPANY NUMBER ENTERED\").</li> <li>Updated Group Data: Updated customer array and delete code if applicable.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Company Validation:</li> <li>The company number (<code>cono</code>) must exist in the <code>ARCONT</code> file.</li> <li>If invalid, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Customer Validation:</li> <li>The primary customer number (<code>cust</code>) must be non-zero.</li> <li>If zero, return error: \"INVALID CUSTOMER\".</li> <li>Group Management:</li> <li>A group is uniquely identified by a composite key (<code>clgrky</code>: <code>cono</code> + <code>cust</code>).</li> <li>The customer array (<code>ars</code>) can hold up to 25 customer numbers.</li> <li>The delete code (<code>del</code>) indicates the group\u2019s status ('A' for active, other values for deletion).</li> <li>Data Persistence:</li> <li>Add a new group record if no existing record is found for <code>clgrky</code>.</li> <li>Update an existing group record if found.</li> <li>Ensure all changes are saved to the <code>ARCLGR</code> file.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Set default values for <code>cono</code> and <code>cust</code> to 0 if not provided.</li> <li>Validate System Control:</li> <li>Read the <code>GSCONT</code> file using <code>control_key</code> (e.g., '00').</li> <li>If found and <code>gxcono</code> is non-zero, set <code>cono</code> to <code>gxcono</code>.</li> <li>Validate Company:</li> <li>Read the <code>ARCONT</code> file using <code>cono</code>.</li> <li>If not found, return error: \"INVALID COMPANY NUMBER ENTERED\".</li> <li>Validate Customer:</li> <li>Check if <code>cust</code> is non-zero.</li> <li>If zero, return error: \"INVALID CUSTOMER\".</li> <li>Process Group:</li> <li>Form composite key <code>clgrky</code> (<code>cono</code> + <code>cust</code>).</li> <li>Read the <code>ARCLGR</code> file using <code>clgrky</code>:<ul> <li>If not found, create a new record with <code>del = 'A'</code>, <code>cono</code>, <code>cust</code>, and <code>ars</code>.</li> <li>If found, update the existing record with provided <code>del</code> and <code>ars</code>.</li> </ul> </li> <li>Write changes to the <code>ARCLGR</code> file.</li> <li>Return Results:</li> <li>Return success indicator and any error messages.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Composite Key Creation:</li> <li><code>clgrky</code> = Concatenate(<code>cono</code>, <code>cust</code>) as a 10-character field (2 bytes for <code>cono</code>, 6 bytes for <code>cust</code>).</li> <li>Array Processing:</li> <li>Iterate through the <code>ars</code> array (25 elements) to validate or update customer numbers.</li> <li>Ensure each <code>ars</code> element is a valid 6-digit numeric value.</li> <li>Record Status:</li> <li>Set <code>del = 'A'</code> for new records; use provided <code>del</code> for updates.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#database-files","title":"Database Files","text":"<ul> <li>ARCLGR (Update File):</li> <li>Stores group data: <code>cgdel</code> (1 byte), <code>cgcono</code> (2 bytes), <code>cgcust</code> (6 bytes), <code>arc</code> (150 bytes for 25 customers).</li> <li>ARCONT (Input File):</li> <li>Stores company data: <code>arname</code> (30 bytes).</li> <li>GSCONT (Input File):</li> <li>Stores system control data: <code>gxdel</code> (1 byte), <code>gxcono</code> (2 bytes).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for invalid inputs (company or customer).</li> <li>Ensure database operations (read/write) handle record-not-found conditions gracefully.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Inputs are provided programmatically (e.g., via API or batch process).</li> <li>No interactive screen processing is required.</li> <li>The <code>GSCONT</code> file provides default company data if needed.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR489%20Credit%20Limit%20Grouping%20Add_Update/Summary%20AR489%20OCL/#notes","title":"Notes","text":"<ul> <li>The function requirement document assumes a non-interactive implementation, replacing the interactive workstation screens (<code>AR489S1</code>, <code>AR489S2</code>) with direct input parameters.</li> <li>The business rules and process steps are derived from the RPGLE program\u2019s logic, focusing on validation, data retrieval, and persistence.</li> <li>No external programs are called in the non-interactive version, as the OCL program\u2019s calls (<code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>) are assumed to be handled externally or unnecessary in a programmatic context.</li> </ul> <p>If you need further refinements, such as specific input formats, additional calculations, or a different structure for the requirements, please let me know!</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/","title":"AR490 OCL","text":"<p>The provided document, <code>AR490.ocl36.txt</code>, is an Operation Control Language (OCL) program used on IBM midrange systems (e.g., System/36 or AS/400) to control job execution and invoke an RPG program for generating a credit limit grouping list. This OCL program is likely called by the <code>AR490P.rpgle.txt</code> program or the earlier <code>AR490P.ocl36.txt</code> based on user input (e.g., <code>KYJOBQ</code> or conditional logic). Below, I explain the process steps, list the external programs called, and identify the tables/files used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program orchestrates the sorting of data and the execution of the <code>AR490</code> RPG program to produce a credit limit grouping list. The steps are as follows:</p> <ol> <li>Invoke Year 2000 Utility (<code>GSY2K</code>):</li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls the <code>GSY2K</code> utility to handle Year 2000 date conversions or validations, ensuring the program processes dates correctly in a legacy system environment.</li> </ul> </li> <li> <p>Set Local Variable Based on Company Selection:</p> </li> <li><code>// IF ?L'111,3'?/CO LOCAL OFFSET-1,DATA-'IAC'</code>:<ul> <li>Checks the value at location 111 (likely <code>KYALCO</code> from <code>AR490P.rpgle.txt</code>) for 3 characters equal to <code>'CO'</code>.</li> <li>If true, sets a local variable at <code>OFFSET-1</code> to <code>'IAC'</code>, indicating specific company processing.</li> </ul> </li> <li> <p><code>// ELSE LOCAL OFFSET-1,DATA-'I*C'</code>:</p> <ul> <li>If false (e.g., <code>KYALCO = 'ALL'</code>), sets the variable to <code>'I*C'</code>, indicating all companies.</li> <li>This variable likely controls the behavior of the sorting or RPG program.</li> </ul> </li> <li> <p>Load and Run Sort Program (<code>#GSORT</code>):</p> </li> <li><code>// LOAD #GSORT</code>:<ul> <li>Loads the <code>#GSORT</code> program, a system utility for sorting data.</li> </ul> </li> <li><code>// FILE NAME-INPUT,LABEL-?9?ARCLGR,DISP-SHR</code>:<ul> <li>Opens the input file <code>ARCLGR</code> (label prefixed with parameter <code>?9?</code>, likely a library name) in shared mode (<code>DISP-SHR</code>).</li> <li>This file likely contains raw data for credit limit grouping.</li> </ul> </li> <li><code>// FILE NAME-OUTPUT,LABEL-?9?AR490,RECORDS-999000,EXTEND-999000,RETAIN-J</code>:<ul> <li>Defines the output file <code>AR490</code> (label prefixed with <code>?9?</code>) with a capacity of 999,000 records, extendable by 999,000, and retained as a job file (<code>RETAIN-J</code>).</li> <li>This file will store the sorted data.</li> </ul> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Executes the <code>#GSORT</code> program with the following sort specifications:</li> <li><code>HSORTR 8A 3X 240 N</code>:<ul> <li>Defines a header sort record with an 8-byte ascending key, 3-byte exclusion, 240-byte record length, and no sequence checking (<code>N</code>).</li> </ul> </li> <li><code>I C 1NECD ?L'1,3'? 2 3EQC?L'114,2'?</code>:<ul> <li>Includes records where positions 2-3 equal the value at location 114 (likely <code>KYCO1</code>, a company number).</li> <li><code>1NECD</code> indicates no exclusion for deleted records (or a specific condition).</li> </ul> </li> <li><code>I*</code> (repeated twice):<ul> <li>Additional include conditions for company numbers at locations 116 (<code>KYCO2</code>) and 118 (<code>KYCO3</code>).</li> </ul> </li> <li><code>FNC 2 3 CO #</code>:<ul> <li>Defines a sort field for company number (positions 2-3, numeric).</li> </ul> </li> <li><code>FNC 4 9 CUST</code>:<ul> <li>Defines a sort field for customer number (positions 4-9, numeric).</li> </ul> </li> <li><code>FDC 1 240</code>:<ul> <li>Includes the entire record (positions 1-240) in the output.</li> </ul> </li> <li>Purpose: Sorts the <code>ARCLGR</code> file by company and customer number, filtering by up to three company numbers specified by the user (from <code>AR490P</code>).</li> </ul> </li> <li> <p>Load and Run RPG Program (<code>AR490</code>):</p> </li> <li><code>// LOAD AR490</code>:<ul> <li>Loads the RPG program <code>AR490</code>, which processes the sorted data to generate the credit limit grouping list.</li> </ul> </li> <li>File Definitions:<ul> <li><code>// FILE NAME-ARCLGR,LABEL-?9?AR490</code>:</li> <li>Opens the sorted file <code>AR490</code> (previously created by <code>#GSORT</code>) as <code>ARCLGR</code>.</li> <li><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</li> <li>Opens the <code>ARCONT</code> file (company control file) in shared mode.</li> <li><code>// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR</code>:</li> <li>Opens the <code>ARCUST</code> file (customer file) in shared mode.</li> <li><code>// FILE NAME-GSTABL,LABEL-?9?GSTABL,DISP-SHR</code>:</li> <li>Opens the <code>GSTABL</code> file (likely a general table or configuration file) in shared mode.</li> </ul> </li> <li><code>// RUN</code>:<ul> <li>Executes the <code>AR490</code> program, which uses the sorted <code>ARCLGR</code> file and references <code>ARCONT</code>, <code>ARCUST</code>, and <code>GSTABL</code> to produce the final report.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A Year 2000 utility for date handling. 2. #GSORT:    - Loaded via <code>// LOAD #GSORT</code>.    - A system sort utility that sorts the <code>ARCLGR</code> file by company and customer number. 3. AR490:    - Loaded via <code>// LOAD AR490</code>.    - The main RPG program that processes the sorted data to generate the credit limit grouping list.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following files: 1. ARCLGR:    - Input file for <code>#GSORT</code> (label <code>?9?ARCLGR</code>, shared mode).    - Also used as the input file <code>ARCLGR</code> (label <code>?9?AR490</code>) for the <code>AR490</code> program after sorting.    - Likely contains raw credit limit grouping data (e.g., company and customer numbers). 2. AR490:    - Output file from <code>#GSORT</code> (label <code>?9?AR490</code>).    - Becomes the sorted input file for the <code>AR490</code> program. 3. ARCONT:    - Used by <code>AR490</code> (label <code>?9?ARCONT</code>, shared mode).    - Contains company data (e.g., company number, name). 4. ARCUST:    - Used by <code>AR490</code> (label <code>?9?ARCUST</code>, shared mode).    - Contains customer data (e.g., customer number, details). 5. GSTABL:    - Used by <code>AR490</code> (label <code>?9?GSTABL</code>, shared mode).    - Likely a general table file containing configuration or reference data.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment with <code>GSY2K</code>, sets a local variable based on company selection (<code>'CO'</code> or <code>'ALL'</code>), sorts the <code>ARCLGR</code> file by company and customer number using <code>#GSORT</code> (filtered by user-specified companies), and runs the <code>AR490</code> RPG program to generate the credit limit grouping list using the sorted <code>AR490</code> file and supporting files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>).</li> <li>External Programs: <code>GSY2K</code> (date utility), <code>#GSORT</code> (sort utility), <code>AR490</code> (main RPG program).</li> <li>Tables/Files: <code>ARCLGR</code> (input/output for sorting), <code>AR490</code> (sorted output/input), <code>ARCONT</code> (company data), <code>ARCUST</code> (customer data), <code>GSTABL</code> (configuration data).</li> </ul> <p>If you need further analysis (e.g., details of the <code>AR490</code> RPG program or the structure of the files), please provide the RPG source code for <code>AR490</code> or additional file definitions.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/","title":"AR490 RPG36","text":"<p>The provided document, <code>AR490.rpg36.txt</code>, is an RPG III (RPG/36) program used on IBM midrange systems (e.g., System/36 or AS/400) to generate a credit limit grouping list. This program is called by the OCL program <code>AR490.ocl36.txt</code> after sorting data with <code>#GSORT</code>. Below, I explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR490</code> RPG program processes sorted input data from the <code>ARCLGR</code> file, retrieves additional data from <code>ARCONT</code> and <code>ARCUST</code>, and produces a formatted report on the printer file <code>PRINT</code>. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>Header Specification:<ul> <li><code>H P064 B AR490</code>: Specifies program name <code>AR490</code> with a program identifier <code>P064</code> and batch mode (<code>B</code>).</li> </ul> </li> <li>File Declarations:<ul> <li><code>ARCLGR</code>: Primary input file (240 bytes, disk, no key).</li> <li><code>ARCONT</code>: Input file (256 bytes, indexed, key at position 2, record length 256).</li> <li><code>ARCUST</code>: Input file (384 bytes, indexed, key at position 8, record length 384).</li> <li><code>PRINT</code>: Output printer file (165 bytes, with overflow indicator <code>OF</code>).</li> </ul> </li> <li>Data Structures:<ul> <li><code>SEP</code>: Array of 82 elements (2 bytes each) for separator lines in the report.</li> <li><code>ARC</code>: Array of 25 elements (6 bytes each, numeric) to store credit limit group numbers (<code>CGCL01</code> to <code>CGCL25</code>).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>TIMDAT</code> (12 bytes): Stores system time and date.</li> <li><code>TIME</code> (6 bytes): Formatted time.</li> <li><code>DATE</code> (6 bytes): Formatted date.</li> <li><code>PAGE</code> (implied): Page number for the report.</li> </ul> </li> <li> <p>Read Primary File (<code>ARCLGR</code>):</p> </li> <li>The program reads records from <code>ARCLGR</code> sequentially (primary file, level <code>L1</code>).</li> <li>Each record contains:<ul> <li><code>CGDEL</code> (position 1): Delete code ('D' for deleted).</li> <li><code>CGCONO</code> (positions 2-3): Company number.</li> <li><code>CGCUST</code> (positions 4-9): Customer number.</li> <li><code>CGCL01</code> to <code>CGCL25</code> (positions 10-159): Up to 25 credit limit group numbers.</li> <li><code>ARKEY</code> (positions 2-9): Composite key (company number + customer number) for chaining to <code>ARCUST</code>.</li> </ul> </li> <li> <p>Records marked with <code>CGDEL = 'D'</code> are processed but not explicitly filtered out in the code (business rule may assume sorting excluded them).</p> </li> <li> <p>Retrieve Company Name (<code>ARCONT</code>):</p> </li> <li>Logic:<ul> <li>At level <code>L1</code> (for each <code>ARCLGR</code> record), chain to <code>ARCONT</code> using <code>CGCONO</code> (company number) as the key (line 0048).</li> <li>If the record is not found (indicator <code>44</code> on), set <code>ACNAME</code> to blanks (line 0049).</li> </ul> </li> <li> <p>Fields:</p> <ul> <li><code>ACNAME</code> (positions 4-33): Company name retrieved from <code>ARCONT</code>.</li> </ul> </li> <li> <p>Retrieve Customer Name (<code>ARCUST</code>):</p> </li> <li>Logic:<ul> <li>Chain to <code>ARCUST</code> using <code>ARKEY</code> (company number + customer number, positions 2-9) as the key (line 0057).</li> <li>If the record is not found (indicator <code>99</code> on), set <code>ARNAME</code> to blanks (line 0058).</li> </ul> </li> <li> <p>Fields:</p> <ul> <li><code>ARCO</code> (positions 2-3): Company number (for validation, not used here).</li> <li><code>ARNAME</code> (positions 10-39): Customer name.</li> </ul> </li> <li> <p>Report Header Processing:</p> </li> <li>Logic (lines 0051-0055):<ul> <li>If not already processed (indicator <code>11</code> off):</li> <li>Set <code>SEP</code> to <code>'* '</code> (separator line).</li> <li>Capture system time and date into <code>TIMDAT</code> (12 bytes).</li> <li>Move <code>TIMDAT</code> to <code>TIME</code> (first 6 bytes) and <code>DATE</code> (last 6 bytes).</li> <li>Set indicator <code>11</code> on to prevent reprocessing.</li> </ul> </li> <li> <p>Output (lines 0061-0083, detail lines at <code>L1</code>):</p> <ul> <li>Write header lines when overflow (<code>OF</code>) or at level <code>L1</code>:</li> <li>Line 1: <code>ACNAME</code> (company name, 30 characters), \"PAGE\", and page number (<code>PAGE</code>, zero-suppressed).</li> <li>Line 2: \"CREDIT LIMIT GROUPING LIST\", \"TIME\", and formatted time (<code>TIME</code>).</li> <li>Line 3: Separator line (<code>SEP</code>).</li> <li>Line 4: \"CUSTOMER\" and \"GROUPING\" labels.</li> <li>Line 5: Separator line (<code>SEP</code>).</li> </ul> </li> <li> <p>Detail Line Processing:</p> </li> <li>Logic (lines 0084-0104, detail lines at level <code>01</code>):<ul> <li>For each <code>ARCLGR</code> record:</li> <li>Write detail line 1:<ul> <li><code>CGCUST</code> (customer number, zero-suppressed, 6 characters).</li> <li><code>ARNAME</code> (customer name, 40 characters, left-justified).</li> </ul> </li> <li>Write detail line 2:<ul> <li>Credit limit group numbers (<code>ARC,1</code> to <code>ARC,15</code>, corresponding to <code>CGCL01</code> to <code>CGCL15</code>, zero-suppressed, 9-character spacing).</li> </ul> </li> </ul> </li> <li> <p>Output:</p> <ul> <li>Lists customer number, name, and up to 15 credit limit group numbers per customer (though <code>ARCLGR</code> supports up to 25, only 15 are printed).</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li>The program ends when <code>ARCLGR</code> reaches end-of-file, closing all files and terminating.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the credit limit grouping list:</p> <ol> <li>Data Source:</li> <li>Processes sorted records from <code>ARCLGR</code>, which contains company numbers, customer numbers, and up to 25 credit limit group numbers per customer.</li> <li> <p>Assumes <code>ARCLGR</code> is pre-sorted by company and customer number (handled by <code>#GSORT</code> in <code>AR490.ocl36.txt</code>).</p> </li> <li> <p>Company Validation:</p> </li> <li>Retrieves company name (<code>ACNAME</code>) from <code>ARCONT</code> using <code>CGCONO</code>.</li> <li> <p>If the company is not found, prints a blank company name.</p> </li> <li> <p>Customer Validation:</p> </li> <li>Retrieves customer name (<code>ARNAME</code>) from <code>ARCUST</code> using <code>ARKEY</code> (company + customer number).</li> <li> <p>If the customer is not found, prints a blank customer name.</p> </li> <li> <p>Report Formatting:</p> </li> <li>Groups output by company, printing the company name in the header.</li> <li>Lists each customer\u2019s number, name, and up to 15 credit limit group numbers.</li> <li>Includes page number, date, and time in the header.</li> <li> <p>Uses separator lines (<code>* * *</code>) for readability.</p> </li> <li> <p>Deletion Handling:</p> </li> <li> <p>Processes records with <code>CGDEL</code> (delete code), but does not explicitly filter out deleted records (<code>CGDEL = 'D'</code>). The sorting step in <code>AR490.ocl36.txt</code> likely excludes deleted records.</p> </li> <li> <p>Output Limitation:</p> </li> <li>Prints only the first 15 credit limit groups (<code>CGCL01</code> to <code>CGCL15</code>) out of 25 possible groups in <code>ARCLGR</code>, potentially omitting data if more than 15 groups exist.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. ARCLGR:    - Primary input file (240 bytes, disk).    - Contains:      - <code>CGDEL</code> (1 byte): Delete code.      - <code>CGCONO</code> (2 bytes): Company number.      - <code>CGCUST</code> (6 bytes): Customer number.      - <code>CGCL01</code> to <code>CGCL25</code> (6 bytes each): Credit limit group numbers.      - <code>ARKEY</code> (8 bytes): Composite key (company + customer).    - Sorted by company and customer number by <code>#GSORT</code>. 2. ARCONT:    - Input file (256 bytes, indexed, key at position 2).    - Contains:      - <code>ACNAME</code> (30 bytes, positions 4-33): Company name.    - Used to retrieve company names. 3. ARCUST:    - Input file (384 bytes, indexed, key at position 8).    - Contains:      - <code>ARCO</code> (2 bytes, positions 2-3): Company number.      - <code>ARNAME</code> (30 bytes, positions 10-39): Customer name.    - Used to retrieve customer names. 4. PRINT:    - Output printer file (165 bytes).    - Used to generate the report with headers and detail lines.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs using <code>CALL</code> or similar operations. It is invoked by the OCL program <code>AR490.ocl36.txt</code> and relies on the sorted input from <code>#GSORT</code>, but no additional programs are called within the RPG code.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program reads sorted records from <code>ARCLGR</code>, retrieves company names from <code>ARCONT</code> and customer names from <code>ARCUST</code>, and generates a printer report (<code>PRINT</code>) with headers (company name, date, time, page) and detail lines (customer number, name, up to 15 credit limit group numbers). It formats the report with separator lines and handles missing data by printing blanks.</li> <li>Business Rules: Processes sorted <code>ARCLGR</code> data, validates company and customer numbers, prints up to 15 credit limit groups per customer, and formats the report with headers and separators. Assumes pre-filtered data (e.g., non-deleted records) from sorting.</li> <li>Tables/Files: <code>ARCLGR</code> (input data), <code>ARCONT</code> (company names), <code>ARCUST</code> (customer names), <code>PRINT</code> (report output).</li> <li>External Programs: None called within the RPG program.</li> </ul> <p>If you need further details (e.g., sample report output or file record layouts), please provide additional information or requirements.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/","title":"AR490P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, <code>AR490P.ocl36.txt</code>, used in IBM midrange systems (e.g., AS/400 or System/36) to control job execution and interact with RPG programs. Below, I explain the process steps of the OCL program, list the external programs called, and identify the tables/files used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL programs are used to define job control procedures, including loading programs, opening files, setting parameters, and controlling program flow. The steps in <code>AR490P.ocl36.txt</code> are as follows:</p> <ol> <li>Invoke a Program (<code>GSGENIEC</code>):</li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>Calls the program <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li>This step may perform environment setup or validation before proceeding.</li> </ul> </li> <li> <p>Conditional Check on Location 506 (<code>?L'506,3'?/YES RETURN</code>):</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>Checks the value at location 506 (likely a system or program variable) for a length of 3 characters.</li> <li>If the condition is true (<code>YES</code>), the program terminates early with a <code>RETURN</code> statement, halting further execution.</li> <li>This acts as a gatekeeper to prevent unnecessary processing.</li> </ul> </li> <li> <p>Set Procedure Parameter (<code>SCPROCP</code>):</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>Sets a procedure parameter, passing the value from parameter <code>?9?</code> (a placeholder for a runtime parameter, likely a library or file name).</li> <li>The commas indicate unused parameter positions (up to 8 parameters are skipped).</li> <li>This step prepares the environment for subsequent steps.</li> </ul> </li> <li> <p>Clear Local Variables:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>Initializes all local variables to blanks, ensuring a clean state for the program.</li> <li>This prevents residual data from affecting execution.</li> </ul> </li> <li> <p>Invoke Year 2000 Utility (<code>GSY2K</code>):</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>Calls a Year 2000 (Y2K) compliance utility, likely to handle date-related conversions or validations.</li> <li>This ensures the program handles dates correctly, especially for legacy systems.</li> </ul> </li> <li> <p>Load the Main Program (<code>AR490P</code>):</p> </li> <li> <p><code>// LOAD AR490P</code>:</p> <ul> <li>Loads the RPG program <code>AR490P</code> into memory for execution.</li> <li>This is the core program responsible for the business logic (e.g., credit limit grouping).</li> </ul> </li> <li> <p>Open File (<code>ARCONT</code>):</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Opens the file <code>ARCONT</code> with the label derived from parameter <code>?9?</code> concatenated with <code>ARCONT</code>.</li> <li><code>DISP-SHR</code> indicates the file is opened in shared mode, allowing concurrent access by other jobs.</li> <li>This file is likely a customer or accounts receivable control file used by <code>AR490P</code>.</li> </ul> </li> <li> <p>Execute the Program:</p> </li> <li> <p><code>// RUN</code>:</p> <ul> <li>Initiates execution of the loaded program <code>AR490P</code>.</li> <li>The program processes data using the opened <code>ARCONT</code> file.</li> </ul> </li> <li> <p>Conditional Check on Location 129 (<code>?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li> <p><code>// IF ?L'129,6'?/CANCEL GOTO END</code>:</p> <ul> <li>Checks the value at location 129 (likely a status or error code) for a length of 6 characters.</li> <li>If the condition is true (<code>CANCEL</code>), the program jumps to the <code>END</code> tag, terminating execution.</li> <li>This acts as an error or cancellation check after <code>AR490P</code> runs.</li> </ul> </li> <li> <p>Conditional Job Submission Based on Location 120:</p> <ul> <li><code>// IF ?L'120,1'?/Y JOBQ 5,?CLIB?,AR490,,,,,,,,,?9?</code>:</li> <li>Checks the value at location 120 for a length of 1 character.</li> <li>If true (<code>Y</code>), submits a job to job queue <code>5</code> with:<ul> <li>Library name from <code>?CLIB?</code> (a runtime parameter).</li> <li>Program <code>AR490</code> (likely a related RPG program).</li> <li>Parameter <code>?9?</code> passed to the job.</li> </ul> </li> <li>The commas indicate unused parameters.</li> <li><code>// ELSE AR490 ,,,,,,,,?9?</code>:</li> <li>If the condition is false, runs <code>AR490</code> directly (not in a job queue) with parameter <code>?9?</code>.</li> <li>This provides an alternate execution path for <code>AR490</code>.</li> </ul> </li> <li> <p>End of Program (<code>TAG END</code>):</p> <ul> <li><code>// TAG END</code>:</li> <li>Marks the end of the program or a jump target for the <code>GOTO END</code> statement.</li> <li>Execution stops here if the <code>CANCEL</code> condition is met.</li> </ul> </li> <li> <p>Clear Local Variables Again:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Resets all local variables to blanks, cleaning up after execution.</li> <li>This ensures no residual data persists for subsequent runs.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility for initialization or environment setup. 2. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A Year 2000 utility for date handling. 3. AR490P:    - Loaded and executed via <code>// LOAD AR490P</code> and <code>// RUN</code>.    - The main RPG program for credit limit grouping. 4. AR490:    - Referenced in the conditional job submission (<code>JOBQ</code>) or direct execution (<code>ELSE</code>).    - Likely a related RPG program, possibly a variant or wrapper for <code>AR490P</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following file: 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - A file (likely a database table or physical file) used by <code>AR490P</code>.    - The label includes the parameter <code>?9?</code>, suggesting the file resides in a library specified at runtime.    - Likely contains customer or accounts receivable data for credit limit grouping.</p> <p>No other files or tables are explicitly mentioned in the OCL program. However, <code>AR490P</code> (the RPG program) may internally reference additional files, which are not visible in the OCL.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Steps: The OCL program initializes the environment, checks conditions, loads and runs the <code>AR490P</code> RPG program with the <code>ARCONT</code> file, handles errors, and conditionally submits or runs <code>AR490</code> based on runtime parameters. It ensures proper setup, execution, and cleanup.</li> <li>External Programs: <code>GSGENIEC</code>, <code>GSY2K</code>, <code>AR490P</code>, <code>AR490</code>.</li> <li>Tables/Files: <code>ARCONT</code>.</li> </ul> <p>If you need further analysis (e.g., details about <code>AR490P</code>\u2019s RPG logic or additional context about <code>ARCONT</code>), please provide the RPG source code or more details about the system environment.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/","title":"AR490P RPGLE","text":"<p>The provided RPGLE program, <code>AR490P.rpgle.txt</code>, is an RPG IV program converted from an earlier RPG version (likely RPG/400) using the TARGET/400 tool, as indicated by the conversion comments. This program handles the user interface and validation logic for a credit limit grouping list, interacting with a workstation file and database files. It is called by the OCL program <code>AR490P.ocl36.txt</code> previously analyzed. Below, I explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The program is designed to prompt the user for input via a workstation display file, validate selections for company codes and job queue options, and prepare data for a credit limit grouping report. The steps are as follows:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a non-default activation group, allowing for modern RPG IV features.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>H DFTNAME(AR490P)</code>: Specifies the default program name as <code>AR490P</code>.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>COM</code>: A compile-time array with 5 error messages (40 characters each) for validation feedback.</li> <li><code>DCO</code>: A data structure with 10 subfields (<code>DC01</code> to <code>DC10</code>, each 35 characters) to store company numbers and names.</li> <li><code>UDS</code>: A data structure for passing parameters (e.g., <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>KYCANC</code>) to/from the OCL program.</li> </ul> </li> <li> <p>File Declarations:</p> <ul> <li><code>AR490PD</code>: A workstation file (display file) for user interaction, using the <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering.</li> <li><code>ARCONT</code>: A disk file (256 bytes, indexed, key at position 2) containing company data.</li> <li><code>GSCONT</code>: Another disk file (512 bytes, indexed, key at position 2) for company validation.</li> </ul> </li> <li> <p>Workstation File Processing:</p> </li> <li>Initial Check (<code>QSCTL</code>):<ul> <li>If <code>QSCTL</code> (control field) is blank:</li> <li>Set <code>*IN09 = '1'</code> and <code>*IN01 = '0'</code> to indicate initial screen display.</li> <li>Set <code>QSCTL = 'R'</code> to mark the screen as ready.</li> <li>Else:</li> <li>Set <code>*IN09 = '0'</code> and <code>*IN01 = '1'</code>.</li> <li>Read the <code>AR490S1</code> format from <code>AR490PD</code>.</li> <li>If the last record is read (<code>LR</code> indicator), exit the program (<code>RETURN</code>).</li> </ul> </li> <li> <p>Clear Indicators and Message:</p> <ul> <li>Reset message field <code>MSG</code> to blanks.</li> <li>Turn off indicators <code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code> to clear error states.</li> </ul> </li> <li> <p>Handle Cancel Key (<code>*INKG</code>):</p> </li> <li> <p>If the cancel key is pressed (<code>*INKG = *ON</code>):</p> <ul> <li>Turn off <code>*IN01</code> and <code>*IN09</code>.</li> <li>Set <code>*INLR = *ON</code> to end the program.</li> <li>Set <code>KYCANC = 'CANCEL'</code> to signal cancellation to the OCL program.</li> <li>This allows the user to exit the program gracefully.</li> </ul> </li> <li> <p>Initial Setup (<code>*IN09</code>):</p> </li> <li> <p>If <code>*IN09 = *ON</code> (initial screen display):</p> <ul> <li>Set <code>*IN81 = *ON</code> to indicate screen output.</li> <li>Execute the <code>ONETIM</code> subroutine to populate company data.</li> </ul> </li> <li> <p>Screen Processing (<code>*IN01</code>):</p> </li> <li> <p>If <code>*IN01 = *ON</code> (user input received):</p> <ul> <li>Execute the <code>SCREEN1</code> subroutine to validate user input.</li> </ul> </li> <li> <p>Main Loop Control:</p> </li> <li>If <code>*IN81 = *OFF</code>, set <code>*INLR = *ON</code> to end the program.</li> <li> <p>If <code>*IN81 = *ON</code>, write the <code>AR490S1</code> format to the display file to show the screen (with errors or data).</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Populate the company selection dropdown (<code>DCO</code> array) and initialize parameters.</li> <li> <p>Steps:</p> <ul> <li>Clear the <code>DCO</code> array.</li> <li>Initialize counter <code>X = 1</code> and credit limit <code>ACLIM = 00</code>.</li> <li>Set the lower limit for <code>ARCONT</code> file using <code>ACLIM</code> (<code>SETLL</code>).</li> <li>Read <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10 = *ON</code>) or 10 companies are loaded:</li> <li>Skip records marked as deleted (<code>ACDEL = 'D'</code>).</li> <li>Store company number (<code>ACCO</code>) and name (<code>ACNAME</code>) in <code>DCO(X)</code>.</li> <li>Increment <code>X</code>; stop if <code>X = 10</code>.</li> <li>Move <code>DCO(1)</code> to <code>DCO(10)</code> into individual fields (<code>DCO1</code> to <code>DCO10</code>) for display.</li> <li>Check <code>GSCONT</code> file for a company number (<code>GXCONO</code>):</li> <li>If found and non-zero, set <code>KYALCO = 'CO '</code> and <code>KYCO1 = GXCONO</code>.</li> <li>Else, set <code>KYALCO = 'ALL'</code>.</li> <li>Set <code>KYJOBQ = 'N'</code> (default job queue selection).</li> <li>Set <code>KYCOPY = 01</code> (default number of copies).</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validate user input for company selection and job queue.</li> <li>Steps:<ul> <li>Validate Company Selection:</li> <li>Check if <code>KYALCO</code> is <code>'ALL'</code> or <code>'CO '</code>; if not, set error indicators <code>*IN81</code>, <code>*IN90</code>, display error message <code>COM(1)</code> (\"COMPANY SELECTION MUST BE 'CO' or 'ALL'\"), and exit.</li> <li>If <code>KYALCO = 'CO'</code> and all company fields (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are zero, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>, display <code>COM(2)</code> (\"IF CO, THEN ENTER VALID COMPANIES\"), and exit.</li> <li>If <code>KYALCO = 'ALL'</code> and any company field is non-zero, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>, display <code>COM(3)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\"), and exit.</li> <li>If <code>KYALCO = 'CO'</code>, validate each company number (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) using <code>CHAIN</code> to <code>ARCONT</code>:<ul> <li>If any company number is invalid (<code>*IN10 = *ON</code>), set error indicators <code>*IN81</code>, <code>*IN90</code>, and <code>*IN51</code>, <code>*IN52</code>, or <code>*IN53</code> (depending on the field), display <code>COM(4)</code> (\"INVALID COMPANY NUMBER\"), and exit.</li> </ul> </li> <li>Validate Job Queue Selection:</li> <li>Check if <code>KYJOBQ</code> is <code>'Y'</code> or <code>'N'</code>; if not, set error indicators <code>*IN81</code>, <code>*IN90</code>, <code>*IN54</code>, display <code>COM(5)</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\"), and exit.</li> <li>Validate Copies:</li> <li>If <code>KYCOPY = 00</code>, set it to <code>01</code> to ensure at least one copy.</li> <li>Exit the subroutine (<code>ENDS1</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating a credit limit grouping list:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies) via <code>KYALCO</code>.</li> <li>If <code>'CO'</code> is selected, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided.</li> <li>If <code>'ALL'</code> is selected, no company numbers should be entered.</li> <li>Company numbers must exist in the <code>ARCONT</code> file and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</li> <li> <p>Invalid company selections trigger error messages and prevent further processing.</p> </li> <li> <p>Job Queue Selection:</p> </li> <li>The user must specify whether the report runs in a job queue (<code>KYJOBQ = 'Y'</code>) or interactively (<code>KYJOBQ = 'N'</code>).</li> <li> <p>Invalid job queue entries trigger an error message.</p> </li> <li> <p>Number of Copies:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be at least 1. If zero is entered, it is set to 1.</p> </li> <li> <p>Cancellation:</p> </li> <li> <p>If the user presses the cancel key, the program sets <code>KYCANC = 'CANCEL'</code> and exits, signaling the OCL program to terminate.</p> </li> <li> <p>Company Data Population:</p> </li> <li>Up to 10 active companies (non-deleted) from <code>ARCONT</code> are loaded into the <code>DCO</code> array for display in a dropdown.</li> <li>The program checks <code>GSCONT</code> to determine if a specific company number should be preselected (<code>KYALCO = 'CO '</code>) or if all companies are selected (<code>KYALCO = 'ALL'</code>).</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The program uses the following files: 1. AR490PD:    - A workstation file (display file) for user interaction.    - Contains the <code>AR490S1</code> format for input/output.    - Uses <code>PROFOUNDUI(HANDLER)</code> for modern UI rendering. 2. ARCONT:    - A disk file (256 bytes, indexed, key at position 2).    - Contains company data with fields:      - <code>ACDEL</code> (1 byte): Delete flag ('D' for deleted).      - <code>ACCO</code> (2 bytes, numeric): Company number.      - <code>ACNAME</code> (30 bytes): Company name.    - Used to validate company numbers and populate the dropdown. 3. GSCONT:    - A disk file (512 bytes, indexed, key at position 2).    - Contains company data with fields:      - <code>GXDEL</code> (1 byte): Delete flag.      - <code>GXCONO</code> (2 bytes, numeric): Company number.    - Used to determine the default company selection.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPG program does not explicitly call any external programs using <code>CALL</code> or similar operations. However: - It interacts with the <code>PROFOUNDUI(HANDLER)</code> for the <code>AR490PD</code> display file, which is a UI handler, not a program. - The OCL program (<code>AR490P.ocl36.txt</code>) that calls this RPG program references <code>AR490</code>, which may be invoked based on user input (<code>KYJOBQ</code>), but this is handled outside the RPG program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/AR490P%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Steps: The program initializes, displays a screen to prompt for company selection (<code>ALL</code> or specific companies), job queue option (<code>Y</code> or <code>N</code>), and number of copies. It populates a company dropdown from <code>ARCONT</code>, validates user input, and sets parameters for the OCL program to proceed (or cancel). The <code>ONETIM</code> subroutine loads company data, and <code>SCREEN1</code> validates input.</li> <li>Business Rules: Enforces valid company selection (<code>ALL</code> or <code>CO</code> with valid company numbers), job queue selection (<code>Y</code> or <code>N</code>), and ensures at least one copy. Invalid inputs trigger error messages, and cancellation is supported.</li> <li>Tables/Files: <code>AR490PD</code> (workstation), <code>ARCONT</code> (company data), <code>GSCONT</code> (company validation).</li> <li>External Programs: None explicitly called within the RPG program.</li> </ul> <p>If you need further details (e.g., the display file format <code>AR490S1</code> or additional context about <code>AR490</code>), please provide relevant files or information.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/","title":"Summary AR490P OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#list-of-use-cases-implemented-by-the-program","title":"List of Use Cases Implemented by the Program","text":"<p>Based on the provided call stack (<code>AR490P.ocl36.txt</code>, <code>AR490P.rpgle.txt</code>, <code>AR490.ocl36.txt</code>, <code>AR490.rpg36.txt</code>), the program implements a single primary use case:</p> <ol> <li>Generate Credit Limit Grouping List:</li> <li>This use case allows users to generate a printed report listing customers grouped by company with their associated credit limit group numbers. The user can select either all companies or specific companies, choose whether to run the report interactively or in a job queue, and specify the number of report copies. The report includes company names, customer numbers, customer names, and up to 15 credit limit group numbers per customer.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#credit-limit-grouping-list-function-requirements","title":"Credit Limit Grouping List Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#overview","title":"Overview","text":"<p>The <code>GenerateCreditLimitGroupingList</code> function generates a report listing customers by company, including customer names and up to 15 credit limit group numbers per customer. It accepts inputs for company selection, job queue preference, and number of copies, processes data from company and customer files, and produces a sorted, formatted report.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection (<code>companySelection</code>): String, either <code>'ALL'</code> (all companies) or <code>'CO'</code> (specific companies).</li> <li>Company Numbers (<code>companyNumbers</code>): Array of up to 3 numeric company numbers (2 digits each). Required if <code>companySelection = 'CO'</code>, otherwise empty.</li> <li>Job Queue (<code>jobQueue</code>): String, <code>'Y'</code> (run in job queue) or <code>'N'</code> (run interactively).</li> <li>Copies (<code>copies</code>): Numeric, number of report copies (default 1 if 0).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Report: A formatted text file or printer output containing:</li> <li>Header: Company name, report title (\"CREDIT LIMIT GROUPING LIST\"), date, time, page number.</li> <li>Detail: Customer number, customer name, up to 15 credit limit group numbers per customer.</li> <li>Status: Success or error message (e.g., \"Invalid company number\").</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>companySelection</code> is <code>'ALL'</code> or <code>'CO'</code>. If invalid, return error: \"Company selection must be 'CO' or 'ALL'\".</li> <li>If <code>companySelection = 'CO'</code>, validate <code>companyNumbers</code>:<ul> <li>At least one company number must be non-zero.</li> <li>Each company number must exist in <code>ARCONT</code> and not be marked deleted (<code>ACDEL \u2260 'D'</code>). If invalid, return error: \"Invalid company number\".</li> </ul> </li> <li>If <code>companySelection = 'ALL'</code>, ensure <code>companyNumbers</code> is empty. If not, return error: \"If ALL, do not enter companies\".</li> <li>Ensure <code>jobQueue</code> is <code>'Y'</code> or <code>'N'</code>. If invalid, return error: \"Job queue entry must be 'Y' or 'N'\".</li> <li> <p>If <code>copies = 0</code>, set to 1.</p> </li> <li> <p>Retrieve Default Company:</p> </li> <li>Query <code>GSCONT</code> for a default company number (<code>GXCONO</code>).</li> <li> <p>If non-zero, set <code>companySelection = 'CO'</code> and include <code>GXCONO</code> in <code>companyNumbers</code>. Otherwise, use <code>companySelection = 'ALL'</code>.</p> </li> <li> <p>Sort Input Data:</p> </li> <li>Read <code>ARCLGR</code> file (credit limit grouping data).</li> <li>Filter records where <code>CGDEL \u2260 'D'</code> (non-deleted).</li> <li>If <code>companySelection = 'CO'</code>, include only records where <code>CGCONO</code> matches a value in <code>companyNumbers</code>.</li> <li>Sort by <code>CGCONO</code> (company number, positions 2-3) and <code>CGCUST</code> (customer number, positions 4-9).</li> <li> <p>Output sorted data to temporary file <code>AR490</code>.</p> </li> <li> <p>Generate Report:</p> </li> <li>Read sorted <code>AR490</code> file.</li> <li>For each record:<ul> <li>Retrieve company name (<code>ACNAME</code>) from <code>ARCONT</code> using <code>CGCONO</code>. If not found, use blank.</li> <li>Retrieve customer name (<code>ARNAME</code>) from <code>ARCUST</code> using <code>ARKEY</code> (company + customer number). If not found, use blank.</li> <li>Extract credit limit group numbers (<code>CGCL01</code> to <code>CGCL15</code>, positions 10-99).</li> <li>Write to report:</li> <li>Header (per company): <code>ACNAME</code>, \"CREDIT LIMIT GROUPING LIST\", date, time, page number, separator lines.</li> <li>Detail (per customer): <code>CGCUST</code> (zero-suppressed), <code>ARNAME</code>, <code>CGCL01</code> to <code>CGCL15</code> (zero-suppressed, 9-character spacing).</li> </ul> </li> <li> <p>Repeat for <code>copies</code> iterations.</p> </li> <li> <p>Execution Mode:</p> </li> <li>If <code>jobQueue = 'Y'</code>, submit report generation to job queue.</li> <li>If <code>jobQueue = 'N'</code>, run interactively.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Selection:</li> <li><code>'ALL'</code> includes all non-deleted companies; <code>'CO'</code> requires 1-3 valid company numbers.</li> <li>Company numbers must exist in <code>ARCONT</code> and be active (<code>ACDEL \u2260 'D'</code>).</li> <li>Customer Data:</li> <li>Only non-deleted customers (<code>CGDEL \u2260 'D'</code>) from <code>ARCLGR</code> are included.</li> <li>Customer names are retrieved from <code>ARCUST</code>; missing names are blank.</li> <li>Report Content:</li> <li>Lists up to 15 credit limit group numbers per customer (out of 25 possible in <code>ARCLGR</code>).</li> <li>Groups customers by company, with headers per company.</li> <li>Copies:</li> <li>Minimum 1 copy; 0 is corrected to 1.</li> <li>Error Handling:</li> <li>Invalid inputs halt processing with specific error messages.</li> <li>Date Handling:</li> <li>Uses system date/time, formatted as MMDDYY and HHMMSS, with Y2K compliance.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Sorting: Performed on <code>CGCONO</code> (numeric, 2 digits) and <code>CGCUST</code> (numeric, 6 digits).</li> <li>Page Numbering: Increments per page, zero-suppressed.</li> <li>Field Formatting:</li> <li><code>CGCUST</code>, <code>CGCL01</code> to <code>CGCL15</code>: Zero-suppressed numeric output.</li> <li><code>ARNAME</code>, <code>ACNAME</code>: Left-justified text.</li> <li>Separator Lines: Generated as repeating <code>'* '</code> for 164 characters.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCLGR</code>: Input data (company, customer, credit limit groups).</li> <li><code>ARCONT</code>: Company data (company number, name).</li> <li><code>ARCUST</code>: Customer data (company number, customer number, name).</li> <li><code>GSCONT</code>: Default company configuration.</li> <li><code>GSTABL</code>: Configuration table (purpose unspecified, likely report formatting).</li> <li>Utilities:</li> <li>Year 2000 date handling (GSY2K).</li> <li>Sort utility (#GSORT).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR490P%20Credit%20Limit%20Grouping%20List/Summary%20AR490P%20OCL/#execution-context","title":"Execution Context","text":"<ul> <li>Runs on IBM midrange system (System/36 or AS/400).</li> <li>Supports batch (<code>jobQueue = 'Y'</code>) or interactive (<code>jobQueue = 'N'</code>) execution.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/","title":"AR880 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR880.ocl36.txt</code>, used on IBM AS/400 or iSeries systems to manage operations for a Customer Credit Limit Authorization Inquiry. OCL is a scripting language used to control program execution, file handling, and system operations on these systems. Below, I\u2019ll explain the process steps of the program, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#process-steps-of-the-rpg-ocl-program","title":"Process Steps of the RPG .OCL Program","text":"<p>The OCL program orchestrates the execution of a credit limit authorization inquiry by setting up the environment, overriding database files, loading files, and calling a program. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Delete Overrides for All Files:</li> <li> <p><code>// DLTOVR FILE(*ALL)</code>: Deletes all existing file overrides to ensure a clean slate for file redirections. This prevents conflicts from prior overrides.</p> </li> <li> <p>Call Initial Program:</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>: Calls the program <code>GSGENIEC</code>. This is likely a general-purpose initialization or environment setup program. It may perform tasks like setting up user-specific parameters or validating the environment.</p> </li> <li> <p>Conditional Return Based on Screen Input:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>: Checks a specific screen location (likely a field at line 506, position 3) for a value of <code>YES</code>. If true, the program terminates immediately with a <code>RETURN</code> statement, halting further execution.</p> </li> <li> <p>Procedure Call with Parameter:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>: Invokes a stored procedure or command with a parameter <code>?9?</code>. The commas indicate placeholder parameters, and <code>?9?</code> is likely a dynamic value (e.g., a company code or environment identifier) passed to the procedure. The exact purpose depends on the system configuration.</p> </li> <li> <p>Year 2000 Compliance:</p> </li> <li> <p><code>// GSY2K</code>: Executes a command or program related to Year 2000 compliance, ensuring date-related operations are handled correctly. This was common in legacy systems to address Y2K issues.</p> </li> <li> <p>Set Local Variables:</p> </li> <li><code>// LOCAL OFFSET-200,DATA-'        '</code>: Initializes a local variable at offset 200 with 8 blank spaces. This could be used to clear a specific data area or memory location.</li> <li> <p><code>// LOCAL OFFSET-480,DATA-'?9?'</code>: Sets a local variable at offset 480 with the value of <code>?9?</code>, likely a dynamic parameter like a company code or environment identifier.</p> </li> <li> <p>Set User Information:</p> </li> <li> <p><code>// LOCAL OFFSET-103,DATA-'?USER?'</code>: Stores the current user ID at offset 103, likely for audit or display purposes in the inquiry process.</p> </li> <li> <p>Override Database Files:</p> </li> <li><code>OVRDBF FILE(BBCSR) TOFILE(QS36F/GBBCSR)</code>: Overrides the logical file <code>BBCSR</code> to point to the physical file <code>QS36F/GBBCSR</code>. This ensures the program uses the correct physical file in the <code>QS36F</code> library.</li> <li> <p><code>OVRDBF FILE(BBSLSM) TOFILE(QS36F/GBBSLSM)</code>: Similarly, overrides the logical file <code>BBSLSM</code> to <code>QS36F/GBBSLSM</code>.</p> </li> <li> <p>Load Database Files:</p> </li> <li> <p>The program loads several files with the <code>DISP-SHRMM</code> (shared, multiple-member) disposition, allowing shared access to the files:</p> <ul> <li><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHRMM</code>: Loads the <code>ARCONT</code> file (likely accounts receivable control file) with a label prefixed by <code>?9?</code>.</li> <li><code>// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHRMM</code>: Loads the <code>ARCUST</code> file (customer master file).</li> <li><code>// FILE NAME-ARCUSP,LABEL-?9?ARCUSP,DISP-SHRMM</code>: Loads the <code>ARCUSP</code> file (possibly customer-specific data or preferences).</li> <li><code>// FILE NAME-BBORCL,LABEL-?9?BBORCL,DISP-SHRMM</code>: Loads the <code>BBORCL</code> file (credit limit or order control file).</li> <li><code>// FILE NAME-ARCLGR,LABEL-?9?ARCLGR,DISP-SHRMM</code>: Loads the <code>ARCLGR</code> file (accounts receivable ledger or general ledger interface).</li> <li><code>// FILE NAME-BBORCLAU,LABEL-?9?BBORCL,DISP-SHRMM</code>: Loads the <code>BBORCLAU</code> file, pointing to the same physical file as <code>BBORCL</code>.</li> </ul> </li> <li> <p>Printer Configuration (Commented Out):</p> <ul> <li><code>** PRINTER NAME-JBLIST,DEVICE-PJ,FORMSNO-JBCL,PRIORITY-0</code>: This commented line suggests a printer setup for a report named <code>JBLIST</code>, but it\u2019s not active in this version.</li> </ul> </li> <li> <p>Override Printer Files (Conditional):</p> <ul> <li><code>// IF ?9?/G OVRPRTF FILE(CREMAL) OUTQ(CSROUTQ)</code>: If <code>?9?</code> equals <code>G</code>, overrides the <code>CREMAL</code> printer file to output to the <code>CSROUTQ</code> queue.</li> <li><code>// IF ?9?/G OVRPRTF FILE(SMEMAL) OUTQ(SLMNOUTQ)</code>: Similarly, overrides the <code>SMEMAL</code> printer file to <code>SLMNOUTQ</code>.</li> <li><code>// IFF ?9?/G OVRPRTF FILE(CREMAL) OUTQ(TESTOUTQ)</code>: If <code>?9?</code> equals <code>G</code>, overrides <code>CREMAL</code> to <code>TESTOUTQ</code> (for testing purposes).</li> <li><code>// IFF ?9?/G OVRPRTF FILE(SMEMAL) OUTQ(TESTOUTQ)</code>: Similarly, overrides <code>SMEMAL</code> to <code>TESTOUTQ</code>.</li> </ul> </li> <li> <p>Run the Program:</p> <ul> <li><code>// RUN</code>: Executes the main program (likely <code>AR880</code>, implied by the file name). This program performs the core credit limit authorization inquiry logic using the loaded files.</li> </ul> </li> <li> <p>Commented Goto Statement:</p> <ul> <li><code>***GOTO AGN</code>: A commented-out line that would loop back to a label <code>AGN</code> if active, suggesting a potential loop for repeated processing (not used here).</li> </ul> </li> <li> <p>End Tag:</p> <ul> <li><code>// TAG END</code>: Marks the end of the main processing block.</li> </ul> </li> <li> <p>Clear Local Variables:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>: Clears all local variables, resetting the data areas used during execution.</li> </ul> </li> <li> <p>Reset Switches:</p> <ul> <li><code>// SWITCH 00000000</code>: Resets all system switches to <code>0</code>, ensuring a clean state for subsequent operations.</li> </ul> </li> <li> <p>Conditional Call to Test Program:</p> <ul> <li><code>// IF ?9?/G CALL AR880TC</code>: If <code>?9?</code> equals <code>G</code>, calls the program <code>AR880TC</code>, likely a test version of the credit limit authorization program.</li> </ul> </li> <li> <p>Exit Tag:</p> <ul> <li><code>// TAG OUT</code>: Marks the exit point of the program, indicating completion.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs: 1. GSGENIEC: Likely an initialization or environment setup program, called at the start. 2. AR880TC: A test version of the credit limit authorization program, called conditionally if <code>?9?</code> equals <code>G</code>.</p> <p>Additionally, the <code>// RUN</code> statement implies the execution of a program named <code>AR880</code> (based on the file name <code>AR880.ocl36.txt</code>), though it\u2019s not explicitly listed in a <code>CALL</code> statement.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following database files (tables), all loaded with a <code>DISP-SHRMM</code> disposition, indicating shared access to multi-member files: 1. ARCONT: Accounts receivable control file, prefixed with <code>?9?</code>. 2. ARCUST: Customer master file, prefixed with <code>?9?</code>. 3. ARCUSP: Customer-specific data or preferences file, prefixed with <code>?9?</code>. 4. BBORCL: Credit limit or order control file, prefixed with <code>?9?</code>. 5. ARCLGR: Accounts receivable ledger or general ledger interface file, prefixed with <code>?9?</code>. 6. BBORCLAU: Likely an alias for <code>BBORCL</code>, pointing to the same physical file, prefixed with <code>?9?</code>. 7. BBCSR: Customer service representative file, overridden to <code>QS36F/GBBCSR</code>. 8. BBSLSM: Salesman file, overridden to <code>QS36F/GBBSLSM</code>.</p> <p>Additionally, two printer files are referenced for output: 1. CREMAL: Output queue overridden to <code>CSROUTQ</code> or <code>TESTOUTQ</code> (conditional on <code>?9?</code>). 2. SMEMAL: Output queue overridden to <code>SLMNOUTQ</code> or <code>TESTOUTQ</code> (conditional on <code>?9?</code>).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20OCL/#summary","title":"Summary","text":"<p>The <code>AR880.ocl36.txt</code> OCL program manages a Customer Credit Limit Authorization Inquiry by: - Initializing the environment (<code>GSGENIEC</code>). - Setting up dynamic parameters and user data. - Overriding and loading necessary database files for customer and credit data. - Conditionally configuring output queues for reports. - Executing the main inquiry logic (<code>AR880</code>) and, if in a specific environment (<code>?9?=G</code>), a test program (<code>AR880TC</code>). - Cleaning up variables and switches after execution.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>AR880TC</code> (conditional), and implicitly <code>AR880</code>. Tables Used: <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBORCLAU</code>, <code>BBCSR</code>, <code>BBSLSM</code>, with printer files <code>CREMAL</code> and <code>SMEMAL</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/","title":"AR880 RPGLE","text":"<p>The provided RPGLE program, <code>AR880.rpgle.txt</code>, is an RPG IV program designed for a Customer Credit Limit Authorization Inquiry on an IBM AS/400 or iSeries system. It is called from the OCL program <code>AR880.ocl36.txt</code> and handles the interactive process of displaying customer credit information, managing order authorizations, and generating email notifications for credit status changes. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The program is structured to handle customer credit limit inquiries, display order details, and allow users to authorize or unauthorize orders that exceed credit limits. It uses a workstation file with subfiles for user interaction and updates files to reflect authorization changes. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications: The program uses <code>DFTACTGRP(*NO)</code> to run in a named activation group and <code>DFTNAME(AR880)</code> to set the default program name. The <code>FIXNBR(*ZONED:*INPUTPACKED)</code> option ensures proper handling of numeric fields.</li> <li>File Declarations: Defines input files (<code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>), an update file (<code>BBORCLAU</code>), and printer files (<code>CREMAL</code>, <code>SMEMAL</code>) for output. The workstation file <code>AR880D</code> uses a subfile (<code>SFL1</code>) for displaying order details.</li> <li>Data Structures and Variables: Defines data structures for message handling, display file information, and customer/order data. Arrays and fields store customer credit details, order amounts, and messages.</li> <li> <p>Initial Setup:</p> <ul> <li>Checks if the control field <code>qsctl</code> is blank to set indicators for screen display (<code>*IN01</code>, <code>*IN09</code>, <code>*IN02</code>).</li> <li>If <code>qsctl</code> is not blank, reads the customer selection screen (<code>AR880S1</code>) and sets indicators accordingly.</li> <li>Initializes message handling fields and sets the default company number from <code>GSCONT</code> if available.</li> </ul> </li> <li> <p>Main Logic Flow:</p> </li> <li>Check for End of Job: If the F3 key (<code>*INKG</code>) is pressed, the program sets the last record indicator (<code>*INLR</code>) and exits.</li> <li>Customer Selection Mode:<ul> <li>If <code>U8</code> is off (<code>*INU8 = *OFF</code>), the program uses Screen 1 (<code>AR880S1</code>) for customer selection. If the F12 key (<code>*IN88</code>) is pressed, it redisplays Screen 1.</li> <li>If <code>U8</code> is on (<code>*INU8 = *ON</code>), the program bypasses Screen 1, using customer data from <code>AR800</code> (stored in <code>ldacc</code>), and proceeds directly to Screen 2.</li> </ul> </li> <li> <p>Screen 1 Processing (<code>S1</code> Subroutine):</p> <ul> <li>Retrieves customer data from <code>ARCONT</code> and <code>ARCUST</code> using the company/customer number (<code>cocust</code>).</li> <li>Validates the customer exists and is not deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li>Populates Screen 2 fields with customer details (name, address, credit limit, aging buckets, etc.) from <code>ARCUST</code> and <code>ARCUSP</code>.</li> <li>Checks authorization initials (<code>aauin</code>) against valid values (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). If invalid, displays an error message.</li> <li>Calls <code>S2FILL</code> to preprocess order credit limits and calculate totals.</li> <li>Reads the credit limit group file (<code>ARCLGR</code>) to accumulate totals for related customers.</li> <li>Sets up the subfile for order display by calling <code>READFW</code>.</li> </ul> </li> <li> <p>Subfile Processing (Screen 2):</p> </li> <li>Clear Subfile (<code>SF1CLR</code> Subroutine): Clears the subfile (<code>SFL1</code>) and resets the relative record number (<code>rrn1</code>).</li> <li>Load Subfile (<code>SF1LOD</code> Subroutine): Loads order details (customer, order number, batch, amount, status) into the subfile from <code>BBORCL</code>.</li> <li>Read Forward (<code>READFW</code> Subroutine): Reads orders from <code>BBORCL</code> for the selected customer or group, filtering out deleted records (<code>bldel = 'D'</code>) and non-over-limit orders (<code>blovcl &lt;&gt; 'Y'</code>). Populates the subfile with up to 9 records per page.</li> <li> <p>Display Subfile: Writes the subfile control record (<code>SFLCTL1</code>) and displays the subfile if records exist (<code>*IN41</code>). Handles user input via the <code>EXFMT</code> operation.</p> </li> <li> <p>Order Authorization Processing:</p> </li> <li>Process Subfile (<code>SF1PRC</code> Subroutine): Reads subfile records to process user selections (<code>A</code> for authorize, <code>U</code> for unauthorize).</li> <li> <p>Authorize/UnAuthorize (<code>S2AUTH</code> Subroutine):</p> <ul> <li>Validates the selected order exists in <code>BBORCLAU</code> and is not deleted (<code>bxdel &lt;&gt; 'D'</code>).</li> <li>Checks if the order needs authorization (<code>bxovcl = 'Y'</code> and <code>aunau &lt;&gt; 'Y'</code>) or unauthorization (<code>aunau = 'Y'</code> and <code>bxauin &lt;&gt; *BLANKS</code>).</li> <li>Validates authorization initials (<code>aauin</code>) against allowed values.</li> <li>If authorizing, updates <code>BBORCLAU</code> with the initials and user ID (<code>auser</code>) via the <code>AUTH</code> exception output.</li> <li>If unauthorizing, clears the authorization fields in <code>BBORCLAU</code> via the <code>UNAU</code> exception output.</li> <li>Generates email notifications via printer files <code>CREMAL</code> (CSR/A/R copy) and <code>SMEMAL</code> (salesman copy) with order details, customer info, and credit status.</li> <li>Sends error messages for invalid cases (e.g., order not found, already authorized, invalid initials).</li> </ul> </li> <li> <p>Message Handling:</p> </li> <li>Add Message (<code>ADDMSG</code> Subroutine): Sends error or status messages to the program message queue using <code>QMHSNDPM</code>.</li> <li>Write Message (<code>WRTMSG</code> Subroutine): Displays messages in the message subfile.</li> <li> <p>Clear Message (<code>CLRMSG</code> Subroutine): Clears the message subfile using <code>QMHRMVPM</code>.</p> </li> <li> <p>Subfile Edit (<code>EDITSFL</code> Subroutine):</p> </li> <li> <p>Validates subfile selections to ensure no invalid options are entered when a customer/order is keyed manually.</p> </li> <li> <p>Output Generation:</p> </li> <li> <p>Generates spool files for <code>CREMAL</code> and <code>SMEMAL</code> when an order is authorized or unauthorized, containing details like order number, customer info, credit limit, aging buckets, and notification recipients (CSR, salesman, A/R clerk).</p> </li> <li> <p>Program Exit:</p> </li> <li>Exits when the user presses F3 (<code>*INKG</code>) or completes processing, setting <code>*INLR</code> and returning.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Customer Selection:</li> <li>If <code>U8</code> is off, users must select a customer via Screen 1 (<code>AR880S1</code>).</li> <li>If <code>U8</code> is on, customer data is passed from <code>AR800</code>, bypassing Screen 1.</li> <li> <p>The customer must exist in <code>ARCUST</code> and not be marked as deleted (<code>ardel &lt;&gt; 'D'</code>).</p> </li> <li> <p>Authorization Validation:</p> </li> <li>Orders are only displayed if they exceed the credit limit (<code>blovcl = 'Y'</code>).</li> <li>Authorization requires valid initials (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). Invalid initials trigger an error.</li> <li>An order cannot be authorized if it\u2019s already authorized (<code>bxauin &lt;&gt; *BLANKS</code>) or doesn\u2019t need authorization (<code>bxovcl &lt;&gt; 'Y'</code>).</li> <li> <p>An order cannot be unauthorized if it\u2019s not authorized (<code>bxauin = *BLANKS</code>).</p> </li> <li> <p>Credit Limit and Aging:</p> </li> <li>Credit limits and aging buckets (current, 1-30, 31-60, 61-90, over 90 days) are retrieved from <code>ARCUST</code>.</li> <li>Totals for related customers in a credit limit group (<code>ARCLGR</code>) are accumulated for display.</li> <li> <p>Available credit is calculated as <code>s2clmt - s2totd - s2orap</code>.</p> </li> <li> <p>Order Processing:</p> </li> <li>Orders are read from <code>BBORCL</code> and updated in <code>BBORCLAU</code>.</li> <li> <p>The program accumulates approved (<code>s2orap</code>) and unapproved (<code>s2onap</code>) order amounts for display.</p> </li> <li> <p>Email Notifications:</p> </li> <li>When an order is authorized or unauthorized, notifications are sent via <code>CREMAL</code> (to CSR/A/R) and <code>SMEMAL</code> (to salesman).</li> <li> <p>Notifications include order details, customer info, credit limit, aging buckets, and timestamps.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors (e.g., invalid customer, order not found, invalid initials) are displayed via the message subfile.</li> <li> <p>The program prevents invalid subfile selections when manual customer/order input is provided.</p> </li> <li> <p>Modifications (per comments):</p> </li> <li>MG02 (11/09/2017): Added email notifications via spool files for CSR and salesman when order status changes.</li> <li>MG03 (03/21/2022): Removed beep for successful changes due to user annoyance.</li> <li>MG04 (04/08/2022): Removed <code>JBLIST</code> printer file output, no longer needed.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. AR880D: Workstation file (display file) with subfile <code>SFL1</code> for interactive user interface. 2. ARCONT: Input file for accounts receivable control data (credit limit ranges). 3. ARCUST: Input file for customer master data (name, address, credit limit, aging buckets). 4. ARCUSP: Input file for customer-specific data (contact name). 5. BBORCL: Input file for order credit limit data. 6. ARCLGR: Input file for credit limit group data (related customers). 7. BBORCLAU: Update file for order authorization data. 8. BBCSR: Input file for customer service representative data (CSR ID, name, email). 9. BBSLSM: Input file for salesman data (salesman ID, name, email). 10. GSCONT: Input file for system control data (default company number). 11. CREMAL: Printer file for CSR and A/R email notifications. 12. SMEMAL: Printer file for salesman email notifications.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program explicitly calls two external programs for message handling: 1. QMHSNDPM: Sends messages to the program message queue for error/status display. 2. QMHRMVPM: Removes messages from the program message queue to clear the message subfile.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR880.rpgle</code> program is a customer credit limit authorization inquiry tool that: - Allows users to select customers and view credit details (via Screen 1 or <code>AR800</code>). - Displays orders exceeding credit limits in a subfile, allowing authorization or unauthorization. - Validates inputs (e.g., initials) and updates order authorization data in <code>BBORCLAU</code>. - Generates email notifications for CSR, A/R, and salesmen when order status changes. - Handles errors and user interactions via a message subfile.</p> <p>Tables Used: <code>AR880D</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBORCLAU</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>, <code>CREMAL</code>, <code>SMEMAL</code>. External Programs Called: <code>QMHSNDPM</code>, <code>QMHRMVPM</code>.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/","title":"AR880TC CLP","text":"<p>The provided CLP (Control Language Program) file, <code>AR880TC.clp.txt</code>, is a program executed on an IBM AS/400 or iSeries system, called conditionally from the main OCL program <code>AR880.ocl36.txt</code> when the environment parameter <code>?9?</code> equals <code>G</code>. Its primary purpose is to send email notifications to Customer Service Representatives (CSRs) and salesmen when the credit hold status of an order changes. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#process-steps-of-the-clp-program","title":"Process Steps of the CLP Program","text":"<p>The <code>AR880TC</code> program uses commands from a third-party tool (likely SpoolFlex or a similar product) to process and distribute spool files generated by the RPG program <code>AR880.rpgle</code> (specifically, the <code>CREMAL</code> and <code>SMEMAL</code> printer files). The steps are as follows:</p> <ol> <li>Program Declaration:</li> <li> <p><code>PGM</code>: Declares the start of the CLP program. No parameters are specified, indicating it does not expect input parameters.</p> </li> <li> <p>Process Spool File for CSR Notification (CREMAL):</p> </li> <li><code>SFASPLIT RSPNM('ORDER CREDIT STATUS') OUTQ(CSROUTQ) MVTOOUTQ(*DELETE)</code>:<ul> <li>Command: <code>SFASPLIT</code> is a third-party command (likely from SpoolFlex) that splits or processes a spool file.</li> <li>Parameters:</li> <li><code>RSPNM('ORDER CREDIT STATUS')</code>: Specifies the report/spool file name to process, likely corresponding to the <code>CREMAL</code> printer file generated by the RPG program for CSR and Accounts Receivable (A/R) notifications.</li> <li><code>OUTQ(CSROUTQ)</code>: Directs the processed spool file to the <code>CSROUTQ</code> output queue, which is likely configured to send emails to CSRs.</li> <li><code>MVTOOUTQ(*DELETE)</code>: Deletes the original spool file after processing, preventing duplicate processing or storage.</li> <li>Purpose: Converts the <code>CREMAL</code> spool file into an email format and sends it to the CSR/A/R recipients.</li> </ul> </li> <li> <p><code>MONMSG MSGID(SF00136)</code>: Monitors for the error message <code>SF00136</code> (likely a SpoolFlex-specific error, e.g., spool file not found or processing failure) and ignores it, allowing the program to continue execution.</p> </li> <li> <p>Distribute Spool File for CSR Notification:</p> </li> <li> <p><code>SFARDST RDSNM('ORDER CREDIT STATUS')</code>:</p> <ul> <li>Command: <code>SFARDST</code> is another third-party command for distributing spool files, likely as emails.</li> <li>Parameters:</li> <li><code>RDSNM('ORDER CREDIT STATUS')</code>: Specifies the report name (<code>CREMAL</code>) to distribute.</li> <li>Purpose: Ensures the processed spool file is emailed to the intended CSR recipients.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores any errors during distribution (e.g., if the spool file is missing).</li> </ul> </li> <li> <p>Distribute Additional Spool File for CSR Notification:</p> </li> <li> <p><code>SFARDST RDSNM('ORDER CREDIT STATUS3') MVTOOUTQ(DLTOUTQ)</code>:</p> <ul> <li>Parameters:</li> <li><code>RDSNM('ORDER CREDIT STATUS3')</code>: Processes a secondary report, possibly an additional copy or variant of the <code>CREMAL</code> spool file.</li> <li><code>MVTOOUTQ(DLTOUTQ)</code>: Moves the spool file to the <code>DLTOUTQ</code> output queue, which is likely configured to delete or archive the file after distribution.</li> <li>Purpose: Distributes an additional notification or copy, potentially to a different recipient or system, and cleans up the spool file.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores distribution errors.</li> </ul> </li> <li> <p>Process Spool File for Salesman Notification (SMEMAL):</p> </li> <li> <p><code>SFASPLIT RSPNM('ORDER CREDIT STATUS2') OUTQ(SLMNOUTQ) MVTOOUTQ(*DELETE)</code>:</p> <ul> <li>Parameters:</li> <li><code>RSPNM('ORDER CREDIT STATUS2')</code>: Specifies the report name for the <code>SMEMAL</code> printer file, which contains salesman notifications.</li> <li><code>OUTQ(SLMNOUTQ)</code>: Directs the processed spool file to the <code>SLMNOUTQ</code> output queue, likely configured for salesman email delivery.</li> <li><code>MVTOOUTQ(*DELETE)</code>: Deletes the original spool file after processing.</li> <li>Purpose: Converts the <code>SMEMAL</code> spool file into an email format and sends it to the salesman.</li> <li><code>MONMSG MSGID(SF00136)</code>: Ignores processing errors.</li> </ul> </li> <li> <p>Commented-Out Distribution for Salesman Notification:</p> </li> <li> <p><code>/* SFARDST RDSNM('ORDER CREDIT STATUS2') MVTOOUTQ(JUNKOUTQ) */</code>:</p> <ul> <li>This line is commented out, indicating it is not currently active.</li> <li>If enabled, it would distribute the <code>SMEMAL</code> spool file to the <code>JUNKOUTQ</code> output queue, possibly for testing or archiving, with error monitoring for <code>SF00136</code>.</li> <li>Purpose: Likely a deprecated or test configuration that was disabled to streamline the process.</li> </ul> </li> <li> <p>Program Termination:</p> </li> <li><code>ENDPGM</code>: Marks the end of the CLP program, completing the execution.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#business-rules","title":"Business Rules","text":"<ol> <li>Email Notification Trigger:</li> <li>The program is executed when an order\u2019s credit hold status changes (authorized or unauthorized), as indicated by the spool files generated by the RPG program (<code>CREMAL</code> for CSR/A/R, <code>SMEMAL</code> for salesman).</li> <li> <p>It is only called when the environment parameter <code>?9?</code> equals <code>G</code> in the OCL program, suggesting it is specific to a test or specific operational environment.</p> </li> <li> <p>Spool File Processing:</p> </li> <li>Spool files (<code>CREMAL</code> and <code>SMEMAL</code>) are processed using <code>SFASPLIT</code> to convert them into email-compatible formats.</li> <li>The processed spool files are sent to specific output queues (<code>CSROUTQ</code> for CSR/A/R, <code>SLMNOUTQ</code> for salesman) configured for email delivery.</li> <li> <p>Original spool files are deleted after processing (<code>MVTOOUTQ(*DELETE)</code>) to prevent duplication and reduce storage.</p> </li> <li> <p>Additional Notification Handling:</p> </li> <li>A secondary spool file (<code>ORDER CREDIT STATUS3</code>) is distributed to <code>DLTOUTQ</code>, possibly for additional recipients or archival purposes.</li> <li> <p>The commented-out distribution to <code>JUNKOUTQ</code> suggests flexibility in routing salesman notifications, though it is currently disabled.</p> </li> <li> <p>Error Handling:</p> </li> <li> <p>The program ignores errors (<code>SF00136</code>) during spool file processing or distribution, ensuring it completes even if a spool file is missing or processing fails. This prevents the program from halting due to minor issues.</p> </li> <li> <p>Purpose:</p> </li> <li>The program ensures timely communication to CSRs and salesmen about order credit status changes, supporting the business process of credit management by automating notifications.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#tables-files-used","title":"Tables (Files) Used","text":"<p>The CLP program does not directly reference database files or tables. Instead, it processes spool files generated by the RPG program <code>AR880.rpgle</code>. The relevant spool files are: 1. CREMAL: Printer file containing CSR and A/R notifications, processed as <code>ORDER CREDIT STATUS</code> and <code>ORDER CREDIT STATUS3</code>. 2. SMEMAL: Printer file containing salesman notifications, processed as <code>ORDER CREDIT STATUS2</code>.</p> <p>No database files (tables) are directly accessed by this CLP program.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#external-programs-called","title":"External Programs Called","text":"<p>The program uses two third-party commands, likely from a tool like SpoolFlex, which are treated as external programs: 1. SFASPLIT: Splits or processes spool files into email-compatible formats and directs them to specified output queues. 2. SFARDST: Distributes processed spool files, likely as emails, to recipients based on the output queue configuration.</p> <p>These commands are not part of the standard IBM i command set and indicate the use of a third-party spool file management or email distribution tool.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/AR880TC%20CLP/#summary","title":"Summary","text":"<p>The <code>AR880TC.clp</code> program automates email notifications for CSR and salesman when an order\u2019s credit hold status changes, processing spool files generated by the RPG program. It: - Uses <code>SFASPLIT</code> to process <code>CREMAL</code> and <code>SMEMAL</code> spool files into email formats, directing them to <code>CSROUTQ</code> and <code>SLMNOUTQ</code>. - Distributes a secondary <code>CREMAL</code> copy (<code>ORDER CREDIT STATUS3</code>) to <code>DLTOUTQ</code>. - Deletes original spool files after processing to maintain system efficiency. - Ignores errors to ensure robust execution. - Is conditionally called in a specific environment (<code>?9?=G</code>).</p> <p>Tables Used: None (only spool files <code>CREMAL</code> and <code>SMEMAL</code>). External Programs Called: <code>SFASPLIT</code>, <code>SFARDST</code> (third-party commands, likely from SpoolFlex).</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/","title":"Summary AR880 OCL","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#list-of-use-cases-implemented-by-the-program-call-stack","title":"List of Use Cases Implemented by the Program Call Stack","text":"<p>The call stack consists of three programs: <code>AR880.ocl36.txt</code> (OCL), <code>AR880.rpgle.txt</code> (RPGLE), and <code>AR880TC.clp.txt</code> (CLP). Together, they implement a single primary use case for the Customer Credit Limit Authorization Inquiry system on an IBM AS/400 or iSeries platform. The use case is:</p> <ol> <li>Customer Credit Limit Authorization Inquiry and Order Status Management:</li> <li>This use case allows users to inquire about a customer\u2019s credit status, view orders exceeding credit limits, authorize or unauthorize those orders, and send email notifications to Customer Service Representatives (CSRs), Accounts Receivable (A/R) clerks, and salesmen when an order\u2019s credit hold status changes. The system supports interactive customer selection (via a screen or pre-selected from another program, <code>AR800</code>) and manages credit-related data retrieval, validation, and updates.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#customer-credit-limit-authorization-function-requirements","title":"Customer Credit Limit Authorization Function Requirements","text":""},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#overview","title":"Overview","text":"<p>The Customer Credit Limit Authorization Function processes customer credit inquiries and manages order authorization for orders exceeding credit limits. It retrieves customer and order data, validates authorization actions, updates order status, and sends email notifications to relevant parties (CSRs, A/R clerks, salesmen). The function assumes all inputs are provided programmatically (no interactive screen) and operates in an IBM AS/400 or iSeries environment.</p>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cono</code>, 2-digit numeric): Identifies the company.</li> <li>Customer Number (<code>cust</code>, 6-digit numeric): Identifies the customer.</li> <li>Order Number (<code>aord</code>, 6-digit numeric): Identifies the order to authorize/unauthorize (optional, for specific order processing).</li> <li>Authorization Initials (<code>aauin</code>, 3-character string): Initials of the authorizer (e.g., <code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>).</li> <li>Authorization Action (<code>aunau</code>, 1-character string): <code>Y</code> to unauthorize, blank to authorize.</li> <li>Environment Code (<code>env</code>, 1-character string): Environment identifier (e.g., <code>G</code> for test environment).</li> <li>User ID (<code>auser</code>, 8-character string): ID of the user performing the action.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Customer Credit Details:</li> <li>Customer name, address, contact name, phone number.</li> <li>Credit limit, total due, aging buckets (current, 1-30, 31-60, 61-90, over 90 days).</li> <li>Available credit, approved/unapproved order amounts.</li> <li>Order Details (for orders exceeding credit limits):</li> <li>Order number, batch number, amount, authorization status, user ID.</li> <li>Email Notifications:</li> <li>Spool files (<code>CREMAL</code>, <code>SMEMAL</code>) for CSR/A/R and salesman, containing order and customer details.</li> <li>Status Messages: Success or error messages (e.g., invalid customer, order not found).</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Delete existing file overrides.</li> <li>Set up environment using <code>GSGENIEC</code> (initialization program).</li> <li>Override database files (<code>BBCSR</code>, <code>BBSLSM</code>) to point to <code>QS36F</code> library.</li> <li> <p>Load files: <code>ARCONT</code> (control), <code>ARCUST</code> (customer), <code>ARCUSP</code> (customer preferences), <code>BBORCL</code> (orders), <code>ARCLGR</code> (credit group), <code>BBORCLAU</code> (order authorization).</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Verify company (<code>cono</code>) and customer (<code>cust</code>) exist in <code>ARCUST</code> and are not deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li>If order number (<code>aord</code>) is provided, ensure it exists in <code>BBORCLAU</code> and is not deleted (<code>bxdel &lt;&gt; 'D'</code>).</li> <li>Validate authorization initials (<code>aauin</code>) against allowed values (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>).</li> <li> <p>Check if order requires authorization (<code>bxovcl = 'Y'</code> for over credit limit) or unauthorization (<code>bxauin &lt;&gt; *BLANKS</code>).</p> </li> <li> <p>Retrieve Customer Credit Data:</p> </li> <li>Fetch customer details (name, address, credit limit, aging buckets) from <code>ARCUST</code>.</li> <li>Get contact name from <code>ARCUSP</code>.</li> <li>Retrieve credit limit ranges from <code>ARCONT</code> (e.g., 1-10, 11-20, 21-30, over 30 days).</li> <li> <p>Aggregate totals for related customers in credit group (<code>ARCLGR</code>).</p> </li> <li> <p>Calculate Credit Metrics:</p> </li> <li>Total Due (<code>s2totd</code>): Sum of <code>artotd</code> from <code>ARCUST</code> for all customers in the credit group.</li> <li>Aging Buckets:<ul> <li>Current Due (<code>s2curd</code>): Sum of <code>arcurd</code>.</li> <li>1-30 Days (<code>s20110</code>): Sum of <code>ar0110</code>.</li> <li>31-60 Days (<code>s21120</code>): Sum of <code>ar1120</code>.</li> <li>61-90 Days (<code>s22130</code>): Sum of <code>ar2130</code>.</li> <li>Over 90 Days (<code>s2ov30</code>): Sum of <code>arov30</code>.</li> </ul> </li> <li>Order Amounts:<ul> <li>Approved Orders (<code>s2orap</code>): Sum of <code>bltamt</code> or <code>bloamt</code> from <code>BBORCL</code> where <code>blovcl &lt;&gt; 'Y'</code> or <code>blauin &lt;&gt; *BLANKS</code>.</li> <li>Unapproved Orders (<code>s2onap</code>): Sum of <code>bltamt</code> or <code>bloamt</code> where <code>blovcl = 'Y'</code> and <code>blauin = *BLANKS</code>.</li> </ul> </li> <li> <p>Available Credit (<code>s2avcl</code>): <code>s2clmt - s2totd - s2orap</code>.</p> </li> <li> <p>Process Order Authorization:</p> </li> <li>If <code>aord</code> is provided:<ul> <li>Authorize: If <code>aunau &lt;&gt; 'Y'</code>, update <code>BBORCLAU</code> with <code>aauin</code> and <code>auser</code> for the order.</li> <li>Unauthorize: If <code>aunau = 'Y'</code>, clear authorization fields in <code>BBORCLAU</code>.</li> </ul> </li> <li> <p>If no <code>aord</code>, retrieve all orders from <code>BBORCL</code> where <code>blovcl = 'Y'</code> for display.</p> </li> <li> <p>Generate Notifications:</p> </li> <li>Create spool files (<code>CREMAL</code>, <code>SMEMAL</code>) with order details (number, customer, amount, status), customer details, and credit metrics.</li> <li> <p>If <code>env = 'G'</code>, call <code>AR880TC</code> to process spool files:</p> <ul> <li><code>CREMAL</code> to <code>CSROUTQ</code> (CSR/A/R) and <code>DLTOUTQ</code> (additional copy).</li> <li><code>SMEMAL</code> to <code>SLMNOUTQ</code> (salesman).</li> <li>Delete original spool files after processing.</li> </ul> </li> <li> <p>Return Results:</p> </li> <li>Output customer credit details, order details, and status messages.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Customer Validation:</li> <li>Customer must exist in <code>ARCUST</code> and not be deleted (<code>ardel &lt;&gt; 'D'</code>).</li> <li> <p>Invalid customer returns error: \"INVALID CUSTOMER\".</p> </li> <li> <p>Order Validation:</p> </li> <li>Order must exist in <code>BBORCLAU</code>, not be deleted (<code>bxdel &lt;&gt; 'D'</code>), and exceed credit limit (<code>bxovcl = 'Y'</code>).</li> <li> <p>Errors:</p> <ul> <li>Order not found: \"Order# [order] NOT FOUND FOR THIS CUSTOMER\".</li> <li>Order deleted: \"Order# [order] HAS BEEN DELETED FROM FILE\".</li> <li>No authorization needed: \"Order# [order] DOES NOT NEED AUTHORIZATION\".</li> <li>Already authorized: \"Order# [order] HAS ALREADY BEEN AUTHORIZED\".</li> <li>No unauthorization needed: \"Order# [order] DOES NOT NEED TO BE UNAUTHORIZED\".</li> </ul> </li> <li> <p>Authorization Rules:</p> </li> <li>Authorization requires valid initials (<code>ARG</code>, <code>KP</code>, <code>BZ</code>, <code>LM</code>, <code>JM</code>, <code>JS</code>). Invalid initials return error: \"INVALID AUTHORIZATION INITIALS USED\".</li> <li>Authorization updates <code>BBORCLAU</code> with initials and user ID.</li> <li> <p>Unauthorization clears authorization fields.</p> </li> <li> <p>Notification Rules:</p> </li> <li>Notifications are sent for each authorization/unauthorization action.</li> <li><code>CREMAL</code> notifies CSR/A/R; <code>SMEMAL</code> notifies salesman.</li> <li> <p>Notifications include order number, customer details, credit limit, aging buckets, and timestamp.</p> </li> <li> <p>Environment-Specific Processing:</p> </li> <li>If <code>env = 'G'</code>, spool files are processed by <code>AR880TC</code> for email distribution.</li> <li>Spool files are deleted after processing to avoid duplication.</li> </ol>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Total Due: <code>s2totd = \u03a3(artotd)</code> for all customers in credit group (<code>ARCLGR</code>).</li> <li>Aging Buckets: Sum <code>arcurd</code>, <code>ar0110</code>, <code>ar1120</code>, <code>ar2130</code>, <code>arov30</code> across credit group customers.</li> <li>Order Amounts:</li> <li>Approved: <code>s2orap = \u03a3(bltamt or bloamt)</code> where <code>blovcl &lt;&gt; 'Y'</code> or <code>blauin &lt;&gt; *BLANKS</code>.</li> <li>Unapproved: <code>s2onap = \u03a3(bltamt or bloamt)</code> where <code>blovcl = 'Y'</code> and <code>blauin = *BLANKS</code>.</li> <li>Available Credit: <code>s2avcl = s2clmt - s2totd - s2orap</code>.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return descriptive error messages for invalid inputs or failed validations.</li> <li>Ignore spool file processing errors (<code>SF00136</code>) to ensure completion.</li> </ul>"},{"location":"accounts-receivable/02%20Credit%20Limit/AR880%20Customer%20%20Credit%20Limit%20Auth.%20Inquiry/Summary%20AR880%20OCL/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs Called:</li> <li><code>GSGENIEC</code>: Initializes environment.</li> <li><code>AR880TC</code>: Processes spool files for email (if <code>env = 'G'</code>).</li> <li><code>QMHSNDPM</code>, <code>QMHRMVPM</code>: Handle message queue operations.</li> <li><code>SFASPLIT</code>, <code>SFARDST</code>: Third-party commands for spool file processing.</li> <li>Files:</li> <li>Input: <code>ARCONT</code>, <code>ARCUST</code>, <code>ARCUSP</code>, <code>BBORCL</code>, <code>ARCLGR</code>, <code>BBCSR</code>, <code>BBSLSM</code>, <code>GSCONT</code>.</li> <li>Update: <code>BBORCLAU</code>.</li> <li>Output: <code>CREMAL</code>, <code>SMEMAL</code> (spool files).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/","title":"AR101 OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR101.ocl36.txt</code>, which appears to be a script for an IBM System/36 environment used to manage Accounts Receivable (A/R) processes. Below, I will explain the process steps of the program, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#process-steps-of-the-ar101-ocl-program","title":"Process Steps of the AR101 OCL Program","text":"<p>The OCL program is designed to handle A/R transactions, specifically for editing invoices and adjustments. It includes conditional logic, file operations, sorting, and program execution. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initial Program Call and Conditional Check:</li> <li>The program starts by calling <code>GSGENIEC</code>, likely a utility or initialization program.</li> <li>A condition checks the value at memory location <code>L'506,3'</code>. If the condition is met (<code>/YES</code>), the program returns immediately, halting further execution.</li> <li> <p>If the condition is not met, the program proceeds.</p> </li> <li> <p>SCPROCP and GSY2K Execution:</p> </li> <li>The <code>SCPROCP</code> command is executed with placeholder parameters (<code>?9?</code>), which may resolve to a specific library or file name at runtime.</li> <li> <p><code>GSY2K</code> is called, likely a program to handle Year 2000 compliance or date-related processing.</p> </li> <li> <p>Conditional Branching for Editing:</p> </li> <li> <p>The program checks if the first parameter (<code>?1?</code>) is set to <code>EDIT</code>. If true, it branches to the <code>EDIT</code> tag to process invoice and adjustment edits. If false, it continues with the next steps.</p> </li> <li> <p>File Creation for A/R Transactions:</p> </li> <li> <p>If the file <code>?9?ARTRGG</code> exists in <code>DATAF1</code>, the program builds a new file named <code>?9?ARTRGG</code> with the following attributes:</p> <ul> <li>Type: <code>A</code> (alternate index or sequential file).</li> <li>Record size: 500 bytes, 256 records.</li> <li>File type: Permanent (<code>P</code>), with 2 keys and a key length of 5.</li> </ul> </li> <li> <p>Load and Run AR101:</p> </li> <li>The program loads <code>AR101</code>, the main A/R processing program.</li> <li>It defines several files with <code>DISP-SHR</code> (shared disposition) and specific labels:<ul> <li><code>ARTRAN</code>: A/R transaction file (<code>?9?ARTRGG</code>), with an extension of 100 records.</li> <li><code>ARTRANR</code>: A read-only version of the A/R transaction file (<code>?9?ARTRGG</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>).</li> <li><code>ARCUSTX</code>: Customer index file (<code>?9?ARCUSX</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>).</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>).</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>).</li> <li><code>GSTABL</code>: General system table (<code>?9?GSTABL</code>).</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AR101</code> to process A/R transactions.</p> </li> <li> <p>Edit Invoices and Adjustments (EDIT Tag):</p> </li> <li>If the <code>EDIT</code> condition is met, the program branches to the <code>EDIT</code> tag.</li> <li>Delete Temporary File:<ul> <li>Loads <code>$DELET</code>, a utility program to delete files.</li> <li>If <code>?9?AR111S</code> exists in <code>DATAF1</code>, it scratches (deletes) the file labeled <code>?9?AR111S</code>.</li> </ul> </li> <li> <p>Sort Transactions:</p> <ul> <li>Loads <code>#GSORT</code>, a sorting utility.</li> <li>Defines input and output files:</li> <li>Input: <code>?9?ARTRGG</code> (A/R transaction file).</li> <li>Output: <code>?9?AR111S</code> (sorted output file, with 999,000 records and extendable by 999,000).</li> <li>Executes a sort operation (<code>HSORTA</code>) with the following parameters:</li> <li>Sort field: 15 bytes, ascending (<code>A</code>), starting at position 3, numeric (<code>N</code>).</li> <li>Condition: <code>1NECD</code> (possibly a flag or condition code).</li> <li>Fields to sort: Positions 7 to 21 (likely company/customer/invoice number).</li> <li>The sorted output is written to <code>?9?AR111S</code>.</li> </ul> </li> <li> <p>Check for Sorted File Existence:</p> </li> <li> <p>The program checks if the file <code>?9?AR111S</code> has zero records (<code>/00000000</code>). If true, it branches to the <code>END</code> tag, skipping further processing.</p> </li> <li> <p>Load and Run AR111:</p> </li> <li>If the sorted file exists and has records, the program loads <code>AR111</code>, a program for editing invoices and adjustments.</li> <li>Defines the following files (all shared):<ul> <li><code>AR111S</code>: Sorted transaction file (<code>?9?AR111S</code>).</li> <li><code>ARTRAN</code>: A/R transaction file (<code>?9?ARTRGG</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>).</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>).</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>).</li> <li><code>GSTABL</code>: General system table (<code>?9?GSTABL</code>).</li> </ul> </li> <li> <p>The <code>RUN</code> command executes <code>AR111</code> to process the sorted transactions.</p> </li> <li> <p>Final Cleanup (END Tag):</p> </li> <li>The program branches to the <code>END</code> tag.</li> <li>Loads <code>$DELET</code> again to delete the temporary sorted file.</li> <li>If <code>?9?AR111S</code> exists in <code>DATAF1</code>, it scratches the file.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program calls the following external programs: 1. GSGENIEC: Likely a general initialization or utility program. 2. GSY2K: A program for Year 2000 compliance or date processing. 3. AR101: The main A/R transaction processing program. 4. $DELET: A system utility for deleting files. 5. #GSORT: A system utility for sorting files. 6. AR111: A program for editing invoices and adjustments.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following files (referred to as \"tables\" in the context of System/36): 1. ARTRAN (<code>?9?ARTRGG</code>): A/R transaction file, used for reading and writing transaction data. 2. ARTRANR (<code>?9?ARTRGG</code>): A read-only version of the A/R transaction file. 3. ARCUST (<code>?9?ARCUST</code>): Customer master file, containing customer information. 4. ARCUSTX (<code>?9?ARCUSX</code>): Customer index file, likely used for quick lookups. 5. ARDETL (<code>?9?ARDETL</code>): A/R detail file, containing detailed transaction records. 6. GLMAST (<code>?9?GLMAST</code>): General ledger master file, used for financial integration. 7. ARCONT (<code>?9?ARCONT</code>): A/R control file, containing control parameters for A/R processing. 8. GSTABL (<code>?9?GSTABL</code>): General system table, containing system-wide configuration data. 9. AR111S (<code>?9?AR111S</code>): Temporary sorted transaction file, created and deleted during execution.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20OCL/#summary","title":"Summary","text":"<p>The <code>AR101.ocl36.txt</code> program manages A/R transactions by: - Initializing with <code>GSGENIEC</code> and <code>GSY2K</code>. - Conditionally building and processing A/R transaction files. - Sorting transactions and editing invoices/adjustments using <code>AR111</code>. - Performing cleanup by deleting temporary files. - Interacting with multiple A/R and general ledger files to ensure data integrity.</p> <p>The program uses a combination of conditional logic, file operations, and sorting to prepare and process A/R data, with a focus on invoice and adjustment editing. The external programs and files listed above are critical to its operation.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/","title":"AR101 RPGLE","text":"<p>The provided document, <code>AR101.rpgle.txt</code>, is an RPGLE (RPG IV) program for the IBM AS/400 (iSeries) platform, converted from a System/36 RPG program using the TARGET/400 tool. It is called from the main OCL program (<code>AR101.ocl36.txt</code>) to handle Accounts Receivable (A/R) transaction entry. Below, I will explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#process-steps-of-the-ar101-rpgle-program","title":"Process Steps of the AR101 RPGLE Program","text":"<p>The <code>AR101</code> program is designed to facilitate A/R transaction entry through a workstation interface, allowing users to add or update transactions such as invoices (<code>I</code>) or adjustments (<code>J</code>). It performs validations, interacts with multiple files, and supports date calculations for Y2K compliance. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization:</li> <li>The program initializes key variables (e.g., <code>axcust</code>, <code>co</code>, <code>cust</code>, <code>inv#</code>) to zero in the <code>*inzsr</code> subroutine.</li> <li>It sets up the workstation file (<code>ar101d</code>) for screen interaction, using the Profound UI handler for modernized UI rendering.</li> <li> <p>Data structures and arrays (e.g., <code>msg</code>, <code>tabmon</code>, <code>tabdys</code>) are defined for messages, month/day validations, and customer data.</p> </li> <li> <p>Workstation File Read and Mode Determination:</p> </li> <li>The program checks the control field <code>qsctl</code>. If blank, it sets indicator <code>*in09</code> to initiate a read operation; otherwise, it reads one of three screen formats (<code>ar101s1</code>, <code>ar101s2</code>, <code>ar101s3</code>) based on indicators <code>*in81</code>, <code>*in82</code>, or <code>*in83</code>.</li> <li>Two modes are supported:<ul> <li>Entry Mode (<code>*in10</code>): For adding new transactions.</li> <li>Update Mode (<code>*in11</code>): For updating existing transactions.</li> </ul> </li> <li> <p>Indicators <code>*in81</code>, <code>*in82</code>, and <code>*in83</code> control which screen format is displayed (<code>AR101S1</code>, <code>AR101S2</code>, <code>AR101S3</code>).</p> </li> <li> <p>Command Key Processing:</p> </li> <li> <p>The program processes function keys (<code>*inka</code> to <code>*inkk</code>):</p> <ul> <li>F1 (<code>*inka</code>): Switches to Update Mode (<code>*in11</code>).</li> <li>F2 (<code>*inkb</code>): Calls the <code>totals</code> subroutine to calculate and display total amounts, then displays screen <code>AR101S3</code>.</li> <li>F7 (<code>*inkg</code>): Sets <code>*inlr</code> to terminate the program.</li> <li>F10 (<code>*inkj</code>): Initiates Entry Mode (<code>*in10</code>), sets transaction type to <code>I</code> (invoice), and calls <code>rdtran</code> to get the next sequence number.</li> <li>F11 (<code>*inkk</code>): Switches to Update Mode, resets sequence number, and displays screen <code>AR101S1</code>.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>Screen 1 (<code>AR101S1</code>, <code>*in01</code> and <code>*in11</code>):<ul> <li>Executes the <code>s1</code> subroutine to retrieve and validate a transaction by sequence number (<code>seq</code>) from <code>artran</code>.</li> <li>If the record is not found (<code>*in90</code>), it clears fields and displays error messages (<code>msg(1)</code>, <code>msg(2)</code>).</li> <li>If the record is marked as deleted (<code>atdel = 'D'</code>), it sets <code>*in91</code> and displays <code>msg(5)</code>.</li> <li>Calls <code>move</code> to populate screen fields and <code>s2edit</code> for validations, then displays screen <code>AR101S2</code>.</li> </ul> </li> <li>Screen 2 (<code>AR101S2</code>, <code>*in02</code>):<ul> <li>In Entry Mode (<code>*in10</code>): Executes <code>s2add</code> to validate and add a new transaction. If valid, it writes to <code>artran</code> with <code>*in50</code>, increments the sequence number, clears fields, and redisplays <code>AR101S2</code>.</li> <li>In Update Mode (<code>*in11</code>): Executes <code>s2upd</code> to validate and update an existing transaction. If valid, it updates <code>artran</code> with <code>*in51</code>, resets the sequence number, and displays <code>AR101S1</code>.</li> </ul> </li> <li> <p>Screen 3 (<code>AR101S3</code>, <code>*in03</code>): Displays total amounts calculated by the <code>totals</code> subroutine.</p> </li> <li> <p>Transaction Validation (<code>s2edit</code> Subroutine):</p> </li> <li>Validates input fields for both entry and update modes:<ul> <li>Sequence Number: Ensures the sequence number is unique (<code>*in31</code>).</li> <li>Transaction Type: Must be <code>I</code> (invoice) or <code>J</code> (adjustment) (<code>*in31</code>).</li> <li>Company Number: Validates against <code>arcont</code> (<code>*in32</code>) and retrieves company name.</li> <li>Customer Number: Validates against <code>arcust</code> (<code>*in33</code>, <code>*in47</code>) and checks for deletion status.</li> <li>Invoice Number: Ensures it\u2019s non-zero (<code>*in34</code>) and checks for existence in <code>ardetl</code> for invoices (<code>I</code>) or non-existence for adjustments (<code>J</code>).</li> <li>Amount: Must be non-zero (<code>*in35</code>).</li> <li>Transaction Date: Validates format and sets to current date if zero (<code>*in36</code>). Calls <code>dtedit</code> for date validation.</li> <li>Due Date: For invoices, calculates due date using <code>clcdue</code> based on terms code (<code>*in37</code>, <code>*in38</code>).</li> <li>Salesman: Validates against <code>gstabl</code> (<code>*in39</code>) or defaults from <code>arcust</code>.</li> <li>G/L Accounts: Validates debit (<code>gldr</code>, <code>*in41</code>) and credit (<code>glcr</code>, <code>*in43</code>) accounts against <code>glmast</code>, checking for deletion or inactive status (<code>'D'</code> or <code>'I'</code>).</li> <li>Debit/Credit Companies: Validates against <code>arcont</code> (<code>*in40</code>, <code>*in42</code>).</li> </ul> </li> <li> <p>If any validation fails, sets <code>*in90</code>, displays an error message, and redisplays <code>AR101S2</code>.</p> </li> <li> <p>Due Date Calculation (<code>clcdue</code> Subroutine):</p> </li> <li>If terms code is zero, uses customer\u2019s terms code (<code>arterm</code>) or defaults to 30 days.</li> <li>Validates terms code against <code>gstabl</code> (<code>*in38</code>).</li> <li>Calculates due date based on net days (<code>tbnetd</code>) or prox days (<code>tbprxd</code>) using <code>tmdatn</code> or <code>tmdatp</code> subroutines.</li> <li> <p>Ensures due date is not earlier than transaction date (<code>*in37</code>).</p> </li> <li> <p>G/L Account Defaults (<code>invgl</code> Subroutine):</p> </li> <li> <p>Sets default G/L accounts if not provided:</p> <ul> <li>Debit account (<code>gldr</code>): Uses <code>acargl</code> (A/R G/L) or inter-company number (<code>arintr</code>).</li> <li>Credit account (<code>glcr</code>): Uses <code>acslgl</code> (sales G/L) or inter-company number.</li> <li>Sets debit/credit company numbers (<code>codr</code>, <code>cocr</code>) to transaction company (<code>co</code>) if not specified.</li> </ul> </li> <li> <p>Sequence Number Retrieval (<code>rdtran</code> Subroutine):</p> </li> <li> <p>Reads <code>artranr</code> to find the last sequence number, adds 10 to it, and clears fields for a new transaction.</p> </li> <li> <p>Total Calculation (<code>totals</code> Subroutine):</p> </li> <li> <p>Reads <code>artranr</code> sequentially, summing non-deleted transaction amounts (<code>atamtr</code>) to display on <code>AR101S3</code>.</p> </li> <li> <p>Date Handling:</p> <ul> <li>The program handles Y2K compliance using <code>y2kcen</code> (century) and <code>y2kcmp</code> (comparison year).</li> <li>Subroutines <code>@dte1</code> and <code>@dte2</code> convert between Gregorian and Julian dates for due date calculations.</li> <li>The <code>dtedit</code> subroutine validates dates, checking for valid months, days, and leap years.</li> </ul> </li> <li> <p>File Updates:</p> <ul> <li>New transactions are added to <code>artran</code> (<code>*in50</code>).</li> <li>Existing transactions are updated in <code>artran</code> (<code>*in51</code>).</li> <li>Deleted records are marked with <code>atdel = 'D'</code> or cleared (<code>' '</code>).</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>Writes to <code>ar101s1</code>, <code>ar101s2</code>, or <code>ar101s3</code> based on the active screen and mode, displaying fields like sequence number, company, customer, invoice number, amount, dates, and G/L accounts.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R transaction entry:</p> <ol> <li>Transaction Types:</li> <li> <p>Transactions must be either invoices (<code>I</code>) or adjustments (<code>J</code>). Invalid types trigger error <code>msg(3)</code>.</p> </li> <li> <p>Sequence Number:</p> </li> <li>Each transaction requires a unique sequence number. Duplicates trigger <code>msg(7)</code>.</li> <li> <p>Sequence numbers increment by 10 for new transactions.</p> </li> <li> <p>Company Validation:</p> </li> <li>Company number (<code>co</code>) must exist in <code>arcont</code>. Invalid companies trigger <code>msg(9)</code>.</li> <li> <p>Debit (<code>codr</code>) and credit (<code>cocr</code>) companies must also exist in <code>arcont</code> (<code>msg(22)</code>, <code>msg(21)</code>).</p> </li> <li> <p>Customer Validation:</p> </li> <li>Customer number (<code>cust</code>) must exist in <code>arcust</code> and not be deleted (<code>ardel = 'D'</code>). Invalid customers trigger <code>msg(10)</code>.</li> <li>If customer is zero, displays <code>msg(25)</code> (\"MISCELLANEOUS CASH\").</li> <li> <p>Inter-company customers are flagged with <code>iccd = 'IC'</code>.</p> </li> <li> <p>Invoice Number:</p> </li> <li>Invoice number (<code>inv#</code>) must be non-zero (<code>msg(27)</code>).</li> <li>For invoices (<code>I</code>), the invoice must not already exist in <code>ardetl</code> (<code>msg(6)</code>).</li> <li> <p>For adjustments (<code>J</code>), the referenced invoice must exist in <code>ardetl</code> (<code>msg(23)</code>).</p> </li> <li> <p>Amount:</p> </li> <li> <p>Transaction amount (<code>amt</code>) must be non-zero (<code>msg(11)</code>).</p> </li> <li> <p>Transaction Date:</p> </li> <li>Must be valid (checked by <code>dtedit</code>). Invalid dates trigger <code>msg(13)</code>.</li> <li> <p>If zero, defaults to the current date (<code>udate</code>).</p> </li> <li> <p>Due Date:</p> </li> <li>For invoices, due date (<code>dudt</code>) is calculated based on terms code (<code>term</code>) or defaults to 30 days.</li> <li>Must be valid and not earlier than the transaction date (<code>msg(16)</code>).</li> <li> <p>Terms code must exist in <code>gstabl</code> (<code>msg(17)</code>).</p> </li> <li> <p>Salesman:</p> </li> <li>Salesman number (<code>sls</code>) defaults from <code>arcust</code> (<code>arsls#</code>) if not provided.</li> <li> <p>Must exist in <code>gstabl</code> (<code>msg(18)</code>).</p> </li> <li> <p>G/L Accounts:</p> <ul> <li>Debit (<code>gldr</code>) and credit (<code>glcr</code>) accounts must exist in <code>glmast</code> and not be deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>) (<code>msg(15)</code>, <code>msg(14)</code>).</li> <li>Defaults are set from <code>arcont</code> (<code>acargl</code>, <code>acslgl</code>) or inter-company number (<code>arintr</code>).</li> </ul> </li> <li> <p>Y2K Compliance:</p> <ul> <li>Dates are adjusted for century using <code>y2kcen</code> and <code>y2kcmp</code>.</li> <li>Julian date conversions ensure accurate due date calculations.</li> </ul> </li> <li> <p>Deletion Handling:</p> <ul> <li>Deleted transactions are marked with <code>atdel = 'D'</code> and flagged with <code>msg(5)</code>.</li> <li>Inactive G/L accounts are treated as deleted (per modification <code>JB01</code>).</li> </ul> </li> <li> <p>Error Handling:</p> <ul> <li>Validation errors set <code>*in90</code>, display an error message, and redisplay <code>AR101S2</code> for correction.</li> <li>Messages are stored in the <code>msg</code> array (e.g., <code>msg(1)</code> to <code>msg(44)</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>ar101d (Workstation File):</li> <li>Screen file for user interaction, with formats <code>AR101S1</code>, <code>AR101S2</code>, and <code>AR101S3</code>.</li> <li> <p>Uses Profound UI handler for rendering.</p> </li> <li> <p>artran (Update File, <code>UF A</code>):</p> </li> <li>A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li>Stores transaction details (e.g., <code>atco</code>, <code>atcust</code>, <code>atinv#</code>, <code>atamt</code>, <code>atdate</code>).</li> <li> <p>Used for adding (<code>*in50</code>) and updating (<code>*in51</code>) transactions.</p> </li> <li> <p>artranr (Input File, <code>IF</code>):</p> </li> <li>Read-only A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li> <p>Used to retrieve sequence numbers and calculate totals.</p> </li> <li> <p>arcust (Input File, <code>IF</code>):</p> </li> <li>Customer master file (384 bytes, 8-byte key at position 2).</li> <li> <p>Contains customer data (e.g., <code>arname</code>, <code>arsls#</code>, <code>arterm</code>, <code>arintr</code>).</p> </li> <li> <p>arcont (Input File, <code>IF</code>):</p> </li> <li>A/R control file (256 bytes, 2-byte key at position 2).</li> <li> <p>Stores company details (e.g., <code>acname</code>, <code>acargl</code>, <code>acslgl</code>, <code>acdsgl</code>, <code>accsgl</code>).</p> </li> <li> <p>glmast (Input File, <code>IF</code>):</p> </li> <li>General ledger master file (256 bytes, 11-byte key at position 2).</li> <li> <p>Contains G/L account details (e.g., <code>gldesc</code>, <code>gldel</code>).</p> </li> <li> <p>ardetl (Input File, <code>IF</code>):</p> </li> <li>A/R detail file (128 bytes, 18-byte key at position 2).</li> <li> <p>Stores detailed A/R records (e.g., <code>adamt</code>, <code>addudt</code>, <code>adterm</code>, <code>adrfiv</code>).</p> </li> <li> <p>gstabl (Input File, <code>IF</code>):</p> </li> <li>General system table (256 bytes, 12-byte key at position 2).</li> <li>Contains terms and salesman data (e.g., <code>tbnetd</code>, <code>tbprxd</code>).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR101</code> RPGLE program does not explicitly call any external programs. All processing is handled within the program using subroutines (e.g., <code>s1</code>, <code>s2add</code>, <code>s2upd</code>, <code>s2edit</code>, <code>clcdue</code>, <code>invgl</code>, <code>rdtran</code>, <code>totals</code>, <code>dtedit</code>, <code>@dte1</code>, <code>@dte2</code>, <code>rdcust</code>, <code>tmdatp</code>, <code>tmdatn</code>).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR101%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR101</code> RPGLE program, called from the OCL program, provides a user interface for entering and updating A/R transactions (invoices and adjustments). It enforces strict business rules for data validation, including checks on company, customer, invoice, amount, dates, salesman, and G/L accounts. The program uses multiple files (<code>artran</code>, <code>artranr</code>, <code>arcust</code>, <code>arcont</code>, <code>glmast</code>, <code>ardetl</code>, <code>gstabl</code>) to retrieve and store data, and handles Y2K-compliant date calculations. No external programs are called, and all logic is contained within subroutines. The program\u2019s robust error handling ensures data integrity, with clear error messages guiding users to correct invalid inputs.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/","title":"AR111 RPG36","text":"<p>The provided document, <code>AR111.rpg36.txt</code>, is an RPG II program for the IBM System/36 environment, called from the main OCL program (<code>AR101.ocl36.txt</code>) to edit and validate Accounts Receivable (A/R) transactions. It processes sorted transactions from the <code>AR111S</code> file, validates them against various master files, and produces a printed report detailing the results, including errors and totals. Below, I will explain the process steps, business rules, tables (files) used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#process-steps-of-the-ar111-rpg-program","title":"Process Steps of the AR111 RPG Program","text":"<p>The <code>AR111</code> program validates A/R transactions (invoices and adjustments) and generates a report to highlight valid transactions, errors, and totals. It operates in a batch mode, reading from the sorted transaction file <code>AR111S</code> and updating the <code>ARTRAN</code> file. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Initialization (Level 2 - L2):</li> <li>At the start of processing for each company (<code>ATCO</code>, Level 2 control break), the program:<ul> <li>Captures the current date and time using <code>TIME</code> and <code>MOVELTIMDAT</code> operations, storing them in <code>TIMDAT</code>, <code>TIME</code>, and <code>DATE</code>.</li> <li>Resets the page number (<code>PAGE</code>) to zero.</li> <li>Chains to the <code>ARCONT</code> file using <code>ATCO</code> to retrieve company details (e.g., <code>ACNAME</code>). If not found, sets indicator <code>99</code>.</li> </ul> </li> <li> <p>Prints report headers, including company name, date, time, and column headings for the transaction edit report.</p> </li> <li> <p>Read and Process Transactions:</p> </li> <li>Reads records from the sorted input file <code>AR111S</code> (300 bytes, 3-byte key).</li> <li>For each transaction record in <code>ARTRAN</code> (matched with <code>AR111S</code> via <code>E AR111S ARTRAN</code>), performs validations and calculations.</li> <li> <p>If the record is marked as deleted (<code>ATDEL = 'D'</code>), it skips further processing.</p> </li> <li> <p>Validation Subroutines:</p> </li> <li>Customer Validation:<ul> <li>Chains to <code>ARCUST</code> using the customer key (<code>ATCOCU</code>, company + customer number). If not found, sets indicator <code>21</code> and marks an error (<code>*in29</code>).</li> <li>Compares salesman number (<code>ATSLS</code>) with the customer\u2019s salesman (<code>ARSLS#</code>). If different, sets indicator <code>63</code>.</li> </ul> </li> <li>Credit G/L Account Validation:<ul> <li>If the credit G/L account (<code>ATGLCR</code>) is non-zero, constructs a G/L key (<code>ATGL</code>) using the credit company (<code>ATCOCR</code>) and account number.</li> <li>Calls the <code>GETGL</code> subroutine to validate against <code>GLMAST</code>. If the account is not found, deleted (<code>GLDEL = 'D'</code>), or inactive (<code>GLDEL = 'I'</code>), sets indicator <code>22</code> and marks an error (<code>*in29</code>).</li> <li>Compares <code>ATGLCR</code> with the sales G/L account (<code>ACSLGL</code>) from <code>ARCONT</code>. If equal, sets indicator <code>60</code>.</li> </ul> </li> <li>Debit G/L Account Validation:<ul> <li>If the debit G/L account (<code>ATGLDR</code>) is non-zero, constructs a G/L key using the debit company (<code>ATCODR</code>) and account number.</li> <li>Calls <code>GETGL</code> to validate against <code>GLMAST</code>. If not found, deleted, or inactive, sets indicator <code>22</code> and marks an error (<code>*in29</code>).</li> <li>Compares <code>ATGLDR</code> with the A/R G/L account (<code>ACARGL</code>) from <code>ARCONT</code>. If equal, sets indicator <code>61</code>.</li> </ul> </li> <li>Terms Code Validation:<ul> <li>If the terms code (<code>ATTERM</code>) is non-zero, constructs a key (<code>TRMKEY</code>) using <code>'ARTERM'</code> and the terms code.</li> <li>Chains to <code>GSTABL</code>. If not found, sets indicator <code>26</code> and marks an error (<code>*in29</code>).</li> </ul> </li> <li> <p>Invoice/Adjustment Validation:</p> <ul> <li>Builds an A/R detail key (<code>KEY18</code>) using company, customer, invoice number (<code>ATINV#</code>), and type (<code>'I00'</code> for invoices).</li> <li>Chains to <code>ARDETL</code>. If found, calculates the invoice date (<code>INVDAT</code>) and checks the transaction type:</li> <li>For invoices (<code>ATTYPE = 'I'</code>), if the invoice exists and the amount is non-zero, sets indicators <code>27</code> and <code>29</code> (duplicate invoice error).</li> <li>For adjustments (<code>ATTYPE = 'J'</code>), if the invoice does not exist, sets indicator <code>30</code> (invoice not found warning).</li> <li>Validates transaction type. If not <code>I</code> or <code>J</code>, sets indicators <code>25</code> and <code>29</code> (invalid type error).</li> <li>Checks if the transaction amount (<code>ATAMT</code>) is zero, setting indicator <code>73</code>.</li> </ul> </li> <li> <p>Transaction Processing:</p> </li> <li>Invoice Processing (<code>ATTYPE = 'I'</code>):<ul> <li>If the transaction is an invoice and no errors exist (<code>*in27</code> off), processes it as valid.</li> <li>If errors exist, skips to the <code>END</code> tag.</li> </ul> </li> <li>Adjustment Processing (<code>ATTYPE = 'J'</code>):<ul> <li>Validates that the type is <code>J</code>. If not <code>I</code> or <code>J</code>, sets error indicators <code>25</code> and <code>29</code> and skips to <code>END</code>.</li> </ul> </li> <li> <p>Updates the <code>ARTRAN</code> file with an error flag (<code>'E'</code>) if any validation errors occur (<code>*in29</code>), otherwise clears the flag.</p> </li> <li> <p>Totals Calculation:</p> </li> <li>For A/R detail records (<code>*in34</code> on):<ul> <li>Calculates prior month balance (<code>ADAMT - ADPART</code>).</li> <li>Calculates current month balance (<code>ARLEFT = ADAMT - ADPAY</code>).</li> <li>Adds <code>ARLEFT</code> to total invoices (<code>TOTINV</code>).</li> </ul> </li> <li>Adds transaction amount (<code>ATAMT</code>) to total A/R (<code>TOTAR</code>).</li> <li> <p>Accumulates net change to A/R (<code>NETCHG</code>) by adding <code>ATAMT</code>.</p> </li> <li> <p>Report Generation:</p> </li> <li>Prints transaction details for each record, including:<ul> <li>Sequence number (<code>ATKEY</code>), customer number (<code>ATCUST</code>), customer name (<code>ARNAME</code>), invoice number (<code>ATINV#</code>), invoice amount (<code>ARLEFT</code>), invoice date (<code>INVDAT</code>), transaction amount (<code>ATAMT</code>), transaction date (<code>ATDATE</code>), type (<code>INVOICE</code>, <code>ADJUST</code>, or <code>CREDIT</code>), description (<code>ATDESC</code>), reference invoice (<code>ATRFIV</code>), G/L debit/credit accounts, terms, due date, and salesman.</li> </ul> </li> <li>Prints error messages for specific conditions:<ul> <li>Customer not found (<code>*in21</code>): \"CUSTOMER REC. NOT FOUND\".</li> <li>G/L account not found/deleted/inactive (<code>*in22</code>): \"GL ACCOUNT NOT FOUND\".</li> <li>Duplicate invoice (<code>*in27</code>): \"DUPLICATE INVOICE\".</li> <li>Invoice not found for adjustment (<code>*in30</code>): \"INVOICE REC. NOT FOUND\".</li> <li>Invalid transaction type (<code>*in25</code>): \"INVALID TRANS TYPE\".</li> <li>Invalid terms code (<code>*in26</code>): \"INVALID TERMS CODE\".</li> </ul> </li> <li> <p>At the end of processing (<code>LR</code> indicator), prints totals:</p> <ul> <li>Total invoices (<code>TOTINV</code>) for invoices only (<code>*in33</code> off).</li> <li>Total A/R transactions (<code>TOTAR</code>).</li> <li>Net change to A/R (<code>NETCHG</code>).</li> </ul> </li> <li> <p>End of Processing:</p> </li> <li>Updates the <code>ARTRAN</code> file with validated records, marking errors where applicable.</li> <li>Closes files and terminates.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for A/R transaction editing:</p> <ol> <li>Customer Validation:</li> <li>Customer number (<code>ATCUST</code>) combined with company (<code>ATCO</code>) must exist in <code>ARCUST</code>. If not, an error is reported.</li> <li> <p>Salesman number (<code>ATSLS</code>) is compared with the customer\u2019s salesman (<code>ARSLS#</code>) for consistency.</p> </li> <li> <p>G/L Account Validation:</p> </li> <li>Credit G/L account (<code>ATGLCR</code>) and debit G/L account (<code>ATGLDR</code>) must exist in <code>GLMAST</code> and not be deleted (<code>GLDEL = 'D'</code>) or inactive (<code>GLDEL = 'I'</code>). Invalid accounts trigger an error.</li> <li> <p>Credit account is compared with the sales G/L account (<code>ACSLGL</code>), and debit account with the A/R G/L account (<code>ACARGL</code>) for default validation.</p> </li> <li> <p>Terms Code Validation:</p> </li> <li> <p>Terms code (<code>ATTERM</code>) must exist in <code>GSTABL</code> under the <code>ARTERM</code> key. Invalid terms trigger an error.</p> </li> <li> <p>Transaction Type:</p> </li> <li>Transaction type (<code>ATTYPE</code>) must be <code>I</code> (invoice) or <code>J</code> (adjustment). Invalid types trigger an error.</li> <li> <p>Invoices require a non-zero amount (<code>ATAMT</code>).</p> </li> <li> <p>Invoice Validation:</p> </li> <li>For invoices (<code>I</code>), the invoice must not already exist in <code>ARDETL</code> (duplicate check). If it exists and the amount is non-zero, an error is reported.</li> <li> <p>For adjustments (<code>J</code>), the referenced invoice must exist in <code>ARDETL</code>. If not, a warning is issued.</p> </li> <li> <p>Error Handling:</p> </li> <li>Errors (e.g., invalid customer, G/L account, terms, or duplicate invoice) set indicator <code>29</code>, mark the <code>ARTRAN</code> record with <code>'E'</code>, and print an error message.</li> <li> <p>Warnings (e.g., invoice not found for adjustments) are printed but do not mark the record as an error.</p> </li> <li> <p>Totals:</p> </li> <li>Tracks total invoices (<code>TOTINV</code>), total A/R transactions (<code>TOTAR</code>), and net change to A/R (<code>NETCHG</code>).</li> <li> <p>Prior and current month balances are calculated for A/R detail records.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces a detailed report with headers, transaction details, errors/warnings, and final totals.</li> <li>Errors and warnings are clearly marked with <code>****</code> and descriptive messages.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program interacts with the following files:</p> <ol> <li>AR111S (Input File, <code>IR</code>):</li> <li>Sorted A/R transaction file (300 bytes, 3-byte key).</li> <li> <p>Provides input transactions for validation.</p> </li> <li> <p>ARTRAN (Update File, <code>UP</code>):</p> </li> <li>A/R transaction file (256 bytes, 5-byte key at position 2).</li> <li>Stores transaction details (e.g., <code>ATCO</code>, <code>ATCUST</code>, <code>ATINV#</code>, <code>ATAMT</code>, <code>ATDATE</code>).</li> <li> <p>Updated with error flags (<code>'E'</code>) for invalid records.</p> </li> <li> <p>ARCUST (Input File, <code>IC</code>):</p> </li> <li>Customer master file (384 bytes, 8-byte key at position 2).</li> <li> <p>Contains customer data (e.g., <code>ARNAME</code>, <code>ARSLS#</code>, <code>ARTERM</code>).</p> </li> <li> <p>ARDETL (Input File, <code>IC</code>):</p> </li> <li>A/R detail file (128 bytes, 18-byte key at position 2).</li> <li> <p>Stores detailed A/R records (e.g., <code>ADAMT</code>, <code>ADDUDT</code>, <code>ADTERM</code>, <code>ADINV#</code>).</p> </li> <li> <p>GLMAST (Input File, <code>IC</code>):</p> </li> <li>General ledger master file (256 bytes, 11-byte key at position 2).</li> <li> <p>Contains G/L account details (e.g., <code>GLDEL</code>).</p> </li> <li> <p>ARCONT (Input File, <code>IC</code>):</p> </li> <li>A/R control file (256 bytes, 2-byte key at position 2).</li> <li> <p>Stores company details (e.g., <code>ACNAME</code>, <code>ACARGL</code>, <code>ACSLGL</code>, <code>ACCSGL</code>).</p> </li> <li> <p>GSTABL (Input File, <code>IC</code>):</p> </li> <li>General system table (256 bytes, 12-byte key at position 2).</li> <li> <p>Contains terms data (e.g., <code>TERMSD</code>).</p> </li> <li> <p>PRINT (Output File, <code>O</code>):</p> </li> <li>Printer file (164 bytes).</li> <li>Generates the transaction edit report.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR111</code> RPG program does not explicitly call any external programs. All processing is handled within the program, primarily through the <code>GETGL</code> subroutine for G/L account validation.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/AR111%20RPG36/#summary","title":"Summary","text":"<p>The <code>AR111</code> RPG program, called from the main OCL program, validates sorted A/R transactions from <code>AR111S</code>, ensuring compliance with business rules for customers, G/L accounts, terms, and invoice/adjustment data. It updates the <code>ARTRAN</code> file with error flags for invalid records and produces a detailed printed report listing transactions, errors, warnings, and totals. The program uses eight files (<code>AR111S</code>, <code>ARTRAN</code>, <code>ARCUST</code>, <code>ARDETL</code>, <code>GLMAST</code>, <code>ARCONT</code>, <code>GSTABL</code>, <code>PRINT</code>) and relies on the <code>GETGL</code> subroutine for G/L validation. No external programs are called, and the program enforces strict validation to maintain A/R data integrity.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/","title":"Summary AR101 OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#list-of-use-cases-implemented-by-the-ar101ar111-program-call-stack","title":"List of Use Cases Implemented by the AR101/AR111 Program Call Stack","text":"<p>The call stack, consisting of <code>AR101.ocl36.txt</code> (OCL script), <code>AR101.rpgle.txt</code> (RPGLE program for transaction entry), and <code>AR111.rpg36.txt</code> (RPG II program for transaction editing), implements the following primary use case:</p> <ol> <li>Accounts Receivable Transaction Entry and Validation:</li> <li>This use case encompasses the entry, validation, and reporting of A/R transactions (invoices and adjustments). The OCL script orchestrates the process by initializing the environment, sorting transactions, and calling <code>AR101</code> for interactive entry and <code>AR111</code> for batch validation and reporting. Users can add or update transactions via a workstation interface, with validations ensuring data integrity, followed by a printed edit report summarizing transactions and errors.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#function-requirement-document-ar-transaction-processing-function","title":"Function Requirement Document: A/R Transaction Processing Function","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#ar-transaction-processing-function-requirements","title":"A/R Transaction Processing Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#purpose","title":"Purpose","text":"<p>The A/R Transaction Processing function enables the entry, validation, and reporting of Accounts Receivable (A/R) transactions (invoices and adjustments) in a batch environment, replacing the interactive screen-based input of <code>AR101.rpgle</code> with programmatic input handling. It processes input data, validates it against business rules, updates transaction records, and generates a report summarizing valid transactions, errors, and totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Transaction Data:</li> <li>Sequence number (<code>seq</code>, numeric)</li> <li>Company number (<code>co</code>, 2-digit numeric)</li> <li>Customer number (<code>cust</code>, 6-digit numeric)</li> <li>Invoice number (<code>inv#</code>, 7-digit numeric)</li> <li>Transaction type (<code>type</code>, 1-character, <code>I</code> for invoice, <code>J</code> for adjustment)</li> <li>Transaction amount (<code>amt</code>, 9.2 decimal)</li> <li>Transaction date (<code>date</code>, 6-digit MMDDYY)</li> <li>Due date (<code>dudt</code>, 6-digit MMDDYY)</li> <li>Terms code (<code>term</code>, 2-digit numeric)</li> <li>Salesman number (<code>sls</code>, 2-digit numeric)</li> <li>Debit G/L account (<code>gldr</code>, 8-digit numeric)</li> <li>Credit G/L account (<code>glcr</code>, 8-digit numeric)</li> <li>Debit company (<code>codr</code>, 2-digit numeric)</li> <li>Credit company (<code>cocr</code>, 2-digit numeric)</li> <li>Transaction description (<code>desc</code>, 25-character)</li> <li>Reference invoice number (<code>rfiv</code>, 7-digit numeric, for adjustments)</li> <li>Files:</li> <li>Customer master (<code>ARCUST</code>): Customer data (name, salesman, terms, inter-company number).</li> <li>A/R control (<code>ARCONT</code>): Company data (name, A/R G/L, sales G/L, cash G/L).</li> <li>General ledger master (<code>GLMAST</code>): G/L account details (description, deletion/inactive status).</li> <li>A/R detail (<code>ARDETL</code>): A/R records (amount, due date, terms, salesman).</li> <li>General system table (<code>GSTABL</code>): Terms and salesman data.</li> <li>A/R transaction file (<code>ARTRAN</code>): Transaction storage.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated ARTRAN File: Transactions marked as valid or with error flag (<code>'E'</code>).</li> <li>Transaction Edit Report: Lists transactions with details (sequence, customer, invoice, amount, date, type, etc.), errors, warnings, and totals (total invoices, total A/R, net change to A/R).</li> <li>Error/Warning Messages: Array of validation errors (e.g., invalid customer, duplicate invoice).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialization:</li> <li>Retrieve current date/time for reporting.</li> <li>Initialize counters (<code>PAGE</code>, <code>TOTINV</code>, <code>TOTAR</code>, <code>NETCHG</code>) to zero.</li> <li> <p>Validate company number (<code>co</code>) against <code>ARCONT</code> to retrieve company name.</p> </li> <li> <p>Transaction Validation:</p> </li> <li> <p>For each transaction record:</p> <ul> <li>Sequence Number: Ensure unique (<code>ARTRAN</code> chain). If duplicate, return error.</li> <li>Customer: Validate <code>co</code> + <code>cust</code> exists in <code>ARCUST</code>, not deleted. If zero, treat as miscellaneous cash.</li> <li>Invoice Number: Non-zero. For invoices (<code>I</code>), check non-existence in <code>ARDETL</code> (duplicate check). For adjustments (<code>J</code>), check existence in <code>ARDETL</code>.</li> <li>Transaction Type: Must be <code>I</code> (invoice) or <code>J</code> (adjustment).</li> <li>Amount: Non-zero.</li> <li>Transaction Date: Validate format (MMDDYY). If zero, default to current date. Adjust for Y2K compliance (century calculation).</li> <li>Due Date (Invoices): If provided, validate format and ensure not earlier than transaction date. If terms provided, calculate due date (see calculations). If neither, default to 30 days.</li> <li>Terms Code: If non-zero, validate against <code>GSTABL</code>.</li> <li>Salesman: If non-zero, validate against <code>GSTABL</code>. Default from <code>ARCUST</code> if zero.</li> <li>G/L Accounts: Validate <code>gldr</code> and <code>glcr</code> against <code>GLMAST</code> (not deleted/inactive). Default to <code>ACARGL</code> (A/R G/L) or <code>ACSLGL</code> (sales G/L) if zero, or inter-company number if applicable.</li> <li>Debit/Credit Companies: Validate <code>codr</code> and <code>cocr</code> against <code>ARCONT</code>.</li> </ul> </li> <li> <p>Calculations:</p> </li> <li>Due Date (Invoices):<ul> <li>If terms code exists, retrieve net days (<code>tbnetd</code>) or prox days (<code>tbprxd</code>) from <code>GSTABL</code>.</li> <li>For net days: Add <code>tbnetd</code> to transaction date (Julian conversion: add days, convert back to Gregorian).</li> <li>For prox days: Set due date to <code>tbprxd</code> of the next month.</li> <li>If no terms, use customer\u2019s terms (<code>ARTERM</code>) or default to 30 days.</li> </ul> </li> <li>Y2K Date Handling:<ul> <li>If year &lt; comparison year (<code>y2kcmp</code>), add 1 to century (<code>y2kcen</code>). Otherwise, use <code>y2kcen</code>.</li> <li>Convert dates to 8-digit format (CCYYMMDD) for storage.</li> </ul> </li> <li> <p>Totals:</p> <ul> <li>For A/R detail records: Prior month balance = <code>ADAMT - ADPART</code>, Current month balance (<code>ARLEFT</code>) = <code>ADAMT - ADPAY</code>.</li> <li>Total invoices (<code>TOTINV</code>) += <code>ARLEFT</code> (invoices only).</li> <li>Total A/R (<code>TOTAR</code>) += <code>ATAMT</code>.</li> <li>Net change to A/R (<code>NETCHG</code>) += <code>ATAMT</code>.</li> </ul> </li> <li> <p>Transaction Update:</p> </li> <li>If no errors, write/update <code>ARTRAN</code> with transaction data.</li> <li> <p>If errors, mark <code>ARTRAN</code> record with <code>'E'</code> flag.</p> </li> <li> <p>Report Generation:</p> </li> <li>Generate report with headers (company, date, time, page).</li> <li>For each transaction, print: sequence, customer number/name, invoice number, amount, date, type (invoice/adjustment/credit), description, reference invoice, G/L accounts, terms, due date, salesman.</li> <li>Print errors/warnings: customer not found, G/L not found, duplicate invoice, invoice not found (adjustments), invalid type, invalid terms.</li> <li>At end, print totals: total invoices, total A/R, net change to A/R.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types: Must be <code>I</code> (invoice) or <code>J</code> (adjustment).</li> <li>Sequence Number: Must be unique in <code>ARTRAN</code>.</li> <li>Company: Must exist in <code>ARCONT</code>. Debit/credit companies (<code>codr</code>, <code>cocr</code>) must also exist.</li> <li>Customer: Must exist in <code>ARCUST</code>, not deleted. Zero allowed for miscellaneous cash.</li> <li>Invoice Number: Non-zero. Invoices must not exist in <code>ARDETL</code>; adjustments must reference existing invoices.</li> <li>Amount: Non-zero.</li> <li>Transaction Date: Valid MMDDYY format, defaults to current date if zero.</li> <li>Due Date: For invoices, valid and not earlier than transaction date. Calculated from terms or defaults to 30 days.</li> <li>Terms Code: If non-zero, must exist in <code>GSTABL</code>.</li> <li>Salesman: If non-zero, must exist in <code>GSTABL</code>. Defaults from <code>ARCUST</code>.</li> <li>G/L Accounts: Must exist in <code>GLMAST</code>, not deleted (<code>'D'</code>) or inactive (<code>'I'</code>). Defaults from <code>ARCONT</code> or inter-company number.</li> <li>Error Handling: Invalid data marks <code>ARTRAN</code> with <code>'E'</code> and includes error message in report.</li> <li>Reporting: Detailed transaction report with errors/warnings and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files: <code>ARTRAN</code> (update), <code>AR111S</code> (sorted input), <code>ARCUST</code>, <code>ARDETL</code>, <code>GLMAST</code>, <code>ARCONT</code>, <code>GSTABL</code> (input), <code>PRINT</code> (output).</li> <li>No External Programs: All logic is self-contained.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR101%20Invoices%20Adjustments%20Entry/Summary%20AR101%20OCL/#notes","title":"Notes","text":"<ul> <li>Replaces interactive screen input (<code>AR101D</code>) with programmatic input.</li> <li>Maintains Y2K compliance for date handling.</li> <li>Report format mirrors <code>AR111</code> output for consistency.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/","title":"AR200 RPG36","text":"<p>The provided document, <code>AR200.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. It processes accounts receivable (A/R) transactions, updates customer and detail files, generates journal entries, and prints a transaction posting register. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#process-steps-of-the-rpg-program-ar200","title":"Process Steps of the RPG Program (AR200)","text":"<p>The <code>AR200</code> program processes A/R transactions (invoices, adjustments, payments, and miscellaneous cash) from a sorted transaction file, updates relevant files, and produces a detailed posting register. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARTRAN</code> (transactions), <code>ARDETL</code> (A/R details), <code>ARCUST</code> (customer master), <code>ARCONT</code> (A/R control).</li> <li>Output: <code>ARHIST</code> (A/R history), <code>ARDIST</code> (distribution for journal entries), <code>REPORT</code> (primary posting register), <code>REPORTP</code> (Pittsburgh copy).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure for journal date (<code>JRNLDT</code>, positions 100\u2013105), user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), journal type (<code>SJTYPE</code>), journal number (<code>SJ##</code>), and Y2K variables (<code>Y2KCEN</code>, <code>Y2KCMP</code>).</li> <li><code>AGE</code>: Array for aged customer balances (5 periods, 9.2 format).</li> <li><code>MN</code>: Month names array (January\u2013December).</li> </ul> </li> <li> <p>Initialization (Level L3):</p> <ul> <li>Clears accumulators (<code>Z2</code>, <code>ZERO6</code>, <code>ZERO7</code>, <code>ZERO9</code>) and sets constants (<code>ONE1</code>, <code>ONE2</code>).</li> <li>Initializes page counters (<code>PAGE</code>, <code>PAGE2</code>, <code>PAGE4</code>) to 0.</li> <li>Chains to <code>ARCONT</code> by company (<code>ATCO</code>) to retrieve journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>). If found (<code>N91</code>), sets <code>AR#</code> and <code>SL#</code>; if <code>SJ##</code> is non-zero, uses it for <code>SL#</code>.</li> <li>Clears indicators <code>05</code>, <code>06</code>.</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARTRAN</code> records sequentially, controlled by level breaks (<code>L1</code>, <code>L2</code>, <code>L3</code>):<ul> <li>L3 (Company Change): Resets accumulators and retrieves journal numbers.</li> <li>L2 (Inter-Company Change): Checks if <code>ATICCD = 'IC'</code> (indicator <code>92</code> for inter-company customers).</li> <li>L1 (Transaction Type Change): Resets transaction accumulators (<code>NETCHG</code>, <code>INVAMT</code>, <code>ADJAMT</code>, <code>TOTREC</code>, <code>TOTMIS</code>, <code>TOTINV</code>) and clears indicators <code>71</code>, <code>72</code>, <code>73</code>.</li> </ul> </li> <li> <p>Executes one-time setup (<code>ONETIM</code>) if not already done (<code>N90</code>).</p> </li> <li> <p>One-Time Setup (<code>ONETIM</code>):</p> </li> <li>Captures system time (<code>TIMEOF</code>) and date (<code>TIMDAT</code>).</li> <li>Converts journal date (<code>JRNLDT</code>) to YMD format (<code>JYMD</code>) with Y2K compliance:<ul> <li>If <code>JYR &gt;= Y2KCMP (80)</code>, uses <code>Y2KCEN (19)</code>; otherwise, increments <code>Y2KCEN</code> by 1.</li> <li>Builds 8-digit date (<code>JRNLD8</code>) in CCYYMMDD format.</li> </ul> </li> <li>Converts system date to YMD (<code>SYSDT8</code>) for reporting.</li> <li> <p>Sets indicator <code>90</code> to mark setup completion.</p> </li> <li> <p>Transaction Type Determination (<code>TRNSID</code>):</p> </li> <li>Clears indicators for transaction types (<code>10</code>, <code>20</code>, <code>30</code>, <code>40</code>, <code>50</code>, <code>31</code>, <code>32</code>, <code>37</code>, <code>15</code>, <code>81</code>, <code>12</code>).</li> <li>Converts transaction date (<code>ATDATE</code>) and due date (<code>ATDUDT</code>) to YMD format (<code>ATDAT8</code>, <code>ATDUD8</code>) with Y2K compliance.</li> <li>Compares invoice date to journal date if <code>LDRETL = 'R'</code> (sets indicator <code>65</code> if different).</li> <li>Identifies transaction type:<ul> <li><code>ATCOD = 'Y'</code> sets indicator <code>25</code> (COD invoice).</li> <li><code>ATTYPE = 'I'</code> sets <code>10</code> (invoice).</li> <li><code>ATTYPE = 'J'</code> sets <code>20</code> (adjustment).</li> <li><code>ATTYPE = 'P'</code> sets <code>30</code> (payment).</li> </ul> </li> <li>Sets journal type (<code>JRNTYP</code>): <code>SJ</code> for invoices/adjustments, <code>CR</code> for payments.</li> <li> <p>For COD invoices (<code>25</code>), skips further processing (<code>GOTO ENDTR</code>).</p> </li> <li> <p>Transaction Processing:</p> </li> <li>Invoice (<code>10</code>):<ul> <li>If miscellaneous billing (<code>16</code> and <code>86</code>), sets indicators <code>15</code>, <code>17</code>, clears <code>10</code>.</li> <li>If not already an adjustment (<code>N12</code>), executes <code>INVSUM</code>.</li> <li>If an adjustment (<code>12</code>), executes <code>ADJUST</code>.</li> </ul> </li> <li>Adjustment (<code>20</code>):<ul> <li>Executes <code>ADJUST</code>.</li> </ul> </li> <li>Payment (<code>30</code>):<ul> <li>If not miscellaneous (<code>N80</code>), executes <code>PAYMNT</code>.</li> <li>If miscellaneous (<code>80</code>), executes <code>MISC$$</code>.</li> </ul> </li> <li>Inter-Company Check:<ul> <li>If <code>ATICCD = 'IC'</code> (<code>92</code>), skips updates to <code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code> (only generates journal entries).</li> </ul> </li> <li>Checks <code>ARDETL</code> for existing invoice (<code>KEY18 = ATCOCU + ATINV# + 'I00'</code>):<ul> <li>If found (<code>39</code>) and payment (<code>30</code> or <code>20</code>), executes <code>PPDADD</code> and loops back (<code>GOTO AGNX</code>).</li> <li>If not found or invoice (<code>10</code>), proceeds to <code>UNIQUE</code>.</li> </ul> </li> <li> <p>Sets adjustment flag (<code>12</code>) if invoice starts with <code>9</code> (<code>ATINV1 = '9'</code>, indicator <code>31</code>).</p> </li> <li> <p>Invoice Summary (<code>INVSUM</code>):</p> </li> <li>Increments invoice count (<code>TOTINV</code>).</li> <li>Adds transaction amount (<code>ATAMT</code>) to <code>INVAMT</code>.</li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If found (<code>N99</code>), updates aged balance (<code>AGE,P</code>), total due (<code>ARTOTD</code>), month-to-date (<code>ARMTD$</code>), year-to-date (<code>ARYTD$</code>).</li> <li>Sets indicator <code>40</code> for customer update.</li> </ul> </li> <li> <p>Writes to <code>ARDETL</code> and <code>ARHIST</code> (see output specs).</p> </li> <li> <p>Prepaid Invoice Add (<code>PPDADD</code>):</p> </li> <li>Creates an empty invoice record for prepaid transactions (indicator <code>61</code>).</li> <li> <p>Writes to <code>ARDETL</code> and <code>ARHIST</code> with zero amounts.</p> </li> <li> <p>Adjustment Processing (<code>ADJUST</code>):</p> </li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If not found or exists (<code>N39</code>, <code>N99</code>), sets indicators <code>40</code>, <code>50</code>.</li> <li>Updates <code>AGE,P</code>, <code>ARTOTD</code>, <code>ARMTD$</code>, <code>ARYTD$</code>.</li> </ul> </li> <li>Updates <code>ARDETL</code>:<ul> <li>Subtracts <code>ATAMT</code> from current month paid (<code>ADPAY</code>).</li> <li>Increments next sequence number (<code>ADNEXT</code>).</li> <li>Adds sales amount (<code>ATDSAL</code> to <code>ADDSAL</code>).</li> <li>Updates notification of difference (<code>ADNOD</code>) and reference invoice (<code>ADRFIV</code>) if blank/zero.</li> </ul> </li> <li>Writes to <code>ARDETL</code> and <code>ARHIST</code> (indicator <code>60</code>).</li> <li> <p>Increments <code>TOTINV</code>, adds <code>ATAMT</code> to <code>ADJAMT</code>.</p> </li> <li> <p>Payment Processing (<code>PAYMNT</code>):</p> </li> <li>Chains to <code>ARCUST</code> by <code>ATCOCU</code>:<ul> <li>If not found or exists (<code>N39</code>, <code>N99</code>), updates <code>AGE,P</code>, <code>ARTOTD</code>, month-to-date paid (<code>ARM$PD</code>), year-to-date paid (<code>ARY$PD</code>), payment amount (<code>ARPYMT</code>), payment date (<code>ARPDAT</code>, <code>ARPDA8</code>).</li> </ul> </li> <li>Updates <code>ARDETL</code>:<ul> <li>Increments <code>ADNEXT</code>, adds <code>ATAMT</code> to <code>ADPAY</code>, updates <code>ADNOD</code>, <code>ADRFIV</code>.</li> </ul> </li> <li>Writes to <code>ARDETL</code> and <code>ARHIST</code> (indicator <code>60</code>).</li> <li>Increments <code>TOTINV</code>, accumulates totals:<ul> <li><code>TOTREC</code> (received), <code>TOTDIS</code> (discount), <code>ATCASH</code> (net cash = <code>ATAMT - ATDISC</code>), <code>TOTCAS</code> (total cash), <code>TOTARC</code> (A/R cash).</li> </ul> </li> <li> <p>Compares <code>ATAMT</code> to remaining balance (<code>ARLEFT</code>, sets <code>32</code>, <code>37</code>).</p> </li> <li> <p>Miscellaneous Cash (<code>MISC$$</code>):</p> <ul> <li>If finance charge (<code>ATDSFC = 'FIN CHG'</code>), chains to <code>ARCUST</code> and subtracts <code>ATAMT</code> from finance charges (<code>ARFIN$</code>).</li> <li>Adds <code>ATAMT</code> to <code>TOTCAS</code> (total cash) and <code>TOTMIS</code> (miscellaneous cash).</li> <li>Sets <code>ATCASH</code> to <code>ATAMT</code>.</li> </ul> </li> <li> <p>Final Totals (<code>FINTOT</code>):</p> <ul> <li>Calculates net change to A/R (<code>NETCHG = INVAMT + ADJAMT - TOTREC</code>).</li> <li>Writes final totals to <code>REPORT</code> and <code>REPORTP</code>.</li> </ul> </li> <li> <p>Output Operations:</p> <ul> <li>ARDIST: Writes journal entries for invoices (<code>I</code>), adjustments (<code>J</code>), payments (<code>P</code>), COD invoices (<code>I</code>), including customer, amount, G/L accounts, and dates.</li> <li>ARTRAN: Marks processed transactions with <code>P</code> (position 54).</li> <li>ARCUST: Updates customer balances, payment info, and aged amounts (indicator <code>40</code>).</li> <li>ARDETL: Adds/updates invoice, adjustment, payment, or prepaid records.</li> <li>ARHIST: Logs transaction history for invoices, adjustments, payments, and prepaids.</li> <li>ARCONT: Updates journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>) at company level break (L3).</li> <li>REPORT/REPORTP: Prints posting register with headers, invoice, adjustment, payment details, and totals.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices (<code>ATTYPE = 'I'</code>): Update customer balances, A/R details, and history; generate sales journal (<code>SJ</code>) entries.</li> <li>Adjustments (<code>ATTYPE = 'J'</code>): Adjust customer balances and A/R details; generate <code>SJ</code> entries.</li> <li>Payments (<code>ATTYPE = 'P'</code>): Reduce customer balances, update payment info, and generate cash receipts (<code>CR</code>) entries.</li> <li>COD Invoices (<code>ATCOD = 'Y'</code>): Skip standard processing, generate journal entries only.</li> <li> <p>Miscellaneous Cash (<code>80</code>): If finance charge (<code>FIN CHG</code>), reduce <code>ARFIN$</code>; otherwise, record as miscellaneous cash.</p> </li> <li> <p>Inter-Company Customers (<code>ATICCD = 'IC'</code>):</p> </li> <li> <p>Do not update <code>ARCUST</code>, <code>ARDETL</code>, or <code>ARHIST</code>; only generate journal entries in <code>ARDIST</code>.</p> </li> <li> <p>Date Handling:</p> </li> <li>Converts transaction and due dates to YMD format (CCYYMMDD) with Y2K compliance (<code>Y2KCEN</code>, <code>Y2KCMP</code>).</li> <li> <p>Compares invoice date to journal date if <code>LDRETL = 'R'</code> to flag discrepancies (indicator <code>65</code>).</p> </li> <li> <p>Journal Numbers:</p> </li> <li>Increments <code>ACSLJ#</code> for invoices/adjustments (<code>10</code> or <code>20</code>, indicator <code>05</code>) if <code>SJ##</code> is zero.</li> <li>Increments <code>ACARJ#</code> for payments (<code>30</code>, indicator <code>06</code>).</li> <li> <p>Updates <code>ARCONT</code> with new journal numbers at company level break.</p> </li> <li> <p>Customer Updates:</p> </li> <li>Updates <code>ARCUST</code> for non-inter-company transactions: aged balances (<code>AGE</code>), total due (<code>ARTOTD</code>), payment info (<code>ARPYMT</code>, <code>ARPDAT</code>), and period totals (<code>ARMTD$</code>, <code>ARYTD$</code>, <code>ARM$PD</code>, <code>ARY$PD</code>).</li> <li> <p>Reduces finance charges (<code>ARFIN$</code>) for miscellaneous cash payments.</p> </li> <li> <p>A/R Detail Updates:</p> </li> <li>Adds new records for invoices, adjustments, payments, or prepaids.</li> <li> <p>Updates existing records with payments (<code>ADPAY</code>), sequence numbers (<code>ADNEXT</code>), sales amounts (<code>ADDSAL</code>), notification of difference (<code>ADNOD</code>), and reference invoice (<code>ADRFIV</code>).</p> </li> <li> <p>History Logging:</p> </li> <li> <p>Records all transactions (except inter-company) in <code>ARHIST</code> with details like company, customer, invoice, amount, and dates.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces two copies of the posting register (<code>REPORT</code>, <code>REPORTP</code>) with sections for invoices, adjustments, and payments, including totals for A/R applied, discounts, cash, and net change.</li> <li> <p>Includes headers with company name, date, time, user ID, workstation ID, and journal date.</p> </li> <li> <p>Prepaid Invoices:</p> </li> <li> <p>Creates empty invoice records in <code>ARDETL</code> and <code>ARHIST</code> for prepaid transactions with zero amounts.</p> </li> <li> <p>Error Handling:</p> <ul> <li>Chains to <code>ARCUST</code> and <code>ARDETL</code> to validate customer and invoice existence.</li> <li>Uses indicators (<code>39</code>, <code>99</code>, <code>50</code>) to handle missing or existing records.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARTRAN</code> (F-spec 0014): Transaction file (256 bytes, update mode), sorted input from <code>?9?AR201S</code>.    - <code>ARDETL</code> (0015): A/R detail file (128 bytes, update mode, keyed by company/customer/invoice, shared access).    - <code>ARCUST</code> (0016): Customer master file (384 bytes, update mode, keyed by company/customer, shared access).    - <code>ARCONT</code> (0017): A/R control file (256 bytes, update mode, keyed by company, shared access).</p> <ol> <li>Output Files:</li> <li><code>ARHIST</code> (0018): A/R history file (128 bytes, output mode).</li> <li><code>ARDIST</code> (0019): Distribution file (161 bytes, output mode) for journal entries.</li> <li><code>REPORT</code> (0020): Primary transaction posting register (164 bytes, printer file).</li> <li> <p><code>REPORTP</code> (0021): Pittsburgh copy of the register (164 bytes, printer file).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>ONETIM</code>: One-time setup for dates and system info. - <code>TRNSID</code>: Determines transaction type and converts dates. - <code>INVSUM</code>: Processes invoice summaries. - <code>PPDADD</code>: Adds prepaid invoice records. - <code>ADJUST</code>: Processes adjustments. - <code>PAYMNT</code>: Processes payments. - <code>MISC$$</code>: Handles miscellaneous cash. - <code>FINTOT</code>: Calculates final totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200%20RPG36/#notes","title":"Notes","text":"<ul> <li>Y2K Compliance: Uses <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) to handle century in dates, ensuring CCYYMMDD format.</li> <li>Inter-Company Logic: Explicitly skips A/R updates for <code>ATICCD = 'IC'</code>, focusing on journal entries.</li> <li>Modifications:</li> <li>4/20/05: Enhanced description field handling for cash receipts in <code>TEMGEN</code>.</li> <li>8/06/14: Changed printer names for paperless reporting, removed W. Conshohocken copy.</li> <li>Journal Types: <code>SJ</code> (sales journal) for invoices/adjustments, <code>CR</code> (cash receipts) for payments.</li> <li>File Access: Shared access (<code>DISP-SHR</code>) for <code>ARDETL</code>, <code>ARCUST</code>, <code>ARCONT</code> allows concurrent processing.</li> </ul> <p>If you have additional details (e.g., source for <code>AR210</code>, <code>AR211</code>, or file layouts), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/","title":"AR200P RPGLE","text":"<p>The provided document, <code>AR200P.rpgle.txt</code>, is an RPGLE (RPG IV) program used in an IBM AS/400 or iSeries environment, called from the OCL script <code>AR201P.ocl36.txt</code>. It handles the journal date prompt for accounts receivable (A/R) transaction posting, interacting with a workstation display file to collect and validate user input. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#process-steps-of-the-rpg-program-ar200p","title":"Process Steps of the RPG Program (AR200P)","text":"<p>The program <code>AR200P</code> is designed to prompt the user for a journal date, validate it, and confirm the input before allowing A/R transaction posting to proceed. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>Program Initialization:</li> <li>The program defines a workstation display file <code>AR200PD</code> (renamed from <code>SCREEN</code> during conversion) as a <code>CF</code> (combined file) with a handler for a graphical interface (<code>PROFOUNDUI(HANDLER)</code>).</li> <li>Data structures and variables are initialized, including <code>kyjrdt</code> (journal date), <code>y2kcen</code> (century), <code>y2kcmp</code> (comparison year), and <code>msg</code> (error message array).</li> <li> <p>The program uses an information data structure (<code>@infds</code>) to capture screen status, such as function keys (<code>@vkey</code>).</p> </li> <li> <p>Main Loop (Screen Processing):</p> </li> <li>The program enters a <code>DO</code> loop (<code>dow @sfnex &lt;&gt; 'EJ'</code>) that continues until the exit condition (<code>EJ</code>) is met, indicating the user has completed or canceled the process.</li> <li> <p>The loop processes user interactions with two screen formats: <code>AR200PS1</code> (for entering the journal date) and <code>AR200PS2</code> (for confirming the date).</p> </li> <li> <p>Screen Selection Logic:</p> </li> <li> <p>The program uses a <code>CASEQ</code> structure to determine which screen to process based on <code>@sfid</code> (screen format identifier):</p> <ul> <li><code>@sfid = *blank</code>: Calls subroutine <code>$sblk</code> (initial blank screen setup).</li> <li><code>@sfid = 'S1'</code>: Calls subroutine <code>$s1</code> (processes journal date input screen).</li> <li><code>@sfid = 'S2'</code>: Calls subroutine <code>$s2</code> (processes confirmation screen).</li> </ul> </li> <li> <p>Initial Screen Setup (<code>$sblk</code>):</p> </li> <li>Clears variables (<code>kyjrdt</code>, <code>kyyn</code>, <code>msgout</code>) to initialize the process.</li> <li> <p>Sets <code>@sfnex</code> to <code>'S1'</code>, indicating the next screen to display is <code>AR200PS1</code> (journal date input).</p> </li> <li> <p>Display and Read Screen (<code>$xcpt</code> and Main Loop):</p> </li> <li>The <code>$xcpt</code> subroutine displays the next screen based on <code>@sfnex</code>:<ul> <li>If <code>@sfnex = 'S1'</code>, writes <code>AR200PS1</code>.</li> <li>If <code>@sfnex = 'S2'</code>, writes <code>AR200PS2</code>.</li> <li>Increments <code>@ccnt</code> (screen counter) and sets indicator <code>*in98</code> if the same screen is redisplayed (error condition).</li> </ul> </li> <li> <p>The main loop reads the screen:</p> <ul> <li>For <code>AR200PS1</code>, reads the journal date (<code>jrdate</code>) and sets <code>@sfid = 'S1'</code>.</li> <li>For <code>AR200PS2</code>, reads the confirmation flag (<code>yn</code>) and sets <code>@sfid = 'S2'</code>.</li> </ul> </li> <li> <p>Process Screen <code>AR200PS1</code> (<code>$s1</code>):</p> </li> <li>Checks the function key (<code>@vkey</code>):<ul> <li>If <code>0</code> (Enter key), calls <code>$s1ent</code> to validate the journal date.</li> <li>If <code>2</code> (command key, e.g., F3), calls <code>$s1ck</code> to handle exit.</li> </ul> </li> <li><code>$s1ent</code> (Enter key processing):<ul> <li>Moves <code>kyjrdt</code> to <code>mmddyy</code> and calls <code>@dtedt</code> to validate the date.</li> <li>If date is invalid (<code>*in79 = *on</code>), displays error message (<code>msgout = 'INVALID DATE'</code>) and redisplays <code>AR200PS1</code> (<code>*in50 = *on</code>).</li> <li>If valid, clears indicators (<code>clrind</code>), sets <code>@sfnex = 'S2'</code>, and moves to the confirmation screen.</li> </ul> </li> <li> <p><code>$s1ck</code> (Command key processing):</p> <ul> <li>If F3 (<code>*inkg = *on</code>), sets exit indicators (<code>*inu1</code>, <code>*inlr</code>) and <code>@sfnex = 'EJ'</code> to terminate the program.</li> </ul> </li> <li> <p>Process Screen <code>AR200PS2</code> (<code>$s2</code>):</p> </li> <li>Checks the function key (<code>@vkey</code>):<ul> <li>If <code>0</code> (Enter key), calls <code>$s2ent</code> to process confirmation.</li> <li>If <code>2</code> (command key), calls <code>$s2ck</code> to handle navigation or exit.</li> </ul> </li> <li><code>$s2ent</code> (Enter key processing):<ul> <li>If <code>kyyn &lt;&gt; 'Y'</code>, clears fields (<code>clrfld</code>) and returns to <code>AR200PS1</code> (<code>@sfnex = 'S1'</code>).</li> <li>If <code>kyyn = 'Y'</code>, sets <code>@sfnex = 'EJ'</code> to exit the program, indicating confirmation.</li> </ul> </li> <li> <p><code>$s2ck</code> (Command key processing):</p> <ul> <li>If F3 (<code>*inkg = *on</code>), sets exit indicators and <code>@sfnex = 'EJ'</code>.</li> <li>If another command key (e.g., F12, <code>ka</code>), returns to <code>AR200PS1</code> (<code>@sfnex = 'S1'</code>).</li> </ul> </li> <li> <p>Date Validation (<code>@dtedt</code>):</p> </li> <li> <p>Validates the journal date (<code>mmddyy</code>) in MMDDYY format:</p> <ul> <li>Breaks down the date into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Validates month (1\u201312).</li> <li>For February, checks leap year:</li> <li>Non-zero year: Divides year by 4 (multiply by 0.25) to check leap year.</li> <li>Century year: Combines century (<code>y2kcen</code>) and year, divides by 400 (multiply by 0.0025).</li> <li>Leap year allows up to 29 days; non-leap year allows 28.</li> <li>For other months, checks 30 or 31 days based on month (e.g., April, June, September, November = 30; others = 31).</li> <li>Sets <code>*in79</code> if the date is invalid.</li> </ul> </li> <li> <p>Clear Fields and Indicators:</p> </li> <li><code>clrfld</code>: Resets <code>kyjrdt</code>, <code>kyyn</code>, and <code>msgout</code>, and sets <code>@sfnex = 'S1'</code> for redisplay.</li> <li> <p><code>clrind</code>: Clears error and display indicators (<code>*in50</code>, <code>*in81</code>\u2013<code>*in86</code>, <code>*in59</code>).</p> </li> <li> <p>Program Termination:</p> <ul> <li>When <code>@sfnex = 'EJ'</code>, the program exits the main loop, sets <code>*inlr = *on</code> (last record indicator), and terminates, returning control to the calling OCL script.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Date Validation:</li> <li>The user must enter a valid journal date in MMDDYY format.</li> <li>The date is validated for:<ul> <li>Valid month (1\u201312).</li> <li>Valid day based on month (30 or 31 days) and leap year for February (28 or 29 days).</li> <li>Leap year logic accounts for century (Y2K compliance using <code>y2kcen</code> and <code>y2kcmp</code>).</li> </ul> </li> <li> <p>Invalid dates trigger an error message (<code>INVALID DATE</code>) and prompt redisplay.</p> </li> <li> <p>Two-Step Input Process:</p> </li> <li>Screen <code>AR200PS1</code> collects the journal date.</li> <li>Screen <code>AR200PS2</code> requires confirmation (<code>yn = 'Y'</code>) to proceed.</li> <li> <p>If confirmation is not <code>Y</code>, the user is returned to <code>AR200PS1</code>.</p> </li> <li> <p>Exit Conditions:</p> </li> <li>Pressing F3 (<code>*inkg</code>) on either screen exits the program, setting <code>*inu1</code> and <code>*inlr</code>.</li> <li> <p>Other command keys (e.g., F12, <code>ka</code>) on <code>AR200PS2</code> return to <code>AR200PS1</code>.</p> </li> <li> <p>Error Handling:</p> </li> <li>Invalid dates set <code>*in79</code> and display an error message.</li> <li>Indicators (<code>*in50</code>, <code>*in81</code>\u2013<code>*in86</code>, <code>*in59</code>) control error display and screen behavior.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#tables-used","title":"Tables Used","text":"<p>The program uses no database files (physical or logical files) directly. Instead, it interacts with: - Workstation Display File: <code>AR200PD</code> (originally <code>SCREEN</code>), defined as a <code>CF</code> (combined file) with formats <code>AR200PS1</code> and <code>AR200PS2</code>. This file handles user input/output via the screen. - Compile-Time Data: A single message array (<code>msg</code>) with one entry (<code>INVALID DATE</code>) defined in the <code>CTDATA</code> section.</p> <p>No traditional database tables (e.g., A/R master file or journal file) are referenced, suggesting this program\u2019s sole purpose is to collect and validate the journal date, passing it to subsequent programs (e.g., <code>AR201</code>) for actual transaction posting.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is internal, with subroutines handling specific tasks: - <code>$sblk</code>: Initializes the blank screen. - <code>$s1</code>, <code>$s1ent</code>, <code>$s1ck</code>: Process the journal date input screen. - <code>$s2</code>, <code>$s2ent</code>, <code>$s2ck</code>: Process the confirmation screen. - <code>$xcpt</code>: Manages screen display. - <code>clrind</code>, <code>clrfld</code>: Clear indicators and fields. - <code>@dtedt</code>: Validates the journal date.</p> <p>The program is called by the OCL script (<code>AR201P.ocl36.txt</code>) and likely passes the validated journal date (<code>kyjrdt</code>) to subsequent programs (e.g., <code>AR201</code>) via parameters or data areas.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR200P%20RPGLE/#notes","title":"Notes","text":"<ul> <li>Y2K Compliance: The program includes logic for century handling (<code>y2kcen</code>, <code>y2kcmp</code>) to ensure proper date validation, reflecting its conversion date (04/11/23) and Y2K considerations.</li> <li>Conversion Notes: The <code>T4</code> prefixes indicate a TARGET/400 source conversion, with 33 added lines, 8 modified lines, and 279 total lines processed. Changes include modernized syntax (e.g., <code>EVAL</code> instead of <code>MOVE</code>, <code>READ</code> instead of <code>READ SCREEN</code>).</li> <li>Screen Formats:</li> <li><code>AR200PS1</code>: Captures <code>jrdate</code> (journal date, positions 3\u20138) and displays <code>msgout</code> (error message, position 41).</li> <li><code>AR200PS2</code>: Displays <code>jrdate</code> (position 6), captures <code>yn</code> (confirmation, position 7), and displays <code>msgout</code> (position 42).</li> <li>Parameters: The program receives the journal date as a parameter (likely <code>?9?</code> from the OCL) and stores it in <code>kyjrdt</code> (data area, positions 100\u2013105).</li> </ul> <p>If you have additional details (e.g., the source for <code>AR201</code> or related database files), I can provide further analysis. Let me know if you need clarification or additional information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/","title":"AR201 OCL","text":"<p>The provided document, <code>AR201.ocl36.txt</code>, is an OCL (Operation Control Language) script used in an IBM AS/400 or iSeries environment, called from the main OCL script <code>AR201P.ocl36.txt</code>. It orchestrates the posting of accounts receivable (A/R) invoices and adjustments, including sorting transactions, updating files, generating journals, and producing reports. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#process-steps-of-the-ocl-program-ar201","title":"Process Steps of the OCL Program (AR201)","text":"<p>The <code>AR201.ocl36.txt</code> script automates the A/R transaction posting process, leveraging multiple programs and file operations. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Call Program <code>GSY2K</code>:</li> <li> <p>The line <code>// GSY2K</code> invokes the program <code>GSY2K</code>, likely a Year 2000 compliance utility to ensure proper date handling for the journal date (passed as <code>?9?</code> from the main OCL). This ensures dates are formatted correctly for downstream processing.</p> </li> <li> <p>Sort A/R Transactions (<code>#GSORT</code>):</p> </li> <li>Loads and runs the sort utility <code>#GSORT</code> to sort the A/R transaction file:<ul> <li>Input File: <code>?9?ARTRGG</code> (likely a temporary transaction file, e.g., <code>GGARTRGG</code> if <code>?9? = 'GG'</code>).</li> <li>Output File: <code>?9?AR201S</code> (sorted transaction file, e.g., <code>GGAR201S</code>), with 999,000 records, extendable by 999,000, retained as a job file (<code>RETAIN-J</code>).</li> <li>Sort Specifications (<code>HSORTR</code>):</li> <li>Sort by:<ul> <li><code>CE</code> (Customer Code, position 1) in ascending order (<code>A</code>), not equal to blank (<code>NECD</code>).</li> <li><code>CE</code> (likely another code, position 54) in ascending order, not equal to blank (<code>NECE</code>).</li> <li><code>TRCO</code> (Company Code, positions 7\u20138).</li> <li><code>TRICCD</code> (Invoice/Credit Code, positions 191\u2013192).</li> <li><code>TRTYPE</code> (Transaction Type, position 31).</li> <li><code>TRCUST/TRINV#</code> (Customer Number/Invoice Number, positions 9\u201321).</li> </ul> </li> <li>Includes the entire record (positions 1\u2013256) in the output (<code>FDC 1 256</code>).</li> </ul> </li> <li> <p>Purpose: Organizes transactions for efficient processing by customer, company, and transaction details.</p> </li> <li> <p>Post Transactions and Generate Register (<code>AR200</code>):</p> </li> <li>Loads and runs the program <code>AR200</code> to post A/R transactions and produce a transaction register:<ul> <li>Input Files:</li> <li><code>ARTRAN</code>: Sorted transaction file (<code>?9?AR201S</code>).</li> <li><code>ARCUST</code>: Customer master file (<code>?9?ARCUST</code>), shared access (<code>DISP-SHR</code>).</li> <li><code>ARDETL</code>: A/R detail file (<code>?9?ARDETL</code>), shared access.</li> <li><code>ARHIST</code>: A/R history file (<code>?9?ARHIST</code>), shared access.</li> <li><code>ARCONT</code>: A/R control file (<code>?9?ARCONT</code>), shared access.</li> <li>Output File:</li> <li><code>ARDIST</code>: Distribution file (<code>?9?ARDIGG</code>), 999,000 records, extendable by 100, retained as a job file.</li> <li>Printers:</li> <li><code>REPORTP1</code>: Device <code>P1</code>, priority 0.</li> <li><code>REPORTP4</code>: Device <code>P3</code>, priority 0.</li> <li>Conditional Output Queue:</li> <li>If <code>?9? = 'G'</code>, overrides printer file <code>REPORT</code> to output queue <code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Purpose: Updates customer balances, records transaction history, and generates a transaction register report.</p> </li> <li> <p>Generate S/J or C/R Journal (<code>AR210</code>):</p> </li> <li>Loads and runs the program <code>AR210</code> to create a sales journal (S/J) or cash receipts journal (C/R):<ul> <li>Input Files:</li> <li><code>ARDIST</code>: Distribution file (<code>?9?ARDIGG</code>) from <code>AR200</code>.</li> <li><code>ARCONT</code>: A/R control file, shared access.</li> <li>Output File:</li> <li><code>ARTEMG</code>: Temporary general ledger file (<code>?9?ARTGGG</code>), 999,000 records, extendable by 100, retained as a job file.</li> </ul> </li> <li> <p>Purpose: Prepares journal entries for general ledger integration based on A/R distributions.</p> </li> <li> <p>Sort Journal Entries (<code>#GSORT</code>):</p> </li> <li>Loads and runs <code>#GSORT</code> again to sort the temporary general ledger file:<ul> <li>Input File: <code>?9?ARTGGG</code>.</li> <li>Output File: <code>?9?AR211S</code>, 1,000 records, extendable by 100, retained as a job file.</li> <li>Sort Specifications (<code>HSORTA</code>):</li> <li>Sort by:<ul> <li><code>GDCO</code> (Company Code, positions 2\u20133).</li> <li><code>JRNL/REF</code> (Journal/Reference, positions 4\u20137).</li> <li><code>S</code> (Summarize flag, position 96).</li> <li><code>ACCOUNT #</code> (Account Number, positions 13\u201320).</li> <li><code>CR/DB CODE</code> (Credit/Debit Code, position 12).</li> </ul> </li> </ul> </li> <li> <p>Purpose: Organizes journal entries for posting to the general ledger.</p> </li> <li> <p>Create Daily File if Needed:</p> </li> <li>The line <code>// IFF DATAF1-?9?ARDALY BLDFILE ?9?ARDALY,S,RECORDS,1000,96,,T,,,DFILE</code> checks if the daily file <code>?9?ARDALY</code> exists on unit <code>F1</code>. If not, it creates it with 1,000 records, 96 bytes each, as a temporary file (<code>T</code>).</li> <li> <p>Purpose: Ensures a daily transaction file is available for general ledger posting.</p> </li> <li> <p>Post to General Ledger (<code>AR211</code>):</p> </li> <li>Loads and runs the program <code>AR211</code> to post journal entries to the general ledger:<ul> <li>Input Files:</li> <li><code>ARTEMG</code>: Temporary general ledger file (<code>?9?ARTGGG</code>).</li> <li><code>AR211S</code>: Sorted journal file (<code>?9?AR211S</code>).</li> <li><code>TEMGEN</code>: General ledger temporary file (<code>?9?TEMGEN</code>), shared access.</li> <li><code>ARCONT</code>: A/R control file, shared access.</li> <li><code>GLMAST</code>: General ledger master file (<code>?9?GLMAST</code>), shared access.</li> <li><code>ARDALY</code>: Daily transaction file (<code>?9?ARDALY</code>), shared access.</li> <li>Printers:</li> <li><code>PRINT</code>, <code>PRINTP1</code>: Device <code>P1</code>, priority 0.</li> <li>Conditional Output Queue:</li> <li>If <code>?9? = 'G'</code>, overrides printer file <code>REPORT</code> to <code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>.</li> </ul> </li> <li> <p>Purpose: Updates the general ledger with A/R journal entries and generates related reports.</p> </li> <li> <p>Clean Up Temporary File (<code>$DELET</code>):</p> </li> <li>Loads and runs <code>$DELET</code> to perform cleanup.</li> <li>Checks if the transaction file <code>?9?ARTRGG</code> exists on unit <code>F1</code> and, if so, deletes it using <code>SCRATCH</code>.</li> <li>Purpose: Removes temporary transaction file to free disk space.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Sorting:</li> <li>Transactions are sorted by customer code, company, invoice/credit code, transaction type, and customer/invoice number to ensure consistent processing order.</li> <li> <p>Journal entries are sorted by company, journal/reference, account number, and credit/debit code, with summarization for general ledger posting.</p> </li> <li> <p>File Sharing:</p> </li> <li> <p>Master files (<code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code>, <code>ARCONT</code>, <code>TEMGEN</code>, <code>GLMAST</code>, <code>ARDALY</code>) are accessed in shared mode (<code>DISP-SHR</code>) to allow concurrent access by other processes.</p> </li> <li> <p>Temporary Files:</p> </li> <li>Temporary files (<code>?9?AR201S</code>, <code>?9?ARDIGG</code>, <code>?9?ARTGGG</code>, <code>?9?AR211S</code>, <code>?9?ARDALY</code>) are created with large record capacities (e.g., 999,000) and retained as job files (<code>RETAIN-J</code>) to persist during the job\u2019s execution.</li> <li> <p>The transaction file <code>?9?ARTRGG</code> is deleted at the end to clean up.</p> </li> <li> <p>Output Queue Selection:</p> </li> <li> <p>If the parameter <code>?9? = 'G'</code>, reports are directed to specific output queues (<code>QUSRSYS/ARPOST</code> or <code>QUSRSYS/TESTOUTQ</code>), likely for production or testing environments.</p> </li> <li> <p>Daily File Creation:</p> </li> <li> <p>The daily file <code>?9?ARDALY</code> is created only if it doesn\u2019t exist, ensuring availability for general ledger updates.</p> </li> <li> <p>Journal Date Integration:</p> </li> <li>The parameter <code>?9?</code> (likely the journal date from <code>AR200P</code>) is embedded in file labels (e.g., <code>?9?ARTRGG</code>, <code>?9?AR201S</code>), ensuring all files are tied to the same posting period.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#tables-used","title":"Tables Used","text":"<p>The OCL script references the following files (tables): 1. Input Files:    - <code>?9?ARTRGG</code>: Temporary A/R transaction file (input to first sort).    - <code>?9?AR201S</code>: Sorted A/R transaction file (output from first sort, input to <code>AR200</code>).    - <code>?9?ARCUST</code>: A/R customer master file (shared).    - <code>?9?ARDETL</code>: A/R detail file (shared).    - <code>?9?ARHIST</code>: A/R history file (shared).    - <code>?9?ARCONT</code>: A/R control file (shared).    - <code>?9?ARDIGG</code>: A/R distribution file (output from <code>AR200</code>, input to <code>AR210</code>).    - <code>?9?ARTGGG</code>: Temporary general ledger file (output from <code>AR210</code>, input to second sort).    - <code>?9?AR211S</code>: Sorted general ledger file (output from second sort, input to <code>AR211</code>).    - <code>?9?TEMGEN</code>: General ledger temporary file (shared).    - <code>?9?GLMAST</code>: General ledger master file (shared).    - <code>?9?ARDALY</code>: Daily transaction file (shared, created if needed).</p> <ol> <li>Output Files:</li> <li><code>?9?AR201S</code>: Sorted transaction file.</li> <li><code>?9?ARDIGG</code>: A/R distribution file.</li> <li><code>?9?ARTGGG</code>: Temporary general ledger file.</li> <li><code>?9?AR211S</code>: Sorted general ledger file.</li> <li><code>?9?ARDALY</code>: Daily transaction file (if created).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following programs: 1. GSY2K: Year 2000 compliance utility for date handling. 2. #GSORT: Sort utility, called twice for sorting transactions and journal entries. 3. AR200: Posts A/R transactions and generates a transaction register. 4. AR210: Generates sales or cash receipts journal entries. 5. AR211: Posts journal entries to the general ledger. 6. $DELET: Deletes the temporary transaction file <code>?9?ARTRGG</code>.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR201%20OCL/#notes","title":"Notes","text":"<ul> <li>Parameter <code>?9?</code>: Likely the journal date or a prefix (e.g., <code>GG</code> as noted in the comment about Atrium compatibility), used consistently in file labels to tie files to the posting period.</li> <li>Atrium Compatibility: The comment indicates a change to use <code>GG</code> as the workstation ID (<code>?WS?</code>) to support running in the Atrium environment.</li> <li>File Retention: Temporary files are marked <code>RETAIN-J</code> to persist during the job, except for <code>?9?ARTRGG</code>, which is deleted at the end.</li> <li>Output Queues: Conditional overrides suggest support for production (<code>ARPOST</code>) and testing (<code>TESTOUTQ</code>) environments.</li> </ul> <p>If you have additional details (e.g., source code for <code>AR200</code>, <code>AR210</code>, or <code>AR211</code>, or specific file layouts), I can provide a deeper analysis. Let me know if you need further clarification or additional information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/","title":"AR210 RPG36","text":"<p>The provided document, <code>AR210.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. Its primary function is to create journal entries for accounts receivable (A/R) transactions (invoices, adjustments, payments, and miscellaneous amounts) in the temporary general ledger file (<code>ARTEMG</code>) for further processing by the general ledger system. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#process-steps-of-the-rpg-program-ar210","title":"Process Steps of the RPG Program (AR210)","text":"<p>The <code>AR210</code> program processes records from the A/R distribution file (<code>ARDIST</code>), generates debit and credit journal entries for the temporary general ledger file (<code>ARTEMG</code>), and handles discounts and inter-company transactions. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARDIST</code> (primary input, 161 bytes), <code>ARCONT</code> (A/R control, 256 bytes, keyed by company, shared access).</li> <li>Output: <code>ARTEMG</code> (temporary general ledger file, 128 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure with fields for user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), sales journal number (<code>SJ##</code>), ledger retention flag (<code>LDRETL</code>), and Y2K variables (<code>Y2KCEN</code> = 19, <code>Y2KCMP</code> = 80).</li> </ul> </li> <li> <p>Initial Setup:</p> <ul> <li>Clears discount amount (<code>DISAMT</code>) and indicator <code>82</code> (discount &lt; 0).</li> <li>Executes one-time setup (<code>ONETIM</code>) if not already done (<code>N98</code>).</li> </ul> </li> <li> <p>One-Time Setup (<code>ONETIM</code>):</p> </li> <li>Captures system time (<code>TIMEOF</code>).</li> <li>Chains to <code>ARCONT</code> using company code (<code>ADCO</code>) to retrieve control data (e.g., <code>ACTRGL</code>, G/L account for inter-company transactions).</li> <li>Sets transaction type indicators:<ul> <li><code>01</code> (invoice): Sets <code>61</code>.</li> <li><code>02</code> (adjustment): Sets <code>61</code>.</li> <li><code>03</code> (payment): Sets <code>63</code>.</li> </ul> </li> <li> <p>Sets indicator <code>98</code> to mark setup completion.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARDIST</code> records sequentially, identified by record type:<ul> <li><code>01</code> (invoice, <code>CI</code>).</li> <li><code>02</code> (adjustment, <code>CJ</code>).</li> <li><code>03</code> (payment, <code>CP</code>).</li> </ul> </li> <li>Adjusts transaction amount (<code>ADAMT</code>):<ul> <li>If miscellaneous amount exists (<code>86</code>) and not zero (<code>N16</code>), subtracts <code>ADMISC</code> from <code>ADAMT</code> (sets <code>81</code> if negative).</li> <li>If miscellaneous and zero amount (<code>16</code>, <code>86</code>), sets <code>ADAMT</code> to <code>ADMISC</code> (sets <code>81</code> if negative).</li> </ul> </li> <li> <p>Handles discount amount:</p> <ul> <li>If discount exists (<code>51</code>), sets <code>DISAMT</code> to <code>ADDISC</code>.</li> <li>If <code>DISAMT</code> is negative (<code>82</code>), multiplies by -1 to make positive.</li> </ul> </li> <li> <p>Transaction Processing:</p> </li> <li>Case Selection:<ul> <li>If amount is non-negative (<code>N81</code>), executes <code>CASE01</code> (standard debit/credit entries).</li> <li>If amount is negative (<code>81</code>), executes <code>CASE02</code> (reversed debit/credit entries).</li> <li>If company codes differ (<code>ADCODR \u2260 ADCO</code> or <code>ADCOCR \u2260 ADCO</code>, indicator <code>54</code>), executes <code>CASE03</code> (inter-company entries) and adjusts <code>ADAMT</code> if negative.</li> </ul> </li> <li> <p>Discount Processing:</p> <ul> <li>If discount exists (<code>51</code>), sets <code>ADCODR</code> to <code>ADCODI</code> (cash invoice company) and executes <code>GLDISC</code> to create a discount journal entry.</li> <li>Adds <code>DISAMT</code> to debit total (<code>DBTOT</code>, if <code>N82</code>) or credit total (<code>CRTOT</code>, if <code>82</code>).</li> </ul> </li> <li> <p>Standard Entries (<code>CASE01</code>):</p> </li> <li>For payments (<code>63</code>):<ul> <li>If discount non-negative (<code>N82</code>), debit amount = <code>ADAMT - DISAMT</code>.</li> <li>If discount negative (<code>82</code>), debit amount = <code>ADAMT + DISAMT</code>.</li> </ul> </li> <li>For invoices/adjustments (<code>N63</code>), debit amount = <code>ADAMT</code>.</li> <li>Writes debit entry to <code>ARTEMG</code>:<ul> <li>Company: <code>DRCO</code> (<code>ADCODR</code>).</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>D</code> (debit).</li> <li>Account: <code>DRACCT</code> (<code>ADGLDR</code>).</li> <li>Customer: <code>ADNAME</code>.</li> <li>Invoice: <code>ADINV#</code>.</li> <li>Date: <code>ADJRDT</code>.</li> <li>Amount: <code>DRAMT</code>.</li> <li>Description: <code>ADDESC</code>.</li> </ul> </li> <li>Sets indicator <code>30</code>, writes, then clears <code>30</code>.</li> <li>Adds <code>DRAMT</code> to <code>DBTOT</code>.</li> <li> <p>Writes credit entry:</p> <ul> <li>Company: <code>CRCO</code> (<code>ADCOCR</code>).</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>C</code> (credit).</li> <li>Account: <code>CRACCT</code> (<code>ADGLCR</code>).</li> <li>Amount: <code>CRAMT</code> (<code>ADAMT</code>).</li> <li>Sets indicator <code>31</code>, writes, then clears <code>31</code>.</li> <li>Adds <code>CRAMT</code> to <code>CRTOT</code>.</li> </ul> </li> <li> <p>Negative Amount Entries (<code>CASE02</code>):</p> </li> <li>Writes debit entry:<ul> <li>Amount: <code>DRAMT</code> = <code>-ADAMT</code>.</li> <li>Account: <code>DRACCT</code> (<code>ADGLCR</code>).</li> <li>Company: <code>DRCO</code> (<code>ADCOCR</code>).</li> <li>Type: <code>D</code>.</li> <li>Sets indicator <code>32</code>, writes, then clears <code>32</code>.</li> <li>Adds <code>DRAMT</code> to <code>DBTOT</code>.</li> </ul> </li> <li> <p>Writes credit entry:</p> <ul> <li>For payments (<code>63</code>):</li> <li>If discount non-negative (<code>N82</code>), <code>CRAMT</code> = <code>-ADAMT + DISAMT</code>.</li> <li>If discount negative (<code>82</code>), <code>CRAMT</code> = <code>-ADAMT - DISAMT</code>.</li> <li>For invoices/adjustments (<code>N63</code>), <code>CRAMT</code> = <code>-ADAMT</code>.</li> <li>Account: <code>CRACCT</code> (<code>ADGLDR</code>).</li> <li>Company: <code>CRCO</code> (<code>ADCODR</code>).</li> <li>Type: <code>C</code>.</li> <li>Sets indicator <code>33</code>, writes, then clears <code>33</code>.</li> <li>Adds <code>CRAMT</code> to <code>CRTOT</code>.</li> </ul> </li> <li> <p>Inter-Company Entries (<code>CASE03</code>):</p> </li> <li> <p>Writes two entries to <code>ARTEMG</code>:</p> <ul> <li>Credit Entry:</li> <li>Amount: <code>ICRAMT</code> = <code>ADAMT \u00b1 DISAMT</code> (subtract if <code>N82</code>, add if <code>82</code>).</li> <li>Company: <code>ICRCO</code> (<code>ADCODR</code>).</li> <li>Account: <code>ICRGL8</code> (<code>ACTRGL</code> + <code>ADCOCR</code>).</li> <li>Type: <code>C</code> if <code>N81</code>, <code>D</code> if <code>81</code>.</li> <li>Debit Entry:</li> <li>Amount: <code>IDRAMT</code> = <code>ADAMT \u00b1 DISAMT</code>.</li> <li>Company: <code>IDRCO</code> (<code>ADCOCR</code>).</li> <li>Account: <code>IDRGL8</code> (<code>ACTRGL</code> + <code>ADCODR</code>).</li> <li>Type: <code>D</code> if <code>N81</code>, <code>C</code> if <code>81</code>.</li> <li>Both entries include <code>ADJRNL</code>, <code>ADNAME</code>, <code>ADINV#</code>, <code>ADJRDT</code>, <code>ADDESC</code>.</li> <li>Sets indicator <code>34</code>, writes, then clears <code>34</code>.</li> </ul> </li> <li> <p>Discount Entry (<code>GLDISC</code>):</p> </li> <li>Writes discount entry to <code>ARTEMG</code>:<ul> <li>Company: <code>ADCODI</code>.</li> <li>Journal: <code>ADJRNL</code>.</li> <li>Type: <code>D</code> if <code>N82</code>, <code>C</code> if <code>82</code>.</li> <li>Account: <code>ADGLDI</code>.</li> <li>Amount: <code>DISC11</code> (<code>DISAMT</code>).</li> <li>Customer: <code>ADNAME</code>.</li> <li>Invoice: <code>ADINV#</code>.</li> <li>Date: <code>ADJRDT</code>.</li> <li>Description: <code>ADDESC</code>.</li> </ul> </li> <li>Sets indicator <code>35</code>, writes, then clears <code>35</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices (<code>01</code>, <code>CI</code>) and adjustments (<code>02</code>, <code>CJ</code>): Generate debit (<code>ADGLDR</code>) and credit (<code>ADGLCR</code>) entries.</li> <li>Payments (<code>03</code>, <code>CP</code>): Generate debit and credit entries, adjusted for discounts.</li> <li> <p>Miscellaneous amounts (<code>86</code>): Adjust <code>ADAMT</code> by subtracting <code>ADMISC</code> (if non-zero) or setting to <code>ADMISC</code> (if zero).</p> </li> <li> <p>Discount Handling:</p> </li> <li>Discounts (<code>ADDISC</code>, indicator <code>51</code>) are recorded as separate entries with <code>ADCODI</code> (company) and <code>ADGLDI</code> (account).</li> <li>Negative discounts (<code>82</code>) are converted to positive for journal entries.</li> <li> <p>Discounts adjust debit/credit amounts in payment entries.</p> </li> <li> <p>Inter-Company Transactions:</p> </li> <li>If company codes differ (<code>ADCODR \u2260 ADCO</code> or <code>ADCOCR \u2260 ADCO</code>, <code>54</code>), generates entries using inter-company G/L account (<code>ACTRGL</code>) from <code>ARCONT</code>.</li> <li> <p>Debit and credit types are swapped based on amount sign (<code>81</code>).</p> </li> <li> <p>Amount Sign Handling:</p> </li> <li>Positive amounts (<code>N81</code>): Standard debit/credit entries.</li> <li> <p>Negative amounts (<code>81</code>): Reverses debit/credit accounts and adjusts amounts.</p> </li> <li> <p>Journal Entry Structure:</p> </li> <li>Entries include company, journal number, debit/credit type, G/L account, customer name, invoice number, journal date, amount, and description.</li> <li> <p>Description field (<code>ADDESC</code>) retains full 25 characters from cash receipts, with date moved to the second description field in <code>ARTEMG</code> (per 4/20/05 change).</p> </li> <li> <p>Accumulation:</p> </li> <li> <p>Tracks debit (<code>DBTOT</code>) and credit (<code>CRTOT</code>) totals for balancing.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li>Uses <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80) for date handling, though no explicit date conversion occurs in this program (dates are pre-converted in <code>AR200</code>).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARDIST</code> (F-spec 0007): A/R distribution file (161 bytes, primary input) from <code>AR200</code> (<code>?9?ARDIGG</code>).    - <code>ARCONT</code> (0009): A/R control file (256 bytes, input mode, keyed by company, shared access).</p> <ol> <li>Output Files:</li> <li> <p><code>ARTEMG</code> (0008): Temporary general ledger file (128 bytes, output mode) for journal entries (<code>?9?ARTGGG</code>).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li>None defined.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>ONETIM</code>: One-time setup for system time and control file access. - <code>CASE01</code>: Processes standard debit/credit entries for non-negative amounts. - <code>CASE02</code>: Processes reversed debit/credit entries for negative amounts. - <code>CASE03</code>: Handles inter-company entries. - <code>GLDISC</code>: Creates discount journal entries.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR210%20RPG36/#notes","title":"Notes","text":"<ul> <li>Modification (4/20/05): Enhanced description field handling to retain 25 characters from cash receipts, with the date moved to the second description field in <code>ARTEMG</code>.</li> <li>Indicators:</li> <li><code>16</code>: Zero amount.</li> <li><code>51</code>: Non-zero discount.</li> <li><code>52</code>: Non-zero G/L credit account.</li> <li><code>53</code>: Non-zero G/L debit account.</li> <li><code>61</code>: Invoice or adjustment.</li> <li><code>63</code>: Payment.</li> <li><code>81</code>: Negative amount.</li> <li><code>82</code>: Negative discount.</li> <li><code>86</code>: Non-zero miscellaneous amount.</li> <li>File Access: <code>ARCONT</code> is shared (<code>DISP-SHR</code>) for concurrent access.</li> <li>Output: <code>ARTEMG</code> entries are formatted for sorting and posting by <code>AR211</code>.</li> </ul> <p>If you have additional details (e.g., source for <code>AR211</code> or file layouts), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/","title":"AR211 RPG36","text":"<p>The provided document, <code>AR211.rpg36.txt</code>, is an RPG III program used in an IBM AS/400 or iSeries environment, called by the OCL script <code>AR201.ocl36.txt</code>. Its primary function is to process sorted journal entries from the temporary general ledger file (<code>ARTEMG</code> and <code>AR211S</code>), summarize them by account number if required, post them to the general ledger temporary file (<code>TEMGEN</code>) and daily transaction file (<code>ARDALY</code>), and print sales and cash receipts journals. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#process-steps-of-the-rpg-program-ar211","title":"Process Steps of the RPG Program (AR211)","text":"<p>The <code>AR211</code> program processes journal entries, accumulates totals, and generates reports for sales (<code>SJ</code>) and cash receipts (<code>CR</code>) journals. Here\u2019s a step-by-step breakdown:</p> <ol> <li>Program Initialization:</li> <li>Files Defined:<ul> <li>Input: <code>ARTEMG</code> (primary input, 128 bytes), <code>AR211S</code> (sorted journal entries, 300 bytes, indexed), <code>GLMAST</code> (G/L master, 256 bytes, keyed, shared), <code>ARCONT</code> (A/R control, 256 bytes, keyed, shared).</li> <li>Output: <code>TEMGEN</code> (G/L temporary file, 128 bytes), <code>ARDALY</code> (daily transaction file, 96 bytes), <code>REPORT</code> (primary journal report, 132 bytes), <code>REPORTP</code> (Indianola copy, 132 bytes).</li> </ul> </li> <li>Data Structures:<ul> <li><code>UDS</code>: User data structure with journal date (<code>JRNLDT</code>), user ID (<code>USERID</code>), workstation ID (<code>WSID</code>), ledger journal type (<code>LDJTYP</code>), journal number (<code>LDJRN#</code>), ledger retention flag (<code>LDRETL</code>), and Y2K variables (<code>Y2KCEN</code> = 19, <code>Y2KCMP</code> = 80).</li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ul> </li> <li> <p>Subroutines:</p> <ul> <li><code>L4DET</code>: Initializes for each journal date/month.</li> <li><code>JRNL</code>: Writes journal entries.</li> <li><code>L4TOT</code>: Writes journal totals.</li> </ul> </li> <li> <p>Detail Processing (<code>L4DET</code>):</p> </li> <li>Executes at level break <code>L4</code> (change in journal year <code>GDYR</code> or month <code>GDMO</code>).</li> <li>Captures system time (<code>TIMEOF</code>) and date (<code>TIMDAT</code>), converts to YMD format (<code>SYSDT8</code>, CCYYMMDD).</li> <li>Resets page counter (<code>PAGE</code>) to 0.</li> <li>Applies Y2K compliance to journal year (<code>GDYY</code>):<ul> <li>If <code>GDYY &gt;= Y2KCMP (80)</code>, sets century (<code>GCN</code>) to <code>Y2KCEN (19)</code>; otherwise, increments <code>Y2KCEN</code> by 1.</li> </ul> </li> <li>Chains to <code>ARCONT</code> using company code (<code>GDCO</code>) to retrieve control data (e.g., <code>ACARJ#</code>, <code>ACSLJ#</code>, G/L accounts).</li> <li>Sets journal type (<code>JRNTYP</code>) and number (<code>JRN#</code>) based on <code>GDJTYP</code> (<code>SJ</code> or <code>CR</code>) and <code>GDJRN#</code>.</li> <li>Sets indicators <code>61</code> (sales journal) or <code>63</code> (cash receipts journal).</li> <li>Writes report header (indicator <code>11</code>), clears <code>11</code>.</li> <li> <p>Resets level 4 totals (<code>L4CR$</code>, <code>L4DB$</code>) to 0.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>Processes <code>ARTEMG</code> records sequentially, with level breaks:<ul> <li>L6 (Company Change): Not explicitly handled but triggers <code>L4</code>.</li> <li>L5 (Journal Type/Number Change): Not explicitly handled but triggers <code>L4</code>.</li> <li>L4 (Year/Month Change): Executes <code>L4DET</code> and <code>L4TOT</code>.</li> <li>L3 (Summarization Flag Change): Checks if <code>GDSUMM = 'S'</code> (indicator <code>20</code> for summarized entries).</li> <li>L2 (Account Change): Resets level 2 totals (<code>L2CR$</code>, <code>L2DB$</code>, <code>L2TOT$</code>).</li> <li>L1 (Detail Record): Accumulates amount (<code>GDAMT</code>) to <code>L1TOT$</code>.</li> </ul> </li> <li> <p>Converts journal date (<code>GDDATE</code>) to YMD format (<code>CYMD</code>, CCYYMMDD) with Y2K compliance.</p> </li> <li> <p>Non-Summarized Entries (<code>N20</code>):</p> </li> <li>Checks if entry is credit (<code>GDCRDB = 'C'</code>, indicator <code>15</code>).</li> <li>Adds <code>L1TOT$</code> to <code>L2CR$</code> (credit) or <code>L2DB$</code> (debit).</li> <li>Executes <code>JRNL</code> to write the entry.</li> <li> <p>Resets <code>L1TOT$</code>, <code>L2CR$</code>, <code>L2DB$</code>, <code>L2TOT$</code>.</p> </li> <li> <p>Summarized Entries (<code>20</code>):</p> </li> <li>At <code>L1</code>, accumulates <code>L1TOT$</code> to <code>L2CR$</code> (credit, <code>15</code>) or <code>L2DB$</code> (debit, <code>N15</code>).</li> <li> <p>At <code>L2</code>, executes <code>JRNL</code> to write summarized entry.</p> </li> <li> <p>Journal Entry Writing (<code>JRNL</code>):</p> </li> <li>Builds G/L key (<code>KEY11 = GDCO + GDACCT + 'C'</code>) and chains to <code>GLMAST</code> to retrieve account description (<code>GLDESC</code>).</li> <li>Calculates net total (<code>L2TOT$ = L2CR$ - L2DB$</code> if <code>15</code>, or <code>L2DB$ - L2CR$</code> if <code>N15</code>).</li> <li>If non-zero (<code>N40</code>), increments journal sequence (<code>JRNSEQ</code>) and writes to <code>TEMGEN</code> and <code>ARDALY</code> (indicator <code>WRITIT</code>).</li> <li> <p>Adds <code>L2TOT$</code> to <code>L4CR$</code> (credit) or <code>L4DB$</code> (debit).</p> </li> <li> <p>Totals Processing (<code>L4TOT</code>):</p> </li> <li>If records were read (<code>GDCO \u2260 0</code>) and no entries written (<code>JRNSEQ = 0</code>), increments <code>JRNSEQ</code> and writes a journal entry.</li> <li> <p>Writes journal totals to <code>REPORT</code> and <code>REPORTP</code> with <code>L4DB$</code> and <code>L4CR$</code>.</p> </li> <li> <p>Output Operations:</p> </li> <li>TEMGEN: Writes G/L entries with company (<code>GDCO</code>), account (<code>GDACCT</code>), journal type (<code>JRNTYP</code>), number (<code>JRN#</code>), sequence (<code>JRNSEQ</code>), debit/credit type, description, date, and amount (<code>L2TOT$</code>).</li> <li>ARDALY: Writes daily transactions with similar fields.</li> <li>REPORT/REPORTP: Prints sales or cash receipts journal with headers (company, date, time, user ID, journal type), detail lines (journal number, date, description, debit/credit amounts), and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Types:</li> <li>Sales Journal (<code>SJ</code>, indicator <code>61</code>): Processes invoices and adjustments.</li> <li>Cash Receipts Journal (<code>CR</code>, indicator <code>63</code>): Processes payments and miscellaneous cash.</li> <li> <p>Determined by <code>GDJTYP</code> from <code>ARTEMG</code>.</p> </li> <li> <p>Summarization:</p> </li> <li>If <code>GDSUMM = 'S'</code> (<code>20</code>), accumulates amounts by account (<code>GDACCT</code>) at <code>L2</code> and writes a single entry.</li> <li> <p>If <code>N20</code>, writes individual entries without summarization.</p> </li> <li> <p>Debit/Credit Handling:</p> </li> <li>Credit entries (<code>GDCRDB = 'C'</code>, <code>15</code>): Accumulate to <code>L2CR$</code>, <code>L4CR$</code>.</li> <li>Debit entries (<code>N15</code>): Accumulate to <code>L2DB$</code>, <code>L4DB$</code>.</li> <li> <p>Net total (<code>L2TOT$</code>) determines if entry is written (<code>N40</code>).</p> </li> <li> <p>Y2K Compliance:</p> </li> <li> <p>Converts journal date (<code>GDDATE</code>) to CCYYMMDD format (<code>CYMD</code>) using <code>Y2KCEN</code> (19) and <code>Y2KCMP</code> (80).</p> </li> <li> <p>G/L Validation:</p> </li> <li> <p>Chains to <code>GLMAST</code> to retrieve account description (<code>GLDESC</code>) for reporting.</p> </li> <li> <p>Journal Sequence:</p> </li> <li> <p>Increments <code>JRNSEQ</code> for each non-zero entry or at totals if no entries were written.</p> </li> <li> <p>Reporting:</p> </li> <li>Produces two journal reports (<code>REPORT</code>, <code>REPORTP</code>) with headers, detail lines (journal number, date, G/L account, description, debit/credit amounts), and totals.</li> <li> <p>Includes company name (<code>ACNAME</code>), user ID, workstation ID, and system date/time.</p> </li> <li> <p>ARCONT Update (Removed):</p> </li> <li> <p>Per 8/06/14 change, <code>ARCONT</code> is no longer updated (previously updated journal numbers <code>ACARJ#</code>, <code>ACSLJ#</code>).</p> </li> <li> <p>Description Handling:</p> </li> <li>Per 4/20/05 change, retains full 25-character description (<code>GDDESC</code>) from cash receipts, with date in the second description field in <code>TEMGEN</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#tables-used","title":"Tables Used","text":"<p>The program uses the following files (tables): 1. Input Files:    - <code>ARTEMG</code> (F-spec 0009): Temporary general ledger file (128 bytes, primary input) from <code>AR210</code> (<code>?9?ARTGGG</code>).    - <code>AR211S</code> (0010): Sorted journal entries (300 bytes, indexed, extension of <code>ARTEMG</code>, <code>?9?AR211S</code>).    - <code>GLMAST</code> (0011): General ledger master file (256 bytes, keyed by company/account, shared access, <code>?9?GLMAST</code>).    - <code>ARCONT</code> (0014): A/R control file (256 bytes, keyed by company, shared access, <code>?9?ARCONT</code>).</p> <ol> <li>Output Files:</li> <li><code>TEMGEN</code> (0012): General ledger temporary file (128 bytes, <code>?9?TEMGEN</code>).</li> <li><code>ARDALY</code> (0013): Daily transaction file (96 bytes, <code>?9?ARDALY</code>).</li> <li><code>REPORT</code> (0015): Primary journal report (132 bytes, printer file).</li> <li> <p><code>REPORTP</code> (0016): Indianola copy of journal report (132 bytes, printer file).</p> </li> <li> <p>Compile-Time Data:</p> </li> <li><code>MN</code>: Month names array (January\u2013December) for report formatting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The program does not explicitly call external programs using <code>CALL</code> operations. All processing is handled internally via subroutines: - <code>L4DET</code>: Initializes for journal date/month changes. - <code>JRNL</code>: Writes journal entries to <code>TEMGEN</code> and <code>ARDALY</code>. - <code>L4TOT</code>: Writes journal totals.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/AR211%20RPG36/#notes","title":"Notes","text":"<ul> <li>Modifications:</li> <li>4/20/05: Enhanced description field handling to retain 25 characters from cash receipts, with date in second description field in <code>TEMGEN</code>.</li> <li>8/06/14: Removed <code>ARCONT</code> updates and changed printer names for paperless reporting, with output still printing in Bradford.</li> <li>Indicators:</li> <li><code>61</code>: Sales journal.</li> <li><code>63</code>: Cash receipts journal.</li> <li><code>15</code>: Credit entry.</li> <li><code>20</code>: Summarized entry.</li> <li><code>40</code>: Non-zero net total.</li> <li>File Access: <code>GLMAST</code> and <code>ARCONT</code> are shared (<code>DISP-SHR</code>) for concurrent access.</li> <li>Output: Reports are formatted for clarity, with separate sections for sales and cash receipts journals.</li> </ul> <p>If you have additional details (e.g., file layouts or related programs), I can provide further analysis. Let me know if you need clarification or more information!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/","title":"Summary AR201 OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#list-of-use-cases-implemented-by-the-ar201-call-stack","title":"List of Use Cases Implemented by the AR201 Call Stack","text":"<p>The call stack (<code>AR201.ocl36.txt</code>, <code>AR200.rpg36.txt</code>, <code>AR210.rpg36.txt</code>, <code>AR211.rpg36.txt</code>) implements a single primary use case in the IBM AS/400 or iSeries environment:</p> <ol> <li>Accounts Receivable (A/R) Transaction Posting and Journal Entry Generation:</li> <li>This use case processes A/R transactions (invoices, adjustments, payments, and miscellaneous cash) from a sorted transaction file, updates customer and A/R detail files, generates journal entries for the general ledger, and produces sales and cash receipts journals along with a transaction posting register.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#ar-transaction-posting-and-journal-entry-generation","title":"A/R Transaction Posting and Journal Entry Generation","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#overview","title":"Overview","text":"<p>This function processes accounts receivable transactions (invoices, adjustments, payments, miscellaneous cash) to update customer balances, A/R details, and history, generate general ledger journal entries, and produce sales/cash receipts journals and a transaction posting register.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Transaction File (ARTRAN): Sorted records with company code, customer number, invoice number, transaction type (I=invoice, J=adjustment, P=payment), amount, discount, G/L accounts, dates, and description.</li> <li>Customer Master (ARCUST): Customer data including balances, payment info, and aged amounts.</li> <li>A/R Detail (ARDETL): Invoice-level details with payment and adjustment history.</li> <li>A/R Control (ARCONT): Company-level control data (journal numbers, G/L accounts).</li> <li>G/L Master (GLMAST): G/L account descriptions.</li> <li>System Parameters: Journal date, user ID, workstation ID, Y2K century settings.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>ARCUST</code>: Updated customer balances, payment info, aged amounts.</li> <li><code>ARDETL</code>: Updated or new invoice, adjustment, payment records.</li> <li><code>ARHIST</code>: Transaction history records.</li> <li><code>ARCONT</code>: Updated journal numbers (pre-8/06/14).</li> <li><code>TEMGEN</code>: G/L journal entries.</li> <li><code>ARDALY</code>: Daily transaction records.</li> <li>Reports:</li> <li>Transaction Posting Register (<code>REPORT</code>, <code>REPORTP</code>): Lists invoices, adjustments, payments, totals.</li> <li>Sales/Cash Receipts Journals (<code>REPORT</code>, <code>REPORTP</code>): Summarized or detailed journal entries.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Retrieve system date, time, user ID, workstation ID.</li> <li>Chain to <code>ARCONT</code> for journal numbers and G/L accounts.</li> <li> <p>Convert dates to CCYYMMDD format with Y2K compliance (century = 19 if year \u2265 80, else 20).</p> </li> <li> <p>Process Transactions:</p> </li> <li>Read <code>ARTRAN</code> records sequentially, grouped by company, transaction type.</li> <li>Determine transaction type:<ul> <li>Invoice (I): Update customer balances, A/R details, history; generate sales journal (SJ) entries.</li> <li>Adjustment (J): Adjust balances, details, history; generate SJ entries.</li> <li>Payment (P): Reduce balances, update payment info, details, history; generate cash receipts (CR) entries.</li> <li>COD Invoice (Y): Generate SJ entries, skip A/R updates.</li> <li>Miscellaneous Cash: Adjust finance charges or record as cash; generate CR entries.</li> </ul> </li> <li> <p>Skip A/R updates for inter-company customers (<code>ATICCD = 'IC'</code>), generate journal entries only.</p> </li> <li> <p>Update Files:</p> </li> <li>ARCUST: Update total due, aged balances, period totals (month-to-date, year-to-date), payment info.</li> <li>ARDETL: Add/update invoice, adjustment, payment, or prepaid records (sequence number, paid amount, sales).</li> <li>ARHIST: Log transaction details (except inter-company).</li> <li> <p>ARCONT: Increment journal numbers (<code>ACARJ#</code>, <code>ACSLJ#</code>) for payments, invoices/adjustments (pre-8/06/14).</p> </li> <li> <p>Generate Journal Entries:</p> </li> <li>Create debit/credit entries in <code>ARDIST</code> (from <code>AR200</code>):<ul> <li>Invoices/Adjustments: Debit A/R (<code>ADGLDR</code>), credit sales (<code>ADGLCR</code>).</li> <li>Payments: Debit cash (<code>ADGLCR</code>), credit A/R (<code>ADGLDR</code>).</li> <li>Discounts: Debit/credit discount account (<code>ADGLDI</code>).</li> <li>Inter-Company: Use inter-company G/L account (<code>ACTRGL</code>).</li> </ul> </li> <li>Process <code>ARDIST</code> to <code>ARTEMG</code> (from <code>AR210</code>):<ul> <li>Adjust amounts for miscellaneous cash, discounts.</li> <li>Handle negative amounts by reversing debit/credit.</li> <li>Write inter-company entries with swapped debit/credit types.</li> </ul> </li> <li> <p>Summarize entries in <code>TEMGEN</code>/<code>ARDALY</code> (from <code>AR211</code>):</p> <ul> <li>Summarize by account if <code>GDSUMM = 'S'</code>, else write individual entries.</li> <li>Include company, account, journal type, number, sequence, date, amount, description.</li> </ul> </li> <li> <p>Produce Reports:</p> </li> <li>Transaction Posting Register: List invoices, adjustments, payments, totals (net change, cash, discounts).</li> <li>Sales/Cash Receipts Journals: List journal entries (detailed or summarized) with G/L accounts, amounts, descriptions, and totals.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Transaction Types:</li> <li>Invoices/adjustments increase A/R balances, generate SJ entries.</li> <li>Payments reduce A/R balances, generate CR entries.</li> <li>COD invoices skip A/R updates, generate SJ entries.</li> <li> <p>Miscellaneous cash reduces finance charges or records as cash.</p> </li> <li> <p>Inter-Company:</p> </li> <li> <p>Skip <code>ARCUST</code>, <code>ARDETL</code>, <code>ARHIST</code> updates; generate journal entries with inter-company G/L account.</p> </li> <li> <p>Calculations:</p> </li> <li>Aged Balances: Update <code>AGE</code> array (5 periods) based on transaction date and amount.</li> <li>Net Change: <code>NETCHG = INVAMT + ADJAMT - TOTREC</code>.</li> <li>Payment Amount: <code>ATCASH = ATAMT - ATDISC</code> for payments.</li> <li> <p>Journal Entries:</p> <ul> <li>Standard: Debit A/R, credit sales/cash.</li> <li>Negative amounts: Reverse debit/credit accounts.</li> <li>Discounts: Separate entry with <code>ADGLDI</code>.</li> <li>Inter-Company: Use <code>ACTRGL</code> with swapped debit/credit based on amount sign.</li> </ul> </li> <li> <p>Date Handling:</p> </li> <li>Convert dates to CCYYMMDD using Y2K logic (century = 19 if year \u2265 80, else 20).</li> <li> <p>Compare invoice date to journal date if <code>LDRETL = 'R'</code> for discrepancy flagging.</p> </li> <li> <p>Summarization:</p> </li> <li> <p>Summarize journal entries by account if <code>GDSUMM = 'S'</code>; otherwise, write individual entries.</p> </li> <li> <p>Description:</p> </li> <li> <p>Retain 25-character description from cash receipts, with date in second field (per 4/20/05 change).</p> </li> <li> <p>Journal Numbers:</p> </li> <li>Increment <code>ACARJ#</code> (A/R journal) for payments, <code>ACSLJ#</code> (sales journal) for invoices/adjustments (pre-8/06/14).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input files are pre-sorted by company, transaction type.</li> <li>G/L accounts in <code>ARCONT</code>, <code>GLMAST</code> are valid.</li> <li>Shared file access (<code>DISP-SHR</code>) allows concurrent processing.</li> <li>No external program calls; all logic is internal via subroutines.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/","title":"Summary AR201P OCL","text":"<p>The provided call stack consists of three programs: <code>AR201P.ocl36.txt</code> (main OCL program), <code>AR200P.rpgle.txt</code> (RPGLE program for journal date input and validation), and <code>AR201.ocl36.txt</code> (OCL program for A/R transaction posting). Together, these programs implement a process for posting Accounts Receivable (A/R) transactions, including invoices and adjustments, to customer and general ledger files. Below, I\u2019ll identify the use case(s) implemented by this call stack and then provide a function requirement document for a non-interactive version of the process, assuming inputs are provided programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#use-cases-implemented","title":"Use Cases Implemented","text":"<p>The call stack implements a single primary use case: 1. Post A/R Transactions (Invoices and Adjustments):    - Description: This use case allows the system to accept a journal date, validate it, sort A/R transactions, post them to customer, detail, history, and distribution files, generate journal entries (sales or cash receipts), post to the general ledger, and produce reports (transaction register and general ledger posting reports).    - Scope: The process starts with user input for a journal date (<code>AR200P</code>), validates it, and proceeds to process transactions (<code>AR201</code>) based on the provided date, updating relevant files and generating reports.    - Inputs: Journal date (from user or system), A/R transaction data (from <code>?9?ARTRGG</code> file).    - Outputs: Updated customer, detail, history, distribution, and general ledger files; transaction register and general ledger posting reports.</p> <p>No additional distinct use cases are evident, as the programs focus on a single end-to-end process for A/R transaction posting.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":"<p>The following document reimagines the interactive A/R transaction posting process as a non-interactive function that accepts inputs programmatically and completes the process without screen interaction.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#ar-transaction-posting-function-requirements","title":"A/R Transaction Posting Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#overview","title":"Overview","text":"<p>The <code>PostARTransactions</code> function processes Accounts Receivable (A/R) transactions (invoices and adjustments) by validating a provided journal date, sorting transactions, posting them to customer and general ledger files, generating journal entries, and producing reports. The function operates non-interactively, receiving all inputs programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Journal Date: A 6-digit numeric value in <code>MMDDYY</code> format (e.g., 073025 for July 30, 2025).</li> <li>Environment Prefix: A 1-character code (e.g., 'G' for production, other for test) to determine output queue and file naming.</li> <li>Transaction File (<code>?prefix?ARTRGG</code>): A file containing A/R transactions with fields:</li> <li>Position 1: Record type (exclude 'C' or 'D').</li> <li>Position 54: Additional type (exclude 'C' or 'E').</li> <li>Positions 7\u20138: Company code (<code>TRCO</code>).</li> <li>Positions 191\u2013192: Invoice class code (<code>TRICCD</code>).</li> <li>Position 31: Transaction type (<code>TRTYPE</code>).</li> <li>Positions 9\u201321: Customer number and invoice number (<code>TRCUST/TRINV#</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Updated Files:</li> <li><code>?prefix?ARCUST</code>: Customer master file (balances, status).</li> <li><code>?prefix?ARDETL</code>: A/R detail file (transaction details).</li> <li><code>?prefix?ARHIST</code>: A/R history file (transaction records).</li> <li><code>?prefix?ARDIGG</code>: A/R distribution file (accounting distributions).</li> <li><code>?prefix?ARCONT</code>: A/R control file (control totals).</li> <li><code>?prefix?TEMGEN</code>: General ledger temporary file.</li> <li><code>?prefix?GLMAST</code>: General ledger master file (posted journal entries).</li> <li><code>?prefix?ARDALY</code> (optional): A/R daily file, if created.</li> <li>Reports:</li> <li>Transaction Register: Details of posted A/R transactions.</li> <li>General Ledger Posting Report: Summarizes journal entries.</li> <li>Temporary Files (Deleted Post-Process):</li> <li><code>?prefix?AR201S</code>: Sorted transaction file.</li> <li><code>?prefix?ARTGGG</code>: Temporary journal file.</li> <li><code>?prefix?AR211S</code>: Sorted journal file.</li> <li><code>?prefix?ARTRGG</code>: Input transaction file (scratched after processing).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Validate the environment prefix and set file labels using the prefix and journal date (e.g., <code>G073025ARTRGG</code>).</li> <li> <p>Ensure Y2K-compliant date handling for all operations.</p> </li> <li> <p>Validate Journal Date:</p> </li> <li> <p>Check that the input journal date is in <code>MMDDYY</code> format and valid:</p> <ul> <li>Month: 1\u201312.</li> <li>Day: \u2264 31 (or \u2264 30 for April, June, September, November; \u2264 28 or 29 for February, based on leap year).</li> <li>Leap Year Calculation:</li> <li>If year \u2260 00, year is divisible by 4.</li> <li>If year = 00, combine with century (e.g., <code>y2kcen</code>) and check if divisible by 400.</li> <li>If invalid, return error code with message \"INVALID DATE\" and abort.</li> </ul> </li> <li> <p>Sort A/R Transactions:</p> </li> <li>Read input file <code>?prefix?ARTRGG</code>.</li> <li>Filter records: Exclude where position 1 = 'C' or 'D' or position 54 = 'C' or 'E'.</li> <li>Sort by:<ul> <li>Company code (<code>TRCO</code>, positions 7\u20138).</li> <li>Invoice class code (<code>TRICCD</code>, positions 191\u2013192).</li> <li>Transaction type (<code>TRTYPE</code>, position 31).</li> <li>Customer/invoice number (<code>TRCUST/TRINV#</code>, positions 9\u201321).</li> </ul> </li> <li> <p>Output sorted records to <code>?prefix?AR201S</code>.</p> </li> <li> <p>Post A/R Transactions:</p> </li> <li>Process sorted transactions from <code>?prefix?AR201S</code>.</li> <li>Update:<ul> <li><code>?prefix?ARCUST</code>: Customer balances and status.</li> <li><code>?prefix?ARDETL</code>: Transaction details (e.g., invoice amounts, dates).</li> <li><code>?prefix?ARHIST</code>: Transaction history records.</li> <li><code>?prefix?ARDIGG</code>: Accounting distributions (e.g., debit/credit accounts).</li> <li><code>?prefix?ARCONT</code>: Control totals or parameters.</li> </ul> </li> <li> <p>Generate Transaction Register report, routed to:</p> <ul> <li><code>QUSRSYS/ARPOST</code> if prefix = 'G'.</li> <li><code>QUSRSYS/TESTOUTQ</code> otherwise.</li> </ul> </li> <li> <p>Generate Journal Entries:</p> </li> <li>Process <code>?prefix?ARDIGG</code> to create sales journal (S/J) or cash receipt (C/R) entries.</li> <li>Output journal entries to <code>?prefix?ARTGGG</code>.</li> <li> <p>Update <code>?prefix?ARCONT</code> with journal control data.</p> </li> <li> <p>Sort Journal Entries:</p> </li> <li>Read <code>?prefix?ARTGGG</code>.</li> <li>Sort by:<ul> <li>Company code (<code>GDCO</code>, positions 2\u20133).</li> <li>Journal/reference number (<code>JRNL/REF</code>, positions 4\u20137).</li> <li>Summary flag (position 96).</li> <li>Account number (positions 13\u201320).</li> <li>Credit/debit code (position 12).</li> </ul> </li> <li> <p>Output sorted entries to <code>?prefix?AR211S</code>.</p> </li> <li> <p>Post to General Ledger:</p> </li> <li>Process <code>?prefix?AR211S</code> and <code>?prefix?ARTGGG</code>.</li> <li>Update:<ul> <li><code>?prefix?TEMGEN</code>: Temporary general ledger entries.</li> <li><code>?prefix?GLMAST</code>: General ledger accounts (e.g., debits/credits).</li> <li><code>?prefix?ARDALY</code> (if exists): Daily A/R summary.</li> <li><code>?prefix?ARCONT</code>: Control totals.</li> </ul> </li> <li> <p>Generate General Ledger Posting Report, routed as per step 4.</p> </li> <li> <p>Cleanup:</p> </li> <li>Delete temporary files (<code>?prefix?ARTRGG</code>, <code>?prefix?AR201S</code>, <code>?prefix?ARTGGG</code>, <code>?prefix?AR211S</code>).</li> <li>If <code>?prefix?ARDALY</code> exists, create it with 1,000 records (96 bytes each) before general ledger posting.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Journal Date Validation:</li> <li>Must be a valid date in <code>MMDDYY</code> format.</li> <li> <p>Invalid dates abort the process with an error message.</p> </li> <li> <p>Transaction Filtering:</p> </li> <li> <p>Exclude records where position 1 = 'C' or 'D' or position 54 = 'C' or 'E' to ensure only valid A/R transactions are processed.</p> </li> <li> <p>Sorting:</p> </li> <li>Transactions sorted by company, invoice class, transaction type, and customer/invoice number.</li> <li> <p>Journal entries sorted by company, journal/reference, summary flag, account number, and credit/debit code.</p> </li> <li> <p>File Updates:</p> </li> <li>Update customer, detail, history, distribution, and general ledger files with accurate transaction and journal data.</li> <li> <p>Maintain control totals in <code>?prefix?ARCONT</code>.</p> </li> <li> <p>Reporting:</p> </li> <li> <p>Generate transaction register and general ledger reports, routed to production (<code>ARPOST</code>) or test (<code>TESTOUTQ</code>) queue based on environment prefix.</p> </li> <li> <p>Temporary File Management:</p> </li> <li>Temporary files are retained for the job duration and deleted afterward.</li> <li> <p>Daily file (<code>?prefix?ARDALY</code>) is optional and built only if required.</p> </li> <li> <p>Y2K Compliance:</p> </li> <li>Use century data (<code>y2kcen</code>, <code>y2kcmp</code>) for accurate date and leap year calculations.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Invalid Journal Date: Return error code and message \"INVALID DATE\".</li> <li>File Access Errors: Abort if any required file (<code>?prefix?ARTRGG</code>, <code>?prefix?ARCUST</code>, etc.) is unavailable.</li> <li>Sort Failures: Abort if sorting fails due to invalid data or resource limits.</li> <li>Report Output: Ensure reports are generated even if partial processing occurs, with errors noted.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#assumptions","title":"Assumptions","text":"<ul> <li>Input transaction file (<code>?prefix?ARTRGG</code>) is pre-populated with valid A/R data.</li> <li>All database files (<code>?prefix?ARCUST</code>, <code>?prefix?ARDETL</code>, etc.) are accessible and correctly formatted.</li> <li>Environment prefix determines file naming and output queue, defaulting to test if not 'G'.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR201P%20Invoices%20Adjustments%20Post/Summary%20AR201P%20OCL/#notes","title":"Notes","text":"<ul> <li>Non-Interactive Design: The function replaces the interactive screen prompts (<code>AR200P</code>) with programmatic input for the journal date, streamlining the process for batch or automated execution.</li> <li>Calculations: The primary calculation is the journal date validation, including leap year checks using century data. Other calculations (e.g., transaction amounts, ledger postings) are assumed to occur within <code>AR200</code>, <code>AR210</code>, and <code>AR211</code>, but specific details require their source code.</li> <li>File Prefixing: The <code>?prefix?</code> (e.g., <code>G073025</code>) combines the environment prefix and journal date, ensuring unique file labels per run.</li> <li>Extensibility: The function can be adapted for API integration or scheduled batch jobs by passing inputs via parameters.</li> </ul> <p>If you need further refinements, additional use cases, or analysis of related programs (e.g., <code>AR200</code>, <code>AR210</code>, <code>AR211</code>), please provide their source or let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/","title":"AR300 RPG36","text":"<p>The provided document is an RPG/36 program, <code>AR300.rpg36.txt</code>, called from the OCL program <code>AR300P.ocl36.txt</code>. This program generates monthly accounts receivable (A/R) statements and prepares the <code>ARDETL</code> file for purging. It processes customer and transaction data, calculates finance charges, and produces multiple output reports with different formats. Below, I\u2019ll explain the process steps, business rules, tables/files used, and external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#process-steps-of-the-ar300-rpg36-program","title":"Process Steps of the AR300 RPG/36 Program","text":"<ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P064</code>: Program identifier for <code>AR300</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>ARDETL UP F 128 128R I DISK</code>: Accounts receivable detail file, update mode, 128-byte records, indexed.</li> <li><code>AR300S IR F 30 3 3IT EDISK</code>: Input file for statement parameters, 30-byte records, indexed, externally described.</li> <li><code>ARCUST UC 384 384R 8AI 2 DISK</code>: Customer master file, update mode, 384-byte records, keyed on company/customer number.</li> <li><code>ARCONT IC F 256 256R 2AI 2 DISK</code>: A/R control file, input mode, 256-byte records, keyed on company number.</li> <li><code>BICONT IC F 256 256R 2AI 2 DISK</code>: Billing control file, input mode, 256-byte records, keyed on company number.</li> <li><code>REPORT O 132 132 OF LPRINTER</code>: Primary statement output file, 132 characters, overflow indicator <code>OF</code>.</li> <li><code>REPRT2 O 132 132 OV LPRINTER</code>: Remittance stub output, overflow indicator <code>OV</code>.</li> <li><code>REPRT3 O 132 132 OA LPRINTER</code>: Statement copy for saving (e.g., to <code>PITT-FS/SHARED/AR STATEMENTS</code>), overflow indicator <code>OA</code>.</li> <li><code>REPRT4 O 132 132 OB LPRINTER</code>: Alternate statement format, overflow indicator <code>OB</code>.</li> <li><code>REPRT5 O 132 132 OC LPRINTER</code>: Wire transfer statement format, overflow indicator <code>OC</code>.</li> </ul> </li> <li>Arrays and Data Structures:<ul> <li><code>AGE</code>: Array of 5 elements (9 digits, 2 decimals) for aging buckets (current, 01-10, 11-20, 21-30, over 30 days).</li> <li><code>MSG</code>: Array of 15 elements (70 characters) for auditor\u2019s messages (e.g., \u201cPLEASE EXAMINE THIS STATEMENT CAREFULLY\u201d).</li> <li><code>UDS</code>: Data structure for job parameters:</li> <li><code>KYALCO</code> (ALL/CO), <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (company numbers), <code>KYJOBQ</code> (job queue), <code>KYCOPY</code> (number of copies), <code>KYDATE</code> (statement date), <code>STMO</code>, <code>STDAY</code>, <code>STYR</code>, <code>DATE4</code> (date fields).</li> </ul> </li> <li> <p>Line Counter Specifications:</p> <ul> <li><code>LREPORT</code>, <code>LREPRT2</code>, <code>LREPRT3</code>, <code>LREPRT4</code>, <code>LREPRT5</code>: Define 66 lines per page, 61 lines before overflow.</li> </ul> </li> <li> <p>One-Time Initialization (<code>ONETIM</code> Subroutine):</p> </li> <li>Sets indicator <code>98</code> on to mark completion.</li> <li>Initializes <code>ZERO9</code> (9-digit, 0 decimals) to 0 for use in output calculations.</li> <li> <p>Executed only if indicator <code>98</code> is off (<code>N98</code>).</p> </li> <li> <p>Company Loop (Level Break <code>L2</code>):</p> </li> <li>Control File Access:<ul> <li>Chains to <code>ARCONT</code> using <code>ADCO</code> (company number from <code>ARDETL</code>).</li> <li>If not found (<code>95</code> on), skips further processing for the company.</li> <li>Calculates <code>LFMO</code> (last fiscal month) by subtracting 1 from <code>ACFFMO</code> (first fiscal month). If <code>LFMO &lt;= 0</code>, sets <code>LFMO = 12</code>.</li> <li>Compares <code>STMO</code> (statement month) with <code>LFMO</code>. If equal, sets <code>92</code> (last fiscal month indicator).</li> <li>Chains to <code>BICONT</code> using <code>ADCO</code>. If not found (<code>97</code> on), sets <code>64</code> (default invoicing style).</li> <li>Checks <code>BCINST</code> (invoicing style) in <code>BICONT</code>:</li> <li><code>1</code>: Sets <code>61</code> (style 1).</li> <li><code>2</code>: Sets <code>62</code> (style 2).</li> <li><code>5</code>: Sets <code>63</code> (style 5, likely wire transfer format).</li> <li>Other: Sets <code>64</code> (default format).</li> </ul> </li> <li> <p>Loop Control:</p> <ul> <li>Continues processing for each company (<code>DO</code> at <code>L2</code>).</li> </ul> </li> <li> <p>Customer Processing (<code>ARCUST</code> Subroutine):</p> </li> <li>Chains to <code>ARCUST</code> using <code>ADCOCU</code> (company/customer number from <code>ARDETL</code>).</li> <li>If not found (<code>20</code> on), sets <code>ARFIN$</code> (finance charge) to 0.</li> <li>Resets <code>PAGE</code> to 0 and indicators <code>10</code> (print statement) and <code>82</code> (finance charge calculation).</li> <li>Checks if statements are required (<code>ARSTMT \u2260 'N'</code> and indicator <code>11</code> on) to set <code>10</code>.</li> <li>Checks if wire transfer is used (<code>ARWIRE = 'Y'</code>) to set <code>49</code>.</li> <li>Validates total due (<code>ARTOTD</code>) against sum of aging buckets (<code>XFOOT AGE</code>). If unequal, sets <code>40</code>.</li> <li>Calculates finance charge balance (<code>FCBAL</code>) by summing <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>.</li> <li> <p>Sets previous balance (<code>ARPBAL = ARTOTD</code>).</p> </li> <li> <p>Transaction Processing (<code>TRANS</code> Subroutine):</p> </li> <li>Resets indicators <code>39</code>, <code>44</code>, <code>73</code> (credit transaction).</li> <li>Converts <code>ADDATE</code> (A/R date, YMD) to <code>ADMDY</code> (MDY) by multiplying by 100.0001.</li> <li>Determines transaction type (<code>ADTYPE</code>):<ul> <li><code>I</code>: Sets <code>35</code> (invoice).</li> <li><code>J</code>: Sets <code>37</code> (journal).</li> <li><code>P</code>: Sets <code>38</code> (payment).</li> </ul> </li> <li>Sets <code>44</code> (print transaction line).</li> <li>If not an invoice (<code>N35</code>), skips to <code>NOINV</code>.</li> <li>Calculates remaining amount (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Adds current month payment (<code>ADPAY</code>) to partial payment (<code>ADPART</code>).</li> <li>Recalculates remaining amount (<code>LEFTAR = ADAMT - ADPART</code>). If equal, sets <code>41</code> (paid in full).</li> <li>Checks if <code>PPINV#</code> (partial payment invoice) is 9 to set <code>15</code> (miscellaneous cash).</li> <li> <p>Checks <code>ADAGE</code> (aging code) for 1 to set <code>13</code> (past due invoice).</p> </li> <li> <p>Finance Charge Calculation (<code>L1CALC</code> Subroutine):</p> </li> <li>Resets indicators <code>80</code>, <code>83</code>, <code>85</code>.</li> <li>If finance charges apply (<code>ARFINC = 'Y'</code>), sets <code>80</code>.</li> <li>Calculates finance charge (<code>FCAMT = FCBAL * ACFINC</code>). If <code>FCAMT &gt; 0</code>, sets <code>83</code>.</li> <li>If <code>FCAMT &lt; 0.50</code>, sets <code>FCAMT = 0.50</code> and <code>85</code>.</li> <li>Adds <code>FCAMT</code> to <code>ARFIN$</code> and current due (<code>CURPRT = ARCURD + FCAMT</code>).</li> <li> <p>Moves aging amounts to print fields: <code>AR0110</code> to <code>X10PRT</code>, <code>AR1120</code> to <code>X11PRT</code>, <code>AR2130</code> to <code>X21PRT</code>, <code>AROV30</code> to <code>X31PRT</code>, <code>ARTOTD</code> to <code>TOTPRT</code>.</p> </li> <li> <p>Output Processing:</p> </li> <li>Detail Records (<code>ARDETL</code>):<ul> <li>For non-invoice transactions (<code>N35</code>), writes <code>P</code> (payment) at position 48.</li> <li>For invoices (<code>35</code>), writes <code>ADAMT</code>, <code>ADPART</code>, <code>ZERO9</code>, and <code>P</code> (paid, if <code>41</code>) or <code>S</code> (statement, if <code>N41</code>) at position 48.</li> </ul> </li> <li>Customer Totals (<code>ARCUST</code>):<ul> <li>At level break <code>L1</code>, if <code>40</code> (total mismatch) or <code>80</code> (finance charge), writes <code>ARFIN$</code> and <code>ARPBAL</code>.</li> </ul> </li> <li>REPORT (Primary Statement):<ul> <li>Prints headers (company address, date, customer info) and transaction details.</li> <li>Includes aging totals, finance charges, and \u201cCONTINUED ON NEXT PAGE\u201d if overflow (<code>OF</code>).</li> </ul> </li> <li>REPRT2 (Remittance Stub):<ul> <li>Prints remittance details (e.g., \u201cREMIT TO: COMM*PLAN DIVISION\u201d).</li> </ul> </li> <li>REPRT3 (Saved Copy):<ul> <li>Similar to <code>REPORT</code> but includes wire transfer details if <code>63</code> is on (e.g., PNC Bank info).</li> <li>Added 6/21/13 for saving to <code>PITT-FS/SHARED/AR STATEMENTS</code>.</li> </ul> </li> <li>REPRT4 (Alternate Format):<ul> <li>Prints minimal remittance info, used if <code>64</code> (default style).</li> </ul> </li> <li>REPRT5 (Wire Transfer Format):<ul> <li>Includes bank details (e.g., ABA# 031207607) for wire transfer customers (<code>63</code>).</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#business-rules","title":"Business Rules","text":"<ol> <li>Statement Generation:</li> <li>Statements are printed only if <code>ARSTMT \u2260 'N'</code> and total due is non-zero (<code>11</code> on).</li> <li>Supports multiple companies (<code>KYALCO = 'ALL'</code> or specific <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>).</li> <li>Finance Charges:</li> <li>Applied if <code>ARFINC = 'Y'</code> in <code>ARCUST</code>.</li> <li>Calculated as <code>FCBAL * ACFINC</code> (from <code>ARCONT</code>), with a minimum of $0.50.</li> <li>Added to <code>ARFIN$</code> and current due (<code>ARCURD</code>).</li> <li>Aging Validation:</li> <li>Total due (<code>ARTOTD</code>) must equal sum of aging buckets (<code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code>).</li> <li>Transaction Processing:</li> <li>Supports invoices (<code>I</code>), journals (<code>J</code>), and payments (<code>P</code>).</li> <li>Calculates remaining balance (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Flags paid-in-full invoices (<code>ADAMT = ADPART</code>).</li> <li>Identifies miscellaneous cash payments (<code>PPINV# = 9</code>).</li> <li>Invoicing Styles:</li> <li>Determined by <code>BCINST</code> in <code>BICONT</code>:<ul> <li><code>1</code>: Style 1 (<code>61</code>).</li> <li><code>2</code>: Style 2 (<code>62</code>).</li> <li><code>5</code>: Wire transfer format (<code>63</code>).</li> <li>Other: Default format (<code>64</code>).</li> </ul> </li> <li>Output Formats:</li> <li>Multiple reports (<code>REPORT</code>, <code>REPRT2</code>, <code>REPRT3</code>, <code>REPRT4</code>, <code>REPRT5</code>) for different purposes (primary, remittance, saved copy, wire transfer).</li> <li>Includes auditor\u2019s messages for verification.</li> <li>Purge Preparation:</li> <li>Updates <code>ARDETL</code> with payment status (<code>P</code> or <code>S</code>) to facilitate purging of paid records.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>ARDETL:</li> <li>A/R detail file (128 bytes, indexed, update mode).</li> <li>Fields: <code>ADCO</code> (company), <code>ADCUST</code> (customer), <code>ADINV#</code> (invoice), <code>ADTYPE</code> (I/J/P), <code>ADDATE</code> (YMD), <code>ADAMT</code> (amount), <code>ADAGE</code> (aging code), <code>ADPART</code> (partial payment), <code>ADPAY</code> (current month paid), <code>PPINV#</code> (partial payment invoice).</li> <li>AR300S:</li> <li>Statement parameter file (30 bytes, indexed, externally described).</li> <li>ARCUST:</li> <li>Customer master file (384 bytes, keyed on company/customer, update mode).</li> <li>Fields: <code>ARCO</code> (company), <code>ARCUST</code> (customer), <code>ARNAME</code>, <code>ARADR1</code>\u2013<code>ARADR4</code> (address), <code>ARTOTD</code> (total due), <code>ARCURD</code>, <code>AR0110</code>, <code>AR1120</code>, <code>AR2130</code>, <code>AROV30</code> (aging), <code>ARPYMT</code> (last payment), <code>ARSTMT</code> (statements Y/N), <code>ARFIN$</code> (finance charge), <code>ARPBAL</code> (previous balance), <code>ARFINC</code> (finance charge Y/N), <code>ARM$PD</code>, <code>ARWIRE</code> (wire transfer Y/N).</li> <li>ARCONT:</li> <li>A/R control file (256 bytes, keyed on company, input mode).</li> <li>Fields: <code>ACFINC</code> (finance charge %), <code>ACFFMO</code> (first fiscal month).</li> <li>BICONT:</li> <li>Billing control file (256 bytes, keyed on company, input mode).</li> <li>Field: <code>BCINST</code> (invoicing style).</li> <li>REPORT, REPRT2, REPRT3, REPRT4, REPRT5:</li> <li>Printer files (132 characters) for statement outputs.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The program does not explicitly call external programs (e.g., via <code>CALL</code>).</li> <li>It is invoked by the OCL program (<code>AR300P.ocl36.txt</code>) as the <code>AR300</code> procedure but does not call other programs itself.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300%20RPG36/#additional-notes","title":"Additional Notes","text":"<ul> <li>Purpose: Generates detailed A/R statements with customer, transaction, and aging information, and prepares <code>ARDETL</code> for purging by marking paid records.</li> <li>Output Variants: Multiple printer files support different statement formats, including a saved copy (<code>REPRT3</code>) and wire transfer details (<code>REPRT5</code>).</li> <li>Integration with OCL: Called as <code>AR300</code> in the OCL, using parameters like <code>?9?</code> for file labels and <code>KY</code> fields for input.</li> <li>Modification: Addition of <code>REPRT5</code> (6/21/13) for wire transfer format enhances functionality for specific customers.</li> </ul> <p>If you need further analysis or specific details (e.g., output format specifics or purge logic), let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/","title":"AR300P OCL","text":"<p>The provided document is an OCL (Operation Control Language) program, specifically <code>AR300P.ocl36.txt</code>, which is used on IBM midrange systems (like AS/400 or IBM i) to control the execution of programs and manage file operations. OCL is typically used to define job steps, invoke programs, and handle file processing in RPG (Report Program Generator) applications. Below, I\u2019ll explain the process steps of this OCL program, identify the external programs called, and list any tables or files referenced.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#process-steps-of-the-ar300p-ocl-program","title":"Process Steps of the AR300P OCL Program","text":"<ol> <li>Comment Block:</li> <li> <p><code>** MONTHLY STATEMENTS **</code>:</p> <ul> <li>This is a comment indicating the purpose of the program, likely related to generating monthly statements for accounts receivable (AR).</li> </ul> </li> <li> <p>Program Invocation:</p> </li> <li> <p><code>// CALL PGM(GSGENIEC)</code>:</p> <ul> <li>The OCL script starts by calling an external program named <code>GSGENIEC</code>. This program is likely a utility or initialization program, possibly for setting up the environment or performing prerequisite checks before the main processing begins.</li> <li>No parameters are explicitly passed to <code>GSGENIEC</code> in this call.</li> </ul> </li> <li> <p>Conditional Check:</p> </li> <li> <p><code>// IFF ?L'506,3'?/YES RETURN</code>:</p> <ul> <li>This is a conditional statement checking the value of a substitution expression <code>?L'506,3'?</code>. This likely refers to a system or job variable (e.g., a local data area or parameter) at position 506 for 3 characters.</li> <li>If the condition evaluates to <code>YES</code> (true), the OCL script executes a <code>RETURN</code>, which terminates the OCL procedure immediately, preventing further execution.</li> <li>This acts as a gatekeeper to ensure certain conditions are met before proceeding.</li> </ul> </li> <li> <p>Procedure Invocation:</p> </li> <li> <p><code>// SCPROCP ,,,,,,,,?9?</code>:</p> <ul> <li>This invokes a procedure named <code>SCPROCP</code>. The commas indicate placeholders for parameters, and <code>?9?</code> is a substitution variable, likely representing a parameter such as a library, file, or job-specific value.</li> <li>The exact purpose of <code>SCPROCP</code> is not clear from the OCL alone, but it could be a system procedure for setting up the environment or preparing data for the main program.</li> </ul> </li> <li> <p>Local Variable Initialization:</p> </li> <li> <p><code>// LOCAL BLANK-*ALL</code>:</p> <ul> <li>This command initializes all local data areas (used for passing data between programs or jobs) to blanks. This ensures a clean slate for any variables used in subsequent steps.</li> </ul> </li> <li> <p>Date Conversion Utility:</p> </li> <li> <p><code>// GSY2K</code>:</p> <ul> <li>This invokes a system utility or command named <code>GSY2K</code>, likely related to Year 2000 (Y2K) date handling. It may convert or validate dates to ensure compatibility with two-digit or four-digit year formats, which was a common requirement in older systems.</li> </ul> </li> <li> <p>Switch Setting:</p> </li> <li> <p><code>// SWITCH 0XXXXXXX</code>:</p> <ul> <li>This sets a job switch (a set of 8 binary flags) to <code>0XXXXXXX</code>. The first switch is set to <code>0</code>, and the remaining switches (2\u20138) are unspecified (<code>X</code>), meaning their values are not explicitly set here and may retain their previous state or default to a system-defined value.</li> <li>Job switches are used to control program flow or conditional logic in RPG or OCL.</li> </ul> </li> <li> <p>Program Load:</p> </li> <li> <p><code>// LOAD AR300P</code>:</p> <ul> <li>This loads the main RPG program named <code>AR300P</code> into memory for execution. This is likely the core program responsible for generating the monthly statements.</li> </ul> </li> <li> <p>File Declaration:</p> </li> <li> <p><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>:</p> <ul> <li>Declares a file named <code>ARCONT</code> to be used by the program.</li> <li><code>LABEL-?9?ARCONT</code> indicates that the file\u2019s label (or dataset name) is constructed using the substitution variable <code>?9?</code> concatenated with <code>ARCONT</code>. For example, if <code>?9?</code> is a library name like <code>PROD</code>, the file might be <code>PROD.ARCONT</code>.</li> <li><code>DISP-SHR</code> specifies that the file is opened in shared mode, allowing multiple jobs or programs to access it concurrently (read-only or with appropriate locking).</li> <li>This file is likely the accounts receivable control file containing data needed for statement generation.</li> </ul> </li> <li> <p>Program Execution:</p> <ul> <li><code>// RUN</code>:</li> <li>Executes the loaded program (<code>AR300P</code>). This is where the main processing for monthly statements occurs, using the <code>ARCONT</code> file.</li> </ul> </li> <li> <p>Switch Check and Cancellation:</p> <ul> <li><code>// IF SWITCH1-1 CANCEL</code>:</li> <li>Checks the state of the first job switch (set earlier to <code>0</code> in <code>SWITCH 0XXXXXXX</code>).</li> <li>If the first switch is <code>1</code> (which would indicate an error or specific condition set by <code>AR300P</code> or a prior step), the job is canceled, terminating the OCL procedure.</li> <li>Since the switch was initially set to <code>0</code>, cancellation would only occur if <code>AR300P</code> or another step modifies the switch.</li> </ul> </li> <li> <p>Second Procedure Invocation:</p> <ul> <li><code>// AR300 ,,,,,,,,?9?</code>:</li> <li>Invokes another procedure named <code>AR300</code>, again with <code>?9?</code> as a parameter.</li> <li>This could be a follow-up procedure to handle post-processing tasks (e.g., cleanup, logging, or additional report generation).</li> <li>The commas indicate placeholders for parameters that are either unused or defaulted.</li> </ul> </li> <li> <p>Final Local Variable Initialization:</p> <ul> <li><code>// LOCAL BLANK-*ALL</code>:</li> <li>Resets all local data areas to blanks again, likely to clear any residual data before the job ends or before invoking the <code>AR300</code> procedure.</li> </ul> </li> <li> <p>Final Switch Setting:</p> <ul> <li><code>// SWITCH 00000000</code>:</li> <li>Resets all job switches to <code>0</code>, ensuring a clean state for the end of the job or for any subsequent processing.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls or references the following external programs or procedures: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a utility program for environment setup or validation. 2. SCPROCP:    - Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.    - A system or custom procedure, possibly for job setup or data preparation. 3. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A date-handling utility, likely for Y2K compliance or date conversions. 4. AR300P:    - Loaded and executed via <code>// LOAD AR300P</code> and <code>// RUN</code>.    - The main RPG program responsible for generating monthly statements. 5. AR300:    - Invoked via <code>// AR300 ,,,,,,,,?9?</code>.    - A procedure, possibly for post-processing or additional tasks related to <code>AR300P</code>.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The OCL program references the following file: 1. ARCONT:    - Declared via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - Likely an accounts receivable control file containing data such as customer balances, transaction details, or statement information.    - The <code>?9?</code> substitution variable suggests the file resides in a library or location specified at runtime.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20OCL/#additional-notes","title":"Additional Notes","text":"<ul> <li>Substitution Variable <code>?9?</code>: This variable is used multiple times (<code>SCPROCP</code>, <code>ARCONT</code>, <code>AR300</code>). It likely represents a dynamic value, such as a library name, job parameter, or environment-specific setting, passed to the OCL at runtime.</li> <li>Switches: The use of job switches (<code>SWITCH 0XXXXXXX</code>, <code>IF SWITCH1-1</code>) indicates conditional logic to control job flow, likely for error handling or branching based on the outcome of <code>AR300P</code>.</li> <li>Environment: The OCL syntax and commands (e.g., <code>LOAD</code>, <code>FILE</code>, <code>SWITCH</code>) are specific to IBM midrange systems, suggesting this program runs on an AS/400 or IBM i system.</li> <li>Limitations: Without the RPG source code for <code>AR300P</code> or documentation for <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, and <code>AR300</code>, the exact functionality of these components is inferred based on typical OCL and RPG patterns. Similarly, no explicit tables (e.g., database tables) are mentioned beyond the <code>ARCONT</code> file.</li> </ul> <p>If you have additional context, such as the RPG source code for <code>AR300P</code> or details about the <code>?9?</code> parameter, I can provide a more detailed analysis. Let me know if you need further clarification!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/","title":"AR300P RPGLE","text":"<p>The provided document is an RPGLE (RPG IV) program, <code>AR300P.rpgle.txt</code>, which is called from the OCL program <code>AR300P.ocl36.txt</code>. This RPG program is designed to prompt users for input parameters to generate monthly statements for accounts receivable (AR). It validates user input, checks data against files, and displays error messages if validation fails. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#process-steps-of-the-ar300p-rpgle-program","title":"Process Steps of the AR300P RPGLE Program","text":"<ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs in a named activation group (not the default), allowing better control over resources.</li> <li><code>H DFTNAME(AR300P)</code>: Specifies the default program name as <code>AR300P</code>.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Handles numeric fields with zoned or packed decimal formats during conversion.</li> </ul> </li> <li>File Declarations:<ul> <li><code>AR300PD CF E WORKSTN</code>: Defines a workstation file (<code>AR300PD</code>) for interactive screen input/output, using Profound UI (<code>Handler('PROFOUNDUI(HANDLER)')</code>) for the user interface.</li> <li><code>ARCONT IF F 256 2AIDISK KEYLOC(2)</code>: Defines an input file (<code>ARCONT</code>) with a record length of 256 bytes, keyed on position 2 (company number, <code>acco</code>), used for accounts receivable control data.</li> <li><code>GSCONT IF F 512 2AIDISK KEYLOC(2)</code>: Defines another input file (<code>GSCONT</code>) with a record length of 512 bytes, also keyed on position 2 (company number, <code>gxcono</code>), likely for global system control data.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>dco</code>: A 35-character array (10 elements) to store company numbers and names.</li> <li><code>com</code>: A 40-character array (7 elements) initialized with compile-time data (<code>CTDATA</code>) for error messages (e.g., \"INVALID STATEMENT DATE\").</li> <li><code>uds</code>: A data structure for job parameters, including:</li> <li><code>kyalco</code> (ALL/CO selection), <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> (company numbers), <code>kydate</code> (statement date), <code>kycmtd</code> (month-to-date flag), <code>kycytd</code> (year-to-date flag), <code>kycopy</code> (number of copies), <code>y2kcen</code> (Y2K century), <code>y2kcmp</code> (Y2K comparison year).</li> </ul> </li> <li> <p>Indicators: Used extensively for controlling program flow and screen output (e.g., <code>*IN01</code>, <code>*IN09</code>, <code>*IN81</code>, <code>*IN90</code>).</p> </li> <li> <p>Main Processing Logic:</p> </li> <li>Workstation File Read:<ul> <li>Checks <code>qsctl</code> (a control field, likely from the screen or job).</li> <li>If <code>qsctl</code> is blank, sets <code>*IN09</code> (initial screen display) and <code>qsctl</code> to 'R', then proceeds.</li> <li>Otherwise, sets <code>*IN01</code> (process input), reads the screen file (<code>AR300PD</code>), and returns if the last record indicator (<code>LR</code>) is set.</li> </ul> </li> <li>Indicator Setup:<ul> <li>Resets indicators (<code>*IN20</code>, <code>*IN81</code>, <code>*IN90</code>, <code>*IN30</code>\u2013<code>*IN37</code>) to ensure a clean state.</li> <li>Clears the <code>msg</code> field (40 characters) for error messages.</li> </ul> </li> <li>F3 Key Handling:<ul> <li>If <code>*INKG</code> (F3 key) is pressed, sets <code>*INU1</code> and <code>*INLR</code> (program termination), clears <code>*IN01</code> and <code>*IN09</code>, and jumps to the <code>end</code> tag to exit.</li> </ul> </li> <li>Initial Screen Display:<ul> <li>If <code>*IN09</code> is on, sets <code>*IN81</code> (write screen) and executes the <code>onetim</code> subroutine for one-time initialization.</li> </ul> </li> <li>Input Processing:<ul> <li>If <code>*IN01</code> is on, executes the <code>edit</code> subroutine to validate user input.</li> </ul> </li> <li> <p>Screen Output:</p> <ul> <li>If <code>*IN81</code> is off, sets <code>*INLR</code> to terminate the program.</li> <li>Writes to the <code>AR300PD</code> screen file if <code>*IN81</code> is on, displaying the input prompt or error messages.</li> </ul> </li> <li> <p>Edit Subroutine (<code>edit</code>):</p> </li> <li>Security Code Validation:<ul> <li>Chains to <code>ARCONT</code> using key <code>01</code> (company number).</li> <li>Compares <code>kysec</code> (input security code) with <code>acsecr</code> (security code in <code>ARCONT</code>).</li> <li>If mismatched, sets <code>*IN30</code>, <code>*IN81</code>, <code>*IN90</code>, and displays error message <code>com(7)</code> (\"INVALID SECURITY CODE\").</li> </ul> </li> <li>Date Validation:<ul> <li>Moves <code>kydate</code> to <code>mmddyy</code> and calls <code>@dtedt</code> to validate the date.</li> <li>If <code>*IN79</code> (date error) is set, displays <code>com(1)</code> (\"INVALID STATEMENT DATE\") and sets <code>*IN31</code>, <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>ALL/CO Selection Validation:<ul> <li>Checks if <code>kyalco</code> is 'ALL' or 'CO '.</li> <li>If <code>kyalco</code> is 'ALL' or 'CO ', validates further:</li> <li>If <code>kyalco</code> is neither 'ALL' nor 'CO', displays <code>com(2)</code> (\"ENTER ALL OR CO\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Company Number Validation:<ul> <li>If <code>kyalco</code> is 'CO', checks <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:</li> <li>If all are zero, displays <code>com(3)</code> (\"IF CO, THEN ENTER VALID COMPANIES\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> <li>If <code>kyalco</code> is 'ALL' and any company numbers are non-zero, displays <code>com(4)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\") and sets <code>*IN32</code>, <code>*IN81</code>, <code>*IN90</code>.</li> <li>For each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>:</li> <li>Positions the <code>ARCONT</code> file using <code>SETLL</code>.</li> <li>Reads the record and checks if it\u2019s deleted (<code>acdel = 'D'</code>) or if the company number (<code>acco</code>) matches.</li> <li>If no valid record is found, displays <code>com(5)</code> (\"INVALID COMPANY NUMBER\") and sets <code>*IN33</code>, <code>*IN34</code>, or <code>*IN35</code> (for <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>) plus <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Month-to-Date/Year-to-Date Flags:<ul> <li>Validates <code>kycmtd</code> and <code>kycytd</code> (must be 'Y', 'N', or blank).</li> <li>If invalid, displays <code>com(6)</code> (\"INVALID PARAMETER\") and sets <code>*IN81</code>, <code>*IN90</code>.</li> </ul> </li> <li>Number of Copies:<ul> <li>If <code>kycopy</code> is zero, sets it to 1.</li> </ul> </li> <li> <p>Final Setup:</p> <ul> <li>Sets <code>*IN11</code> to indicate successful validation.</li> </ul> </li> <li> <p>One-Time Subroutine (<code>onetim</code>):</p> </li> <li>Initialize Company Array:<ul> <li>Clears the <code>dco</code> array and sets index <code>x</code> to 1.</li> <li>Positions <code>ARCONT</code> at the beginning (<code>aclim = 00</code>).</li> <li>Reads <code>ARCONT</code> records, skipping deleted records (<code>acdel = 'D'</code>).</li> <li>Stores company number (<code>acco</code>) and name (<code>acname</code>) in <code>dco(x)</code> until 10 companies are loaded or end of file is reached.</li> <li>Moves <code>dco</code> elements to individual fields (<code>DCO1</code>\u2013<code>DCO10</code>) for screen display.</li> </ul> </li> <li> <p>Default Parameters:</p> <ul> <li>Chains to <code>GSCONT</code> with key <code>00</code>.</li> <li>If a record is found and <code>gxcono</code> is non-zero, sets <code>kyalco</code> to 'CO ' and <code>kyco1</code> to <code>gxcono</code>.</li> <li>Otherwise, sets <code>kyalco</code> to 'ALL'.</li> <li>Sets defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 01</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3 = 0</code>.</li> <li>Sets <code>*IN10</code> to indicate completion.</li> </ul> </li> <li> <p>Date Edit Subroutine (<code>@dtedt</code>):</p> </li> <li> <p>Validates the input date (<code>mmddyy</code>):</p> <ul> <li>Breaks down into month (<code>$month</code>), day (<code>$day</code>), and year (<code>$yr</code>).</li> <li>Checks if month is valid (1\u201312).</li> <li>For February, validates days (28 or 29 for leap years) using century (<code>y2kcen</code>) and year calculations.</li> <li>For other months, checks days (30 or 31 based on month).</li> <li>Sets <code>*IN79</code> if any validation fails.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Writes to <code>AR300PD</code> if <code>*IN81</code> is on, outputting fields like <code>kysec</code>, <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, <code>dco</code>, <code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>, and <code>msg</code>.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#business-rules","title":"Business Rules","text":"<ol> <li>Security Code:</li> <li>The input security code (<code>kysec</code>) must match the security code (<code>acsecr</code>) in the <code>ARCONT</code> file for the company.</li> <li>Statement Date:</li> <li>The date (<code>kydate</code>) must be valid (checked via <code>@dtedt</code> for month, day, and leap year).</li> <li>ALL/CO Selection:</li> <li><code>kyalco</code> must be 'ALL' (process all companies) or 'CO ' (specific companies).</li> <li>If 'CO ', at least one of <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must be non-zero.</li> <li>If 'ALL', <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must be zero.</li> <li>Company Numbers:</li> <li>Each non-zero <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> must exist in <code>ARCONT</code>, not be deleted (<code>acdel \u2260 'D'</code>), and match the company number (<code>acco</code>).</li> <li>Month-to-Date/Year-to-Date:</li> <li><code>kycmtd</code> and <code>kycytd</code> must be 'Y', 'N', or blank.</li> <li>Number of Copies:</li> <li><code>kycopy</code> defaults to 1 if zero.</li> <li>Error Handling:</li> <li>Displays specific error messages (<code>com(1)</code>\u2013<code>com(7)</code>) for validation failures.</li> <li>Returns to the screen for correction if errors occur.</li> <li>Initialization:</li> <li>Defaults are set based on <code>GSCONT</code> (company number or 'ALL') and hardcoded values (<code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>).</li> <li>Up to 10 companies are loaded for display.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AR300PD:</li> <li>Workstation file (display file) for user interaction via Profound UI.</li> <li>Contains fields like <code>kysec</code>, <code>kydate</code>, <code>kyalco</code>, <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, <code>dco</code>, <code>kycmtd</code>, <code>kycytd</code>, <code>kycopy</code>, <code>msg</code>.</li> <li>ARCONT:</li> <li>Accounts receivable control file (256 bytes, keyed on company number at position 2).</li> <li>Fields:<ul> <li><code>acdel</code> (1): Delete flag ('D' for deleted).</li> <li><code>acco</code> (2\u20133): Company number.</li> <li><code>acname</code> (4\u201333): Company name.</li> <li><code>acsecr</code> (84\u201391): Security code for statements.</li> </ul> </li> <li>GSCONT:</li> <li>Global system control file (512 bytes, keyed on company number at position 2).</li> <li>Fields:<ul> <li><code>gxdel</code> (1): Delete flag.</li> <li><code>gxcono</code> (77\u201378): Company number.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPG program does not explicitly call external programs (e.g., via <code>CALL</code> or <code>QCMDEXC</code>).</li> <li>It interacts with the Profound UI handler (<code>PROFOUNDUI(HANDLER)</code>) for screen processing, but this is a runtime environment, not a program call.</li> <li>The OCL program (<code>AR300P.ocl36.txt</code>) calls <code>AR300P</code>, but within <code>AR300P.rpgle</code>, no further programs are invoked.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/AR300P%20RPGLE/#additional-notes","title":"Additional Notes","text":"<ul> <li>Conversion Context: The program was converted on 04/07/23 using TARGET/400, with 161 lines added, 5 modified, and 297 processed. Prefixes (<code>T4A</code>, <code>T4M</code>, <code>T4O</code>) indicate added, modified, or original lines.</li> <li>Y2K Handling: The <code>@dtedt</code> subroutine and fields like <code>y2kcen</code>, <code>y2kcmp</code> address Year 2000 date issues, ensuring correct leap year calculations.</li> <li>Profound UI: The use of <code>Handler('PROFOUNDUI(HANDLER)')</code> indicates a modernized user interface, likely a web-based front-end for the AS/400.</li> <li>Error Messages: The <code>com</code> array provides clear, user-friendly error messages, enhancing usability.</li> <li>Integration with OCL: The OCL program loads <code>AR300P</code> and provides the <code>ARCONT</code> file with a dynamic label (<code>?9?ARCONT</code>). The RPG program uses this file for validation.</li> </ul> <p>If you need further details, such as a deeper dive into specific validations or integration with other system components, let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/","title":"Summary AR300P OCL","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#list-of-use-cases-implemented-by-the-program-stack","title":"List of Use Cases Implemented by the Program Stack","text":"<p>The program stack, consisting of <code>AR300P.ocl36.txt</code>, <code>AR300P.rpgle.txt</code>, and <code>AR300.rpg36.txt</code>, implements a single primary use case:</p> <ol> <li>Generate Monthly Accounts Receivable (A/R) Statements:</li> <li>This use case involves prompting the user for input parameters (via <code>AR300P.rpgle</code>), validating those inputs, and generating A/R statements for selected companies or all companies, including transaction details, aging information, and finance charges (via <code>AR300.rpg36</code>). It also prepares the <code>ARDETL</code> file for purging by marking paid transactions.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#ar-statement-generation-function-requirements","title":"A/R Statement Generation Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#overview","title":"Overview","text":"<p>The <code>generateARStatements</code> function generates monthly accounts receivable (A/R) statements for specified companies or all companies, calculates finance charges, and prepares the A/R detail file for purging. It processes input parameters, validates them, and produces formatted statement outputs with transaction details, aging buckets, and auditor instructions.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Security Code (<code>kysec</code>, 8 chars): Validates access to company data.</li> <li>Statement Date (<code>kydate</code>, 6 digits, MMDDYY): Date for statements.</li> <li>Company Selection (<code>kyalco</code>, 3 chars): 'ALL' for all companies or 'CO ' for specific companies.</li> <li>Company Numbers (<code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code>, 2 digits each): Specific company numbers if <code>kyalco = 'CO '</code>.</li> <li>Month-to-Date Flag (<code>kycmtd</code>, 1 char): 'Y', 'N', or blank for month-to-date reporting.</li> <li>Year-to-Date Flag (<code>kycytd</code>, 1 char): 'Y', 'N', or blank for year-to-date reporting.</li> <li>Number of Copies (<code>kycopy</code>, 2 digits): Number of statement copies (defaults to 1 if 0).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Statement Reports:</li> <li>Primary statement (<code>REPORT</code>): Customer details, transactions, aging, finance charges.</li> <li>Remittance stub (<code>REPRT2</code>): Payment submission details.</li> <li>Saved copy (<code>REPRT3</code>): For archival to <code>PITT-FS/SHARED/AR STATEMENTS</code>.</li> <li>Alternate format (<code>REPRT4</code>): Minimal remittance info.</li> <li>Wire transfer format (<code>REPRT5</code>): Includes bank details for wire transfer customers.</li> <li>Updated <code>ARDETL</code> File: Marks transactions as paid ('P') or statement ('S') for purging.</li> <li>Error Messages: Returned if validation fails (e.g., \"INVALID STATEMENT DATE\").</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize Environment:</li> <li>Call <code>GSGENIEC</code> to set up the job environment.</li> <li>Check job variable (<code>L'506,3'</code>) to determine if processing should proceed; exit if condition met.</li> <li>Execute <code>SCPROCP</code> with library parameter (<code>?9?</code>) for setup.</li> <li>Run <code>GSY2K</code> for date format handling.</li> <li> <p>Reset local data areas and job switches.</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Verify security code (<code>kysec</code>) against <code>acsecr</code> in <code>ARCONT</code> for the company.</li> <li>Validate <code>kydate</code> (MMDDYY) for correct month (1\u201312), day (1\u201331, or 28/29 for February with leap year check), and year (using <code>y2kcen</code>).</li> <li>Ensure <code>kyalco</code> is 'ALL' or 'CO '.</li> <li>If <code>kyalco = 'CO '</code>, validate <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> exist in <code>ARCONT</code>, are not deleted (<code>acdel \u2260 'D'</code>), and match <code>acco</code>.</li> <li>If <code>kyalco = 'ALL'</code>, ensure <code>kyco1</code>, <code>kyco2</code>, <code>kyco3</code> are 0.</li> <li>Validate <code>kycmtd</code> and <code>kycytd</code> are 'Y', 'N', or blank.</li> <li>Set <code>kycopy</code> to 1 if 0.</li> <li> <p>Return error messages for any validation failure and halt processing.</p> </li> <li> <p>Load Company Data:</p> </li> <li>Retrieve up to 10 companies from <code>ARCONT</code> (non-deleted records) for display or processing.</li> <li>If <code>GSCONT</code> has a valid company number (<code>gxcono</code>), set <code>kyalco = 'CO '</code> and <code>kyco1 = gxcono</code>; otherwise, set <code>kyalco = 'ALL'</code>.</li> <li> <p>Set defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 1</code>.</p> </li> <li> <p>Process Companies and Customers:</p> </li> <li> <p>For each company (<code>ADCO</code> from <code>ARDETL</code>, filtered by <code>kyalco</code> and <code>kyco1\u20133</code>):</p> <ul> <li>Validate fiscal month (<code>ACFFMO</code> from <code>ARCONT</code>) against statement month (<code>STMO</code>).</li> <li>Determine invoicing style (<code>BCINST</code> from <code>BICONT</code>): '1' (style 1), '2' (style 2), '5' (wire transfer), or default.</li> <li>For each customer (<code>ADCUST</code> from <code>ARDETL</code>):</li> <li>Retrieve customer data from <code>ARCUST</code> (<code>ARNAME</code>, <code>ARADR1\u20134</code>, <code>ARTOTD</code>, <code>ARCURD</code>, <code>AR0110\u2013AROV30</code>, <code>ARSTMT</code>, <code>ARFINC</code>, <code>ARWIRE</code>).</li> <li>Skip if <code>ARSTMT = 'N'</code> or total due is 0.</li> </ul> </li> <li> <p>Process Transactions:</p> </li> <li> <p>For each transaction in <code>ARDETL</code>:</p> <ul> <li>Identify type (<code>ADTYPE</code>): 'I' (invoice), 'J' (journal), 'P' (payment).</li> <li>Calculate remaining amount (<code>ADLEFT = ADAMT - ADPART</code>).</li> <li>Add current month payment (<code>ADPAY</code>) to <code>ADPART</code>.</li> <li>Flag as paid (<code>P</code>) if <code>ADAMT = ADPART</code>, else statement (<code>S</code>).</li> <li>Mark miscellaneous cash if <code>PPINV# = 9</code>.</li> <li>Note past due invoices (<code>ADAGE = 1</code>).</li> </ul> </li> <li> <p>Calculate Finance Charges:</p> </li> <li>If <code>ARFINC = 'Y'</code> in <code>ARCUST</code>, calculate <code>FCAMT = (AR0110 + AR1120 + AR2130 + AROV30) * ACFINC</code> (from <code>ARCONT</code>).</li> <li>Set <code>FCAMT = 0.50</code> if less than 0.50.</li> <li> <p>Add <code>FCAMT</code> to <code>ARFIN$</code> and <code>ARCURD</code>.</p> </li> <li> <p>Generate Statements:</p> </li> <li>Produce statements based on invoicing style:<ul> <li>Style 1 (<code>61</code>): Standard format (<code>REPORT</code>).</li> <li>Style 2 (<code>62</code>): Remittance stub (<code>REPRT2</code>).</li> <li>Style 5 (<code>63</code>): Wire transfer with bank details (<code>REPRT3</code>, <code>REPRT5</code>).</li> <li>Default (<code>64</code>): Minimal format (<code>REPRT4</code>).</li> </ul> </li> <li>Include customer details, transaction lines (date, invoice, charge, payment, balance), aging totals, finance charges, and auditor\u2019s messages.</li> <li> <p>Save a copy to <code>PITT-FS/SHARED/AR STATEMENTS</code> (<code>REPRT3</code>).</p> </li> <li> <p>Prepare for Purge:</p> </li> <li>Update <code>ARDETL</code> with 'P' (paid) or 'S' (statement) to mark records for purging.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#business-rules","title":"Business Rules","text":"<ol> <li>Statement Eligibility: Print only if <code>ARSTMT \u2260 'N'</code> and <code>ARTOTD \u2260 0</code>.</li> <li>Company Selection: Process all companies (<code>kyalco = 'ALL'</code>) or specific valid companies (<code>kyalco = 'CO '</code>, <code>kyco1\u20133</code> exist in <code>ARCONT</code>).</li> <li>Date Validation: <code>kydate</code> must be a valid MMDDYY (1\u201312 months, 1\u201331 days, 28/29 for February with leap year logic).</li> <li>Finance Charges: Apply if <code>ARFINC = 'Y'</code>, minimum $0.50, based on overdue amounts (<code>AR0110 + AR1120 + AR2130 + AROV30</code>).</li> <li>Aging Accuracy: <code>ARTOTD</code> must equal sum of aging buckets (<code>ARCURD + AR0110 + AR1120 + AR2130 + AROV30</code>).</li> <li>Transaction Status: Mark <code>ARDETL</code> records as paid (<code>P</code>) if fully paid, else statement (<code>S</code>).</li> <li>Output Formats: Support multiple formats (standard, remittance, wire transfer, archived copy) based on <code>BCINST</code>.</li> <li>Security: Validate <code>kysec</code> against <code>acsecr</code> in <code>ARCONT</code>.</li> <li>Defaults: <code>kycmtd = 'Y'</code>, <code>kycytd = 'N'</code>, <code>kycopy = 1</code> if not specified.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return specific messages for validation failures:</li> <li>Invalid security code, date, company selection, company numbers, or flags.</li> <li>Halt processing and return errors to caller for correction.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR300P%20Monthly%20Statements/Summary%20AR300P%20OCL/#files-used","title":"Files Used","text":"<ul> <li>ARCONT: Company control (security code, finance charge %, fiscal month).</li> <li>BICONT: Billing control (invoicing style).</li> <li>ARCUST: Customer master (name, address, aging, statement flag).</li> <li>ARDETL: A/R details (transactions, amounts, aging code).</li> <li>AR300S: Statement parameters.</li> <li>GSCONT: Global system control (default company).</li> <li>REPORT, REPRT2\u20135: Printer files for statement outputs.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/","title":"AR810U RPGLE","text":"<p>The provided RPGLE program, <code>AR810U.rpgle</code>, is an AR (Accounts Receivable) Invoice Inquiry program written in free-format RPGLE for an IBM i system. It displays invoice details for a given company and customer in a subfile (a scrolling list on a workstation display). Below is an explanation of the process steps, followed by the external programs called and the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#process-steps-of-the-ar810u-program","title":"Process Steps of the AR810U Program","text":"<ol> <li>Program Initialization (OneTime Subroutine):</li> <li>Check Genie Environment: The program calls <code>GSGENIE2C</code> to determine if it\u2019s running in the Genie environment (a web-based interface). If <code>genievar</code> is not 'YES', the program terminates immediately.</li> <li>Set Default Company: Retrieves the default company (<code>gxcono</code>) from the <code>GSCONT</code> file. If found and non-zero, sets the company code (<code>cco</code>) and positions the cursor on the customer field (<code>*in11 = *ON</code>). Otherwise, positions the cursor on the company field (<code>*in11 = *OFF</code>).</li> <li> <p>Set Default Open Invoices: Sets the <code>cOPEN</code> flag to 'O' to display only open invoices by default.</p> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program enters a <code>DoW</code> (Do While) loop that continues until the <code>EXIT</code> indicator is turned on (e.g., user presses a function key to exit).</li> <li>Clear Subfile: Initializes the subfile control indicators (<code>SFLDSP</code>, <code>SFLCLR</code>), clears subfile variables (<code>MORE</code>, <code>sftermI</code>, <code>sfamt</code>, <code>invdatI</code>, <code>invdt8I</code>), and writes the subfile control record (<code>SFLCTL1</code>) to clear the subfile.</li> <li> <p>Check Subfile Display: If the subfile is ready to display (<code>SFLDSP = *On</code>), the program proceeds to retrieve company and customer data.</p> </li> <li> <p>Retrieve Company and Customer Data (GetCo Subroutine):</p> </li> <li>Retrieve AR Control Data: Reads the <code>ARCONT</code> file using the company code (<code>cco</code>). If not found, initializes aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>) to zero.</li> <li>Set Aging Bucket Headings: Defines aging bucket descriptions (<code>xAGE1</code> to <code>xAGE5</code>) based on the AR control limits (<code>aclmt1</code> to <code>aclmt4</code>). For example:<ul> <li><code>xAGE1 = 'CURRENT'</code></li> <li><code>xAGE2 = ' 1 - ' + aclmt1</code></li> <li>Assigns these to subfile fields (<code>cage1</code> to <code>cage5</code>).</li> </ul> </li> <li> <p>Retrieve Customer Master: Reads the <code>ARCUST</code> file using the company (<code>cco</code>) and customer (<code>ccust</code>) keys. If not found, sets customer details (e.g., <code>arname</code>, <code>aradr1</code>, etc.) to indicate \"Customer Master not found\" or blanks.</p> </li> <li> <p>Load Subfile (Main Loop):</p> </li> <li>Read AR Detail Records: Sets the lower limit (<code>SetLL</code>) on the <code>ARDETL</code> file using company (<code>cco</code>) and customer (<code>ccust</code>) keys, then reads records in a <code>DoW</code> loop using <code>ReadE</code>.</li> <li>Filter Records:<ul> <li>Skips deleted (<code>adDEL = 'D'</code>) or inactive (<code>adDEL = 'I'</code>) records.</li> <li>Skips open payment (<code>ADTYPE = 'P'</code>) or adjustment (<code>ADTYPE = 'J'</code>) records when <code>cOPEN = 'O'</code>.</li> <li>Skips fully paid invoices (<code>ADTYPE = 'I'</code> and <code>ADPART + ADPAY = ADAMT</code>) when <code>cOPEN = 'O'</code>.</li> </ul> </li> <li>Populate Subfile (SFfill Subroutine): For valid records, fills subfile fields:<ul> <li>Convert Dates: Converts transaction (<code>adtym8</code>) and due dates (<code>addud8</code>) from <code>YYYYMMDD</code> to <code>MM/DD/YYYY</code> format for display (<code>trdat</code>, <code>dudat</code>).</li> <li>Handle Record Types:</li> <li>Invoice ('I'):<ul> <li>Sets <code>sftype = ' INVOICE'</code> and <code>sftypeI = '1'</code>.</li> <li>Calculates open amount (<code>sfamt = adamt - adpart - adpay</code>) if <code>cOPEN = 'O'</code>, else uses <code>adamt</code>.</li> <li>Retrieves terms description from <code>GSTABL</code> using the terms code (<code>adterm</code>). If not found, uses the terms code as the description.</li> <li>Sets invoice date (<code>invdat</code>, <code>invdatI</code>) to <code>trdat</code>.</li> </ul> </li> <li>Adjustment ('J'):<ul> <li>Sets <code>sftype = 'ADJUST '</code>.</li> <li>Uses <code>adamt</code> as <code>sfamt</code>.</li> <li>Calls <code>GetDays</code> to calculate days between transaction and due dates.</li> </ul> </li> <li>Payment ('P'):<ul> <li>Sets <code>sftype = 'PAYMENT'</code>.</li> <li>Uses <code>adamt</code> as <code>sfamt</code>.</li> <li>Calls <code>GetDays</code> to calculate days.</li> </ul> </li> <li>Aging Description: Assigns the aging bucket description (<code>sfage</code>) based on the <code>adage</code> value (1 to 5, mapping to <code>cage1</code> to <code>cage5</code>).</li> </ul> </li> <li> <p>Write Subfile Record: Increments the relative record number (<code>RRN</code>) and writes the subfile record (<code>SFL1</code>). If <code>RRN</code> exceeds 9990, sets <code>MORE</code> to indicate not all records are displayed and exits the loop.</p> </li> <li> <p>Display Subfile:</p> </li> <li> <p>Sets <code>SFLDSP = *On</code> and executes <code>ExFmt</code> to display the subfile control record (<code>SFLCTL1</code>) on the workstation screen, allowing user interaction (e.g., scrolling, selecting records, or exiting).</p> </li> <li> <p>Repeat or Exit:</p> </li> <li>After displaying the subfile, the program loops back to check if <code>EXIT</code> is turned on. If not, it repeats the process (e.g., clears subfile, reloads data if user changes input). If <code>EXIT</code> is on, the program sets <code>*InLr = *On</code> and terminates.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ol> <li>GSGENIE2C:</li> <li>Purpose: Checks if the program is running in the Genie environment by setting the <code>genievar</code> variable to 'YES' or 'NO'.</li> <li> <p>Parameters:</p> <ul> <li><code>genievar</code> (char(3)): Output parameter indicating Genie environment status.</li> </ul> </li> <li> <p>GSDTCLC2:</p> </li> <li>Purpose: Calculates the difference in days between two dates.</li> <li>Parameters:<ul> <li><code>p#dat1</code> (Packed(8:0)): First date in <code>CCYYMMDD</code> format.</li> <li><code>p#dat2</code> (Packed(8:0)): Second date in <code>CCYYMMDD</code> format.</li> <li><code>p#fmt</code> (char(1)): Format of difference ('D' for days).</li> <li><code>p#diff</code> (Packed(10:2)): Output for the calculated difference.</li> <li><code>p#err</code> (char(1)): Error flag.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR810UD:</li> <li>Type: Workstation file (display file).</li> <li>Usage: External (<code>*Ext</code>), handled by Profound UI (<code>PROFOUNDUI(HANDLER)</code>).</li> <li> <p>Description: Contains the subfile (<code>SFL1</code>) and control record (<code>SFLCTL1</code>) for displaying invoice inquiry data on the screen.</p> </li> <li> <p>ARDETL:</p> </li> <li>Type: Disk file (database file).</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores AR transaction details (e.g., invoices, payments, adjustments). Keyed by company (<code>cco</code>) and customer (<code>ccust</code>). Fields include <code>adDEL</code>, <code>ADTYPE</code>, <code>ADPART</code>, <code>ADPAY</code>, <code>ADAMT</code>, <code>adtym8</code>, <code>addud8</code>, <code>adage</code>, <code>adterm</code>.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores general system control data, including the default company code (<code>gxcono</code>). Keyed by <code>gskey</code>.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores AR control data, including aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>). Keyed by company (<code>cco</code>).</p> </li> <li> <p>ARCUST:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li> <p>Description: Stores customer master data (e.g., name, address). Keyed by company (<code>cco</code>) and customer (<code>ccust</code>). Fields include <code>arname</code>, <code>aradr1</code>, <code>aradr2</code>, <code>aradr3</code>, <code>aradr4</code>, <code>arzip5</code>.</p> </li> <li> <p>GSTABL:</p> </li> <li>Type: Disk file.</li> <li>Usage: Input, keyed.</li> <li>Description: Stores general system table data, including terms descriptions (<code>TBDESC</code>). Keyed by a composite key (<code>ARTERM</code> + terms code).</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/AR810U%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR810U</code> program is designed to display AR invoice details for a specific company and customer in a subfile, filtering out deleted records and optionally showing only open invoices. It retrieves data from multiple files, calculates aging buckets, and formats dates for display. The program interacts with the user through a workstation display and terminates when the user exits. It relies on two external programs (<code>GSGENIE2C</code> and <code>GSDTCLC2</code>) for environment checks and date calculations, and uses five database files (<code>ARDETL</code>, <code>GSCONT</code>, <code>ARCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>) for data retrieval, along with the <code>AR810UD</code> display file for user interaction.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/","title":"Summary AR810U RPGLE","text":"<p>Based on the provided RPGLE program <code>AR810U.rpgle</code>, I will first identify the use cases implemented by the program. Then, I will create a concise function requirement document for a large function that encapsulates the primary use case, assuming it processes inputs programmatically rather than through screen interaction. The function will focus on business requirements, process steps, and necessary calculations.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#list-of-use-cases-implemented-by-ar810u","title":"List of Use Cases Implemented by AR810U","text":"<p>The <code>AR810U.rpgle</code> program implements a single primary use case:</p> <ol> <li>Accounts Receivable Invoice Inquiry:</li> <li>Description: Retrieves and displays detailed Accounts Receivable (AR) transaction information (invoices, payments, adjustments) for a specified company and customer. The program filters transactions based on open/closed status, excludes deleted or inactive records, and provides aging bucket information for open invoices.</li> <li>Purpose: Allows users to inquire about a customer\u2019s AR transactions, including invoice amounts, payment status, terms, and aging details, to support financial analysis or customer account management.</li> <li>Key Features:<ul> <li>Filters transactions to show only open invoices by default (<code>cOPEN = 'O'</code>).</li> <li>Retrieves customer and company details for context.</li> <li>Calculates open invoice amounts and aging buckets.</li> <li>Displays terms descriptions and days between transaction and due dates for adjustments/payments.</li> </ul> </li> </ol> <p>No additional use cases are implemented, as the program focuses solely on this inquiry functionality within the Genie environment.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#ar-invoice-inquiry-function-requirements","title":"AR Invoice Inquiry Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#function-name","title":"Function Name","text":"<p><code>GetARInvoiceDetails</code></p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#purpose","title":"Purpose","text":"<p>Retrieve detailed Accounts Receivable (AR) transaction information for a specified company and customer, including invoices, payments, and adjustments, with calculated open amounts, aging buckets, and terms descriptions. The function supports financial analysis and customer account management by providing filtered transaction data programmatically.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li><code>companyCode</code> (Numeric, 2 digits): Company identifier (e.g., <code>cco</code>).</li> <li><code>customerCode</code> (Numeric, 6 digits): Customer identifier (e.g., <code>ccust</code>).</li> <li><code>openOnly</code> (Character, 1): Flag to filter open transactions ('O') or include all ('A').</li> <li><code>currentDate</code> (Date, CCYYMMDD): System date for aging calculations.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li><code>transactionList</code> (Array of Transaction Records):</li> <li><code>transactionType</code> (String): 'INVOICE', 'PAYMENT', or 'ADJUST'.</li> <li><code>typeCode</code> (Character, 1): '1' (Invoice), '0' (Payment/Adjustment).</li> <li><code>amount</code> (Numeric, 15,2): Transaction amount (open amount for invoices if <code>openOnly = 'O'</code>).</li> <li><code>transactionDate</code> (Date, MM/DD/YYYY): Transaction date.</li> <li><code>dueDate</code> (Date, MM/DD/YYYY): Due date.</li> <li><code>termsCode</code> (Numeric, 2): Invoice terms code (if applicable).</li> <li><code>termsDescription</code> (String, 30): Terms description (e.g., '02-NET 30').</li> <li><code>agingBucket</code> (String, 10): Aging description (e.g., 'CURRENT', '1-30').</li> <li><code>daysDifference</code> (Numeric, 10,2): Days between transaction and due date (for payments/adjustments).</li> <li><code>customerDetails</code>:</li> <li><code>name</code> (String, 40): Customer name.</li> <li><code>address</code> (Array of String): Address lines (up to 4).</li> <li><code>zipCode</code> (String, 5): ZIP code.</li> <li><code>agingBuckets</code> (Array of String): Descriptions for aging buckets (e.g., ['CURRENT', '1-30', '31-60', ...]).</li> <li><code>moreRecords</code> (String): Indicator if more records exist (e.g., 'More history...').</li> <li><code>errorMessage</code> (String): Error description if processing fails (e.g., 'Customer not found').</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Ensure <code>companyCode</code> and <code>customerCode</code> are valid (non-zero, correct format).</li> <li>Default <code>openOnly</code> to 'O' if invalid.</li> <li>Validate <code>currentDate</code> as a valid CCYYMMDD date.</li> <li>Retrieve Company Control Data:</li> <li>Read AR control record (<code>ARCONT</code>) for <code>companyCode</code>.</li> <li>Extract aging bucket limits (<code>aclmt1</code>, <code>aclmt2</code>, <code>aclmt3</code>, <code>aclmt4</code>).</li> <li>Define aging bucket descriptions:<ul> <li>Bucket 1: 'CURRENT'</li> <li>Bucket 2: '1 - <code>aclmt1</code>'</li> <li>Bucket 3: '<code>aclmt1 + 1</code> - <code>aclmt2</code>'</li> <li>Bucket 4: '<code>aclmt2 + 1</code> - <code>aclmt3</code>'</li> <li>Bucket 5: '<code>aclmt3 + 1</code> - <code>aclmt4</code>'</li> </ul> </li> <li>If not found, set limits to 0.</li> <li>Retrieve Customer Data:</li> <li>Read customer master record (<code>ARCUST</code>) using <code>companyCode</code> and <code>customerCode</code>.</li> <li>Extract name, address lines, and ZIP code.</li> <li>If not found, set <code>name</code> to 'Customer Master not found' and clear other fields.</li> <li>Retrieve AR Transactions:</li> <li>Read AR detail records (<code>ARDETL</code>) for <code>companyCode</code> and <code>customerCode</code>.</li> <li>Filter records:<ul> <li>Exclude deleted (<code>adDEL = 'D'</code>) or inactive (<code>adDEL = 'I'</code>) records.</li> <li>If <code>openOnly = 'O'</code>:</li> <li>Exclude payments (<code>ADTYPE = 'P'</code>) or adjustments (<code>ADTYPE = 'J'</code>).</li> <li>Exclude fully paid invoices (<code>ADTYPE = 'I'</code> where <code>ADPART + ADPAY = ADAMT</code>).</li> </ul> </li> <li>Limit output to 9990 records; set <code>moreRecords</code> if exceeded.</li> <li>Process Each Transaction:</li> <li>Convert transaction date (<code>adtym8</code>) and due date (<code>addud8</code>) from CCYYMMDD to MM/DD/YYYY.</li> <li>For each valid record:<ul> <li>Invoice (<code>ADTYPE = 'I'</code>):</li> <li>Set <code>transactionType = 'INVOICE'</code>, <code>typeCode = '1'</code>.</li> <li>If <code>openOnly = 'O'</code>, calculate <code>amount = ADAMT - ADPART - ADPAY</code>; else <code>amount = ADAMT</code>.</li> <li>Set <code>termsCode = ADTERM</code>.</li> <li>Retrieve terms description from <code>GSTABL</code> using key 'ARTERM' + <code>ADTERM</code>. If not found, use <code>ADTERM</code> as description.</li> <li>Set <code>transactionDate</code> to converted <code>adtym8</code>.</li> <li>Payment (<code>ADTYPE = 'P'</code>):</li> <li>Set <code>transactionType = 'PAYMENT'</code>, <code>typeCode = '0'</code>.</li> <li>Set <code>amount = ADAMT</code>.</li> <li>Calculate <code>daysDifference</code> using <code>GSDTCLC2</code> (difference between <code>adtym8</code> and <code>addud8</code> in days).</li> <li>Adjustment (<code>ADTYPE = 'J'</code>):</li> <li>Set <code>transactionType = 'ADJUST'</code>, <code>typeCode = '0'</code>.</li> <li>Set <code>amount = ADAMT</code>.</li> <li>Calculate <code>daysDifference</code> using <code>GSDTCLC2</code>.</li> <li>Assign <code>agingBucket</code> based on <code>ADAGE</code> (1-5, mapping to bucket descriptions).</li> </ul> </li> <li>Return Results:</li> <li>Package <code>transactionList</code>, <code>customerDetails</code>, <code>agingBuckets</code>, <code>moreRecords</code>, and <code>errorMessage</code>.</li> <li>If no errors, set <code>errorMessage</code> to empty; otherwise, describe the issue (e.g., 'Invalid company code').</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Transaction Filtering:</li> <li>Deleted or inactive records are always excluded.</li> <li>Open-only mode (<code>openOnly = 'O'</code>) excludes payments, adjustments, and fully paid invoices.</li> <li>Amount Calculation:</li> <li>For open invoices, amount is reduced by partial payments (<code>ADPART</code>) and payments applied (<code>ADPAY</code>).</li> <li>Aging Buckets:</li> <li>Defined by AR control limits, with 'CURRENT' as the first bucket.</li> <li>Transactions are categorized based on <code>ADAGE</code> (1-5).</li> <li>Terms Description:</li> <li>Must include terms code and description (e.g., '02-NET 30') from <code>GSTABL</code> or default to terms code.</li> <li>Date Conversion:</li> <li>All dates are converted to MM/DD/YYYY for consistency.</li> <li>Record Limit:</li> <li>Maximum 9990 transactions; excess triggers <code>moreRecords</code> warning.</li> <li>Error Handling:</li> <li>Invalid inputs or missing master data (customer, company) return descriptive errors.</li> <li>Date conversion errors set dates to default low-value.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs:</li> <li><code>GSDTCLC2</code>: Calculates days between two dates (CCYYMMDD format).</li> <li>Files:</li> <li><code>ARCONT</code>: AR control data for aging buckets.</li> <li><code>ARCUST</code>: Customer master data.</li> <li><code>ARDETL</code>: AR transaction details.</li> <li><code>GSTABL</code>: Terms descriptions.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR810U%20Invoice%20Inquiry/Summary%20AR810U%20RPGLE/#assumptions","title":"Assumptions","text":"<ul> <li>Input dates are in CCYYMMDD format.</li> <li><code>GSDTCLC2</code> is available and reliable for date calculations.</li> <li>All files (<code>ARCONT</code>, <code>ARCUST</code>, <code>ARDETL</code>, <code>GSTABL</code>) are accessible and correctly keyed.</li> <li>The function runs in a non-interactive environment, replacing screen-based input/output.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/","title":"AR830U RPGLE","text":"<p>The provided code is an RPGLE program (<code>AR830U.rpgle</code>), not an OCL program. It implements an AR (Accounts Receivable) Invoice History Inquiry for displaying invoice history records based on user-specified criteria. Below, I\u2019ll explain the process steps, list the external programs called, and identify the tables (files) used.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#process-steps-of-the-ar830u-rpgle-program","title":"Process Steps of the AR830U RPGLE Program","text":"<p>The program is designed to run in a Genie environment (a web-based interface for IBM i applications) and displays invoice history records in a subfile (a scrollable list on a workstation display). Here\u2019s a step-by-step breakdown of its processing:</p> <ol> <li>Program Initialization:</li> <li>Control Specifications: The program uses free-format RPGLE with <code>Ctl-Opt DftActGrp(*No)</code>, indicating it runs in a named activation group for better resource management.</li> <li>File Declarations: Declares:<ul> <li><code>AR830UD</code>: A workstation file (display file) with a subfile (<code>SFL1</code>) for user interaction, handled by Profound UI (a web interface tool).</li> <li><code>ARHIST</code>, <code>GSCONT</code>, <code>ARCUST</code>, <code>GSTABL</code>: Input files (tables) for invoice history, company control, customer master, and table data, respectively, accessed with keys.</li> </ul> </li> <li>Variable Declarations: Defines variables for processing, including subfile record number (<code>RRN</code>), date calculations, and temporary fields for invoice data.</li> <li>Check Genie Environment: Calls <code>GSGENIE2C</code> to retrieve the <code>genievar</code> variable. If <code>genievar</code> is not <code>'YES'</code>, the program terminates (sets <code>*InLr = *On</code> and returns), ensuring it only runs in the Genie interface.</li> <li>Default Company Retrieval: Retrieves the default company number (<code>gxcono</code>) from the <code>GSCONT</code> file using key <code>gskey = *zero</code>. If found and valid, sets the company number (<code>cco</code>) and positions the cursor at the customer field (<code>*in11 = *ON</code>); otherwise, positions it at the company field.</li> <li>Set Default Date: Initializes the invoice date filter (<code>cinvdat</code>) to today\u2019s date minus 2 years (changed from 5 years per LMS01 modification on 8/8/24).</li> <li> <p>Indicator Initialization: Sets <code>REFRESH</code> and <code>EXIT</code> indicators to <code>*Off</code> and clears subfile display/control flags (<code>SFLDSP</code>, <code>SFLCLR</code>).</p> </li> <li> <p>Main Processing Loop (<code>DoW EXIT = *Off</code>):</p> </li> <li>Clear Subfile:<ul> <li>Sets <code>SFLCLR = *On</code>, writes to the subfile control record (<code>SFLCTL1</code>) to clear it, then resets <code>SFLCLR = *Off</code>.</li> <li>Resets subfile record number (<code>RRN = 0</code>) and clears <code>MORE</code> and <code>sftermI</code>.</li> </ul> </li> <li>Retrieve Customer Information:<ul> <li>If the subfile is to be displayed (<code>SFLDSP = *On</code>), retrieves customer details from <code>ARCUST</code> using keys <code>cco</code> (company) and <code>ccust</code> (customer).</li> <li>If no customer record is found, sets default values (e.g., <code>arname = 'Customer Master not found'</code>).</li> </ul> </li> <li>Convert Date Format:<ul> <li>Converts the user-entered invoice date (<code>cinvdat</code>, MM/DD/YYYY) to <code>cinvcymd</code> (YYYYMMDD) for comparison with invoice history dates.</li> </ul> </li> <li>Load Subfile with Invoice History:<ul> <li>Sets the lower limit (<code>SetLL</code>) on <code>ARHIST</code> using keys <code>cco</code> and <code>ccust</code>.</li> <li>Reads records (<code>ReadE</code>) from <code>ARHIST</code> matching the company and customer.</li> <li>For each record:</li> <li>Skip Deleted Records: If <code>ahDEL</code> is <code>'D'</code> or <code>'I'</code>, skips the record (<code>iter</code>).</li> <li>Date Filter: If the invoice date (<code>AHIND8</code>, YYYYMMDD) is earlier than <code>cinvcymd</code>, skips the record.</li> <li>Populate Subfile Record: Calls subroutine <code>SFfill</code> to format the record data.</li> <li>Write to Subfile: Increments <code>RRN</code> and writes the record to <code>SFL1</code>.</li> <li>Limit Check: If <code>RRN</code> exceeds 9990, sets <code>MORE = 'More history...not all included...'</code> and exits the read loop.</li> </ul> </li> <li>Display Subfile:<ul> <li>Sets <code>SFLDSP = *On</code> and executes <code>ExFmt SFLCTL1</code> to display the subfile to the user.</li> </ul> </li> <li> <p>Loop Continuation: Continues the loop until the user exits (<code>EXIT = *On</code>).</p> </li> <li> <p>Subroutine: SFfill:</p> </li> <li>Formats data for a subfile record based on the invoice type (<code>ahtype</code>):<ul> <li>Invoice (ahtype = 'I'):</li> <li>Sets <code>sftype = ' INVOICE'</code> and <code>sftypeI = '1'</code>.</li> <li>Retrieves terms code (<code>ahterm</code>) and looks up its description in <code>GSTABL</code> using key <code>ktbcode = '    ' + sftermI</code>.</li> <li>If no description is found, uses <code>ktbcode</code>; otherwise, formats as <code>ktbcode + '-' + TBDESC</code>.</li> <li>Adjustment (ahtype = 'J') or Payment (ahtype = 'P'):</li> <li>Sets <code>sftype</code> to <code>'ADJUST '</code> or <code>'PAYMENT'</code>, respectively.</li> <li>Calls <code>GetDays</code> subroutine to calculate the difference between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>).</li> </ul> </li> <li> <p>Date Conversion:</p> <ul> <li>Converts invoice date (<code>ahind8</code>), due date (<code>ahdud8</code>), and transaction date (<code>ahtda8</code>) from YYYYMMDD to MM/DD/YYYY format using <code>%date</code> and <code>%char</code>.</li> <li>Uses <code>monitor</code> blocks to handle invalid dates, setting them to <code>*loval</code> if errors occur.</li> </ul> </li> <li> <p>Subroutine: GetDays:</p> </li> <li>Calls external program <code>GSDTCLC2</code> to calculate the difference in days between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>).</li> <li>Sets parameters: <code>p#dat1 = ahtda8</code>, <code>p#dat2 = ahdud8</code>, <code>p#fmt = 'D'</code> (days), and clears <code>p#diff</code> and <code>p#err</code>.</li> <li> <p>Stores the result in <code>sfdays = p#diff</code>.</p> </li> <li> <p>Program Termination:</p> </li> <li>When the user exits (<code>EXIT = *On</code>), sets <code>*InLr = *On</code> and returns, ending the program.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The program calls two external programs: 1. GSGENIE2C:    - Purpose: Retrieves the <code>genievar</code> variable to check if the program is running in the Genie environment.    - Parameter: <code>genievar</code> (char(3), output, values <code>'YES'</code> or <code>'NO'</code>). 2. GSDTCLC2:    - Purpose: Calculates the difference in days between two dates.    - Parameters:      - <code>p#dat1</code> (Packed(8:0), input, date 1 in CCYYMMDD format).      - <code>p#dat2</code> (Packed(8:0), input, date 2 in CCYYMMDD format).      - <code>p#fmt</code> (char(1), input, format <code>'D'</code> for days).      - <code>p#diff</code> (Packed(10:2), output, date difference).      - <code>p#err</code> (char(1), output, error flag).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files (tables): 1. AR830UD:    - Type: Workstation file (display file).    - Usage: Output/Input for user interface.    - Subfile: <code>SFL1</code> with relative record number (<code>RRN</code>).    - Handler: Managed by Profound UI (<code>PROFOUNDUI(HANDLER)</code>). 2. ARHIST:    - Type: Physical file (database table).    - Usage: Input, keyed access.    - Purpose: Stores accounts receivable invoice history records.    - Keys: <code>cco</code> (company number), <code>ccust</code> (customer number). 3. GSCONT:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores company control information, including default company number (<code>gxcono</code>).    - Key: <code>gskey</code> (likely a control key, set to <code>*zero</code>). 4. ARCUST:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores customer master data (e.g., name, address).    - Keys: <code>cco</code> (company number), <code>ccust</code> (customer number). 5. GSTABL:    - Type: Physical file.    - Usage: Input, keyed access.    - Purpose: Stores table data, including terms descriptions (<code>TBDESC</code>).    - Keys: Table code (<code>'ARTERM'</code>), terms code (<code>ktbcode</code>).</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/AR830U%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR830U</code> RPGLE program is an interactive inquiry tool that displays invoice history records for a specified company and customer, filtered by date (defaulting to the last 2 years). It uses a subfile to present data, retrieves additional details from customer and terms tables, and calculates date differences for adjustments and payments. The program ensures it runs in a Genie environment and leverages external programs for specific tasks.</p> <p>If you need further clarification or details about specific parts of the program, let me know!</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/","title":"Summary AR830U RPGLE","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#list-of-use-cases-implemented-by-ar830u-rpgle-program","title":"List of Use Cases Implemented by AR830U RPGLE Program","text":"<p>The <code>AR830U.rpgle</code> program implements a single primary use case:</p> <ol> <li>Accounts Receivable Invoice History Inquiry:</li> <li>Description: Allows users to view accounts receivable (AR) invoice history for a specified company and customer, filtered by an invoice date (defaulting to the last 2 years). The program retrieves and displays invoice, adjustment, and payment records, including details like invoice type, terms, and date differences between transaction and due dates, using a subfile interface in a Genie environment.</li> <li>Inputs: Company number (<code>cco</code>), customer number (<code>ccust</code>), and invoice date filter (<code>cinvdat</code>).</li> <li>Outputs: A subfile displaying AR history records with fields such as invoice number, type, dates, terms description, and days between transaction and due dates for adjustments/payments.</li> <li>Constraints: Only runs in Genie environment (<code>genievar = 'YES'</code>), skips deleted records (<code>ahDEL = 'D' or 'I'</code>), and limits records to those with invoice dates within the specified range.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#function-requirement-document-for-ar-invoice-history-inquiry","title":"Function Requirement Document for AR Invoice History Inquiry","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#ar-invoice-history-inquiry-function-requirements","title":"AR Invoice History Inquiry Function Requirements","text":""},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#purpose","title":"Purpose","text":"<p>Provide a function to retrieve and return accounts receivable (AR) invoice history records for a specified company and customer, filtered by a date range, to support financial analysis and customer account management.</p>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>cco</code>): String (company identifier).</li> <li>Customer Number (<code>ccust</code>): String (customer identifier).</li> <li>Invoice Date Filter (<code>cinvdat</code>): Date (MM/DD/YYYY format, defaults to today minus 2 years).</li> <li>Environment Flag (<code>genievar</code>): String (<code>'YES'</code> to confirm Genie environment, otherwise function exits).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#outputs","title":"Outputs","text":"<ul> <li>A list of AR history records containing:</li> <li>Invoice number (<code>ahinvc</code>).</li> <li>Invoice type description (<code>sftype</code>): <code>'INVOICE'</code>, <code>'ADJUST'</code>, or <code>'PAYMENT'</code>.</li> <li>Terms description (<code>sftmdesc</code>): For invoices, terms code plus description (e.g., <code>'01-Net 30'</code>); for others, blank.</li> <li>Invoice date (<code>invdat</code>): MM/DD/YYYY format.</li> <li>Due date (<code>dudat</code>): MM/DD/YYYY format.</li> <li>Transaction date (<code>trdat</code>): MM/DD/YYYY format.</li> <li>Days difference (<code>sfdays</code>): Days between transaction and due dates for adjustments/payments; zero for invoices.</li> <li>Customer details: Name (<code>arname</code>), address (<code>aradr1</code>, <code>aradr2</code>, <code>aradr3</code>, <code>aradr4</code>), zip code (<code>arzip5</code>).</li> <li>Status message (<code>MORE</code>): Indicates if record limit (9990) was reached (<code>'More history...not all included...'</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Environment: Check if <code>genievar = 'YES'</code>. If not, exit with no output.</li> <li>Retrieve Default Company: Query <code>GSCONT</code> with key <code>gskey = 0</code> to get default company number (<code>gxcono</code>). Set <code>cco = gxcono</code> if valid; otherwise, use provided <code>cco</code>.</li> <li>Retrieve Customer Details: Query <code>ARCUST</code> with keys <code>cco</code> and <code>ccust</code>. If not found, set <code>arname = 'Customer Master not found'</code> and clear address fields.</li> <li>Convert Date Filter: Convert <code>cinvdat</code> (MM/DD/YYYY) to <code>cinvcymd</code> (YYYYMMDD) for comparison.</li> <li>Retrieve AR History:</li> <li>Query <code>ARHIST</code> with keys <code>cco</code> and <code>ccust</code>.</li> <li>Filter records:<ul> <li>Exclude records where <code>ahDEL = 'D'</code> or <code>'I'</code> (deleted/inactive).</li> <li>Exclude records where invoice date (<code>ahind8</code>, YYYYMMDD) is earlier than <code>cinvcymd</code>.</li> </ul> </li> <li>Process Each Record:</li> <li>Invoice Type Handling:<ul> <li>If <code>ahtype = 'I'</code> (Invoice):</li> <li>Set <code>sftype = 'INVOICE'</code>, <code>sftypeI = '1'</code>, <code>sftermI = ahterm</code>.</li> <li>Query <code>GSTABL</code> with keys <code>'ARTERM'</code> and <code>ktbcode = '    ' + sftermI</code> to get terms description (<code>TBDESC</code>). Set <code>sftmdesc = ktbcode + '-' + TBDESC</code> or <code>ktbcode</code> if not found.</li> <li>Set <code>sfdays = 0</code>.</li> <li>If <code>ahtype = 'J'</code> (Adjustment) or <code>'P'</code> (Payment):</li> <li>Set <code>sftype = 'ADJUST'</code> or <code>'PAYMENT'</code>.</li> <li>Calculate days difference (<code>sfdays</code>) between transaction date (<code>ahtda8</code>) and due date (<code>ahdud8</code>) using <code>GSDTCLC2</code>.</li> </ul> </li> <li>Date Conversion:<ul> <li>Convert <code>ahind8</code>, <code>ahdud8</code>, <code>ahtda8</code> (YYYYMMDD) to MM/DD/YYYY for <code>invdat</code>, <code>dudat</code>, <code>trdat</code>.</li> <li>Handle invalid dates by setting to a default low value.</li> </ul> </li> <li>Record Limit Check: Stop processing if record count exceeds 9990 and set <code>MORE</code> message.</li> <li>Return Results: Output the list of formatted records and status message.</li> </ol>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#business-rules","title":"Business Rules","text":"<ul> <li>Environment Restriction: Function only processes if running in Genie environment (<code>genievar = 'YES'</code>).</li> <li>Date Filter: Only include records with invoice dates on or after the specified date (default: today minus 2 years).</li> <li>Record Exclusion: Skip deleted (<code>ahDEL = 'D'</code>) or inactive (<code>ahDEL = 'I'</code>) records.</li> <li>Record Limit: Maximum of 9990 records returned to prevent overflow.</li> <li>Customer Validation: If customer not found in <code>ARCUST</code>, return default error message for name and clear address fields.</li> <li>Terms Description: For invoices, append terms code and description from <code>GSTABL</code>; for adjustments/payments, leave blank.</li> <li>Date Difference Calculation: For adjustments and payments, compute days between transaction and due dates; for invoices, set to zero.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#calculations","title":"Calculations","text":"<ul> <li>Date Difference (<code>sfdays</code>):</li> <li>For <code>ahtype = 'J'</code> or <code>'P'</code>, call <code>GSDTCLC2</code> with:<ul> <li><code>p#dat1 = ahtda8</code> (transaction date, YYYYMMDD).</li> <li><code>p#dat2 = ahdud8</code> (due date, YYYYMMDD).</li> <li><code>p#fmt = 'D'</code> (days format).</li> <li>Output: <code>p#diff</code> (days difference, Packed(10:2)).</li> <li>Error handling: Set <code>p#err</code> if calculation fails.</li> </ul> </li> <li>Result stored in <code>sfdays</code>.</li> <li>Date Conversion:</li> <li>Convert YYYYMMDD dates (<code>ahind8</code>, <code>ahdud8</code>, <code>ahtda8</code>) to MM/DD/YYYY using <code>%date</code> and <code>%char(*iso0)</code>.</li> <li>Handle invalid dates by setting to a low value.</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Programs:</li> <li><code>GSGENIE2C</code>: Returns <code>genievar</code> to validate Genie environment.</li> <li><code>GSDTCLC2</code>: Calculates days difference between two dates.</li> <li>Files:</li> <li><code>GSCONT</code>: Provides default company number (<code>gxcono</code>).</li> <li><code>ARCUST</code>: Provides customer details (name, address, zip).</li> <li><code>ARHIST</code>: Stores AR invoice history records.</li> <li><code>GSTABL</code>: Stores terms descriptions (<code>TBDESC</code>).</li> </ul>"},{"location":"accounts-receivable/04%20AR%20Invoices/AR830U%20Invoice%20History%20Inquiry/Summary%20AR830U%20RPGLE/#constraints","title":"Constraints","text":"<ul> <li>Maximum 9990 records to prevent subfile overflow.</li> <li>Invalid dates are handled gracefully with default low values.</li> <li>Function assumes valid company/customer inputs; invalid inputs may result in no records or default customer error message.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/","title":"AR930 OCL","text":"<p>The provided document is an Operation Control Language (OCL) script, specifically for an IBM System/36 environment, used to manage the execution of an RPG (Report Program Generator) program named <code>AR930</code>. Below, I\u2019ll explain the process steps of the OCL script, identify the external programs called, and list the tables (files) used.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>OCL is a scripting language used on IBM System/36 to control job execution, load programs, and manage file operations. The script <code>AR930.ocl36.txt</code> outlines the steps to execute the <code>AR930</code> RPG program, which appears to be related to Accounts Receivable (A/R) control file maintenance. Here\u2019s a breakdown of each step:</p> <ol> <li>Invoke the GSGENIEC Program:    <pre><code>// CALL PGM(GSGENIEC)\n</code></pre></li> <li> <p>The script starts by calling an external program named <code>GSGENIEC</code>. This program likely performs some initialization, validation, or setup tasks required before proceeding with the main program. The exact functionality of <code>GSGENIEC</code> is not specified in the script, but it\u2019s a prerequisite for the job.</p> </li> <li> <p>Conditional Check:    <pre><code>// IFF ?L'506,3'?/YES   RETURN\n</code></pre></p> </li> <li>The <code>IFF</code> (If) statement checks a condition using a system variable or parameter <code>?L'506,3'?</code>. This likely refers to a specific location in the Local Data Area (LDA) or a similar system construct, checking positions 506 to 508 (3 bytes).</li> <li> <p>If the condition evaluates to <code>YES</code> (true), the script executes the <code>RETURN</code> command, which terminates the job immediately. This suggests a conditional exit based on some predefined system state or parameter (e.g., a flag indicating whether the job should proceed).</p> </li> <li> <p>Set Procedure Parameters:    <pre><code>// SCPROCP ,,,,,,,,?9?\n</code></pre></p> </li> <li> <p>The <code>SCPROCP</code> command sets up procedure parameters. The commas indicate placeholder values, and <code>?9?</code> is a parameter substitution, likely specifying a library, file, or environment setting (e.g., a diskette or library identifier). This step configures the environment for the subsequent program execution.</p> </li> <li> <p>Invoke GSY2K:    <pre><code>// GSY2K\n</code></pre></p> </li> <li> <p>The <code>GSY2K</code> command calls another program or procedure, likely related to Year 2000 (Y2K) compliance or date handling. This could be a utility to ensure date fields are processed correctly, which was critical for A/R systems during the Y2K transition.</p> </li> <li> <p>Load the AR930 Program:    <pre><code>// LOAD AR930\n</code></pre></p> </li> <li> <p>The <code>LOAD</code> command loads the RPG program <code>AR930</code> into memory for execution. This is the main program responsible for A/R control file maintenance.</p> </li> <li> <p>Specify Input Files:    <pre><code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR\n// FILE NAME-ARCUST,LABEL-?9?ARCUST,DISP-SHR\n// FILE NAME-GLMAST,LABEL-?9?GLMAST,DISP-SHR\n</code></pre></p> </li> <li>These <code>FILE</code> statements define the files used by the <code>AR930</code> program:<ul> <li><code>ARCONT</code>: Likely the A/R control file, containing configuration or summary data for accounts receivable.</li> <li><code>ARCUST</code>: The A/R customer file, storing customer-specific data (e.g., account details, balances).</li> <li><code>GLMAST</code>: The General Ledger master file, used for integrating A/R transactions with the general ledger.</li> </ul> </li> <li> <p>The <code>LABEL-?9?ARCONT</code> syntax indicates that the file label is dynamically substituted with the value of <code>?9?</code> (e.g., a library or diskette name). <code>DISP-SHR</code> specifies that the files are opened in shared mode, allowing concurrent access by other programs.</p> </li> <li> <p>Execute the Program:    <pre><code>// RUN\n</code></pre></p> </li> <li>The <code>RUN</code> command executes the loaded <code>AR930</code> program, which processes the specified files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GLMAST</code>) to perform A/R control file maintenance tasks, such as updating control records, validating customer data, or posting transactions to the general ledger.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly calls the following external programs or procedures: 1. GSGENIEC: Likely a setup or validation program executed at the start. 2. GSY2K: Possibly a Y2K compliance or date-handling utility.</p> <p>Additionally, the main program <code>AR930</code> (an RPG program) is loaded and executed, but it is not considered an \"external program call\" in the same sense as <code>CALL PGM</code> or procedure invocations, as it is the primary program being run.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The script specifies the following files (referred to as \"tables\" in some contexts, especially in RPG programming): 1. ARCONT: Accounts Receivable control file. 2. ARCUST: Accounts Receivable customer file. 3. GLMAST: General Ledger master file.</p> <p>These files are accessed in shared mode (<code>DISP-SHR</code>) and are critical to the A/R control file maintenance process performed by <code>AR930</code>.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20OCL/#summary","title":"Summary","text":"<p>The OCL script orchestrates the execution of the <code>AR930</code> RPG program for A/R control file maintenance. It performs initial setup and validation (<code>GSGENIEC</code>, conditional check, <code>GSY2K</code>), loads the necessary files (<code>ARCONT</code>, <code>ARCUST</code>, <code>GLMAST</code>), and executes the main program. The process ensures that the environment is properly configured and that the program only runs if specific conditions are met, preventing unnecessary or erroneous execution.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/","title":"AR930 RPGLE","text":"<p>The provided <code>AR930.rpgle.txt</code> is an RPGLE (Report Program Generator Language Extended) program for IBM i (AS/400) systems, used for Accounts Receivable (A/R) control file maintenance. It is called by the OCL script <code>AR930.ocl36.txt</code> previously discussed. Below, I will explain the process steps, business rules, tables (files) used, and external programs called by the <code>AR930</code> RPGLE program.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR930</code> program is designed to manage the A/R control file (<code>ARCONT</code>) through a workstation interface, allowing users to add, update, delete, or reactivate A/R company records. It includes screen handling, data validation, and file operations. Below is a step-by-step explanation of the program's process flow, based on the code structure and logic:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>DFTACTGRP(*NO)</code>: The program runs in a non-default activation group, allowing better control over resources.</li> <li><code>fixnbr(*zoned:*inputpacked)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> <li><code>dftname(ar930)</code>: Sets the default program name to <code>AR930</code>.</li> </ul> </li> <li>File Declarations:<ul> <li><code>arcont</code>: A/R control file, used for update and add operations (<code>uf a</code>), keyed by company number (2 bytes, starting at position 2).</li> <li><code>arcust</code>: A/R customer file, input-only (<code>if</code>), keyed by an 8-byte key starting at position 2.</li> <li><code>glmast</code>: General Ledger master file, input-only (<code>if</code>), keyed by an 11-byte key starting at position 2.</li> <li><code>ar930d</code>: Workstation file, used for interactive screen handling with Profound UI (<code>Handler('PROFOUNDUI(HANDLER)')</code>).</li> </ul> </li> <li> <p>Data Structures and Variables:</p> <ul> <li><code>infds</code>: Information data structure to capture workstation status (e.g., function key presses).</li> <li><code>msg</code>: Array of 22 error messages, each 35 characters, defined in compile-time data (<code>CTDATA</code>).</li> <li>Input specifications define fields for <code>arcont</code>, <code>arcust</code>, and <code>glmast</code>, mapping record layouts (e.g., <code>acco</code> for company number, <code>acname</code> for company name).</li> </ul> </li> <li> <p>Main Processing Loop:</p> </li> <li>The program operates in a loop, displaying screens (<code>AR930S1</code> for inquiry/update, <code>AR930S2</code> for data entry) and processing user inputs based on function keys and data validation.</li> <li>Initial Screen Setup:<ul> <li>If <code>qsctl</code> (control field) is blank, the program sets indicator <code>*in09</code> to '1', <code>*in01</code> to '1' (for <code>AR930S1</code>), and <code>qsctl</code> to 'R' to initialize the process.</li> <li>Otherwise, it reads the workstation file (<code>ar930s1</code> or <code>ar930s2</code>) based on indicators <code>*in81</code> or <code>*in82</code>. If the read fails (indicator <code>*in09</code> is on), the <code>rollsr</code> subroutine handles roll-up/roll-down actions.</li> </ul> </li> <li> <p>Indicator Management:</p> <ul> <li>Clears indicators (e.g., <code>*in62</code> to <code>*in67</code>, <code>*in44</code>, <code>*in71</code>, <code>*in81</code>, <code>*in82</code>, <code>*in90</code>) and variables (<code>z2</code>, <code>z3</code>, <code>z8</code>, <code>z6</code>) to reset the state.</li> <li>Handles roll keys (<code>*in54</code> for roll-up, <code>*in55</code> for roll-down) by calling <code>rollfw</code> or <code>rollbw</code> subroutines.</li> </ul> </li> <li> <p>Function Key Processing:</p> </li> <li> <p>The program responds to specific function keys, each triggering a subroutine or action:</p> <ul> <li>KA (F1 - Bypass Entry): Clears fields, sets <code>*in81</code> (update mode) and <code>*in11</code> (update mode), and jumps to the end of the loop.</li> <li>KD (F4 - Delete/Reactivate): In update mode (<code>*in11</code>), checks if the record is not deleted (<code>*in21</code> off) and calls <code>delete</code> to mark the record as deleted (<code>acdel = 'D'</code>). If deleted, calls <code>reacti</code> to reactivate (<code>acdel = 'A'</code>).</li> <li>KG (End of Screen): Sets <code>*inlr</code> (last record) to terminate the program.</li> <li>KJ (F10 - Entry Mode): Clears fields, sets <code>*in82</code> and <code>*in10</code> (entry mode), and resets other indicators.</li> <li>KK (F11 - Update Mode): Clears fields, sets <code>*in81</code> and <code>*in11</code> (update mode), and resets other indicators.</li> </ul> </li> <li> <p>Screen Processing:</p> </li> <li>AR930S1 (Inquiry/Update Screen):<ul> <li>Triggered by <code>*in01</code>. Calls the <code>s1</code> subroutine:</li> <li>Reads <code>arcont</code> by company number (<code>maskey = co</code>).</li> <li>If not found (<code>*in92</code> on), displays error messages (msg 6, 7) and sets <code>*in81</code> and <code>*in90</code>.</li> <li>If found, calls <code>move</code> to populate screen fields and sets <code>*in11</code>, <code>*in62</code>, <code>*in82</code> for update mode.</li> <li>Writes the <code>ar930s1</code> screen to display company data.</li> </ul> </li> <li> <p>AR930S2 (Entry Screen):</p> <ul> <li>Triggered by <code>*in02</code>. Calls the <code>s2</code> subroutine:</li> <li>Validates input data (see Business Rules below).</li> <li>If in entry mode (<code>*in10</code>), checks if the company number is non-zero and does not exist in <code>arcont</code>. If it exists, displays error messages (msg 8, 9).</li> <li>Writes the <code>ar930s2</code> screen to allow data entry.</li> </ul> </li> <li> <p>Data Validation and File Updates:</p> </li> <li>The <code>s2</code> subroutine performs extensive validation (detailed in Business Rules).</li> <li> <p>If validation passes, the program updates or adds records to <code>arcont</code>:</p> <ul> <li>In entry mode (<code>*in10</code>), adds a new record with <code>except</code> (opcode <code>eadd 70 92</code>).</li> <li>In update mode (<code>*in11</code>), updates the existing record (<code>except</code> with conditions <code>70n92n25</code> for updates, or <code>88</code> for delete/reactivate).</li> </ul> </li> <li> <p>Subroutines:</p> </li> <li>s1: Handles inquiry/update screen logic, retrieves <code>arcont</code> data, and populates screen fields.</li> <li>s2: Validates input data and prepares for add/update operations.</li> <li>clear: Resets all screen fields to blanks or zeros.</li> <li>move: Transfers <code>arcont</code> fields to screen fields for display.</li> <li>rollsr: Handles roll-up/roll-down key presses, resetting function key indicators.</li> <li>rollfw: Reads the next <code>arcont</code> record for navigation.</li> <li>rollbw: Reads the previous <code>arcont</code> record for navigation.</li> <li>delete: Marks an <code>arcont</code> record as deleted (<code>acdel = 'D'</code>) after checking <code>arcust</code> for active records.</li> <li> <p>reacti: Reactivates a deleted record (<code>acdel = 'A'</code>).</p> </li> <li> <p>Termination:</p> </li> <li>The program exits when <code>*inlr</code> is set (via <code>KG</code> key or end of processing), writing final screen output and closing files.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules during data entry and validation in the <code>s2</code> subroutine:</p> <ol> <li>Company Number Validation:</li> <li>The company number (<code>co</code>) cannot be zero in entry mode (msg 4: \"COMPANY CANNOT BE ZERO - ENTER OR\").</li> <li> <p>In entry mode, the company number must not already exist in <code>arcont</code> (msg 8: \"CANNOT ADD - THIS RECORD EXISTS\", msg 9: \"PRESS CMD KEY 11 TO UPDATE\").</p> </li> <li> <p>Company Name:</p> </li> <li> <p>The company name (<code>name</code>) cannot be blank (msg 13: \"COMPANY NAME CANNOT BE BLANK\").</p> </li> <li> <p>General Ledger Account Validation:</p> </li> <li> <p>For A/R GL number (<code>argl</code>), sales GL number (<code>slgl</code>), discount GL number (<code>dsgl</code>), cash GL number (<code>csgl</code>), EFT cash GL number (<code>efcg</code>), intercompany GL number (<code>icgl</code>), and finance charge GL number (<code>fcgl</code>):</p> <ul> <li>If non-zero, the GL number must exist in <code>glmast</code> and not be marked as deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>).</li> <li>Errors trigger specific messages:</li> <li>Msg 10: \"INVALID ACCOUNTS RECEIVABLE GL NO\"</li> <li>Msg 11: \"INVALID SALES GL NUMBER\"</li> <li>Msg 14: \"INVALID DISCOUNT GL NUMBER\"</li> <li>Msg 15: \"INVALID CASH GL NUMBER\"</li> <li>Msg 16: \"INVALID INTER-CO G/L NUMBER\"</li> <li>Msg 18: \"INVALID FINANCE CHARGE GL NUMBER\"</li> <li>Msg 22: \"INVALID EFT CASH GL NUMBER\"</li> </ul> </li> <li> <p>Security Code:</p> </li> <li> <p>The security code (<code>secr</code>) cannot be blank (msg 17: \"SECURITY CODE CAN NOT BE BLANK\").</p> </li> <li> <p>Aging Limits:</p> </li> <li>Aging limits (<code>lmt1</code>, <code>lmt2</code>, <code>lmt3</code>, <code>lmt4</code>) correspond to aging buckets (0-30, 31-60, 61-90, 91-120/over 120 days from invoice date, as per revision JB01).</li> <li> <p>Rules:</p> <ul> <li>None can be zero (msg 21: \"INVALID AGING LIMITS\").</li> <li>Must be in ascending order: <code>lmt1 &lt; lmt2 &lt; lmt3 &lt; lmt4</code> (msg 21 if violated).</li> </ul> </li> <li> <p>Deletion Rules:</p> </li> <li>A company cannot be deleted if active customer records exist in <code>arcust</code> (msg 19: \"COMPANY MASTER RECORDS EXIST\", msg 20: \"DELETION OF COMPANY NOT ALLOWED\").</li> <li> <p>Deletion sets <code>acdel = 'D'</code>; reactivation sets <code>acdel = 'A'</code>.</p> </li> <li> <p>Aging by Invoice Date:</p> </li> <li> <p>Per revision JB01 (04/13/05), aging is based on invoice date rather than due date, with buckets redefined as 0-30, 31-60, 61-90, 91-120, and over 120 days.</p> </li> <li> <p>Inactive GL Accounts:</p> </li> <li> <p>Per revision JB02 (08/24/16), inactive GL accounts (<code>gldel = 'I'</code>) are treated the same as deleted accounts (<code>gldel = 'D'</code>) during validation.</p> </li> <li> <p>Numeric Field Handling:</p> </li> <li>Per revision JB03 (09/27/22), the filler at positions 113-114 in <code>arcont</code> is defined as a 2-digit numeric field (N2.0).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program uses the following files: 1. ARCONT: A/R control file (update/add, keyed by company number).    - Fields include <code>acdel</code> (delete flag), <code>acco</code> (company number), <code>acname</code> (company name), <code>acarj#</code> (next A/R journal number), <code>acslj#</code> (next sales journal number), <code>acargl</code> (A/R GL number), <code>acslgl</code> (sales GL number), <code>acdsgl</code> (discount GL number), <code>accsgl</code> (cash GL number), <code>actrgl</code> (intercompany GL number), <code>acfngl</code> (finance GL number), <code>acsecr</code> (security code), <code>acfinc</code> (finance charge %), <code>acffmo</code> (first fiscal month), <code>aclmt1</code> to <code>aclmt4</code> (aging limits), <code>acefcg</code> (EFT cash GL number), <code>acdtcl</code> (last close date), <code>acdtcr</code> (cash receipts date). 2. ARCUST: A/R customer file (input-only, keyed).    - Used to check for active customer records during deletion.    - Fields include <code>ardel</code> (delete flag) and <code>arco</code> (company number). 3. GLMAST: General Ledger master file (input-only, keyed).    - Used to validate GL account numbers.    - Fields include <code>gldel</code> (delete/inactive flag). 4. AR930D: Workstation file for screen interaction (Profound UI handler).    - Defines two formats: <code>AR930S1</code> (inquiry/update) and <code>AR930S2</code> (data entry).</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs (e.g., via <code>CALL</code> operation). It relies entirely on internal subroutines (<code>s1</code>, <code>s2</code>, <code>clear</code>, <code>move</code>, <code>rollsr</code>, <code>rollfw</code>, <code>rollbw</code>, <code>delete</code>, <code>reacti</code>) and file operations. However, the program is invoked by the OCL script (<code>AR930.ocl36.txt</code>), which calls <code>GSGENIEC</code> and <code>GSY2K</code> before loading <code>AR930</code>. These are not called from within the RPGLE code but are part of the job setup.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/AR930%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR930</code> RPGLE program manages A/R control file maintenance through an interactive workstation interface. It supports adding, updating, deleting, or reactivating company records in <code>ARCONT</code>, with extensive validation against <code>ARCUST</code> and <code>GLMAST</code>. Key features include: - Process Flow: Initializes, displays screens (<code>AR930S1</code>, <code>AR930S2</code>), processes function keys (KA, KD, KG, KJ, KK), validates input, and updates files. - Business Rules: Enforces non-zero company numbers, non-blank names and security codes, valid GL accounts, ascending aging limits, and deletion restrictions. - Files: Uses <code>ARCONT</code> (A/R control), <code>ARCUST</code> (A/R customers), <code>GLMAST</code> (GL master), and <code>AR930D</code> (workstation). - External Programs: None called directly; relies on OCL setup (<code>GSGENIEC</code>, <code>GSY2K</code>).</p> <p>The program is modernized with Profound UI for screen handling and includes Y2K compliance and aging revisions, ensuring robust A/R control file management.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/","title":"Summary AR930 OCL","text":""},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#list-of-use-cases-implemented-by-the-ar930-program","title":"List of Use Cases Implemented by the AR930 Program","text":"<p>The <code>AR930</code> RPGLE program, invoked via the <code>AR930.ocl36.txt</code> OCL script, is designed for Accounts Receivable (A/R) control file maintenance. Based on the provided code, the program implements the following use cases, which focus on managing company records in the A/R control file (<code>ARCONT</code>):</p> <ol> <li>Maintain A/R Company Control Records:</li> <li>Description: Allows users to add, update, delete, or reactivate A/R company records, including configuration details such as company name, GL accounts, aging limits, and journal numbers. The program validates inputs against the customer file (<code>ARCUST</code>) and general ledger master file (<code>GLMAST</code>) to ensure data integrity.</li> <li>Operations:<ul> <li>Add: Create a new company record in <code>ARCONT</code>.</li> <li>Update: Modify existing company record details.</li> <li>Delete: Mark a company record as deleted (<code>acdel = 'D'</code>) if no active customer records exist in <code>ARCUST</code>.</li> <li>Reactivate: Restore a deleted company record (<code>acdel = 'A'</code>).</li> <li>Inquiry: View existing company records.</li> </ul> </li> <li>Context: Interactive workstation interface using screens (<code>AR930S1</code> for inquiry/update, <code>AR930S2</code> for data entry), with navigation via function keys (F1, F4, F10, F11).</li> </ol> <p>Given that the program is centered around a single, cohesive purpose (managing A/R company records), this is the primary use case. All operations (add, update, delete, reactivate, inquiry) are part of this use case, as they collectively address the maintenance of A/R control data.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#function-requirement-document-for-ar-company-control-maintenance","title":"Function Requirement Document for A/R Company Control Maintenance","text":"<p>Below is a function requirement document for a non-interactive version of the A/R company control maintenance use case. This assumes the function accepts all necessary inputs programmatically (rather than via a screen) to perform add, update, delete, or reactivate operations on the <code>ARCONT</code> file. The document focuses on business requirements, process steps, and calculations, presented concisely.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#ar-company-control-maintenance-function-requirements","title":"A/R Company Control Maintenance Function Requirements","text":""},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#overview","title":"Overview","text":"<p>The <code>MaintainARCompanyControl</code> function manages Accounts Receivable (A/R) company records in the <code>ARCONT</code> file, supporting add, update, delete, and reactivate operations. It validates inputs against the <code>ARCUST</code> (A/R customer) and <code>GLMAST</code> (General Ledger master) files, ensuring data integrity for A/R configurations.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Operation Type: String (<code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>).</li> <li>Company Number (<code>acco</code>): 2-digit numeric (non-zero for <code>ADD</code>, <code>UPDATE</code>).</li> <li>Company Name (<code>acname</code>): 30-character string.</li> <li>A/R GL Number (<code>acargl</code>): 8-digit numeric (optional).</li> <li>Sales GL Number (<code>acslgl</code>): 8-digit numeric (optional).</li> <li>Discount GL Number (<code>acdsgl</code>): 8-digit numeric (optional).</li> <li>Cash GL Number (<code>accsgl</code>): 8-digit numeric (optional).</li> <li>Intercompany GL Number (<code>actrgl</code>): 8-digit numeric (optional).</li> <li>Finance Charge GL Number (<code>acfngl</code>): 8-digit numeric (optional).</li> <li>EFT Cash GL Number (<code>acefcg</code>): 8-digit numeric (optional).</li> <li>Next A/R Journal Number (<code>acarj#</code>): 2-digit numeric.</li> <li>Next Sales Journal Number (<code>acslj#</code>): 2-digit numeric.</li> <li>Finance Charge Percentage (<code>acfinc</code>): 5-digit numeric (4.1 format, e.g., 12.345).</li> <li>Security Code (<code>acsecr</code>): 8-character string.</li> <li>First Fiscal Month (<code>acffmo</code>): 2-digit numeric (1-12).</li> <li>Aging Limits:</li> <li><code>aclmt1</code>: 2-digit numeric (0-30 days).</li> <li><code>aclmt2</code>: 2-digit numeric (31-60 days).</li> <li><code>aclmt3</code>: 2-digit numeric (61-90 days).</li> <li><code>aclmt4</code>: 2-digit numeric (91-120 days or over 120).</li> <li>Last Close Date (<code>acdtcl</code>): 6-digit numeric (YYMMDD).</li> <li>Cash Receipts Date (<code>acdtcr</code>): 6-digit numeric (YYMMDD).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Status: Success or error code.</li> <li>Error Message: Description of validation or processing errors (if any).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Operation and Company Number:</li> <li>Ensure <code>Operation Type</code> is one of <code>ADD</code>, <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>.</li> <li>For <code>ADD</code> or <code>UPDATE</code>, verify <code>acco</code> is non-zero.</li> <li>For <code>ADD</code>, check that <code>acco</code> does not exist in <code>ARCONT</code>.</li> <li> <p>For <code>UPDATE</code>, <code>DELETE</code>, or <code>REACTIVATE</code>, check that <code>acco</code> exists in <code>ARCONT</code>.</p> </li> <li> <p>Validate Input Data:</p> </li> <li>Company Name: Must not be blank.</li> <li>Security Code: Must not be blank.</li> <li>GL Accounts: For <code>acargl</code>, <code>acslgl</code>, <code>acdsgl</code>, <code>accsgl</code>, <code>actrgl</code>, <code>acfngl</code>, <code>acefcg</code> (if non-zero):<ul> <li>Must exist in <code>GLMAST</code> and not be marked as deleted (<code>gldel = 'D'</code>) or inactive (<code>gldel = 'I'</code>).</li> </ul> </li> <li>Aging Limits:<ul> <li>Must be non-zero.</li> <li>Must follow ascending order: <code>aclmt1 &lt; aclmt2 &lt; aclmt3 &lt; aclmt4</code>.</li> </ul> </li> <li> <p>Finance Charge %: No specific validation beyond format (4.1).</p> </li> <li> <p>Perform Operation:</p> </li> <li>ADD:<ul> <li>Create new <code>ARCONT</code> record with <code>acdel = 'A'</code> (active) and provided inputs.</li> </ul> </li> <li>UPDATE:<ul> <li>Update existing <code>ARCONT</code> record with provided inputs, retaining <code>acdel</code> unless changed.</li> </ul> </li> <li>DELETE:<ul> <li>Check <code>ARCUST</code> for active records (non-deleted, matching <code>acco</code>).</li> <li>If none exist, set <code>acdel = 'D'</code> in <code>ARCONT</code>.</li> </ul> </li> <li> <p>REACTIVATE:</p> <ul> <li>If <code>acdel = 'D'</code>, set <code>acdel = 'A'</code> in <code>ARCONT</code>.</li> </ul> </li> <li> <p>Write to File:</p> </li> <li>Commit changes to <code>ARCONT</code> (add or update record).</li> <li>Return success status or error message if validation fails.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Number: Must be unique for <code>ADD</code>; must exist for <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>.</li> <li>Company Name and Security Code: Cannot be blank.</li> <li>GL Accounts: Non-zero accounts must be valid (exist in <code>GLMAST</code>, not deleted or inactive).</li> <li>Aging Limits: Non-zero, ascending order (0-30, 31-60, 61-90, 91-120/over 120 days from invoice date, per 04/13/05 revision).</li> <li>Deletion: Prohibited if active customer records exist in <code>ARCUST</code>.</li> <li>Reactivation: Only allowed if record is marked deleted (<code>acdel = 'D'</code>).</li> <li>Inactive GL Accounts: Treated as deleted (per 08/24/16 revision).</li> <li>Numeric Fields: Filler at positions 113-114 in <code>ARCONT</code> is numeric (2.0 format, per 09/27/22 revision).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Limits: No calculations; validated for non-zero and ascending order.</li> <li>Finance Charge %: Stored as provided (4.1 format), no calculations.</li> <li>Journal Numbers: Stored as provided, no calculations.</li> <li>Dates: <code>acdtcl</code> and <code>acdtcr</code> stored as provided (YYMMDD), no calculations.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#error-messages","title":"Error Messages","text":"<ul> <li>\"COMPANY CANNOT BE ZERO - ENTER OR\" (zero <code>acco</code> in <code>ADD</code>/<code>UPDATE</code>).</li> <li>\"CANNOT ADD - THIS RECORD EXISTS\" (<code>acco</code> exists in <code>ADD</code>).</li> <li>\"COMPANY NAME CANNOT BE BLANK\".</li> <li>\"SECURITY CODE CAN NOT BE BLANK\".</li> <li>\"INVALID ACCOUNTS RECEIVABLE GL NO\" (invalid <code>acargl</code>).</li> <li>\"INVALID SALES GL NUMBER\" (invalid <code>acslgl</code>).</li> <li>\"INVALID DISCOUNT GL NUMBER\" (invalid <code>acdsgl</code>).</li> <li>\"INVALID CASH GL NUMBER\" (invalid <code>accsgl</code>).</li> <li>\"INVALID INTER-CO G/L NUMBER\" (invalid <code>actrgl</code>).</li> <li>\"INVALID FINANCE CHARGE GL NUMBER\" (invalid <code>acfngl</code>).</li> <li>\"INVALID EFT CASH GL NUMBER\" (invalid <code>acefcg</code>).</li> <li>\"INVALID AGING LIMITS\" (zero or non-ascending <code>aclmt1</code>\u2013<code>aclmt4</code>).</li> <li>\"COMPANY MASTER RECORDS EXIST\" (active <code>ARCUST</code> records for <code>DELETE</code>).</li> <li>\"DELETION OF COMPANY NOT ALLOWED\" (active <code>ARCUST</code> records).</li> <li>\"RECORD NOT FOUND\" (invalid <code>acco</code> for <code>UPDATE</code>, <code>DELETE</code>, <code>REACTIVATE</code>).</li> <li>\"PREVIOUS RECORD WAS REACTIVATED\" (successful reactivation).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: A/R control file (read/write).</li> <li><code>ARCUST</code>: A/R customer file (read-only, for deletion check).</li> <li><code>GLMAST</code>: General Ledger master file (read-only, for GL validation).</li> <li>External Programs: None (assumes inputs provided programmatically).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR930%20Control%20File%20Add-Update/Summary%20AR930%20OCL/#notes","title":"Notes","text":"<ul> <li>The function replaces interactive screen handling with direct input processing.</li> <li>Aging is based on invoice date (0-30, 31-60, 61-90, 91-120, over 120 days), per 04/13/05 revision.</li> <li>No external program calls are required, unlike the OCL setup (<code>GSGENIEC</code>, <code>GSY2K</code>).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/","title":"AR931 RPG36","text":"<p>The provided document, <code>AR931.rpg36.txt</code>, is an RPG program for the IBM System/36, named <code>AR931</code>, which generates an Accounts Receivable (A/R) Control File Listing. This program is called from the main OCL script (<code>AR931P.ocl36.txt</code>) after user input is validated by the <code>AR931P</code> RPGLE program. The <code>AR931</code> program reads data from the A/R control file and produces a formatted report on a printer. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, integrating context from the OCL script and the <code>AR931P</code> program for a comprehensive understanding.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#process-steps-of-the-rpg-program","title":"Process Steps of the RPG Program","text":"<p>The <code>AR931</code> program is a straightforward RPG program designed to read records from the A/R control file (<code>ARCONT</code>) and print a formatted report. It operates in a simple input-processing-output cycle, with headers and detail lines for each valid record. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H P016 B AR931</code>: Specifies the program name (<code>AR931</code>) with a program number (<code>P016</code>) and batch mode (<code>B</code>), indicating it\u2019s designed for batch processing.</li> </ul> </li> <li>File Definitions:<ul> <li><code>FARCONT IP F 256 256 DISK</code>: Defines <code>ARCONT</code> as the primary input file (256-byte records, disk-based), read sequentially.</li> <li><code>FPRINT O F 160 160 OF PRINTER</code>: Defines <code>PRINT</code> as the output file (160-byte records) for printing the report, with overflow indicator <code>OF</code>.</li> </ul> </li> <li>Array Definitions:<ul> <li><code>E SEP 66 2</code>: Defines a 2-element array <code>SEP</code> with 66 bytes each, used for separator lines (likely asterisks, initialized in the program).</li> <li><code>E SEP2 16 2</code>: Defines a 2-element array <code>SEP2</code> with 16 bytes each, used for additional separator lines.</li> </ul> </li> <li>Input Specifications:<ul> <li><code>IARCONT NS 01</code>: Defines the input record format for <code>ARCONT</code> with fields:</li> <li><code>ACDEL</code> (1): Delete flag (<code>'D'</code> for deleted records).</li> <li><code>ACCO</code> (2-3): Company number (originally 2-30, likely a typo or legacy format; used as 2-3 in output).</li> <li><code>ACNAME</code> (4-33): Company name.</li> <li><code>ACARJ#</code> (34-35): Next A/R journal number.</li> <li><code>ACSLJ#</code> (36-37): Next sales journal number.</li> <li><code>ACARGL</code> (38-45): A/R general ledger number.</li> <li><code>ACSLGL</code> (46-53): Sales general ledger number.</li> <li><code>ACDSGL</code> (54-61): Discount general ledger number.</li> <li><code>ACCSGL</code> (62-69): Cash general ledger number.</li> <li><code>ACICGL</code> (70-77): Intercompany general ledger number.</li> <li><code>ACDATE</code> (78-83): Last aging date.</li> <li><code>ACSECR</code> (84-91): Security code for statements.</li> <li><code>ACFINC</code> (92-96.4): Finance charge percentage (4 decimal places).</li> <li><code>ACFNGL</code> (97-104): Finance general ledger number.</li> <li><code>ACFFMO</code> (105-106): First fiscal month.</li> <li><code>ACLMT1</code> (107-108): Aging bucket 1 upper limit (1-30 days).</li> <li><code>ACLMT2</code> (109-110): Aging bucket 2 upper limit (31-60 days).</li> <li><code>ACLMT3</code> (111-112): Aging bucket 3 upper limit (61-90 days).</li> <li><code>ACLMT4</code> (123-125): Aging bucket 4 upper limit (91-120 days, added in revision JB01).</li> </ul> </li> <li> <p>Variables:</p> <ul> <li><code>TIMDAT</code> (12 bytes), <code>TIME</code> (6 bytes), <code>DATE</code> (6 bytes): Used to capture and format the system date and time.</li> <li><code>PAGE</code>: Used for page numbering in the report.</li> </ul> </li> <li> <p>Initial Setup (Calculation Specifications):</p> </li> <li><code>C N11 SETOF 15</code>: If indicator <code>11</code> is off (no overflow), clears the overflow indicator <code>15</code>.</li> <li><code>C N11 MOVE '* ' SEP</code>: Initializes the <code>SEP</code> array with asterisks for separator lines.</li> <li><code>C N11 MOVE '* ' SEP2</code>: Initializes the <code>SEP2</code> array with asterisks for additional separator lines.</li> <li><code>C N11 TIME TIMDAT 120</code>: Retrieves the system date and time into <code>TIMDAT</code>.</li> <li><code>C N11 MOVELTIMDAT TIME 60</code>: Moves the time portion to <code>TIME</code> (6 bytes).</li> <li><code>C N11 MOVE TIMDAT DATE 60</code>: Moves the date portion to <code>DATE</code> (6 bytes).</li> <li> <p><code>C N11 SETON 1115</code>: Sets indicators <code>11</code> (control break) and <code>15</code> (overflow) to ensure headers are printed at the start.</p> </li> <li> <p>Report Generation (Output Specifications):</p> </li> <li>The program reads <code>ARCONT</code> sequentially (as the primary file) and processes each record:<ul> <li>Record Filtering: Skips records where <code>ACDEL = 'D'</code> (deleted records), as implied by standard System/36 practices, though not explicitly coded in the RPG (likely handled by the OCL or <code>AR931P</code> validation).</li> </ul> </li> <li>Output to <code>PRINT</code>:<ul> <li>Header Lines (D 103, D 2, D 1):</li> <li>Printed when indicator <code>15</code> (overflow) is on or at the start (<code>N15</code> for first page).</li> <li><code>D 103</code>: Prints page number (<code>PAGE</code>) and date (<code>DATE</code>) at positions 104-108 and 120-129.</li> <li><code>D 2</code>: Prints the report title (\"A/R CONTROL FILE LISTING\") and time (<code>TIME</code>) at positions 78 and 120-129.</li> <li><code>D 1</code>: Prints separator lines (<code>SEP</code>, <code>SEP2</code>) and column headers (e.g., \"CO#\", \"COMPANY NAME\", \"A/R G/L#\", etc.) at various positions.</li> <li><code>D 1</code>: Additional headers for \"NEXT\" (journal numbers), \"GL\", \"FIRST FISCAL MONTH\", and \"AGING BUCKETS\".</li> <li>Detail Lines (D 3):</li> <li>Printed for each non-deleted <code>ARCONT</code> record.</li> <li>Outputs fields: <code>ACCO</code> (3), <code>ACNAME</code> (35), <code>ACARGL</code> (45), <code>ACCSGL</code> (56), <code>ACDSGL</code> (67), <code>ACICGL</code> (78), <code>ACARJ#</code> (84), <code>ACSLJ#</code> (88), <code>ACFINC2</code> (96, formatted finance charge), <code>ACFNGLZ</code> (105, formatted finance GL), <code>ACSECR</code> (114), <code>ACFFMO</code> (129), <code>ACLMT1</code> (141), <code>ACLMT2</code> (145), <code>ACLMT3</code> (149), <code>ACLMT4</code> (155).</li> </ul> </li> <li> <p>Overflow Handling: The <code>OF</code> indicator triggers header reprinting when the page length (160 characters, likely with a standard line count) is exceeded.</p> </li> <li> <p>Program Flow:</p> </li> <li>The RPG cycle automatically reads each <code>ARCONT</code> record, processes it, and writes to <code>PRINT</code> until end-of-file.</li> <li>Headers are printed at the start of the report and on page overflows.</li> <li>Detail lines are printed for each valid record, showing A/R control data.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#business-rules","title":"Business Rules","text":"<p>The <code>AR931</code> program enforces the following business rules for the A/R Control File Listing:</p> <ol> <li>Report Content:</li> <li>The report lists all non-deleted records from <code>ARCONT</code> (filtered implicitly or by <code>AR931P</code>).</li> <li> <p>For each company, it includes:</p> <ul> <li>Company number (<code>ACCO</code>) and name (<code>ACNAME</code>).</li> <li>General ledger numbers for A/R (<code>ACARGL</code>), cash (<code>ACCSGL</code>), discount (<code>ACDSGL</code>), and intercompany (<code>ACICGL</code>).</li> <li>Next journal numbers for A/R (<code>ACARJ#</code>) and sales (<code>ACSLJ#</code>).</li> <li>Finance charge percentage (<code>ACFINC</code>), finance GL number (<code>ACFNGL</code>), and security code (<code>ACSECR</code>).</li> <li>First fiscal month (<code>ACFFMO</code>).</li> <li>Aging bucket upper limits: 1-30 days (<code>ACLMT1</code>), 31-60 days (<code>ACLMT2</code>), 61-90 days (<code>ACLMT3</code>), 91-120 days (<code>ACLMT4</code>).</li> </ul> </li> <li> <p>Aging Buckets (Revision JB01):</p> </li> <li>Per the revision log (dated 04/13/05), aging is based on invoice date rather than due date, as modified for PNC Bank.</li> <li>Aging buckets are:<ul> <li>0-30 days (<code>ACLMT1</code>).</li> <li>31-60 days (<code>ACLMT2</code>).</li> <li>61-90 days (<code>ACLMT3</code>).</li> <li>91-120 days (<code>ACLMT4</code>).</li> <li>Over 120 days (implicit, not stored in a specific field).</li> </ul> </li> <li> <p>This change aligns with financial reporting requirements for tracking receivables by invoice age.</p> </li> <li> <p>Report Formatting:</p> </li> <li>The report includes a header with the title, date, time, and page number.</li> <li>Separator lines (<code>SEP</code>, <code>SEP2</code>) and column headers ensure readability.</li> <li> <p>Fields are positioned at specific columns (e.g., <code>ACCO</code> at 3, <code>ACNAME</code> at 35) for consistent formatting.</p> </li> <li> <p>Record Filtering:</p> </li> <li>Only non-deleted records (<code>ACDEL \u2260 'D'</code>) are included, ensuring the report reflects active companies.</li> <li> <p>The <code>AR931P</code> program (called earlier in the OCL) validates company selections (<code>ALL</code> or specific companies), so <code>AR931</code> processes only the selected records.</p> </li> <li> <p>Output Control:</p> </li> <li>The number of copies (<code>KYCOPY</code>) is set by <code>AR931P</code> and passed via the OCL script.</li> <li>The report can be run interactively or submitted to a job queue (<code>KYJOBQ</code>), as determined by <code>AR931P</code> and the OCL script.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>ARCONT:</li> <li>Type: Primary input file (disk, 256 bytes).</li> <li>Purpose: Stores Accounts Receivable control data, including company details, GL numbers, journal numbers, finance charges, and aging bucket limits.</li> <li> <p>Fields:</p> <ul> <li><code>ACDEL</code>: Delete flag.</li> <li><code>ACCO</code>: Company number.</li> <li><code>ACNAME</code>: Company name.</li> <li><code>ACARJ#</code>, <code>ACSLJ#</code>: Journal numbers.</li> <li><code>ACARGL</code>, <code>ACSLGL</code>, <code>ACDSGL</code>, <code>ACCSGL</code>, <code>ACICGL</code>: GL numbers.</li> <li><code>ACDATE</code>: Last aging date.</li> <li><code>ACSECR</code>: Security code.</li> <li><code>ACFINC</code>: Finance charge percentage.</li> <li><code>ACFNGL</code>: Finance GL number.</li> <li><code>ACFFMO</code>: First fiscal month.</li> <li><code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code>: Aging bucket limits.</li> </ul> </li> <li> <p>PRINT:</p> </li> <li>Type: Output file (printer, 160 bytes).</li> <li>Purpose: Receives the formatted report output, including headers and detail lines for each <code>ARCONT</code> record.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#external-programs-called","title":"External Programs Called","text":"<p>The <code>AR931</code> program does not explicitly call any external programs using <code>CALL</code> operations. However, it is part of a workflow orchestrated by the OCL script (<code>AR931P.ocl36.txt</code>):</p> <ul> <li>AR931P:</li> <li>Called before <code>AR931</code> in the OCL script (<code>// LOAD AR931P</code> and <code>// RUN</code>).</li> <li>Validates user input (company selection, job queue, copies) and sets parameters (<code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>) used to control <code>AR931</code> execution.</li> <li> <p>Not called by <code>AR931</code> but provides input parameters via the data area (<code>UDS</code>).</p> </li> <li> <p>GSGENIEC and SCPROCP:</p> </li> <li>Called in the OCL script before <code>AR931P</code> (<code>// CALL PGM(GSGENIEC)</code> and <code>// SCPROCP</code>).</li> <li>Likely handle system setup or environment configuration but are not directly referenced in <code>AR931</code>.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#integration-with-ocl-and-ar931p","title":"Integration with OCL and AR931P","text":"<p>The OCL script (<code>AR931P.ocl36.txt</code>) and <code>AR931P</code> RPGLE program provide the context for <code>AR931</code>: - OCL Script:   - Loads <code>AR931P</code> to collect and validate user input, then either submits <code>AR931</code> to a job queue (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code>) or runs it directly (<code>// ELSE AR931</code>).   - Passes the <code>ARCONT</code> file and parameters (e.g., <code>?9?</code> for library) to <code>AR931</code>.   - Checks for cancellation (<code>KYCANC = 'CANCEL'</code>) set by <code>AR931P</code>. - AR931P:   - Validates company selection (<code>ALL</code> or specific companies via <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>), job queue (<code>KYJOBQ</code>), and copies (<code>KYCOPY</code>).   - Populates a company list (<code>DCO</code>) and uses <code>GSCONT</code> for default settings.   - Passes validated parameters to <code>AR931</code> via the data area (<code>UDS</code>). - AR931:   - Uses the validated parameters to filter <code>ARCONT</code> records (e.g., specific companies if <code>KYALCO = 'CO'</code>) and generate the report.   - Runs in batch mode (as implied by <code>B</code> in the header) or interactively, based on <code>KYJOBQ</code>.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931%20RPG36/#summary","title":"Summary","text":"<ul> <li>Process Overview: <code>AR931</code> reads non-deleted records from the <code>ARCONT</code> file and generates a formatted A/R Control File Listing on the <code>PRINT</code> file. It prints headers (title, date, time, page number) and detail lines for each company, including GL numbers, journal numbers, finance charges, fiscal month, and aging bucket limits (0-30, 31-60, 61-90, 91-120 days, per revision JB01).</li> <li>Business Rules: Includes only active (<code>ACDEL \u2260 'D'</code>) records, formats aging by invoice date (0-30, 31-60, 61-90, 91-120, over 120 days), and uses parameters from <code>AR931P</code> for company selection and job control. Ensures consistent report formatting with headers and separators.</li> <li>Files/Tables: <code>ARCONT</code> (input, A/R control data), <code>PRINT</code> (output, printer file).</li> <li>External Programs: None called directly in <code>AR931</code>, but <code>AR931P</code> (input validation), <code>GSGENIEC</code>, and <code>SCPROCP</code> (system setup) are part of the OCL workflow.</li> </ul> <p>If you need further details (e.g., specific report layout or additional context about <code>GSCONT</code> or <code>AR931P</code> interactions), please provide additional files or clarify the requirements, as some aspects (e.g., exact filtering logic) depend on the broader system context.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/","title":"AR931P OCL","text":"<p>Let\u2019s break down the provided OCL (Operation Control Language) program, <code>AR931P.ocl36.txt</code>, which is used to control job execution in an IBM System/36 environment, typically for RPG (Report Program Generator) programs. OCL is a scripting language for managing job flows, file operations, and program execution on the System/36. Below, I\u2019ll explain the process steps, identify external programs called, and list any tables or files referenced.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL script outlines a sequence of steps for executing a job related to an Accounts Receivable Control File List. Here\u2019s a step-by-step explanation of the process:</p> <ol> <li>Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The script starts by calling a program named <code>GSGENIEC</code>. This is likely a utility or control program that performs initial setup or validation tasks before the main job proceeds.</li> <li> <p>This step suggests that <code>GSGENIEC</code> may handle system-level checks or configurations, possibly related to the job environment or user permissions.</p> </li> <li> <p>Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> statement checks a condition at location <code>506,3</code> in the system\u2019s library or memory (likely a status code or flag).</li> <li>If the condition evaluates to <code>YES</code>, the script executes a <code>RETURN</code>, which terminates the OCL procedure at this point, preventing further execution.</li> <li> <p>This acts as a gatekeeper, ensuring the job only proceeds if the condition is not met (i.e., the condition is <code>NO</code>).</p> </li> <li> <p>Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command invokes a system procedure, passing a parameter <code>?9?</code> (a placeholder for a value, likely a library or file identifier).</li> <li>The commas indicate unused parameter positions, typical in System/36 OCL for aligning with a procedure\u2019s expected parameter list.</li> <li> <p>This step likely prepares the environment or sets up a specific processing context, but the exact function depends on what <code>SCPROCP</code> does (not defined in the script).</p> </li> <li> <p>Clear Local Variables (<code>// LOCAL BLANK-*ALL</code>):</p> </li> <li>This command resets all local variables to blank, clearing any residual data from prior runs to ensure a clean state for the job.</li> <li> <p>This is a housekeeping step to prevent data contamination.</p> </li> <li> <p>Year 2000 Compliance (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command likely invokes a Year 2000 compliance routine, ensuring date-related operations in the program are Y2K-compliant (e.g., handling four-digit years).</li> <li> <p>This was common in legacy systems like the System/36 to address date issues around the millennium.</p> </li> <li> <p>Load Program (<code>// LOAD AR931P</code>):</p> </li> <li>The <code>LOAD</code> command loads the RPG program <code>AR931P</code> into memory for execution.</li> <li> <p>This is the main program responsible for generating the Accounts Receivable Control File List.</p> </li> <li> <p>File Specification (<code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>):</p> </li> <li>Defines a file named <code>ARCONT</code> to be used by the program.</li> <li>The <code>LABEL-?9?ARCONT</code> indicates the file is located in a library or directory specified by the <code>?9?</code> parameter, with the file name <code>ARCONT</code>.</li> <li><code>DISP-SHR</code> (disposition shared) allows multiple jobs to access the file simultaneously, typically for read-only operations.</li> <li> <p>This file is likely the Accounts Receivable control file containing data for the report.</p> </li> <li> <p>Run Program (<code>// RUN</code>):</p> </li> <li> <p>Executes the loaded <code>AR931P</code> program, which processes the <code>ARCONT</code> file to generate the Accounts Receivable Control File List.</p> </li> <li> <p>Error Check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li>Checks a condition at location <code>129,6</code> (likely an error or status code set by <code>AR931P</code>).</li> <li>If the condition is met (<code>CANCEL</code>), the script jumps to the <code>END</code> tag, terminating the job.</li> <li> <p>This ensures the job halts if an error occurs during <code>AR931P</code> execution.</p> </li> <li> <p>Conditional Job Submission (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931,,,,,,,,,?9?</code>):</p> <ul> <li>Checks a condition at location <code>120,1</code>.</li> <li>If the condition is <code>Y</code> (yes), the script submits a job named <code>AR931</code> to a job queue in the library specified by <code>?CLIB?</code>, passing the <code>?9?</code> parameter.</li> <li>This suggests <code>AR931</code> is a related job or program (possibly another RPG program or a continuation job) that runs asynchronously in the job queue.</li> </ul> </li> <li> <p>Alternative Execution (<code>// ELSE AR931 ,,,,,,,,?9?</code>):</p> <ul> <li>If the condition at <code>120,1</code> is not <code>Y</code>, the script directly executes <code>AR931</code>, passing the <code>?9?</code> parameter.</li> <li>This provides an alternative execution path, running <code>AR931</code> immediately rather than queuing it.</li> </ul> </li> <li> <p>End Tag (<code>// TAG END</code>):</p> <ul> <li>Marks the <code>END</code> label, where the script jumps if the <code>CANCEL</code> condition is met in step 9.</li> <li>This defines the termination point for error scenarios.</li> </ul> </li> <li> <p>Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>):</p> <ul> <li>Resets all local variables to blank again, ensuring no residual data remains after execution.</li> <li>This is another housekeeping step to clean up the environment.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL script explicitly references the following external programs:</p> <ol> <li>GSGENIEC:</li> <li>Called at the start of the script via <code>// CALL PGM(GSGENIEC)</code>.</li> <li> <p>Likely a utility program for system setup, validation, or initialization.</p> </li> <li> <p>AR931P:</p> </li> <li>Loaded and executed via <code>// LOAD AR931P</code> and <code>// RUN</code>.</li> <li> <p>The main RPG program that generates the Accounts Receivable Control File List.</p> </li> <li> <p>AR931:</p> </li> <li>Referenced in the conditional job submission (<code>JOBQ ?CLIB?,AR931</code>) or direct execution (<code>AR931</code>).</li> <li> <p>Likely another RPG program or job related to the Accounts Receivable process, possibly for further processing or reporting.</p> </li> <li> <p>SCPROCP:</p> </li> <li>Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.</li> <li>A system procedure, possibly for environment setup or configuration, but its exact function is not specified in the script.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#tablesfiles-used","title":"Tables/Files Used","text":"<p>The script explicitly references one file:</p> <ol> <li>ARCONT:</li> <li>Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.</li> <li>This is the Accounts Receivable control file, likely containing data such as customer accounts, balances, or transaction details used by <code>AR931P</code> to generate the report.</li> <li>The <code>?9?</code> in the <code>LABEL</code> indicates the file resides in a library or directory specified by the <code>?9?</code> parameter.</li> </ol> <p>No other tables or files are explicitly mentioned, though <code>AR931P</code> or <code>AR931</code> may internally reference additional files or tables not specified in the OCL script.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20OCL/#summary","title":"Summary","text":"<ul> <li>Process Overview: The OCL script controls the execution of an Accounts Receivable Control File List job. It starts by calling a setup program (<code>GSGENIEC</code>), checks a condition to proceed, sets up the environment, loads and runs the main RPG program (<code>AR931P</code>) using the <code>ARCONT</code> file, handles errors, and conditionally submits or runs another job/program (<code>AR931</code>). Housekeeping steps ensure a clean environment.</li> <li>External Programs: <code>GSGENIEC</code>, <code>AR931P</code>, <code>AR931</code>, <code>SCPROCP</code>.</li> <li>Files/Tables: <code>ARCONT</code>.</li> </ul> <p>If you need further clarification or analysis (e.g., specific behavior of <code>AR931P</code> or <code>AR931</code>, or details about <code>GSY2K</code>), please provide additional context or files, as these components are system-specific and not fully detailed in the provided OCL script.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/","title":"AR931P RPGLE","text":"<p>The provided document, <code>AR931P.rpgle.txt</code>, is an RPGLE (Report Program Generator Language Extended) program for the IBM System/36 or AS/400 (IBM i) environment, converted from an older RPG format by the TARGET/400 tool. This program, <code>AR931P</code>, appears to handle the prompting and validation for generating an Accounts Receivable (A/R) Control File List. It interacts with a workstation (display file) to collect user input and validates it against data in the A/R control file. Below, I\u2019ll explain the process steps, business rules, tables/files used, and any external programs called, referencing the previously provided OCL script (<code>AR931P.ocl36.txt</code>) for context.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR931P</code> program is designed to prompt the user for parameters (e.g., company selection, job queue settings) via a display file, validate the input, and prepare data for the A/R Control File List report. The steps are executed in a structured flow, with subroutines handling specific tasks. Here\u2019s a detailed breakdown:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>H DFTACTGRP(*NO)</code>: Runs the program in a named activation group (not the default), ensuring proper resource management.</li> <li><code>H FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed decimal fields are handled correctly during input.</li> <li><code>H DFTNAME(AR931P)</code>: Sets the default program name to <code>AR931P</code>.</li> </ul> </li> <li>File Definitions:<ul> <li><code>FAR931PD CF E WORKSTN HANDLER('PROFOUNDUI(HANDLER)')</code>: Defines the display file <code>AR931PD</code> (likely replacing the original <code>CREEN</code>) for user interaction, using the Profound UI handler for modernized UI support.</li> <li><code>FARCONT IF F 256 2AIDISK KEYLOC(2)</code>: Defines the input file <code>ARCONT</code> (Accounts Receivable control file), with a record length of 256 bytes and a key starting at position 2.</li> <li><code>FGSCONT IF F 512 2AIDISK KEYLOC(2)</code>: Defines another input file <code>GSCONT</code>, likely a general system control file, with a record length of 512 bytes and a key at position 2.</li> </ul> </li> <li>Data Structures and Variables:<ul> <li><code>COM</code>: A compile-time array of 5 elements (40 bytes each) containing error messages (e.g., \"COMPANY SELECTION MUST BE 'CO' OR 'ALL'\").</li> <li><code>DCO</code>: An array of 10 elements (35 bytes each) to store company numbers and names from <code>ARCONT</code>.</li> <li><code>UDS</code>: A data structure for passing parameters, including:</li> <li><code>KYALCO</code> (111-113): Company selection code (<code>ALL</code> or <code>CO</code>).</li> <li><code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code> (114-119): Company numbers (numeric).</li> <li><code>KYJOBQ</code> (120): Job queue flag (<code>Y</code> or <code>N</code>).</li> <li><code>KYCOPY</code> (121-122): Number of copies for the report.</li> <li><code>KYCANC</code> (129-134): Cancellation flag.</li> </ul> </li> <li> <p>Indicators: RPG indicators (e.g., <code>*IN01</code>, <code>*IN09</code>, <code>*IN81</code>) control program flow and screen display.</p> </li> <li> <p>Workstation File Read and Control (<code>QSCTL</code> Check):</p> </li> <li>The program checks the <code>QSCTL</code> variable (likely a control flag):<ul> <li>If <code>QSCTL</code> is blank:</li> <li>Sets <code>*IN09 = '1'</code> and <code>*IN01 = '0'</code>.</li> <li>Sets <code>QSCTL = 'R'</code> (likely indicating a read operation).</li> <li>Else:</li> <li>Sets <code>*IN09 = '0'</code> and <code>*IN01 = '1'</code>.</li> <li>Reads the display file <code>AR931PD</code> and sets <code>*INLR = *ON</code> (last record), then returns, exiting the program.</li> </ul> </li> <li> <p>This step determines whether to initialize the screen or process user input.</p> </li> <li> <p>Clear Messages and Indicators:</p> </li> <li>Clears the <code>MSG</code> field (40 bytes) used for error messages.</li> <li> <p>Resets indicators <code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code> to <code>*OFF</code> to ensure a clean state for validation and display.</p> </li> <li> <p>Cancel Key Check (<code>*INKG</code>):</p> </li> <li> <p>If the cancel function key (<code>*INKG = *ON</code>) is pressed:</p> <ul> <li>Resets <code>*IN01</code> and <code>*IN09</code> to <code>*OFF</code>.</li> <li>Sets <code>*INLR = *ON</code> to indicate program termination.</li> <li>Sets <code>KYCANC = 'CANCEL'</code>, which aligns with the OCL script\u2019s error check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>).</li> <li>This allows the user to cancel the operation, terminating the program.</li> </ul> </li> <li> <p>Initial Setup (<code>*IN09</code> Check):</p> </li> <li>If <code>*IN09 = *ON</code> (initial program entry):<ul> <li>Sets <code>*IN81 = *ON</code> to control screen display.</li> <li>Executes the <code>ONETIM</code> subroutine to perform one-time setup tasks.</li> </ul> </li> <li> <p>This ensures setup occurs only on the first pass.</p> </li> <li> <p>Screen Processing (<code>*IN01</code> Check):</p> </li> <li>If <code>*IN01 = *ON</code> (user input received):<ul> <li>Executes the <code>SCREEN1</code> subroutine to validate user input.</li> </ul> </li> <li> <p>This handles the validation of parameters entered via the display file.</p> </li> <li> <p>Screen Display or Termination:</p> </li> <li>If <code>*IN81 = *OFF</code>:<ul> <li>Sets <code>*INLR = *ON</code> to terminate the program.</li> </ul> </li> <li>If <code>*IN81 = *ON</code>:<ul> <li>Writes to the display file <code>AR931PD</code> to show the screen (with fields like <code>KYALCO</code>, <code>KYCO1</code>, <code>DCO</code>, etc.) and loops back to the <code>END</code> tag for further input.</li> </ul> </li> <li> <p>This controls whether the program displays the screen or exits.</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Performs one-time setup, populating the <code>DCO</code> array with company data and setting default parameters.</li> <li> <p>Steps:</p> <ul> <li>Clears the <code>DCO</code> array.</li> <li>Initializes counters: <code>X = 1</code> (array index), <code>ACLIM = 00</code> (limit for reading <code>ARCONT</code>).</li> <li>Positions the file pointer at the start of <code>ARCONT</code> using <code>SETLL</code>.</li> <li>Reads <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10 = *ON</code>) or <code>X = 10</code>:</li> <li>Skips records where <code>ACDEL = 'D'</code> (deleted records).</li> <li>Stores <code>ACCO</code> (company number) and <code>ACNAME</code> (company name) in <code>DCO(X)</code>.</li> <li>Increments <code>X</code>.</li> <li>Copies <code>DCO</code> elements to individual fields (<code>DCO1</code> to <code>DCO10</code>) for display.</li> <li>Checks <code>GSCONT</code> for a company number (<code>GXCONO</code>):</li> <li>If <code>GXCONO \u2260 0</code>, sets <code>KYALCO = 'CO '</code> and <code>KYCO1 = GXCONO</code>.</li> <li>Else, sets <code>KYALCO = 'ALL'</code>.</li> <li>Sets defaults: <code>KYJOBQ = 'N'</code>, <code>KYCOPY = 01</code>.</li> <li>Sets <code>*IN81 = *ON</code> to display the screen.</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validates user input for company selection, company numbers, and job queue settings.</li> <li>Steps:<ul> <li>Company Selection Validation:</li> <li>Checks if <code>KYALCO = 'ALL'</code> or <code>KYALCO = 'CO '</code>. If neither, sets error indicators (<code>*IN81</code>, <code>*IN90</code>), displays error message <code>COM(1)</code> (\"COMPANY SELECTION MUST BE 'CO' OR 'ALL'\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'CO'</code> and all company numbers (<code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>) are <code>0</code>, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays <code>COM(2)</code> (\"IF CO, THEN ENTER VALID COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>If <code>KYALCO = 'ALL'</code> and any company number is non-zero, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays <code>COM(3)</code> (\"IF ALL, THEN DO NOT ENTER COMPANIES\"), and jumps to <code>ENDS1</code>.</li> <li>Company Number Validation (if <code>KYALCO = 'CO'</code>):</li> <li>For each non-zero <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, performs a <code>CHAIN</code> to <code>ARCONT</code> to verify the company number exists.</li> <li>If any company number is invalid (<code>*IN10 = *ON</code>), sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>/<code>IN52</code>/<code>IN53</code>), displays <code>COM(4)</code> (\"INVALID COMPANY NUMBER\"), and jumps to <code>ENDS1</code>.</li> <li>Job Queue Validation:</li> <li>Checks if <code>KYJOBQ = 'Y'</code> or <code>KYJOBQ = 'N'</code>. If neither, sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN54</code>), displays <code>COM(5)</code> (\"JOB QUEUE ENTRY MUST BE 'Y' OR 'N'\"), and jumps to <code>ENDS1</code>.</li> <li>Copy Count Validation:</li> <li>If <code>KYCOPY = 0</code>, sets it to <code>01</code> to ensure at least one copy.</li> <li>Jumps to <code>ENDS1</code> to end the subroutine.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for generating the A/R Control File List:</p> <ol> <li>Company Selection:</li> <li>The user must select either <code>ALL</code> (process all companies) or <code>CO</code> (specific companies) via <code>KYALCO</code>.</li> <li>If <code>KYALCO = 'CO'</code>, at least one valid company number (<code>KYCO1</code>, <code>KYCO2</code>, or <code>KYCO3</code>) must be provided.</li> <li>If <code>KYALCO = 'ALL'</code>, no company numbers should be entered.</li> <li> <p>Company numbers must exist in the <code>ARCONT</code> file and not be marked as deleted (<code>ACDEL \u2260 'D'</code>).</p> </li> <li> <p>Job Queue Selection:</p> </li> <li>The job queue flag (<code>KYJOBQ</code>) must be either <code>Y</code> (submit to job queue) or <code>N</code> (run interactively).</li> <li> <p>This aligns with the OCL script\u2019s conditional job submission (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code>).</p> </li> <li> <p>Copy Count:</p> </li> <li> <p>The number of report copies (<code>KYCOPY</code>) must be at least 1. If set to 0, it defaults to 1.</p> </li> <li> <p>Error Handling:</p> </li> <li>Invalid inputs (e.g., wrong <code>KYALCO</code>, invalid company numbers, or incorrect <code>KYJOBQ</code>) trigger error messages from the <code>COM</code> array and prevent further processing until corrected.</li> <li> <p>The cancel key (<code>*INKG</code>) allows the user to exit, setting <code>KYCANC = 'CANCEL'</code>, which the OCL script checks to terminate the job.</p> </li> <li> <p>Data Validation:</p> </li> <li>Only non-deleted records (<code>ACDEL \u2260 'D'</code>) from <code>ARCONT</code> are used.</li> <li> <p>Up to 10 companies can be displayed (<code>DCO</code> array), populated from <code>ARCONT</code>.</p> </li> <li> <p>Default Settings:</p> </li> <li>If <code>GSCONT</code> contains a non-zero company number (<code>GXCONO</code>), it defaults to <code>KYALCO = 'CO '</code> with <code>KYCO1 = GXCONO</code>. Otherwise, <code>KYALCO = 'ALL'</code>.</li> <li><code>KYJOBQ</code> defaults to <code>N</code>, and <code>KYCOPY</code> defaults to <code>01</code>.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#tablesfiles-used","title":"Tables/Files Used","text":"<ol> <li>AR931PD:</li> <li>Type: Display file (workstation file).</li> <li>Purpose: Handles user interaction, displaying prompts for <code>KYALCO</code>, <code>KYCO1</code>, <code>KYCO2</code>, <code>KYCO3</code>, <code>KYJOBQ</code>, <code>KYCOPY</code>, <code>DCO</code> (company list), and <code>MSG</code> (error messages).</li> <li> <p>Uses the Profound UI handler for modernized display.</p> </li> <li> <p>ARCONT:</p> </li> <li>Type: Input file (disk, 256 bytes, indexed).</li> <li>Purpose: Stores Accounts Receivable control data, including:<ul> <li><code>ACDEL</code> (position 1): Delete flag (<code>'D'</code> for deleted).</li> <li><code>ACCO</code> (positions 2-3): Company number.</li> <li><code>ACNAME</code> (positions 4-33): Company name.</li> </ul> </li> <li> <p>Used to validate company numbers and populate the <code>DCO</code> array.</p> </li> <li> <p>GSCONT:</p> </li> <li>Type: Input file (disk, 512 bytes, indexed).</li> <li>Purpose: Stores system control data, including:<ul> <li><code>GXDEL</code> (position 1): Delete flag.</li> <li><code>GXCONO</code> (positions 77-78): Company number.</li> </ul> </li> <li>Used to determine the default company selection (<code>KYALCO</code> and <code>KYCO1</code>).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<p>The RPGLE program does not explicitly call any external programs using <code>CALL</code> operations. However, the OCL script (<code>AR931P.ocl36.txt</code>) provides context for how <code>AR931P</code> fits into the workflow:</p> <ul> <li>AR931:</li> <li>Referenced in the OCL script (<code>// IF ?L'120,1'?/Y JOBQ ?CLIB?,AR931</code> or <code>// ELSE AR931</code>).</li> <li>Likely an RPG program or job that generates the actual A/R Control File List report, using parameters validated by <code>AR931P</code>.</li> <li> <p>Not called directly from the RPGLE code but is part of the job flow.</p> </li> <li> <p>GSGENIEC and SCPROCP:</p> </li> <li>Called in the OCL script before <code>AR931P</code> is loaded.</li> <li>Not referenced in the RPGLE code but part of the broader job setup.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#integration-with-ocl-script","title":"Integration with OCL Script","text":"<p>The OCL script (<code>AR931P.ocl36.txt</code>) orchestrates the execution of <code>AR931P</code>: - It loads and runs <code>AR931P</code> with the <code>ARCONT</code> file. - It checks <code>KYCANC</code> (positions 129-134) for <code>'CANCEL'</code> to terminate if the user cancels. - It uses <code>KYJOBQ</code> (position 120) to decide whether to queue <code>AR931</code> (<code>Y</code>) or run it directly (<code>N</code>). - The <code>?9?</code> parameter in the OCL script aligns with file labels and library references.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/AR931P%20RPGLE/#summary","title":"Summary","text":"<ul> <li>Process Overview: <code>AR931P</code> prompts the user for company selection (<code>ALL</code> or specific companies), company numbers, job queue settings, and report copies via a display file (<code>AR931PD</code>). It validates inputs against <code>ARCONT</code> and <code>GSCONT</code>, populates a company list, and sets parameters for the OCL script to control further job execution (e.g., running <code>AR931</code>). It handles errors with appropriate messages and allows cancellation.</li> <li>Business Rules: Enforces valid company selection (<code>ALL</code> or <code>CO</code>), valid company numbers, correct job queue settings (<code>Y</code> or <code>N</code>), and a minimum of one report copy. Uses <code>GSCONT</code> for defaults and skips deleted records in <code>ARCONT</code>.</li> <li>Files/Tables: <code>AR931PD</code> (display), <code>ARCONT</code> (A/R control data), <code>GSCONT</code> (system control data).</li> <li>External Programs: None called directly in RPGLE, but <code>AR931</code> (report generation), <code>GSGENIEC</code>, and <code>SCPROCP</code> are part of the OCL workflow.</li> </ul> <p>If you need further analysis (e.g., details of <code>AR931</code> or the display file format), please provide additional files or context, as some components (e.g., <code>AR931PFM</code>, <code>AR931</code>) are referenced but not fully defined here.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/","title":"Summary AR931P OCL","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#use-cases-implemented-by-the-program","title":"Use Cases Implemented by the Program","text":"<p>The call stack consists of the OCL script (<code>AR931P.ocl36.txt</code>), the RPGLE program (<code>AR931P.rpgle.txt</code>), and the RPG program (<code>AR931.rpg36.txt</code>). Together, they implement a single primary use case for generating an Accounts Receivable (A/R) Control File Listing report. Below is the identified use case:</p> <ol> <li>Generate Accounts Receivable Control File Listing Report:</li> <li>Description: This use case allows a user or system process to generate a formatted report listing details from the A/R control file (<code>ARCONT</code>) for selected companies, including general ledger numbers, journal numbers, finance charge percentages, fiscal month, and aging bucket limits. The process involves validating input parameters (company selection, job queue option, and number of copies) and producing a printed report with headers and detail lines.</li> <li>Components:<ul> <li><code>AR931P.ocl36.txt</code>: Orchestrates the job flow, calling setup programs and conditionally executing <code>AR931P</code> and <code>AR931</code>.</li> <li><code>AR931P.rpgle.txt</code>: Prompts for and validates user input (company selection, job queue, copies) via a display file, ensuring valid parameters are passed to <code>AR931</code>.</li> <li><code>AR931.rpg36.txt</code>: Reads <code>ARCONT</code> records and generates the report, applying filtering and formatting rules.</li> </ul> </li> <li>Inputs: Company selection (<code>ALL</code> or specific companies), company numbers (up to three), job queue flag (<code>Y</code> or <code>N</code>), number of copies.</li> <li>Outputs: A printed report listing A/R control data for selected companies, with aging buckets based on invoice date (0-30, 31-60, 61-90, 91-120, over 120 days).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#function-requirement-document","title":"Function Requirement Document","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#accounts-receivable-control-file-listing-function-requirements","title":"Accounts Receivable Control File Listing Function Requirements","text":""},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#purpose","title":"Purpose","text":"<p>To generate a formatted Accounts Receivable (A/R) Control File Listing report based on specified company selection, job queue settings, and number of copies, using data from the A/R control file (<code>ARCONT</code>).</p>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Selection: <code>ALL</code> (all companies) or <code>CO</code> (specific companies).</li> <li>Company Numbers: Up to three company numbers (numeric, 2 digits each) if <code>CO</code> is selected.</li> <li>Job Queue Flag: <code>Y</code> (submit to job queue) or <code>N</code> (run interactively).</li> <li>Number of Copies: Integer (minimum 1) for report copies.</li> <li>System Control Data: Optional company number from <code>GSCONT</code> for default settings.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Printed Report: Lists A/R control data for selected companies, including:</li> <li>Company number and name.</li> <li>A/R, cash, discount, intercompany, and finance G/L numbers.</li> <li>Next A/R and sales journal numbers.</li> <li>Finance charge percentage and security code.</li> <li>First fiscal month.</li> <li>Aging bucket upper limits (0-30, 31-60, 61-90, 91-120 days).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Validate Inputs:</li> <li>Verify company selection is <code>ALL</code> or <code>CO</code>.</li> <li>If <code>CO</code>, ensure at least one valid company number exists in <code>ARCONT</code> and is not deleted (<code>ACDEL \u2260 'D'</code>).</li> <li>If <code>ALL</code>, ensure no company numbers are provided.</li> <li>Validate job queue flag is <code>Y</code> or <code>N</code>.</li> <li>Ensure number of copies is at least 1 (default to 1 if 0).</li> <li> <p>Check system control file (<code>GSCONT</code>) for default company number; set <code>ALL</code> if none provided.</p> </li> <li> <p>Read A/R Control Data:</p> </li> <li>Access <code>ARCONT</code> file (256 bytes/record).</li> <li>Filter out records with <code>ACDEL = 'D'</code>.</li> <li> <p>Apply company selection:</p> <ul> <li>If <code>ALL</code>, include all non-deleted records.</li> <li>If <code>CO</code>, include only records matching specified company numbers.</li> </ul> </li> <li> <p>Generate Report:</p> </li> <li>Print headers: report title, date, time, page number, and column labels (e.g., \"CO#\", \"COMPANY NAME\", \"A/R G/L#\").</li> <li>For each selected <code>ARCONT</code> record, print:<ul> <li><code>ACCO</code> (company number), <code>ACNAME</code> (company name).</li> <li><code>ACARGL</code>, <code>ACCSGL</code>, <code>ACDSGL</code>, <code>ACICGL</code>, <code>ACFNGL</code> (G/L numbers).</li> <li><code>ACARJ#</code>, <code>ACSLJ#</code> (journal numbers).</li> <li><code>ACFINC</code> (finance charge %), <code>ACSECR</code> (security code), <code>ACFFMO</code> (fiscal month).</li> <li><code>ACLMT1</code>, <code>ACLMT2</code>, <code>ACLMT3</code>, <code>ACLMT4</code> (aging bucket limits).</li> </ul> </li> <li>Use separator lines for readability.</li> <li> <p>Handle page overflow by reprinting headers.</p> </li> <li> <p>Job Execution:</p> </li> <li>If job queue flag is <code>Y</code>, submit report generation to job queue.</li> <li>If <code>N</code>, run interactively.</li> <li>Produce specified number of report copies.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#business-rules","title":"Business Rules","text":"<ul> <li>Company Selection:</li> <li>Must be <code>ALL</code> or <code>CO</code>.</li> <li><code>CO</code> requires 1\u20133 valid company numbers from <code>ARCONT</code>.</li> <li><code>ALL</code> prohibits company number entries.</li> <li>Aging Buckets:</li> <li>Based on invoice date (not due date), per revision (04/13/05):<ul> <li>0-30 days (<code>ACLMT1</code>).</li> <li>31-60 days (<code>ACLMT2</code>).</li> <li>61-90 days (<code>ACLMT3</code>).</li> <li>91-120 days (<code>ACLMT4</code>).</li> <li>Over 120 days (implicit).</li> </ul> </li> <li>Record Filtering: Exclude deleted records (<code>ACDEL = 'D'</code>).</li> <li>Job Queue: Must be <code>Y</code> or <code>N</code>.</li> <li>Copies: Minimum 1; default to 1 if invalid.</li> <li>Defaults: Use <code>GSCONT</code> company number for <code>CO</code> selection if available; otherwise, default to <code>ALL</code>.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Aging Buckets: No calculations in the function; bucket limits (<code>ACLMT1</code>\u2013<code>ACLMT4</code>) are stored in <code>ARCONT</code> and printed as-is.</li> <li>Page Numbering: Increment <code>PAGE</code> for each new page on overflow.</li> <li>Date/Time: Capture system date and time for report header; format as MMDDYY and HHMMSS.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#dependencies","title":"Dependencies","text":"<ul> <li>Files:</li> <li><code>ARCONT</code>: A/R control data (input).</li> <li><code>GSCONT</code>: System control data for default company (input).</li> <li><code>PRINT</code>: Printer file for report output.</li> <li>System: IBM System/36 or AS/400 environment with job queue support.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR931P%20Control%20File%20List/Summary%20AR931P%20OCL/#error-handling","title":"Error Handling","text":"<ul> <li>Return error if:</li> <li>Company selection is not <code>ALL</code> or <code>CO</code>.</li> <li><code>CO</code> selected with invalid or missing company numbers.</li> <li><code>ALL</code> selected with company numbers provided.</li> <li>Job queue flag is not <code>Y</code> or <code>N</code>.</li> <li>Cancel process if user or system signals cancellation (sets <code>KYCANC = 'CANCEL'</code>).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/","title":"AR933P OCL","text":"<p>The provided document is an Operation Control Language (OCL) program, <code>AR933P.ocl36.txt</code>, used in IBM midrange systems (like AS/400 or iSeries) to control job execution and interact with RPG programs. OCL is a scripting language for defining job steps, file operations, and program flow in such environments. Below, I\u2019ll explain the process steps of this OCL program, identify external programs called, and list the tables (files) used, based on the provided code.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#process-steps-of-the-ocl-program","title":"Process Steps of the OCL Program","text":"<p>The OCL program <code>AR933P</code> appears to manage an accounts receivable update process, likely interacting with an RPG program to update the <code>ARCONT</code> table based on a month/year closed value. Here\u2019s a step-by-step breakdown of the process:</p> <ol> <li>**Program Invocation (<code>// CALL PGM(GSGENIEC)</code>):</li> <li>The program starts by calling an external program named <code>GSGENIEC</code>.</li> <li>This is likely a utility or initialization program that performs setup tasks, such as validating the environment, checking user authority, or preparing data for the accounts receivable update.</li> <li> <p>Since no parameters are explicitly passed, <code>GSGENIEC</code> likely operates on predefined system variables or files.</p> </li> <li> <p>**Conditional Check (<code>// IFF ?L'506,3'?/YES RETURN</code>):</p> </li> <li>The <code>IFF</code> statement checks a condition using a system variable or field at location <code>L'506,3'</code>. This could be a status code, flag, or value stored in a specific memory location or data area.</li> <li>The notation <code>?L'506,3'?</code> suggests checking a 3-byte field starting at position 506.</li> <li>If the condition evaluates to <code>YES</code> (true), the program executes the <code>RETURN</code> command, which terminates the OCL program immediately, halting further execution.</li> <li> <p>This acts as a gatekeeper, ensuring the program only proceeds if the condition is false (e.g., a specific status is not set).</p> </li> <li> <p>**Procedure Call (<code>// SCPROCP ,,,,,,,,?9?</code>):</p> </li> <li>The <code>SCPROCP</code> command invokes a system procedure or utility, passing a parameter <code>?9?</code> in the ninth position (indicated by the commas, which act as placeholders for eight empty parameters).</li> <li>The <code>?9?</code> likely references a variable or value (e.g., a job number, user ID, or control value) defined elsewhere in the system or passed to the OCL program.</li> <li> <p>The exact purpose of <code>SCPROCP</code> is unclear without system context, but it might perform tasks like setting up a job queue, logging, or initializing system resources for the accounts receivable process.</p> </li> <li> <p>**Set Local Variable (<code>// LOCAL BLANK-*ALL</code>):</p> </li> <li>This command initializes all local variables in the OCL program\u2019s scope to blanks (empty values).</li> <li> <p>This ensures that any previously set values in the local variable space are cleared, preventing unintended carryover of data from prior runs or jobs.</p> </li> <li> <p>**Date Conversion (<code>// GSY2K</code>):</p> </li> <li>The <code>GSY2K</code> command invokes a system utility or procedure to handle date processing, likely ensuring dates are in a two-digit year format (e.g., for Y2K compliance or legacy date handling).</li> <li> <p>This step might adjust or validate date fields used in the accounts receivable update, such as the month/year closed value mentioned in the program\u2019s header.</p> </li> <li> <p>**Load RPG Program (<code>// LOAD AR933P</code>):</p> </li> <li>The <code>LOAD</code> command loads the RPG program named <code>AR933P</code> into memory for execution.</li> <li>This suggests that <code>AR933P</code> is both the name of the OCL program and the associated RPG program, a common practice where the OCL script sets up the environment for an RPG program with the same name.</li> <li> <p>The RPG program likely contains the core logic for updating the <code>ARCONT</code> table.</p> </li> <li> <p>**File Definition (<code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>):</p> </li> <li>This defines a file named <code>ARCONT</code> to be used by the RPG program.</li> <li>The <code>LABEL-?9?ARCONT</code> clause indicates that the file\u2019s label (or alias) includes a variable <code>?9?</code>, which might dynamically specify a library, member, or version of the <code>ARCONT</code> file (e.g., a specific dataset or period).</li> <li><code>DISP-SHR</code> (disposition shared) allows multiple jobs to access the file simultaneously, typically in read-only or controlled update mode, preventing exclusive locks.</li> <li> <p>The <code>ARCONT</code> file is likely the accounts receivable control table, storing data like closed month/year values or summary totals.</p> </li> <li> <p>**Execute Program (<code>// RUN</code>):</p> </li> <li>The <code>RUN</code> command executes the loaded RPG program (<code>AR933P</code>).</li> <li> <p>The RPG program processes the <code>ARCONT</code> file, performing the accounts receivable update (e.g., updating the month/year closed value or related financial data).</p> </li> <li> <p>**Error Check (<code>// IF ?L'129,6'?/CANCEL GOTO END</code>):</p> </li> <li>After running the RPG program, the <code>IF</code> statement checks a condition at location <code>L'129,6'</code>, likely a return code or status flag set by the RPG program.</li> <li>If the condition is true (e.g., an error occurred), the <code>CANCEL</code> action terminates the job, and control jumps to the <code>END</code> tag, ending the program.</li> <li> <p>This acts as an error-handling mechanism to stop processing if the RPG program fails (e.g., due to invalid data or file issues).</p> </li> <li> <p>**End Tag (<code>// TAG END</code>):</p> <ul> <li>The <code>END</code> tag marks a label where the program can jump, in this case, used to terminate execution after an error or normal completion.</li> <li>No additional logic follows, so the program ends here if the error condition is met or after normal execution.</li> </ul> </li> <li> <p>**Clear Local Variables Again (<code>// LOCAL BLANK-*ALL</code>):</p> <ul> <li>This second <code>LOCAL BLANK-*ALL</code> command clears all local variables again, ensuring no residual data remains in memory after the program completes.</li> <li>This is a cleanup step to maintain a clean environment for subsequent jobs or to free resources.</li> </ul> </li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#external-programs-called","title":"External Programs Called","text":"<p>The OCL program explicitly calls the following external programs or procedures: 1. GSGENIEC:    - Called via <code>// CALL PGM(GSGENIEC)</code>.    - Likely a system utility or initialization program for setting up the job environment. 2. SCPROCP:    - Invoked via <code>// SCPROCP ,,,,,,,,?9?</code>.    - A system procedure, possibly for job control, logging, or resource allocation. 3. GSY2K:    - Invoked via <code>// GSY2K</code>.    - A date-handling utility, likely for Y2K-compliant date processing or validation. 4. AR933P (RPG program):    - Loaded and executed via <code>// LOAD AR933P</code> and <code>// RUN</code>.    - The core RPG program that performs the accounts receivable update logic.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#tables-files-used","title":"Tables (Files) Used","text":"<p>The program references the following table (file): 1. ARCONT:    - Defined via <code>// FILE NAME-ARCONT,LABEL-?9?ARCONT,DISP-SHR</code>.    - This is the accounts receivable control table, likely containing data such as closed month/year values, account totals, or control records for the accounts receivable process.    - The <code>?9?</code> in the label suggests a dynamic or parameterized file name, possibly indicating a specific library or member.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20OCL/#summary","title":"Summary","text":"<p>The <code>AR933P</code> OCL program orchestrates an accounts receivable update process by: - Initializing the environment with <code>GSGENIEC</code> and checking a condition to proceed. - Calling a system procedure (<code>SCPROCP</code>) and handling date formatting (<code>GSY2K</code>). - Loading and running the <code>AR933P</code> RPG program, which processes the <code>ARCONT</code> file. - Checking for errors and cleaning up local variables.</p> <p>External Programs Called: <code>GSGENIEC</code>, <code>SCPROCP</code>, <code>GSY2K</code>, <code>AR933P</code> (RPG). Tables Used: <code>ARCONT</code>.</p> <p>If you need further clarification or analysis (e.g., diving into the RPG program\u2019s logic or specific system context), please let me know!</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/","title":"AR933P RPGLE","text":"<p>The provided document, <code>AR933P.rpgle.txt</code>, is an RPGLE (RPG IV) program that updates the Accounts Receivable (A/R) control file (<code>ARCONT</code>) with a new closed month/year value for a specified company. It is called from the OCL program <code>AR933P.ocl36.txt</code> and interacts with a workstation display file (<code>AR933PD</code>) for user input and output. Below, I\u2019ll explain the process steps, business rules, tables used, and external programs called, based on the RPGLE code.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#process-steps-of-the-rpgle-program","title":"Process Steps of the RPGLE Program","text":"<p>The <code>AR933P</code> RPGLE program manages the update of the A/R closed date in the <code>ARCONT</code> file, with user interaction via a display file (<code>AR933PD</code>). The program validates user input (company number, month, and year) and updates the corresponding record in <code>ARCONT</code>. Here\u2019s a detailed breakdown of the process steps:</p> <ol> <li>Program Initialization:</li> <li>Header Specifications:<ul> <li><code>DFTACTGRP(*NO)</code>: Runs in a named activation group, not the default, allowing better control over program resources.</li> <li><code>DFTNAME(AR933P)</code>: Sets the default program name to <code>AR933P</code>.</li> <li><code>FIXNBR(*ZONED:*INPUTPACKED)</code>: Ensures zoned and packed numeric fields are handled correctly during input.</li> </ul> </li> <li>File Declarations:<ul> <li><code>AR933PD CF E WORKSTN</code>: A workstation file for user interaction, using a handler (<code>PROFOUNDUI(HANDLER)</code>) for modern UI support (e.g., Profound UI).</li> <li><code>ARCONT UF F 256 2AIDISK KEYLOC(2)</code>: The A/R control file, updatable, with a record length of 256 bytes and a key starting at position 2 (company number, <code>ACCO</code>).</li> <li><code>GSCONT IF F 512 2AIDISK KEYLOC(2)</code>: A general system control file, input-only, with a key at position 2 (company number, <code>GXCONO</code>).</li> </ul> </li> <li> <p>Data Definitions:</p> <ul> <li>Arrays (<code>COM</code>, <code>DCNO</code>, <code>DCO</code>, <code>DCM</code>, <code>DCY</code>) store error messages and company data (company numbers, names, months, and years) for display.</li> <li>Data structure (<code>UDS</code>) defines <code>KYCANC</code> (positions 129-134) to store a cancellation flag.</li> <li>Input specifications define fields for <code>AR933PD</code> (company number, month, year) and <code>ARCONT</code> (delete flag, company number, name, closed date fields).</li> </ul> </li> <li> <p>Workstation File Read and Initial Logic (<code>C</code> Specs, Lines T4A):</p> </li> <li>Check <code>QSCTL</code>:<ul> <li>If <code>QSCTL</code> (a control field, likely set by the system or OCL) is blank, the program sets indicators <code>*IN09</code> (display initial screen) and <code>*IN01</code> (process screen input) to control flow and sets <code>QSCTL</code> to <code>'R'</code> (read mode).</li> <li>Otherwise, it reads the display file (<code>AR933PD</code>), sets <code>*INLR</code> (last record), and returns, terminating the program. This likely handles a specific system state or reinvocation scenario.</li> </ul> </li> <li>Clear Messages and Indicators:<ul> <li>Clears message fields (<code>MSG</code>, <code>MSG2</code>) and resets indicators (<code>*IN51</code>, <code>*IN52</code>, <code>*IN53</code>, <code>*IN54</code>, <code>*IN81</code>, <code>*IN90</code>) to ensure a clean state.</li> </ul> </li> <li> <p>Handle Cancel Key:</p> <ul> <li>If <code>*INKG</code> (cancel key) is on, the program sets <code>*INLR</code> (last record), clears <code>*IN01</code> and <code>*IN09</code>, sets <code>KYCANC</code> to <code>'CANCEL'</code>, and exits. This corresponds to the OCL error check (<code>L'129,6'</code>).</li> </ul> </li> <li> <p>Initial Screen Display (<code>*IN09</code> Logic):</p> </li> <li> <p>If <code>*IN09</code> is on (initial screen display), the program:</p> <ul> <li>Sets <code>*IN81</code> to display the screen.</li> <li>Calls the <code>ONETIM</code> subroutine to load company data for display.</li> </ul> </li> <li> <p>Screen Input Processing (<code>*IN01</code> Logic):</p> </li> <li> <p>If <code>*IN01</code> is on (user input received), the program calls the <code>SCREEN1</code> subroutine to validate and process the input.</p> </li> <li> <p>Write to Display and Termination:</p> </li> <li>If <code>*IN81</code> is off, the program sets <code>*INLR</code> and exits (no screen display needed).</li> <li>If <code>*IN81</code> is on, it writes to the display file (<code>AR933PD</code>) to show results or errors.</li> <li> <p>The program ends at the <code>END</code> tag.</p> </li> <li> <p>ONETIM Subroutine:</p> </li> <li>Purpose: Loads company data from <code>ARCONT</code> for display.</li> <li> <p>Steps:</p> <ul> <li>Chains to <code>GSCONT</code> using <code>'00'</code> to retrieve a control record. If found and <code>GXCONO</code> (company number) is non-zero, it sets <code>KYCONO</code> (key company number).</li> <li>Captures the current time (<code>TIME12</code>) and moves it to <code>SYDATE</code> and <code>TIMEOF</code>.</li> <li>Clears the <code>DCO</code> array and initializes <code>X</code> (index) and <code>ACLIM</code> (limit counter).</li> <li>Sets the lower limit (<code>SETLL</code>) on <code>ARCONT</code> using <code>ACLIM</code> (likely <code>00</code>).</li> <li>Reads <code>ARCONT</code> records in a loop until end-of-file (<code>*IN10</code>) or three records are processed:</li> <li>Skips records with <code>ACDEL = 'D'</code> (deleted).</li> <li>Stores company number (<code>ACCO</code>), name (<code>ACNAME</code>), month (<code>ACMNTH</code>), and year (<code>ACYEAR</code>) in arrays (<code>DCNO</code>, <code>DCO</code>, <code>DCM</code>, <code>DCY</code>).</li> <li>Increments <code>X</code> until it reaches 3 or end-of-file.</li> <li>Moves array data to display fields (<code>DCCO1-3</code>, <code>DCNM1-3</code>, <code>DCMN1-3</code>, <code>DCYR1-3</code>).</li> <li>Sets <code>*IN81</code> to display the screen.</li> </ul> </li> <li> <p>SCREEN1 Subroutine:</p> </li> <li>Purpose: Validates user input and updates <code>ARCONT</code>.</li> <li> <p>Steps:</p> <ul> <li>Validate Company Number:</li> <li>Chains to <code>ARCONT</code> using <code>KYCONO</code> (input company number).</li> <li>If not found (<code>*IN99</code>), sets error indicators (<code>*IN81</code>, <code>*IN90</code>, <code>*IN51</code>), displays error message <code>COM(1)</code> (\"INVALID COMPANY NUMBER\"), and jumps to <code>ENDS1</code>.</li> <li>Validate Month:</li> <li>Checks if <code>KYMNTH</code> (input month) is between 01 and 12. If not, sets error indicators and displays <code>COM(2)</code> (\"INVALID MONTH ENTERED\").</li> <li>Validate Year:</li> <li>Checks if <code>KYYEAR</code> (input year) is between 2000 and 2079. If not, sets error indicators and displays <code>COM(3)</code> (\"INVALID YEAR ENTERED\").</li> <li>Validate Date:</li> <li>Combines <code>KYYEAR</code> and <code>KYMNTH</code> into <code>DATE</code> (6-digit format, e.g., YYYYMM).</li> <li>Compares <code>ACDTCL</code> (current closed date in <code>ARCONT</code>) with <code>DATE</code>. If <code>DATE</code> is earlier, sets error indicators and displays <code>COM(4)</code> (\"NEW DATE IS EARLIER THAN PREVIOUS DATE\").</li> <li>Update <code>ARCONT</code>:</li> <li>If all validations pass, updates <code>ARCONT</code> with <code>KYMNTH</code> and <code>KYYEAR</code> using the <code>UPDATE</code> operation.</li> <li>Reload and Display:</li> <li>Calls <code>ONETIM</code> to refresh company data.</li> <li>Sets success message <code>COM(5)</code> (\"COMPANY A/R CLOSED DATE WAS SUCCESSFULLY UPDATED\").</li> <li>Sets <code>*IN81</code> to display the updated screen.</li> <li>Ends at <code>ENDS1</code>.</li> </ul> </li> <li> <p>Output Specifications:</p> </li> <li>Updates <code>ARCONT</code> with <code>KYMNTH</code> (position 131) and <code>KYYEAR</code> (positions 126-129).</li> <li>Writes to <code>AR933PD</code> (commented out in original, modified to <code>AR933PFM</code>) with fields like company number, month, year, and messages.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#business-rules","title":"Business Rules","text":"<p>The program enforces the following business rules for updating the A/R closed date: 1. Company Number Validation:    - The entered company number (<code>KYCONO</code>) must exist in the <code>ARCONT</code> file. If not, display \"INVALID COMPANY NUMBER\". 2. Month Validation:    - The entered month (<code>KYMNTH</code>) must be between 01 and 12. If not, display \"INVALID MONTH ENTERED\". 3. Year Validation:    - The entered year (<code>KYYEAR</code>) must be between 2000 and 2079. If not, display \"INVALID YEAR ENTERED\". 4. Date Progression:    - The new closed date (<code>KYYEAR</code> + <code>KYMNTH</code>) must not be earlier than the existing closed date (<code>ACDTCL</code>) in <code>ARCONT</code>. If it is, display \"NEW DATE IS EARLIER THAN PREVIOUS DATE\". 5. Successful Update:    - If all validations pass, update the <code>ARCONT</code> record with the new month and year, and display \"COMPANY A/R CLOSED DATE WAS SUCCESSFULLY UPDATED\". 6. Cancellation:    - If the user presses the cancel key (<code>*INKG</code>), set <code>KYCANC</code> to <code>'CANCEL'</code> and exit, allowing the OCL program to detect this via <code>L'129,6'</code>. 7. Display Logic:    - Display up to three non-deleted (<code>ACDEL \u2260 'D'</code>) company records from <code>ARCONT</code>, including company number, name, and current closed month/year.    - Show error or success messages based on validation results.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#tables-files-used","title":"Tables (Files) Used","text":"<ol> <li>AR933PD:</li> <li>Type: Workstation (display) file.</li> <li>Purpose: Handles user input (company number, month, year) and output (company data, messages).</li> <li>Fields: <code>CONO</code> (company number), <code>MONTH</code>, <code>YEAR</code>, <code>DCNO</code> (company numbers), <code>DCO</code> (company names), <code>DCM</code> (months), <code>DCY</code> (years), <code>MSG</code>, <code>MSG2</code>.</li> <li>ARCONT:</li> <li>Type: Updatable disk file, 256 bytes, keyed on company number (<code>ACCO</code>, position 2).</li> <li>Purpose: Stores A/R control data, including company number (<code>ACCO</code>), name (<code>ACNAME</code>), closed month (<code>ACMNTH</code>), year (<code>ACYEAR</code>), and delete flag (<code>ACDEL</code>).</li> <li>Fields Updated: <code>ACMNTH</code> (position 130-131), <code>ACYEAR</code> (position 126-129).</li> <li>GSCONT:</li> <li>Type: Input-only disk file, 512 bytes, keyed on company number (<code>GXCONO</code>, position 2).</li> <li>Purpose: General system control file, used to retrieve a control record (key <code>'00'</code>) to set the company number (<code>KYCONO</code>).</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#external-programs-called","title":"External Programs Called","text":"<ul> <li>None:</li> <li>The RPGLE program does not explicitly call external programs (e.g., via <code>CALL</code> operation).</li> <li>The <code>PROFOUNDUI(HANDLER)</code> in the <code>AR933PD</code> file specification indicates integration with Profound UI for display handling, but this is a runtime handler, not a separate program.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/AR933P%20RPGLE/#summary","title":"Summary","text":"<p>The <code>AR933P</code> RPGLE program, called by the OCL program <code>AR933P.ocl36</code>, updates the A/R closed date in the <code>ARCONT</code> file based on user input from the <code>AR933PD</code> display file. It: - Loads company data from <code>ARCONT</code> and <code>GSCONT</code> for display. - Validates user input (company number, month, year) against strict business rules. - Updates the <code>ARCONT</code> record if valid, or displays error messages. - Handles cancellation and displays success messages. - Uses subroutines <code>ONETIM</code> (load data) and <code>SCREEN1</code> (validate/update).</p> <p>Tables Used: <code>AR933PD</code> (workstation), <code>ARCONT</code> (A/R control), <code>GSCONT</code> (system control). External Programs Called: None.</p> <p>If you need further details (e.g., interaction with the OCL program, specific field mappings, or UI behavior), please let me know!</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/","title":"Summary AR933P OCL","text":"<p>Based on the provided OCL (<code>AR933P.ocl36.txt</code>) and RPGLE (<code>AR933P.rpgle.txt</code>) programs, I will first identify the use cases implemented by the program. Then, I will create a function requirements document for a single use case, reimagined as a large function that accepts inputs programmatically rather than through a screen, focusing on business requirements and necessary calculations.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#use-cases-implemented-by-the-program","title":"Use Cases Implemented by the Program","text":"<p>The <code>AR933P</code> program (OCL and RPGLE combined) implements a single primary use case:</p> <ol> <li>Update Accounts Receivable (A/R) Closed Date for a Company:</li> <li>Description: The program allows a user to update the A/R closed month and year for a specified company in the <code>ARCONT</code> file, ensuring the input is valid and the new date is not earlier than the existing closed date. It retrieves and displays up to three non-deleted company records (company number, name, month, and year) for reference and provides feedback on success or errors.</li> <li>Inputs: Company number, month, and year (via the <code>AR933PD</code> display file).</li> <li>Outputs: Updated <code>ARCONT</code> record, success message, or error message (e.g., invalid company, month, year, or date progression).</li> <li>Process: Validates inputs, checks the existing closed date, updates the <code>ARCONT</code> file, and refreshes the display with updated company data or error messages.</li> </ol> <p>No additional distinct use cases are implemented, as the program focuses solely on updating the A/R closed date with associated validation and display logic.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-requirements-document","title":"Function Requirements Document","text":"<p>The following document describes a function that implements the \"Update Accounts Receivable Closed Date for a Company\" use case, reimagined as a programmatic function that accepts inputs directly (no screen interaction). It outlines the business requirements, process steps, and calculations concisely.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-requirements-update-ar-closed-date","title":"Function Requirements: Update A/R Closed Date","text":""},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#function-name","title":"Function Name","text":"<p><code>UpdateARClosedDate</code></p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#purpose","title":"Purpose","text":"<p>Update the Accounts Receivable (A/R) closed month and year for a specified company in the <code>ARCONT</code> file, ensuring the input is valid and the new date is not earlier than the existing closed date.</p>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#inputs","title":"Inputs","text":"<ul> <li>Company Number (<code>CompanyNo</code>, 2-digit numeric): The unique identifier of the company.</li> <li>Month (<code>NewMonth</code>, 2-digit numeric): The new A/R closed month (01-12).</li> <li>Year (<code>NewYear</code>, 4-digit numeric): The new A/R closed year (2000-2079).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#outputs","title":"Outputs","text":"<ul> <li>Status (String): <code>\"SUCCESS\"</code> or an error message (e.g., \"INVALID COMPANY NUMBER\", \"INVALID MONTH ENTERED\", \"INVALID YEAR ENTERED\", \"NEW DATE IS EARLIER THAN PREVIOUS DATE\").</li> <li>Updated Company Data (Optional, Array of Records): Up to three non-deleted company records, each containing:</li> <li>Company Number (2-digit numeric)</li> <li>Company Name (30-character string)</li> <li>Closed Month (2-digit numeric)</li> <li>Closed Year (4-digit numeric)</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#business-requirements","title":"Business Requirements","text":"<ol> <li>Company Number Validation: The <code>CompanyNo</code> must exist in the <code>ARCONT</code> file.</li> <li>Month Validation: The <code>NewMonth</code> must be between 01 and 12.</li> <li>Year Validation: The <code>NewYear</code> must be between 2000 and 2079.</li> <li>Date Progression: The new date (<code>NewYear</code> + <code>NewMonth</code>, formatted as YYYYMM) must not be earlier than the existing closed date in <code>ARCONT</code>.</li> <li>Update: If all validations pass, update the <code>ARCONT</code> record with <code>NewMonth</code> and <code>NewYear</code>.</li> <li>Error Handling: Return specific error messages for invalid inputs or date issues.</li> <li>Company Data Retrieval: Retrieve up to three non-deleted (<code>ACDEL \u2260 'D'</code>) company records from <code>ARCONT</code> for reference.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#process-steps","title":"Process Steps","text":"<ol> <li>Initialize:</li> <li>Clear internal variables and set default status.</li> <li> <p>Access <code>GSCONT</code> file with key <code>'00'</code> to retrieve a control company number, if applicable.</p> </li> <li> <p>Validate Inputs:</p> </li> <li>Company Number:<ul> <li>Query <code>ARCONT</code> with <code>CompanyNo</code>. If not found, return \"INVALID COMPANY NUMBER\".</li> </ul> </li> <li>Month:<ul> <li>Check if <code>NewMonth</code> is between 01 and 12. If not, return \"INVALID MONTH ENTERED\".</li> </ul> </li> <li>Year:<ul> <li>Check if <code>NewYear</code> is between 2000 and 2079. If not, return \"INVALID YEAR ENTERED\".</li> </ul> </li> <li> <p>Date Comparison:</p> <ul> <li>Combine <code>NewYear</code> and <code>NewMonth</code> into a 6-digit date (<code>YYYYMM</code>).</li> <li>Compare with <code>ACDTCL</code> (existing closed date) from <code>ARCONT</code>. If new date is earlier, return \"NEW DATE IS EARLIER THAN PREVIOUS DATE\".</li> </ul> </li> <li> <p>Update <code>ARCONT</code>:</p> </li> <li> <p>If all validations pass, update the <code>ARCONT</code> record for <code>CompanyNo</code> with:</p> <ul> <li><code>ACMNTH</code> = <code>NewMonth</code> (positions 130-131)</li> <li><code>ACYEAR</code> = <code>NewYear</code> (positions 126-129)</li> </ul> </li> <li> <p>Retrieve Company Data:</p> </li> <li>Read up to three non-deleted (<code>ACDEL \u2260 'D'</code>) records from <code>ARCONT</code>, storing:<ul> <li>Company Number (<code>ACCO</code>)</li> <li>Company Name (<code>ACNAME</code>)</li> <li>Closed Month (<code>ACMNTH</code>)</li> <li>Closed Year (<code>ACYEAR</code>)</li> </ul> </li> <li> <p>Return these records in the output.</p> </li> <li> <p>Return Status:</p> </li> <li>If update succeeds, return \"SUCCESS\" and company data.</li> <li>If any validation fails, return the corresponding error message.</li> </ol>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#calculations","title":"Calculations","text":"<ul> <li>Date Formatting:</li> <li>Combine <code>NewYear</code> and <code>NewMonth</code> into a 6-digit numeric date (<code>YYYYMM</code>) for comparison.</li> <li>Example: For <code>NewYear = 2025</code>, <code>NewMonth = 06</code>, create <code>DATE = 202506</code>.</li> <li>Date Comparison:</li> <li>Compare <code>DATE</code> (new date) with <code>ACDTCL</code> (existing closed date, formatted as <code>YYYYMM</code>) to ensure the new date is not earlier.</li> <li>Example: If <code>ACDTCL = 202505</code> and <code>DATE = 202504</code>, the comparison fails (202504 &lt; 202505).</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#data-sources","title":"Data Sources","text":"<ul> <li>ARCONT (Updatable Disk File):</li> <li>Key: Company Number (<code>ACCO</code>, position 2)</li> <li>Fields: <code>ACDEL</code> (delete flag), <code>ACCO</code> (company number), <code>ACNAME</code> (company name), <code>ACYEAR</code> (closed year), <code>ACMNTH</code> (closed month), <code>ACDTCL</code> (closed date, YYYYMM)</li> <li>GSCONT (Input-Only Disk File):</li> <li>Key: Company Number (<code>GXCONO</code>, position 2)</li> <li>Used to retrieve a control record (key <code>'00'</code>) for default company number.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#error-messages","title":"Error Messages","text":"<ul> <li>\"INVALID COMPANY NUMBER\": <code>CompanyNo</code> not found in <code>ARCONT</code>.</li> <li>\"INVALID MONTH ENTERED\": <code>NewMonth</code> not 01-12.</li> <li>\"INVALID YEAR ENTERED\": <code>NewYear</code> not 2000-2079.</li> <li>\"NEW DATE IS EARLIER THAN PREVIOUS DATE\": New date (<code>YYYYMM</code>) earlier than <code>ACDTCL</code>.</li> <li>\"SUCCESS\": Update completed successfully.</li> </ul>"},{"location":"accounts-receivable/09%20Control%20File/AR933P%20Control%20File%20Lastest%20Month%20Closed/Summary%20AR933P%20OCL/#notes","title":"Notes","text":"<ul> <li>The function assumes direct input without user interaction, replacing the original screen-based input (<code>AR933PD</code>).</li> <li>No external programs are called; all logic is self-contained.</li> <li>The function handles cancellation internally (e.g., via an invalid input check) rather than a cancel key.</li> </ul> <p>This document reimagines the <code>AR933P</code> program's functionality as a single, programmatic function, maintaining the core business logic and validations while eliminating screen-based interaction. Let me know if you need further refinements or additional details!</p>"}]}